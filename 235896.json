{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#getAutoPrefixTermsEnum(Terms,PrefixTerm).mjava","commits":[{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#getAutoPrefixTermsEnum(Terms,PrefixTerm).mjava","pathOld":"/dev/null","sourceNew":"  private TermsEnum getAutoPrefixTermsEnum(Terms terms, final PrefixTerm prefix) throws IOException {\n    assert prefixDocs != null;\n    prefixDocs.clear(0, prefixDocs.length());\n\n    prefixTermsEnum = prefix.getTermsEnum(terms.iterator(prefixTermsEnum));\n\n    //System.out.println(\"BTTW.getAutoPrefixTE: prefix=\" + prefix);\n    while (prefixTermsEnum.next() != null) {\n      //System.out.println(\"    got term=\" + prefixTermsEnum.term().utf8ToString());\n      //termCount++;\n      prefixDocsEnum = prefixTermsEnum.postings(null, prefixDocsEnum, 0);\n      //System.out.println(\"      \" + prefixDocsEnum + \" doc=\" + prefixDocsEnum.docID());\n      prefixDocs.or(prefixDocsEnum);\n    }\n\n    //System.out.println(\"  done terms: \" + prefixDocs.cardinality() + \" doc seen; \" + termCount + \" terms seen\");\n    return prefixFixedBitsTermsEnum;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#getAutoPrefixTermsEnum(Terms,PrefixTerm).mjava","pathOld":"/dev/null","sourceNew":"  private TermsEnum getAutoPrefixTermsEnum(Terms terms, final PrefixTerm prefix) throws IOException {\n    assert prefixDocs != null;\n    prefixDocs.clear(0, prefixDocs.length());\n\n    prefixTermsEnum = prefix.getTermsEnum(terms.iterator(prefixTermsEnum));\n\n    //System.out.println(\"BTTW.getAutoPrefixTE: prefix=\" + prefix);\n    while (prefixTermsEnum.next() != null) {\n      //System.out.println(\"    got term=\" + prefixTermsEnum.term().utf8ToString());\n      //termCount++;\n      prefixDocsEnum = prefixTermsEnum.postings(null, prefixDocsEnum, 0);\n      //System.out.println(\"      \" + prefixDocsEnum + \" doc=\" + prefixDocsEnum.docID());\n      prefixDocs.or(prefixDocsEnum);\n    }\n\n    //System.out.println(\"  done terms: \" + prefixDocs.cardinality() + \" doc seen; \" + termCount + \" terms seen\");\n    return prefixFixedBitsTermsEnum;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#getAutoPrefixTermsEnum(Terms,PrefixTerm).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#getAutoPrefixTermsEnum(Terms,PrefixTerm).mjava","sourceNew":"  private TermsEnum getAutoPrefixTermsEnum(Terms terms, final PrefixTerm prefix) throws IOException {\n    assert prefixDocs != null;\n    prefixDocs.clear(0, prefixDocs.length());\n\n    prefixTermsEnum = prefix.getTermsEnum(terms.iterator());\n\n    //System.out.println(\"BTTW.getAutoPrefixTE: prefix=\" + prefix);\n    while (prefixTermsEnum.next() != null) {\n      //System.out.println(\"    got term=\" + prefixTermsEnum.term().utf8ToString());\n      //termCount++;\n      prefixDocsEnum = prefixTermsEnum.postings(null, prefixDocsEnum, 0);\n      //System.out.println(\"      \" + prefixDocsEnum + \" doc=\" + prefixDocsEnum.docID());\n      prefixDocs.or(prefixDocsEnum);\n    }\n\n    //System.out.println(\"  done terms: \" + prefixDocs.cardinality() + \" doc seen; \" + termCount + \" terms seen\");\n    return prefixFixedBitsTermsEnum;\n  }\n\n","sourceOld":"  private TermsEnum getAutoPrefixTermsEnum(Terms terms, final PrefixTerm prefix) throws IOException {\n    assert prefixDocs != null;\n    prefixDocs.clear(0, prefixDocs.length());\n\n    prefixTermsEnum = prefix.getTermsEnum(terms.iterator(prefixTermsEnum));\n\n    //System.out.println(\"BTTW.getAutoPrefixTE: prefix=\" + prefix);\n    while (prefixTermsEnum.next() != null) {\n      //System.out.println(\"    got term=\" + prefixTermsEnum.term().utf8ToString());\n      //termCount++;\n      prefixDocsEnum = prefixTermsEnum.postings(null, prefixDocsEnum, 0);\n      //System.out.println(\"      \" + prefixDocsEnum + \" doc=\" + prefixDocsEnum.docID());\n      prefixDocs.or(prefixDocsEnum);\n    }\n\n    //System.out.println(\"  done terms: \" + prefixDocs.cardinality() + \" doc seen; \" + termCount + \" terms seen\");\n    return prefixFixedBitsTermsEnum;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#getAutoPrefixTermsEnum(Terms,PrefixTerm).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#getAutoPrefixTermsEnum(Terms,PrefixTerm).mjava","sourceNew":"  private TermsEnum getAutoPrefixTermsEnum(Terms terms, final PrefixTerm prefix) throws IOException {\n    assert prefixDocs != null;\n    prefixDocs.clear(0, prefixDocs.length());\n\n    prefixTermsEnum = prefix.getTermsEnum(terms.iterator());\n\n    //System.out.println(\"BTTW.getAutoPrefixTE: prefix=\" + prefix);\n    while (prefixTermsEnum.next() != null) {\n      //System.out.println(\"    got term=\" + prefixTermsEnum.term().utf8ToString());\n      //termCount++;\n      prefixDocsEnum = prefixTermsEnum.postings(prefixDocsEnum, 0);\n      //System.out.println(\"      \" + prefixDocsEnum + \" doc=\" + prefixDocsEnum.docID());\n      prefixDocs.or(prefixDocsEnum);\n    }\n\n    //System.out.println(\"  done terms: \" + prefixDocs.cardinality() + \" doc seen; \" + termCount + \" terms seen\");\n    return prefixFixedBitsTermsEnum;\n  }\n\n","sourceOld":"  private TermsEnum getAutoPrefixTermsEnum(Terms terms, final PrefixTerm prefix) throws IOException {\n    assert prefixDocs != null;\n    prefixDocs.clear(0, prefixDocs.length());\n\n    prefixTermsEnum = prefix.getTermsEnum(terms.iterator());\n\n    //System.out.println(\"BTTW.getAutoPrefixTE: prefix=\" + prefix);\n    while (prefixTermsEnum.next() != null) {\n      //System.out.println(\"    got term=\" + prefixTermsEnum.term().utf8ToString());\n      //termCount++;\n      prefixDocsEnum = prefixTermsEnum.postings(null, prefixDocsEnum, 0);\n      //System.out.println(\"      \" + prefixDocsEnum + \" doc=\" + prefixDocsEnum.docID());\n      prefixDocs.or(prefixDocsEnum);\n    }\n\n    //System.out.println(\"  done terms: \" + prefixDocs.cardinality() + \" doc seen; \" + termCount + \" terms seen\");\n    return prefixFixedBitsTermsEnum;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25b8a027ba57951e63075a2ae9647c5c4a8c5c5f","date":1466407389,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#getAutoPrefixTermsEnum(Terms,PrefixTerm).mjava","sourceNew":null,"sourceOld":"  private TermsEnum getAutoPrefixTermsEnum(Terms terms, final PrefixTerm prefix) throws IOException {\n    assert prefixDocs != null;\n    prefixDocs.clear(0, prefixDocs.length());\n\n    prefixTermsEnum = prefix.getTermsEnum(terms.iterator());\n\n    //System.out.println(\"BTTW.getAutoPrefixTE: prefix=\" + prefix);\n    while (prefixTermsEnum.next() != null) {\n      //System.out.println(\"    got term=\" + prefixTermsEnum.term().utf8ToString());\n      //termCount++;\n      prefixDocsEnum = prefixTermsEnum.postings(prefixDocsEnum, 0);\n      //System.out.println(\"      \" + prefixDocsEnum + \" doc=\" + prefixDocsEnum.docID());\n      prefixDocs.or(prefixDocsEnum);\n    }\n\n    //System.out.println(\"  done terms: \" + prefixDocs.cardinality() + \" doc seen; \" + termCount + \" terms seen\");\n    return prefixFixedBitsTermsEnum;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aaba221b22442bdf0ef28770c25fe259dfb3f55","date":1466496193,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#getAutoPrefixTermsEnum(Terms,PrefixTerm).mjava","sourceNew":null,"sourceOld":"  private TermsEnum getAutoPrefixTermsEnum(Terms terms, final PrefixTerm prefix) throws IOException {\n    assert prefixDocs != null;\n    prefixDocs.clear(0, prefixDocs.length());\n\n    prefixTermsEnum = prefix.getTermsEnum(terms.iterator());\n\n    //System.out.println(\"BTTW.getAutoPrefixTE: prefix=\" + prefix);\n    while (prefixTermsEnum.next() != null) {\n      //System.out.println(\"    got term=\" + prefixTermsEnum.term().utf8ToString());\n      //termCount++;\n      prefixDocsEnum = prefixTermsEnum.postings(prefixDocsEnum, 0);\n      //System.out.println(\"      \" + prefixDocsEnum + \" doc=\" + prefixDocsEnum.docID());\n      prefixDocs.or(prefixDocsEnum);\n    }\n\n    //System.out.println(\"  done terms: \" + prefixDocs.cardinality() + \" doc seen; \" + termCount + \" terms seen\");\n    return prefixFixedBitsTermsEnum;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#getAutoPrefixTermsEnum(Terms,PrefixTerm).mjava","sourceNew":null,"sourceOld":"  private TermsEnum getAutoPrefixTermsEnum(Terms terms, final PrefixTerm prefix) throws IOException {\n    assert prefixDocs != null;\n    prefixDocs.clear(0, prefixDocs.length());\n\n    prefixTermsEnum = prefix.getTermsEnum(terms.iterator());\n\n    //System.out.println(\"BTTW.getAutoPrefixTE: prefix=\" + prefix);\n    while (prefixTermsEnum.next() != null) {\n      //System.out.println(\"    got term=\" + prefixTermsEnum.term().utf8ToString());\n      //termCount++;\n      prefixDocsEnum = prefixTermsEnum.postings(prefixDocsEnum, 0);\n      //System.out.println(\"      \" + prefixDocsEnum + \" doc=\" + prefixDocsEnum.docID());\n      prefixDocs.or(prefixDocsEnum);\n    }\n\n    //System.out.println(\"  done terms: \" + prefixDocs.cardinality() + \" doc seen; \" + termCount + \" terms seen\");\n    return prefixFixedBitsTermsEnum;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["3e8715d826e588419327562287d5d6a8040d63d6"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"6aaba221b22442bdf0ef28770c25fe259dfb3f55":["0f4464508ee83288c8c4585b533f9faaa93aa314","25b8a027ba57951e63075a2ae9647c5c4a8c5c5f"],"25b8a027ba57951e63075a2ae9647c5c4a8c5c5f":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e8715d826e588419327562287d5d6a8040d63d6"],"3e8715d826e588419327562287d5d6a8040d63d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0f4464508ee83288c8c4585b533f9faaa93aa314","6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6aaba221b22442bdf0ef28770c25fe259dfb3f55"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["6aaba221b22442bdf0ef28770c25fe259dfb3f55","25b8a027ba57951e63075a2ae9647c5c4a8c5c5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6aaba221b22442bdf0ef28770c25fe259dfb3f55":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"25b8a027ba57951e63075a2ae9647c5c4a8c5c5f":["6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"3e8715d826e588419327562287d5d6a8040d63d6":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","d2638f781be724518ff6c2263d14a48cf6e68017"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}