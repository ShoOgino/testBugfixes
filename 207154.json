{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#constructParser(SolrClient,SolrParams).mjava","commits":[{"id":"3a6fbf1484b3c2b38b75d59998de5fe4330b6b40","date":1478163495,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#constructParser(SolrClient,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  // temporary...\n  public static TupleStreamParser constructParser(SolrClient server, SolrParams requestParams) throws IOException, SolrServerException {\n    String p = requestParams.get(\"qt\");\n    if (p != null) {\n      ModifiableSolrParams modifiableSolrParams = (ModifiableSolrParams) requestParams;\n      modifiableSolrParams.remove(\"qt\");\n    }\n\n    String wt = requestParams.get(CommonParams.WT, \"json\");\n    assert CommonParams.JSON.equals(wt);\n    QueryRequest query = new QueryRequest(requestParams);\n    query.setPath(p);\n    query.setResponseParser(new InputStreamResponseParser(wt));\n    query.setMethod(SolrRequest.METHOD.POST);\n    NamedList<Object> genericResponse = server.request(query);\n    InputStream stream = (InputStream) genericResponse.get(\"stream\");\n    InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n    return new JSONTupleStream(reader);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#constructParser(SolrClient,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  // temporary...\n  public static TupleStreamParser constructParser(SolrClient server, SolrParams requestParams) throws IOException, SolrServerException {\n    String p = requestParams.get(\"qt\");\n    if (p != null) {\n      ModifiableSolrParams modifiableSolrParams = (ModifiableSolrParams) requestParams;\n      modifiableSolrParams.remove(\"qt\");\n    }\n\n    String wt = requestParams.get(CommonParams.WT, \"json\");\n    assert CommonParams.JSON.equals(wt);\n    QueryRequest query = new QueryRequest(requestParams);\n    query.setPath(p);\n    query.setResponseParser(new InputStreamResponseParser(wt));\n    query.setMethod(SolrRequest.METHOD.POST);\n    NamedList<Object> genericResponse = server.request(query);\n    InputStream stream = (InputStream) genericResponse.get(\"stream\");\n    InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n    return new JSONTupleStream(reader);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da8b6cfd1b67b932db9907356935046c4d40d033","date":1479958221,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#constructParser(SolrClient,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#constructParser(SolrClient,SolrParams).mjava","sourceNew":"  // temporary...\n  public static TupleStreamParser constructParser(SolrClient server, SolrParams requestParams) throws IOException, SolrServerException {\n    String p = requestParams.get(\"qt\");\n    if (p != null) {\n      ModifiableSolrParams modifiableSolrParams = (ModifiableSolrParams) requestParams;\n      modifiableSolrParams.remove(\"qt\");\n    }\n\n    String wt = requestParams.get(CommonParams.WT, \"json\");\n    QueryRequest query = new QueryRequest(requestParams);\n    query.setPath(p);\n    query.setResponseParser(new InputStreamResponseParser(wt));\n    query.setMethod(SolrRequest.METHOD.POST);\n    NamedList<Object> genericResponse = server.request(query);\n    InputStream stream = (InputStream) genericResponse.get(\"stream\");\n    if (CommonParams.JAVABIN.equals(wt)) {\n      return new JavabinTupleStreamParser(stream, true);\n    } else {\n      InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n      return new JSONTupleStream(reader);\n    }\n  }\n\n","sourceOld":"  // temporary...\n  public static TupleStreamParser constructParser(SolrClient server, SolrParams requestParams) throws IOException, SolrServerException {\n    String p = requestParams.get(\"qt\");\n    if (p != null) {\n      ModifiableSolrParams modifiableSolrParams = (ModifiableSolrParams) requestParams;\n      modifiableSolrParams.remove(\"qt\");\n    }\n\n    String wt = requestParams.get(CommonParams.WT, \"json\");\n    assert CommonParams.JSON.equals(wt);\n    QueryRequest query = new QueryRequest(requestParams);\n    query.setPath(p);\n    query.setResponseParser(new InputStreamResponseParser(wt));\n    query.setMethod(SolrRequest.METHOD.POST);\n    NamedList<Object> genericResponse = server.request(query);\n    InputStream stream = (InputStream) genericResponse.get(\"stream\");\n    InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n    return new JSONTupleStream(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#constructParser(SolrClient,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#constructParser(SolrClient,SolrParams).mjava","sourceNew":"  // temporary...\n  public static TupleStreamParser constructParser(SolrClient server, SolrParams requestParams) throws IOException, SolrServerException {\n    String p = requestParams.get(\"qt\");\n    if (p != null) {\n      ModifiableSolrParams modifiableSolrParams = (ModifiableSolrParams) requestParams;\n      modifiableSolrParams.remove(\"qt\");\n    }\n\n    String wt = requestParams.get(CommonParams.WT, \"json\");\n    QueryRequest query = new QueryRequest(requestParams);\n    query.setPath(p);\n    query.setResponseParser(new InputStreamResponseParser(wt));\n    query.setMethod(SolrRequest.METHOD.POST);\n    NamedList<Object> genericResponse = server.request(query);\n    InputStream stream = (InputStream) genericResponse.get(\"stream\");\n    if (CommonParams.JAVABIN.equals(wt)) {\n      return new JavabinTupleStreamParser(stream, true);\n    } else {\n      InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n      return new JSONTupleStream(reader);\n    }\n  }\n\n","sourceOld":"  // temporary...\n  public static TupleStreamParser constructParser(SolrClient server, SolrParams requestParams) throws IOException, SolrServerException {\n    String p = requestParams.get(\"qt\");\n    if (p != null) {\n      ModifiableSolrParams modifiableSolrParams = (ModifiableSolrParams) requestParams;\n      modifiableSolrParams.remove(\"qt\");\n    }\n\n    String wt = requestParams.get(CommonParams.WT, \"json\");\n    assert CommonParams.JSON.equals(wt);\n    QueryRequest query = new QueryRequest(requestParams);\n    query.setPath(p);\n    query.setResponseParser(new InputStreamResponseParser(wt));\n    query.setMethod(SolrRequest.METHOD.POST);\n    NamedList<Object> genericResponse = server.request(query);\n    InputStream stream = (InputStream) genericResponse.get(\"stream\");\n    InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n    return new JSONTupleStream(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fa113475b0d7da1c7f347c5c0014c210851f7c0","date":1495464242,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#constructParser(SolrClient,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#constructParser(SolrClient,SolrParams).mjava","sourceNew":"  // temporary...\n  public TupleStreamParser constructParser(SolrClient server, SolrParams requestParams) throws IOException, SolrServerException {\n    String p = requestParams.get(\"qt\");\n    if (p != null) {\n      ModifiableSolrParams modifiableSolrParams = (ModifiableSolrParams) requestParams;\n      modifiableSolrParams.remove(\"qt\");\n    }\n\n    String wt = requestParams.get(CommonParams.WT, \"json\");\n    QueryRequest query = new QueryRequest(requestParams);\n    query.setPath(p);\n    query.setResponseParser(new InputStreamResponseParser(wt));\n    query.setMethod(SolrRequest.METHOD.POST);\n    NamedList<Object> genericResponse = server.request(query);\n    InputStream stream = (InputStream) genericResponse.get(\"stream\");\n    this.closeableHttpResponse = (CloseableHttpResponse)genericResponse.get(\"closeableResponse\");\n    if (CommonParams.JAVABIN.equals(wt)) {\n      return new JavabinTupleStreamParser(stream, true);\n    } else {\n      InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n      return new JSONTupleStream(reader);\n    }\n  }\n\n","sourceOld":"  // temporary...\n  public static TupleStreamParser constructParser(SolrClient server, SolrParams requestParams) throws IOException, SolrServerException {\n    String p = requestParams.get(\"qt\");\n    if (p != null) {\n      ModifiableSolrParams modifiableSolrParams = (ModifiableSolrParams) requestParams;\n      modifiableSolrParams.remove(\"qt\");\n    }\n\n    String wt = requestParams.get(CommonParams.WT, \"json\");\n    QueryRequest query = new QueryRequest(requestParams);\n    query.setPath(p);\n    query.setResponseParser(new InputStreamResponseParser(wt));\n    query.setMethod(SolrRequest.METHOD.POST);\n    NamedList<Object> genericResponse = server.request(query);\n    InputStream stream = (InputStream) genericResponse.get(\"stream\");\n    if (CommonParams.JAVABIN.equals(wt)) {\n      return new JavabinTupleStreamParser(stream, true);\n    } else {\n      InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n      return new JSONTupleStream(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#constructParser(SolrClient,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#constructParser(SolrClient,SolrParams).mjava","sourceNew":"  // temporary...\n  public TupleStreamParser constructParser(SolrClient server, SolrParams requestParams) throws IOException, SolrServerException {\n    String p = requestParams.get(\"qt\");\n    if (p != null) {\n      ModifiableSolrParams modifiableSolrParams = (ModifiableSolrParams) requestParams;\n      modifiableSolrParams.remove(\"qt\");\n    }\n\n    String wt = requestParams.get(CommonParams.WT, \"json\");\n    QueryRequest query = new QueryRequest(requestParams);\n    query.setPath(p);\n    query.setResponseParser(new InputStreamResponseParser(wt));\n    query.setMethod(SolrRequest.METHOD.POST);\n    NamedList<Object> genericResponse = server.request(query);\n    InputStream stream = (InputStream) genericResponse.get(\"stream\");\n    this.closeableHttpResponse = (CloseableHttpResponse)genericResponse.get(\"closeableResponse\");\n    if (CommonParams.JAVABIN.equals(wt)) {\n      return new JavabinTupleStreamParser(stream, true);\n    } else {\n      InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n      return new JSONTupleStream(reader);\n    }\n  }\n\n","sourceOld":"  // temporary...\n  public static TupleStreamParser constructParser(SolrClient server, SolrParams requestParams) throws IOException, SolrServerException {\n    String p = requestParams.get(\"qt\");\n    if (p != null) {\n      ModifiableSolrParams modifiableSolrParams = (ModifiableSolrParams) requestParams;\n      modifiableSolrParams.remove(\"qt\");\n    }\n\n    String wt = requestParams.get(CommonParams.WT, \"json\");\n    QueryRequest query = new QueryRequest(requestParams);\n    query.setPath(p);\n    query.setResponseParser(new InputStreamResponseParser(wt));\n    query.setMethod(SolrRequest.METHOD.POST);\n    NamedList<Object> genericResponse = server.request(query);\n    InputStream stream = (InputStream) genericResponse.get(\"stream\");\n    if (CommonParams.JAVABIN.equals(wt)) {\n      return new JavabinTupleStreamParser(stream, true);\n    } else {\n      InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n      return new JSONTupleStream(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac1e7fa558287a811ea07634d815ee7b1c541284","date":1500910922,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#constructParser(SolrClient,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#constructParser(SolrClient,SolrParams).mjava","sourceNew":"  // temporary...\n  public TupleStreamParser constructParser(SolrClient server, SolrParams requestParams) throws IOException, SolrServerException {\n    String p = requestParams.get(\"qt\");\n    if (p != null) {\n      ModifiableSolrParams modifiableSolrParams = (ModifiableSolrParams) requestParams;\n      modifiableSolrParams.remove(\"qt\");\n      //performance optimization - remove extra whitespace by default when streaming\n      modifiableSolrParams.set(\"indent\", modifiableSolrParams.get(\"indent\", \"off\"));\n    }\n\n    String wt = requestParams.get(CommonParams.WT, \"json\");\n    QueryRequest query = new QueryRequest(requestParams);\n    query.setPath(p);\n    query.setResponseParser(new InputStreamResponseParser(wt));\n    query.setMethod(SolrRequest.METHOD.POST);\n    NamedList<Object> genericResponse = server.request(query);\n    InputStream stream = (InputStream) genericResponse.get(\"stream\");\n    this.closeableHttpResponse = (CloseableHttpResponse)genericResponse.get(\"closeableResponse\");\n    if (CommonParams.JAVABIN.equals(wt)) {\n      return new JavabinTupleStreamParser(stream, true);\n    } else {\n      InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n      return new JSONTupleStream(reader);\n    }\n  }\n\n","sourceOld":"  // temporary...\n  public TupleStreamParser constructParser(SolrClient server, SolrParams requestParams) throws IOException, SolrServerException {\n    String p = requestParams.get(\"qt\");\n    if (p != null) {\n      ModifiableSolrParams modifiableSolrParams = (ModifiableSolrParams) requestParams;\n      modifiableSolrParams.remove(\"qt\");\n    }\n\n    String wt = requestParams.get(CommonParams.WT, \"json\");\n    QueryRequest query = new QueryRequest(requestParams);\n    query.setPath(p);\n    query.setResponseParser(new InputStreamResponseParser(wt));\n    query.setMethod(SolrRequest.METHOD.POST);\n    NamedList<Object> genericResponse = server.request(query);\n    InputStream stream = (InputStream) genericResponse.get(\"stream\");\n    this.closeableHttpResponse = (CloseableHttpResponse)genericResponse.get(\"closeableResponse\");\n    if (CommonParams.JAVABIN.equals(wt)) {\n      return new JavabinTupleStreamParser(stream, true);\n    } else {\n      InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n      return new JSONTupleStream(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#constructParser(SolrClient,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#constructParser(SolrClient,SolrParams).mjava","sourceNew":"  // temporary...\n  public TupleStreamParser constructParser(SolrClient server, SolrParams requestParams) throws IOException, SolrServerException {\n    String p = requestParams.get(\"qt\");\n    if (p != null) {\n      ModifiableSolrParams modifiableSolrParams = (ModifiableSolrParams) requestParams;\n      modifiableSolrParams.remove(\"qt\");\n      //performance optimization - remove extra whitespace by default when streaming\n      modifiableSolrParams.set(\"indent\", modifiableSolrParams.get(\"indent\", \"off\"));\n    }\n\n    String wt = requestParams.get(CommonParams.WT, \"json\");\n    QueryRequest query = new QueryRequest(requestParams);\n    query.setPath(p);\n    query.setResponseParser(new InputStreamResponseParser(wt));\n    query.setMethod(SolrRequest.METHOD.POST);\n    NamedList<Object> genericResponse = server.request(query);\n    InputStream stream = (InputStream) genericResponse.get(\"stream\");\n    this.closeableHttpResponse = (CloseableHttpResponse)genericResponse.get(\"closeableResponse\");\n    if (CommonParams.JAVABIN.equals(wt)) {\n      return new JavabinTupleStreamParser(stream, true);\n    } else {\n      InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n      return new JSONTupleStream(reader);\n    }\n  }\n\n","sourceOld":"  // temporary...\n  public TupleStreamParser constructParser(SolrClient server, SolrParams requestParams) throws IOException, SolrServerException {\n    String p = requestParams.get(\"qt\");\n    if (p != null) {\n      ModifiableSolrParams modifiableSolrParams = (ModifiableSolrParams) requestParams;\n      modifiableSolrParams.remove(\"qt\");\n    }\n\n    String wt = requestParams.get(CommonParams.WT, \"json\");\n    QueryRequest query = new QueryRequest(requestParams);\n    query.setPath(p);\n    query.setResponseParser(new InputStreamResponseParser(wt));\n    query.setMethod(SolrRequest.METHOD.POST);\n    NamedList<Object> genericResponse = server.request(query);\n    InputStream stream = (InputStream) genericResponse.get(\"stream\");\n    this.closeableHttpResponse = (CloseableHttpResponse)genericResponse.get(\"closeableResponse\");\n    if (CommonParams.JAVABIN.equals(wt)) {\n      return new JavabinTupleStreamParser(stream, true);\n    } else {\n      InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n      return new JSONTupleStream(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#constructParser(SolrClient,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#constructParser(SolrClient,SolrParams).mjava","sourceNew":"  // temporary...\n  public TupleStreamParser constructParser(SolrClient server, SolrParams requestParams) throws IOException, SolrServerException {\n    String p = requestParams.get(\"qt\");\n    if (p != null) {\n      ModifiableSolrParams modifiableSolrParams = (ModifiableSolrParams) requestParams;\n      modifiableSolrParams.remove(\"qt\");\n      //performance optimization - remove extra whitespace by default when streaming\n      modifiableSolrParams.set(\"indent\", modifiableSolrParams.get(\"indent\", \"off\"));\n    }\n\n    String wt = requestParams.get(CommonParams.WT, \"json\");\n    QueryRequest query = new QueryRequest(requestParams);\n    query.setPath(p);\n    query.setResponseParser(new InputStreamResponseParser(wt));\n    query.setMethod(SolrRequest.METHOD.POST);\n    NamedList<Object> genericResponse = server.request(query);\n    InputStream stream = (InputStream) genericResponse.get(\"stream\");\n    this.closeableHttpResponse = (CloseableHttpResponse)genericResponse.get(\"closeableResponse\");\n    if (CommonParams.JAVABIN.equals(wt)) {\n      return new JavabinTupleStreamParser(stream, true);\n    } else {\n      InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n      return new JSONTupleStream(reader);\n    }\n  }\n\n","sourceOld":"  // temporary...\n  public TupleStreamParser constructParser(SolrClient server, SolrParams requestParams) throws IOException, SolrServerException {\n    String p = requestParams.get(\"qt\");\n    if (p != null) {\n      ModifiableSolrParams modifiableSolrParams = (ModifiableSolrParams) requestParams;\n      modifiableSolrParams.remove(\"qt\");\n    }\n\n    String wt = requestParams.get(CommonParams.WT, \"json\");\n    QueryRequest query = new QueryRequest(requestParams);\n    query.setPath(p);\n    query.setResponseParser(new InputStreamResponseParser(wt));\n    query.setMethod(SolrRequest.METHOD.POST);\n    NamedList<Object> genericResponse = server.request(query);\n    InputStream stream = (InputStream) genericResponse.get(\"stream\");\n    this.closeableHttpResponse = (CloseableHttpResponse)genericResponse.get(\"closeableResponse\");\n    if (CommonParams.JAVABIN.equals(wt)) {\n      return new JavabinTupleStreamParser(stream, true);\n    } else {\n      InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n      return new JSONTupleStream(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe214d6e09deed3001159c1ad5173f9c8fc4a7f5","date":1563597632,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#constructParser(SolrClient,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#constructParser(SolrClient,SolrParams).mjava","sourceNew":"  // temporary...\n  public TupleStreamParser constructParser(SolrClient server, SolrParams requestParams) throws IOException, SolrServerException {\n    String p = requestParams.get(\"qt\");\n    if (p != null) {\n      ModifiableSolrParams modifiableSolrParams = (ModifiableSolrParams) requestParams;\n      modifiableSolrParams.remove(\"qt\");\n      //performance optimization - remove extra whitespace by default when streaming\n      modifiableSolrParams.set(\"indent\", modifiableSolrParams.get(\"indent\", \"off\"));\n    }\n\n    String wt = requestParams.get(CommonParams.WT, \"json\");\n    QueryRequest query = new QueryRequest(requestParams);\n    query.setPath(p);\n    query.setResponseParser(new InputStreamResponseParser(wt));\n    query.setMethod(SolrRequest.METHOD.POST);\n    NamedList<Object> genericResponse = server.request(query);\n    InputStream stream = (InputStream) genericResponse.get(\"stream\");\n    this.closeableHttpResponse = (CloseableHttpResponse)genericResponse.get(\"closeableResponse\");\n    if (CommonParams.JAVABIN.equals(wt)) {\n      return new JavabinTupleStreamParser(stream, true);\n    } else {\n      InputStreamReader reader = new InputStreamReader(stream, StandardCharsets.UTF_8);\n      return new JSONTupleStream(reader);\n    }\n  }\n\n","sourceOld":"  // temporary...\n  public TupleStreamParser constructParser(SolrClient server, SolrParams requestParams) throws IOException, SolrServerException {\n    String p = requestParams.get(\"qt\");\n    if (p != null) {\n      ModifiableSolrParams modifiableSolrParams = (ModifiableSolrParams) requestParams;\n      modifiableSolrParams.remove(\"qt\");\n      //performance optimization - remove extra whitespace by default when streaming\n      modifiableSolrParams.set(\"indent\", modifiableSolrParams.get(\"indent\", \"off\"));\n    }\n\n    String wt = requestParams.get(CommonParams.WT, \"json\");\n    QueryRequest query = new QueryRequest(requestParams);\n    query.setPath(p);\n    query.setResponseParser(new InputStreamResponseParser(wt));\n    query.setMethod(SolrRequest.METHOD.POST);\n    NamedList<Object> genericResponse = server.request(query);\n    InputStream stream = (InputStream) genericResponse.get(\"stream\");\n    this.closeableHttpResponse = (CloseableHttpResponse)genericResponse.get(\"closeableResponse\");\n    if (CommonParams.JAVABIN.equals(wt)) {\n      return new JavabinTupleStreamParser(stream, true);\n    } else {\n      InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n      return new JSONTupleStream(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"deb4d0cfb021fa1b0c1e44571968b254f379ac6f","date":1564497726,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#constructParser(SolrClient,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#constructParser(SolrClient,SolrParams).mjava","sourceNew":"  // temporary...\n  public TupleStreamParser constructParser(SolrClient server, SolrParams requestParams) throws IOException, SolrServerException {\n    String p = requestParams.get(\"qt\");\n    if (p != null) {\n      ModifiableSolrParams modifiableSolrParams = (ModifiableSolrParams) requestParams;\n      modifiableSolrParams.remove(\"qt\");\n      //performance optimization - remove extra whitespace by default when streaming\n      modifiableSolrParams.set(\"indent\", modifiableSolrParams.get(\"indent\", \"off\"));\n    }\n\n    String wt = requestParams.get(CommonParams.WT, \"json\");\n    QueryRequest query = new QueryRequest(requestParams);\n    query.setPath(p);\n    query.setResponseParser(new InputStreamResponseParser(wt));\n    query.setMethod(SolrRequest.METHOD.POST);\n\n    if(user != null && password != null) {\n      query.setBasicAuthCredentials(user, password);\n    }\n\n    NamedList<Object> genericResponse = server.request(query);\n    InputStream stream = (InputStream) genericResponse.get(\"stream\");\n    this.closeableHttpResponse = (CloseableHttpResponse)genericResponse.get(\"closeableResponse\");\n    if (CommonParams.JAVABIN.equals(wt)) {\n      return new JavabinTupleStreamParser(stream, true);\n    } else {\n      InputStreamReader reader = new InputStreamReader(stream, StandardCharsets.UTF_8);\n      return new JSONTupleStream(reader);\n    }\n  }\n\n","sourceOld":"  // temporary...\n  public TupleStreamParser constructParser(SolrClient server, SolrParams requestParams) throws IOException, SolrServerException {\n    String p = requestParams.get(\"qt\");\n    if (p != null) {\n      ModifiableSolrParams modifiableSolrParams = (ModifiableSolrParams) requestParams;\n      modifiableSolrParams.remove(\"qt\");\n      //performance optimization - remove extra whitespace by default when streaming\n      modifiableSolrParams.set(\"indent\", modifiableSolrParams.get(\"indent\", \"off\"));\n    }\n\n    String wt = requestParams.get(CommonParams.WT, \"json\");\n    QueryRequest query = new QueryRequest(requestParams);\n    query.setPath(p);\n    query.setResponseParser(new InputStreamResponseParser(wt));\n    query.setMethod(SolrRequest.METHOD.POST);\n    NamedList<Object> genericResponse = server.request(query);\n    InputStream stream = (InputStream) genericResponse.get(\"stream\");\n    this.closeableHttpResponse = (CloseableHttpResponse)genericResponse.get(\"closeableResponse\");\n    if (CommonParams.JAVABIN.equals(wt)) {\n      return new JavabinTupleStreamParser(stream, true);\n    } else {\n      InputStreamReader reader = new InputStreamReader(stream, StandardCharsets.UTF_8);\n      return new JSONTupleStream(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#constructParser(SolrClient,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#constructParser(SolrClient,SolrParams).mjava","sourceNew":"  // temporary...\n  public TupleStreamParser constructParser(SolrClient server, SolrParams requestParams) throws IOException, SolrServerException {\n    String p = requestParams.get(\"qt\");\n    if (p != null) {\n      ModifiableSolrParams modifiableSolrParams = (ModifiableSolrParams) requestParams;\n      modifiableSolrParams.remove(\"qt\");\n      //performance optimization - remove extra whitespace by default when streaming\n      modifiableSolrParams.set(\"indent\", modifiableSolrParams.get(\"indent\", \"off\"));\n    }\n\n    String wt = requestParams.get(CommonParams.WT, \"json\");\n    QueryRequest query = new QueryRequest(requestParams);\n    query.setPath(p);\n    query.setResponseParser(new InputStreamResponseParser(wt));\n    query.setMethod(SolrRequest.METHOD.POST);\n\n    if(user != null && password != null) {\n      query.setBasicAuthCredentials(user, password);\n    }\n\n    NamedList<Object> genericResponse = server.request(query);\n    InputStream stream = (InputStream) genericResponse.get(\"stream\");\n    this.closeableHttpResponse = (CloseableHttpResponse)genericResponse.get(\"closeableResponse\");\n    if (CommonParams.JAVABIN.equals(wt)) {\n      return new JavabinTupleStreamParser(stream, true);\n    } else {\n      InputStreamReader reader = new InputStreamReader(stream, StandardCharsets.UTF_8);\n      return new JSONTupleStream(reader);\n    }\n  }\n\n","sourceOld":"  // temporary...\n  public TupleStreamParser constructParser(SolrClient server, SolrParams requestParams) throws IOException, SolrServerException {\n    String p = requestParams.get(\"qt\");\n    if (p != null) {\n      ModifiableSolrParams modifiableSolrParams = (ModifiableSolrParams) requestParams;\n      modifiableSolrParams.remove(\"qt\");\n      //performance optimization - remove extra whitespace by default when streaming\n      modifiableSolrParams.set(\"indent\", modifiableSolrParams.get(\"indent\", \"off\"));\n    }\n\n    String wt = requestParams.get(CommonParams.WT, \"json\");\n    QueryRequest query = new QueryRequest(requestParams);\n    query.setPath(p);\n    query.setResponseParser(new InputStreamResponseParser(wt));\n    query.setMethod(SolrRequest.METHOD.POST);\n    NamedList<Object> genericResponse = server.request(query);\n    InputStream stream = (InputStream) genericResponse.get(\"stream\");\n    this.closeableHttpResponse = (CloseableHttpResponse)genericResponse.get(\"closeableResponse\");\n    if (CommonParams.JAVABIN.equals(wt)) {\n      return new JavabinTupleStreamParser(stream, true);\n    } else {\n      InputStreamReader reader = new InputStreamReader(stream, StandardCharsets.UTF_8);\n      return new JSONTupleStream(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da8b6cfd1b67b932db9907356935046c4d40d033":["3a6fbf1484b3c2b38b75d59998de5fe4330b6b40"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3a6fbf1484b3c2b38b75d59998de5fe4330b6b40"],"9fa113475b0d7da1c7f347c5c0014c210851f7c0":["da8b6cfd1b67b932db9907356935046c4d40d033"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["e9017cf144952056066919f1ebc7897ff9bd71b1","ac1e7fa558287a811ea07634d815ee7b1c541284"],"3a6fbf1484b3c2b38b75d59998de5fe4330b6b40":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"deb4d0cfb021fa1b0c1e44571968b254f379ac6f":["fe214d6e09deed3001159c1ad5173f9c8fc4a7f5"],"f8061ddd97f3352007d927dae445884a6f3d857b":["fe214d6e09deed3001159c1ad5173f9c8fc4a7f5","deb4d0cfb021fa1b0c1e44571968b254f379ac6f"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["da8b6cfd1b67b932db9907356935046c4d40d033","9fa113475b0d7da1c7f347c5c0014c210851f7c0"],"a52341299179de5479672f7cf518bf4b173f34b3":["9fa113475b0d7da1c7f347c5c0014c210851f7c0","ac1e7fa558287a811ea07634d815ee7b1c541284"],"fe214d6e09deed3001159c1ad5173f9c8fc4a7f5":["a52341299179de5479672f7cf518bf4b173f34b3"],"727bb765ff2542275f6d31f67be18d7104bae148":["9720b151fde2073f4e401450f4574e5f31c2d0ff","da8b6cfd1b67b932db9907356935046c4d40d033"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["deb4d0cfb021fa1b0c1e44571968b254f379ac6f"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["9fa113475b0d7da1c7f347c5c0014c210851f7c0"]},"commit2Childs":{"da8b6cfd1b67b932db9907356935046c4d40d033":["9fa113475b0d7da1c7f347c5c0014c210851f7c0","e9017cf144952056066919f1ebc7897ff9bd71b1","727bb765ff2542275f6d31f67be18d7104bae148"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["727bb765ff2542275f6d31f67be18d7104bae148"],"9fa113475b0d7da1c7f347c5c0014c210851f7c0":["e9017cf144952056066919f1ebc7897ff9bd71b1","a52341299179de5479672f7cf518bf4b173f34b3","ac1e7fa558287a811ea07634d815ee7b1c541284"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"3a6fbf1484b3c2b38b75d59998de5fe4330b6b40":["da8b6cfd1b67b932db9907356935046c4d40d033","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"deb4d0cfb021fa1b0c1e44571968b254f379ac6f":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"e9017cf144952056066919f1ebc7897ff9bd71b1":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"a52341299179de5479672f7cf518bf4b173f34b3":["fe214d6e09deed3001159c1ad5173f9c8fc4a7f5"],"fe214d6e09deed3001159c1ad5173f9c8fc4a7f5":["deb4d0cfb021fa1b0c1e44571968b254f379ac6f","f8061ddd97f3352007d927dae445884a6f3d857b"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9720b151fde2073f4e401450f4574e5f31c2d0ff","3a6fbf1484b3c2b38b75d59998de5fe4330b6b40"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","f8061ddd97f3352007d927dae445884a6f3d857b","727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}