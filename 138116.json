{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    return new PositionCheckSpan(context, acceptDocs, termContexts);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    Spans matchSpans = match.getSpans(context, acceptDocs, termContexts);\n    return (matchSpans == null) ? null : new PositionCheckSpans(matchSpans);\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    return new PositionCheckSpan(context, acceptDocs, termContexts);\n  }\n\n","bugFix":null,"bugIntro":["fdd572df21b78bb2212d045bf26a2773a48b58e9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    Spans matchSpans = match.getSpans(context, acceptDocs, termContexts);\n    return (matchSpans == null) ? null : new PositionCheckSpans(matchSpans);\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    return new PositionCheckSpan(context, acceptDocs, termContexts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fdd572df21b78bb2212d045bf26a2773a48b58e9","date":1428851244,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    Spans matchSpans = match.getSpans(context, acceptDocs, termContexts);\n    return (matchSpans == null) ? null : new FilterSpans(matchSpans) {\n      @Override\n      protected AcceptStatus accept(Spans candidate) throws IOException {\n        return acceptPosition(candidate);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    Spans matchSpans = match.getSpans(context, acceptDocs, termContexts);\n    return (matchSpans == null) ? null : new PositionCheckSpans(matchSpans);\n  }\n\n","bugFix":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"bugIntro":["8f6e2f8b5923e09c68fcefca2b75678c8d9c89f2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2d530e71ed32ab23b34ca3fc72b080a554a40404","date":1432026158,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext],SpanCollector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery#getSpans(LeafReaderContext,Bits,Map[Term,TermContext]).mjava","sourceNew":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts, SpanCollector collector) throws IOException {\n    Spans matchSpans = match.getSpans(context, acceptDocs, termContexts, collector);\n    return (matchSpans == null) ? null : new FilterSpans(matchSpans) {\n      @Override\n      protected AcceptStatus accept(Spans candidate) throws IOException {\n        return acceptPosition(candidate);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {\n    Spans matchSpans = match.getSpans(context, acceptDocs, termContexts);\n    return (matchSpans == null) ? null : new FilterSpans(matchSpans) {\n      @Override\n      protected AcceptStatus accept(Spans candidate) throws IOException {\n        return acceptPosition(candidate);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"fdd572df21b78bb2212d045bf26a2773a48b58e9":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["fdd572df21b78bb2212d045bf26a2773a48b58e9"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"fab172655716b96f7e42376116235017a922de3a":["c9fb5f46e264daf5ba3860defe623a89d202dd87","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2d530e71ed32ab23b34ca3fc72b080a554a40404"]},"commit2Childs":{"fdd572df21b78bb2212d045bf26a2773a48b58e9":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["fdd572df21b78bb2212d045bf26a2773a48b58e9","fab172655716b96f7e42376116235017a922de3a"],"fab172655716b96f7e42376116235017a922de3a":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}