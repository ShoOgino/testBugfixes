{"path":"modules/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#[T]_createRandomFirstPassCollector(DocValues.Type,Sort,String,int).mjava","commits":[{"id":"166661dd25a09458b128e5c0b86e3b762a6ded68","date":1332333666,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#[T]_createRandomFirstPassCollector(DocValues.Type,Sort,String,int).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private <T> AbstractFirstPassGroupingCollector<T> createRandomFirstPassCollector(DocValues.Type dvType, Sort groupSort, String groupField, int topNGroups) throws IOException {\n    if (dvType != null) {\n      if (random.nextBoolean()) {\n        boolean diskResident = random.nextBoolean();\n        return DVFirstPassGroupingCollector.create(groupSort, topNGroups, groupField, dvType, diskResident);\n      } else if (random.nextBoolean()) {\n        return (AbstractFirstPassGroupingCollector<T>) new FunctionFirstPassGroupingCollector(new BytesRefFieldSource(groupField), new HashMap<Object, Object>(), groupSort, topNGroups);\n      } else {\n        return (AbstractFirstPassGroupingCollector<T>) new TermFirstPassGroupingCollector(groupField, groupSort, topNGroups);\n      }\n    } else {\n      if (random.nextBoolean()) {\n        return (AbstractFirstPassGroupingCollector<T>) new FunctionFirstPassGroupingCollector(new BytesRefFieldSource(groupField), new HashMap<Object, Object>(), groupSort, topNGroups);\n      } else {\n        return (AbstractFirstPassGroupingCollector<T>) new TermFirstPassGroupingCollector(groupField, groupSort, topNGroups);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#[T]_createRandomFirstPassCollector(DocValues.Type,Sort,String,int).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#[T]_createRandomFirstPassCollector(DocValues.Type,Sort,String,int).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private <T> AbstractFirstPassGroupingCollector<T> createRandomFirstPassCollector(DocValues.Type dvType, Sort groupSort, String groupField, int topNGroups) throws IOException {\n    Random random = random();\n    if (dvType != null) {\n      if (random.nextBoolean()) {\n        boolean diskResident = random.nextBoolean();\n        return DVFirstPassGroupingCollector.create(groupSort, topNGroups, groupField, dvType, diskResident);\n      } else if (random.nextBoolean()) {\n        return (AbstractFirstPassGroupingCollector<T>) new FunctionFirstPassGroupingCollector(new BytesRefFieldSource(groupField), new HashMap<Object, Object>(), groupSort, topNGroups);\n      } else {\n        return (AbstractFirstPassGroupingCollector<T>) new TermFirstPassGroupingCollector(groupField, groupSort, topNGroups);\n      }\n    } else {\n      if (random.nextBoolean()) {\n        return (AbstractFirstPassGroupingCollector<T>) new FunctionFirstPassGroupingCollector(new BytesRefFieldSource(groupField), new HashMap<Object, Object>(), groupSort, topNGroups);\n      } else {\n        return (AbstractFirstPassGroupingCollector<T>) new TermFirstPassGroupingCollector(groupField, groupSort, topNGroups);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private <T> AbstractFirstPassGroupingCollector<T> createRandomFirstPassCollector(DocValues.Type dvType, Sort groupSort, String groupField, int topNGroups) throws IOException {\n    if (dvType != null) {\n      if (random.nextBoolean()) {\n        boolean diskResident = random.nextBoolean();\n        return DVFirstPassGroupingCollector.create(groupSort, topNGroups, groupField, dvType, diskResident);\n      } else if (random.nextBoolean()) {\n        return (AbstractFirstPassGroupingCollector<T>) new FunctionFirstPassGroupingCollector(new BytesRefFieldSource(groupField), new HashMap<Object, Object>(), groupSort, topNGroups);\n      } else {\n        return (AbstractFirstPassGroupingCollector<T>) new TermFirstPassGroupingCollector(groupField, groupSort, topNGroups);\n      }\n    } else {\n      if (random.nextBoolean()) {\n        return (AbstractFirstPassGroupingCollector<T>) new FunctionFirstPassGroupingCollector(new BytesRefFieldSource(groupField), new HashMap<Object, Object>(), groupSort, topNGroups);\n      } else {\n        return (AbstractFirstPassGroupingCollector<T>) new TermFirstPassGroupingCollector(groupField, groupSort, topNGroups);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#[T]_createRandomFirstPassCollector(DocValues.Type,Sort,String,int).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#[T]_createRandomFirstPassCollector(DocValues.Type,Sort,String,int).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private <T> AbstractFirstPassGroupingCollector<T> createRandomFirstPassCollector(DocValues.Type dvType, Sort groupSort, String groupField, int topNGroups) throws IOException {\n    Random random = random();\n    if (dvType != null) {\n      if (random.nextBoolean()) {\n        boolean diskResident = random.nextBoolean();\n        return DVFirstPassGroupingCollector.create(groupSort, topNGroups, groupField, dvType, diskResident);\n      } else if (random.nextBoolean()) {\n        return (AbstractFirstPassGroupingCollector<T>) new FunctionFirstPassGroupingCollector(new BytesRefFieldSource(groupField), new HashMap<Object, Object>(), groupSort, topNGroups);\n      } else {\n        return (AbstractFirstPassGroupingCollector<T>) new TermFirstPassGroupingCollector(groupField, groupSort, topNGroups);\n      }\n    } else {\n      if (random.nextBoolean()) {\n        return (AbstractFirstPassGroupingCollector<T>) new FunctionFirstPassGroupingCollector(new BytesRefFieldSource(groupField), new HashMap<Object, Object>(), groupSort, topNGroups);\n      } else {\n        return (AbstractFirstPassGroupingCollector<T>) new TermFirstPassGroupingCollector(groupField, groupSort, topNGroups);\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private <T> AbstractFirstPassGroupingCollector<T> createRandomFirstPassCollector(DocValues.Type dvType, Sort groupSort, String groupField, int topNGroups) throws IOException {\n    Random random = random();\n    if (dvType != null) {\n      if (random.nextBoolean()) {\n        boolean diskResident = random.nextBoolean();\n        return DVFirstPassGroupingCollector.create(groupSort, topNGroups, groupField, dvType, diskResident);\n      } else if (random.nextBoolean()) {\n        return (AbstractFirstPassGroupingCollector<T>) new FunctionFirstPassGroupingCollector(new BytesRefFieldSource(groupField), new HashMap<Object, Object>(), groupSort, topNGroups);\n      } else {\n        return (AbstractFirstPassGroupingCollector<T>) new TermFirstPassGroupingCollector(groupField, groupSort, topNGroups);\n      }\n    } else {\n      if (random.nextBoolean()) {\n        return (AbstractFirstPassGroupingCollector<T>) new FunctionFirstPassGroupingCollector(new BytesRefFieldSource(groupField), new HashMap<Object, Object>(), groupSort, topNGroups);\n      } else {\n        return (AbstractFirstPassGroupingCollector<T>) new TermFirstPassGroupingCollector(groupField, groupSort, topNGroups);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["166661dd25a09458b128e5c0b86e3b762a6ded68"],"166661dd25a09458b128e5c0b86e3b762a6ded68":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["166661dd25a09458b128e5c0b86e3b762a6ded68"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"166661dd25a09458b128e5c0b86e3b762a6ded68":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}