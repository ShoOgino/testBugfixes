{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingConfig#hasTriggerForEvents(AutoScaling.EventType...).mjava","commits":[{"id":"c32a8448145a74a8902798f2e63e322827757ff2","date":1496834422,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingConfig#hasTriggerForEvents(AutoScaling.EventType...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Check whether triggers for specific event type exist.\n   * @param types list of event types\n   * @return true if there's at least one trigger matching at least one event type,\n   * false otherwise,\n   */\n  public boolean hasTriggerForEvents(AutoScaling.EventType... types) {\n    if (types == null || types.length == 0) {\n      return false;\n    }\n    for (TriggerConfig config : getTriggerConfigs().values()) {\n      for (AutoScaling.EventType type : types) {\n        if (config.eventType.equals(type)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"664ff2b928393480d9655010aa700656b0fcade0","date":1496842764,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingConfig#hasTriggerForEvents(AutoScaling.EventType...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Check whether triggers for specific event type exist.\n   * @param types list of event types\n   * @return true if there's at least one trigger matching at least one event type,\n   * false otherwise,\n   */\n  public boolean hasTriggerForEvents(AutoScaling.EventType... types) {\n    if (types == null || types.length == 0) {\n      return false;\n    }\n    for (TriggerConfig config : getTriggerConfigs().values()) {\n      for (AutoScaling.EventType type : types) {\n        if (config.eventType.equals(type)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig#hasTriggerForEvents(TriggerEventType...).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingConfig#hasTriggerForEvents(AutoScaling.EventType...).mjava","sourceNew":"  /**\n   * Check whether triggers for specific event type exist.\n   * @param types list of event types\n   * @return true if there's at least one trigger matching at least one event type,\n   * false otherwise,\n   */\n  public boolean hasTriggerForEvents(TriggerEventType... types) {\n    if (types == null || types.length == 0) {\n      return false;\n    }\n    for (TriggerConfig config : getTriggerConfigs().values()) {\n      for (TriggerEventType type : types) {\n        if (config.event.equals(type)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Check whether triggers for specific event type exist.\n   * @param types list of event types\n   * @return true if there's at least one trigger matching at least one event type,\n   * false otherwise,\n   */\n  public boolean hasTriggerForEvents(AutoScaling.EventType... types) {\n    if (types == null || types.length == 0) {\n      return false;\n    }\n    for (TriggerConfig config : getTriggerConfigs().values()) {\n      for (AutoScaling.EventType type : types) {\n        if (config.eventType.equals(type)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c32a8448145a74a8902798f2e63e322827757ff2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["664ff2b928393480d9655010aa700656b0fcade0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"664ff2b928393480d9655010aa700656b0fcade0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c32a8448145a74a8902798f2e63e322827757ff2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c32a8448145a74a8902798f2e63e322827757ff2","cd5edd1f2b162a5cfa08efd17851a07373a96817","664ff2b928393480d9655010aa700656b0fcade0"],"c32a8448145a74a8902798f2e63e322827757ff2":["664ff2b928393480d9655010aa700656b0fcade0"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":[],"664ff2b928393480d9655010aa700656b0fcade0":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}