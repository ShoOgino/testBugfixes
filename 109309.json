{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/th/ThaiWordFilter#incrementToken().mjava","commits":[{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/th/ThaiWordFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  public final boolean incrementToken() throws IOException {\n    if (thaiState != null) {\n      int start = breaker.current();\n      int end = breaker.next();\n      if (end != BreakIterator.DONE) {\n        restoreState(thaiState);\n        termAtt.setTermBuffer(termAtt.termBuffer(), start, end - start);\n        offsetAtt.setOffset(offsetAtt.startOffset() + start, offsetAtt.startOffset() + end);\n        return true;\n      }\n      thaiState = null;\n    }\n\n    if (input.incrementToken() == false || termAtt.termLength() == 0)\n      return false;\n\n    String text = termAtt.term();\n    if (UnicodeBlock.of(text.charAt(0)) != UnicodeBlock.THAI) {\n      termAtt.setTermBuffer(text.toLowerCase());\n      return true;\n    }\n    \n    thaiState = captureState();\n\n    breaker.setText(text);\n    int end = breaker.next();\n    if (end != BreakIterator.DONE) {\n      termAtt.setTermBuffer(text, 0, end);\n      offsetAtt.setOffset(offsetAtt.startOffset(), offsetAtt.startOffset() + end);\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/th/ThaiWordFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/th/ThaiWordFilter#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (thaiState != null) {\n      int start = breaker.current();\n      int end = breaker.next();\n      if (end != BreakIterator.DONE) {\n        restoreState(thaiState);\n        termAtt.setTermBuffer(termAtt.termBuffer(), start, end - start);\n        offsetAtt.setOffset(offsetAtt.startOffset() + start, offsetAtt.startOffset() + end);\n        return true;\n      }\n      thaiState = null;\n    }\n\n    if (input.incrementToken() == false || termAtt.termLength() == 0)\n      return false;\n\n    String text = termAtt.term();\n    if (UnicodeBlock.of(text.charAt(0)) != UnicodeBlock.THAI) {\n      termAtt.setTermBuffer(text.toLowerCase());\n      return true;\n    }\n    \n    thaiState = captureState();\n\n    breaker.setText(text);\n    int end = breaker.next();\n    if (end != BreakIterator.DONE) {\n      termAtt.setTermBuffer(text, 0, end);\n      offsetAtt.setOffset(offsetAtt.startOffset(), offsetAtt.startOffset() + end);\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  public final boolean incrementToken() throws IOException {\n    if (thaiState != null) {\n      int start = breaker.current();\n      int end = breaker.next();\n      if (end != BreakIterator.DONE) {\n        restoreState(thaiState);\n        termAtt.setTermBuffer(termAtt.termBuffer(), start, end - start);\n        offsetAtt.setOffset(offsetAtt.startOffset() + start, offsetAtt.startOffset() + end);\n        return true;\n      }\n      thaiState = null;\n    }\n\n    if (input.incrementToken() == false || termAtt.termLength() == 0)\n      return false;\n\n    String text = termAtt.term();\n    if (UnicodeBlock.of(text.charAt(0)) != UnicodeBlock.THAI) {\n      termAtt.setTermBuffer(text.toLowerCase());\n      return true;\n    }\n    \n    thaiState = captureState();\n\n    breaker.setText(text);\n    int end = breaker.next();\n    if (end != BreakIterator.DONE) {\n      termAtt.setTermBuffer(text, 0, end);\n      offsetAtt.setOffset(offsetAtt.startOffset(), offsetAtt.startOffset() + end);\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/th/ThaiWordFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/th/ThaiWordFilter#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (thaiState != null) {\n      int start = breaker.current();\n      int end = breaker.next();\n      if (end != BreakIterator.DONE) {\n        restoreState(thaiState);\n        termAtt.setTermBuffer(termAtt.termBuffer(), start, end - start);\n        offsetAtt.setOffset(offsetAtt.startOffset() + start, offsetAtt.startOffset() + end);\n        return true;\n      }\n      thaiState = null;\n    }\n\n    if (input.incrementToken() == false || termAtt.termLength() == 0)\n      return false;\n\n    String text = termAtt.term();\n    if (UnicodeBlock.of(text.charAt(0)) != UnicodeBlock.THAI) {\n      termAtt.setTermBuffer(text.toLowerCase());\n      return true;\n    }\n    \n    thaiState = captureState();\n\n    breaker.setText(text);\n    int end = breaker.next();\n    if (end != BreakIterator.DONE) {\n      termAtt.setTermBuffer(text, 0, end);\n      offsetAtt.setOffset(offsetAtt.startOffset(), offsetAtt.startOffset() + end);\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (thaiState != null) {\n      int start = breaker.current();\n      int end = breaker.next();\n      if (end != BreakIterator.DONE) {\n        restoreState(thaiState);\n        termAtt.setTermBuffer(termAtt.termBuffer(), start, end - start);\n        offsetAtt.setOffset(offsetAtt.startOffset() + start, offsetAtt.startOffset() + end);\n        return true;\n      }\n      thaiState = null;\n    }\n\n    if (input.incrementToken() == false || termAtt.termLength() == 0)\n      return false;\n\n    String text = termAtt.term();\n    if (UnicodeBlock.of(text.charAt(0)) != UnicodeBlock.THAI) {\n      termAtt.setTermBuffer(text.toLowerCase());\n      return true;\n    }\n    \n    thaiState = captureState();\n\n    breaker.setText(text);\n    int end = breaker.next();\n    if (end != BreakIterator.DONE) {\n      termAtt.setTermBuffer(text, 0, end);\n      offsetAtt.setOffset(offsetAtt.startOffset(), offsetAtt.startOffset() + end);\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}