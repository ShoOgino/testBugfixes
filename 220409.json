{"path":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory#warnIfNonManagedSchemaExists().mjava","commits":[{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory#warnIfNonManagedSchemaExists().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return whether a non-managed schema exists, either in local storage or on ZooKeeper. \n   */\n  private void warnIfNonManagedSchemaExists() {\n    if ( ! resourceName.equals(managedSchemaResourceName)) {\n      boolean exists = false;\n      SolrResourceLoader loader = config.getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n        String nonManagedSchemaPath = zkLoader.getCollectionZkPath() + \"/\" + resourceName;\n        try {\n          exists = zkLoader.getZkController().pathExists(nonManagedSchemaPath);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt(); // Restore the interrupted status\n          log.warn(\"\", e); // Log as warning and suppress the exception \n        } catch (KeeperException e) {\n          // log as warning and suppress the exception\n          log.warn(\"Error checking for the existence of the non-managed schema \" + resourceName, e);\n        }\n      } else { // Config is not in ZooKeeper\n        InputStream nonManagedSchemaInputStream = null;\n        try {\n          nonManagedSchemaInputStream = loader.openSchema(resourceName);\n          if (null != nonManagedSchemaInputStream) {\n            exists = true;\n          }\n        } catch (IOException e) {\n          // This is expected when the non-managed schema does not exist\n        } finally {\n          IOUtils.closeQuietly(nonManagedSchemaInputStream);\n        }\n      }\n      if (exists) {\n        log.warn(\"The schema has been upgraded to managed, but the non-managed schema \" + resourceName\n                + \" is still loadable.  PLEASE REMOVE THIS FILE.\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17778d9c1f3a8a67383edebf24754bf30a5120f8","date":1415342366,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory#warnIfNonManagedSchemaExists().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory#warnIfNonManagedSchemaExists().mjava","sourceNew":"  /**\n   * Return whether a non-managed schema exists, either in local storage or on ZooKeeper. \n   */\n  private void warnIfNonManagedSchemaExists() {\n    if ( ! resourceName.equals(managedSchemaResourceName)) {\n      boolean exists = false;\n      SolrResourceLoader loader = config.getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n        String nonManagedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + resourceName;\n        try {\n          exists = zkLoader.getZkController().pathExists(nonManagedSchemaPath);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt(); // Restore the interrupted status\n          log.warn(\"\", e); // Log as warning and suppress the exception \n        } catch (KeeperException e) {\n          // log as warning and suppress the exception\n          log.warn(\"Error checking for the existence of the non-managed schema \" + resourceName, e);\n        }\n      } else { // Config is not in ZooKeeper\n        InputStream nonManagedSchemaInputStream = null;\n        try {\n          nonManagedSchemaInputStream = loader.openSchema(resourceName);\n          if (null != nonManagedSchemaInputStream) {\n            exists = true;\n          }\n        } catch (IOException e) {\n          // This is expected when the non-managed schema does not exist\n        } finally {\n          IOUtils.closeQuietly(nonManagedSchemaInputStream);\n        }\n      }\n      if (exists) {\n        log.warn(\"The schema has been upgraded to managed, but the non-managed schema \" + resourceName\n                + \" is still loadable.  PLEASE REMOVE THIS FILE.\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Return whether a non-managed schema exists, either in local storage or on ZooKeeper. \n   */\n  private void warnIfNonManagedSchemaExists() {\n    if ( ! resourceName.equals(managedSchemaResourceName)) {\n      boolean exists = false;\n      SolrResourceLoader loader = config.getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n        String nonManagedSchemaPath = zkLoader.getCollectionZkPath() + \"/\" + resourceName;\n        try {\n          exists = zkLoader.getZkController().pathExists(nonManagedSchemaPath);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt(); // Restore the interrupted status\n          log.warn(\"\", e); // Log as warning and suppress the exception \n        } catch (KeeperException e) {\n          // log as warning and suppress the exception\n          log.warn(\"Error checking for the existence of the non-managed schema \" + resourceName, e);\n        }\n      } else { // Config is not in ZooKeeper\n        InputStream nonManagedSchemaInputStream = null;\n        try {\n          nonManagedSchemaInputStream = loader.openSchema(resourceName);\n          if (null != nonManagedSchemaInputStream) {\n            exists = true;\n          }\n        } catch (IOException e) {\n          // This is expected when the non-managed schema does not exist\n        } finally {\n          IOUtils.closeQuietly(nonManagedSchemaInputStream);\n        }\n      }\n      if (exists) {\n        log.warn(\"The schema has been upgraded to managed, but the non-managed schema \" + resourceName\n                + \" is still loadable.  PLEASE REMOVE THIS FILE.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory#warnIfNonManagedSchemaExists().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory#warnIfNonManagedSchemaExists().mjava","sourceNew":"  /**\n   * Return whether a non-managed schema exists, either in local storage or on ZooKeeper. \n   */\n  private void warnIfNonManagedSchemaExists() {\n    if ( ! resourceName.equals(managedSchemaResourceName)) {\n      boolean exists = false;\n      SolrResourceLoader loader = config.getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n        String nonManagedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + resourceName;\n        try {\n          exists = zkLoader.getZkController().pathExists(nonManagedSchemaPath);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt(); // Restore the interrupted status\n          log.warn(\"\", e); // Log as warning and suppress the exception \n        } catch (KeeperException e) {\n          // log as warning and suppress the exception\n          log.warn(\"Error checking for the existence of the non-managed schema \" + resourceName, e);\n        }\n      } else { // Config is not in ZooKeeper\n        InputStream nonManagedSchemaInputStream = null;\n        try {\n          nonManagedSchemaInputStream = loader.openResource(resourceName);\n          if (null != nonManagedSchemaInputStream) {\n            exists = true;\n          }\n        } catch (IOException e) {\n          // This is expected when the non-managed schema does not exist\n        } finally {\n          IOUtils.closeQuietly(nonManagedSchemaInputStream);\n        }\n      }\n      if (exists) {\n        log.warn(\"The schema has been upgraded to managed, but the non-managed schema \" + resourceName\n                + \" is still loadable.  PLEASE REMOVE THIS FILE.\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Return whether a non-managed schema exists, either in local storage or on ZooKeeper. \n   */\n  private void warnIfNonManagedSchemaExists() {\n    if ( ! resourceName.equals(managedSchemaResourceName)) {\n      boolean exists = false;\n      SolrResourceLoader loader = config.getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n        String nonManagedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + resourceName;\n        try {\n          exists = zkLoader.getZkController().pathExists(nonManagedSchemaPath);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt(); // Restore the interrupted status\n          log.warn(\"\", e); // Log as warning and suppress the exception \n        } catch (KeeperException e) {\n          // log as warning and suppress the exception\n          log.warn(\"Error checking for the existence of the non-managed schema \" + resourceName, e);\n        }\n      } else { // Config is not in ZooKeeper\n        InputStream nonManagedSchemaInputStream = null;\n        try {\n          nonManagedSchemaInputStream = loader.openSchema(resourceName);\n          if (null != nonManagedSchemaInputStream) {\n            exists = true;\n          }\n        } catch (IOException e) {\n          // This is expected when the non-managed schema does not exist\n        } finally {\n          IOUtils.closeQuietly(nonManagedSchemaInputStream);\n        }\n      }\n      if (exists) {\n        log.warn(\"The schema has been upgraded to managed, but the non-managed schema \" + resourceName\n                + \" is still loadable.  PLEASE REMOVE THIS FILE.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9df8125ba9193a2e2e285ed92157810b1952a244","date":1587326330,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory#warnIfNonManagedSchemaExists().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory#warnIfNonManagedSchemaExists().mjava","sourceNew":"  /**\n   * Return whether a non-managed schema exists, either in local storage or on ZooKeeper. \n   */\n  private void warnIfNonManagedSchemaExists() {\n    if ( ! resourceName.equals(managedSchemaResourceName)) {\n      boolean exists = false;\n      SolrResourceLoader loader = config.getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n        String nonManagedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + resourceName;\n        try {\n          exists = zkLoader.getZkController().pathExists(nonManagedSchemaPath);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt(); // Restore the interrupted status\n          log.warn(\"\", e); // Log as warning and suppress the exception \n        } catch (KeeperException e) {\n          // log as warning and suppress the exception\n          log.warn(\"Error checking for the existence of the non-managed schema {}\", resourceName, e);\n        }\n      } else { // Config is not in ZooKeeper\n        InputStream nonManagedSchemaInputStream = null;\n        try {\n          nonManagedSchemaInputStream = loader.openResource(resourceName);\n          if (null != nonManagedSchemaInputStream) {\n            exists = true;\n          }\n        } catch (IOException e) {\n          // This is expected when the non-managed schema does not exist\n        } finally {\n          IOUtils.closeQuietly(nonManagedSchemaInputStream);\n        }\n      }\n      if (exists) {\n        log.warn(\"The schema has been upgraded to managed, but the non-managed schema {} is still loadable.  PLEASE REMOVE THIS FILE.\"\n            , resourceName);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Return whether a non-managed schema exists, either in local storage or on ZooKeeper. \n   */\n  private void warnIfNonManagedSchemaExists() {\n    if ( ! resourceName.equals(managedSchemaResourceName)) {\n      boolean exists = false;\n      SolrResourceLoader loader = config.getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n        String nonManagedSchemaPath = zkLoader.getConfigSetZkPath() + \"/\" + resourceName;\n        try {\n          exists = zkLoader.getZkController().pathExists(nonManagedSchemaPath);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt(); // Restore the interrupted status\n          log.warn(\"\", e); // Log as warning and suppress the exception \n        } catch (KeeperException e) {\n          // log as warning and suppress the exception\n          log.warn(\"Error checking for the existence of the non-managed schema \" + resourceName, e);\n        }\n      } else { // Config is not in ZooKeeper\n        InputStream nonManagedSchemaInputStream = null;\n        try {\n          nonManagedSchemaInputStream = loader.openResource(resourceName);\n          if (null != nonManagedSchemaInputStream) {\n            exists = true;\n          }\n        } catch (IOException e) {\n          // This is expected when the non-managed schema does not exist\n        } finally {\n          IOUtils.closeQuietly(nonManagedSchemaInputStream);\n        }\n      }\n      if (exists) {\n        log.warn(\"The schema has been upgraded to managed, but the non-managed schema \" + resourceName\n                + \" is still loadable.  PLEASE REMOVE THIS FILE.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["17778d9c1f3a8a67383edebf24754bf30a5120f8"],"17778d9c1f3a8a67383edebf24754bf30a5120f8":["08970e5b8411182a29412c177eff67ec1110095b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9df8125ba9193a2e2e285ed92157810b1952a244"],"9df8125ba9193a2e2e285ed92157810b1952a244":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"08970e5b8411182a29412c177eff67ec1110095b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["9df8125ba9193a2e2e285ed92157810b1952a244"],"17778d9c1f3a8a67383edebf24754bf30a5120f8":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08970e5b8411182a29412c177eff67ec1110095b"],"08970e5b8411182a29412c177eff67ec1110095b":["17778d9c1f3a8a67383edebf24754bf30a5120f8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9df8125ba9193a2e2e285ed92157810b1952a244":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}