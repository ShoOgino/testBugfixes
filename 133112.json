{"path":"src/java/org/apache/solr/handler/XMLLoader#processUpdate(UpdateRequestProcessor,XMLStreamReader).mjava","commits":[{"id":"e34a66231ee53fe909c5f7c0e71131fcb5246d89","date":1226598668,"type":1,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XMLLoader#processUpdate(UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#processUpdate(UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand();\n            boolean overwrite = true;  // the default\n\n            Boolean overwritePending = null;\n            Boolean overwriteCommitted = null;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.ALLOW_DUPS.equals(attrName)) {\n                overwrite = !StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else if (XmlUpdateRequestHandler.OVERWRITE_PENDING.equals(attrName)) {\n                overwritePending = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.OVERWRITE_COMMITTED.equals(attrName)) {\n                overwriteCommitted = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n            // check if these flags are set\n            if (overwritePending != null && overwriteCommitted != null) {\n              if (overwritePending != overwriteCommitted) {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                        \"can't have different values for 'overwritePending' and 'overwriteCommitted'\");\n              }\n              overwrite = overwritePending;\n            }\n            addCmd.overwriteCommitted = overwrite;\n            addCmd.overwritePending = overwrite;\n            addCmd.allowDups = !overwrite;\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            boolean sawWaitSearcher = false, sawWaitFlush = false;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_FLUSH.equals(attrName)) {\n                cmd.waitFlush = StrUtils.parseBoolean(attrVal);\n                sawWaitFlush = true;\n              } else if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n                sawWaitSearcher = true;\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            // If waitFlush is specified and waitSearcher wasn't, then\n            // clear waitSearcher.\n            if (sawWaitFlush && !sawWaitSearcher) {\n              cmd.waitSearcher = false;\n            }\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand();\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate( UpdateRequestProcessor processor, XMLStreamReader parser)\n    throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException \n  {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(ADD)) {\n            log.trace(\"SolrCore.update(add)\");\n            \n            addCmd = new AddUpdateCommand();\n            boolean overwrite=true;  // the default\n\n            Boolean overwritePending = null;\n            Boolean overwriteCommitted = null;\n            for (int i=0; i<parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (OVERWRITE.equals(attrName)) {\n                overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (ALLOW_DUPS.equals(attrName)) {\n                overwrite = !StrUtils.parseBoolean(attrVal);\n              } else if ( COMMIT_WITHIN.equals(attrName) ) {\n                addCmd.commitWithin = Integer.parseInt( attrVal );\n              } else if ( OVERWRITE_PENDING.equals(attrName) ) {\n                overwritePending = StrUtils.parseBoolean(attrVal);\n              } else if ( OVERWRITE_COMMITTED.equals(attrName) ) {\n                overwriteCommitted = StrUtils.parseBoolean(attrVal);\n              } else {\n                log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n            \n            // check if these flags are set\n            if( overwritePending != null && overwriteCommitted != null ) {\n              if( overwritePending != overwriteCommitted ) {\n                throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n                    \"can't have different values for 'overwritePending' and 'overwriteCommitted'\" );\n              }\n              overwrite=overwritePending;\n            }\n            addCmd.overwriteCommitted =  overwrite;\n            addCmd.overwritePending   =  overwrite;\n            addCmd.allowDups          = !overwrite;\n          } \n          else if (\"doc\".equals(currTag)) {\n            log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc( parser );\n            processor.processAdd(addCmd);\n          } \n          else if ( COMMIT.equals(currTag) || OPTIMIZE.equals(currTag)) {\n            log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(OPTIMIZE.equals(currTag));\n\n            boolean sawWaitSearcher = false, sawWaitFlush = false;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (WAIT_FLUSH.equals(attrName)) {\n                cmd.waitFlush = StrUtils.parseBoolean(attrVal);\n                sawWaitFlush = true;\n              } else if (WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n                sawWaitSearcher = true;\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)){\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              }\n                else {\n                log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            // If waitFlush is specified and waitSearcher wasn't, then\n            // clear waitSearcher.\n            if (sawWaitFlush && !sawWaitSearcher) {\n              cmd.waitSearcher = false;\n            }\n            processor.processCommit( cmd );\n          } // end commit\n          else if ( ROLLBACK.equals(currTag) ) {\n            log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand();\n\n            processor.processRollback( cmd );\n          } // end rollback\n          else if (DELETE.equals(currTag)) {\n            log.trace(\"parsing delete\");\n            processDelete( processor, parser);\n          } // end delete\n          break;\n       }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"366ee8589b0d5578d8944e35470687383abbcd94","date":1250684482,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XMLLoader#processUpdate(UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"src/java/org/apache/solr/handler/XMLLoader#processUpdate(UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand();\n            boolean overwrite = true;  // the default\n\n            Boolean overwritePending = null;\n            Boolean overwriteCommitted = null;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.ALLOW_DUPS.equals(attrName)) {\n                overwrite = !StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else if (XmlUpdateRequestHandler.OVERWRITE_PENDING.equals(attrName)) {\n                overwritePending = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.OVERWRITE_COMMITTED.equals(attrName)) {\n                overwriteCommitted = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n            // check if these flags are set\n            if (overwritePending != null && overwriteCommitted != null) {\n              if (overwritePending != overwriteCommitted) {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                        \"can't have different values for 'overwritePending' and 'overwriteCommitted'\");\n              }\n              overwrite = overwritePending;\n            }\n            addCmd.overwriteCommitted = overwrite;\n            addCmd.overwritePending = overwrite;\n            addCmd.allowDups = !overwrite;\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            boolean sawWaitSearcher = false, sawWaitFlush = false;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_FLUSH.equals(attrName)) {\n                cmd.waitFlush = StrUtils.parseBoolean(attrVal);\n                sawWaitFlush = true;\n              } else if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n                sawWaitSearcher = true;\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            // If waitFlush is specified and waitSearcher wasn't, then\n            // clear waitSearcher.\n            if (sawWaitFlush && !sawWaitSearcher) {\n              cmd.waitSearcher = false;\n            }\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand();\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand();\n            boolean overwrite = true;  // the default\n\n            Boolean overwritePending = null;\n            Boolean overwriteCommitted = null;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.ALLOW_DUPS.equals(attrName)) {\n                overwrite = !StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else if (XmlUpdateRequestHandler.OVERWRITE_PENDING.equals(attrName)) {\n                overwritePending = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.OVERWRITE_COMMITTED.equals(attrName)) {\n                overwriteCommitted = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n            // check if these flags are set\n            if (overwritePending != null && overwriteCommitted != null) {\n              if (overwritePending != overwriteCommitted) {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                        \"can't have different values for 'overwritePending' and 'overwriteCommitted'\");\n              }\n              overwrite = overwritePending;\n            }\n            addCmd.overwriteCommitted = overwrite;\n            addCmd.overwritePending = overwrite;\n            addCmd.allowDups = !overwrite;\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            boolean sawWaitSearcher = false, sawWaitFlush = false;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_FLUSH.equals(attrName)) {\n                cmd.waitFlush = StrUtils.parseBoolean(attrVal);\n                sawWaitFlush = true;\n              } else if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n                sawWaitSearcher = true;\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            // If waitFlush is specified and waitSearcher wasn't, then\n            // clear waitSearcher.\n            if (sawWaitFlush && !sawWaitSearcher) {\n              cmd.waitSearcher = false;\n            }\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand();\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/XMLLoader#processUpdate(UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"src/java/org/apache/solr/handler/XMLLoader#processUpdate(UpdateRequestProcessor,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand();\n            boolean overwrite = true;  // the default\n\n            Boolean overwritePending = null;\n            Boolean overwriteCommitted = null;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.ALLOW_DUPS.equals(attrName)) {\n                overwrite = !StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else if (XmlUpdateRequestHandler.OVERWRITE_PENDING.equals(attrName)) {\n                overwritePending = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.OVERWRITE_COMMITTED.equals(attrName)) {\n                overwriteCommitted = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n            // check if these flags are set\n            if (overwritePending != null && overwriteCommitted != null) {\n              if (overwritePending != overwriteCommitted) {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                        \"can't have different values for 'overwritePending' and 'overwriteCommitted'\");\n              }\n              overwrite = overwritePending;\n            }\n            addCmd.overwriteCommitted = overwrite;\n            addCmd.overwritePending = overwrite;\n            addCmd.allowDups = !overwrite;\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            boolean sawWaitSearcher = false, sawWaitFlush = false;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_FLUSH.equals(attrName)) {\n                cmd.waitFlush = StrUtils.parseBoolean(attrVal);\n                sawWaitFlush = true;\n              } else if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n                sawWaitSearcher = true;\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            // If waitFlush is specified and waitSearcher wasn't, then\n            // clear waitSearcher.\n            if (sawWaitFlush && !sawWaitSearcher) {\n              cmd.waitSearcher = false;\n            }\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand();\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate(UpdateRequestProcessor processor, XMLStreamReader parser)\n          throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(XmlUpdateRequestHandler.ADD)) {\n            XmlUpdateRequestHandler.log.trace(\"SolrCore.update(add)\");\n\n            addCmd = new AddUpdateCommand();\n            boolean overwrite = true;  // the default\n\n            Boolean overwritePending = null;\n            Boolean overwriteCommitted = null;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.OVERWRITE.equals(attrName)) {\n                overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.ALLOW_DUPS.equals(attrName)) {\n                overwrite = !StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.COMMIT_WITHIN.equals(attrName)) {\n                addCmd.commitWithin = Integer.parseInt(attrVal);\n              } else if (XmlUpdateRequestHandler.OVERWRITE_PENDING.equals(attrName)) {\n                overwritePending = StrUtils.parseBoolean(attrVal);\n              } else if (XmlUpdateRequestHandler.OVERWRITE_COMMITTED.equals(attrName)) {\n                overwriteCommitted = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n\n            // check if these flags are set\n            if (overwritePending != null && overwriteCommitted != null) {\n              if (overwritePending != overwriteCommitted) {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                        \"can't have different values for 'overwritePending' and 'overwriteCommitted'\");\n              }\n              overwrite = overwritePending;\n            }\n            addCmd.overwriteCommitted = overwrite;\n            addCmd.overwritePending = overwrite;\n            addCmd.allowDups = !overwrite;\n          } else if (\"doc\".equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc(parser);\n            processor.processAdd(addCmd);\n          } else if (XmlUpdateRequestHandler.COMMIT.equals(currTag) || XmlUpdateRequestHandler.OPTIMIZE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(XmlUpdateRequestHandler.OPTIMIZE.equals(currTag));\n\n            boolean sawWaitSearcher = false, sawWaitFlush = false;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (XmlUpdateRequestHandler.WAIT_FLUSH.equals(attrName)) {\n                cmd.waitFlush = StrUtils.parseBoolean(attrVal);\n                sawWaitFlush = true;\n              } else if (XmlUpdateRequestHandler.WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n                sawWaitSearcher = true;\n              } else if (UpdateParams.MAX_OPTIMIZE_SEGMENTS.equals(attrName)) {\n                cmd.maxOptimizeSegments = Integer.parseInt(attrVal);\n              } else if (UpdateParams.EXPUNGE_DELETES.equals(attrName)) {\n                cmd.expungeDeletes = StrUtils.parseBoolean(attrVal);\n              } else {\n                XmlUpdateRequestHandler.log.warn(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            // If waitFlush is specified and waitSearcher wasn't, then\n            // clear waitSearcher.\n            if (sawWaitFlush && !sawWaitSearcher) {\n              cmd.waitSearcher = false;\n            }\n            processor.processCommit(cmd);\n          } // end commit\n          else if (XmlUpdateRequestHandler.ROLLBACK.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing \" + currTag);\n\n            RollbackUpdateCommand cmd = new RollbackUpdateCommand();\n\n            processor.processRollback(cmd);\n          } // end rollback\n          else if (XmlUpdateRequestHandler.DELETE.equals(currTag)) {\n            XmlUpdateRequestHandler.log.trace(\"parsing delete\");\n            processDelete(processor, parser);\n          } // end delete\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"366ee8589b0d5578d8944e35470687383abbcd94":["e34a66231ee53fe909c5f7c0e71131fcb5246d89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["366ee8589b0d5578d8944e35470687383abbcd94"],"e34a66231ee53fe909c5f7c0e71131fcb5246d89":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"366ee8589b0d5578d8944e35470687383abbcd94":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e34a66231ee53fe909c5f7c0e71131fcb5246d89"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"e34a66231ee53fe909c5f7c0e71131fcb5246d89":["366ee8589b0d5578d8944e35470687383abbcd94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}