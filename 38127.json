{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42TermVectorsReader#readPositions(int,int,PackedInts.Reader,PackedInts.Reader,int[],int,int,int[][]).mjava","commits":[{"id":"3d5291145ae0cea7e6e6a2379f3a32643bf71bf6","date":1411857884,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42TermVectorsReader#readPositions(int,int,PackedInts.Reader,PackedInts.Reader,int[],int,int,int[][]).mjava","pathOld":"/dev/null","sourceNew":"  private int[][] readPositions(int skip, int numFields, PackedInts.Reader flags, PackedInts.Reader numTerms, int[] termFreqs, int flag, final int totalPositions, int[][] positionIndex) throws IOException {\n    final int[][] positions = new int[numFields][];\n    reader.reset(vectorsStream, totalPositions);\n    // skip\n    int toSkip = 0;\n    int termIndex = 0;\n    for (int i = 0; i < skip; ++i) {\n      final int f = (int) flags.get(i);\n      final int termCount = (int) numTerms.get(i);\n      if ((f & flag) != 0) {\n        for (int j = 0; j < termCount; ++j) {\n          final int freq = termFreqs[termIndex+j];\n          toSkip += freq;\n        }\n      }\n      termIndex += termCount;\n    }\n    reader.skip(toSkip);\n    // read doc positions\n    for (int i = 0; i < numFields; ++i) {\n      final int f = (int) flags.get(skip + i);\n      final int termCount = (int) numTerms.get(skip + i);\n      if ((f & flag) != 0) {\n        final int totalFreq = positionIndex[i][termCount];\n        final int[] fieldPositions = new int[totalFreq];\n        positions[i] = fieldPositions;\n        for (int j = 0; j < totalFreq; ) {\n          final LongsRef nextPositions = reader.next(totalFreq - j);\n          for (int k = 0; k < nextPositions.length; ++k) {\n            fieldPositions[j++] = (int) nextPositions.longs[nextPositions.offset + k];\n          }\n        }\n      }\n      termIndex += termCount;\n    }\n    reader.skip(totalPositions - reader.ord());\n    return positions;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42TermVectorsReader#readPositions(int,int,PackedInts.Reader,PackedInts.Reader,int[],int,int,int[][]).mjava","pathOld":"/dev/null","sourceNew":"  private int[][] readPositions(int skip, int numFields, PackedInts.Reader flags, PackedInts.Reader numTerms, int[] termFreqs, int flag, final int totalPositions, int[][] positionIndex) throws IOException {\n    final int[][] positions = new int[numFields][];\n    reader.reset(vectorsStream, totalPositions);\n    // skip\n    int toSkip = 0;\n    int termIndex = 0;\n    for (int i = 0; i < skip; ++i) {\n      final int f = (int) flags.get(i);\n      final int termCount = (int) numTerms.get(i);\n      if ((f & flag) != 0) {\n        for (int j = 0; j < termCount; ++j) {\n          final int freq = termFreqs[termIndex+j];\n          toSkip += freq;\n        }\n      }\n      termIndex += termCount;\n    }\n    reader.skip(toSkip);\n    // read doc positions\n    for (int i = 0; i < numFields; ++i) {\n      final int f = (int) flags.get(skip + i);\n      final int termCount = (int) numTerms.get(skip + i);\n      if ((f & flag) != 0) {\n        final int totalFreq = positionIndex[i][termCount];\n        final int[] fieldPositions = new int[totalFreq];\n        positions[i] = fieldPositions;\n        for (int j = 0; j < totalFreq; ) {\n          final LongsRef nextPositions = reader.next(totalFreq - j);\n          for (int k = 0; k < nextPositions.length; ++k) {\n            fieldPositions[j++] = (int) nextPositions.longs[nextPositions.offset + k];\n          }\n        }\n      }\n      termIndex += termCount;\n    }\n    reader.skip(totalPositions - reader.ord());\n    return positions;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42TermVectorsReader#readPositions(int,int,PackedInts.Reader,PackedInts.Reader,int[],int,int,int[][]).mjava","sourceNew":null,"sourceOld":"  private int[][] readPositions(int skip, int numFields, PackedInts.Reader flags, PackedInts.Reader numTerms, int[] termFreqs, int flag, final int totalPositions, int[][] positionIndex) throws IOException {\n    final int[][] positions = new int[numFields][];\n    reader.reset(vectorsStream, totalPositions);\n    // skip\n    int toSkip = 0;\n    int termIndex = 0;\n    for (int i = 0; i < skip; ++i) {\n      final int f = (int) flags.get(i);\n      final int termCount = (int) numTerms.get(i);\n      if ((f & flag) != 0) {\n        for (int j = 0; j < termCount; ++j) {\n          final int freq = termFreqs[termIndex+j];\n          toSkip += freq;\n        }\n      }\n      termIndex += termCount;\n    }\n    reader.skip(toSkip);\n    // read doc positions\n    for (int i = 0; i < numFields; ++i) {\n      final int f = (int) flags.get(skip + i);\n      final int termCount = (int) numTerms.get(skip + i);\n      if ((f & flag) != 0) {\n        final int totalFreq = positionIndex[i][termCount];\n        final int[] fieldPositions = new int[totalFreq];\n        positions[i] = fieldPositions;\n        for (int j = 0; j < totalFreq; ) {\n          final LongsRef nextPositions = reader.next(totalFreq - j);\n          for (int k = 0; k < nextPositions.length; ++k) {\n            fieldPositions[j++] = (int) nextPositions.longs[nextPositions.offset + k];\n          }\n        }\n      }\n      termIndex += termCount;\n    }\n    reader.skip(totalPositions - reader.ord());\n    return positions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9bb9a29a5e71a90295f175df8919802993142c9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d5291145ae0cea7e6e6a2379f3a32643bf71bf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3d5291145ae0cea7e6e6a2379f3a32643bf71bf6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["9bb9a29a5e71a90295f175df8919802993142c9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"9bb9a29a5e71a90295f175df8919802993142c9a":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9bb9a29a5e71a90295f175df8919802993142c9a","3d5291145ae0cea7e6e6a2379f3a32643bf71bf6"],"3d5291145ae0cea7e6e6a2379f3a32643bf71bf6":["9bb9a29a5e71a90295f175df8919802993142c9a"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}