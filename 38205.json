{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleStreamingTest#testWaitOptions().mjava","commits":[{"id":"ed0dd3d82be806ac8ab4e15bf5b89310270c0210","date":1349302029,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleStreamingTest#testWaitOptions().mjava","pathOld":"/dev/null","sourceNew":"  public void testWaitOptions() throws Exception {\n    // SOLR-3903\n    final List<Throwable> failures = new ArrayList<Throwable>();\n    ConcurrentUpdateSolrServer s = new ConcurrentUpdateSolrServer\n      (\"http://127.0.0.1:\"+port+context, 2, 2) {\n        @Override\n        public void handleError(Throwable ex) {\n          failures.add(ex);\n        }\n      };\n      \n    int docId = 42;\n    for (UpdateRequest.ACTION action : EnumSet.allOf(UpdateRequest.ACTION.class)) {\n      for (boolean waitSearch : Arrays.asList(true, false)) {\n        for (boolean waitFlush : Arrays.asList(true, false)) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          SolrInputDocument document = new SolrInputDocument();\n          document.addField(\"id\", docId++ );\n          updateRequest.add(document);\n          updateRequest.setAction(action, waitSearch, waitFlush);\n          s.request(updateRequest);\n        }\n      }\n    }\n    s.commit();\n    s.blockUntilFinished();\n    s.shutdown();\n\n    if (0 != failures.size()) {\n      assertEquals(failures.size() + \" Unexpected Exception, starting with...\", \n                   null, failures.get(0));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa11c355cd3b3b9207608b85fbd33b34f6f1966e","date":1361303536,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleStreamingTest#testWaitOptions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleStreamingTest#testWaitOptions().mjava","sourceNew":"  public void testWaitOptions() throws Exception {\n    // SOLR-3903\n    final List<Throwable> failures = new ArrayList<Throwable>();\n    ConcurrentUpdateSolrServer s = new ConcurrentUpdateSolrServer\n      (jetty.getBaseUrl().toString(), 2, 2) {\n        @Override\n        public void handleError(Throwable ex) {\n          failures.add(ex);\n        }\n      };\n      \n    int docId = 42;\n    for (UpdateRequest.ACTION action : EnumSet.allOf(UpdateRequest.ACTION.class)) {\n      for (boolean waitSearch : Arrays.asList(true, false)) {\n        for (boolean waitFlush : Arrays.asList(true, false)) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          SolrInputDocument document = new SolrInputDocument();\n          document.addField(\"id\", docId++ );\n          updateRequest.add(document);\n          updateRequest.setAction(action, waitSearch, waitFlush);\n          s.request(updateRequest);\n        }\n      }\n    }\n    s.commit();\n    s.blockUntilFinished();\n    s.shutdown();\n\n    if (0 != failures.size()) {\n      assertEquals(failures.size() + \" Unexpected Exception, starting with...\", \n                   null, failures.get(0));\n    }\n  }\n\n","sourceOld":"  public void testWaitOptions() throws Exception {\n    // SOLR-3903\n    final List<Throwable> failures = new ArrayList<Throwable>();\n    ConcurrentUpdateSolrServer s = new ConcurrentUpdateSolrServer\n      (\"http://127.0.0.1:\"+port+context, 2, 2) {\n        @Override\n        public void handleError(Throwable ex) {\n          failures.add(ex);\n        }\n      };\n      \n    int docId = 42;\n    for (UpdateRequest.ACTION action : EnumSet.allOf(UpdateRequest.ACTION.class)) {\n      for (boolean waitSearch : Arrays.asList(true, false)) {\n        for (boolean waitFlush : Arrays.asList(true, false)) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          SolrInputDocument document = new SolrInputDocument();\n          document.addField(\"id\", docId++ );\n          updateRequest.add(document);\n          updateRequest.setAction(action, waitSearch, waitFlush);\n          s.request(updateRequest);\n        }\n      }\n    }\n    s.commit();\n    s.blockUntilFinished();\n    s.shutdown();\n\n    if (0 != failures.size()) {\n      assertEquals(failures.size() + \" Unexpected Exception, starting with...\", \n                   null, failures.get(0));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3eac61f0ed7a1ba8a2d2f6298467a8141dcbbc9","date":1366986755,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleStreamingTest#testWaitOptions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleStreamingTest#testWaitOptions().mjava","sourceNew":"  public void testWaitOptions() throws Exception {\n    // SOLR-3903\n    final List<Throwable> failures = new ArrayList<Throwable>();\n    ConcurrentUpdateSolrServer s = new ConcurrentUpdateSolrServer\n      (jetty.getBaseUrl().toString() + \"/collection1\", 2, 2) {\n        @Override\n        public void handleError(Throwable ex) {\n          failures.add(ex);\n        }\n      };\n      \n    int docId = 42;\n    for (UpdateRequest.ACTION action : EnumSet.allOf(UpdateRequest.ACTION.class)) {\n      for (boolean waitSearch : Arrays.asList(true, false)) {\n        for (boolean waitFlush : Arrays.asList(true, false)) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          SolrInputDocument document = new SolrInputDocument();\n          document.addField(\"id\", docId++ );\n          updateRequest.add(document);\n          updateRequest.setAction(action, waitSearch, waitFlush);\n          s.request(updateRequest);\n        }\n      }\n    }\n    s.commit();\n    s.blockUntilFinished();\n    s.shutdown();\n\n    if (0 != failures.size()) {\n      assertEquals(failures.size() + \" Unexpected Exception, starting with...\", \n                   null, failures.get(0));\n    }\n  }\n\n","sourceOld":"  public void testWaitOptions() throws Exception {\n    // SOLR-3903\n    final List<Throwable> failures = new ArrayList<Throwable>();\n    ConcurrentUpdateSolrServer s = new ConcurrentUpdateSolrServer\n      (jetty.getBaseUrl().toString(), 2, 2) {\n        @Override\n        public void handleError(Throwable ex) {\n          failures.add(ex);\n        }\n      };\n      \n    int docId = 42;\n    for (UpdateRequest.ACTION action : EnumSet.allOf(UpdateRequest.ACTION.class)) {\n      for (boolean waitSearch : Arrays.asList(true, false)) {\n        for (boolean waitFlush : Arrays.asList(true, false)) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          SolrInputDocument document = new SolrInputDocument();\n          document.addField(\"id\", docId++ );\n          updateRequest.add(document);\n          updateRequest.setAction(action, waitSearch, waitFlush);\n          s.request(updateRequest);\n        }\n      }\n    }\n    s.commit();\n    s.blockUntilFinished();\n    s.shutdown();\n\n    if (0 != failures.size()) {\n      assertEquals(failures.size() + \" Unexpected Exception, starting with...\", \n                   null, failures.get(0));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleStreamingTest#testWaitOptions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleStreamingTest#testWaitOptions().mjava","sourceNew":"  public void testWaitOptions() throws Exception {\n    // SOLR-3903\n    final List<Throwable> failures = new ArrayList<>();\n    ConcurrentUpdateSolrServer s = new ConcurrentUpdateSolrServer\n      (jetty.getBaseUrl().toString() + \"/collection1\", 2, 2) {\n        @Override\n        public void handleError(Throwable ex) {\n          failures.add(ex);\n        }\n      };\n      \n    int docId = 42;\n    for (UpdateRequest.ACTION action : EnumSet.allOf(UpdateRequest.ACTION.class)) {\n      for (boolean waitSearch : Arrays.asList(true, false)) {\n        for (boolean waitFlush : Arrays.asList(true, false)) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          SolrInputDocument document = new SolrInputDocument();\n          document.addField(\"id\", docId++ );\n          updateRequest.add(document);\n          updateRequest.setAction(action, waitSearch, waitFlush);\n          s.request(updateRequest);\n        }\n      }\n    }\n    s.commit();\n    s.blockUntilFinished();\n    s.shutdown();\n\n    if (0 != failures.size()) {\n      assertEquals(failures.size() + \" Unexpected Exception, starting with...\", \n                   null, failures.get(0));\n    }\n  }\n\n","sourceOld":"  public void testWaitOptions() throws Exception {\n    // SOLR-3903\n    final List<Throwable> failures = new ArrayList<Throwable>();\n    ConcurrentUpdateSolrServer s = new ConcurrentUpdateSolrServer\n      (jetty.getBaseUrl().toString() + \"/collection1\", 2, 2) {\n        @Override\n        public void handleError(Throwable ex) {\n          failures.add(ex);\n        }\n      };\n      \n    int docId = 42;\n    for (UpdateRequest.ACTION action : EnumSet.allOf(UpdateRequest.ACTION.class)) {\n      for (boolean waitSearch : Arrays.asList(true, false)) {\n        for (boolean waitFlush : Arrays.asList(true, false)) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          SolrInputDocument document = new SolrInputDocument();\n          document.addField(\"id\", docId++ );\n          updateRequest.add(document);\n          updateRequest.setAction(action, waitSearch, waitFlush);\n          s.request(updateRequest);\n        }\n      }\n    }\n    s.commit();\n    s.blockUntilFinished();\n    s.shutdown();\n\n    if (0 != failures.size()) {\n      assertEquals(failures.size() + \" Unexpected Exception, starting with...\", \n                   null, failures.get(0));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleStreamingTest#testWaitOptions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleStreamingTest#testWaitOptions().mjava","sourceNew":"  public void testWaitOptions() throws Exception {\n    // SOLR-3903\n    final List<Throwable> failures = new ArrayList<>();\n    ConcurrentUpdateSolrClient concurrentClient = new ConcurrentUpdateSolrClient\n      (jetty.getBaseUrl().toString() + \"/collection1\", 2, 2) {\n        @Override\n        public void handleError(Throwable ex) {\n          failures.add(ex);\n        }\n      };\n      \n    int docId = 42;\n    for (UpdateRequest.ACTION action : EnumSet.allOf(UpdateRequest.ACTION.class)) {\n      for (boolean waitSearch : Arrays.asList(true, false)) {\n        for (boolean waitFlush : Arrays.asList(true, false)) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          SolrInputDocument document = new SolrInputDocument();\n          document.addField(\"id\", docId++ );\n          updateRequest.add(document);\n          updateRequest.setAction(action, waitSearch, waitFlush);\n          concurrentClient.request(updateRequest);\n        }\n      }\n    }\n    concurrentClient.commit();\n    concurrentClient.blockUntilFinished();\n    concurrentClient.shutdown();\n\n    if (0 != failures.size()) {\n      assertEquals(failures.size() + \" Unexpected Exception, starting with...\", \n                   null, failures.get(0));\n    }\n  }\n\n","sourceOld":"  public void testWaitOptions() throws Exception {\n    // SOLR-3903\n    final List<Throwable> failures = new ArrayList<>();\n    ConcurrentUpdateSolrServer s = new ConcurrentUpdateSolrServer\n      (jetty.getBaseUrl().toString() + \"/collection1\", 2, 2) {\n        @Override\n        public void handleError(Throwable ex) {\n          failures.add(ex);\n        }\n      };\n      \n    int docId = 42;\n    for (UpdateRequest.ACTION action : EnumSet.allOf(UpdateRequest.ACTION.class)) {\n      for (boolean waitSearch : Arrays.asList(true, false)) {\n        for (boolean waitFlush : Arrays.asList(true, false)) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          SolrInputDocument document = new SolrInputDocument();\n          document.addField(\"id\", docId++ );\n          updateRequest.add(document);\n          updateRequest.setAction(action, waitSearch, waitFlush);\n          s.request(updateRequest);\n        }\n      }\n    }\n    s.commit();\n    s.blockUntilFinished();\n    s.shutdown();\n\n    if (0 != failures.size()) {\n      assertEquals(failures.size() + \" Unexpected Exception, starting with...\", \n                   null, failures.get(0));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleStreamingTest#testWaitOptions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleStreamingTest#testWaitOptions().mjava","sourceNew":"  public void testWaitOptions() throws Exception {\n    // SOLR-3903\n    final List<Throwable> failures = new ArrayList<>();\n    try (ConcurrentUpdateSolrClient concurrentClient = new ConcurrentUpdateSolrClient\n      (jetty.getBaseUrl().toString() + \"/collection1\", 2, 2) {\n        @Override\n        public void handleError(Throwable ex) {\n          failures.add(ex);\n        }\n      }) {\n\n      int docId = 42;\n      for (UpdateRequest.ACTION action : EnumSet.allOf(UpdateRequest.ACTION.class)) {\n        for (boolean waitSearch : Arrays.asList(true, false)) {\n          for (boolean waitFlush : Arrays.asList(true, false)) {\n            UpdateRequest updateRequest = new UpdateRequest();\n            SolrInputDocument document = new SolrInputDocument();\n            document.addField(\"id\", docId++);\n            updateRequest.add(document);\n            updateRequest.setAction(action, waitSearch, waitFlush);\n            concurrentClient.request(updateRequest);\n          }\n        }\n      }\n      concurrentClient.commit();\n      concurrentClient.blockUntilFinished();\n    }\n\n    if (0 != failures.size()) {\n      assertEquals(failures.size() + \" Unexpected Exception, starting with...\", \n                   null, failures.get(0));\n    }\n  }\n\n","sourceOld":"  public void testWaitOptions() throws Exception {\n    // SOLR-3903\n    final List<Throwable> failures = new ArrayList<>();\n    ConcurrentUpdateSolrClient concurrentClient = new ConcurrentUpdateSolrClient\n      (jetty.getBaseUrl().toString() + \"/collection1\", 2, 2) {\n        @Override\n        public void handleError(Throwable ex) {\n          failures.add(ex);\n        }\n      };\n      \n    int docId = 42;\n    for (UpdateRequest.ACTION action : EnumSet.allOf(UpdateRequest.ACTION.class)) {\n      for (boolean waitSearch : Arrays.asList(true, false)) {\n        for (boolean waitFlush : Arrays.asList(true, false)) {\n          UpdateRequest updateRequest = new UpdateRequest();\n          SolrInputDocument document = new SolrInputDocument();\n          document.addField(\"id\", docId++ );\n          updateRequest.add(document);\n          updateRequest.setAction(action, waitSearch, waitFlush);\n          concurrentClient.request(updateRequest);\n        }\n      }\n    }\n    concurrentClient.commit();\n    concurrentClient.blockUntilFinished();\n    concurrentClient.shutdown();\n\n    if (0 != failures.size()) {\n      assertEquals(failures.size() + \" Unexpected Exception, starting with...\", \n                   null, failures.get(0));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleStreamingTest#testWaitOptions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleStreamingTest#testWaitOptions().mjava","sourceNew":"  public void testWaitOptions() throws Exception {\n    // SOLR-3903\n    final List<Throwable> failures = new ArrayList<>();\n    final String serverUrl = jetty.getBaseUrl().toString() + \"/collection1\";\n    try (ConcurrentUpdateSolrClient concurrentClient = new FailureRecordingConcurrentUpdateSolrClient(serverUrl, 2, 2)) {\n      int docId = 42;\n      for (UpdateRequest.ACTION action : EnumSet.allOf(UpdateRequest.ACTION.class)) {\n        for (boolean waitSearch : Arrays.asList(true, false)) {\n          for (boolean waitFlush : Arrays.asList(true, false)) {\n            UpdateRequest updateRequest = new UpdateRequest();\n            SolrInputDocument document = new SolrInputDocument();\n            document.addField(\"id\", docId++);\n            updateRequest.add(document);\n            updateRequest.setAction(action, waitSearch, waitFlush);\n            concurrentClient.request(updateRequest);\n          }\n        }\n      }\n      concurrentClient.commit();\n      concurrentClient.blockUntilFinished();\n    }\n\n    if (0 != failures.size()) {\n      assertEquals(failures.size() + \" Unexpected Exception, starting with...\", \n                   null, failures.get(0));\n    }\n  }\n\n","sourceOld":"  public void testWaitOptions() throws Exception {\n    // SOLR-3903\n    final List<Throwable> failures = new ArrayList<>();\n    try (ConcurrentUpdateSolrClient concurrentClient = new ConcurrentUpdateSolrClient\n      (jetty.getBaseUrl().toString() + \"/collection1\", 2, 2) {\n        @Override\n        public void handleError(Throwable ex) {\n          failures.add(ex);\n        }\n      }) {\n\n      int docId = 42;\n      for (UpdateRequest.ACTION action : EnumSet.allOf(UpdateRequest.ACTION.class)) {\n        for (boolean waitSearch : Arrays.asList(true, false)) {\n          for (boolean waitFlush : Arrays.asList(true, false)) {\n            UpdateRequest updateRequest = new UpdateRequest();\n            SolrInputDocument document = new SolrInputDocument();\n            document.addField(\"id\", docId++);\n            updateRequest.add(document);\n            updateRequest.setAction(action, waitSearch, waitFlush);\n            concurrentClient.request(updateRequest);\n          }\n        }\n      }\n      concurrentClient.commit();\n      concurrentClient.blockUntilFinished();\n    }\n\n    if (0 != failures.size()) {\n      assertEquals(failures.size() + \" Unexpected Exception, starting with...\", \n                   null, failures.get(0));\n    }\n  }\n\n","bugFix":null,"bugIntro":["c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleStreamingTest#testWaitOptions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleStreamingTest#testWaitOptions().mjava","sourceNew":"  public void testWaitOptions() throws Exception {\n    // SOLR-3903\n    final List<Throwable> failures = new ArrayList<>();\n    final String serverUrl = jetty.getBaseUrl().toString() + \"/collection1\";\n    try (ConcurrentUpdateSolrClient concurrentClient = new FailureRecordingConcurrentUpdateSolrClient(serverUrl, 2, 2)) {\n      int docId = 42;\n      for (UpdateRequest.ACTION action : EnumSet.allOf(UpdateRequest.ACTION.class)) {\n        for (boolean waitSearch : Arrays.asList(true, false)) {\n          for (boolean waitFlush : Arrays.asList(true, false)) {\n            UpdateRequest updateRequest = new UpdateRequest();\n            SolrInputDocument document = new SolrInputDocument();\n            document.addField(\"id\", docId++);\n            updateRequest.add(document);\n            updateRequest.setAction(action, waitSearch, waitFlush);\n            concurrentClient.request(updateRequest);\n          }\n        }\n      }\n      concurrentClient.commit();\n      concurrentClient.blockUntilFinished();\n    }\n\n    if (0 != failures.size()) {\n      assertEquals(failures.size() + \" Unexpected Exception, starting with...\", \n                   null, failures.get(0));\n    }\n  }\n\n","sourceOld":"  public void testWaitOptions() throws Exception {\n    // SOLR-3903\n    final List<Throwable> failures = new ArrayList<>();\n    try (ConcurrentUpdateSolrClient concurrentClient = new ConcurrentUpdateSolrClient\n      (jetty.getBaseUrl().toString() + \"/collection1\", 2, 2) {\n        @Override\n        public void handleError(Throwable ex) {\n          failures.add(ex);\n        }\n      }) {\n\n      int docId = 42;\n      for (UpdateRequest.ACTION action : EnumSet.allOf(UpdateRequest.ACTION.class)) {\n        for (boolean waitSearch : Arrays.asList(true, false)) {\n          for (boolean waitFlush : Arrays.asList(true, false)) {\n            UpdateRequest updateRequest = new UpdateRequest();\n            SolrInputDocument document = new SolrInputDocument();\n            document.addField(\"id\", docId++);\n            updateRequest.add(document);\n            updateRequest.setAction(action, waitSearch, waitFlush);\n            concurrentClient.request(updateRequest);\n          }\n        }\n      }\n      concurrentClient.commit();\n      concurrentClient.blockUntilFinished();\n    }\n\n    if (0 != failures.size()) {\n      assertEquals(failures.size() + \" Unexpected Exception, starting with...\", \n                   null, failures.get(0));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c07dc645ff236a7d51da2a5ef49a948dfbf8610c","date":1498242650,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleStreamingTest#testWaitOptions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleStreamingTest#testWaitOptions().mjava","sourceNew":"  public void testWaitOptions() throws Exception {\n    // SOLR-3903\n    final List<Throwable> failures = new ArrayList<>();\n    final String serverUrl = jetty.getBaseUrl().toString() + \"/collection1\";\n    try (ConcurrentUpdateSolrClient concurrentClient = new FailureRecordingConcurrentUpdateSolrClient.Builder(serverUrl)\n        .withQueueSize(2)\n        .withThreadCount(2)\n        .build()) {\n      int docId = 42;\n      for (UpdateRequest.ACTION action : EnumSet.allOf(UpdateRequest.ACTION.class)) {\n        for (boolean waitSearch : Arrays.asList(true, false)) {\n          for (boolean waitFlush : Arrays.asList(true, false)) {\n            UpdateRequest updateRequest = new UpdateRequest();\n            SolrInputDocument document = new SolrInputDocument();\n            document.addField(\"id\", docId++);\n            updateRequest.add(document);\n            updateRequest.setAction(action, waitSearch, waitFlush);\n            concurrentClient.request(updateRequest);\n          }\n        }\n      }\n      concurrentClient.commit();\n      concurrentClient.blockUntilFinished();\n    }\n\n    if (0 != failures.size()) {\n      assertEquals(failures.size() + \" Unexpected Exception, starting with...\", \n                   null, failures.get(0));\n    }\n  }\n\n","sourceOld":"  public void testWaitOptions() throws Exception {\n    // SOLR-3903\n    final List<Throwable> failures = new ArrayList<>();\n    final String serverUrl = jetty.getBaseUrl().toString() + \"/collection1\";\n    try (ConcurrentUpdateSolrClient concurrentClient = new FailureRecordingConcurrentUpdateSolrClient(serverUrl, 2, 2)) {\n      int docId = 42;\n      for (UpdateRequest.ACTION action : EnumSet.allOf(UpdateRequest.ACTION.class)) {\n        for (boolean waitSearch : Arrays.asList(true, false)) {\n          for (boolean waitFlush : Arrays.asList(true, false)) {\n            UpdateRequest updateRequest = new UpdateRequest();\n            SolrInputDocument document = new SolrInputDocument();\n            document.addField(\"id\", docId++);\n            updateRequest.add(document);\n            updateRequest.setAction(action, waitSearch, waitFlush);\n            concurrentClient.request(updateRequest);\n          }\n        }\n      }\n      concurrentClient.commit();\n      concurrentClient.blockUntilFinished();\n    }\n\n    if (0 != failures.size()) {\n      assertEquals(failures.size() + \" Unexpected Exception, starting with...\", \n                   null, failures.get(0));\n    }\n  }\n\n","bugFix":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleStreamingTest#testWaitOptions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleStreamingTest#testWaitOptions().mjava","sourceNew":"  public void testWaitOptions() throws Exception {\n    // SOLR-3903\n    final List<Throwable> failures = new ArrayList<>();\n    final String serverUrl = jetty.getBaseUrl().toString() + \"/collection1\";\n    try (ConcurrentUpdateSolrClient concurrentClient = new FailureRecordingConcurrentUpdateSolrClient.Builder(serverUrl)\n        .withQueueSize(2)\n        .withThreadCount(2)\n        .build()) {\n      int docId = 42;\n      for (UpdateRequest.ACTION action : EnumSet.allOf(UpdateRequest.ACTION.class)) {\n        for (boolean waitSearch : Arrays.asList(true, false)) {\n          for (boolean waitFlush : Arrays.asList(true, false)) {\n            UpdateRequest updateRequest = new UpdateRequest();\n            SolrInputDocument document = new SolrInputDocument();\n            document.addField(\"id\", docId++);\n            updateRequest.add(document);\n            updateRequest.setAction(action, waitSearch, waitFlush);\n            concurrentClient.request(updateRequest);\n          }\n        }\n      }\n      concurrentClient.commit();\n      concurrentClient.blockUntilFinished();\n    }\n\n    if (0 != failures.size()) {\n      assertEquals(failures.size() + \" Unexpected Exception, starting with...\", \n                   null, failures.get(0));\n    }\n  }\n\n","sourceOld":"  public void testWaitOptions() throws Exception {\n    // SOLR-3903\n    final List<Throwable> failures = new ArrayList<>();\n    final String serverUrl = jetty.getBaseUrl().toString() + \"/collection1\";\n    try (ConcurrentUpdateSolrClient concurrentClient = new FailureRecordingConcurrentUpdateSolrClient(serverUrl, 2, 2)) {\n      int docId = 42;\n      for (UpdateRequest.ACTION action : EnumSet.allOf(UpdateRequest.ACTION.class)) {\n        for (boolean waitSearch : Arrays.asList(true, false)) {\n          for (boolean waitFlush : Arrays.asList(true, false)) {\n            UpdateRequest updateRequest = new UpdateRequest();\n            SolrInputDocument document = new SolrInputDocument();\n            document.addField(\"id\", docId++);\n            updateRequest.add(document);\n            updateRequest.setAction(action, waitSearch, waitFlush);\n            concurrentClient.request(updateRequest);\n          }\n        }\n      }\n      concurrentClient.commit();\n      concurrentClient.blockUntilFinished();\n    }\n\n    if (0 != failures.size()) {\n      assertEquals(failures.size() + \" Unexpected Exception, starting with...\", \n                   null, failures.get(0));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleStreamingTest#testWaitOptions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleStreamingTest#testWaitOptions().mjava","sourceNew":"  public void testWaitOptions() throws Exception {\n    // SOLR-3903\n    final List<Throwable> failures = new ArrayList<>();\n    final String serverUrl = jetty.getBaseUrl().toString() + \"/collection1\";\n    try (ConcurrentUpdateSolrClient concurrentClient = new FailureRecordingConcurrentUpdateSolrClient.Builder(serverUrl)\n        .withQueueSize(2)\n        .withThreadCount(2)\n        .build()) {\n      int docId = 42;\n      for (UpdateRequest.ACTION action : EnumSet.allOf(UpdateRequest.ACTION.class)) {\n        for (boolean waitSearch : Arrays.asList(true, false)) {\n          for (boolean waitFlush : Arrays.asList(true, false)) {\n            UpdateRequest updateRequest = new UpdateRequest();\n            SolrInputDocument document = new SolrInputDocument();\n            document.addField(\"id\", docId++);\n            updateRequest.add(document);\n            updateRequest.setAction(action, waitSearch, waitFlush);\n            concurrentClient.request(updateRequest);\n          }\n        }\n      }\n      concurrentClient.commit();\n      concurrentClient.blockUntilFinished();\n    }\n\n    if (0 != failures.size()) {\n      assertEquals(failures.size() + \" Unexpected Exception, starting with...\", \n                   null, failures.get(0));\n    }\n  }\n\n","sourceOld":"  public void testWaitOptions() throws Exception {\n    // SOLR-3903\n    final List<Throwable> failures = new ArrayList<>();\n    final String serverUrl = jetty.getBaseUrl().toString() + \"/collection1\";\n    try (ConcurrentUpdateSolrClient concurrentClient = new FailureRecordingConcurrentUpdateSolrClient(serverUrl, 2, 2)) {\n      int docId = 42;\n      for (UpdateRequest.ACTION action : EnumSet.allOf(UpdateRequest.ACTION.class)) {\n        for (boolean waitSearch : Arrays.asList(true, false)) {\n          for (boolean waitFlush : Arrays.asList(true, false)) {\n            UpdateRequest updateRequest = new UpdateRequest();\n            SolrInputDocument document = new SolrInputDocument();\n            document.addField(\"id\", docId++);\n            updateRequest.add(document);\n            updateRequest.setAction(action, waitSearch, waitFlush);\n            concurrentClient.request(updateRequest);\n          }\n        }\n      }\n      concurrentClient.commit();\n      concurrentClient.blockUntilFinished();\n    }\n\n    if (0 != failures.size()) {\n      assertEquals(failures.size() + \" Unexpected Exception, starting with...\", \n                   null, failures.get(0));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fa11c355cd3b3b9207608b85fbd33b34f6f1966e":["ed0dd3d82be806ac8ab4e15bf5b89310270c0210"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["e3eac61f0ed7a1ba8a2d2f6298467a8141dcbbc9"],"e3eac61f0ed7a1ba8a2d2f6298467a8141dcbbc9":["fa11c355cd3b3b9207608b85fbd33b34f6f1966e"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"bafca15d8e408346a67f4282ad1143b88023893b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"ed0dd3d82be806ac8ab4e15bf5b89310270c0210":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"28288370235ed02234a64753cdbf0c6ec096304a":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"c07dc645ff236a7d51da2a5ef49a948dfbf8610c":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["cc3b13b430571c2e169f98fe38e1e7666f88522d","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"fa11c355cd3b3b9207608b85fbd33b34f6f1966e":["e3eac61f0ed7a1ba8a2d2f6298467a8141dcbbc9"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["bafca15d8e408346a67f4282ad1143b88023893b"],"e3eac61f0ed7a1ba8a2d2f6298467a8141dcbbc9":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"ed0dd3d82be806ac8ab4e15bf5b89310270c0210":["fa11c355cd3b3b9207608b85fbd33b34f6f1966e"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c07dc645ff236a7d51da2a5ef49a948dfbf8610c":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ed0dd3d82be806ac8ab4e15bf5b89310270c0210"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}