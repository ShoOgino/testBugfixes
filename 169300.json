{"path":"src/test/org/apache/lucene/search/TestThreadSafe.Thr#run().mjava","commits":[{"id":"1ab51a69d46b495c00b86cf406ed599035e94d70","date":1161321049,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestThreadSafe.Thr#run().mjava","pathOld":"/dev/null","sourceNew":"    public void run() {\n      try {\n        for (int i=0; i<iter; i++) {\n          /*** future\n           // pick a random index reader... a shared one, or create your own\n           IndexReader ir;\n           ***/\n\n          switch(rand.nextInt(2)) {\n            case 0: loadDoc(ir1); break;\n          }\n\n        }\n      } catch (Throwable th) {\n        failure=th.toString();\n        TestCase.fail(failure);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["34aad2b15e35959ef2a8c4b991feea4c497936b7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e2594f8f76b22106602d1efd8759872fd6be8938","date":1161321212,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestThreadSafe.Thr#run().mjava","pathOld":"src/test/org/apache/lucene/search/TestThreadSafe.Thr#run().mjava","sourceNew":"    public void run() {\n      try {\n        for (int i=0; i<iter; i++) {\n          /*** future\n           // pick a random index reader... a shared one, or create your own\n           IndexReader ir;\n           ***/\n\n          switch(rand.nextInt(1)) {\n            case 0: loadDoc(ir1); break;\n          }\n\n        }\n      } catch (Throwable th) {\n        failure=th.toString();\n        TestCase.fail(failure);\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        for (int i=0; i<iter; i++) {\n          /*** future\n           // pick a random index reader... a shared one, or create your own\n           IndexReader ir;\n           ***/\n\n          switch(rand.nextInt(2)) {\n            case 0: loadDoc(ir1); break;\n          }\n\n        }\n      } catch (Throwable th) {\n        failure=th.toString();\n        TestCase.fail(failure);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestThreadSafe.Thr#run().mjava","pathOld":"src/test/org/apache/lucene/search/TestThreadSafe.Thr#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        for (int i=0; i<iter; i++) {\n          /*** future\n           // pick a random index reader... a shared one, or create your own\n           IndexReader ir;\n           ***/\n\n          switch(rand.nextInt(1)) {\n            case 0: loadDoc(ir1); break;\n          }\n\n        }\n      } catch (Throwable th) {\n        failure=th.toString();\n        TestCase.fail(failure);\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        for (int i=0; i<iter; i++) {\n          /*** future\n           // pick a random index reader... a shared one, or create your own\n           IndexReader ir;\n           ***/\n\n          switch(rand.nextInt(1)) {\n            case 0: loadDoc(ir1); break;\n          }\n\n        }\n      } catch (Throwable th) {\n        failure=th.toString();\n        TestCase.fail(failure);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestThreadSafe.Thr#run().mjava","pathOld":"src/test/org/apache/lucene/search/TestThreadSafe.Thr#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        for (int i=0; i<iter; i++) {\n          /*** future\n           // pick a random index reader... a shared one, or create your own\n           IndexReader ir;\n           ***/\n\n          switch(rand.nextInt(1)) {\n            case 0: loadDoc(ir1); break;\n          }\n\n        }\n      } catch (Throwable th) {\n        failure=th.toString();\n        fail(failure);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        for (int i=0; i<iter; i++) {\n          /*** future\n           // pick a random index reader... a shared one, or create your own\n           IndexReader ir;\n           ***/\n\n          switch(rand.nextInt(1)) {\n            case 0: loadDoc(ir1); break;\n          }\n\n        }\n      } catch (Throwable th) {\n        failure=th.toString();\n        TestCase.fail(failure);\n      }\n    }\n\n","bugFix":null,"bugIntro":["34aad2b15e35959ef2a8c4b991feea4c497936b7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestThreadSafe.Thr#run().mjava","pathOld":"src/test/org/apache/lucene/search/TestThreadSafe.Thr#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        for (int i=0; i<iter; i++) {\n          /*** future\n           // pick a random index reader... a shared one, or create your own\n           IndexReader ir;\n           ***/\n\n          switch(rand.nextInt(1)) {\n            case 0: loadDoc(ir1); break;\n          }\n\n        }\n      } catch (Throwable th) {\n        failure=th.toString();\n        fail(failure);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        for (int i=0; i<iter; i++) {\n          /*** future\n           // pick a random index reader... a shared one, or create your own\n           IndexReader ir;\n           ***/\n\n          switch(rand.nextInt(1)) {\n            case 0: loadDoc(ir1); break;\n          }\n\n        }\n      } catch (Throwable th) {\n        failure=th.toString();\n        fail(failure);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1ab51a69d46b495c00b86cf406ed599035e94d70":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["e2594f8f76b22106602d1efd8759872fd6be8938"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e2594f8f76b22106602d1efd8759872fd6be8938":["1ab51a69d46b495c00b86cf406ed599035e94d70"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"1ab51a69d46b495c00b86cf406ed599035e94d70":["e2594f8f76b22106602d1efd8759872fd6be8938"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1ab51a69d46b495c00b86cf406ed599035e94d70"],"e2594f8f76b22106602d1efd8759872fd6be8938":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}