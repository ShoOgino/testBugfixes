{"path":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.Info#sortTerms().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.Info#sortTerms().mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.Info#sortTerms().mjava","sourceNew":"    /**\n     * Sorts hashed terms into ascending order, reusing memory along the\n     * way. Note that sorting is lazily delayed until required (often it's\n     * not required at all). If a sorted view is required then hashing +\n     * sort + binary search is still faster and smaller than TreeMap usage\n     * (which would be an alternative and somewhat more elegant approach,\n     * apart from more sophisticated Tries / prefix trees).\n     */\n    public void sortTerms() {\n      if (sortedTerms == null) sortedTerms = sort(terms);\n    }\n\n","sourceOld":"    /**\n     * Sorts hashed terms into ascending order, reusing memory along the\n     * way. Note that sorting is lazily delayed until required (often it's\n     * not required at all). If a sorted view is required then hashing +\n     * sort + binary search is still faster and smaller than TreeMap usage\n     * (which would be an alternative and somewhat more elegant approach,\n     * apart from more sophisticated Tries / prefix trees).\n     */\n    public void sortTerms() {\n      if (sortedTerms == null) sortedTerms = sort(terms);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30fd30bfbfa6b9e036bcd99c8339712e965d4a63","date":1351859294,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.Info#sortTerms().mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.Info#sortTerms().mjava","sourceNew":"    /**\n     * Sorts hashed terms into ascending order, reusing memory along the\n     * way. Note that sorting is lazily delayed until required (often it's\n     * not required at all). If a sorted view is required then hashing +\n     * sort + binary search is still faster and smaller than TreeMap usage\n     * (which would be an alternative and somewhat more elegant approach,\n     * apart from more sophisticated Tries / prefix trees).\n     */\n    public void sortTerms() {\n      if (sortedTerms == null) \n        sortedTerms = terms.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    }\n\n","sourceOld":"    /**\n     * Sorts hashed terms into ascending order, reusing memory along the\n     * way. Note that sorting is lazily delayed until required (often it's\n     * not required at all). If a sorted view is required then hashing +\n     * sort + binary search is still faster and smaller than TreeMap usage\n     * (which would be an alternative and somewhat more elegant approach,\n     * apart from more sophisticated Tries / prefix trees).\n     */\n    public void sortTerms() {\n      if (sortedTerms == null) sortedTerms = sort(terms);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f657d9837900f4519ca1cbd5e98d86d4bba4dab","date":1417790596,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.Info#sortTerms().mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.Info#sortTerms().mjava","sourceNew":"    /**\n     * Sorts hashed terms into ascending order, reusing memory along the\n     * way. Note that sorting is lazily delayed until required (often it's\n     * not required at all). If a sorted view is required then hashing +\n     * sort + binary search is still faster and smaller than TreeMap usage\n     * (which would be an alternative and somewhat more elegant approach,\n     * apart from more sophisticated Tries / prefix trees).\n     */\n    public void sortTerms() {\n      if (sortedTerms == null) {\n        sortedTerms = terms.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n      }\n    }\n\n","sourceOld":"    /**\n     * Sorts hashed terms into ascending order, reusing memory along the\n     * way. Note that sorting is lazily delayed until required (often it's\n     * not required at all). If a sorted view is required then hashing +\n     * sort + binary search is still faster and smaller than TreeMap usage\n     * (which would be an alternative and somewhat more elegant approach,\n     * apart from more sophisticated Tries / prefix trees).\n     */\n    public void sortTerms() {\n      if (sortedTerms == null) \n        sortedTerms = terms.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78cf5dd35bc9be11f14b0c5b5806b05d3f529f91","date":1456586780,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.Info#sortTerms().mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.Info#sortTerms().mjava","sourceNew":"    /**\n     * Sorts hashed terms into ascending order, reusing memory along the\n     * way. Note that sorting is lazily delayed until required (often it's\n     * not required at all). If a sorted view is required then hashing +\n     * sort + binary search is still faster and smaller than TreeMap usage\n     * (which would be an alternative and somewhat more elegant approach,\n     * apart from more sophisticated Tries / prefix trees).\n     */\n    public void sortTerms() {\n      if (sortedTerms == null) {\n        sortedTerms = terms.sort();\n      }\n    }\n\n","sourceOld":"    /**\n     * Sorts hashed terms into ascending order, reusing memory along the\n     * way. Note that sorting is lazily delayed until required (often it's\n     * not required at all). If a sorted view is required then hashing +\n     * sort + binary search is still faster and smaller than TreeMap usage\n     * (which would be an alternative and somewhat more elegant approach,\n     * apart from more sophisticated Tries / prefix trees).\n     */\n    public void sortTerms() {\n      if (sortedTerms == null) {\n        sortedTerms = terms.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.Info#sortTerms().mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.Info#sortTerms().mjava","sourceNew":"    /**\n     * Sorts hashed terms into ascending order, reusing memory along the\n     * way. Note that sorting is lazily delayed until required (often it's\n     * not required at all). If a sorted view is required then hashing +\n     * sort + binary search is still faster and smaller than TreeMap usage\n     * (which would be an alternative and somewhat more elegant approach,\n     * apart from more sophisticated Tries / prefix trees).\n     */\n    public void sortTerms() {\n      if (sortedTerms == null) {\n        sortedTerms = terms.sort();\n      }\n    }\n\n","sourceOld":"    /**\n     * Sorts hashed terms into ascending order, reusing memory along the\n     * way. Note that sorting is lazily delayed until required (often it's\n     * not required at all). If a sorted view is required then hashing +\n     * sort + binary search is still faster and smaller than TreeMap usage\n     * (which would be an alternative and somewhat more elegant approach,\n     * apart from more sophisticated Tries / prefix trees).\n     */\n    public void sortTerms() {\n      if (sortedTerms == null) {\n        sortedTerms = terms.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"253a79e1af11467dd01315b1919025d288aa0ccb","date":1458032260,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.Info#sortTerms().mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.Info#sortTerms().mjava","sourceNew":"    /**\n     * Sorts hashed terms into ascending order, reusing memory along the\n     * way. Note that sorting is lazily delayed until required (often it's\n     * not required at all). If a sorted view is required then hashing +\n     * sort + binary search is still faster and smaller than TreeMap usage\n     * (which would be an alternative and somewhat more elegant approach,\n     * apart from more sophisticated Tries / prefix trees).\n     */\n    void sortTerms() {\n      if (sortedTerms == null) {\n        sortedTerms = terms.sort();\n      }\n    }\n\n","sourceOld":"    /**\n     * Sorts hashed terms into ascending order, reusing memory along the\n     * way. Note that sorting is lazily delayed until required (often it's\n     * not required at all). If a sorted view is required then hashing +\n     * sort + binary search is still faster and smaller than TreeMap usage\n     * (which would be an alternative and somewhat more elegant approach,\n     * apart from more sophisticated Tries / prefix trees).\n     */\n    public void sortTerms() {\n      if (sortedTerms == null) {\n        sortedTerms = terms.sort();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["0f657d9837900f4519ca1cbd5e98d86d4bba4dab","78cf5dd35bc9be11f14b0c5b5806b05d3f529f91"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"253a79e1af11467dd01315b1919025d288aa0ccb":["af2638813028b254a88b418ebeafb541afb49653"],"78cf5dd35bc9be11f14b0c5b5806b05d3f529f91":["0f657d9837900f4519ca1cbd5e98d86d4bba4dab"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f657d9837900f4519ca1cbd5e98d86d4bba4dab":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["253a79e1af11467dd01315b1919025d288aa0ccb"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["253a79e1af11467dd01315b1919025d288aa0ccb"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"78cf5dd35bc9be11f14b0c5b5806b05d3f529f91":["af2638813028b254a88b418ebeafb541afb49653"],"253a79e1af11467dd01315b1919025d288aa0ccb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["0f657d9837900f4519ca1cbd5e98d86d4bba4dab"],"0f657d9837900f4519ca1cbd5e98d86d4bba4dab":["af2638813028b254a88b418ebeafb541afb49653","78cf5dd35bc9be11f14b0c5b5806b05d3f529f91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}