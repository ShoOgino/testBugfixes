{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/SplitByPrefixTest#findPrefixes(int,int,int).mjava","commits":[{"id":"a05f3f5161c62339ec5560b8f6958f3df8483618","date":1563550501,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/SplitByPrefixTest#findPrefixes(int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  // find prefixes (shard keys) matching certain criteria\n  public List<Prefix> findPrefixes(int numToFind, int lowerBound, int upperBound) {\n    CompositeIdRouter router = new CompositeIdRouter();\n\n    ArrayList<Prefix> prefixes = new ArrayList<>();\n    int maxTries = 1000000;\n    int numFound = 0;\n    for (int i=0; i<maxTries; i++) {\n      String shardKey = Integer.toHexString(i)+\"!\";\n      DocRouter.Range range = router.getSearchRangeSingle(shardKey, null, null);\n      int lower = range.min;\n      if (lower >= lowerBound && lower <= upperBound) {\n        Prefix prefix = new Prefix();\n        prefix.key = shardKey;\n        prefix.range = range;\n        prefixes.add(prefix);\n        if (++numFound >= numToFind) break;\n      }\n    }\n\n    Collections.sort(prefixes);\n\n    return prefixes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36bdabc04743acfe0e82c9cf8208b1111b2b193a","date":1565115020,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/SplitByPrefixTest#findPrefixes(int,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/SplitByPrefixTest#findPrefixes(int,int,int).mjava","sourceNew":"  // find prefixes (shard keys) matching certain criteria\n  public static List<Prefix> findPrefixes(int numToFind, int lowerBound, int upperBound) {\n    CompositeIdRouter router = new CompositeIdRouter();\n\n    ArrayList<Prefix> prefixes = new ArrayList<>();\n    int maxTries = 1000000;\n    int numFound = 0;\n    for (int i=0; i<maxTries; i++) {\n      String shardKey = Integer.toHexString(i)+\"!\";\n      DocRouter.Range range = router.getSearchRangeSingle(shardKey, null, null);\n      int lower = range.min;\n      if (lower >= lowerBound && lower <= upperBound) {\n        Prefix prefix = new Prefix();\n        prefix.key = shardKey;\n        prefix.range = range;\n        prefixes.add(prefix);\n        if (++numFound >= numToFind) break;\n      }\n    }\n\n    Collections.sort(prefixes);\n\n    return prefixes;\n  }\n\n","sourceOld":"  // find prefixes (shard keys) matching certain criteria\n  public List<Prefix> findPrefixes(int numToFind, int lowerBound, int upperBound) {\n    CompositeIdRouter router = new CompositeIdRouter();\n\n    ArrayList<Prefix> prefixes = new ArrayList<>();\n    int maxTries = 1000000;\n    int numFound = 0;\n    for (int i=0; i<maxTries; i++) {\n      String shardKey = Integer.toHexString(i)+\"!\";\n      DocRouter.Range range = router.getSearchRangeSingle(shardKey, null, null);\n      int lower = range.min;\n      if (lower >= lowerBound && lower <= upperBound) {\n        Prefix prefix = new Prefix();\n        prefix.key = shardKey;\n        prefix.range = range;\n        prefixes.add(prefix);\n        if (++numFound >= numToFind) break;\n      }\n    }\n\n    Collections.sort(prefixes);\n\n    return prefixes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a97a72dc16d01fda8ca5c9e0264b3604e30ab539","date":1565639985,"type":3,"author":"Megan Carey","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/SplitByPrefixTest#findPrefixes(int,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/SplitByPrefixTest#findPrefixes(int,int,int).mjava","sourceNew":"  /**\n   * find prefixes (shard keys) matching certain criteria\n   */\n  public static List<Prefix> findPrefixes(int numToFind, int lowerBound, int upperBound) {\n    CompositeIdRouter router = new CompositeIdRouter();\n\n    ArrayList<Prefix> prefixes = new ArrayList<>();\n    int maxTries = 1000000;\n    int numFound = 0;\n    for (int i=0; i<maxTries; i++) {\n      String shardKey = Integer.toHexString(i)+\"!\";\n      DocRouter.Range range = router.getSearchRangeSingle(shardKey, null, null);\n      int lower = range.min;\n      if (lower >= lowerBound && lower <= upperBound) {\n        Prefix prefix = new Prefix();\n        prefix.key = shardKey;\n        prefix.range = range;\n        prefixes.add(prefix);\n        if (++numFound >= numToFind) break;\n      }\n    }\n\n    Collections.sort(prefixes);\n\n    return prefixes;\n  }\n\n","sourceOld":"  // find prefixes (shard keys) matching certain criteria\n  public static List<Prefix> findPrefixes(int numToFind, int lowerBound, int upperBound) {\n    CompositeIdRouter router = new CompositeIdRouter();\n\n    ArrayList<Prefix> prefixes = new ArrayList<>();\n    int maxTries = 1000000;\n    int numFound = 0;\n    for (int i=0; i<maxTries; i++) {\n      String shardKey = Integer.toHexString(i)+\"!\";\n      DocRouter.Range range = router.getSearchRangeSingle(shardKey, null, null);\n      int lower = range.min;\n      if (lower >= lowerBound && lower <= upperBound) {\n        Prefix prefix = new Prefix();\n        prefix.key = shardKey;\n        prefix.range = range;\n        prefixes.add(prefix);\n        if (++numFound >= numToFind) break;\n      }\n    }\n\n    Collections.sort(prefixes);\n\n    return prefixes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05f3f5161c62339ec5560b8f6958f3df8483618":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"36bdabc04743acfe0e82c9cf8208b1111b2b193a":["a05f3f5161c62339ec5560b8f6958f3df8483618"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a97a72dc16d01fda8ca5c9e0264b3604e30ab539"],"a97a72dc16d01fda8ca5c9e0264b3604e30ab539":["36bdabc04743acfe0e82c9cf8208b1111b2b193a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a05f3f5161c62339ec5560b8f6958f3df8483618"],"a05f3f5161c62339ec5560b8f6958f3df8483618":["36bdabc04743acfe0e82c9cf8208b1111b2b193a"],"36bdabc04743acfe0e82c9cf8208b1111b2b193a":["a97a72dc16d01fda8ca5c9e0264b3604e30ab539"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"a97a72dc16d01fda8ca5c9e0264b3604e30ab539":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}