{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commit().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commit().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#commit().mjava","sourceNew":"  /**\n   * <p>Commits all pending changes (added & deleted\n   * documents, segment merges, added\n   * indexes, etc.) to the index, and syncs all referenced\n   * index files, such that a reader will see the changes\n   * and the index updates will survive an OS or machine\n   * crash or power loss.  Note that this does not wait for\n   * any running background merges to finish.  This may be a\n   * costly operation, so you should test the cost in your\n   * application and do it only when really necessary.</p>\n   *\n   * <p> Note that this operation calls Directory.sync on\n   * the index files.  That call should not return until the\n   * file contents & metadata are on stable storage.  For\n   * FSDirectory, this calls the OS's fsync.  But, beware:\n   * some hardware devices may in fact cache writes even\n   * during fsync, and return before the bits are actually\n   * on stable storage, to give the appearance of faster\n   * performance.  If you have such a device, and it does\n   * not have a battery backup (for example) then on power\n   * loss it may still lose data.  Lucene cannot guarantee\n   * consistency on such devices.  </p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @see #prepareCommit\n   * @see #commit(Map)\n   */\n  public final void commit() throws CorruptIndexException, IOException {\n    commit(null);\n  }\n\n","sourceOld":"  /**\n   * <p>Commits all pending changes (added & deleted\n   * documents, segment merges, added\n   * indexes, etc.) to the index, and syncs all referenced\n   * index files, such that a reader will see the changes\n   * and the index updates will survive an OS or machine\n   * crash or power loss.  Note that this does not wait for\n   * any running background merges to finish.  This may be a\n   * costly operation, so you should test the cost in your\n   * application and do it only when really necessary.</p>\n   *\n   * <p> Note that this operation calls Directory.sync on\n   * the index files.  That call should not return until the\n   * file contents & metadata are on stable storage.  For\n   * FSDirectory, this calls the OS's fsync.  But, beware:\n   * some hardware devices may in fact cache writes even\n   * during fsync, and return before the bits are actually\n   * on stable storage, to give the appearance of faster\n   * performance.  If you have such a device, and it does\n   * not have a battery backup (for example) then on power\n   * loss it may still lose data.  Lucene cannot guarantee\n   * consistency on such devices.  </p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @see #prepareCommit\n   * @see #commit(Map)\n   */\n  public final void commit() throws CorruptIndexException, IOException {\n    commit(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commit().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commit().mjava","sourceNew":"  /**\n   * <p>Commits all pending changes (added & deleted\n   * documents, segment merges, added\n   * indexes, etc.) to the index, and syncs all referenced\n   * index files, such that a reader will see the changes\n   * and the index updates will survive an OS or machine\n   * crash or power loss.  Note that this does not wait for\n   * any running background merges to finish.  This may be a\n   * costly operation, so you should test the cost in your\n   * application and do it only when really necessary.</p>\n   *\n   * <p> Note that this operation calls Directory.sync on\n   * the index files.  That call should not return until the\n   * file contents & metadata are on stable storage.  For\n   * FSDirectory, this calls the OS's fsync.  But, beware:\n   * some hardware devices may in fact cache writes even\n   * during fsync, and return before the bits are actually\n   * on stable storage, to give the appearance of faster\n   * performance.  If you have such a device, and it does\n   * not have a battery backup (for example) then on power\n   * loss it may still lose data.  Lucene cannot guarantee\n   * consistency on such devices.  </p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @see #prepareCommit\n   * @see #commit(Map)\n   */\n  public final void commit() throws IOException {\n    commit(null);\n  }\n\n","sourceOld":"  /**\n   * <p>Commits all pending changes (added & deleted\n   * documents, segment merges, added\n   * indexes, etc.) to the index, and syncs all referenced\n   * index files, such that a reader will see the changes\n   * and the index updates will survive an OS or machine\n   * crash or power loss.  Note that this does not wait for\n   * any running background merges to finish.  This may be a\n   * costly operation, so you should test the cost in your\n   * application and do it only when really necessary.</p>\n   *\n   * <p> Note that this operation calls Directory.sync on\n   * the index files.  That call should not return until the\n   * file contents & metadata are on stable storage.  For\n   * FSDirectory, this calls the OS's fsync.  But, beware:\n   * some hardware devices may in fact cache writes even\n   * during fsync, and return before the bits are actually\n   * on stable storage, to give the appearance of faster\n   * performance.  If you have such a device, and it does\n   * not have a battery backup (for example) then on power\n   * loss it may still lose data.  Lucene cannot guarantee\n   * consistency on such devices.  </p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @see #prepareCommit\n   * @see #commit(Map)\n   */\n  public final void commit() throws CorruptIndexException, IOException {\n    commit(null);\n  }\n\n","bugFix":["e82780afe6097066eb5befb86e9432f077667e3d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commit().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commit().mjava","sourceNew":"  /**\n   * <p>Commits all pending changes (added & deleted\n   * documents, segment merges, added\n   * indexes, etc.) to the index, and syncs all referenced\n   * index files, such that a reader will see the changes\n   * and the index updates will survive an OS or machine\n   * crash or power loss.  Note that this does not wait for\n   * any running background merges to finish.  This may be a\n   * costly operation, so you should test the cost in your\n   * application and do it only when really necessary.</p>\n   *\n   * <p> Note that this operation calls Directory.sync on\n   * the index files.  That call should not return until the\n   * file contents & metadata are on stable storage.  For\n   * FSDirectory, this calls the OS's fsync.  But, beware:\n   * some hardware devices may in fact cache writes even\n   * during fsync, and return before the bits are actually\n   * on stable storage, to give the appearance of faster\n   * performance.  If you have such a device, and it does\n   * not have a battery backup (for example) then on power\n   * loss it may still lose data.  Lucene cannot guarantee\n   * consistency on such devices.  </p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @see #prepareCommit\n   * @see #commit(Map)\n   */\n  public final void commit() throws IOException {\n    commit(null);\n  }\n\n","sourceOld":"  /**\n   * <p>Commits all pending changes (added & deleted\n   * documents, segment merges, added\n   * indexes, etc.) to the index, and syncs all referenced\n   * index files, such that a reader will see the changes\n   * and the index updates will survive an OS or machine\n   * crash or power loss.  Note that this does not wait for\n   * any running background merges to finish.  This may be a\n   * costly operation, so you should test the cost in your\n   * application and do it only when really necessary.</p>\n   *\n   * <p> Note that this operation calls Directory.sync on\n   * the index files.  That call should not return until the\n   * file contents & metadata are on stable storage.  For\n   * FSDirectory, this calls the OS's fsync.  But, beware:\n   * some hardware devices may in fact cache writes even\n   * during fsync, and return before the bits are actually\n   * on stable storage, to give the appearance of faster\n   * performance.  If you have such a device, and it does\n   * not have a battery backup (for example) then on power\n   * loss it may still lose data.  Lucene cannot guarantee\n   * consistency on such devices.  </p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @see #prepareCommit\n   * @see #commit(Map)\n   */\n  public final void commit() throws CorruptIndexException, IOException {\n    commit(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b47e1512544568a22b82c96169d466fae8a4b79e","date":1354519309,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commit().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commit().mjava","sourceNew":"  /**\n   * <p>Commits all pending changes (added & deleted\n   * documents, segment merges, added\n   * indexes, etc.) to the index, and syncs all referenced\n   * index files, such that a reader will see the changes\n   * and the index updates will survive an OS or machine\n   * crash or power loss.  Note that this does not wait for\n   * any running background merges to finish.  This may be a\n   * costly operation, so you should test the cost in your\n   * application and do it only when really necessary.</p>\n   *\n   * <p> Note that this operation calls Directory.sync on\n   * the index files.  That call should not return until the\n   * file contents & metadata are on stable storage.  For\n   * FSDirectory, this calls the OS's fsync.  But, beware:\n   * some hardware devices may in fact cache writes even\n   * during fsync, and return before the bits are actually\n   * on stable storage, to give the appearance of faster\n   * performance.  If you have such a device, and it does\n   * not have a battery backup (for example) then on power\n   * loss it may still lose data.  Lucene cannot guarantee\n   * consistency on such devices.  </p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @see #prepareCommit\n   */\n  public final void commit() throws IOException {\n    ensureOpen();\n    commitInternal();\n  }\n\n","sourceOld":"  /**\n   * <p>Commits all pending changes (added & deleted\n   * documents, segment merges, added\n   * indexes, etc.) to the index, and syncs all referenced\n   * index files, such that a reader will see the changes\n   * and the index updates will survive an OS or machine\n   * crash or power loss.  Note that this does not wait for\n   * any running background merges to finish.  This may be a\n   * costly operation, so you should test the cost in your\n   * application and do it only when really necessary.</p>\n   *\n   * <p> Note that this operation calls Directory.sync on\n   * the index files.  That call should not return until the\n   * file contents & metadata are on stable storage.  For\n   * FSDirectory, this calls the OS's fsync.  But, beware:\n   * some hardware devices may in fact cache writes even\n   * during fsync, and return before the bits are actually\n   * on stable storage, to give the appearance of faster\n   * performance.  If you have such a device, and it does\n   * not have a battery backup (for example) then on power\n   * loss it may still lose data.  Lucene cannot guarantee\n   * consistency on such devices.  </p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @see #prepareCommit\n   * @see #commit(Map)\n   */\n  public final void commit() throws IOException {\n    commit(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commit().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commit().mjava","sourceNew":"  /**\n   * <p>Commits all pending changes (added & deleted\n   * documents, segment merges, added\n   * indexes, etc.) to the index, and syncs all referenced\n   * index files, such that a reader will see the changes\n   * and the index updates will survive an OS or machine\n   * crash or power loss.  Note that this does not wait for\n   * any running background merges to finish.  This may be a\n   * costly operation, so you should test the cost in your\n   * application and do it only when really necessary.</p>\n   *\n   * <p> Note that this operation calls Directory.sync on\n   * the index files.  That call should not return until the\n   * file contents & metadata are on stable storage.  For\n   * FSDirectory, this calls the OS's fsync.  But, beware:\n   * some hardware devices may in fact cache writes even\n   * during fsync, and return before the bits are actually\n   * on stable storage, to give the appearance of faster\n   * performance.  If you have such a device, and it does\n   * not have a battery backup (for example) then on power\n   * loss it may still lose data.  Lucene cannot guarantee\n   * consistency on such devices.  </p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @see #prepareCommit\n   */\n  public final void commit() throws IOException {\n    ensureOpen();\n    commitInternal();\n  }\n\n","sourceOld":"  /**\n   * <p>Commits all pending changes (added & deleted\n   * documents, segment merges, added\n   * indexes, etc.) to the index, and syncs all referenced\n   * index files, such that a reader will see the changes\n   * and the index updates will survive an OS or machine\n   * crash or power loss.  Note that this does not wait for\n   * any running background merges to finish.  This may be a\n   * costly operation, so you should test the cost in your\n   * application and do it only when really necessary.</p>\n   *\n   * <p> Note that this operation calls Directory.sync on\n   * the index files.  That call should not return until the\n   * file contents & metadata are on stable storage.  For\n   * FSDirectory, this calls the OS's fsync.  But, beware:\n   * some hardware devices may in fact cache writes even\n   * during fsync, and return before the bits are actually\n   * on stable storage, to give the appearance of faster\n   * performance.  If you have such a device, and it does\n   * not have a battery backup (for example) then on power\n   * loss it may still lose data.  Lucene cannot guarantee\n   * consistency on such devices.  </p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @see #prepareCommit\n   * @see #commit(Map)\n   */\n  public final void commit() throws IOException {\n    commit(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commit().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commit().mjava","sourceNew":"  /**\n   * <p>Commits all pending changes (added & deleted\n   * documents, segment merges, added\n   * indexes, etc.) to the index, and syncs all referenced\n   * index files, such that a reader will see the changes\n   * and the index updates will survive an OS or machine\n   * crash or power loss.  Note that this does not wait for\n   * any running background merges to finish.  This may be a\n   * costly operation, so you should test the cost in your\n   * application and do it only when really necessary.</p>\n   *\n   * <p> Note that this operation calls Directory.sync on\n   * the index files.  That call should not return until the\n   * file contents & metadata are on stable storage.  For\n   * FSDirectory, this calls the OS's fsync.  But, beware:\n   * some hardware devices may in fact cache writes even\n   * during fsync, and return before the bits are actually\n   * on stable storage, to give the appearance of faster\n   * performance.  If you have such a device, and it does\n   * not have a battery backup (for example) then on power\n   * loss it may still lose data.  Lucene cannot guarantee\n   * consistency on such devices.  </p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @see #prepareCommit\n   */\n  @Override\n  public final void commit() throws IOException {\n    ensureOpen();\n    commitInternal();\n  }\n\n","sourceOld":"  /**\n   * <p>Commits all pending changes (added & deleted\n   * documents, segment merges, added\n   * indexes, etc.) to the index, and syncs all referenced\n   * index files, such that a reader will see the changes\n   * and the index updates will survive an OS or machine\n   * crash or power loss.  Note that this does not wait for\n   * any running background merges to finish.  This may be a\n   * costly operation, so you should test the cost in your\n   * application and do it only when really necessary.</p>\n   *\n   * <p> Note that this operation calls Directory.sync on\n   * the index files.  That call should not return until the\n   * file contents & metadata are on stable storage.  For\n   * FSDirectory, this calls the OS's fsync.  But, beware:\n   * some hardware devices may in fact cache writes even\n   * during fsync, and return before the bits are actually\n   * on stable storage, to give the appearance of faster\n   * performance.  If you have such a device, and it does\n   * not have a battery backup (for example) then on power\n   * loss it may still lose data.  Lucene cannot guarantee\n   * consistency on such devices.  </p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @see #prepareCommit\n   */\n  public final void commit() throws IOException {\n    ensureOpen();\n    commitInternal();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commit().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commit().mjava","sourceNew":"  /**\n   * <p>Commits all pending changes (added & deleted\n   * documents, segment merges, added\n   * indexes, etc.) to the index, and syncs all referenced\n   * index files, such that a reader will see the changes\n   * and the index updates will survive an OS or machine\n   * crash or power loss.  Note that this does not wait for\n   * any running background merges to finish.  This may be a\n   * costly operation, so you should test the cost in your\n   * application and do it only when really necessary.</p>\n   *\n   * <p> Note that this operation calls Directory.sync on\n   * the index files.  That call should not return until the\n   * file contents & metadata are on stable storage.  For\n   * FSDirectory, this calls the OS's fsync.  But, beware:\n   * some hardware devices may in fact cache writes even\n   * during fsync, and return before the bits are actually\n   * on stable storage, to give the appearance of faster\n   * performance.  If you have such a device, and it does\n   * not have a battery backup (for example) then on power\n   * loss it may still lose data.  Lucene cannot guarantee\n   * consistency on such devices.  </p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @see #prepareCommit\n   */\n  @Override\n  public final void commit() throws IOException {\n    ensureOpen();\n    commitInternal();\n  }\n\n","sourceOld":"  /**\n   * <p>Commits all pending changes (added & deleted\n   * documents, segment merges, added\n   * indexes, etc.) to the index, and syncs all referenced\n   * index files, such that a reader will see the changes\n   * and the index updates will survive an OS or machine\n   * crash or power loss.  Note that this does not wait for\n   * any running background merges to finish.  This may be a\n   * costly operation, so you should test the cost in your\n   * application and do it only when really necessary.</p>\n   *\n   * <p> Note that this operation calls Directory.sync on\n   * the index files.  That call should not return until the\n   * file contents & metadata are on stable storage.  For\n   * FSDirectory, this calls the OS's fsync.  But, beware:\n   * some hardware devices may in fact cache writes even\n   * during fsync, and return before the bits are actually\n   * on stable storage, to give the appearance of faster\n   * performance.  If you have such a device, and it does\n   * not have a battery backup (for example) then on power\n   * loss it may still lose data.  Lucene cannot guarantee\n   * consistency on such devices.  </p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @see #prepareCommit\n   */\n  public final void commit() throws IOException {\n    ensureOpen();\n    commitInternal();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee59f646cf24586a449cad77391a60a3ac8d8959","date":1408015131,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commit().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commit().mjava","sourceNew":"  /**\n   * <p>Commits all pending changes (added & deleted\n   * documents, segment merges, added\n   * indexes, etc.) to the index, and syncs all referenced\n   * index files, such that a reader will see the changes\n   * and the index updates will survive an OS or machine\n   * crash or power loss.  Note that this does not wait for\n   * any running background merges to finish.  This may be a\n   * costly operation, so you should test the cost in your\n   * application and do it only when really necessary.</p>\n   *\n   * <p> Note that this operation calls Directory.sync on\n   * the index files.  That call should not return until the\n   * file contents & metadata are on stable storage.  For\n   * FSDirectory, this calls the OS's fsync.  But, beware:\n   * some hardware devices may in fact cache writes even\n   * during fsync, and return before the bits are actually\n   * on stable storage, to give the appearance of faster\n   * performance.  If you have such a device, and it does\n   * not have a battery backup (for example) then on power\n   * loss it may still lose data.  Lucene cannot guarantee\n   * consistency on such devices.  </p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @see #prepareCommit\n   */\n  @Override\n  public final void commit() throws IOException {\n    ensureOpen();\n    commitInternal(config.getMergePolicy());\n  }\n\n","sourceOld":"  /**\n   * <p>Commits all pending changes (added & deleted\n   * documents, segment merges, added\n   * indexes, etc.) to the index, and syncs all referenced\n   * index files, such that a reader will see the changes\n   * and the index updates will survive an OS or machine\n   * crash or power loss.  Note that this does not wait for\n   * any running background merges to finish.  This may be a\n   * costly operation, so you should test the cost in your\n   * application and do it only when really necessary.</p>\n   *\n   * <p> Note that this operation calls Directory.sync on\n   * the index files.  That call should not return until the\n   * file contents & metadata are on stable storage.  For\n   * FSDirectory, this calls the OS's fsync.  But, beware:\n   * some hardware devices may in fact cache writes even\n   * during fsync, and return before the bits are actually\n   * on stable storage, to give the appearance of faster\n   * performance.  If you have such a device, and it does\n   * not have a battery backup (for example) then on power\n   * loss it may still lose data.  Lucene cannot guarantee\n   * consistency on such devices.  </p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @see #prepareCommit\n   */\n  @Override\n  public final void commit() throws IOException {\n    ensureOpen();\n    commitInternal();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"949847c0040cd70a68222d526cb0da7bf6cbb3c2","date":1410997182,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commit().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commit().mjava","sourceNew":"  /**\n   * <p>Commits all pending changes (added & deleted\n   * documents, segment merges, added\n   * indexes, etc.) to the index, and syncs all referenced\n   * index files, such that a reader will see the changes\n   * and the index updates will survive an OS or machine\n   * crash or power loss.  Note that this does not wait for\n   * any running background merges to finish.  This may be a\n   * costly operation, so you should test the cost in your\n   * application and do it only when really necessary.</p>\n   *\n   * <p> Note that this operation calls Directory.sync on\n   * the index files.  That call should not return until the\n   * file contents & metadata are on stable storage.  For\n   * FSDirectory, this calls the OS's fsync.  But, beware:\n   * some hardware devices may in fact cache writes even\n   * during fsync, and return before the bits are actually\n   * on stable storage, to give the appearance of faster\n   * performance.  If you have such a device, and it does\n   * not have a battery backup (for example) then on power\n   * loss it may still lose data.  Lucene cannot guarantee\n   * consistency on such devices.  </p>\n   *\n   * @see #prepareCommit\n   */\n  @Override\n  public final void commit() throws IOException {\n    ensureOpen();\n    commitInternal(config.getMergePolicy());\n  }\n\n","sourceOld":"  /**\n   * <p>Commits all pending changes (added & deleted\n   * documents, segment merges, added\n   * indexes, etc.) to the index, and syncs all referenced\n   * index files, such that a reader will see the changes\n   * and the index updates will survive an OS or machine\n   * crash or power loss.  Note that this does not wait for\n   * any running background merges to finish.  This may be a\n   * costly operation, so you should test the cost in your\n   * application and do it only when really necessary.</p>\n   *\n   * <p> Note that this operation calls Directory.sync on\n   * the index files.  That call should not return until the\n   * file contents & metadata are on stable storage.  For\n   * FSDirectory, this calls the OS's fsync.  But, beware:\n   * some hardware devices may in fact cache writes even\n   * during fsync, and return before the bits are actually\n   * on stable storage, to give the appearance of faster\n   * performance.  If you have such a device, and it does\n   * not have a battery backup (for example) then on power\n   * loss it may still lose data.  Lucene cannot guarantee\n   * consistency on such devices.  </p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @see #prepareCommit\n   */\n  @Override\n  public final void commit() throws IOException {\n    ensureOpen();\n    commitInternal(config.getMergePolicy());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1eb427f2c6beed80d1724555fc1db003ccf3030","date":1417137397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commit().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commit().mjava","sourceNew":"  /**\n   * <p>Commits all pending changes (added and deleted\n   * documents, segment merges, added\n   * indexes, etc.) to the index, and syncs all referenced\n   * index files, such that a reader will see the changes\n   * and the index updates will survive an OS or machine\n   * crash or power loss.  Note that this does not wait for\n   * any running background merges to finish.  This may be a\n   * costly operation, so you should test the cost in your\n   * application and do it only when really necessary.</p>\n   *\n   * <p> Note that this operation calls Directory.sync on\n   * the index files.  That call should not return until the\n   * file contents and metadata are on stable storage.  For\n   * FSDirectory, this calls the OS's fsync.  But, beware:\n   * some hardware devices may in fact cache writes even\n   * during fsync, and return before the bits are actually\n   * on stable storage, to give the appearance of faster\n   * performance.  If you have such a device, and it does\n   * not have a battery backup (for example) then on power\n   * loss it may still lose data.  Lucene cannot guarantee\n   * consistency on such devices.  </p>\n   *\n   * @see #prepareCommit\n   */\n  @Override\n  public final void commit() throws IOException {\n    ensureOpen();\n    commitInternal(config.getMergePolicy());\n  }\n\n","sourceOld":"  /**\n   * <p>Commits all pending changes (added & deleted\n   * documents, segment merges, added\n   * indexes, etc.) to the index, and syncs all referenced\n   * index files, such that a reader will see the changes\n   * and the index updates will survive an OS or machine\n   * crash or power loss.  Note that this does not wait for\n   * any running background merges to finish.  This may be a\n   * costly operation, so you should test the cost in your\n   * application and do it only when really necessary.</p>\n   *\n   * <p> Note that this operation calls Directory.sync on\n   * the index files.  That call should not return until the\n   * file contents & metadata are on stable storage.  For\n   * FSDirectory, this calls the OS's fsync.  But, beware:\n   * some hardware devices may in fact cache writes even\n   * during fsync, and return before the bits are actually\n   * on stable storage, to give the appearance of faster\n   * performance.  If you have such a device, and it does\n   * not have a battery backup (for example) then on power\n   * loss it may still lose data.  Lucene cannot guarantee\n   * consistency on such devices.  </p>\n   *\n   * @see #prepareCommit\n   */\n  @Override\n  public final void commit() throws IOException {\n    ensureOpen();\n    commitInternal(config.getMergePolicy());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f492fe129985750df09c8dac738aecc503158bb3","date":1464099630,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commit().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commit().mjava","sourceNew":"  /**\n   * <p>Commits all pending changes (added and deleted\n   * documents, segment merges, added\n   * indexes, etc.) to the index, and syncs all referenced\n   * index files, such that a reader will see the changes\n   * and the index updates will survive an OS or machine\n   * crash or power loss.  Note that this does not wait for\n   * any running background merges to finish.  This may be a\n   * costly operation, so you should test the cost in your\n   * application and do it only when really necessary.</p>\n   *\n   * <p> Note that this operation calls Directory.sync on\n   * the index files.  That call should not return until the\n   * file contents and metadata are on stable storage.  For\n   * FSDirectory, this calls the OS's fsync.  But, beware:\n   * some hardware devices may in fact cache writes even\n   * during fsync, and return before the bits are actually\n   * on stable storage, to give the appearance of faster\n   * performance.  If you have such a device, and it does\n   * not have a battery backup (for example) then on power\n   * loss it may still lose data.  Lucene cannot guarantee\n   * consistency on such devices.  </p>\n   *\n   * @see #prepareCommit\n   */\n  @Override\n  public final long commit() throws IOException {\n    ensureOpen();\n    // nocommit should we put seq no into sis?\n    return commitInternal(config.getMergePolicy());\n  }\n\n","sourceOld":"  /**\n   * <p>Commits all pending changes (added and deleted\n   * documents, segment merges, added\n   * indexes, etc.) to the index, and syncs all referenced\n   * index files, such that a reader will see the changes\n   * and the index updates will survive an OS or machine\n   * crash or power loss.  Note that this does not wait for\n   * any running background merges to finish.  This may be a\n   * costly operation, so you should test the cost in your\n   * application and do it only when really necessary.</p>\n   *\n   * <p> Note that this operation calls Directory.sync on\n   * the index files.  That call should not return until the\n   * file contents and metadata are on stable storage.  For\n   * FSDirectory, this calls the OS's fsync.  But, beware:\n   * some hardware devices may in fact cache writes even\n   * during fsync, and return before the bits are actually\n   * on stable storage, to give the appearance of faster\n   * performance.  If you have such a device, and it does\n   * not have a battery backup (for example) then on power\n   * loss it may still lose data.  Lucene cannot guarantee\n   * consistency on such devices.  </p>\n   *\n   * @see #prepareCommit\n   */\n  @Override\n  public final void commit() throws IOException {\n    ensureOpen();\n    commitInternal(config.getMergePolicy());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23a29a4862e38cc3b9bff14a888901c7c878885b","date":1464135767,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commit().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commit().mjava","sourceNew":"  /**\n   * <p>Commits all pending changes (added and deleted\n   * documents, segment merges, added\n   * indexes, etc.) to the index, and syncs all referenced\n   * index files, such that a reader will see the changes\n   * and the index updates will survive an OS or machine\n   * crash or power loss.  Note that this does not wait for\n   * any running background merges to finish.  This may be a\n   * costly operation, so you should test the cost in your\n   * application and do it only when really necessary.</p>\n   *\n   * <p> Note that this operation calls Directory.sync on\n   * the index files.  That call should not return until the\n   * file contents and metadata are on stable storage.  For\n   * FSDirectory, this calls the OS's fsync.  But, beware:\n   * some hardware devices may in fact cache writes even\n   * during fsync, and return before the bits are actually\n   * on stable storage, to give the appearance of faster\n   * performance.  If you have such a device, and it does\n   * not have a battery backup (for example) then on power\n   * loss it may still lose data.  Lucene cannot guarantee\n   * consistency on such devices.  </p>\n   *\n   * @see #prepareCommit\n   */\n  @Override\n  public final long commit() throws IOException {\n    ensureOpen();\n    return commitInternal(config.getMergePolicy());\n  }\n\n","sourceOld":"  /**\n   * <p>Commits all pending changes (added and deleted\n   * documents, segment merges, added\n   * indexes, etc.) to the index, and syncs all referenced\n   * index files, such that a reader will see the changes\n   * and the index updates will survive an OS or machine\n   * crash or power loss.  Note that this does not wait for\n   * any running background merges to finish.  This may be a\n   * costly operation, so you should test the cost in your\n   * application and do it only when really necessary.</p>\n   *\n   * <p> Note that this operation calls Directory.sync on\n   * the index files.  That call should not return until the\n   * file contents and metadata are on stable storage.  For\n   * FSDirectory, this calls the OS's fsync.  But, beware:\n   * some hardware devices may in fact cache writes even\n   * during fsync, and return before the bits are actually\n   * on stable storage, to give the appearance of faster\n   * performance.  If you have such a device, and it does\n   * not have a battery backup (for example) then on power\n   * loss it may still lose data.  Lucene cannot guarantee\n   * consistency on such devices.  </p>\n   *\n   * @see #prepareCommit\n   */\n  @Override\n  public final long commit() throws IOException {\n    ensureOpen();\n    // nocommit should we put seq no into sis?\n    return commitInternal(config.getMergePolicy());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9972d96003bc59c07a44e73de3cdd505dc08fd17","date":1464216081,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commit().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commit().mjava","sourceNew":"  /**\n   * <p>Commits all pending changes (added and deleted\n   * documents, segment merges, added\n   * indexes, etc.) to the index, and syncs all referenced\n   * index files, such that a reader will see the changes\n   * and the index updates will survive an OS or machine\n   * crash or power loss.  Note that this does not wait for\n   * any running background merges to finish.  This may be a\n   * costly operation, so you should test the cost in your\n   * application and do it only when really necessary.</p>\n   *\n   * <p> Note that this operation calls Directory.sync on\n   * the index files.  That call should not return until the\n   * file contents and metadata are on stable storage.  For\n   * FSDirectory, this calls the OS's fsync.  But, beware:\n   * some hardware devices may in fact cache writes even\n   * during fsync, and return before the bits are actually\n   * on stable storage, to give the appearance of faster\n   * performance.  If you have such a device, and it does\n   * not have a battery backup (for example) then on power\n   * loss it may still lose data.  Lucene cannot guarantee\n   * consistency on such devices.  </p>\n   *\n   * <p> If nothing was committed, because there were no\n   * pending changes, this returns -1.  Otherwise, it returns\n   * the sequence number such that all indexing operations\n   * prior to this sequence will be included in the commit\n   * point, and all other operations will not. </p>\n   *\n   * @see #prepareCommit\n   */\n  @Override\n  public final long commit() throws IOException {\n    ensureOpen();\n    return commitInternal(config.getMergePolicy());\n  }\n\n","sourceOld":"  /**\n   * <p>Commits all pending changes (added and deleted\n   * documents, segment merges, added\n   * indexes, etc.) to the index, and syncs all referenced\n   * index files, such that a reader will see the changes\n   * and the index updates will survive an OS or machine\n   * crash or power loss.  Note that this does not wait for\n   * any running background merges to finish.  This may be a\n   * costly operation, so you should test the cost in your\n   * application and do it only when really necessary.</p>\n   *\n   * <p> Note that this operation calls Directory.sync on\n   * the index files.  That call should not return until the\n   * file contents and metadata are on stable storage.  For\n   * FSDirectory, this calls the OS's fsync.  But, beware:\n   * some hardware devices may in fact cache writes even\n   * during fsync, and return before the bits are actually\n   * on stable storage, to give the appearance of faster\n   * performance.  If you have such a device, and it does\n   * not have a battery backup (for example) then on power\n   * loss it may still lose data.  Lucene cannot guarantee\n   * consistency on such devices.  </p>\n   *\n   * @see #prepareCommit\n   */\n  @Override\n  public final long commit() throws IOException {\n    ensureOpen();\n    return commitInternal(config.getMergePolicy());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16ebfabc294f23b88b6a39722a02c9d39b353195","date":1464343867,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commit().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commit().mjava","sourceNew":"  /**\n   * <p>Commits all pending changes (added and deleted\n   * documents, segment merges, added\n   * indexes, etc.) to the index, and syncs all referenced\n   * index files, such that a reader will see the changes\n   * and the index updates will survive an OS or machine\n   * crash or power loss.  Note that this does not wait for\n   * any running background merges to finish.  This may be a\n   * costly operation, so you should test the cost in your\n   * application and do it only when really necessary.</p>\n   *\n   * <p> Note that this operation calls Directory.sync on\n   * the index files.  That call should not return until the\n   * file contents and metadata are on stable storage.  For\n   * FSDirectory, this calls the OS's fsync.  But, beware:\n   * some hardware devices may in fact cache writes even\n   * during fsync, and return before the bits are actually\n   * on stable storage, to give the appearance of faster\n   * performance.  If you have such a device, and it does\n   * not have a battery backup (for example) then on power\n   * loss it may still lose data.  Lucene cannot guarantee\n   * consistency on such devices.  </p>\n   *\n   * <p> If nothing was committed, because there were no\n   * pending changes, this returns -1.  Otherwise, it returns\n   * the sequence number such that all indexing operations\n   * prior to this sequence will be included in the commit\n   * point, and all other operations will not. </p>\n   *\n   * @see #prepareCommit\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * last operation in the commit.  All sequence numbers &lt;= this value\n   * will be reflected in the commit, and all others will not.\n   */\n  @Override\n  public final long commit() throws IOException {\n    ensureOpen();\n    return commitInternal(config.getMergePolicy());\n  }\n\n","sourceOld":"  /**\n   * <p>Commits all pending changes (added and deleted\n   * documents, segment merges, added\n   * indexes, etc.) to the index, and syncs all referenced\n   * index files, such that a reader will see the changes\n   * and the index updates will survive an OS or machine\n   * crash or power loss.  Note that this does not wait for\n   * any running background merges to finish.  This may be a\n   * costly operation, so you should test the cost in your\n   * application and do it only when really necessary.</p>\n   *\n   * <p> Note that this operation calls Directory.sync on\n   * the index files.  That call should not return until the\n   * file contents and metadata are on stable storage.  For\n   * FSDirectory, this calls the OS's fsync.  But, beware:\n   * some hardware devices may in fact cache writes even\n   * during fsync, and return before the bits are actually\n   * on stable storage, to give the appearance of faster\n   * performance.  If you have such a device, and it does\n   * not have a battery backup (for example) then on power\n   * loss it may still lose data.  Lucene cannot guarantee\n   * consistency on such devices.  </p>\n   *\n   * <p> If nothing was committed, because there were no\n   * pending changes, this returns -1.  Otherwise, it returns\n   * the sequence number such that all indexing operations\n   * prior to this sequence will be included in the commit\n   * point, and all other operations will not. </p>\n   *\n   * @see #prepareCommit\n   */\n  @Override\n  public final long commit() throws IOException {\n    ensureOpen();\n    return commitInternal(config.getMergePolicy());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19d35c01593b75b98b751866e41b1b24983ff42e","date":1464861489,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commit().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commit().mjava","sourceNew":"  /**\n   * <p>Commits all pending changes (added and deleted\n   * documents, segment merges, added\n   * indexes, etc.) to the index, and syncs all referenced\n   * index files, such that a reader will see the changes\n   * and the index updates will survive an OS or machine\n   * crash or power loss.  Note that this does not wait for\n   * any running background merges to finish.  This may be a\n   * costly operation, so you should test the cost in your\n   * application and do it only when really necessary.</p>\n   *\n   * <p> Note that this operation calls Directory.sync on\n   * the index files.  That call should not return until the\n   * file contents and metadata are on stable storage.  For\n   * FSDirectory, this calls the OS's fsync.  But, beware:\n   * some hardware devices may in fact cache writes even\n   * during fsync, and return before the bits are actually\n   * on stable storage, to give the appearance of faster\n   * performance.  If you have such a device, and it does\n   * not have a battery backup (for example) then on power\n   * loss it may still lose data.  Lucene cannot guarantee\n   * consistency on such devices.  </p>\n   *\n   * <p> If nothing was committed, because there were no\n   * pending changes, this returns -1.  Otherwise, it returns\n   * the sequence number such that all indexing operations\n   * prior to this sequence will be included in the commit\n   * point, and all other operations will not. </p>\n   *\n   * @see #prepareCommit\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * of the last operation in the commit.  All sequence numbers &lt;= this value\n   * will be reflected in the commit, and all others will not.\n   */\n  @Override\n  public final long commit() throws IOException {\n    ensureOpen();\n    return commitInternal(config.getMergePolicy());\n  }\n\n","sourceOld":"  /**\n   * <p>Commits all pending changes (added and deleted\n   * documents, segment merges, added\n   * indexes, etc.) to the index, and syncs all referenced\n   * index files, such that a reader will see the changes\n   * and the index updates will survive an OS or machine\n   * crash or power loss.  Note that this does not wait for\n   * any running background merges to finish.  This may be a\n   * costly operation, so you should test the cost in your\n   * application and do it only when really necessary.</p>\n   *\n   * <p> Note that this operation calls Directory.sync on\n   * the index files.  That call should not return until the\n   * file contents and metadata are on stable storage.  For\n   * FSDirectory, this calls the OS's fsync.  But, beware:\n   * some hardware devices may in fact cache writes even\n   * during fsync, and return before the bits are actually\n   * on stable storage, to give the appearance of faster\n   * performance.  If you have such a device, and it does\n   * not have a battery backup (for example) then on power\n   * loss it may still lose data.  Lucene cannot guarantee\n   * consistency on such devices.  </p>\n   *\n   * <p> If nothing was committed, because there were no\n   * pending changes, this returns -1.  Otherwise, it returns\n   * the sequence number such that all indexing operations\n   * prior to this sequence will be included in the commit\n   * point, and all other operations will not. </p>\n   *\n   * @see #prepareCommit\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * last operation in the commit.  All sequence numbers &lt;= this value\n   * will be reflected in the commit, and all others will not.\n   */\n  @Override\n  public final long commit() throws IOException {\n    ensureOpen();\n    return commitInternal(config.getMergePolicy());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6483e4260c08168709c02238ae083a51519a28dd","date":1465117546,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commit().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commit().mjava","sourceNew":"  /**\n   * <p>Commits all pending changes (added and deleted\n   * documents, segment merges, added\n   * indexes, etc.) to the index, and syncs all referenced\n   * index files, such that a reader will see the changes\n   * and the index updates will survive an OS or machine\n   * crash or power loss.  Note that this does not wait for\n   * any running background merges to finish.  This may be a\n   * costly operation, so you should test the cost in your\n   * application and do it only when really necessary.</p>\n   *\n   * <p> Note that this operation calls Directory.sync on\n   * the index files.  That call should not return until the\n   * file contents and metadata are on stable storage.  For\n   * FSDirectory, this calls the OS's fsync.  But, beware:\n   * some hardware devices may in fact cache writes even\n   * during fsync, and return before the bits are actually\n   * on stable storage, to give the appearance of faster\n   * performance.  If you have such a device, and it does\n   * not have a battery backup (for example) then on power\n   * loss it may still lose data.  Lucene cannot guarantee\n   * consistency on such devices.  </p>\n   *\n   * <p> If nothing was committed, because there were no\n   * pending changes, this returns -1.  Otherwise, it returns\n   * the sequence number such that all indexing operations\n   * prior to this sequence will be included in the commit\n   * point, and all other operations will not. </p>\n   *\n   * @see #prepareCommit\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * of the last operation in the commit.  All sequence numbers &lt;= this value\n   * will be reflected in the commit, and all others will not.\n   */\n  @Override\n  public final long commit() throws IOException {\n    ensureOpen();\n    return commitInternal(config.getMergePolicy());\n  }\n\n","sourceOld":"  /**\n   * <p>Commits all pending changes (added and deleted\n   * documents, segment merges, added\n   * indexes, etc.) to the index, and syncs all referenced\n   * index files, such that a reader will see the changes\n   * and the index updates will survive an OS or machine\n   * crash or power loss.  Note that this does not wait for\n   * any running background merges to finish.  This may be a\n   * costly operation, so you should test the cost in your\n   * application and do it only when really necessary.</p>\n   *\n   * <p> Note that this operation calls Directory.sync on\n   * the index files.  That call should not return until the\n   * file contents and metadata are on stable storage.  For\n   * FSDirectory, this calls the OS's fsync.  But, beware:\n   * some hardware devices may in fact cache writes even\n   * during fsync, and return before the bits are actually\n   * on stable storage, to give the appearance of faster\n   * performance.  If you have such a device, and it does\n   * not have a battery backup (for example) then on power\n   * loss it may still lose data.  Lucene cannot guarantee\n   * consistency on such devices.  </p>\n   *\n   * @see #prepareCommit\n   */\n  @Override\n  public final void commit() throws IOException {\n    ensureOpen();\n    commitInternal(config.getMergePolicy());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commit().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commit().mjava","sourceNew":"  /**\n   * <p>Commits all pending changes (added and deleted\n   * documents, segment merges, added\n   * indexes, etc.) to the index, and syncs all referenced\n   * index files, such that a reader will see the changes\n   * and the index updates will survive an OS or machine\n   * crash or power loss.  Note that this does not wait for\n   * any running background merges to finish.  This may be a\n   * costly operation, so you should test the cost in your\n   * application and do it only when really necessary.</p>\n   *\n   * <p> Note that this operation calls Directory.sync on\n   * the index files.  That call should not return until the\n   * file contents and metadata are on stable storage.  For\n   * FSDirectory, this calls the OS's fsync.  But, beware:\n   * some hardware devices may in fact cache writes even\n   * during fsync, and return before the bits are actually\n   * on stable storage, to give the appearance of faster\n   * performance.  If you have such a device, and it does\n   * not have a battery backup (for example) then on power\n   * loss it may still lose data.  Lucene cannot guarantee\n   * consistency on such devices.  </p>\n   *\n   * <p> If nothing was committed, because there were no\n   * pending changes, this returns -1.  Otherwise, it returns\n   * the sequence number such that all indexing operations\n   * prior to this sequence will be included in the commit\n   * point, and all other operations will not. </p>\n   *\n   * @see #prepareCommit\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * of the last operation in the commit.  All sequence numbers &lt;= this value\n   * will be reflected in the commit, and all others will not.\n   */\n  @Override\n  public final long commit() throws IOException {\n    ensureOpen();\n    return commitInternal(config.getMergePolicy());\n  }\n\n","sourceOld":"  /**\n   * <p>Commits all pending changes (added and deleted\n   * documents, segment merges, added\n   * indexes, etc.) to the index, and syncs all referenced\n   * index files, such that a reader will see the changes\n   * and the index updates will survive an OS or machine\n   * crash or power loss.  Note that this does not wait for\n   * any running background merges to finish.  This may be a\n   * costly operation, so you should test the cost in your\n   * application and do it only when really necessary.</p>\n   *\n   * <p> Note that this operation calls Directory.sync on\n   * the index files.  That call should not return until the\n   * file contents and metadata are on stable storage.  For\n   * FSDirectory, this calls the OS's fsync.  But, beware:\n   * some hardware devices may in fact cache writes even\n   * during fsync, and return before the bits are actually\n   * on stable storage, to give the appearance of faster\n   * performance.  If you have such a device, and it does\n   * not have a battery backup (for example) then on power\n   * loss it may still lose data.  Lucene cannot guarantee\n   * consistency on such devices.  </p>\n   *\n   * @see #prepareCommit\n   */\n  @Override\n  public final void commit() throws IOException {\n    ensureOpen();\n    commitInternal(config.getMergePolicy());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commit().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#commit().mjava","sourceNew":"  /**\n   * <p>Commits all pending changes (added and deleted\n   * documents, segment merges, added\n   * indexes, etc.) to the index, and syncs all referenced\n   * index files, such that a reader will see the changes\n   * and the index updates will survive an OS or machine\n   * crash or power loss.  Note that this does not wait for\n   * any running background merges to finish.  This may be a\n   * costly operation, so you should test the cost in your\n   * application and do it only when really necessary.</p>\n   *\n   * <p> Note that this operation calls Directory.sync on\n   * the index files.  That call should not return until the\n   * file contents and metadata are on stable storage.  For\n   * FSDirectory, this calls the OS's fsync.  But, beware:\n   * some hardware devices may in fact cache writes even\n   * during fsync, and return before the bits are actually\n   * on stable storage, to give the appearance of faster\n   * performance.  If you have such a device, and it does\n   * not have a battery backup (for example) then on power\n   * loss it may still lose data.  Lucene cannot guarantee\n   * consistency on such devices.  </p>\n   *\n   * <p> If nothing was committed, because there were no\n   * pending changes, this returns -1.  Otherwise, it returns\n   * the sequence number such that all indexing operations\n   * prior to this sequence will be included in the commit\n   * point, and all other operations will not. </p>\n   *\n   * @see #prepareCommit\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * of the last operation in the commit.  All sequence numbers &lt;= this value\n   * will be reflected in the commit, and all others will not.\n   */\n  @Override\n  public final long commit() throws IOException {\n    ensureOpen();\n    return commitInternal(config.getMergePolicy());\n  }\n\n","sourceOld":"  /**\n   * <p>Commits all pending changes (added and deleted\n   * documents, segment merges, added\n   * indexes, etc.) to the index, and syncs all referenced\n   * index files, such that a reader will see the changes\n   * and the index updates will survive an OS or machine\n   * crash or power loss.  Note that this does not wait for\n   * any running background merges to finish.  This may be a\n   * costly operation, so you should test the cost in your\n   * application and do it only when really necessary.</p>\n   *\n   * <p> Note that this operation calls Directory.sync on\n   * the index files.  That call should not return until the\n   * file contents and metadata are on stable storage.  For\n   * FSDirectory, this calls the OS's fsync.  But, beware:\n   * some hardware devices may in fact cache writes even\n   * during fsync, and return before the bits are actually\n   * on stable storage, to give the appearance of faster\n   * performance.  If you have such a device, and it does\n   * not have a battery backup (for example) then on power\n   * loss it may still lose data.  Lucene cannot guarantee\n   * consistency on such devices.  </p>\n   *\n   * @see #prepareCommit\n   */\n  @Override\n  public final void commit() throws IOException {\n    ensureOpen();\n    commitInternal(config.getMergePolicy());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","7530de27b87b961b51f01bd1299b7004d46e8823"],"b1eb427f2c6beed80d1724555fc1db003ccf3030":["949847c0040cd70a68222d526cb0da7bf6cbb3c2"],"ee59f646cf24586a449cad77391a60a3ac8d8959":["7530de27b87b961b51f01bd1299b7004d46e8823"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"407687e67faf6e1f02a211ca078d8e3eed631027":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","b47e1512544568a22b82c96169d466fae8a4b79e"],"23a29a4862e38cc3b9bff14a888901c7c878885b":["f492fe129985750df09c8dac738aecc503158bb3"],"6483e4260c08168709c02238ae083a51519a28dd":["b1eb427f2c6beed80d1724555fc1db003ccf3030","19d35c01593b75b98b751866e41b1b24983ff42e"],"191128ac5b85671b1671e2c857437694283b6ebf":["b1eb427f2c6beed80d1724555fc1db003ccf3030","6483e4260c08168709c02238ae083a51519a28dd"],"16ebfabc294f23b88b6a39722a02c9d39b353195":["9972d96003bc59c07a44e73de3cdd505dc08fd17"],"19d35c01593b75b98b751866e41b1b24983ff42e":["16ebfabc294f23b88b6a39722a02c9d39b353195"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b1eb427f2c6beed80d1724555fc1db003ccf3030","191128ac5b85671b1671e2c857437694283b6ebf"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f492fe129985750df09c8dac738aecc503158bb3":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"b47e1512544568a22b82c96169d466fae8a4b79e":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9972d96003bc59c07a44e73de3cdd505dc08fd17":["23a29a4862e38cc3b9bff14a888901c7c878885b"],"949847c0040cd70a68222d526cb0da7bf6cbb3c2":["ee59f646cf24586a449cad77391a60a3ac8d8959"],"7530de27b87b961b51f01bd1299b7004d46e8823":["b47e1512544568a22b82c96169d466fae8a4b79e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["191128ac5b85671b1671e2c857437694283b6ebf"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b1eb427f2c6beed80d1724555fc1db003ccf3030":["6483e4260c08168709c02238ae083a51519a28dd","191128ac5b85671b1671e2c857437694283b6ebf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f492fe129985750df09c8dac738aecc503158bb3"],"ee59f646cf24586a449cad77391a60a3ac8d8959":["949847c0040cd70a68222d526cb0da7bf6cbb3c2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"23a29a4862e38cc3b9bff14a888901c7c878885b":["9972d96003bc59c07a44e73de3cdd505dc08fd17"],"6483e4260c08168709c02238ae083a51519a28dd":["191128ac5b85671b1671e2c857437694283b6ebf"],"191128ac5b85671b1671e2c857437694283b6ebf":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"16ebfabc294f23b88b6a39722a02c9d39b353195":["19d35c01593b75b98b751866e41b1b24983ff42e"],"19d35c01593b75b98b751866e41b1b24983ff42e":["6483e4260c08168709c02238ae083a51519a28dd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f492fe129985750df09c8dac738aecc503158bb3":["23a29a4862e38cc3b9bff14a888901c7c878885b"],"b47e1512544568a22b82c96169d466fae8a4b79e":["407687e67faf6e1f02a211ca078d8e3eed631027","7530de27b87b961b51f01bd1299b7004d46e8823"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["407687e67faf6e1f02a211ca078d8e3eed631027","fe33227f6805edab2036cbb80645cc4e2d1fa424","b47e1512544568a22b82c96169d466fae8a4b79e"],"9972d96003bc59c07a44e73de3cdd505dc08fd17":["16ebfabc294f23b88b6a39722a02c9d39b353195"],"949847c0040cd70a68222d526cb0da7bf6cbb3c2":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","ee59f646cf24586a449cad77391a60a3ac8d8959"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}