{"path":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(int).mjava","commits":[{"id":"b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1","date":1310609231,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(int).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(int).mjava","sourceNew":"  /**\n   * Find words for a more-like-this query former.\n   *\n   * @param docNum the id of the lucene document from which to find terms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(int docNum) throws IOException {\n    Map<String, Int> termFreqMap = new HashMap<String, Int>();\n    for (String fieldName : fieldNames) {\n      TermFreqVector vector = ir.getTermFreqVector(docNum, fieldName);\n\n      // field does not store term vector info\n      if (vector == null) {\n        Document d = ir.document(docNum);\n        String text[] = d.getValues(fieldName);\n        if (text != null) {\n          for (int j = 0; j < text.length; j++) {\n            addTermFrequencies(new StringReader(text[j]), termFreqMap, fieldName);\n          }\n        }\n      } else {\n        addTermFrequencies(termFreqMap, vector);\n      }\n\n    }\n\n    return createQueue(termFreqMap);\n  }\n\n","sourceOld":"  /**\n   * Find words for a more-like-this query former.\n   *\n   * @param docNum the id of the lucene document from which to find terms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(int docNum) throws IOException {\n    Map<String, Int> termFreqMap = new HashMap<String, Int>();\n    for (String fieldName : fieldNames) {\n      TermFreqVector vector = ir.getTermFreqVector(docNum, fieldName);\n\n      // field does not store term vector info\n      if (vector == null) {\n        Document d = ir.document(docNum);\n        String text[] = d.getValues(fieldName);\n        if (text != null) {\n          for (int j = 0; j < text.length; j++) {\n            addTermFrequencies(new StringReader(text[j]), termFreqMap, fieldName);\n          }\n        }\n      } else {\n        addTermFrequencies(termFreqMap, vector);\n      }\n\n    }\n\n    return createQueue(termFreqMap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(int).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(int).mjava","sourceNew":"  /**\n   * Find words for a more-like-this query former.\n   *\n   * @param docNum the id of the lucene document from which to find terms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(int docNum) throws IOException {\n    Map<String, Int> termFreqMap = new HashMap<String, Int>();\n    for (String fieldName : fieldNames) {\n      TermFreqVector vector = ir.getTermFreqVector(docNum, fieldName);\n\n      // field does not store term vector info\n      if (vector == null) {\n        Document d = ir.document(docNum);\n        IndexableField fields[] = d.getFields(fieldName);\n        if (fields != null) {\n          for (int j = 0; j < fields.length; j++) {\n            final String stringValue = fields[j].stringValue();\n            if (stringValue != null) {\n              addTermFrequencies(new StringReader(stringValue), termFreqMap, fieldName);\n            }\n          }\n        }\n      } else {\n        addTermFrequencies(termFreqMap, vector);\n      }\n\n    }\n\n    return createQueue(termFreqMap);\n  }\n\n","sourceOld":"  /**\n   * Find words for a more-like-this query former.\n   *\n   * @param docNum the id of the lucene document from which to find terms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(int docNum) throws IOException {\n    Map<String, Int> termFreqMap = new HashMap<String, Int>();\n    for (String fieldName : fieldNames) {\n      TermFreqVector vector = ir.getTermFreqVector(docNum, fieldName);\n\n      // field does not store term vector info\n      if (vector == null) {\n        Document d = ir.document(docNum);\n        String text[] = d.getValues(fieldName);\n        if (text != null) {\n          for (int j = 0; j < text.length; j++) {\n            addTermFrequencies(new StringReader(text[j]), termFreqMap, fieldName);\n          }\n        }\n      } else {\n        addTermFrequencies(termFreqMap, vector);\n      }\n\n    }\n\n    return createQueue(termFreqMap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a783b442a82f3411d699e27aad4986f29e73aa43","date":1317132284,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(int).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(int).mjava","sourceNew":"  /**\n   * Find words for a more-like-this query former.\n   *\n   * @param docNum the id of the lucene document from which to find terms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(int docNum) throws IOException {\n    Map<String, Int> termFreqMap = new HashMap<String, Int>();\n    for (String fieldName : fieldNames) {\n      TermFreqVector vector = ir.getTermFreqVector(docNum, fieldName);\n\n      // field does not store term vector info\n      if (vector == null) {\n        Document d = ir.document(docNum);\n        IndexableField fields[] = d.getFields(fieldName);\n        for (int j = 0; j < fields.length; j++) {\n          final String stringValue = fields[j].stringValue();\n          if (stringValue != null) {\n            addTermFrequencies(new StringReader(stringValue), termFreqMap, fieldName);\n          }\n        }\n      } else {\n        addTermFrequencies(termFreqMap, vector);\n      }\n\n    }\n\n    return createQueue(termFreqMap);\n  }\n\n","sourceOld":"  /**\n   * Find words for a more-like-this query former.\n   *\n   * @param docNum the id of the lucene document from which to find terms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(int docNum) throws IOException {\n    Map<String, Int> termFreqMap = new HashMap<String, Int>();\n    for (String fieldName : fieldNames) {\n      TermFreqVector vector = ir.getTermFreqVector(docNum, fieldName);\n\n      // field does not store term vector info\n      if (vector == null) {\n        Document d = ir.document(docNum);\n        IndexableField fields[] = d.getFields(fieldName);\n        if (fields != null) {\n          for (int j = 0; j < fields.length; j++) {\n            final String stringValue = fields[j].stringValue();\n            if (stringValue != null) {\n              addTermFrequencies(new StringReader(stringValue), termFreqMap, fieldName);\n            }\n          }\n        }\n      } else {\n        addTermFrequencies(termFreqMap, vector);\n      }\n\n    }\n\n    return createQueue(termFreqMap);\n  }\n\n","bugFix":null,"bugIntro":["e562682007e295029696e354ac6947531b083c79"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(int).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(int).mjava","sourceNew":"  /**\n   * Find words for a more-like-this query former.\n   *\n   * @param docNum the id of the lucene document from which to find terms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(int docNum) throws IOException {\n    Map<String, Int> termFreqMap = new HashMap<String, Int>();\n    for (String fieldName : fieldNames) {\n      final Fields vectors = ir.getTermVectors(docNum);\n      final Terms vector;\n      if (vectors != null) {\n        vector = vectors.terms(fieldName);\n      } else {\n        vector = null;\n      }\n\n      // field does not store term vector info\n      if (vector == null) {\n        Document d = ir.document(docNum);\n        IndexableField fields[] = d.getFields(fieldName);\n        for (int j = 0; j < fields.length; j++) {\n          final String stringValue = fields[j].stringValue();\n          if (stringValue != null) {\n            addTermFrequencies(new StringReader(stringValue), termFreqMap, fieldName);\n          }\n        }\n      } else {\n        addTermFrequencies(termFreqMap, vector);\n      }\n    }\n\n    return createQueue(termFreqMap);\n  }\n\n","sourceOld":"  /**\n   * Find words for a more-like-this query former.\n   *\n   * @param docNum the id of the lucene document from which to find terms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(int docNum) throws IOException {\n    Map<String, Int> termFreqMap = new HashMap<String, Int>();\n    for (String fieldName : fieldNames) {\n      TermFreqVector vector = ir.getTermFreqVector(docNum, fieldName);\n\n      // field does not store term vector info\n      if (vector == null) {\n        Document d = ir.document(docNum);\n        IndexableField fields[] = d.getFields(fieldName);\n        for (int j = 0; j < fields.length; j++) {\n          final String stringValue = fields[j].stringValue();\n          if (stringValue != null) {\n            addTermFrequencies(new StringReader(stringValue), termFreqMap, fieldName);\n          }\n        }\n      } else {\n        addTermFrequencies(termFreqMap, vector);\n      }\n\n    }\n\n    return createQueue(termFreqMap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(int).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(int).mjava","sourceNew":"  /**\n   * Find words for a more-like-this query former.\n   *\n   * @param docNum the id of the lucene document from which to find terms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(int docNum) throws IOException {\n    Map<String, Int> termFreqMap = new HashMap<String, Int>();\n    for (String fieldName : fieldNames) {\n      final InvertedFields vectors = ir.getTermVectors(docNum);\n      final Terms vector;\n      if (vectors != null) {\n        vector = vectors.terms(fieldName);\n      } else {\n        vector = null;\n      }\n\n      // field does not store term vector info\n      if (vector == null) {\n        Document d = ir.document(docNum);\n        IndexableField fields[] = d.getFields(fieldName);\n        for (int j = 0; j < fields.length; j++) {\n          final String stringValue = fields[j].stringValue();\n          if (stringValue != null) {\n            addTermFrequencies(new StringReader(stringValue), termFreqMap, fieldName);\n          }\n        }\n      } else {\n        addTermFrequencies(termFreqMap, vector);\n      }\n    }\n\n    return createQueue(termFreqMap);\n  }\n\n","sourceOld":"  /**\n   * Find words for a more-like-this query former.\n   *\n   * @param docNum the id of the lucene document from which to find terms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(int docNum) throws IOException {\n    Map<String, Int> termFreqMap = new HashMap<String, Int>();\n    for (String fieldName : fieldNames) {\n      final Fields vectors = ir.getTermVectors(docNum);\n      final Terms vector;\n      if (vectors != null) {\n        vector = vectors.terms(fieldName);\n      } else {\n        vector = null;\n      }\n\n      // field does not store term vector info\n      if (vector == null) {\n        Document d = ir.document(docNum);\n        IndexableField fields[] = d.getFields(fieldName);\n        for (int j = 0; j < fields.length; j++) {\n          final String stringValue = fields[j].stringValue();\n          if (stringValue != null) {\n            addTermFrequencies(new StringReader(stringValue), termFreqMap, fieldName);\n          }\n        }\n      } else {\n        addTermFrequencies(termFreqMap, vector);\n      }\n    }\n\n    return createQueue(termFreqMap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(int).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(int).mjava","sourceNew":"  /**\n   * Find words for a more-like-this query former.\n   *\n   * @param docNum the id of the lucene document from which to find terms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(int docNum) throws IOException {\n    Map<String, Int> termFreqMap = new HashMap<String, Int>();\n    for (String fieldName : fieldNames) {\n      final Fields vectors = ir.getTermVectors(docNum);\n      final Terms vector;\n      if (vectors != null) {\n        vector = vectors.terms(fieldName);\n      } else {\n        vector = null;\n      }\n\n      // field does not store term vector info\n      if (vector == null) {\n        Document d = ir.document(docNum);\n        IndexableField fields[] = d.getFields(fieldName);\n        for (int j = 0; j < fields.length; j++) {\n          final String stringValue = fields[j].stringValue();\n          if (stringValue != null) {\n            addTermFrequencies(new StringReader(stringValue), termFreqMap, fieldName);\n          }\n        }\n      } else {\n        addTermFrequencies(termFreqMap, vector);\n      }\n    }\n\n    return createQueue(termFreqMap);\n  }\n\n","sourceOld":"  /**\n   * Find words for a more-like-this query former.\n   *\n   * @param docNum the id of the lucene document from which to find terms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(int docNum) throws IOException {\n    Map<String, Int> termFreqMap = new HashMap<String, Int>();\n    for (String fieldName : fieldNames) {\n      final InvertedFields vectors = ir.getTermVectors(docNum);\n      final Terms vector;\n      if (vectors != null) {\n        vector = vectors.terms(fieldName);\n      } else {\n        vector = null;\n      }\n\n      // field does not store term vector info\n      if (vector == null) {\n        Document d = ir.document(docNum);\n        IndexableField fields[] = d.getFields(fieldName);\n        for (int j = 0; j < fields.length; j++) {\n          final String stringValue = fields[j].stringValue();\n          if (stringValue != null) {\n            addTermFrequencies(new StringReader(stringValue), termFreqMap, fieldName);\n          }\n        }\n      } else {\n        addTermFrequencies(termFreqMap, vector);\n      }\n    }\n\n    return createQueue(termFreqMap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(int).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(int).mjava","sourceNew":"  /**\n   * Find words for a more-like-this query former.\n   *\n   * @param docNum the id of the lucene document from which to find terms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(int docNum) throws IOException {\n    Map<String, Int> termFreqMap = new HashMap<String, Int>();\n    for (String fieldName : fieldNames) {\n      final Fields vectors = ir.getTermVectors(docNum);\n      final Terms vector;\n      if (vectors != null) {\n        vector = vectors.terms(fieldName);\n      } else {\n        vector = null;\n      }\n\n      // field does not store term vector info\n      if (vector == null) {\n        Document d = ir.document(docNum);\n        IndexableField fields[] = d.getFields(fieldName);\n        for (int j = 0; j < fields.length; j++) {\n          final String stringValue = fields[j].stringValue();\n          if (stringValue != null) {\n            addTermFrequencies(new StringReader(stringValue), termFreqMap, fieldName);\n          }\n        }\n      } else {\n        addTermFrequencies(termFreqMap, vector);\n      }\n    }\n\n    return createQueue(termFreqMap);\n  }\n\n","sourceOld":"  /**\n   * Find words for a more-like-this query former.\n   *\n   * @param docNum the id of the lucene document from which to find terms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(int docNum) throws IOException {\n    Map<String, Int> termFreqMap = new HashMap<String, Int>();\n    for (String fieldName : fieldNames) {\n      final Fields vectors = ir.getTermVectors(docNum);\n      final Terms vector;\n      if (vectors != null) {\n        vector = vectors.terms(fieldName);\n      } else {\n        vector = null;\n      }\n\n      // field does not store term vector info\n      if (vector == null) {\n        Document d = ir.document(docNum);\n        IndexableField fields[] = d.getFields(fieldName);\n        for (int j = 0; j < fields.length; j++) {\n          final String stringValue = fields[j].stringValue();\n          if (stringValue != null) {\n            addTermFrequencies(new StringReader(stringValue), termFreqMap, fieldName);\n          }\n        }\n      } else {\n        addTermFrequencies(termFreqMap, vector);\n      }\n    }\n\n    return createQueue(termFreqMap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"3cc749c053615f5871f3b95715fe292f34e70a53":["a783b442a82f3411d699e27aad4986f29e73aa43"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["3cc749c053615f5871f3b95715fe292f34e70a53"],"b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a783b442a82f3411d699e27aad4986f29e73aa43":["1509f151d7692d84fae414b2b799ac06ba60fcb4"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"3cc749c053615f5871f3b95715fe292f34e70a53":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["a783b442a82f3411d699e27aad4986f29e73aa43"],"a783b442a82f3411d699e27aad4986f29e73aa43":["3cc749c053615f5871f3b95715fe292f34e70a53"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}