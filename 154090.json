{"path":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#before().mjava","commits":[{"id":"531fe719c7218235a679452eb3d137bfd8fc6af1","date":1415191086,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#before().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void before() throws Exception {\n    tmpSolrHome = createTempDir().toFile();\n    tmpConfDir = new File(tmpSolrHome, confDir);\n    FileUtils.copyDirectory(new File(TEST_HOME()), tmpSolrHome.getAbsoluteFile());\n\n    final SortedMap<ServletHolder,String> extraServlets = new TreeMap<>();\n    final ServletHolder solrRestApi = new ServletHolder(\"SolrSchemaRestApi\", ServerServlet.class);\n    solrRestApi.setInitParameter(\"org.restlet.application\", \"org.apache.solr.rest.SolrSchemaRestApi\");\n    extraServlets.put(solrRestApi, \"/schema/*\");  // '/schema/*' matches '/schema', '/schema/', and '/schema/whatever...'\n\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    System.setProperty(\"enable.update.log\", \"false\");\n\n    createJettyAndHarness(tmpSolrHome.getAbsolutePath(), \"solrconfig-managed-schema.xml\", \"schema-rest.xml\",\n        \"/solr\", true, extraServlets);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae2f5be890d26585d438eba0b9cc7d3c0a9775be","date":1427387954,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#before().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#before().mjava","sourceNew":"  @Before\n  public void before() throws Exception {\n    tmpSolrHome = createTempDir().toFile();\n    tmpConfDir = new File(tmpSolrHome, confDir);\n    FileUtils.copyDirectory(new File(TEST_HOME()), tmpSolrHome.getAbsoluteFile());\n\n    final SortedMap<ServletHolder, String> extraServlets = new TreeMap<>();\n    final ServletHolder solrRestApi = new ServletHolder(\"SolrSchemaRestApi\", ServerServlet.class);\n    solrRestApi.setInitParameter(\"org.restlet.application\", \"org.apache.solr.rest.SolrSchemaRestApi\");\n    extraServlets.put(solrRestApi, \"/schema/*\");  // '/schema/*' matches '/schema', '/schema/', and '/schema/whatever...'\n\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    System.setProperty(\"enable.update.log\", \"false\");\n\n    createJettyAndHarness(tmpSolrHome.getAbsolutePath(), \"solrconfig-managed-schema.xml\", \"schema-rest.xml\",\n        \"/solr\", true, extraServlets);\n  }\n\n","sourceOld":"  @Before\n  public void before() throws Exception {\n    tmpSolrHome = createTempDir().toFile();\n    tmpConfDir = new File(tmpSolrHome, confDir);\n    FileUtils.copyDirectory(new File(TEST_HOME()), tmpSolrHome.getAbsoluteFile());\n\n    final SortedMap<ServletHolder,String> extraServlets = new TreeMap<>();\n    final ServletHolder solrRestApi = new ServletHolder(\"SolrSchemaRestApi\", ServerServlet.class);\n    solrRestApi.setInitParameter(\"org.restlet.application\", \"org.apache.solr.rest.SolrSchemaRestApi\");\n    extraServlets.put(solrRestApi, \"/schema/*\");  // '/schema/*' matches '/schema', '/schema/', and '/schema/whatever...'\n\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    System.setProperty(\"enable.update.log\", \"false\");\n\n    createJettyAndHarness(tmpSolrHome.getAbsolutePath(), \"solrconfig-managed-schema.xml\", \"schema-rest.xml\",\n        \"/solr\", true, extraServlets);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#before().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#before().mjava","sourceNew":"  @Before\n  public void before() throws Exception {\n    tmpSolrHome = createTempDir().toFile();\n    tmpConfDir = new File(tmpSolrHome, confDir);\n    FileUtils.copyDirectory(new File(TEST_HOME()), tmpSolrHome.getAbsoluteFile());\n\n    final SortedMap<ServletHolder, String> extraServlets = new TreeMap<>();\n    final ServletHolder solrRestApi = new ServletHolder(\"SolrSchemaRestApi\", ServerServlet.class);\n    solrRestApi.setInitParameter(\"org.restlet.application\", \"org.apache.solr.rest.SolrSchemaRestApi\");\n    extraServlets.put(solrRestApi, \"/schema/*\");  // '/schema/*' matches '/schema', '/schema/', and '/schema/whatever...'\n\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    System.setProperty(\"enable.update.log\", \"false\");\n\n    createJettyAndHarness(tmpSolrHome.getAbsolutePath(), \"solrconfig-managed-schema.xml\", \"schema-rest.xml\",\n        \"/solr\", true, extraServlets);\n  }\n\n","sourceOld":"  @Before\n  public void before() throws Exception {\n    tmpSolrHome = createTempDir().toFile();\n    tmpConfDir = new File(tmpSolrHome, confDir);\n    FileUtils.copyDirectory(new File(TEST_HOME()), tmpSolrHome.getAbsoluteFile());\n\n    final SortedMap<ServletHolder,String> extraServlets = new TreeMap<>();\n    final ServletHolder solrRestApi = new ServletHolder(\"SolrSchemaRestApi\", ServerServlet.class);\n    solrRestApi.setInitParameter(\"org.restlet.application\", \"org.apache.solr.rest.SolrSchemaRestApi\");\n    extraServlets.put(solrRestApi, \"/schema/*\");  // '/schema/*' matches '/schema', '/schema/', and '/schema/whatever...'\n\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    System.setProperty(\"enable.update.log\", \"false\");\n\n    createJettyAndHarness(tmpSolrHome.getAbsolutePath(), \"solrconfig-managed-schema.xml\", \"schema-rest.xml\",\n        \"/solr\", true, extraServlets);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#before().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#before().mjava","sourceNew":"  @Before\n  public void before() throws Exception {\n    tmpSolrHome = createTempDir().toFile();\n    tmpConfDir = new File(tmpSolrHome, confDir);\n    FileUtils.copyDirectory(new File(TEST_HOME()), tmpSolrHome.getAbsoluteFile());\n\n    final SortedMap<ServletHolder, String> extraServlets = new TreeMap<>();\n    final ServletHolder solrRestApi = new ServletHolder(\"SolrSchemaRestApi\", ServerServlet.class);\n    solrRestApi.setInitParameter(\"org.restlet.application\", \"org.apache.solr.rest.SolrSchemaRestApi\");\n    extraServlets.put(solrRestApi, \"/schema/*\");  // '/schema/*' matches '/schema', '/schema/', and '/schema/whatever...'\n\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    System.setProperty(\"enable.update.log\", \"false\");\n\n    createJettyAndHarness(tmpSolrHome.getAbsolutePath(), \"solrconfig-managed-schema.xml\", \"schema-rest.xml\",\n        \"/solr\", true, extraServlets);\n    if (random().nextBoolean()) {\n      log.info(\"These tests are run with V2 API\");\n      restTestHarness.setServerProvider(() -> jetty.getBaseUrl().toString() + \"/v2/cores/\" + DEFAULT_TEST_CORENAME);\n    }\n  }\n\n","sourceOld":"  @Before\n  public void before() throws Exception {\n    tmpSolrHome = createTempDir().toFile();\n    tmpConfDir = new File(tmpSolrHome, confDir);\n    FileUtils.copyDirectory(new File(TEST_HOME()), tmpSolrHome.getAbsoluteFile());\n\n    final SortedMap<ServletHolder, String> extraServlets = new TreeMap<>();\n    final ServletHolder solrRestApi = new ServletHolder(\"SolrSchemaRestApi\", ServerServlet.class);\n    solrRestApi.setInitParameter(\"org.restlet.application\", \"org.apache.solr.rest.SolrSchemaRestApi\");\n    extraServlets.put(solrRestApi, \"/schema/*\");  // '/schema/*' matches '/schema', '/schema/', and '/schema/whatever...'\n\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    System.setProperty(\"enable.update.log\", \"false\");\n\n    createJettyAndHarness(tmpSolrHome.getAbsolutePath(), \"solrconfig-managed-schema.xml\", \"schema-rest.xml\",\n        \"/solr\", true, extraServlets);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#before().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#before().mjava","sourceNew":"  @Before\n  public void before() throws Exception {\n    tmpSolrHome = createTempDir().toFile();\n    tmpConfDir = new File(tmpSolrHome, confDir);\n    FileUtils.copyDirectory(new File(TEST_HOME()), tmpSolrHome.getAbsoluteFile());\n\n    final SortedMap<ServletHolder, String> extraServlets = new TreeMap<>();\n    final ServletHolder solrRestApi = new ServletHolder(\"SolrSchemaRestApi\", ServerServlet.class);\n    solrRestApi.setInitParameter(\"org.restlet.application\", \"org.apache.solr.rest.SolrSchemaRestApi\");\n    extraServlets.put(solrRestApi, \"/schema/*\");  // '/schema/*' matches '/schema', '/schema/', and '/schema/whatever...'\n\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    System.setProperty(\"enable.update.log\", \"false\");\n\n    createJettyAndHarness(tmpSolrHome.getAbsolutePath(), \"solrconfig-managed-schema.xml\", \"schema-rest.xml\",\n        \"/solr\", true, extraServlets);\n    if (random().nextBoolean()) {\n      log.info(\"These tests are run with V2 API\");\n      restTestHarness.setServerProvider(() -> jetty.getBaseUrl().toString() + \"/v2/cores/\" + DEFAULT_TEST_CORENAME);\n    }\n  }\n\n","sourceOld":"  @Before\n  public void before() throws Exception {\n    tmpSolrHome = createTempDir().toFile();\n    tmpConfDir = new File(tmpSolrHome, confDir);\n    FileUtils.copyDirectory(new File(TEST_HOME()), tmpSolrHome.getAbsoluteFile());\n\n    final SortedMap<ServletHolder, String> extraServlets = new TreeMap<>();\n    final ServletHolder solrRestApi = new ServletHolder(\"SolrSchemaRestApi\", ServerServlet.class);\n    solrRestApi.setInitParameter(\"org.restlet.application\", \"org.apache.solr.rest.SolrSchemaRestApi\");\n    extraServlets.put(solrRestApi, \"/schema/*\");  // '/schema/*' matches '/schema', '/schema/', and '/schema/whatever...'\n\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    System.setProperty(\"enable.update.log\", \"false\");\n\n    createJettyAndHarness(tmpSolrHome.getAbsolutePath(), \"solrconfig-managed-schema.xml\", \"schema-rest.xml\",\n        \"/solr\", true, extraServlets);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ab788212d72a7c436e5ef349ca99fe3c8fc78b","date":1489203052,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#before().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#before().mjava","sourceNew":"  @Before\n  public void before() throws Exception {\n    tmpSolrHome = createTempDir().toFile();\n    tmpConfDir = new File(tmpSolrHome, confDir);\n    FileUtils.copyDirectory(new File(TEST_HOME()), tmpSolrHome.getAbsoluteFile());\n\n    final SortedMap<ServletHolder, String> extraServlets = new TreeMap<>();\n    final ServletHolder solrRestApi = new ServletHolder(\"SolrSchemaRestApi\", ServerServlet.class);\n    solrRestApi.setInitParameter(\"org.restlet.application\", \"org.apache.solr.rest.SolrSchemaRestApi\");\n    extraServlets.put(solrRestApi, \"/schema/*\");  // '/schema/*' matches '/schema', '/schema/', and '/schema/whatever...'\n\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    System.setProperty(\"enable.update.log\", \"false\");\n\n    createJettyAndHarness(tmpSolrHome.getAbsolutePath(), \"solrconfig-managed-schema.xml\", \"schema-rest.xml\",\n        \"/solr\", true, extraServlets);\n    if (random().nextBoolean()) {\n      log.info(\"These tests are run with V2 API\");\n      restTestHarness.setServerProvider(() -> jetty.getBaseUrl().toString() + \"/____v2/cores/\" + DEFAULT_TEST_CORENAME);\n    }\n  }\n\n","sourceOld":"  @Before\n  public void before() throws Exception {\n    tmpSolrHome = createTempDir().toFile();\n    tmpConfDir = new File(tmpSolrHome, confDir);\n    FileUtils.copyDirectory(new File(TEST_HOME()), tmpSolrHome.getAbsoluteFile());\n\n    final SortedMap<ServletHolder, String> extraServlets = new TreeMap<>();\n    final ServletHolder solrRestApi = new ServletHolder(\"SolrSchemaRestApi\", ServerServlet.class);\n    solrRestApi.setInitParameter(\"org.restlet.application\", \"org.apache.solr.rest.SolrSchemaRestApi\");\n    extraServlets.put(solrRestApi, \"/schema/*\");  // '/schema/*' matches '/schema', '/schema/', and '/schema/whatever...'\n\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    System.setProperty(\"enable.update.log\", \"false\");\n\n    createJettyAndHarness(tmpSolrHome.getAbsolutePath(), \"solrconfig-managed-schema.xml\", \"schema-rest.xml\",\n        \"/solr\", true, extraServlets);\n    if (random().nextBoolean()) {\n      log.info(\"These tests are run with V2 API\");\n      restTestHarness.setServerProvider(() -> jetty.getBaseUrl().toString() + \"/v2/cores/\" + DEFAULT_TEST_CORENAME);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d16198391f70a4ee52a8c8792c91eb87a30f1d6","date":1596695552,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#before().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#before().mjava","sourceNew":"    @Before\n  public void before() throws Exception {\n    tmpSolrHome = createTempDir().toFile();\n    tmpConfDir = new File(tmpSolrHome, confDir);\n    FileUtils.copyDirectory(new File(TEST_HOME()), tmpSolrHome.getAbsoluteFile());\n\n    final SortedMap<ServletHolder, String> extraServlets = new TreeMap<>();\n    final ServletHolder solrRestApi = new ServletHolder(\"SolrSchemaRestApi\", ServerServlet.class);\n    solrRestApi.setInitParameter(\"org.restlet.application\", \"org.apache.solr.rest.SolrSchemaRestApi\");\n    extraServlets.put(solrRestApi, \"/schema/*\");  // '/schema/*' matches '/schema', '/schema/', and '/schema/whatever...'\n\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    System.setProperty(\"enable.update.log\", \"false\");\n\n    createJettyAndHarness(tmpSolrHome.getAbsolutePath(), \"solrconfig-managed-schema.xml\", \"schema-rest.xml\",\n        \"/solr\", true, extraServlets);\n    if (random().nextBoolean()) {\n      log.info(\"These tests are run with V2 API\");\n      restTestHarness.setServerProvider(() -> jetty.getBaseUrl().toString() + \"/____v2/cores/\" + DEFAULT_TEST_CORENAME);\n    }\n  }\n\n","sourceOld":"  @Before\n  public void before() throws Exception {\n    tmpSolrHome = createTempDir().toFile();\n    tmpConfDir = new File(tmpSolrHome, confDir);\n    FileUtils.copyDirectory(new File(TEST_HOME()), tmpSolrHome.getAbsoluteFile());\n\n    final SortedMap<ServletHolder, String> extraServlets = new TreeMap<>();\n    final ServletHolder solrRestApi = new ServletHolder(\"SolrSchemaRestApi\", ServerServlet.class);\n    solrRestApi.setInitParameter(\"org.restlet.application\", \"org.apache.solr.rest.SolrSchemaRestApi\");\n    extraServlets.put(solrRestApi, \"/schema/*\");  // '/schema/*' matches '/schema', '/schema/', and '/schema/whatever...'\n\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    System.setProperty(\"enable.update.log\", \"false\");\n\n    createJettyAndHarness(tmpSolrHome.getAbsolutePath(), \"solrconfig-managed-schema.xml\", \"schema-rest.xml\",\n        \"/solr\", true, extraServlets);\n    if (random().nextBoolean()) {\n      log.info(\"These tests are run with V2 API\");\n      restTestHarness.setServerProvider(() -> jetty.getBaseUrl().toString() + \"/____v2/cores/\" + DEFAULT_TEST_CORENAME);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b","date":1601832109,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#before().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#before().mjava","sourceNew":"    @Before\n  public void before() throws Exception {\n    tmpSolrHome = createTempDir().toFile();\n    tmpConfDir = new File(tmpSolrHome, confDir);\n    FileUtils.copyDirectory(new File(TEST_HOME()), tmpSolrHome.getAbsoluteFile());\n\n    final SortedMap<ServletHolder, String> extraServlets = new TreeMap<>();\n\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    System.setProperty(\"enable.update.log\", \"false\");\n\n    createJettyAndHarness(tmpSolrHome.getAbsolutePath(), \"solrconfig-managed-schema.xml\", \"schema-rest.xml\",\n        \"/solr\", true, extraServlets);\n    if (random().nextBoolean()) {\n      log.info(\"These tests are run with V2 API\");\n      restTestHarness.setServerProvider(() -> jetty.getBaseUrl().toString() + \"/____v2/cores/\" + DEFAULT_TEST_CORENAME);\n    }\n  }\n\n","sourceOld":"    @Before\n  public void before() throws Exception {\n    tmpSolrHome = createTempDir().toFile();\n    tmpConfDir = new File(tmpSolrHome, confDir);\n    FileUtils.copyDirectory(new File(TEST_HOME()), tmpSolrHome.getAbsoluteFile());\n\n    final SortedMap<ServletHolder, String> extraServlets = new TreeMap<>();\n    final ServletHolder solrRestApi = new ServletHolder(\"SolrSchemaRestApi\", ServerServlet.class);\n    solrRestApi.setInitParameter(\"org.restlet.application\", \"org.apache.solr.rest.SolrSchemaRestApi\");\n    extraServlets.put(solrRestApi, \"/schema/*\");  // '/schema/*' matches '/schema', '/schema/', and '/schema/whatever...'\n\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    System.setProperty(\"enable.update.log\", \"false\");\n\n    createJettyAndHarness(tmpSolrHome.getAbsolutePath(), \"solrconfig-managed-schema.xml\", \"schema-rest.xml\",\n        \"/solr\", true, extraServlets);\n    if (random().nextBoolean()) {\n      log.info(\"These tests are run with V2 API\");\n      restTestHarness.setServerProvider(() -> jetty.getBaseUrl().toString() + \"/____v2/cores/\" + DEFAULT_TEST_CORENAME);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["531fe719c7218235a679452eb3d137bfd8fc6af1","ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b":["0d16198391f70a4ee52a8c8792c91eb87a30f1d6"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a8ab788212d72a7c436e5ef349ca99fe3c8fc78b":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"0d16198391f70a4ee52a8c8792c91eb87a30f1d6":["a8ab788212d72a7c436e5ef349ca99fe3c8fc78b"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"531fe719c7218235a679452eb3d137bfd8fc6af1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a8ab788212d72a7c436e5ef349ca99fe3c8fc78b":["0d16198391f70a4ee52a8c8792c91eb87a30f1d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["a8ab788212d72a7c436e5ef349ca99fe3c8fc78b","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"0d16198391f70a4ee52a8c8792c91eb87a30f1d6":["89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}