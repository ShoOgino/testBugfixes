{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/DocRouter#getSearchSlices(String,SolrParams,DocCollection).mjava","commits":[{"id":"e7754464847b06ced605515bd48219280ede29e9","date":1354586462,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DocRouter#getSearchSlices(String,SolrParams,DocCollection).mjava","pathOld":"/dev/null","sourceNew":"  /** This method is consulted to determine what slices should be queried for a request when\n   *  an explicit shards parameter was not used.\n   *  shardKey (normally from shard.keys) and params may be null.\n   **/\n  public abstract Collection<Slice> getSearchSlices(String shardKey, SolrParams params, DocCollection collection);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eec5368fa415ebab044b7ae01de50d5b49519b7e","date":1355029764,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DocRouter#getSearchSlices(String,SolrParams,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/DocRouter#getSearchSlices(String,SolrParams,DocCollection).mjava","sourceNew":"  /** This method is consulted to determine what slices should be queried for a request when\n   *  an explicit shards parameter was not used.\n   *  This method accepts a multi-valued shardKeys parameter (normally comma separated from the shard.keys request parameter)\n   *  and aggregates the slices returned by getSearchSlicesSingle for each shardKey.\n   **/\n  public Collection<Slice> getSearchSlices(String shardKeys, SolrParams params, DocCollection collection) {\n    if (shardKeys == null || shardKeys.indexOf(',') < 0) {\n      return getSearchSlicesSingle(shardKeys, params, collection);\n    }\n\n    List<String> shardKeyList = StrUtils.splitSmart(shardKeys, \",\", true);\n    HashSet<Slice> allSlices = new HashSet<Slice>();\n    for (String shardKey : shardKeyList) {\n      allSlices.addAll( getSearchSlicesSingle(shardKey, params, collection) );\n    }\n    return allSlices;\n  }\n\n","sourceOld":"  /** This method is consulted to determine what slices should be queried for a request when\n   *  an explicit shards parameter was not used.\n   *  shardKey (normally from shard.keys) and params may be null.\n   **/\n  public abstract Collection<Slice> getSearchSlices(String shardKey, SolrParams params, DocCollection collection);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DocRouter#getSearchSlices(String,SolrParams,DocCollection).mjava","pathOld":"/dev/null","sourceNew":"  /** This method is consulted to determine what slices should be queried for a request when\n   *  an explicit shards parameter was not used.\n   *  This method accepts a multi-valued shardKeys parameter (normally comma separated from the shard.keys request parameter)\n   *  and aggregates the slices returned by getSearchSlicesSingle for each shardKey.\n   **/\n  public Collection<Slice> getSearchSlices(String shardKeys, SolrParams params, DocCollection collection) {\n    if (shardKeys == null || shardKeys.indexOf(',') < 0) {\n      return getSearchSlicesSingle(shardKeys, params, collection);\n    }\n\n    List<String> shardKeyList = StrUtils.splitSmart(shardKeys, \",\", true);\n    HashSet<Slice> allSlices = new HashSet<Slice>();\n    for (String shardKey : shardKeyList) {\n      allSlices.addAll( getSearchSlicesSingle(shardKey, params, collection) );\n    }\n    return allSlices;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DocRouter#getSearchSlices(String,SolrParams,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/DocRouter#getSearchSlices(String,SolrParams,DocCollection).mjava","sourceNew":"  /** This method is consulted to determine what slices should be queried for a request when\n   *  an explicit shards parameter was not used.\n   *  This method accepts a multi-valued shardKeys parameter (normally comma separated from the shard.keys request parameter)\n   *  and aggregates the slices returned by getSearchSlicesSingle for each shardKey.\n   **/\n  public Collection<Slice> getSearchSlices(String shardKeys, SolrParams params, DocCollection collection) {\n    if (shardKeys == null || shardKeys.indexOf(',') < 0) {\n      return getSearchSlicesSingle(shardKeys, params, collection);\n    }\n\n    List<String> shardKeyList = StrUtils.splitSmart(shardKeys, \",\", true);\n    HashSet<Slice> allSlices = new HashSet<>();\n    for (String shardKey : shardKeyList) {\n      allSlices.addAll( getSearchSlicesSingle(shardKey, params, collection) );\n    }\n    return allSlices;\n  }\n\n","sourceOld":"  /** This method is consulted to determine what slices should be queried for a request when\n   *  an explicit shards parameter was not used.\n   *  This method accepts a multi-valued shardKeys parameter (normally comma separated from the shard.keys request parameter)\n   *  and aggregates the slices returned by getSearchSlicesSingle for each shardKey.\n   **/\n  public Collection<Slice> getSearchSlices(String shardKeys, SolrParams params, DocCollection collection) {\n    if (shardKeys == null || shardKeys.indexOf(',') < 0) {\n      return getSearchSlicesSingle(shardKeys, params, collection);\n    }\n\n    List<String> shardKeyList = StrUtils.splitSmart(shardKeys, \",\", true);\n    HashSet<Slice> allSlices = new HashSet<Slice>();\n    for (String shardKey : shardKeyList) {\n      allSlices.addAll( getSearchSlicesSingle(shardKey, params, collection) );\n    }\n    return allSlices;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["eec5368fa415ebab044b7ae01de50d5b49519b7e"],"e7754464847b06ced605515bd48219280ede29e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"eec5368fa415ebab044b7ae01de50d5b49519b7e":["e7754464847b06ced605515bd48219280ede29e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eec5368fa415ebab044b7ae01de50d5b49519b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7754464847b06ced605515bd48219280ede29e9":["eec5368fa415ebab044b7ae01de50d5b49519b7e"],"eec5368fa415ebab044b7ae01de50d5b49519b7e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e7754464847b06ced605515bd48219280ede29e9","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}