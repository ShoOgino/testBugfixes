{"path":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testNumericRangeQuery(IndexSearcher).mjava","commits":[{"id":"4d9aa91d3fdd25528bac3b2e6115d54fc2f28753","date":1416999434,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testNumericRangeQuery(IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  private static void testNumericRangeQuery(IndexSearcher s) throws IOException {\n    NumericDocValues numbers = MultiDocValues.getNumericValues(s.getIndexReader(), \"number\");\n    for(int i=0;i<100;i++) {\n      // Confirm we can range search by the new indexed (numeric) field:\n      long min = random().nextLong();\n      long max = random().nextLong();\n      if (min > max) {\n        long x = min;\n        min = max;\n        max = x;\n      }\n\n      TopDocs hits = s.search(NumericRangeQuery.newLongRange(\"number\", min, max, true, true), 100);\n      for(ScoreDoc scoreDoc : hits.scoreDocs) {\n        long value = Long.parseLong(s.doc(scoreDoc.doc).get(\"text\").split(\" \")[1]);\n        assertTrue(value >= min);\n        assertTrue(value <= max);\n        assertEquals(value, numbers.get(scoreDoc.doc));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testDimensionalRangeQuery(IndexSearcher).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testNumericRangeQuery(IndexSearcher).mjava","sourceNew":"  private static void testDimensionalRangeQuery(IndexSearcher s) throws IOException {\n    NumericDocValues numbers = MultiDocValues.getNumericValues(s.getIndexReader(), \"number\");\n    for(int i=0;i<100;i++) {\n      // Confirm we can range search by the new indexed (numeric) field:\n      long min = random().nextLong();\n      long max = random().nextLong();\n      if (min > max) {\n        long x = min;\n        min = max;\n        max = x;\n      }\n\n      TopDocs hits = s.search(DimensionalRangeQuery.new1DLongRange(\"number\", min, true, max, true), 100);\n      for(ScoreDoc scoreDoc : hits.scoreDocs) {\n        long value = Long.parseLong(s.doc(scoreDoc.doc).get(\"text\").split(\" \")[1]);\n        assertTrue(value >= min);\n        assertTrue(value <= max);\n        assertEquals(value, numbers.get(scoreDoc.doc));\n      }\n    }\n  }\n\n","sourceOld":"  private static void testNumericRangeQuery(IndexSearcher s) throws IOException {\n    NumericDocValues numbers = MultiDocValues.getNumericValues(s.getIndexReader(), \"number\");\n    for(int i=0;i<100;i++) {\n      // Confirm we can range search by the new indexed (numeric) field:\n      long min = random().nextLong();\n      long max = random().nextLong();\n      if (min > max) {\n        long x = min;\n        min = max;\n        max = x;\n      }\n\n      TopDocs hits = s.search(NumericRangeQuery.newLongRange(\"number\", min, max, true, true), 100);\n      for(ScoreDoc scoreDoc : hits.scoreDocs) {\n        long value = Long.parseLong(s.doc(scoreDoc.doc).get(\"text\").split(\" \")[1]);\n        assertTrue(value >= min);\n        assertTrue(value <= max);\n        assertEquals(value, numbers.get(scoreDoc.doc));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d9aa91d3fdd25528bac3b2e6115d54fc2f28753":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"770342641f7b505eaa8dccdc666158bff2419109":["4d9aa91d3fdd25528bac3b2e6115d54fc2f28753"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"4d9aa91d3fdd25528bac3b2e6115d54fc2f28753":["770342641f7b505eaa8dccdc666158bff2419109"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d9aa91d3fdd25528bac3b2e6115d54fc2f28753"],"770342641f7b505eaa8dccdc666158bff2419109":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}