{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testForceMergeDeletes().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testForceMergeDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testForceMergeDeletes().mjava","sourceNew":"  // LUCENE-325: test forceMergeDeletes, when 2 singular merges\n  // are required\n  public void testForceMergeDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n                                                  IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document document = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    FieldType customType1 = new FieldType(TextField.TYPE_UNSTORED);\n    customType1.setTokenized(false);\n    customType1.setStoreTermVectors(true);\n    customType1.setStoreTermVectorPositions(true);\n    customType1.setStoreTermVectorOffsets(true);\n    \n    Field idField = newField(\"id\", \"\", StringField.TYPE_UNSTORED);\n    document.add(idField);\n    Field storedField = newField(\"stored\", \"stored\", customType);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\", customType1);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++) {\n      idField.setValue(\"\" + i);\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(10, ir.maxDoc());\n    assertEquals(10, ir.numDocs());\n    ir.close();\n\n    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    writer = new IndexWriter(dir, dontMergeConfig);\n    writer.deleteDocuments(new Term(\"id\", \"0\"));\n    writer.deleteDocuments(new Term(\"id\", \"7\"));\n    writer.close();\n    \n    ir = IndexReader.open(dir);\n    assertEquals(8, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    assertEquals(8, writer.numDocs());\n    assertEquals(10, writer.maxDoc());\n    writer.forceMergeDeletes();\n    assertEquals(8, writer.numDocs());\n    writer.close();\n    ir = IndexReader.open(dir);\n    assertEquals(8, ir.maxDoc());\n    assertEquals(8, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test forceMergeDeletes, when 2 singular merges\n  // are required\n  public void testForceMergeDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n                                                  IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document document = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    FieldType customType1 = new FieldType(TextField.TYPE_UNSTORED);\n    customType1.setTokenized(false);\n    customType1.setStoreTermVectors(true);\n    customType1.setStoreTermVectorPositions(true);\n    customType1.setStoreTermVectorOffsets(true);\n    \n    Field idField = newField(\"id\", \"\", StringField.TYPE_UNSTORED);\n    document.add(idField);\n    Field storedField = newField(\"stored\", \"stored\", customType);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\", customType1);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++) {\n      idField.setValue(\"\" + i);\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(10, ir.maxDoc());\n    assertEquals(10, ir.numDocs());\n    ir.close();\n\n    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    writer = new IndexWriter(dir, dontMergeConfig);\n    writer.deleteDocuments(new Term(\"id\", \"0\"));\n    writer.deleteDocuments(new Term(\"id\", \"7\"));\n    writer.close();\n    \n    ir = IndexReader.open(dir);\n    assertEquals(8, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    assertEquals(8, writer.numDocs());\n    assertEquals(10, writer.maxDoc());\n    writer.forceMergeDeletes();\n    assertEquals(8, writer.numDocs());\n    writer.close();\n    ir = IndexReader.open(dir);\n    assertEquals(8, ir.maxDoc());\n    assertEquals(8, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a78a90fc9701e511308346ea29f4f5e548bb39fe","date":1329489995,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testForceMergeDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testForceMergeDeletes().mjava","sourceNew":"  // LUCENE-325: test forceMergeDeletes, when 2 singular merges\n  // are required\n  public void testForceMergeDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n                                                  IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document document = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    FieldType customType1 = new FieldType(TextField.TYPE_UNSTORED);\n    customType1.setTokenized(false);\n    customType1.setStoreTermVectors(true);\n    customType1.setStoreTermVectorPositions(true);\n    customType1.setStoreTermVectorOffsets(true);\n    \n    Field idField = newField(\"id\", \"\", StringField.TYPE_UNSTORED);\n    document.add(idField);\n    Field storedField = newField(\"stored\", \"stored\", customType);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\", customType1);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++) {\n      idField.setStringValue(\"\" + i);\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(10, ir.maxDoc());\n    assertEquals(10, ir.numDocs());\n    ir.close();\n\n    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    writer = new IndexWriter(dir, dontMergeConfig);\n    writer.deleteDocuments(new Term(\"id\", \"0\"));\n    writer.deleteDocuments(new Term(\"id\", \"7\"));\n    writer.close();\n    \n    ir = IndexReader.open(dir);\n    assertEquals(8, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    assertEquals(8, writer.numDocs());\n    assertEquals(10, writer.maxDoc());\n    writer.forceMergeDeletes();\n    assertEquals(8, writer.numDocs());\n    writer.close();\n    ir = IndexReader.open(dir);\n    assertEquals(8, ir.maxDoc());\n    assertEquals(8, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test forceMergeDeletes, when 2 singular merges\n  // are required\n  public void testForceMergeDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n                                                  IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document document = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    FieldType customType1 = new FieldType(TextField.TYPE_UNSTORED);\n    customType1.setTokenized(false);\n    customType1.setStoreTermVectors(true);\n    customType1.setStoreTermVectorPositions(true);\n    customType1.setStoreTermVectorOffsets(true);\n    \n    Field idField = newField(\"id\", \"\", StringField.TYPE_UNSTORED);\n    document.add(idField);\n    Field storedField = newField(\"stored\", \"stored\", customType);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\", customType1);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++) {\n      idField.setValue(\"\" + i);\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(10, ir.maxDoc());\n    assertEquals(10, ir.numDocs());\n    ir.close();\n\n    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    writer = new IndexWriter(dir, dontMergeConfig);\n    writer.deleteDocuments(new Term(\"id\", \"0\"));\n    writer.deleteDocuments(new Term(\"id\", \"7\"));\n    writer.close();\n    \n    ir = IndexReader.open(dir);\n    assertEquals(8, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    assertEquals(8, writer.numDocs());\n    assertEquals(10, writer.maxDoc());\n    writer.forceMergeDeletes();\n    assertEquals(8, writer.numDocs());\n    writer.close();\n    ir = IndexReader.open(dir);\n    assertEquals(8, ir.maxDoc());\n    assertEquals(8, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":["24ba3838b71dd2da24e0108e7074e25ebb99f355"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testForceMergeDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testForceMergeDeletes().mjava","sourceNew":"  // LUCENE-325: test forceMergeDeletes, when 2 singular merges\n  // are required\n  public void testForceMergeDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n                                                  IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document document = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    FieldType customType1 = new FieldType(TextField.TYPE_UNSTORED);\n    customType1.setTokenized(false);\n    customType1.setStoreTermVectors(true);\n    customType1.setStoreTermVectorPositions(true);\n    customType1.setStoreTermVectorOffsets(true);\n    \n    Field idField = newField(\"id\", \"\", StringField.TYPE_UNSTORED);\n    document.add(idField);\n    Field storedField = newField(\"stored\", \"stored\", customType);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\", customType1);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++) {\n      idField.setStringValue(\"\" + i);\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(10, ir.maxDoc());\n    assertEquals(10, ir.numDocs());\n    ir.close();\n\n    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    writer = new IndexWriter(dir, dontMergeConfig);\n    writer.deleteDocuments(new Term(\"id\", \"0\"));\n    writer.deleteDocuments(new Term(\"id\", \"7\"));\n    writer.close();\n    \n    ir = IndexReader.open(dir);\n    assertEquals(8, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    assertEquals(8, writer.numDocs());\n    assertEquals(10, writer.maxDoc());\n    writer.forceMergeDeletes();\n    assertEquals(8, writer.numDocs());\n    writer.close();\n    ir = IndexReader.open(dir);\n    assertEquals(8, ir.maxDoc());\n    assertEquals(8, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test forceMergeDeletes, when 2 singular merges\n  // are required\n  public void testForceMergeDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n                                                  IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document document = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    FieldType customType1 = new FieldType(TextField.TYPE_UNSTORED);\n    customType1.setTokenized(false);\n    customType1.setStoreTermVectors(true);\n    customType1.setStoreTermVectorPositions(true);\n    customType1.setStoreTermVectorOffsets(true);\n    \n    Field idField = newField(\"id\", \"\", StringField.TYPE_UNSTORED);\n    document.add(idField);\n    Field storedField = newField(\"stored\", \"stored\", customType);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\", customType1);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++) {\n      idField.setStringValue(\"\" + i);\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(10, ir.maxDoc());\n    assertEquals(10, ir.numDocs());\n    ir.close();\n\n    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n      .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    writer = new IndexWriter(dir, dontMergeConfig);\n    writer.deleteDocuments(new Term(\"id\", \"0\"));\n    writer.deleteDocuments(new Term(\"id\", \"7\"));\n    writer.close();\n    \n    ir = IndexReader.open(dir);\n    assertEquals(8, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    assertEquals(8, writer.numDocs());\n    assertEquals(10, writer.maxDoc());\n    writer.forceMergeDeletes();\n    assertEquals(8, writer.numDocs());\n    writer.close();\n    ir = IndexReader.open(dir);\n    assertEquals(8, ir.maxDoc());\n    assertEquals(8, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testForceMergeDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testForceMergeDeletes().mjava","sourceNew":"  // LUCENE-325: test forceMergeDeletes, when 2 singular merges\n  // are required\n  public void testForceMergeDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n                                                  IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document document = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    FieldType customType1 = new FieldType(TextField.TYPE_UNSTORED);\n    customType1.setTokenized(false);\n    customType1.setStoreTermVectors(true);\n    customType1.setStoreTermVectorPositions(true);\n    customType1.setStoreTermVectorOffsets(true);\n    \n    Field idField = newField(\"id\", \"\", StringField.TYPE_UNSTORED);\n    document.add(idField);\n    Field storedField = newField(\"stored\", \"stored\", customType);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\", customType1);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++) {\n      idField.setStringValue(\"\" + i);\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.maxDoc());\n    assertEquals(10, ir.numDocs());\n    ir.close();\n\n    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    writer = new IndexWriter(dir, dontMergeConfig);\n    writer.deleteDocuments(new Term(\"id\", \"0\"));\n    writer.deleteDocuments(new Term(\"id\", \"7\"));\n    writer.close();\n    \n    ir = DirectoryReader.open(dir);\n    assertEquals(8, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    assertEquals(8, writer.numDocs());\n    assertEquals(10, writer.maxDoc());\n    writer.forceMergeDeletes();\n    assertEquals(8, writer.numDocs());\n    writer.close();\n    ir = DirectoryReader.open(dir);\n    assertEquals(8, ir.maxDoc());\n    assertEquals(8, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test forceMergeDeletes, when 2 singular merges\n  // are required\n  public void testForceMergeDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n                                                  IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document document = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    FieldType customType1 = new FieldType(TextField.TYPE_UNSTORED);\n    customType1.setTokenized(false);\n    customType1.setStoreTermVectors(true);\n    customType1.setStoreTermVectorPositions(true);\n    customType1.setStoreTermVectorOffsets(true);\n    \n    Field idField = newField(\"id\", \"\", StringField.TYPE_UNSTORED);\n    document.add(idField);\n    Field storedField = newField(\"stored\", \"stored\", customType);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\", customType1);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++) {\n      idField.setStringValue(\"\" + i);\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(10, ir.maxDoc());\n    assertEquals(10, ir.numDocs());\n    ir.close();\n\n    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    writer = new IndexWriter(dir, dontMergeConfig);\n    writer.deleteDocuments(new Term(\"id\", \"0\"));\n    writer.deleteDocuments(new Term(\"id\", \"7\"));\n    writer.close();\n    \n    ir = IndexReader.open(dir);\n    assertEquals(8, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    assertEquals(8, writer.numDocs());\n    assertEquals(10, writer.maxDoc());\n    writer.forceMergeDeletes();\n    assertEquals(8, writer.numDocs());\n    writer.close();\n    ir = IndexReader.open(dir);\n    assertEquals(8, ir.maxDoc());\n    assertEquals(8, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testForceMergeDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testForceMergeDeletes().mjava","sourceNew":"  // LUCENE-325: test forceMergeDeletes, when 2 singular merges\n  // are required\n  public void testForceMergeDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n                                                  IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document document = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    FieldType customType1 = new FieldType(TextField.TYPE_NOT_STORED);\n    customType1.setTokenized(false);\n    customType1.setStoreTermVectors(true);\n    customType1.setStoreTermVectorPositions(true);\n    customType1.setStoreTermVectorOffsets(true);\n    \n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    document.add(idField);\n    Field storedField = newField(\"stored\", \"stored\", customType);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\", customType1);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++) {\n      idField.setStringValue(\"\" + i);\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.maxDoc());\n    assertEquals(10, ir.numDocs());\n    ir.close();\n\n    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    writer = new IndexWriter(dir, dontMergeConfig);\n    writer.deleteDocuments(new Term(\"id\", \"0\"));\n    writer.deleteDocuments(new Term(\"id\", \"7\"));\n    writer.close();\n    \n    ir = DirectoryReader.open(dir);\n    assertEquals(8, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    assertEquals(8, writer.numDocs());\n    assertEquals(10, writer.maxDoc());\n    writer.forceMergeDeletes();\n    assertEquals(8, writer.numDocs());\n    writer.close();\n    ir = DirectoryReader.open(dir);\n    assertEquals(8, ir.maxDoc());\n    assertEquals(8, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test forceMergeDeletes, when 2 singular merges\n  // are required\n  public void testForceMergeDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n                                                  IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document document = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    FieldType customType1 = new FieldType(TextField.TYPE_UNSTORED);\n    customType1.setTokenized(false);\n    customType1.setStoreTermVectors(true);\n    customType1.setStoreTermVectorPositions(true);\n    customType1.setStoreTermVectorOffsets(true);\n    \n    Field idField = newField(\"id\", \"\", StringField.TYPE_UNSTORED);\n    document.add(idField);\n    Field storedField = newField(\"stored\", \"stored\", customType);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\", customType1);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++) {\n      idField.setStringValue(\"\" + i);\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.maxDoc());\n    assertEquals(10, ir.numDocs());\n    ir.close();\n\n    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    writer = new IndexWriter(dir, dontMergeConfig);\n    writer.deleteDocuments(new Term(\"id\", \"0\"));\n    writer.deleteDocuments(new Term(\"id\", \"7\"));\n    writer.close();\n    \n    ir = DirectoryReader.open(dir);\n    assertEquals(8, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    assertEquals(8, writer.numDocs());\n    assertEquals(10, writer.maxDoc());\n    writer.forceMergeDeletes();\n    assertEquals(8, writer.numDocs());\n    writer.close();\n    ir = DirectoryReader.open(dir);\n    assertEquals(8, ir.maxDoc());\n    assertEquals(8, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":["24ba3838b71dd2da24e0108e7074e25ebb99f355"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testForceMergeDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testForceMergeDeletes().mjava","sourceNew":"  // LUCENE-325: test forceMergeDeletes, when 2 singular merges\n  // are required\n  public void testForceMergeDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n                                                  IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document document = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    FieldType customType1 = new FieldType(TextField.TYPE_NOT_STORED);\n    customType1.setTokenized(false);\n    customType1.setStoreTermVectors(true);\n    customType1.setStoreTermVectorPositions(true);\n    customType1.setStoreTermVectorOffsets(true);\n    \n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    document.add(idField);\n    Field storedField = newField(\"stored\", \"stored\", customType);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\", customType1);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++) {\n      idField.setStringValue(\"\" + i);\n      writer.addDocument(document);\n    }\n    writer.shutdown();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.maxDoc());\n    assertEquals(10, ir.numDocs());\n    ir.close();\n\n    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    writer = new IndexWriter(dir, dontMergeConfig);\n    writer.deleteDocuments(new Term(\"id\", \"0\"));\n    writer.deleteDocuments(new Term(\"id\", \"7\"));\n    writer.shutdown();\n    \n    ir = DirectoryReader.open(dir);\n    assertEquals(8, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    assertEquals(8, writer.numDocs());\n    assertEquals(10, writer.maxDoc());\n    writer.forceMergeDeletes();\n    assertEquals(8, writer.numDocs());\n    writer.shutdown();\n    ir = DirectoryReader.open(dir);\n    assertEquals(8, ir.maxDoc());\n    assertEquals(8, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test forceMergeDeletes, when 2 singular merges\n  // are required\n  public void testForceMergeDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n                                                  IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document document = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    FieldType customType1 = new FieldType(TextField.TYPE_NOT_STORED);\n    customType1.setTokenized(false);\n    customType1.setStoreTermVectors(true);\n    customType1.setStoreTermVectorPositions(true);\n    customType1.setStoreTermVectorOffsets(true);\n    \n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    document.add(idField);\n    Field storedField = newField(\"stored\", \"stored\", customType);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\", customType1);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++) {\n      idField.setStringValue(\"\" + i);\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.maxDoc());\n    assertEquals(10, ir.numDocs());\n    ir.close();\n\n    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    writer = new IndexWriter(dir, dontMergeConfig);\n    writer.deleteDocuments(new Term(\"id\", \"0\"));\n    writer.deleteDocuments(new Term(\"id\", \"7\"));\n    writer.close();\n    \n    ir = DirectoryReader.open(dir);\n    assertEquals(8, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    assertEquals(8, writer.numDocs());\n    assertEquals(10, writer.maxDoc());\n    writer.forceMergeDeletes();\n    assertEquals(8, writer.numDocs());\n    writer.close();\n    ir = DirectoryReader.open(dir);\n    assertEquals(8, ir.maxDoc());\n    assertEquals(8, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bf9e42a1bc604fd17e6f690e711dbb81baff427","date":1397075731,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testForceMergeDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testForceMergeDeletes().mjava","sourceNew":"  // LUCENE-325: test forceMergeDeletes, when 2 singular merges\n  // are required\n  public void testForceMergeDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n                                                  IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document document = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    FieldType customType1 = new FieldType(TextField.TYPE_STORED);\n    customType1.setTokenized(false);\n    customType1.setStoreTermVectors(true);\n    customType1.setStoreTermVectorPositions(true);\n    customType1.setStoreTermVectorOffsets(true);\n    \n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    document.add(idField);\n    Field storedField = newField(\"stored\", \"stored\", customType);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\", customType1);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++) {\n      idField.setStringValue(\"\" + i);\n      writer.addDocument(document);\n    }\n    writer.shutdown();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.maxDoc());\n    assertEquals(10, ir.numDocs());\n    ir.close();\n\n    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    writer = new IndexWriter(dir, dontMergeConfig);\n    writer.deleteDocuments(new Term(\"id\", \"0\"));\n    writer.deleteDocuments(new Term(\"id\", \"7\"));\n    writer.shutdown();\n    \n    ir = DirectoryReader.open(dir);\n    assertEquals(8, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    assertEquals(8, writer.numDocs());\n    assertEquals(10, writer.maxDoc());\n    writer.forceMergeDeletes();\n    assertEquals(8, writer.numDocs());\n    writer.shutdown();\n    ir = DirectoryReader.open(dir);\n    assertEquals(8, ir.maxDoc());\n    assertEquals(8, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test forceMergeDeletes, when 2 singular merges\n  // are required\n  public void testForceMergeDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n                                                  IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document document = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    FieldType customType1 = new FieldType(TextField.TYPE_NOT_STORED);\n    customType1.setTokenized(false);\n    customType1.setStoreTermVectors(true);\n    customType1.setStoreTermVectorPositions(true);\n    customType1.setStoreTermVectorOffsets(true);\n    \n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    document.add(idField);\n    Field storedField = newField(\"stored\", \"stored\", customType);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\", customType1);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++) {\n      idField.setStringValue(\"\" + i);\n      writer.addDocument(document);\n    }\n    writer.shutdown();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.maxDoc());\n    assertEquals(10, ir.numDocs());\n    ir.close();\n\n    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    writer = new IndexWriter(dir, dontMergeConfig);\n    writer.deleteDocuments(new Term(\"id\", \"0\"));\n    writer.deleteDocuments(new Term(\"id\", \"7\"));\n    writer.shutdown();\n    \n    ir = DirectoryReader.open(dir);\n    assertEquals(8, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    assertEquals(8, writer.numDocs());\n    assertEquals(10, writer.maxDoc());\n    writer.forceMergeDeletes();\n    assertEquals(8, writer.numDocs());\n    writer.shutdown();\n    ir = DirectoryReader.open(dir);\n    assertEquals(8, ir.maxDoc());\n    assertEquals(8, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2fb55c0777755badd3b46d8140f3d4301febed","date":1398881584,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testForceMergeDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testForceMergeDeletes().mjava","sourceNew":"  // LUCENE-325: test forceMergeDeletes, when 2 singular merges\n  // are required\n  public void testForceMergeDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n                                                  IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document document = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    FieldType customType1 = new FieldType(TextField.TYPE_STORED);\n    customType1.setTokenized(false);\n    customType1.setStoreTermVectors(true);\n    customType1.setStoreTermVectorPositions(true);\n    customType1.setStoreTermVectorOffsets(true);\n    \n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    document.add(idField);\n    Field storedField = newField(\"stored\", \"stored\", customType);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\", customType1);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++) {\n      idField.setStringValue(\"\" + i);\n      writer.addDocument(document);\n    }\n    writer.shutdown();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.maxDoc());\n    assertEquals(10, ir.numDocs());\n    ir.close();\n\n    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setMergePolicy(NoMergePolicy.INSTANCE);\n    writer = new IndexWriter(dir, dontMergeConfig);\n    writer.deleteDocuments(new Term(\"id\", \"0\"));\n    writer.deleteDocuments(new Term(\"id\", \"7\"));\n    writer.shutdown();\n    \n    ir = DirectoryReader.open(dir);\n    assertEquals(8, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    assertEquals(8, writer.numDocs());\n    assertEquals(10, writer.maxDoc());\n    writer.forceMergeDeletes();\n    assertEquals(8, writer.numDocs());\n    writer.shutdown();\n    ir = DirectoryReader.open(dir);\n    assertEquals(8, ir.maxDoc());\n    assertEquals(8, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test forceMergeDeletes, when 2 singular merges\n  // are required\n  public void testForceMergeDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n                                                  IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document document = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    FieldType customType1 = new FieldType(TextField.TYPE_STORED);\n    customType1.setTokenized(false);\n    customType1.setStoreTermVectors(true);\n    customType1.setStoreTermVectorPositions(true);\n    customType1.setStoreTermVectorOffsets(true);\n    \n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    document.add(idField);\n    Field storedField = newField(\"stored\", \"stored\", customType);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\", customType1);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++) {\n      idField.setStringValue(\"\" + i);\n      writer.addDocument(document);\n    }\n    writer.shutdown();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.maxDoc());\n    assertEquals(10, ir.numDocs());\n    ir.close();\n\n    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    writer = new IndexWriter(dir, dontMergeConfig);\n    writer.deleteDocuments(new Term(\"id\", \"0\"));\n    writer.deleteDocuments(new Term(\"id\", \"7\"));\n    writer.shutdown();\n    \n    ir = DirectoryReader.open(dir);\n    assertEquals(8, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    assertEquals(8, writer.numDocs());\n    assertEquals(10, writer.maxDoc());\n    writer.forceMergeDeletes();\n    assertEquals(8, writer.numDocs());\n    writer.shutdown();\n    ir = DirectoryReader.open(dir);\n    assertEquals(8, ir.maxDoc());\n    assertEquals(8, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testForceMergeDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testForceMergeDeletes().mjava","sourceNew":"  // LUCENE-325: test forceMergeDeletes, when 2 singular merges\n  // are required\n  public void testForceMergeDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(2)\n                                                .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document document = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    FieldType customType1 = new FieldType(TextField.TYPE_STORED);\n    customType1.setTokenized(false);\n    customType1.setStoreTermVectors(true);\n    customType1.setStoreTermVectorPositions(true);\n    customType1.setStoreTermVectorOffsets(true);\n    \n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    document.add(idField);\n    Field storedField = newField(\"stored\", \"stored\", customType);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\", customType1);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++) {\n      idField.setStringValue(\"\" + i);\n      writer.addDocument(document);\n    }\n    writer.shutdown();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.maxDoc());\n    assertEquals(10, ir.numDocs());\n    ir.close();\n\n    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setMergePolicy(NoMergePolicy.INSTANCE);\n    writer = new IndexWriter(dir, dontMergeConfig);\n    writer.deleteDocuments(new Term(\"id\", \"0\"));\n    writer.deleteDocuments(new Term(\"id\", \"7\"));\n    writer.shutdown();\n    \n    ir = DirectoryReader.open(dir);\n    assertEquals(8, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setMergePolicy(newLogMergePolicy()));\n    assertEquals(8, writer.numDocs());\n    assertEquals(10, writer.maxDoc());\n    writer.forceMergeDeletes();\n    assertEquals(8, writer.numDocs());\n    writer.shutdown();\n    ir = DirectoryReader.open(dir);\n    assertEquals(8, ir.maxDoc());\n    assertEquals(8, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test forceMergeDeletes, when 2 singular merges\n  // are required\n  public void testForceMergeDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(2).setRAMBufferSizeMB(\n                                                  IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document document = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    FieldType customType1 = new FieldType(TextField.TYPE_STORED);\n    customType1.setTokenized(false);\n    customType1.setStoreTermVectors(true);\n    customType1.setStoreTermVectorPositions(true);\n    customType1.setStoreTermVectorOffsets(true);\n    \n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    document.add(idField);\n    Field storedField = newField(\"stored\", \"stored\", customType);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\", customType1);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++) {\n      idField.setStringValue(\"\" + i);\n      writer.addDocument(document);\n    }\n    writer.shutdown();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.maxDoc());\n    assertEquals(10, ir.numDocs());\n    ir.close();\n\n    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setMergePolicy(NoMergePolicy.INSTANCE);\n    writer = new IndexWriter(dir, dontMergeConfig);\n    writer.deleteDocuments(new Term(\"id\", \"0\"));\n    writer.deleteDocuments(new Term(\"id\", \"7\"));\n    writer.shutdown();\n    \n    ir = DirectoryReader.open(dir);\n    assertEquals(8, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    assertEquals(8, writer.numDocs());\n    assertEquals(10, writer.maxDoc());\n    writer.forceMergeDeletes();\n    assertEquals(8, writer.numDocs());\n    writer.shutdown();\n    ir = DirectoryReader.open(dir);\n    assertEquals(8, ir.maxDoc());\n    assertEquals(8, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testForceMergeDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testForceMergeDeletes().mjava","sourceNew":"  // LUCENE-325: test forceMergeDeletes, when 2 singular merges\n  // are required\n  public void testForceMergeDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(2)\n                                                .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document document = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    FieldType customType1 = new FieldType(TextField.TYPE_STORED);\n    customType1.setTokenized(false);\n    customType1.setStoreTermVectors(true);\n    customType1.setStoreTermVectorPositions(true);\n    customType1.setStoreTermVectorOffsets(true);\n    \n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    document.add(idField);\n    Field storedField = newField(\"stored\", \"stored\", customType);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\", customType1);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++) {\n      idField.setStringValue(\"\" + i);\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.maxDoc());\n    assertEquals(10, ir.numDocs());\n    ir.close();\n\n    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(new MockAnalyzer(random()))\n      .setMergePolicy(NoMergePolicy.INSTANCE);\n    writer = new IndexWriter(dir, dontMergeConfig);\n    writer.deleteDocuments(new Term(\"id\", \"0\"));\n    writer.deleteDocuments(new Term(\"id\", \"7\"));\n    writer.close();\n    \n    ir = DirectoryReader.open(dir);\n    assertEquals(8, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setMergePolicy(newLogMergePolicy()));\n    assertEquals(8, writer.numDocs());\n    assertEquals(10, writer.maxDoc());\n    writer.forceMergeDeletes();\n    assertEquals(8, writer.numDocs());\n    writer.close();\n    ir = DirectoryReader.open(dir);\n    assertEquals(8, ir.maxDoc());\n    assertEquals(8, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test forceMergeDeletes, when 2 singular merges\n  // are required\n  public void testForceMergeDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(2)\n                                                .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document document = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    FieldType customType1 = new FieldType(TextField.TYPE_STORED);\n    customType1.setTokenized(false);\n    customType1.setStoreTermVectors(true);\n    customType1.setStoreTermVectorPositions(true);\n    customType1.setStoreTermVectorOffsets(true);\n    \n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    document.add(idField);\n    Field storedField = newField(\"stored\", \"stored\", customType);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\", customType1);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++) {\n      idField.setStringValue(\"\" + i);\n      writer.addDocument(document);\n    }\n    writer.shutdown();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.maxDoc());\n    assertEquals(10, ir.numDocs());\n    ir.close();\n\n    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n      .setMergePolicy(NoMergePolicy.INSTANCE);\n    writer = new IndexWriter(dir, dontMergeConfig);\n    writer.deleteDocuments(new Term(\"id\", \"0\"));\n    writer.deleteDocuments(new Term(\"id\", \"7\"));\n    writer.shutdown();\n    \n    ir = DirectoryReader.open(dir);\n    assertEquals(8, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setMergePolicy(newLogMergePolicy()));\n    assertEquals(8, writer.numDocs());\n    assertEquals(10, writer.maxDoc());\n    writer.forceMergeDeletes();\n    assertEquals(8, writer.numDocs());\n    writer.shutdown();\n    ir = DirectoryReader.open(dir);\n    assertEquals(8, ir.maxDoc());\n    assertEquals(8, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"feb4029567b43f074ed7b6eb8fb126d355075dfd","date":1544812585,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testForceMergeDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testForceMergeDeletes().mjava","sourceNew":"  // LUCENE-325: test forceMergeDeletes, when 2 singular merges\n  // are required\n  public void testForceMergeDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(2)\n                                                .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document document = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    FieldType customType1 = new FieldType(TextField.TYPE_STORED);\n    customType1.setTokenized(false);\n    customType1.setStoreTermVectors(true);\n    customType1.setStoreTermVectorPositions(true);\n    customType1.setStoreTermVectorOffsets(true);\n    \n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    document.add(idField);\n    Field storedField = newField(\"stored\", \"stored\", customType);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\", customType1);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++) {\n      idField.setStringValue(\"\" + i);\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.maxDoc());\n    assertEquals(10, ir.numDocs());\n    ir.close();\n\n    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(new MockAnalyzer(random()))\n      .setMergePolicy(NoMergePolicy.INSTANCE);\n    writer = new IndexWriter(dir, dontMergeConfig);\n    writer.deleteDocuments(new Term(\"id\", \"0\"));\n    writer.deleteDocuments(new Term(\"id\", \"7\"));\n    writer.close();\n    \n    ir = DirectoryReader.open(dir);\n    assertEquals(8, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setMergePolicy(newLogMergePolicy()));\n    assertEquals(8, writer.getDocStats().numDocs);\n    assertEquals(10, writer.getDocStats().maxDoc);\n    writer.forceMergeDeletes();\n    assertEquals(8, writer.getDocStats().numDocs);\n    writer.close();\n    ir = DirectoryReader.open(dir);\n    assertEquals(8, ir.maxDoc());\n    assertEquals(8, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-325: test forceMergeDeletes, when 2 singular merges\n  // are required\n  public void testForceMergeDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(2)\n                                                .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    Document document = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n\n    FieldType customType1 = new FieldType(TextField.TYPE_STORED);\n    customType1.setTokenized(false);\n    customType1.setStoreTermVectors(true);\n    customType1.setStoreTermVectorPositions(true);\n    customType1.setStoreTermVectorOffsets(true);\n    \n    Field idField = newStringField(\"id\", \"\", Field.Store.NO);\n    document.add(idField);\n    Field storedField = newField(\"stored\", \"stored\", customType);\n    document.add(storedField);\n    Field termVectorField = newField(\"termVector\", \"termVector\", customType1);\n    document.add(termVectorField);\n    for(int i=0;i<10;i++) {\n      idField.setStringValue(\"\" + i);\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.maxDoc());\n    assertEquals(10, ir.numDocs());\n    ir.close();\n\n    IndexWriterConfig dontMergeConfig = new IndexWriterConfig(new MockAnalyzer(random()))\n      .setMergePolicy(NoMergePolicy.INSTANCE);\n    writer = new IndexWriter(dir, dontMergeConfig);\n    writer.deleteDocuments(new Term(\"id\", \"0\"));\n    writer.deleteDocuments(new Term(\"id\", \"7\"));\n    writer.close();\n    \n    ir = DirectoryReader.open(dir);\n    assertEquals(8, ir.numDocs());\n    ir.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setMergePolicy(newLogMergePolicy()));\n    assertEquals(8, writer.numDocs());\n    assertEquals(10, writer.maxDoc());\n    writer.forceMergeDeletes();\n    assertEquals(8, writer.numDocs());\n    writer.close();\n    ir = DirectoryReader.open(dir);\n    assertEquals(8, ir.maxDoc());\n    assertEquals(8, ir.numDocs());\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2fb55c0777755badd3b46d8140f3d4301febed":["2bf9e42a1bc604fd17e6f690e711dbb81baff427"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["7e2fb55c0777755badd3b46d8140f3d4301febed"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["feb4029567b43f074ed7b6eb8fb126d355075dfd"],"2bf9e42a1bc604fd17e6f690e711dbb81baff427":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"]},"commit2Childs":{"7e2fb55c0777755badd3b46d8140f3d4301febed":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["feb4029567b43f074ed7b6eb8fb126d355075dfd"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["2bf9e42a1bc604fd17e6f690e711dbb81baff427"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"2bf9e42a1bc604fd17e6f690e711dbb81baff427":["7e2fb55c0777755badd3b46d8140f3d4301febed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}