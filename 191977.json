{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil#configureClient(DefaultHttpClient,SolrParams).mjava","commits":[{"id":"eb99886ff640d94edb43e0d36112a2b7023379ba","date":1338292884,"type":0,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil#configureClient(DefaultHttpClient,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Configures {@link DefaultHttpClient}, only sets parameters if they are\n   * present in config.\n   */\n  public static void configureClient(final DefaultHttpClient httpClient,\n      SolrParams config) {\n\n    if (config.get(PROP_MAX_CONNECTIONS) != null) {\n      setMaxConnections(httpClient, config.getInt(PROP_MAX_CONNECTIONS));\n    }\n\n    if (config.get(PROP_MAX_CONNECTIONS_PER_HOST) != null) {\n      setMaxConnectionsPerHost(httpClient, config.getInt(PROP_MAX_CONNECTIONS_PER_HOST));\n    }\n\n    if (config.get(PROP_CONNECTION_TIMEOUT) != null) {\n      setConnectionTimeout(httpClient, config.getInt(PROP_CONNECTION_TIMEOUT));\n    }\n    \n    if (config.get(PROP_SO_TIMEOUT) != null) {\n      setSoTimeout(httpClient, config.getInt(PROP_SO_TIMEOUT));\n    }\n    \n    if (config.get(PROP_USE_RETRY) != null) {\n      setUseRetry(httpClient, config.getBool(PROP_USE_RETRY));\n    }\n\n    if (config.get(PROP_FOLLOW_REDIRECTS) != null) {\n      setFollowRedirects(httpClient, config.getBool(PROP_FOLLOW_REDIRECTS));\n    }\n\n    final String basicAuthUser = config.get(PROP_BASIC_AUTH_USER);\n    final String basicAuthPass = config.get(PROP_BASIC_AUTH_PASS);\n    setBasicAuth(httpClient, basicAuthUser, basicAuthPass);\n    \n    if (config.get(PROP_ALLOW_COMPRESSION) != null) {\n      setAllowCompression(httpClient, config.getBool(PROP_ALLOW_COMPRESSION));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45346a9890012ac3b6612b55642d1aa56be51d45","date":1345458772,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil#configureClient(DefaultHttpClient,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil#configureClient(DefaultHttpClient,SolrParams).mjava","sourceNew":"  /**\n   * Configures {@link DefaultHttpClient}, only sets parameters if they are\n   * present in config.\n   */\n  public static void configureClient(final DefaultHttpClient httpClient,\n      SolrParams config) {\n    configurer.configure(httpClient,  config);\n  }\n\n","sourceOld":"  /**\n   * Configures {@link DefaultHttpClient}, only sets parameters if they are\n   * present in config.\n   */\n  public static void configureClient(final DefaultHttpClient httpClient,\n      SolrParams config) {\n\n    if (config.get(PROP_MAX_CONNECTIONS) != null) {\n      setMaxConnections(httpClient, config.getInt(PROP_MAX_CONNECTIONS));\n    }\n\n    if (config.get(PROP_MAX_CONNECTIONS_PER_HOST) != null) {\n      setMaxConnectionsPerHost(httpClient, config.getInt(PROP_MAX_CONNECTIONS_PER_HOST));\n    }\n\n    if (config.get(PROP_CONNECTION_TIMEOUT) != null) {\n      setConnectionTimeout(httpClient, config.getInt(PROP_CONNECTION_TIMEOUT));\n    }\n    \n    if (config.get(PROP_SO_TIMEOUT) != null) {\n      setSoTimeout(httpClient, config.getInt(PROP_SO_TIMEOUT));\n    }\n    \n    if (config.get(PROP_USE_RETRY) != null) {\n      setUseRetry(httpClient, config.getBool(PROP_USE_RETRY));\n    }\n\n    if (config.get(PROP_FOLLOW_REDIRECTS) != null) {\n      setFollowRedirects(httpClient, config.getBool(PROP_FOLLOW_REDIRECTS));\n    }\n\n    final String basicAuthUser = config.get(PROP_BASIC_AUTH_USER);\n    final String basicAuthPass = config.get(PROP_BASIC_AUTH_PASS);\n    setBasicAuth(httpClient, basicAuthUser, basicAuthPass);\n    \n    if (config.get(PROP_ALLOW_COMPRESSION) != null) {\n      setAllowCompression(httpClient, config.getBool(PROP_ALLOW_COMPRESSION));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67588aedbc6edbcce873bd0c3c7b4199fbf0987c","date":1345506207,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil#configureClient(DefaultHttpClient,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil#configureClient(DefaultHttpClient,SolrParams).mjava","sourceNew":"  /**\n   * Configures {@link DefaultHttpClient}, only sets parameters if they are\n   * present in config.\n   */\n  public static void configureClient(final DefaultHttpClient httpClient,\n      SolrParams config) {\n    configurer.configure(httpClient,  config);\n  }\n\n","sourceOld":"  /**\n   * Configures {@link DefaultHttpClient}, only sets parameters if they are\n   * present in config.\n   */\n  public static void configureClient(final DefaultHttpClient httpClient,\n      SolrParams config) {\n\n    if (config.get(PROP_MAX_CONNECTIONS) != null) {\n      setMaxConnections(httpClient, config.getInt(PROP_MAX_CONNECTIONS));\n    }\n\n    if (config.get(PROP_MAX_CONNECTIONS_PER_HOST) != null) {\n      setMaxConnectionsPerHost(httpClient, config.getInt(PROP_MAX_CONNECTIONS_PER_HOST));\n    }\n\n    if (config.get(PROP_CONNECTION_TIMEOUT) != null) {\n      setConnectionTimeout(httpClient, config.getInt(PROP_CONNECTION_TIMEOUT));\n    }\n    \n    if (config.get(PROP_SO_TIMEOUT) != null) {\n      setSoTimeout(httpClient, config.getInt(PROP_SO_TIMEOUT));\n    }\n    \n    if (config.get(PROP_USE_RETRY) != null) {\n      setUseRetry(httpClient, config.getBool(PROP_USE_RETRY));\n    }\n\n    if (config.get(PROP_FOLLOW_REDIRECTS) != null) {\n      setFollowRedirects(httpClient, config.getBool(PROP_FOLLOW_REDIRECTS));\n    }\n\n    final String basicAuthUser = config.get(PROP_BASIC_AUTH_USER);\n    final String basicAuthPass = config.get(PROP_BASIC_AUTH_PASS);\n    setBasicAuth(httpClient, basicAuthUser, basicAuthPass);\n    \n    if (config.get(PROP_ALLOW_COMPRESSION) != null) {\n      setAllowCompression(httpClient, config.getBool(PROP_ALLOW_COMPRESSION));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil#configureClient(DefaultHttpClient,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil#configureClient(DefaultHttpClient,SolrParams).mjava","sourceNew":"  /**\n   * Configures {@link DefaultHttpClient}, only sets parameters if they are\n   * present in config.\n   */\n  public static void configureClient(final DefaultHttpClient httpClient,\n      SolrParams config) {\n    configurer.configure(httpClient,  config);\n  }\n\n","sourceOld":"  /**\n   * Configures {@link DefaultHttpClient}, only sets parameters if they are\n   * present in config.\n   */\n  public static void configureClient(final DefaultHttpClient httpClient,\n      SolrParams config) {\n\n    if (config.get(PROP_MAX_CONNECTIONS) != null) {\n      setMaxConnections(httpClient, config.getInt(PROP_MAX_CONNECTIONS));\n    }\n\n    if (config.get(PROP_MAX_CONNECTIONS_PER_HOST) != null) {\n      setMaxConnectionsPerHost(httpClient, config.getInt(PROP_MAX_CONNECTIONS_PER_HOST));\n    }\n\n    if (config.get(PROP_CONNECTION_TIMEOUT) != null) {\n      setConnectionTimeout(httpClient, config.getInt(PROP_CONNECTION_TIMEOUT));\n    }\n    \n    if (config.get(PROP_SO_TIMEOUT) != null) {\n      setSoTimeout(httpClient, config.getInt(PROP_SO_TIMEOUT));\n    }\n    \n    if (config.get(PROP_USE_RETRY) != null) {\n      setUseRetry(httpClient, config.getBool(PROP_USE_RETRY));\n    }\n\n    if (config.get(PROP_FOLLOW_REDIRECTS) != null) {\n      setFollowRedirects(httpClient, config.getBool(PROP_FOLLOW_REDIRECTS));\n    }\n\n    final String basicAuthUser = config.get(PROP_BASIC_AUTH_USER);\n    final String basicAuthPass = config.get(PROP_BASIC_AUTH_PASS);\n    setBasicAuth(httpClient, basicAuthUser, basicAuthPass);\n    \n    if (config.get(PROP_ALLOW_COMPRESSION) != null) {\n      setAllowCompression(httpClient, config.getBool(PROP_ALLOW_COMPRESSION));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6d62214e818b74b9fa407c0c51956e44878a46a","date":1438266500,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil#configureClient(DefaultHttpClient,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil#configureClient(DefaultHttpClient,SolrParams).mjava","sourceNew":"  /**\n   * Configures {@link DefaultHttpClient}, only sets parameters if they are\n   * present in config.\n   */\n  public static void configureClient(final DefaultHttpClient httpClient,\n      SolrParams config) {\n    configurer.configure(httpClient,  config);\n    synchronized(interceptors) {\n      for(HttpRequestInterceptor interceptor: interceptors) {\n        httpClient.addRequestInterceptor(interceptor);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Configures {@link DefaultHttpClient}, only sets parameters if they are\n   * present in config.\n   */\n  public static void configureClient(final DefaultHttpClient httpClient,\n      SolrParams config) {\n    configurer.configure(httpClient,  config);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":4,"author":"markrmiller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil#configureClient(DefaultHttpClient,SolrParams).mjava","sourceNew":null,"sourceOld":"  /**\n   * Configures {@link DefaultHttpClient}, only sets parameters if they are\n   * present in config.\n   */\n  public static void configureClient(final DefaultHttpClient httpClient,\n      SolrParams config) {\n    configurer.configure(httpClient,  config);\n    synchronized(interceptors) {\n      for(HttpRequestInterceptor interceptor: interceptors) {\n        httpClient.addRequestInterceptor(interceptor);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["eb99886ff640d94edb43e0d36112a2b7023379ba","45346a9890012ac3b6612b55642d1aa56be51d45"],"859081acf00749f5dd462772c571d611d4a4d2db":["d6d62214e818b74b9fa407c0c51956e44878a46a"],"d6d62214e818b74b9fa407c0c51956e44878a46a":["45346a9890012ac3b6612b55642d1aa56be51d45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45346a9890012ac3b6612b55642d1aa56be51d45":["eb99886ff640d94edb43e0d36112a2b7023379ba"],"67588aedbc6edbcce873bd0c3c7b4199fbf0987c":["eb99886ff640d94edb43e0d36112a2b7023379ba","45346a9890012ac3b6612b55642d1aa56be51d45"],"eb99886ff640d94edb43e0d36112a2b7023379ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["859081acf00749f5dd462772c571d611d4a4d2db"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"859081acf00749f5dd462772c571d611d4a4d2db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6d62214e818b74b9fa407c0c51956e44878a46a":["859081acf00749f5dd462772c571d611d4a4d2db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eb99886ff640d94edb43e0d36112a2b7023379ba"],"45346a9890012ac3b6612b55642d1aa56be51d45":["001b25b42373b22a52f399dbf072f1224632e8e6","d6d62214e818b74b9fa407c0c51956e44878a46a","67588aedbc6edbcce873bd0c3c7b4199fbf0987c"],"67588aedbc6edbcce873bd0c3c7b4199fbf0987c":[],"eb99886ff640d94edb43e0d36112a2b7023379ba":["001b25b42373b22a52f399dbf072f1224632e8e6","45346a9890012ac3b6612b55642d1aa56be51d45","67588aedbc6edbcce873bd0c3c7b4199fbf0987c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","67588aedbc6edbcce873bd0c3c7b4199fbf0987c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}