{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer.BooleanScorerCollector#collect(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer.BooleanScorerCollector#collect(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer.BooleanScorerCollector#collect(int).mjava","sourceNew":"    @Override\n    public void collect(final int doc) throws IOException {\n      final BucketTable table = bucketTable;\n      final int i = doc & BucketTable.MASK;\n      final Bucket bucket = table.buckets[i];\n      \n      if (bucket.doc != doc) {                    // invalid bucket\n        bucket.doc = doc;                         // set doc\n        bucket.score = scorer.score();            // initialize score\n        bucket.bits = mask;                       // initialize mask\n        bucket.coord = 1;                         // initialize coord\n\n        bucket.next = table.first;                // push onto valid list\n        table.first = bucket;\n      } else {                                    // valid bucket\n        bucket.score += scorer.score();           // increment score\n        bucket.bits |= mask;                      // add bits in mask\n        bucket.coord++;                           // increment coord\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(final int doc) throws IOException {\n      final BucketTable table = bucketTable;\n      final int i = doc & BucketTable.MASK;\n      final Bucket bucket = table.buckets[i];\n      \n      if (bucket.doc != doc) {                    // invalid bucket\n        bucket.doc = doc;                         // set doc\n        bucket.score = scorer.score();            // initialize score\n        bucket.bits = mask;                       // initialize mask\n        bucket.coord = 1;                         // initialize coord\n\n        bucket.next = table.first;                // push onto valid list\n        table.first = bucket;\n      } else {                                    // valid bucket\n        bucket.score += scorer.score();           // increment score\n        bucket.bits |= mask;                      // add bits in mask\n        bucket.coord++;                           // increment coord\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cf15d89c400585df630cb62449fb4d6cb58434f","date":1397643074,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer.BooleanScorerCollector#collect(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer.BooleanScorerCollector#collect(int).mjava","sourceNew":"    @Override\n    public void collect(final int doc) throws IOException {\n      final BucketTable table = bucketTable;\n      final int i = doc & BucketTable.MASK;\n      final Bucket bucket = table.buckets[i];\n      \n      final int coord = (mask & REQUIRED_MASK) == REQUIRED_MASK ? requiredNrMatchers : 1;\n      if (bucket.doc != doc) {                    // invalid bucket\n        bucket.doc = doc;                         // set doc\n        bucket.score = scorer.score();            // initialize score\n        bucket.bits = mask;                       // initialize mask\n        bucket.coord = /*1*/coord;                         // initialize coord\n\n        bucket.next = table.first;                // push onto valid list\n        table.first = bucket;\n      } else {                                    // valid bucket\n        bucket.score += scorer.score();           // increment score\n        bucket.bits |= mask;                      // add bits in mask\n        bucket.coord/*++*/+= coord;                           // increment coord\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(final int doc) throws IOException {\n      final BucketTable table = bucketTable;\n      final int i = doc & BucketTable.MASK;\n      final Bucket bucket = table.buckets[i];\n      \n      if (bucket.doc != doc) {                    // invalid bucket\n        bucket.doc = doc;                         // set doc\n        bucket.score = scorer.score();            // initialize score\n        bucket.bits = mask;                       // initialize mask\n        bucket.coord = 1;                         // initialize coord\n\n        bucket.next = table.first;                // push onto valid list\n        table.first = bucket;\n      } else {                                    // valid bucket\n        bucket.score += scorer.score();           // increment score\n        bucket.bits |= mask;                      // add bits in mask\n        bucket.coord++;                           // increment coord\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"158bf4b301557fdddcd1f665fa0700b7f19678d0","date":1397643258,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer.BooleanScorerCollector#collect(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer.BooleanScorerCollector#collect(int).mjava","sourceNew":"    @Override\n    public void collect(final int doc) throws IOException {\n      final BucketTable table = bucketTable;\n      final int i = doc & BucketTable.MASK;\n      final Bucket bucket = table.buckets[i];\n      \n      if (bucket.doc != doc) {                    // invalid bucket\n        bucket.doc = doc;                         // set doc\n        bucket.score = scorer.score();            // initialize score\n        bucket.bits = mask;                       // initialize mask\n        bucket.coord = 1;                         // initialize coord\n\n        bucket.next = table.first;                // push onto valid list\n        table.first = bucket;\n      } else {                                    // valid bucket\n        bucket.score += scorer.score();           // increment score\n        bucket.bits |= mask;                      // add bits in mask\n        bucket.coord++;                           // increment coord\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(final int doc) throws IOException {\n      final BucketTable table = bucketTable;\n      final int i = doc & BucketTable.MASK;\n      final Bucket bucket = table.buckets[i];\n      \n      final int coord = (mask & REQUIRED_MASK) == REQUIRED_MASK ? requiredNrMatchers : 1;\n      if (bucket.doc != doc) {                    // invalid bucket\n        bucket.doc = doc;                         // set doc\n        bucket.score = scorer.score();            // initialize score\n        bucket.bits = mask;                       // initialize mask\n        bucket.coord = /*1*/coord;                         // initialize coord\n\n        bucket.next = table.first;                // push onto valid list\n        table.first = bucket;\n      } else {                                    // valid bucket\n        bucket.score += scorer.score();           // increment score\n        bucket.bits |= mask;                      // add bits in mask\n        bucket.coord/*++*/+= coord;                           // increment coord\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer.BooleanScorerCollector#collect(int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void collect(final int doc) throws IOException {\n      final BucketTable table = bucketTable;\n      final int i = doc & BucketTable.MASK;\n      final Bucket bucket = table.buckets[i];\n      \n      if (bucket.doc != doc) {                    // invalid bucket\n        bucket.doc = doc;                         // set doc\n        bucket.score = scorer.score();            // initialize score\n        bucket.bits = mask;                       // initialize mask\n        bucket.coord = 1;                         // initialize coord\n\n        bucket.next = table.first;                // push onto valid list\n        table.first = bucket;\n      } else {                                    // valid bucket\n        bucket.score += scorer.score();           // increment score\n        bucket.bits |= mask;                      // add bits in mask\n        bucket.coord++;                           // increment coord\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0cf15d89c400585df630cb62449fb4d6cb58434f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"158bf4b301557fdddcd1f665fa0700b7f19678d0":["0cf15d89c400585df630cb62449fb4d6cb58434f"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["158bf4b301557fdddcd1f665fa0700b7f19678d0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"]},"commit2Childs":{"0cf15d89c400585df630cb62449fb4d6cb58434f":["158bf4b301557fdddcd1f665fa0700b7f19678d0"],"158bf4b301557fdddcd1f665fa0700b7f19678d0":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0cf15d89c400585df630cb62449fb4d6cb58434f"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}