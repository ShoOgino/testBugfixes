{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testDuellMemIndex().mjava","commits":[{"id":"761333d77c7f29123c00c93b107b743f32f012e6","date":1411986072,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testDuellMemIndex().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDuellMemIndex().mjava","sourceNew":"  public void testDuellMemIndex() throws IOException {\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int numDocs = atLeast(10);\n    MemoryIndex memory = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numDocs; i++) {\n      Directory dir = newDirectory();\n      MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n      mockAnalyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n      Document nextDoc = lineFileDocs.nextDoc();\n      Document doc = new Document();\n      for (Field field : nextDoc.getFields()) {\n        if (field.fieldType().indexed()) {\n          doc.add(field);\n          if (random().nextInt(3) == 0) {\n            doc.add(field);  // randomly add the same field twice\n          }\n        }\n      }\n      \n      writer.addDocument(doc);\n      writer.close();\n      for (IndexableField field : doc.indexableFields()) {\n          memory.addField(field.name(), ((Field)field).stringValue(), mockAnalyzer);  \n      }\n      DirectoryReader competitor = DirectoryReader.open(dir);\n      LeafReader memIndexReader= (LeafReader) memory.createSearcher().getIndexReader();\n      duellReaders(competitor, memIndexReader);\n      IOUtils.close(competitor, memIndexReader);\n      memory.reset();\n      dir.close();\n    }\n    lineFileDocs.close();\n  }\n\n","sourceOld":"  public void testDuellMemIndex() throws IOException {\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int numDocs = atLeast(10);\n    MemoryIndex memory = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numDocs; i++) {\n      Directory dir = newDirectory();\n      MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n      mockAnalyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n      Document nextDoc = lineFileDocs.nextDoc();\n      Document doc = new Document();\n      for (Field field : nextDoc.getFields()) {\n        if (field.fieldType().indexed()) {\n          doc.add(field);\n          if (random().nextInt(3) == 0) {\n            doc.add(field);  // randomly add the same field twice\n          }\n        }\n      }\n      \n      writer.addDocument(doc);\n      writer.close();\n      for (IndexableField field : doc.indexableFields()) {\n          memory.addField(field.name(), ((Field)field).stringValue(), mockAnalyzer);  \n      }\n      DirectoryReader competitor = DirectoryReader.open(dir);\n      LeafReader memIndexReader= (LeafReader) memory.createSearcher().getIndexReader();\n      duellReaders(competitor, memIndexReader);\n      IOUtils.close(competitor, memIndexReader);\n      memory.reset();\n      dir.close();\n    }\n    lineFileDocs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testDuellMemIndex().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDuellMemIndex().mjava","sourceNew":"  public void testDuellMemIndex() throws IOException {\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int numDocs = atLeast(10);\n    MemoryIndex memory = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numDocs; i++) {\n      Directory dir = newDirectory();\n      MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n      mockAnalyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n      Document nextDoc = lineFileDocs.nextDoc();\n      Document doc = new Document();\n      for (Field field : nextDoc.getFields()) {\n        if (field.fieldType().indexed()) {\n          doc.add(field);\n          if (random().nextInt(3) == 0) {\n            doc.add(field);  // randomly add the same field twice\n          }\n        }\n      }\n      \n      writer.addDocument(doc);\n      writer.close();\n      for (IndexableField field : doc.indexableFields()) {\n          memory.addField(field.name(), ((Field)field).stringValue(), mockAnalyzer);  \n      }\n      DirectoryReader competitor = DirectoryReader.open(dir);\n      LeafReader memIndexReader= (LeafReader) memory.createSearcher().getIndexReader();\n      duellReaders(competitor, memIndexReader);\n      IOUtils.close(competitor, memIndexReader);\n      memory.reset();\n      dir.close();\n    }\n    lineFileDocs.close();\n  }\n\n","sourceOld":"  public void testDuellMemIndex() throws IOException {\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int numDocs = atLeast(10);\n    MemoryIndex memory = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numDocs; i++) {\n      Directory dir = newDirectory();\n      MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n      mockAnalyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n      Document nextDoc = lineFileDocs.nextDoc();\n      Document doc = new Document();\n      for (Field field : nextDoc.getFields()) {\n        if (field.fieldType().indexed()) {\n          doc.add(field);\n          if (random().nextInt(3) == 0) {\n            doc.add(field);  // randomly add the same field twice\n          }\n        }\n      }\n      \n      writer.addDocument(doc);\n      writer.close();\n      for (IndexableField field : doc.indexableFields()) {\n          memory.addField(field.name(), ((Field)field).stringValue(), mockAnalyzer);  \n      }\n      DirectoryReader competitor = DirectoryReader.open(dir);\n      LeafReader memIndexReader= (LeafReader) memory.createSearcher().getIndexReader();\n      duellReaders(competitor, memIndexReader);\n      IOUtils.close(competitor, memIndexReader);\n      memory.reset();\n      dir.close();\n    }\n    lineFileDocs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testDuellMemIndex().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testDuellMemIndex().mjava","sourceNew":"  public void testDuellMemIndex() throws IOException {\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int numDocs = atLeast(10);\n    MemoryIndex memory = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numDocs; i++) {\n      Directory dir = newDirectory();\n      MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n      mockAnalyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n      Document nextDoc = lineFileDocs.nextDoc();\n      Document doc = new Document();\n      for (Field field : nextDoc.getFields()) {\n        if (field.fieldType().indexOptions() != null) {\n          doc.add(field);\n          if (random().nextInt(3) == 0) {\n            doc.add(field);  // randomly add the same field twice\n          }\n        }\n      }\n      \n      writer.addDocument(doc);\n      writer.close();\n      for (IndexableField field : doc.indexableFields()) {\n        memory.addField(field.name(), ((Field)field).stringValue(), mockAnalyzer);  \n      }\n      DirectoryReader competitor = DirectoryReader.open(dir);\n      LeafReader memIndexReader= (LeafReader) memory.createSearcher().getIndexReader();\n      duellReaders(competitor, memIndexReader);\n      IOUtils.close(competitor, memIndexReader);\n      memory.reset();\n      dir.close();\n    }\n    lineFileDocs.close();\n  }\n\n","sourceOld":"  public void testDuellMemIndex() throws IOException {\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int numDocs = atLeast(10);\n    MemoryIndex memory = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numDocs; i++) {\n      Directory dir = newDirectory();\n      MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n      mockAnalyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n      Document nextDoc = lineFileDocs.nextDoc();\n      Document doc = new Document();\n      for (Field field : nextDoc.getFields()) {\n        if (field.fieldType().indexed()) {\n          doc.add(field);\n          if (random().nextInt(3) == 0) {\n            doc.add(field);  // randomly add the same field twice\n          }\n        }\n      }\n      \n      writer.addDocument(doc);\n      writer.close();\n      for (IndexableField field : doc.indexableFields()) {\n          memory.addField(field.name(), ((Field)field).stringValue(), mockAnalyzer);  \n      }\n      DirectoryReader competitor = DirectoryReader.open(dir);\n      LeafReader memIndexReader= (LeafReader) memory.createSearcher().getIndexReader();\n      duellReaders(competitor, memIndexReader);\n      IOUtils.close(competitor, memIndexReader);\n      memory.reset();\n      dir.close();\n    }\n    lineFileDocs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testDuellMemIndex().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testDuellMemIndex().mjava","sourceNew":"  public void testDuellMemIndex() throws IOException {\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int numDocs = atLeast(10);\n    MemoryIndex memory = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numDocs; i++) {\n      Directory dir = newDirectory();\n      MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n      mockAnalyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n      Document nextDoc = lineFileDocs.nextDoc();\n      Document doc = new Document();\n      for (Field field : nextDoc.getFields()) {\n        if (field.fieldType().indexOptions() != null) {\n          doc.add(field);\n          if (random().nextInt(3) == 0) {\n            doc.add(field);  // randomly add the same field twice\n          }\n        }\n      }\n      \n      writer.addDocument(doc);\n      writer.close();\n      for (IndexableField field : doc.indexableFields()) {\n        memory.addField(field.name(), ((Field)field).stringValue(), mockAnalyzer);  \n      }\n      DirectoryReader competitor = DirectoryReader.open(dir);\n      LeafReader memIndexReader= (LeafReader) memory.createSearcher().getIndexReader();\n      duellReaders(competitor, memIndexReader);\n      IOUtils.close(competitor, memIndexReader);\n      memory.reset();\n      dir.close();\n    }\n    lineFileDocs.close();\n  }\n\n","sourceOld":"  public void testDuellMemIndex() throws IOException {\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int numDocs = atLeast(10);\n    MemoryIndex memory = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numDocs; i++) {\n      Directory dir = newDirectory();\n      MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n      mockAnalyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n      Document nextDoc = lineFileDocs.nextDoc();\n      Document doc = new Document();\n      for (Field field : nextDoc.getFields()) {\n        if (field.fieldType().indexed()) {\n          doc.add(field);\n          if (random().nextInt(3) == 0) {\n            doc.add(field);  // randomly add the same field twice\n          }\n        }\n      }\n      \n      writer.addDocument(doc);\n      writer.close();\n      for (IndexableField field : doc.indexableFields()) {\n          memory.addField(field.name(), ((Field)field).stringValue(), mockAnalyzer);  \n      }\n      DirectoryReader competitor = DirectoryReader.open(dir);\n      LeafReader memIndexReader= (LeafReader) memory.createSearcher().getIndexReader();\n      duellReaders(competitor, memIndexReader);\n      IOUtils.close(competitor, memIndexReader);\n      memory.reset();\n      dir.close();\n    }\n    lineFileDocs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testDuellMemIndex().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testDuellMemIndex().mjava","sourceNew":"  public void testDuellMemIndex() throws IOException {\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int numDocs = atLeast(10);\n    MemoryIndex memory = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numDocs; i++) {\n      Directory dir = newDirectory();\n      MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n      mockAnalyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n      Document nextDoc = lineFileDocs.nextDoc();\n      Document doc = new Document();\n      for (Field field : nextDoc.getFields()) {\n        if (field.fieldType().indexOptions() != IndexOptions.NO) {\n          doc.add(field);\n          if (random().nextInt(3) == 0) {\n            doc.add(field);  // randomly add the same field twice\n          }\n        }\n      }\n      \n      writer.addDocument(doc);\n      writer.close();\n      for (IndexableField field : doc.indexableFields()) {\n        memory.addField(field.name(), ((Field)field).stringValue(), mockAnalyzer);  \n      }\n      DirectoryReader competitor = DirectoryReader.open(dir);\n      LeafReader memIndexReader= (LeafReader) memory.createSearcher().getIndexReader();\n      duellReaders(competitor, memIndexReader);\n      IOUtils.close(competitor, memIndexReader);\n      memory.reset();\n      dir.close();\n    }\n    lineFileDocs.close();\n  }\n\n","sourceOld":"  public void testDuellMemIndex() throws IOException {\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int numDocs = atLeast(10);\n    MemoryIndex memory = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numDocs; i++) {\n      Directory dir = newDirectory();\n      MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n      mockAnalyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n      Document nextDoc = lineFileDocs.nextDoc();\n      Document doc = new Document();\n      for (Field field : nextDoc.getFields()) {\n        if (field.fieldType().indexOptions() != null) {\n          doc.add(field);\n          if (random().nextInt(3) == 0) {\n            doc.add(field);  // randomly add the same field twice\n          }\n        }\n      }\n      \n      writer.addDocument(doc);\n      writer.close();\n      for (IndexableField field : doc.indexableFields()) {\n        memory.addField(field.name(), ((Field)field).stringValue(), mockAnalyzer);  \n      }\n      DirectoryReader competitor = DirectoryReader.open(dir);\n      LeafReader memIndexReader= (LeafReader) memory.createSearcher().getIndexReader();\n      duellReaders(competitor, memIndexReader);\n      IOUtils.close(competitor, memIndexReader);\n      memory.reset();\n      dir.close();\n    }\n    lineFileDocs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95ce1375367b92d411a06175eab3915fe93c6bc","date":1414788502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testDuellMemIndex().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testDuellMemIndex().mjava","sourceNew":"  public void testDuellMemIndex() throws IOException {\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int numDocs = atLeast(10);\n    MemoryIndex memory = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numDocs; i++) {\n      Directory dir = newDirectory();\n      MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n      mockAnalyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n      Document nextDoc = lineFileDocs.nextDoc();\n      Document doc = new Document();\n      for (Field field : nextDoc.getFields()) {\n        if (field.fieldType().indexOptions() != IndexOptions.NONE) {\n          doc.add(field);\n          if (random().nextInt(3) == 0) {\n            doc.add(field);  // randomly add the same field twice\n          }\n        }\n      }\n      \n      writer.addDocument(doc);\n      writer.close();\n      for (IndexableField field : doc.indexableFields()) {\n        memory.addField(field.name(), ((Field)field).stringValue(), mockAnalyzer);  \n      }\n      DirectoryReader competitor = DirectoryReader.open(dir);\n      LeafReader memIndexReader= (LeafReader) memory.createSearcher().getIndexReader();\n      duellReaders(competitor, memIndexReader);\n      IOUtils.close(competitor, memIndexReader);\n      memory.reset();\n      dir.close();\n    }\n    lineFileDocs.close();\n  }\n\n","sourceOld":"  public void testDuellMemIndex() throws IOException {\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int numDocs = atLeast(10);\n    MemoryIndex memory = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numDocs; i++) {\n      Directory dir = newDirectory();\n      MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n      mockAnalyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n      Document nextDoc = lineFileDocs.nextDoc();\n      Document doc = new Document();\n      for (Field field : nextDoc.getFields()) {\n        if (field.fieldType().indexOptions() != IndexOptions.NO) {\n          doc.add(field);\n          if (random().nextInt(3) == 0) {\n            doc.add(field);  // randomly add the same field twice\n          }\n        }\n      }\n      \n      writer.addDocument(doc);\n      writer.close();\n      for (IndexableField field : doc.indexableFields()) {\n        memory.addField(field.name(), ((Field)field).stringValue(), mockAnalyzer);  \n      }\n      DirectoryReader competitor = DirectoryReader.open(dir);\n      LeafReader memIndexReader= (LeafReader) memory.createSearcher().getIndexReader();\n      duellReaders(competitor, memIndexReader);\n      IOUtils.close(competitor, memIndexReader);\n      memory.reset();\n      dir.close();\n    }\n    lineFileDocs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb","date":1420550360,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testDuellMemIndex().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testDuellMemIndex().mjava","sourceNew":"  public void testDuellMemIndex() throws IOException {\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int numDocs = atLeast(10);\n    MemoryIndex memory = randomMemoryIndex();\n    for (int i = 0; i < numDocs; i++) {\n      Directory dir = newDirectory();\n      MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n      mockAnalyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n      Document nextDoc = lineFileDocs.nextDoc();\n      Document doc = new Document();\n      for (Field field : nextDoc.getFields()) {\n        if (field.fieldType().indexOptions() != IndexOptions.NONE) {\n          doc.add(field);\n          if (random().nextInt(3) == 0) {\n            doc.add(field);  // randomly add the same field twice\n          }\n        }\n      }\n      \n      writer.addDocument(doc);\n      writer.close();\n      for (IndexableField field : doc.indexableFields()) {\n        memory.addField(field.name(), ((Field)field).stringValue(), mockAnalyzer);  \n      }\n      DirectoryReader competitor = DirectoryReader.open(dir);\n      LeafReader memIndexReader= (LeafReader) memory.createSearcher().getIndexReader();\n      duellReaders(competitor, memIndexReader);\n      IOUtils.close(competitor, memIndexReader);\n      memory.reset();\n      dir.close();\n    }\n    lineFileDocs.close();\n  }\n\n","sourceOld":"  public void testDuellMemIndex() throws IOException {\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int numDocs = atLeast(10);\n    MemoryIndex memory = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    for (int i = 0; i < numDocs; i++) {\n      Directory dir = newDirectory();\n      MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n      mockAnalyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n      Document nextDoc = lineFileDocs.nextDoc();\n      Document doc = new Document();\n      for (Field field : nextDoc.getFields()) {\n        if (field.fieldType().indexOptions() != IndexOptions.NONE) {\n          doc.add(field);\n          if (random().nextInt(3) == 0) {\n            doc.add(field);  // randomly add the same field twice\n          }\n        }\n      }\n      \n      writer.addDocument(doc);\n      writer.close();\n      for (IndexableField field : doc.indexableFields()) {\n        memory.addField(field.name(), ((Field)field).stringValue(), mockAnalyzer);  \n      }\n      DirectoryReader competitor = DirectoryReader.open(dir);\n      LeafReader memIndexReader= (LeafReader) memory.createSearcher().getIndexReader();\n      duellReaders(competitor, memIndexReader);\n      IOUtils.close(competitor, memIndexReader);\n      memory.reset();\n      dir.close();\n    }\n    lineFileDocs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb04834a792874aacf8d8b111a39603c23fbd777","date":1428406678,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testDuellMemIndex().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testDuellMemIndex().mjava","sourceNew":"  public void testDuellMemIndex() throws IOException {\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int numDocs = atLeast(10);\n    MemoryIndex memory = randomMemoryIndex();\n    for (int i = 0; i < numDocs; i++) {\n      Directory dir = newDirectory();\n      MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n      mockAnalyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n      Document nextDoc = lineFileDocs.nextDoc();\n      Document doc = new Document();\n      for (Field field : nextDoc.getFields()) {\n        if (field.fieldType().indexOptions() != IndexOptions.NONE) {\n          doc.add(field);\n          if (random().nextInt(3) == 0) {\n            doc.add(field);  // randomly add the same field twice\n          }\n        }\n      }\n      \n      writer.addDocument(doc);\n      writer.close();\n      for (IndexableField field : doc.indexableFields()) {\n        memory.addField(field.name(), ((Field)field).stringValue(), mockAnalyzer);  \n      }\n      DirectoryReader competitor = DirectoryReader.open(dir);\n      LeafReader memIndexReader= (LeafReader) memory.createSearcher().getIndexReader();\n      TestUtil.checkReader(memIndexReader);\n      duellReaders(competitor, memIndexReader);\n      IOUtils.close(competitor, memIndexReader);\n      memory.reset();\n      dir.close();\n    }\n    lineFileDocs.close();\n  }\n\n","sourceOld":"  public void testDuellMemIndex() throws IOException {\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int numDocs = atLeast(10);\n    MemoryIndex memory = randomMemoryIndex();\n    for (int i = 0; i < numDocs; i++) {\n      Directory dir = newDirectory();\n      MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n      mockAnalyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n      Document nextDoc = lineFileDocs.nextDoc();\n      Document doc = new Document();\n      for (Field field : nextDoc.getFields()) {\n        if (field.fieldType().indexOptions() != IndexOptions.NONE) {\n          doc.add(field);\n          if (random().nextInt(3) == 0) {\n            doc.add(field);  // randomly add the same field twice\n          }\n        }\n      }\n      \n      writer.addDocument(doc);\n      writer.close();\n      for (IndexableField field : doc.indexableFields()) {\n        memory.addField(field.name(), ((Field)field).stringValue(), mockAnalyzer);  \n      }\n      DirectoryReader competitor = DirectoryReader.open(dir);\n      LeafReader memIndexReader= (LeafReader) memory.createSearcher().getIndexReader();\n      duellReaders(competitor, memIndexReader);\n      IOUtils.close(competitor, memIndexReader);\n      memory.reset();\n      dir.close();\n    }\n    lineFileDocs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testDuellMemIndex().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testDuellMemIndex().mjava","sourceNew":"  public void testDuellMemIndex() throws IOException {\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int numDocs = atLeast(10);\n    MemoryIndex memory = randomMemoryIndex();\n    for (int i = 0; i < numDocs; i++) {\n      Directory dir = newDirectory();\n      MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n      mockAnalyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n      Document nextDoc = lineFileDocs.nextDoc();\n      Document doc = new Document();\n      for (IndexableField field : nextDoc.getFields()) {\n        if (field.fieldType().indexOptions() != IndexOptions.NONE) {\n          doc.add(field);\n          if (random().nextInt(3) == 0) {\n            doc.add(field);  // randomly add the same field twice\n          }\n        }\n      }\n      \n      writer.addDocument(doc);\n      writer.close();\n      for (IndexableField field : doc) {\n        memory.addField(field.name(), ((Field)field).stringValue(), mockAnalyzer);  \n      }\n      DirectoryReader competitor = DirectoryReader.open(dir);\n      LeafReader memIndexReader= (LeafReader) memory.createSearcher().getIndexReader();\n      TestUtil.checkReader(memIndexReader);\n      duellReaders(competitor, memIndexReader);\n      IOUtils.close(competitor, memIndexReader);\n      memory.reset();\n      dir.close();\n    }\n    lineFileDocs.close();\n  }\n\n","sourceOld":"  public void testDuellMemIndex() throws IOException {\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int numDocs = atLeast(10);\n    MemoryIndex memory = randomMemoryIndex();\n    for (int i = 0; i < numDocs; i++) {\n      Directory dir = newDirectory();\n      MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n      mockAnalyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n      Document nextDoc = lineFileDocs.nextDoc();\n      Document doc = new Document();\n      for (Field field : nextDoc.getFields()) {\n        if (field.fieldType().indexOptions() != IndexOptions.NONE) {\n          doc.add(field);\n          if (random().nextInt(3) == 0) {\n            doc.add(field);  // randomly add the same field twice\n          }\n        }\n      }\n      \n      writer.addDocument(doc);\n      writer.close();\n      for (IndexableField field : doc.indexableFields()) {\n        memory.addField(field.name(), ((Field)field).stringValue(), mockAnalyzer);  \n      }\n      DirectoryReader competitor = DirectoryReader.open(dir);\n      LeafReader memIndexReader= (LeafReader) memory.createSearcher().getIndexReader();\n      TestUtil.checkReader(memIndexReader);\n      duellReaders(competitor, memIndexReader);\n      IOUtils.close(competitor, memIndexReader);\n      memory.reset();\n      dir.close();\n    }\n    lineFileDocs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstDirectory#testDuellMemIndex().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testDuellMemIndex().mjava","sourceNew":"  public void testDuellMemIndex() throws IOException {\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int numDocs = atLeast(10);\n    MemoryIndex memory = randomMemoryIndex();\n    for (int i = 0; i < numDocs; i++) {\n      Directory dir = newDirectory();\n      MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n      mockAnalyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n      Document nextDoc = lineFileDocs.nextDoc();\n      Document doc = new Document();\n      for (IndexableField field : nextDoc.getFields()) {\n        if (field.fieldType().indexOptions() != IndexOptions.NONE) {\n          doc.add(field);\n          if (random().nextInt(3) == 0) {\n            doc.add(field);  // randomly add the same field twice\n          }\n        }\n      }\n      \n      writer.addDocument(doc);\n      writer.close();\n      for (IndexableField field : doc) {\n        memory.addField(field.name(), ((Field)field).stringValue(), mockAnalyzer);  \n      }\n      DirectoryReader competitor = DirectoryReader.open(dir);\n      LeafReader memIndexReader= (LeafReader) memory.createSearcher().getIndexReader();\n      TestUtil.checkReader(memIndexReader);\n      duellReaders(competitor, memIndexReader);\n      IOUtils.close(competitor, memIndexReader);\n      memory.reset();\n      dir.close();\n    }\n    lineFileDocs.close();\n  }\n\n","sourceOld":"  public void testDuellMemIndex() throws IOException {\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int numDocs = atLeast(10);\n    MemoryIndex memory = randomMemoryIndex();\n    for (int i = 0; i < numDocs; i++) {\n      Directory dir = newDirectory();\n      MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n      mockAnalyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n      Document nextDoc = lineFileDocs.nextDoc();\n      Document doc = new Document();\n      for (IndexableField field : nextDoc.getFields()) {\n        if (field.fieldType().indexOptions() != IndexOptions.NONE) {\n          doc.add(field);\n          if (random().nextInt(3) == 0) {\n            doc.add(field);  // randomly add the same field twice\n          }\n        }\n      }\n      \n      writer.addDocument(doc);\n      writer.close();\n      for (IndexableField field : doc) {\n        memory.addField(field.name(), ((Field)field).stringValue(), mockAnalyzer);  \n      }\n      DirectoryReader competitor = DirectoryReader.open(dir);\n      LeafReader memIndexReader= (LeafReader) memory.createSearcher().getIndexReader();\n      TestUtil.checkReader(memIndexReader);\n      duellReaders(competitor, memIndexReader);\n      IOUtils.close(competitor, memIndexReader);\n      memory.reset();\n      dir.close();\n    }\n    lineFileDocs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["d9a47902d6207303f5ed3e7aaca62ca33433af66","3184874f7f3aca850248483485b4995343066875"],"bb04834a792874aacf8d8b111a39603c23fbd777":["e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d77dafd89756a5161d244985903e3487ca109182":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","761333d77c7f29123c00c93b107b743f32f012e6"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["3184874f7f3aca850248483485b4995343066875"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"3184874f7f3aca850248483485b4995343066875":["761333d77c7f29123c00c93b107b743f32f012e6"],"761333d77c7f29123c00c93b107b743f32f012e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["bb04834a792874aacf8d8b111a39603c23fbd777"]},"commit2Childs":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"bb04834a792874aacf8d8b111a39603c23fbd777":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9a47902d6207303f5ed3e7aaca62ca33433af66","761333d77c7f29123c00c93b107b743f32f012e6"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb":["bb04834a792874aacf8d8b111a39603c23fbd777"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"3184874f7f3aca850248483485b4995343066875":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","2bb2842e561df4e8e9ad89010605fc86ac265465"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb"],"761333d77c7f29123c00c93b107b743f32f012e6":["d9a47902d6207303f5ed3e7aaca62ca33433af66","3184874f7f3aca850248483485b4995343066875"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["d77dafd89756a5161d244985903e3487ca109182"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}