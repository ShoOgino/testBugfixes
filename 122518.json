{"path":"solr/solrj/src/test/org/apache/solr/client/ref_guide_examples/JsonRequestApiTest#testTermsFacet2().mjava","commits":[{"id":"e361c91e3f3d36ea61c7ab9f2d4459792480783e","date":1541904265,"type":0,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/ref_guide_examples/JsonRequestApiTest#testTermsFacet2().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTermsFacet2() throws Exception {\n    SolrClient solrClient = cluster.getSolrClient();\n\n    //tag::solrj-json-terms-facet2[]\n    final TermsFacetMap categoryFacet = new TermsFacetMap(\"cat\").setLimit(5);\n    final JsonQueryRequest request = new JsonQueryRequest()\n        .setQuery(\"*:*\")\n        .withFacet(\"categories\", categoryFacet);\n    QueryResponse queryResponse = request.process(solrClient, COLLECTION_NAME);\n    //end::solrj-json-terms-facet2[]\n\n    assertEquals(0, queryResponse.getStatus());\n    assertEquals(32, queryResponse.getResults().getNumFound());\n    assertEquals(10, queryResponse.getResults().size());\n    assertHasFacetWithBucketValues(queryResponse.getResponse(),\"categories\",\n        new FacetBucket(\"electronics\",12),\n        new FacetBucket(\"currency\", 4),\n        new FacetBucket(\"memory\", 3),\n        new FacetBucket(\"connector\", 2),\n        new FacetBucket(\"graphics card\", 2));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07feaa572dd3645c2013be127176350b3f4cd6a2","date":1542492880,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/ref_guide_examples/JsonRequestApiTest#testTermsFacet2().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/ref_guide_examples/JsonRequestApiTest#testTermsFacet2().mjava","sourceNew":"  @Test\n  public void testTermsFacet2() throws Exception {\n    SolrClient solrClient = cluster.getSolrClient();\n\n    //tag::solrj-json-terms-facet2[]\n    final TermsFacetMap categoryFacet = new TermsFacetMap(\"cat\").setLimit(5);\n    final JsonQueryRequest request = new JsonQueryRequest()\n        .setQuery(\"*:*\")\n        .withFacet(\"categories\", categoryFacet);\n    QueryResponse queryResponse = request.process(solrClient, COLLECTION_NAME);\n    //end::solrj-json-terms-facet2[]\n\n    assertEquals(0, queryResponse.getStatus());\n    assertEquals(32, queryResponse.getResults().getNumFound());\n    assertEquals(10, queryResponse.getResults().size());\n    final NestableJsonFacet topLevelFacetingData = queryResponse.getJsonFacetingResponse();\n    assertHasFacetWithBucketValues(topLevelFacetingData,\"categories\",\n        new FacetBucket(\"electronics\",12),\n        new FacetBucket(\"currency\", 4),\n        new FacetBucket(\"memory\", 3),\n        new FacetBucket(\"connector\", 2),\n        new FacetBucket(\"graphics card\", 2));\n  }\n\n","sourceOld":"  @Test\n  public void testTermsFacet2() throws Exception {\n    SolrClient solrClient = cluster.getSolrClient();\n\n    //tag::solrj-json-terms-facet2[]\n    final TermsFacetMap categoryFacet = new TermsFacetMap(\"cat\").setLimit(5);\n    final JsonQueryRequest request = new JsonQueryRequest()\n        .setQuery(\"*:*\")\n        .withFacet(\"categories\", categoryFacet);\n    QueryResponse queryResponse = request.process(solrClient, COLLECTION_NAME);\n    //end::solrj-json-terms-facet2[]\n\n    assertEquals(0, queryResponse.getStatus());\n    assertEquals(32, queryResponse.getResults().getNumFound());\n    assertEquals(10, queryResponse.getResults().size());\n    assertHasFacetWithBucketValues(queryResponse.getResponse(),\"categories\",\n        new FacetBucket(\"electronics\",12),\n        new FacetBucket(\"currency\", 4),\n        new FacetBucket(\"memory\", 3),\n        new FacetBucket(\"connector\", 2),\n        new FacetBucket(\"graphics card\", 2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"890d9da8d20886190a080e375f93341a779474e4","date":1549505353,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/ref_guide_examples/JsonRequestApiTest#testTermsFacet2().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/ref_guide_examples/JsonRequestApiTest#testTermsFacet2().mjava","sourceNew":"  @Test\n  public void testTermsFacet2() throws Exception {\n    SolrClient solrClient = cluster.getSolrClient();\n\n    //tag::solrj-json-terms-facet-2[]\n    final TermsFacetMap categoryFacet = new TermsFacetMap(\"cat\").setLimit(5);\n    final JsonQueryRequest request = new JsonQueryRequest()\n        .setQuery(\"*:*\")\n        .withFacet(\"categories\", categoryFacet);\n    QueryResponse queryResponse = request.process(solrClient, COLLECTION_NAME);\n    //end::solrj-json-terms-facet-2[]\n\n    assertEquals(0, queryResponse.getStatus());\n    assertEquals(32, queryResponse.getResults().getNumFound());\n    assertEquals(10, queryResponse.getResults().size());\n    final NestableJsonFacet topLevelFacetingData = queryResponse.getJsonFacetingResponse();\n    assertHasFacetWithBucketValues(topLevelFacetingData,\"categories\",\n        new FacetBucket(\"electronics\",12),\n        new FacetBucket(\"currency\", 4),\n        new FacetBucket(\"memory\", 3),\n        new FacetBucket(\"connector\", 2),\n        new FacetBucket(\"graphics card\", 2));\n  }\n\n","sourceOld":"  @Test\n  public void testTermsFacet2() throws Exception {\n    SolrClient solrClient = cluster.getSolrClient();\n\n    //tag::solrj-json-terms-facet2[]\n    final TermsFacetMap categoryFacet = new TermsFacetMap(\"cat\").setLimit(5);\n    final JsonQueryRequest request = new JsonQueryRequest()\n        .setQuery(\"*:*\")\n        .withFacet(\"categories\", categoryFacet);\n    QueryResponse queryResponse = request.process(solrClient, COLLECTION_NAME);\n    //end::solrj-json-terms-facet2[]\n\n    assertEquals(0, queryResponse.getStatus());\n    assertEquals(32, queryResponse.getResults().getNumFound());\n    assertEquals(10, queryResponse.getResults().size());\n    final NestableJsonFacet topLevelFacetingData = queryResponse.getJsonFacetingResponse();\n    assertHasFacetWithBucketValues(topLevelFacetingData,\"categories\",\n        new FacetBucket(\"electronics\",12),\n        new FacetBucket(\"currency\", 4),\n        new FacetBucket(\"memory\", 3),\n        new FacetBucket(\"connector\", 2),\n        new FacetBucket(\"graphics card\", 2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"890d9da8d20886190a080e375f93341a779474e4":["07feaa572dd3645c2013be127176350b3f4cd6a2"],"e361c91e3f3d36ea61c7ab9f2d4459792480783e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["890d9da8d20886190a080e375f93341a779474e4"],"07feaa572dd3645c2013be127176350b3f4cd6a2":["e361c91e3f3d36ea61c7ab9f2d4459792480783e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e361c91e3f3d36ea61c7ab9f2d4459792480783e"],"890d9da8d20886190a080e375f93341a779474e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e361c91e3f3d36ea61c7ab9f2d4459792480783e":["07feaa572dd3645c2013be127176350b3f4cd6a2"],"07feaa572dd3645c2013be127176350b3f4cd6a2":["890d9da8d20886190a080e375f93341a779474e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}