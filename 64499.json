{"path":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase#testDimensionalValues().mjava","commits":[{"id":"1eee4175312c41f89aa23427f9e4edfc00deeaac","date":1446373190,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase#testDimensionalValues().mjava","pathOld":"/dev/null","sourceNew":"  public void testDimensionalValues() throws Exception {\n    DimensionalValues values = sortedReader.getDimensionalValues();\n    values.intersect(DIMENSIONAL_FIELD,\n                     new IntersectVisitor() {\n                       @Override\n                       public void visit(int docID) {\n                         throw new IllegalStateException();\n                       }\n\n                       @Override\n                       public void visit(int docID, byte[] packedValues) {\n                         assertEquals(sortedValues[docID].intValue(), BKDUtil.bytesToInt(packedValues, 0));\n                       }\n\n                       @Override\n                       public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                         return Relation.QUERY_CROSSES_CELL;\n                       }\n                     });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase#testDimensionalValues().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase#testDimensionalValues().mjava","sourceNew":"  public void testDimensionalValues() throws Exception {\n    DimensionalValues values = sortedReader.getDimensionalValues();\n    values.intersect(DIMENSIONAL_FIELD,\n                     new IntersectVisitor() {\n                       @Override\n                       public void visit(int docID) {\n                         throw new IllegalStateException();\n                       }\n\n                       @Override\n                       public void visit(int docID, byte[] packedValues) {\n                         assertEquals(sortedValues[docID].intValue(), BKDUtil.bytesToInt(packedValues, 0));\n                       }\n\n                       @Override\n                       public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                         return Relation.CELL_CROSSES_QUERY;\n                       }\n                     });\n  }\n\n","sourceOld":"  public void testDimensionalValues() throws Exception {\n    DimensionalValues values = sortedReader.getDimensionalValues();\n    values.intersect(DIMENSIONAL_FIELD,\n                     new IntersectVisitor() {\n                       @Override\n                       public void visit(int docID) {\n                         throw new IllegalStateException();\n                       }\n\n                       @Override\n                       public void visit(int docID, byte[] packedValues) {\n                         assertEquals(sortedValues[docID].intValue(), BKDUtil.bytesToInt(packedValues, 0));\n                       }\n\n                       @Override\n                       public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                         return Relation.QUERY_CROSSES_CELL;\n                       }\n                     });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase#testDimensionalValues().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase#testDimensionalValues().mjava","sourceNew":"  public void testDimensionalValues() throws Exception {\n    DimensionalValues values = sortedReader.getDimensionalValues();\n    values.intersect(DIMENSIONAL_FIELD,\n                     new IntersectVisitor() {\n                       @Override\n                       public void visit(int docID) {\n                         throw new IllegalStateException();\n                       }\n\n                       @Override\n                       public void visit(int docID, byte[] packedValues) {\n                         assertEquals(sortedValues[docID].intValue(), NumericUtils.bytesToInt(packedValues, 0));\n                       }\n\n                       @Override\n                       public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                         return Relation.CELL_CROSSES_QUERY;\n                       }\n                     });\n  }\n\n","sourceOld":"  public void testDimensionalValues() throws Exception {\n    DimensionalValues values = sortedReader.getDimensionalValues();\n    values.intersect(DIMENSIONAL_FIELD,\n                     new IntersectVisitor() {\n                       @Override\n                       public void visit(int docID) {\n                         throw new IllegalStateException();\n                       }\n\n                       @Override\n                       public void visit(int docID, byte[] packedValues) {\n                         assertEquals(sortedValues[docID].intValue(), BKDUtil.bytesToInt(packedValues, 0));\n                       }\n\n                       @Override\n                       public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                         return Relation.CELL_CROSSES_QUERY;\n                       }\n                     });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase#testPoints().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase#testDimensionalValues().mjava","sourceNew":"  public void testPoints() throws Exception {\n    PointValues values = sortedReader.getPointValues();\n    values.intersect(DIMENSIONAL_FIELD,\n                     new IntersectVisitor() {\n                       @Override\n                       public void visit(int docID) {\n                         throw new IllegalStateException();\n                       }\n\n                       @Override\n                       public void visit(int docID, byte[] packedValues) {\n                         assertEquals(sortedValues[docID].intValue(), NumericUtils.bytesToInt(packedValues, 0));\n                       }\n\n                       @Override\n                       public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                         return Relation.CELL_CROSSES_QUERY;\n                       }\n                     });\n  }\n\n","sourceOld":"  public void testDimensionalValues() throws Exception {\n    DimensionalValues values = sortedReader.getDimensionalValues();\n    values.intersect(DIMENSIONAL_FIELD,\n                     new IntersectVisitor() {\n                       @Override\n                       public void visit(int docID) {\n                         throw new IllegalStateException();\n                       }\n\n                       @Override\n                       public void visit(int docID, byte[] packedValues) {\n                         assertEquals(sortedValues[docID].intValue(), NumericUtils.bytesToInt(packedValues, 0));\n                       }\n\n                       @Override\n                       public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                         return Relation.CELL_CROSSES_QUERY;\n                       }\n                     });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["770342641f7b505eaa8dccdc666158bff2419109"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"770342641f7b505eaa8dccdc666158bff2419109":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["770342641f7b505eaa8dccdc666158bff2419109"],"770342641f7b505eaa8dccdc666158bff2419109":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}