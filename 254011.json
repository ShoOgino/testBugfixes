{"path":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testSimilarityParser().mjava","commits":[{"id":"64396eddf11b3a487fb2668a9be8fa573dd73f89","date":1489809659,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testSimilarityParser().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimilarityParser() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    final float k1 = 2.25f;\n    final float b = 0.33f;\n\n    String fieldTypeName = \"MySimilarityField\";\n    String fieldName = \"similarityTestField\";\n    String payload = \"{\\n\" +\n        \"  'add-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {'class':'org.apache.solr.search.similarities.BM25SimilarityFactory', 'k1':\"+k1+\", 'b':\"+b+\" }\\n\" +\n        \"  },\\n\"+\n        \"  'add-field' : {\\n\" +\n        \"    'name':'\" + fieldName + \"',\\n\" +\n        \"    'type': 'MySimilarityField',\\n\" +\n        \"    'stored':true,\\n\" +\n        \"    'indexed':true\\n\" +\n        \"  }\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema?wt=json&indent=on\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    Map fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n    \n    assertFieldSimilarity(fieldName, BM25Similarity.class,\n       sim -> assertEquals(\"Unexpected k1\", k1, sim.getK1(), .001),\n       sim -> assertEquals(\"Unexpected b\", b, sim.getB(), .001));\n\n    final String independenceMeasure = \"Saturated\";\n    final boolean discountOverlaps = false; \n    payload = \"{\\n\" +\n        \"  'replace-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {\\n\" +\n        \"      'class':'org.apache.solr.search.similarities.DFISimilarityFactory',\\n\" +\n        \"      'independenceMeasure':'\" + independenceMeasure + \"',\\n\" +\n        \"      'discountOverlaps':\" + discountOverlaps + \"\\n\" +\n        \"     }\\n\" +\n        \"  }\\n\"+\n        \"}\\n\";\n\n    response = harness.post(\"/schema?wt=json&indent=on\", json(payload));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n    fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n\n    assertFieldSimilarity(fieldName, DFISimilarity.class,\n        sim -> assertEquals(\"Unexpected independenceMeasure\", independenceMeasure, sim.getIndependence().toString()),\n        sim -> assertEquals(\"Unexpected discountedOverlaps\", discountOverlaps, sim.getDiscountOverlaps()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad771c8c8bc422816c3459d9d0776c2f54a4de80","date":1490280011,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testSimilarityParser().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimilarityParser() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    final float k1 = 2.25f;\n    final float b = 0.33f;\n\n    String fieldTypeName = \"MySimilarityField\";\n    String fieldName = \"similarityTestField\";\n    String payload = \"{\\n\" +\n        \"  'add-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {'class':'org.apache.solr.search.similarities.BM25SimilarityFactory', 'k1':\"+k1+\", 'b':\"+b+\" }\\n\" +\n        \"  },\\n\"+\n        \"  'add-field' : {\\n\" +\n        \"    'name':'\" + fieldName + \"',\\n\" +\n        \"    'type': 'MySimilarityField',\\n\" +\n        \"    'stored':true,\\n\" +\n        \"    'indexed':true\\n\" +\n        \"  }\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema?wt=json&indent=on\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    Map fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n    \n    assertFieldSimilarity(fieldName, BM25Similarity.class,\n       sim -> assertEquals(\"Unexpected k1\", k1, sim.getK1(), .001),\n       sim -> assertEquals(\"Unexpected b\", b, sim.getB(), .001));\n\n    final String independenceMeasure = \"Saturated\";\n    final boolean discountOverlaps = false; \n    payload = \"{\\n\" +\n        \"  'replace-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {\\n\" +\n        \"      'class':'org.apache.solr.search.similarities.DFISimilarityFactory',\\n\" +\n        \"      'independenceMeasure':'\" + independenceMeasure + \"',\\n\" +\n        \"      'discountOverlaps':\" + discountOverlaps + \"\\n\" +\n        \"     }\\n\" +\n        \"  }\\n\"+\n        \"}\\n\";\n\n    response = harness.post(\"/schema?wt=json&indent=on\", json(payload));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n    fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n\n    assertFieldSimilarity(fieldName, DFISimilarity.class,\n        sim -> assertEquals(\"Unexpected independenceMeasure\", independenceMeasure, sim.getIndependence().toString()),\n        sim -> assertEquals(\"Unexpected discountedOverlaps\", discountOverlaps, sim.getDiscountOverlaps()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac1e7fa558287a811ea07634d815ee7b1c541284","date":1500910922,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testSimilarityParser().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testSimilarityParser().mjava","sourceNew":"  public void testSimilarityParser() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    final float k1 = 2.25f;\n    final float b = 0.33f;\n\n    String fieldTypeName = \"MySimilarityField\";\n    String fieldName = \"similarityTestField\";\n    String payload = \"{\\n\" +\n        \"  'add-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {'class':'org.apache.solr.search.similarities.BM25SimilarityFactory', 'k1':\"+k1+\", 'b':\"+b+\" }\\n\" +\n        \"  },\\n\"+\n        \"  'add-field' : {\\n\" +\n        \"    'name':'\" + fieldName + \"',\\n\" +\n        \"    'type': 'MySimilarityField',\\n\" +\n        \"    'stored':true,\\n\" +\n        \"    'indexed':true\\n\" +\n        \"  }\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    Map fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n    \n    assertFieldSimilarity(fieldName, BM25Similarity.class,\n       sim -> assertEquals(\"Unexpected k1\", k1, sim.getK1(), .001),\n       sim -> assertEquals(\"Unexpected b\", b, sim.getB(), .001));\n\n    final String independenceMeasure = \"Saturated\";\n    final boolean discountOverlaps = false; \n    payload = \"{\\n\" +\n        \"  'replace-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {\\n\" +\n        \"      'class':'org.apache.solr.search.similarities.DFISimilarityFactory',\\n\" +\n        \"      'independenceMeasure':'\" + independenceMeasure + \"',\\n\" +\n        \"      'discountOverlaps':\" + discountOverlaps + \"\\n\" +\n        \"     }\\n\" +\n        \"  }\\n\"+\n        \"}\\n\";\n\n    response = harness.post(\"/schema\", json(payload));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n    fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n\n    assertFieldSimilarity(fieldName, DFISimilarity.class,\n        sim -> assertEquals(\"Unexpected independenceMeasure\", independenceMeasure, sim.getIndependence().toString()),\n        sim -> assertEquals(\"Unexpected discountedOverlaps\", discountOverlaps, sim.getDiscountOverlaps()));\n  }\n\n","sourceOld":"  public void testSimilarityParser() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    final float k1 = 2.25f;\n    final float b = 0.33f;\n\n    String fieldTypeName = \"MySimilarityField\";\n    String fieldName = \"similarityTestField\";\n    String payload = \"{\\n\" +\n        \"  'add-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {'class':'org.apache.solr.search.similarities.BM25SimilarityFactory', 'k1':\"+k1+\", 'b':\"+b+\" }\\n\" +\n        \"  },\\n\"+\n        \"  'add-field' : {\\n\" +\n        \"    'name':'\" + fieldName + \"',\\n\" +\n        \"    'type': 'MySimilarityField',\\n\" +\n        \"    'stored':true,\\n\" +\n        \"    'indexed':true\\n\" +\n        \"  }\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema?wt=json&indent=on\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    Map fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n    \n    assertFieldSimilarity(fieldName, BM25Similarity.class,\n       sim -> assertEquals(\"Unexpected k1\", k1, sim.getK1(), .001),\n       sim -> assertEquals(\"Unexpected b\", b, sim.getB(), .001));\n\n    final String independenceMeasure = \"Saturated\";\n    final boolean discountOverlaps = false; \n    payload = \"{\\n\" +\n        \"  'replace-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {\\n\" +\n        \"      'class':'org.apache.solr.search.similarities.DFISimilarityFactory',\\n\" +\n        \"      'independenceMeasure':'\" + independenceMeasure + \"',\\n\" +\n        \"      'discountOverlaps':\" + discountOverlaps + \"\\n\" +\n        \"     }\\n\" +\n        \"  }\\n\"+\n        \"}\\n\";\n\n    response = harness.post(\"/schema?wt=json&indent=on\", json(payload));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n    fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n\n    assertFieldSimilarity(fieldName, DFISimilarity.class,\n        sim -> assertEquals(\"Unexpected independenceMeasure\", independenceMeasure, sim.getIndependence().toString()),\n        sim -> assertEquals(\"Unexpected discountedOverlaps\", discountOverlaps, sim.getDiscountOverlaps()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testSimilarityParser().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testSimilarityParser().mjava","sourceNew":"  public void testSimilarityParser() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    final float k1 = 2.25f;\n    final float b = 0.33f;\n\n    String fieldTypeName = \"MySimilarityField\";\n    String fieldName = \"similarityTestField\";\n    String payload = \"{\\n\" +\n        \"  'add-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {'class':'org.apache.solr.search.similarities.BM25SimilarityFactory', 'k1':\"+k1+\", 'b':\"+b+\" }\\n\" +\n        \"  },\\n\"+\n        \"  'add-field' : {\\n\" +\n        \"    'name':'\" + fieldName + \"',\\n\" +\n        \"    'type': 'MySimilarityField',\\n\" +\n        \"    'stored':true,\\n\" +\n        \"    'indexed':true\\n\" +\n        \"  }\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    Map fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n    \n    assertFieldSimilarity(fieldName, BM25Similarity.class,\n       sim -> assertEquals(\"Unexpected k1\", k1, sim.getK1(), .001),\n       sim -> assertEquals(\"Unexpected b\", b, sim.getB(), .001));\n\n    final String independenceMeasure = \"Saturated\";\n    final boolean discountOverlaps = false; \n    payload = \"{\\n\" +\n        \"  'replace-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {\\n\" +\n        \"      'class':'org.apache.solr.search.similarities.DFISimilarityFactory',\\n\" +\n        \"      'independenceMeasure':'\" + independenceMeasure + \"',\\n\" +\n        \"      'discountOverlaps':\" + discountOverlaps + \"\\n\" +\n        \"     }\\n\" +\n        \"  }\\n\"+\n        \"}\\n\";\n\n    response = harness.post(\"/schema\", json(payload));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n    fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n\n    assertFieldSimilarity(fieldName, DFISimilarity.class,\n        sim -> assertEquals(\"Unexpected independenceMeasure\", independenceMeasure, sim.getIndependence().toString()),\n        sim -> assertEquals(\"Unexpected discountedOverlaps\", discountOverlaps, sim.getDiscountOverlaps()));\n  }\n\n","sourceOld":"  public void testSimilarityParser() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    final float k1 = 2.25f;\n    final float b = 0.33f;\n\n    String fieldTypeName = \"MySimilarityField\";\n    String fieldName = \"similarityTestField\";\n    String payload = \"{\\n\" +\n        \"  'add-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {'class':'org.apache.solr.search.similarities.BM25SimilarityFactory', 'k1':\"+k1+\", 'b':\"+b+\" }\\n\" +\n        \"  },\\n\"+\n        \"  'add-field' : {\\n\" +\n        \"    'name':'\" + fieldName + \"',\\n\" +\n        \"    'type': 'MySimilarityField',\\n\" +\n        \"    'stored':true,\\n\" +\n        \"    'indexed':true\\n\" +\n        \"  }\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema?wt=json&indent=on\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    Map fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n    \n    assertFieldSimilarity(fieldName, BM25Similarity.class,\n       sim -> assertEquals(\"Unexpected k1\", k1, sim.getK1(), .001),\n       sim -> assertEquals(\"Unexpected b\", b, sim.getB(), .001));\n\n    final String independenceMeasure = \"Saturated\";\n    final boolean discountOverlaps = false; \n    payload = \"{\\n\" +\n        \"  'replace-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {\\n\" +\n        \"      'class':'org.apache.solr.search.similarities.DFISimilarityFactory',\\n\" +\n        \"      'independenceMeasure':'\" + independenceMeasure + \"',\\n\" +\n        \"      'discountOverlaps':\" + discountOverlaps + \"\\n\" +\n        \"     }\\n\" +\n        \"  }\\n\"+\n        \"}\\n\";\n\n    response = harness.post(\"/schema?wt=json&indent=on\", json(payload));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n    fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n\n    assertFieldSimilarity(fieldName, DFISimilarity.class,\n        sim -> assertEquals(\"Unexpected independenceMeasure\", independenceMeasure, sim.getIndependence().toString()),\n        sim -> assertEquals(\"Unexpected discountedOverlaps\", discountOverlaps, sim.getDiscountOverlaps()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testSimilarityParser().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testSimilarityParser().mjava","sourceNew":"  public void testSimilarityParser() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    final float k1 = 2.25f;\n    final float b = 0.33f;\n\n    String fieldTypeName = \"MySimilarityField\";\n    String fieldName = \"similarityTestField\";\n    String payload = \"{\\n\" +\n        \"  'add-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {'class':'org.apache.solr.search.similarities.BM25SimilarityFactory', 'k1':\"+k1+\", 'b':\"+b+\" }\\n\" +\n        \"  },\\n\"+\n        \"  'add-field' : {\\n\" +\n        \"    'name':'\" + fieldName + \"',\\n\" +\n        \"    'type': 'MySimilarityField',\\n\" +\n        \"    'stored':true,\\n\" +\n        \"    'indexed':true\\n\" +\n        \"  }\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    Map fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n    \n    assertFieldSimilarity(fieldName, BM25Similarity.class,\n       sim -> assertEquals(\"Unexpected k1\", k1, sim.getK1(), .001),\n       sim -> assertEquals(\"Unexpected b\", b, sim.getB(), .001));\n\n    final String independenceMeasure = \"Saturated\";\n    final boolean discountOverlaps = false; \n    payload = \"{\\n\" +\n        \"  'replace-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {\\n\" +\n        \"      'class':'org.apache.solr.search.similarities.DFISimilarityFactory',\\n\" +\n        \"      'independenceMeasure':'\" + independenceMeasure + \"',\\n\" +\n        \"      'discountOverlaps':\" + discountOverlaps + \"\\n\" +\n        \"     }\\n\" +\n        \"  }\\n\"+\n        \"}\\n\";\n\n    response = harness.post(\"/schema\", json(payload));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n    fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n\n    assertFieldSimilarity(fieldName, DFISimilarity.class,\n        sim -> assertEquals(\"Unexpected independenceMeasure\", independenceMeasure, sim.getIndependence().toString()),\n        sim -> assertEquals(\"Unexpected discountedOverlaps\", discountOverlaps, sim.getDiscountOverlaps()));\n  }\n\n","sourceOld":"  public void testSimilarityParser() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    final float k1 = 2.25f;\n    final float b = 0.33f;\n\n    String fieldTypeName = \"MySimilarityField\";\n    String fieldName = \"similarityTestField\";\n    String payload = \"{\\n\" +\n        \"  'add-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {'class':'org.apache.solr.search.similarities.BM25SimilarityFactory', 'k1':\"+k1+\", 'b':\"+b+\" }\\n\" +\n        \"  },\\n\"+\n        \"  'add-field' : {\\n\" +\n        \"    'name':'\" + fieldName + \"',\\n\" +\n        \"    'type': 'MySimilarityField',\\n\" +\n        \"    'stored':true,\\n\" +\n        \"    'indexed':true\\n\" +\n        \"  }\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema?wt=json&indent=on\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    Map fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n    \n    assertFieldSimilarity(fieldName, BM25Similarity.class,\n       sim -> assertEquals(\"Unexpected k1\", k1, sim.getK1(), .001),\n       sim -> assertEquals(\"Unexpected b\", b, sim.getB(), .001));\n\n    final String independenceMeasure = \"Saturated\";\n    final boolean discountOverlaps = false; \n    payload = \"{\\n\" +\n        \"  'replace-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {\\n\" +\n        \"      'class':'org.apache.solr.search.similarities.DFISimilarityFactory',\\n\" +\n        \"      'independenceMeasure':'\" + independenceMeasure + \"',\\n\" +\n        \"      'discountOverlaps':\" + discountOverlaps + \"\\n\" +\n        \"     }\\n\" +\n        \"  }\\n\"+\n        \"}\\n\";\n\n    response = harness.post(\"/schema?wt=json&indent=on\", json(payload));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n    fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n\n    assertFieldSimilarity(fieldName, DFISimilarity.class,\n        sim -> assertEquals(\"Unexpected independenceMeasure\", independenceMeasure, sim.getIndependence().toString()),\n        sim -> assertEquals(\"Unexpected discountedOverlaps\", discountOverlaps, sim.getDiscountOverlaps()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03d29de0abdd3a2150c0dabfe1bf98024bbfa367","date":1515464714,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testSimilarityParser().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testSimilarityParser().mjava","sourceNew":"  public void testSimilarityParser() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    final float k1 = 2.25f;\n    final float b = 0.33f;\n\n    String fieldTypeName = \"MySimilarityField\";\n    String fieldName = \"similarityTestField\";\n    String payload = \"{\\n\" +\n        \"  'add-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {'class':'org.apache.solr.search.similarities.BM25SimilarityFactory', 'k1':\"+k1+\", 'b':\"+b+\" }\\n\" +\n        \"  },\\n\"+\n        \"  'add-field' : {\\n\" +\n        \"    'name':'\" + fieldName + \"',\\n\" +\n        \"    'type': 'MySimilarityField',\\n\" +\n        \"    'stored':true,\\n\" +\n        \"    'indexed':true\\n\" +\n        \"  }\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"error\"));\n\n    Map fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n    \n    assertFieldSimilarity(fieldName, BM25Similarity.class,\n       sim -> assertEquals(\"Unexpected k1\", k1, sim.getK1(), .001),\n       sim -> assertEquals(\"Unexpected b\", b, sim.getB(), .001));\n\n    final String independenceMeasure = \"Saturated\";\n    final boolean discountOverlaps = false; \n    payload = \"{\\n\" +\n        \"  'replace-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {\\n\" +\n        \"      'class':'org.apache.solr.search.similarities.DFISimilarityFactory',\\n\" +\n        \"      'independenceMeasure':'\" + independenceMeasure + \"',\\n\" +\n        \"      'discountOverlaps':\" + discountOverlaps + \"\\n\" +\n        \"     }\\n\" +\n        \"  }\\n\"+\n        \"}\\n\";\n\n    response = harness.post(\"/schema\", json(payload));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"error\"));\n    fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n\n    assertFieldSimilarity(fieldName, DFISimilarity.class,\n        sim -> assertEquals(\"Unexpected independenceMeasure\", independenceMeasure, sim.getIndependence().toString()),\n        sim -> assertEquals(\"Unexpected discountedOverlaps\", discountOverlaps, sim.getDiscountOverlaps()));\n  }\n\n","sourceOld":"  public void testSimilarityParser() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    final float k1 = 2.25f;\n    final float b = 0.33f;\n\n    String fieldTypeName = \"MySimilarityField\";\n    String fieldName = \"similarityTestField\";\n    String payload = \"{\\n\" +\n        \"  'add-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {'class':'org.apache.solr.search.similarities.BM25SimilarityFactory', 'k1':\"+k1+\", 'b':\"+b+\" }\\n\" +\n        \"  },\\n\"+\n        \"  'add-field' : {\\n\" +\n        \"    'name':'\" + fieldName + \"',\\n\" +\n        \"    'type': 'MySimilarityField',\\n\" +\n        \"    'stored':true,\\n\" +\n        \"    'indexed':true\\n\" +\n        \"  }\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    Map fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n    \n    assertFieldSimilarity(fieldName, BM25Similarity.class,\n       sim -> assertEquals(\"Unexpected k1\", k1, sim.getK1(), .001),\n       sim -> assertEquals(\"Unexpected b\", b, sim.getB(), .001));\n\n    final String independenceMeasure = \"Saturated\";\n    final boolean discountOverlaps = false; \n    payload = \"{\\n\" +\n        \"  'replace-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {\\n\" +\n        \"      'class':'org.apache.solr.search.similarities.DFISimilarityFactory',\\n\" +\n        \"      'independenceMeasure':'\" + independenceMeasure + \"',\\n\" +\n        \"      'discountOverlaps':\" + discountOverlaps + \"\\n\" +\n        \"     }\\n\" +\n        \"  }\\n\"+\n        \"}\\n\";\n\n    response = harness.post(\"/schema\", json(payload));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n    fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n\n    assertFieldSimilarity(fieldName, DFISimilarity.class,\n        sim -> assertEquals(\"Unexpected independenceMeasure\", independenceMeasure, sim.getIndependence().toString()),\n        sim -> assertEquals(\"Unexpected discountedOverlaps\", discountOverlaps, sim.getDiscountOverlaps()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testSimilarityParser().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testSimilarityParser().mjava","sourceNew":"  public void testSimilarityParser() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    final float k1 = 2.25f;\n    final float b = 0.33f;\n\n    String fieldTypeName = \"MySimilarityField\";\n    String fieldName = \"similarityTestField\";\n    String payload = \"{\\n\" +\n        \"  'add-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {'class':'org.apache.solr.search.similarities.BM25SimilarityFactory', 'k1':\"+k1+\", 'b':\"+b+\" }\\n\" +\n        \"  },\\n\"+\n        \"  'add-field' : {\\n\" +\n        \"    'name':'\" + fieldName + \"',\\n\" +\n        \"    'type': 'MySimilarityField',\\n\" +\n        \"    'stored':true,\\n\" +\n        \"    'indexed':true\\n\" +\n        \"  }\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"error\"));\n\n    Map fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n    \n    assertFieldSimilarity(fieldName, BM25Similarity.class,\n       sim -> assertEquals(\"Unexpected k1\", k1, sim.getK1(), .001),\n       sim -> assertEquals(\"Unexpected b\", b, sim.getB(), .001));\n\n    final String independenceMeasure = \"Saturated\";\n    final boolean discountOverlaps = false; \n    payload = \"{\\n\" +\n        \"  'replace-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {\\n\" +\n        \"      'class':'org.apache.solr.search.similarities.DFISimilarityFactory',\\n\" +\n        \"      'independenceMeasure':'\" + independenceMeasure + \"',\\n\" +\n        \"      'discountOverlaps':\" + discountOverlaps + \"\\n\" +\n        \"     }\\n\" +\n        \"  }\\n\"+\n        \"}\\n\";\n\n    response = harness.post(\"/schema\", json(payload));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"error\"));\n    fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n\n    assertFieldSimilarity(fieldName, DFISimilarity.class,\n        sim -> assertEquals(\"Unexpected independenceMeasure\", independenceMeasure, sim.getIndependence().toString()),\n        sim -> assertEquals(\"Unexpected discountedOverlaps\", discountOverlaps, sim.getDiscountOverlaps()));\n  }\n\n","sourceOld":"  public void testSimilarityParser() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    final float k1 = 2.25f;\n    final float b = 0.33f;\n\n    String fieldTypeName = \"MySimilarityField\";\n    String fieldName = \"similarityTestField\";\n    String payload = \"{\\n\" +\n        \"  'add-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {'class':'org.apache.solr.search.similarities.BM25SimilarityFactory', 'k1':\"+k1+\", 'b':\"+b+\" }\\n\" +\n        \"  },\\n\"+\n        \"  'add-field' : {\\n\" +\n        \"    'name':'\" + fieldName + \"',\\n\" +\n        \"    'type': 'MySimilarityField',\\n\" +\n        \"    'stored':true,\\n\" +\n        \"    'indexed':true\\n\" +\n        \"  }\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    Map fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n    \n    assertFieldSimilarity(fieldName, BM25Similarity.class,\n       sim -> assertEquals(\"Unexpected k1\", k1, sim.getK1(), .001),\n       sim -> assertEquals(\"Unexpected b\", b, sim.getB(), .001));\n\n    final String independenceMeasure = \"Saturated\";\n    final boolean discountOverlaps = false; \n    payload = \"{\\n\" +\n        \"  'replace-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {\\n\" +\n        \"      'class':'org.apache.solr.search.similarities.DFISimilarityFactory',\\n\" +\n        \"      'independenceMeasure':'\" + independenceMeasure + \"',\\n\" +\n        \"      'discountOverlaps':\" + discountOverlaps + \"\\n\" +\n        \"     }\\n\" +\n        \"  }\\n\"+\n        \"}\\n\";\n\n    response = harness.post(\"/schema\", json(payload));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n    fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n\n    assertFieldSimilarity(fieldName, DFISimilarity.class,\n        sim -> assertEquals(\"Unexpected independenceMeasure\", independenceMeasure, sim.getIndependence().toString()),\n        sim -> assertEquals(\"Unexpected discountedOverlaps\", discountOverlaps, sim.getDiscountOverlaps()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49b9c73648f983a139745761ed2bedf2e3821b34","date":1543567369,"type":3,"author":"javanna","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testSimilarityParser().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testSimilarityParser().mjava","sourceNew":"  public void testSimilarityParser() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    final float k1 = 2.25f;\n    final float b = 0.33f;\n\n    String fieldTypeName = \"MySimilarityField\";\n    String fieldName = \"similarityTestField\";\n    String payload = \"{\\n\" +\n        \"  'add-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {'class':'org.apache.solr.search.similarities.BM25SimilarityFactory', 'k1':\"+k1+\", 'b':\"+b+\" }\\n\" +\n        \"  },\\n\"+\n        \"  'add-field' : {\\n\" +\n        \"    'name':'\" + fieldName + \"',\\n\" +\n        \"    'type': 'MySimilarityField',\\n\" +\n        \"    'stored':true,\\n\" +\n        \"    'indexed':true\\n\" +\n        \"  }\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"error\"));\n\n    Map fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n    \n    assertFieldSimilarity(fieldName, LegacyBM25Similarity.class,\n       sim -> assertEquals(\"Unexpected k1\", k1, sim.getK1(), .001),\n       sim -> assertEquals(\"Unexpected b\", b, sim.getB(), .001));\n\n    final String independenceMeasure = \"Saturated\";\n    final boolean discountOverlaps = false; \n    payload = \"{\\n\" +\n        \"  'replace-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {\\n\" +\n        \"      'class':'org.apache.solr.search.similarities.DFISimilarityFactory',\\n\" +\n        \"      'independenceMeasure':'\" + independenceMeasure + \"',\\n\" +\n        \"      'discountOverlaps':\" + discountOverlaps + \"\\n\" +\n        \"     }\\n\" +\n        \"  }\\n\"+\n        \"}\\n\";\n\n    response = harness.post(\"/schema\", json(payload));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"error\"));\n    fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n\n    assertFieldSimilarity(fieldName, DFISimilarity.class,\n        sim -> assertEquals(\"Unexpected independenceMeasure\", independenceMeasure, sim.getIndependence().toString()),\n        sim -> assertEquals(\"Unexpected discountedOverlaps\", discountOverlaps, sim.getDiscountOverlaps()));\n  }\n\n","sourceOld":"  public void testSimilarityParser() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    final float k1 = 2.25f;\n    final float b = 0.33f;\n\n    String fieldTypeName = \"MySimilarityField\";\n    String fieldName = \"similarityTestField\";\n    String payload = \"{\\n\" +\n        \"  'add-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {'class':'org.apache.solr.search.similarities.BM25SimilarityFactory', 'k1':\"+k1+\", 'b':\"+b+\" }\\n\" +\n        \"  },\\n\"+\n        \"  'add-field' : {\\n\" +\n        \"    'name':'\" + fieldName + \"',\\n\" +\n        \"    'type': 'MySimilarityField',\\n\" +\n        \"    'stored':true,\\n\" +\n        \"    'indexed':true\\n\" +\n        \"  }\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"error\"));\n\n    Map fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n    \n    assertFieldSimilarity(fieldName, BM25Similarity.class,\n       sim -> assertEquals(\"Unexpected k1\", k1, sim.getK1(), .001),\n       sim -> assertEquals(\"Unexpected b\", b, sim.getB(), .001));\n\n    final String independenceMeasure = \"Saturated\";\n    final boolean discountOverlaps = false; \n    payload = \"{\\n\" +\n        \"  'replace-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {\\n\" +\n        \"      'class':'org.apache.solr.search.similarities.DFISimilarityFactory',\\n\" +\n        \"      'independenceMeasure':'\" + independenceMeasure + \"',\\n\" +\n        \"      'discountOverlaps':\" + discountOverlaps + \"\\n\" +\n        \"     }\\n\" +\n        \"  }\\n\"+\n        \"}\\n\";\n\n    response = harness.post(\"/schema\", json(payload));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"error\"));\n    fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n\n    assertFieldSimilarity(fieldName, DFISimilarity.class,\n        sim -> assertEquals(\"Unexpected independenceMeasure\", independenceMeasure, sim.getIndependence().toString()),\n        sim -> assertEquals(\"Unexpected discountedOverlaps\", discountOverlaps, sim.getDiscountOverlaps()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da56d90379fbe988bf847d3482efa685803c5193","date":1544607230,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testSimilarityParser().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testSimilarityParser().mjava","sourceNew":"  public void testSimilarityParser() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    final float k1 = 2.25f;\n    final float b = 0.33f;\n\n    String fieldTypeName = \"MySimilarityField\";\n    String fieldName = \"similarityTestField\";\n    String payload = \"{\\n\" +\n        \"  'add-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {'class':'org.apache.solr.search.similarities.BM25SimilarityFactory', 'k1':\"+k1+\", 'b':\"+b+\" }\\n\" +\n        \"  },\\n\"+\n        \"  'add-field' : {\\n\" +\n        \"    'name':'\" + fieldName + \"',\\n\" +\n        \"    'type': 'MySimilarityField',\\n\" +\n        \"    'stored':true,\\n\" +\n        \"    'indexed':true\\n\" +\n        \"  }\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"error\"));\n\n    Map fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n    \n    assertFieldSimilarity(fieldName, BM25Similarity.class,\n       sim -> assertEquals(\"Unexpected k1\", k1, sim.getK1(), .001),\n       sim -> assertEquals(\"Unexpected b\", b, sim.getB(), .001));\n\n    final String independenceMeasure = \"Saturated\";\n    final boolean discountOverlaps = false; \n    payload = \"{\\n\" +\n        \"  'replace-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {\\n\" +\n        \"      'class':'org.apache.solr.search.similarities.DFISimilarityFactory',\\n\" +\n        \"      'independenceMeasure':'\" + independenceMeasure + \"',\\n\" +\n        \"      'discountOverlaps':\" + discountOverlaps + \"\\n\" +\n        \"     }\\n\" +\n        \"  }\\n\"+\n        \"}\\n\";\n\n    response = harness.post(\"/schema\", json(payload));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"error\"));\n    fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n\n    assertFieldSimilarity(fieldName, DFISimilarity.class,\n        sim -> assertEquals(\"Unexpected independenceMeasure\", independenceMeasure, sim.getIndependence().toString()),\n        sim -> assertEquals(\"Unexpected discountedOverlaps\", discountOverlaps, sim.getDiscountOverlaps()));\n  }\n\n","sourceOld":"  public void testSimilarityParser() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    final float k1 = 2.25f;\n    final float b = 0.33f;\n\n    String fieldTypeName = \"MySimilarityField\";\n    String fieldName = \"similarityTestField\";\n    String payload = \"{\\n\" +\n        \"  'add-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {'class':'org.apache.solr.search.similarities.BM25SimilarityFactory', 'k1':\"+k1+\", 'b':\"+b+\" }\\n\" +\n        \"  },\\n\"+\n        \"  'add-field' : {\\n\" +\n        \"    'name':'\" + fieldName + \"',\\n\" +\n        \"    'type': 'MySimilarityField',\\n\" +\n        \"    'stored':true,\\n\" +\n        \"    'indexed':true\\n\" +\n        \"  }\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"error\"));\n\n    Map fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n    \n    assertFieldSimilarity(fieldName, LegacyBM25Similarity.class,\n       sim -> assertEquals(\"Unexpected k1\", k1, sim.getK1(), .001),\n       sim -> assertEquals(\"Unexpected b\", b, sim.getB(), .001));\n\n    final String independenceMeasure = \"Saturated\";\n    final boolean discountOverlaps = false; \n    payload = \"{\\n\" +\n        \"  'replace-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {\\n\" +\n        \"      'class':'org.apache.solr.search.similarities.DFISimilarityFactory',\\n\" +\n        \"      'independenceMeasure':'\" + independenceMeasure + \"',\\n\" +\n        \"      'discountOverlaps':\" + discountOverlaps + \"\\n\" +\n        \"     }\\n\" +\n        \"  }\\n\"+\n        \"}\\n\";\n\n    response = harness.post(\"/schema\", json(payload));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"error\"));\n    fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n\n    assertFieldSimilarity(fieldName, DFISimilarity.class,\n        sim -> assertEquals(\"Unexpected independenceMeasure\", independenceMeasure, sim.getIndependence().toString()),\n        sim -> assertEquals(\"Unexpected discountedOverlaps\", discountOverlaps, sim.getDiscountOverlaps()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3714bcf66a68a1600e9dd11442fc1b33b62ef088","date":1556832005,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testSimilarityParser().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testSimilarityParser().mjava","sourceNew":"  public void testSimilarityParser() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    final float k1 = 2.25f;\n    final float b = 0.33f;\n\n    String fieldTypeName = \"MySimilarityField\";\n    String fieldName = \"similarityTestField\";\n    String payload = \"{\\n\" +\n        \"  'add-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {'class':'org.apache.solr.search.similarities.BM25SimilarityFactory', 'k1':\"+k1+\", 'b':\"+b+\" }\\n\" +\n        \"  },\\n\"+\n        \"  'add-field' : {\\n\" +\n        \"    'name':'\" + fieldName + \"',\\n\" +\n        \"    'type': 'MySimilarityField',\\n\" +\n        \"    'stored':true,\\n\" +\n        \"    'indexed':true\\n\" +\n        \"  }\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema\", json(payload));\n\n    Map map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"error\"));\n\n    Map fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n    \n    assertFieldSimilarity(fieldName, BM25Similarity.class,\n       sim -> assertEquals(\"Unexpected k1\", k1, sim.getK1(), .001),\n       sim -> assertEquals(\"Unexpected b\", b, sim.getB(), .001));\n\n    final String independenceMeasure = \"Saturated\";\n    final boolean discountOverlaps = false; \n    payload = \"{\\n\" +\n        \"  'replace-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {\\n\" +\n        \"      'class':'org.apache.solr.search.similarities.DFISimilarityFactory',\\n\" +\n        \"      'independenceMeasure':'\" + independenceMeasure + \"',\\n\" +\n        \"      'discountOverlaps':\" + discountOverlaps + \"\\n\" +\n        \"     }\\n\" +\n        \"  }\\n\"+\n        \"}\\n\";\n\n    response = harness.post(\"/schema\", json(payload));\n\n    map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"error\"));\n    fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n\n    assertFieldSimilarity(fieldName, DFISimilarity.class,\n        sim -> assertEquals(\"Unexpected independenceMeasure\", independenceMeasure, sim.getIndependence().toString()),\n        sim -> assertEquals(\"Unexpected discountedOverlaps\", discountOverlaps, sim.getDiscountOverlaps()));\n  }\n\n","sourceOld":"  public void testSimilarityParser() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    final float k1 = 2.25f;\n    final float b = 0.33f;\n\n    String fieldTypeName = \"MySimilarityField\";\n    String fieldName = \"similarityTestField\";\n    String payload = \"{\\n\" +\n        \"  'add-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {'class':'org.apache.solr.search.similarities.BM25SimilarityFactory', 'k1':\"+k1+\", 'b':\"+b+\" }\\n\" +\n        \"  },\\n\"+\n        \"  'add-field' : {\\n\" +\n        \"    'name':'\" + fieldName + \"',\\n\" +\n        \"    'type': 'MySimilarityField',\\n\" +\n        \"    'stored':true,\\n\" +\n        \"    'indexed':true\\n\" +\n        \"  }\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema\", json(payload));\n\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"error\"));\n\n    Map fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n    \n    assertFieldSimilarity(fieldName, BM25Similarity.class,\n       sim -> assertEquals(\"Unexpected k1\", k1, sim.getK1(), .001),\n       sim -> assertEquals(\"Unexpected b\", b, sim.getB(), .001));\n\n    final String independenceMeasure = \"Saturated\";\n    final boolean discountOverlaps = false; \n    payload = \"{\\n\" +\n        \"  'replace-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {\\n\" +\n        \"      'class':'org.apache.solr.search.similarities.DFISimilarityFactory',\\n\" +\n        \"      'independenceMeasure':'\" + independenceMeasure + \"',\\n\" +\n        \"      'discountOverlaps':\" + discountOverlaps + \"\\n\" +\n        \"     }\\n\" +\n        \"  }\\n\"+\n        \"}\\n\";\n\n    response = harness.post(\"/schema\", json(payload));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"error\"));\n    fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n\n    assertFieldSimilarity(fieldName, DFISimilarity.class,\n        sim -> assertEquals(\"Unexpected independenceMeasure\", independenceMeasure, sim.getIndependence().toString()),\n        sim -> assertEquals(\"Unexpected discountedOverlaps\", discountOverlaps, sim.getDiscountOverlaps()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testSimilarityParser().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testSimilarityParser().mjava","sourceNew":"  public void testSimilarityParser() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    final float k1 = 2.25f;\n    final float b = 0.33f;\n\n    String fieldTypeName = \"MySimilarityField\";\n    String fieldName = \"similarityTestField\";\n    String payload = \"{\\n\" +\n        \"  'add-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {'class':'org.apache.solr.search.similarities.BM25SimilarityFactory', 'k1':\"+k1+\", 'b':\"+b+\" }\\n\" +\n        \"  },\\n\"+\n        \"  'add-field' : {\\n\" +\n        \"    'name':'\" + fieldName + \"',\\n\" +\n        \"    'type': 'MySimilarityField',\\n\" +\n        \"    'stored':true,\\n\" +\n        \"    'indexed':true\\n\" +\n        \"  }\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema\", json(payload));\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"error\"));\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n    \n    assertFieldSimilarity(fieldName, BM25Similarity.class,\n       sim -> assertEquals(\"Unexpected k1\", k1, sim.getK1(), .001),\n       sim -> assertEquals(\"Unexpected b\", b, sim.getB(), .001));\n\n    final String independenceMeasure = \"Saturated\";\n    final boolean discountOverlaps = false; \n    payload = \"{\\n\" +\n        \"  'replace-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {\\n\" +\n        \"      'class':'org.apache.solr.search.similarities.DFISimilarityFactory',\\n\" +\n        \"      'independenceMeasure':'\" + independenceMeasure + \"',\\n\" +\n        \"      'discountOverlaps':\" + discountOverlaps + \"\\n\" +\n        \"     }\\n\" +\n        \"  }\\n\"+\n        \"}\\n\";\n\n    response = harness.post(\"/schema\", json(payload));\n\n    map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"error\"));\n    fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n\n    assertFieldSimilarity(fieldName, DFISimilarity.class,\n        sim -> assertEquals(\"Unexpected independenceMeasure\", independenceMeasure, sim.getIndependence().toString()),\n        sim -> assertEquals(\"Unexpected discountedOverlaps\", discountOverlaps, sim.getDiscountOverlaps()));\n  }\n\n","sourceOld":"  public void testSimilarityParser() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    final float k1 = 2.25f;\n    final float b = 0.33f;\n\n    String fieldTypeName = \"MySimilarityField\";\n    String fieldName = \"similarityTestField\";\n    String payload = \"{\\n\" +\n        \"  'add-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {'class':'org.apache.solr.search.similarities.BM25SimilarityFactory', 'k1':\"+k1+\", 'b':\"+b+\" }\\n\" +\n        \"  },\\n\"+\n        \"  'add-field' : {\\n\" +\n        \"    'name':'\" + fieldName + \"',\\n\" +\n        \"    'type': 'MySimilarityField',\\n\" +\n        \"    'stored':true,\\n\" +\n        \"    'indexed':true\\n\" +\n        \"  }\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema\", json(payload));\n\n    Map map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"error\"));\n\n    Map fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n    \n    assertFieldSimilarity(fieldName, BM25Similarity.class,\n       sim -> assertEquals(\"Unexpected k1\", k1, sim.getK1(), .001),\n       sim -> assertEquals(\"Unexpected b\", b, sim.getB(), .001));\n\n    final String independenceMeasure = \"Saturated\";\n    final boolean discountOverlaps = false; \n    payload = \"{\\n\" +\n        \"  'replace-field-type' : {\" +\n        \"    'name' : '\" + fieldTypeName + \"',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\\n\" +\n        \"    'similarity' : {\\n\" +\n        \"      'class':'org.apache.solr.search.similarities.DFISimilarityFactory',\\n\" +\n        \"      'independenceMeasure':'\" + independenceMeasure + \"',\\n\" +\n        \"      'discountOverlaps':\" + discountOverlaps + \"\\n\" +\n        \"     }\\n\" +\n        \"  }\\n\"+\n        \"}\\n\";\n\n    response = harness.post(\"/schema\", json(payload));\n\n    map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"error\"));\n    fields = getObj(harness, fieldName, \"fields\");\n    assertNotNull(\"field \" + fieldName + \" not created\", fields);\n\n    assertFieldSimilarity(fieldName, DFISimilarity.class,\n        sim -> assertEquals(\"Unexpected independenceMeasure\", independenceMeasure, sim.getIndependence().toString()),\n        sim -> assertEquals(\"Unexpected discountedOverlaps\", discountOverlaps, sim.getDiscountOverlaps()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a52341299179de5479672f7cf518bf4b173f34b3","03d29de0abdd3a2150c0dabfe1bf98024bbfa367"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["ad771c8c8bc422816c3459d9d0776c2f54a4de80","ac1e7fa558287a811ea07634d815ee7b1c541284"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["da56d90379fbe988bf847d3482efa685803c5193"],"e98520789adb1d5ad05afb4956eca0944a929688":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"03d29de0abdd3a2150c0dabfe1bf98024bbfa367":["a52341299179de5479672f7cf518bf4b173f34b3"],"64396eddf11b3a487fb2668a9be8fa573dd73f89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a52341299179de5479672f7cf518bf4b173f34b3":["64396eddf11b3a487fb2668a9be8fa573dd73f89","ac1e7fa558287a811ea07634d815ee7b1c541284"],"49b9c73648f983a139745761ed2bedf2e3821b34":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"da56d90379fbe988bf847d3482efa685803c5193":["49b9c73648f983a139745761ed2bedf2e3821b34"],"ad771c8c8bc422816c3459d9d0776c2f54a4de80":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["64396eddf11b3a487fb2668a9be8fa573dd73f89"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["49b9c73648f983a139745761ed2bedf2e3821b34"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"03d29de0abdd3a2150c0dabfe1bf98024bbfa367":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a52341299179de5479672f7cf518bf4b173f34b3":["b94236357aaa22b76c10629851fe4e376e0cea82","03d29de0abdd3a2150c0dabfe1bf98024bbfa367"],"64396eddf11b3a487fb2668a9be8fa573dd73f89":["a52341299179de5479672f7cf518bf4b173f34b3","ac1e7fa558287a811ea07634d815ee7b1c541284"],"49b9c73648f983a139745761ed2bedf2e3821b34":["da56d90379fbe988bf847d3482efa685803c5193"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["64396eddf11b3a487fb2668a9be8fa573dd73f89","ad771c8c8bc422816c3459d9d0776c2f54a4de80"],"ad771c8c8bc422816c3459d9d0776c2f54a4de80":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"da56d90379fbe988bf847d3482efa685803c5193":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}