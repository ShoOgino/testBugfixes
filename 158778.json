{"path":"solr/core/src/java/org/apache/solr/schema/IndexSchema#deleteCopyFields(Map[String,Collection[String]]).mjava","commits":[{"id":"eeeea2295d6355a29e259130a5c48ace73022d7c","date":1426569216,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#deleteCopyFields(Map[String,Collection[String]]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Copies this schema and deletes the given copy fields from the copy.\n   * <p>\n   * The schema will not be persisted.\n   * <p>\n   * Requires synchronizing on the object returned by\n   * {@link #getSchemaUpdateLock()}.\n   *\n   * @param copyFields Key is the name of the source field name, value is a collection of target field names. \n   *                   Each corresponding copy field directives must exist.\n   * @return The new Schema with the copy fields deleted\n   */\n  public IndexSchema deleteCopyFields(Map<String, Collection<String>> copyFields) {\n    String msg = \"This IndexSchema is not mutable.\";\n    log.error(msg);\n    throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#deleteCopyFields(Map[String,Collection[String]]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Copies this schema and deletes the given copy fields from the copy.\n   * <p>\n   * The schema will not be persisted.\n   * <p>\n   * Requires synchronizing on the object returned by\n   * {@link #getSchemaUpdateLock()}.\n   *\n   * @param copyFields Key is the name of the source field name, value is a collection of target field names. \n   *                   Each corresponding copy field directives must exist.\n   * @return The new Schema with the copy fields deleted\n   */\n  public IndexSchema deleteCopyFields(Map<String, Collection<String>> copyFields) {\n    String msg = \"This IndexSchema is not mutable.\";\n    log.error(msg);\n    throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2ed9b72e5fa27a7bd4857f222ca815341979d4a","date":1594879524,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#deleteCopyFields(Map[String,Collection[String]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema#deleteCopyFields(Map[String,Collection[String]]).mjava","sourceNew":"  /**\n   * Copies this schema and deletes the given copy fields from the copy.\n   * <p>\n   * The schema will not be persisted.\n   * <p>\n   * Requires synchronizing on the object returned by\n   * {@link #getSchemaUpdateLock()}.\n   *\n   * @param copyFields Key is the name of the source field name, value is a collection of target field names.\n   *                   Each corresponding copy field directives must exist.\n   * @return The new Schema with the copy fields deleted\n   */\n  public IndexSchema deleteCopyFields(Map<String, Collection<String>> copyFields) {\n    String msg = \"This IndexSchema is not mutable.\";\n    log.error(msg);\n    throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n  }\n\n","sourceOld":"  /**\n   * Copies this schema and deletes the given copy fields from the copy.\n   * <p>\n   * The schema will not be persisted.\n   * <p>\n   * Requires synchronizing on the object returned by\n   * {@link #getSchemaUpdateLock()}.\n   *\n   * @param copyFields Key is the name of the source field name, value is a collection of target field names. \n   *                   Each corresponding copy field directives must exist.\n   * @return The new Schema with the copy fields deleted\n   */\n  public IndexSchema deleteCopyFields(Map<String, Collection<String>> copyFields) {\n    String msg = \"This IndexSchema is not mutable.\";\n    log.error(msg);\n    throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eeeea2295d6355a29e259130a5c48ace73022d7c"],"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["eeeea2295d6355a29e259130a5c48ace73022d7c"],"eeeea2295d6355a29e259130a5c48ace73022d7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b2ed9b72e5fa27a7bd4857f222ca815341979d4a"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"eeeea2295d6355a29e259130a5c48ace73022d7c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b2ed9b72e5fa27a7bd4857f222ca815341979d4a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","eeeea2295d6355a29e259130a5c48ace73022d7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}