{"path":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotManager#buildRefCounts(Collection[SnapshotMetaData],List[IndexCommit]).mjava","commits":[{"id":"91e2345fb81b6c1c7faefa550ee5eaafadc54486","date":1469730189,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotManager#buildRefCounts(Collection[SnapshotMetaData],List[IndexCommit]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method computes reference count for the index files by taking into consideration\n   * (a) configured snapshots and (b) files sharing between two or more {@linkplain IndexCommit} instances.\n   *\n   * @param snapshots A collection of user configured snapshots\n   * @param commits A list of {@linkplain IndexCommit} instances\n   * @return A map containing reference count for each index file referred in one of the {@linkplain IndexCommit} instances.\n   * @throws IOException in case of I/O error.\n   */\n  @VisibleForTesting\n  static Map<String, Integer> buildRefCounts (Collection<SnapshotMetaData> snapshots, List<IndexCommit> commits) throws IOException {\n    Map<String, Integer> result = new HashMap<>();\n    Map<Long, IndexCommit> commitsByGen = commits.stream().collect(\n        Collectors.toMap(IndexCommit::getGeneration, Function.identity()));\n\n    for(SnapshotMetaData md : snapshots) {\n      IndexCommit ic = commitsByGen.get(md.getGenerationNumber());\n      if (ic != null) {\n        Collection<String> fileNames = ic.getFileNames();\n        for(String fileName : fileNames) {\n          int refCount = result.getOrDefault(fileName, 0);\n          result.put(fileName, refCount+1);\n        }\n      }\n    }\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotManager#buildRefCounts(Collection[SnapshotMetaData],List[IndexCommit]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method computes reference count for the index files by taking into consideration\n   * (a) configured snapshots and (b) files sharing between two or more {@linkplain IndexCommit} instances.\n   *\n   * @param snapshots A collection of user configured snapshots\n   * @param commits A list of {@linkplain IndexCommit} instances\n   * @return A map containing reference count for each index file referred in one of the {@linkplain IndexCommit} instances.\n   * @throws IOException in case of I/O error.\n   */\n  @VisibleForTesting\n  static Map<String, Integer> buildRefCounts (Collection<SnapshotMetaData> snapshots, List<IndexCommit> commits) throws IOException {\n    Map<String, Integer> result = new HashMap<>();\n    Map<Long, IndexCommit> commitsByGen = commits.stream().collect(\n        Collectors.toMap(IndexCommit::getGeneration, Function.identity()));\n\n    for(SnapshotMetaData md : snapshots) {\n      IndexCommit ic = commitsByGen.get(md.getGenerationNumber());\n      if (ic != null) {\n        Collection<String> fileNames = ic.getFileNames();\n        for(String fileName : fileNames) {\n          int refCount = result.getOrDefault(fileName, 0);\n          result.put(fileName, refCount+1);\n        }\n      }\n    }\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e13696c44d3e2405098726359ab81dab178e7bc","date":1476726926,"type":4,"author":"Hrishikesh Gadre","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotManager#buildRefCounts(Collection[SnapshotMetaData],List[IndexCommit]).mjava","sourceNew":null,"sourceOld":"  /**\n   * This method computes reference count for the index files by taking into consideration\n   * (a) configured snapshots and (b) files sharing between two or more {@linkplain IndexCommit} instances.\n   *\n   * @param snapshots A collection of user configured snapshots\n   * @param commits A list of {@linkplain IndexCommit} instances\n   * @return A map containing reference count for each index file referred in one of the {@linkplain IndexCommit} instances.\n   * @throws IOException in case of I/O error.\n   */\n  @VisibleForTesting\n  static Map<String, Integer> buildRefCounts (Collection<SnapshotMetaData> snapshots, List<IndexCommit> commits) throws IOException {\n    Map<String, Integer> result = new HashMap<>();\n    Map<Long, IndexCommit> commitsByGen = commits.stream().collect(\n        Collectors.toMap(IndexCommit::getGeneration, Function.identity()));\n\n    for(SnapshotMetaData md : snapshots) {\n      IndexCommit ic = commitsByGen.get(md.getGenerationNumber());\n      if (ic != null) {\n        Collection<String> fileNames = ic.getFileNames();\n        for(String fileName : fileNames) {\n          int refCount = result.getOrDefault(fileName, 0);\n          result.put(fileName, refCount+1);\n        }\n      }\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e13696c44d3e2405098726359ab81dab178e7bc":["91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e13696c44d3e2405098726359ab81dab178e7bc"],"91e2345fb81b6c1c7faefa550ee5eaafadc54486":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3e13696c44d3e2405098726359ab81dab178e7bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b013574eedcdbac35dc7e35b0ee616ffc38895d","91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"91e2345fb81b6c1c7faefa550ee5eaafadc54486":["3e13696c44d3e2405098726359ab81dab178e7bc","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}