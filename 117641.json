{"path":"lucene/src/java/org/apache/lucene/index/SegmentInfo#sizeInBytes(boolean).mjava","commits":[{"id":"d5efdc434c21e20adcb20d316e227be9eaf377d2","date":1292842437,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#sizeInBytes(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#sizeInBytes().mjava","sourceNew":"  /** Returns total size in bytes of all of files used by\n   *  this segment. */\n  public long sizeInBytes(boolean includeDocStores) throws IOException {\n    if (sizeInBytes == -1) {\n      List<String> files = files();\n      final int size = files.size();\n      sizeInBytes = 0;\n      for(int i=0;i<size;i++) {\n        final String fileName = files.get(i);\n        if (!includeDocStores && IndexFileNames.isDocStoreFile(fileName)) {\n          continue;\n        }\n        // We don't count bytes used by a shared doc store\n        // against this segment:\n        if (docStoreOffset == -1 || !IndexFileNames.isDocStoreFile(fileName))\n          sizeInBytes += dir.fileLength(fileName);\n      }\n    }\n    return sizeInBytes;\n  }\n\n","sourceOld":"  /** Returns total size in bytes of all of files used by\n   *  this segment. */\n  public long sizeInBytes() throws IOException {\n    if (sizeInBytes == -1) {\n      List<String> files = files();\n      final int size = files.size();\n      sizeInBytes = 0;\n      for(int i=0;i<size;i++) {\n        final String fileName = files.get(i);\n        // We don't count bytes used by a shared doc store\n        // against this segment:\n        if (docStoreOffset == -1 || !IndexFileNames.isDocStoreFile(fileName))\n          sizeInBytes += dir.fileLength(fileName);\n      }\n    }\n    return sizeInBytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#sizeInBytes(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns total size in bytes of all of files used by\n   *  this segment. */\n  public long sizeInBytes(boolean includeDocStores) throws IOException {\n    if (sizeInBytes == -1) {\n      List<String> files = files();\n      final int size = files.size();\n      sizeInBytes = 0;\n      for(int i=0;i<size;i++) {\n        final String fileName = files.get(i);\n        if (!includeDocStores && IndexFileNames.isDocStoreFile(fileName)) {\n          continue;\n        }\n        // We don't count bytes used by a shared doc store\n        // against this segment:\n        if (docStoreOffset == -1 || !IndexFileNames.isDocStoreFile(fileName))\n          sizeInBytes += dir.fileLength(fileName);\n      }\n    }\n    return sizeInBytes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#sizeInBytes(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns total size in bytes of all of files used by\n   *  this segment. */\n  public long sizeInBytes(boolean includeDocStores) throws IOException {\n    if (sizeInBytes == -1) {\n      List<String> files = files();\n      final int size = files.size();\n      sizeInBytes = 0;\n      for(int i=0;i<size;i++) {\n        final String fileName = files.get(i);\n        if (!includeDocStores && IndexFileNames.isDocStoreFile(fileName)) {\n          continue;\n        }\n        // We don't count bytes used by a shared doc store\n        // against this segment:\n        if (docStoreOffset == -1 || !IndexFileNames.isDocStoreFile(fileName))\n          sizeInBytes += dir.fileLength(fileName);\n      }\n    }\n    return sizeInBytes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ca8e3e7b05d7108f423be06781dbb3ad85e6b04","date":1294842573,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#sizeInBytes(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#sizeInBytes(boolean).mjava","sourceNew":"  /**\n   * Returns total size in bytes of all of files used by this segment (if\n   * {@code includeDocStores} is true), or the size of all files except the\n   * store files otherwise.\n   */\n  public long sizeInBytes(boolean includeDocStores) throws IOException {\n    if (includeDocStores) {\n      if (sizeInBytesWithStore != -1) return sizeInBytesWithStore;\n      sizeInBytesWithStore = 0;\n      for (final String fileName : files()) {\n        // We don't count bytes used by a shared doc store against this segment\n        if (docStoreOffset == -1 || !IndexFileNames.isDocStoreFile(fileName)) {\n          sizeInBytesWithStore += dir.fileLength(fileName);\n        }\n      }\n      return sizeInBytesWithStore;\n    } else {\n      if (sizeInBytesNoStore != -1) return sizeInBytesNoStore;\n      sizeInBytesNoStore = 0;\n      for (final String fileName : files()) {\n        if (IndexFileNames.isDocStoreFile(fileName)) {\n          continue;\n        }\n        sizeInBytesNoStore += dir.fileLength(fileName);\n      }\n      return sizeInBytesNoStore;\n    }\n  }\n\n","sourceOld":"  /** Returns total size in bytes of all of files used by\n   *  this segment. */\n  public long sizeInBytes(boolean includeDocStores) throws IOException {\n    if (sizeInBytes == -1) {\n      List<String> files = files();\n      final int size = files.size();\n      sizeInBytes = 0;\n      for(int i=0;i<size;i++) {\n        final String fileName = files.get(i);\n        if (!includeDocStores && IndexFileNames.isDocStoreFile(fileName)) {\n          continue;\n        }\n        // We don't count bytes used by a shared doc store\n        // against this segment:\n        if (docStoreOffset == -1 || !IndexFileNames.isDocStoreFile(fileName))\n          sizeInBytes += dir.fileLength(fileName);\n      }\n    }\n    return sizeInBytes;\n  }\n\n","bugFix":["4e1ce9be74263e9659aad8a6ee1f213193710b71","b1405362241b561f5590ff4a87d5d6e173bcd9cf","fa27b750ee9a51ec4bed93ef328aef9ca1e2153d","d5efdc434c21e20adcb20d316e227be9eaf377d2","672a1642d19f38e089cd4c171d2fd7a233833d00"],"bugIntro":["660be90ac3e6be139532015fd7a2bfd2d4037f18"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#sizeInBytes(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#sizeInBytes(boolean).mjava","sourceNew":"  /**\n   * Returns total size in bytes of all of files used by this segment (if\n   * {@code includeDocStores} is true), or the size of all files except the\n   * store files otherwise.\n   */\n  public long sizeInBytes(boolean includeDocStores) throws IOException {\n    if (includeDocStores) {\n      if (sizeInBytesWithStore != -1) return sizeInBytesWithStore;\n      sizeInBytesWithStore = 0;\n      for (final String fileName : files()) {\n        // We don't count bytes used by a shared doc store against this segment\n        if (docStoreOffset == -1 || !IndexFileNames.isDocStoreFile(fileName)) {\n          sizeInBytesWithStore += dir.fileLength(fileName);\n        }\n      }\n      return sizeInBytesWithStore;\n    } else {\n      if (sizeInBytesNoStore != -1) return sizeInBytesNoStore;\n      sizeInBytesNoStore = 0;\n      for (final String fileName : files()) {\n        if (IndexFileNames.isDocStoreFile(fileName)) {\n          continue;\n        }\n        sizeInBytesNoStore += dir.fileLength(fileName);\n      }\n      return sizeInBytesNoStore;\n    }\n  }\n\n","sourceOld":"  /** Returns total size in bytes of all of files used by\n   *  this segment. */\n  public long sizeInBytes(boolean includeDocStores) throws IOException {\n    if (sizeInBytes == -1) {\n      List<String> files = files();\n      final int size = files.size();\n      sizeInBytes = 0;\n      for(int i=0;i<size;i++) {\n        final String fileName = files.get(i);\n        if (!includeDocStores && IndexFileNames.isDocStoreFile(fileName)) {\n          continue;\n        }\n        // We don't count bytes used by a shared doc store\n        // against this segment:\n        if (docStoreOffset == -1 || !IndexFileNames.isDocStoreFile(fileName))\n          sizeInBytes += dir.fileLength(fileName);\n      }\n    }\n    return sizeInBytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"660be90ac3e6be139532015fd7a2bfd2d4037f18","date":1296318179,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#sizeInBytes(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#sizeInBytes(boolean).mjava","sourceNew":"  /**\n   * Returns total size in bytes of all of files used by this segment (if\n   * {@code includeDocStores} is true), or the size of all files except the\n   * store files otherwise.\n   */\n  public long sizeInBytes(boolean includeDocStores) throws IOException {\n    if (includeDocStores) {\n      if (sizeInBytesWithStore != -1) {\n        return sizeInBytesWithStore;\n      }\n      long sum = 0;\n      for (final String fileName : files()) {\n        // We don't count bytes used by a shared doc store\n        // against this segment\n        if (docStoreOffset == -1 || !IndexFileNames.isDocStoreFile(fileName)) {\n          sum += dir.fileLength(fileName);\n        }\n      }\n      sizeInBytesWithStore = sum;\n      return sizeInBytesWithStore;\n    } else {\n      if (sizeInBytesNoStore != -1) {\n        return sizeInBytesNoStore;\n      }\n      long sum = 0;\n      for (final String fileName : files()) {\n        if (IndexFileNames.isDocStoreFile(fileName)) {\n          continue;\n        }\n        sum += dir.fileLength(fileName);\n      }\n      sizeInBytesNoStore = sum;\n      return sizeInBytesNoStore;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns total size in bytes of all of files used by this segment (if\n   * {@code includeDocStores} is true), or the size of all files except the\n   * store files otherwise.\n   */\n  public long sizeInBytes(boolean includeDocStores) throws IOException {\n    if (includeDocStores) {\n      if (sizeInBytesWithStore != -1) return sizeInBytesWithStore;\n      sizeInBytesWithStore = 0;\n      for (final String fileName : files()) {\n        // We don't count bytes used by a shared doc store against this segment\n        if (docStoreOffset == -1 || !IndexFileNames.isDocStoreFile(fileName)) {\n          sizeInBytesWithStore += dir.fileLength(fileName);\n        }\n      }\n      return sizeInBytesWithStore;\n    } else {\n      if (sizeInBytesNoStore != -1) return sizeInBytesNoStore;\n      sizeInBytesNoStore = 0;\n      for (final String fileName : files()) {\n        if (IndexFileNames.isDocStoreFile(fileName)) {\n          continue;\n        }\n        sizeInBytesNoStore += dir.fileLength(fileName);\n      }\n      return sizeInBytesNoStore;\n    }\n  }\n\n","bugFix":["9ca8e3e7b05d7108f423be06781dbb3ad85e6b04"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#sizeInBytes(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#sizeInBytes(boolean).mjava","sourceNew":"  /**\n   * Returns total size in bytes of all of files used by this segment (if\n   * {@code includeDocStores} is true), or the size of all files except the\n   * store files otherwise.\n   */\n  public long sizeInBytes(boolean includeDocStores) throws IOException {\n    if (includeDocStores) {\n      if (sizeInBytesWithStore != -1) {\n        return sizeInBytesWithStore;\n      }\n      long sum = 0;\n      for (final String fileName : files()) {\n        // We don't count bytes used by a shared doc store\n        // against this segment\n        if (docStoreOffset == -1 || !IndexFileNames.isDocStoreFile(fileName)) {\n          sum += dir.fileLength(fileName);\n        }\n      }\n      sizeInBytesWithStore = sum;\n      return sizeInBytesWithStore;\n    } else {\n      if (sizeInBytesNoStore != -1) {\n        return sizeInBytesNoStore;\n      }\n      long sum = 0;\n      for (final String fileName : files()) {\n        if (IndexFileNames.isDocStoreFile(fileName)) {\n          continue;\n        }\n        sum += dir.fileLength(fileName);\n      }\n      sizeInBytesNoStore = sum;\n      return sizeInBytesNoStore;\n    }\n  }\n\n","sourceOld":"  /** Returns total size in bytes of all of files used by\n   *  this segment. */\n  public long sizeInBytes(boolean includeDocStores) throws IOException {\n    if (sizeInBytes == -1) {\n      List<String> files = files();\n      final int size = files.size();\n      sizeInBytes = 0;\n      for(int i=0;i<size;i++) {\n        final String fileName = files.get(i);\n        if (!includeDocStores && IndexFileNames.isDocStoreFile(fileName)) {\n          continue;\n        }\n        // We don't count bytes used by a shared doc store\n        // against this segment:\n        if (docStoreOffset == -1 || !IndexFileNames.isDocStoreFile(fileName))\n          sizeInBytes += dir.fileLength(fileName);\n      }\n    }\n    return sizeInBytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#sizeInBytes(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#sizeInBytes(boolean).mjava","sourceNew":"  /**\n   * Returns total size in bytes of all of files used by this segment (if\n   * {@code includeDocStores} is true), or the size of all files except the\n   * store files otherwise.\n   */\n  public long sizeInBytes(boolean includeDocStores) throws IOException {\n    if (includeDocStores) {\n      if (sizeInBytesWithStore != -1) {\n        return sizeInBytesWithStore;\n      }\n      long sum = 0;\n      for (final String fileName : files()) {\n        // We don't count bytes used by a shared doc store\n        // against this segment\n        if (docStoreOffset == -1 || !IndexFileNames.isDocStoreFile(fileName)) {\n          sum += dir.fileLength(fileName);\n        }\n      }\n      sizeInBytesWithStore = sum;\n      return sizeInBytesWithStore;\n    } else {\n      if (sizeInBytesNoStore != -1) {\n        return sizeInBytesNoStore;\n      }\n      long sum = 0;\n      for (final String fileName : files()) {\n        if (IndexFileNames.isDocStoreFile(fileName)) {\n          continue;\n        }\n        sum += dir.fileLength(fileName);\n      }\n      sizeInBytesNoStore = sum;\n      return sizeInBytesNoStore;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns total size in bytes of all of files used by this segment (if\n   * {@code includeDocStores} is true), or the size of all files except the\n   * store files otherwise.\n   */\n  public long sizeInBytes(boolean includeDocStores) throws IOException {\n    if (includeDocStores) {\n      if (sizeInBytesWithStore != -1) return sizeInBytesWithStore;\n      sizeInBytesWithStore = 0;\n      for (final String fileName : files()) {\n        // We don't count bytes used by a shared doc store against this segment\n        if (docStoreOffset == -1 || !IndexFileNames.isDocStoreFile(fileName)) {\n          sizeInBytesWithStore += dir.fileLength(fileName);\n        }\n      }\n      return sizeInBytesWithStore;\n    } else {\n      if (sizeInBytesNoStore != -1) return sizeInBytesNoStore;\n      sizeInBytesNoStore = 0;\n      for (final String fileName : files()) {\n        if (IndexFileNames.isDocStoreFile(fileName)) {\n          continue;\n        }\n        sizeInBytesNoStore += dir.fileLength(fileName);\n      }\n      return sizeInBytesNoStore;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#sizeInBytes(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#sizeInBytes(boolean).mjava","sourceNew":"  /**\n   * Returns total size in bytes of all of files used by this segment (if\n   * {@code includeDocStores} is true), or the size of all files except the\n   * store files otherwise.\n   */\n  public long sizeInBytes(boolean includeDocStores) throws IOException {\n    // TODO: based on how this is used, can't we just forget about all this docstore crap?\n    // its really an abstraction violation into the codec\n    if (includeDocStores) {\n      if (sizeInBytesWithStore != -1) {\n        return sizeInBytesWithStore;\n      }\n      long sum = 0;\n      for (final String fileName : files()) {\n        // We don't count bytes used by a shared doc store\n        // against this segment\n        if (docStoreOffset == -1 || !isDocStoreFile(fileName)) {\n          sum += dir.fileLength(fileName);\n        }\n      }\n      sizeInBytesWithStore = sum;\n      return sizeInBytesWithStore;\n    } else {\n      if (sizeInBytesNoStore != -1) {\n        return sizeInBytesNoStore;\n      }\n      long sum = 0;\n      for (final String fileName : files()) {\n        if (isDocStoreFile(fileName)) {\n          continue;\n        }\n        sum += dir.fileLength(fileName);\n      }\n      sizeInBytesNoStore = sum;\n      return sizeInBytesNoStore;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns total size in bytes of all of files used by this segment (if\n   * {@code includeDocStores} is true), or the size of all files except the\n   * store files otherwise.\n   */\n  public long sizeInBytes(boolean includeDocStores) throws IOException {\n    if (includeDocStores) {\n      if (sizeInBytesWithStore != -1) {\n        return sizeInBytesWithStore;\n      }\n      long sum = 0;\n      for (final String fileName : files()) {\n        // We don't count bytes used by a shared doc store\n        // against this segment\n        if (docStoreOffset == -1 || !IndexFileNames.isDocStoreFile(fileName)) {\n          sum += dir.fileLength(fileName);\n        }\n      }\n      sizeInBytesWithStore = sum;\n      return sizeInBytesWithStore;\n    } else {\n      if (sizeInBytesNoStore != -1) {\n        return sizeInBytesNoStore;\n      }\n      long sum = 0;\n      for (final String fileName : files()) {\n        if (IndexFileNames.isDocStoreFile(fileName)) {\n          continue;\n        }\n        sum += dir.fileLength(fileName);\n      }\n      sizeInBytesNoStore = sum;\n      return sizeInBytesNoStore;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#sizeInBytes(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#sizeInBytes(boolean).mjava","sourceNew":"  /**\n   * Returns total size in bytes of all of files used by this segment (if\n   * {@code includeDocStores} is true), or the size of all files except the\n   * store files otherwise.\n   * <p>\n   * NOTE: includeDocStores=false should only be used for debugging.\n   * Theoretically a codec could combine its files however it wants (after-\n   * the-fact or something), and this calculation is not particularly\n   * efficient.\n   */\n  long sizeInBytes(boolean includeDocStores) throws IOException {\n    // TODO: based on how this is used, can't we just forget about all this docstore crap?\n    // its really an abstraction violation into the codec\n    if (includeDocStores) {\n      if (sizeInBytesWithStore != -1) {\n        return sizeInBytesWithStore;\n      }\n      long sum = 0;\n      for (final String fileName : files()) {\n        // We don't count bytes used by a shared doc store\n        // against this segment\n        if (docStoreOffset == -1 || !isDocStoreFile(fileName)) {\n          sum += dir.fileLength(fileName);\n        }\n      }\n      sizeInBytesWithStore = sum;\n      return sizeInBytesWithStore;\n    } else {\n      if (sizeInBytesNoStore != -1) {\n        return sizeInBytesNoStore;\n      }\n      long sum = 0;\n      for (final String fileName : files()) {\n        if (isDocStoreFile(fileName)) {\n          continue;\n        }\n        sum += dir.fileLength(fileName);\n      }\n      sizeInBytesNoStore = sum;\n      return sizeInBytesNoStore;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns total size in bytes of all of files used by this segment (if\n   * {@code includeDocStores} is true), or the size of all files except the\n   * store files otherwise.\n   */\n  public long sizeInBytes(boolean includeDocStores) throws IOException {\n    // TODO: based on how this is used, can't we just forget about all this docstore crap?\n    // its really an abstraction violation into the codec\n    if (includeDocStores) {\n      if (sizeInBytesWithStore != -1) {\n        return sizeInBytesWithStore;\n      }\n      long sum = 0;\n      for (final String fileName : files()) {\n        // We don't count bytes used by a shared doc store\n        // against this segment\n        if (docStoreOffset == -1 || !isDocStoreFile(fileName)) {\n          sum += dir.fileLength(fileName);\n        }\n      }\n      sizeInBytesWithStore = sum;\n      return sizeInBytesWithStore;\n    } else {\n      if (sizeInBytesNoStore != -1) {\n        return sizeInBytesNoStore;\n      }\n      long sum = 0;\n      for (final String fileName : files()) {\n        if (isDocStoreFile(fileName)) {\n          continue;\n        }\n        sum += dir.fileLength(fileName);\n      }\n      sizeInBytesNoStore = sum;\n      return sizeInBytesNoStore;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"853713e230bedc03301dd29e00764247dd5e3e02","date":1327927949,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#sizeInBytes(boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns total size in bytes of all of files used by this segment (if\n   * {@code includeDocStores} is true), or the size of all files except the\n   * store files otherwise.\n   * <p>\n   * NOTE: includeDocStores=false should only be used for debugging.\n   * Theoretically a codec could combine its files however it wants (after-\n   * the-fact or something), and this calculation is not particularly\n   * efficient.\n   */\n  long sizeInBytes(boolean includeDocStores) throws IOException {\n    // TODO: based on how this is used, can't we just forget about all this docstore crap?\n    // its really an abstraction violation into the codec\n    if (includeDocStores) {\n      if (sizeInBytesWithStore != -1) {\n        return sizeInBytesWithStore;\n      }\n      long sum = 0;\n      for (final String fileName : files()) {\n        // We don't count bytes used by a shared doc store\n        // against this segment\n        if (docStoreOffset == -1 || !isDocStoreFile(fileName)) {\n          sum += dir.fileLength(fileName);\n        }\n      }\n      sizeInBytesWithStore = sum;\n      return sizeInBytesWithStore;\n    } else {\n      if (sizeInBytesNoStore != -1) {\n        return sizeInBytesNoStore;\n      }\n      long sum = 0;\n      for (final String fileName : files()) {\n        if (isDocStoreFile(fileName)) {\n          continue;\n        }\n        sum += dir.fileLength(fileName);\n      }\n      sizeInBytesNoStore = sum;\n      return sizeInBytesNoStore;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"296df632fd63421ea20756fa11ad36fbc6f4c8a9","date":1327957998,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#sizeInBytes(boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns total size in bytes of all of files used by this segment (if\n   * {@code includeDocStores} is true), or the size of all files except the\n   * store files otherwise.\n   * <p>\n   * NOTE: includeDocStores=false should only be used for debugging.\n   * Theoretically a codec could combine its files however it wants (after-\n   * the-fact or something), and this calculation is not particularly\n   * efficient.\n   */\n  long sizeInBytes(boolean includeDocStores) throws IOException {\n    // TODO: based on how this is used, can't we just forget about all this docstore crap?\n    // its really an abstraction violation into the codec\n    if (includeDocStores) {\n      if (sizeInBytesWithStore != -1) {\n        return sizeInBytesWithStore;\n      }\n      long sum = 0;\n      for (final String fileName : files()) {\n        // We don't count bytes used by a shared doc store\n        // against this segment\n        if (docStoreOffset == -1 || !isDocStoreFile(fileName)) {\n          sum += dir.fileLength(fileName);\n        }\n      }\n      sizeInBytesWithStore = sum;\n      return sizeInBytesWithStore;\n    } else {\n      if (sizeInBytesNoStore != -1) {\n        return sizeInBytesNoStore;\n      }\n      long sum = 0;\n      for (final String fileName : files()) {\n        if (isDocStoreFile(fileName)) {\n          continue;\n        }\n        sum += dir.fileLength(fileName);\n      }\n      sizeInBytesNoStore = sum;\n      return sizeInBytesNoStore;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"410e066f093e407222d9681429d209084e783149","date":1327958394,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#sizeInBytes(boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns total size in bytes of all of files used by this segment (if\n   * {@code includeDocStores} is true), or the size of all files except the\n   * store files otherwise.\n   * <p>\n   * NOTE: includeDocStores=false should only be used for debugging.\n   * Theoretically a codec could combine its files however it wants (after-\n   * the-fact or something), and this calculation is not particularly\n   * efficient.\n   */\n  long sizeInBytes(boolean includeDocStores) throws IOException {\n    // TODO: based on how this is used, can't we just forget about all this docstore crap?\n    // its really an abstraction violation into the codec\n    if (includeDocStores) {\n      if (sizeInBytesWithStore != -1) {\n        return sizeInBytesWithStore;\n      }\n      long sum = 0;\n      for (final String fileName : files()) {\n        // We don't count bytes used by a shared doc store\n        // against this segment\n        if (docStoreOffset == -1 || !isDocStoreFile(fileName)) {\n          sum += dir.fileLength(fileName);\n        }\n      }\n      sizeInBytesWithStore = sum;\n      return sizeInBytesWithStore;\n    } else {\n      if (sizeInBytesNoStore != -1) {\n        return sizeInBytesNoStore;\n      }\n      long sum = 0;\n      for (final String fileName : files()) {\n        if (isDocStoreFile(fileName)) {\n          continue;\n        }\n        sum += dir.fileLength(fileName);\n      }\n      sizeInBytesNoStore = sum;\n      return sizeInBytesNoStore;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d5efdc434c21e20adcb20d316e227be9eaf377d2"],"410e066f093e407222d9681429d209084e783149":["3cc749c053615f5871f3b95715fe292f34e70a53","296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"06584e6e98d592b34e1329b384182f368d2025e8":["660be90ac3e6be139532015fd7a2bfd2d4037f18"],"9ca8e3e7b05d7108f423be06781dbb3ad85e6b04":["d5efdc434c21e20adcb20d316e227be9eaf377d2"],"3cc749c053615f5871f3b95715fe292f34e70a53":["06584e6e98d592b34e1329b384182f368d2025e8"],"d5efdc434c21e20adcb20d316e227be9eaf377d2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d5efdc434c21e20adcb20d316e227be9eaf377d2"],"296df632fd63421ea20756fa11ad36fbc6f4c8a9":["3cc749c053615f5871f3b95715fe292f34e70a53","853713e230bedc03301dd29e00764247dd5e3e02"],"853713e230bedc03301dd29e00764247dd5e3e02":["3cc749c053615f5871f3b95715fe292f34e70a53"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","660be90ac3e6be139532015fd7a2bfd2d4037f18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"660be90ac3e6be139532015fd7a2bfd2d4037f18":["9ca8e3e7b05d7108f423be06781dbb3ad85e6b04"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","9ca8e3e7b05d7108f423be06781dbb3ad85e6b04"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","660be90ac3e6be139532015fd7a2bfd2d4037f18"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["296df632fd63421ea20756fa11ad36fbc6f4c8a9"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"410e066f093e407222d9681429d209084e783149":[],"06584e6e98d592b34e1329b384182f368d2025e8":["3cc749c053615f5871f3b95715fe292f34e70a53"],"9ca8e3e7b05d7108f423be06781dbb3ad85e6b04":["660be90ac3e6be139532015fd7a2bfd2d4037f18","868da859b43505d9d2a023bfeae6dd0c795f5295"],"3cc749c053615f5871f3b95715fe292f34e70a53":["410e066f093e407222d9681429d209084e783149","296df632fd63421ea20756fa11ad36fbc6f4c8a9","853713e230bedc03301dd29e00764247dd5e3e02"],"d5efdc434c21e20adcb20d316e227be9eaf377d2":["70ad682703b8585f5d0a637efec044d57ec05efb","9ca8e3e7b05d7108f423be06781dbb3ad85e6b04","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"296df632fd63421ea20756fa11ad36fbc6f4c8a9":["410e066f093e407222d9681429d209084e783149","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"853713e230bedc03301dd29e00764247dd5e3e02":["296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","d5efdc434c21e20adcb20d316e227be9eaf377d2","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"660be90ac3e6be139532015fd7a2bfd2d4037f18":["06584e6e98d592b34e1329b384182f368d2025e8","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["410e066f093e407222d9681429d209084e783149","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}