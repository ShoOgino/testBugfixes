{"path":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScores().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScores().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScores().mjava","sourceNew":"  public void testEqualScores() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexReader reader = IndexReader.open(small, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    ScoreDoc[] result;\n\n    // some hits match more terms then others, score should be the same\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T), null, 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE), null, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n  }\n\n","sourceOld":"  public void testEqualScores() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexReader reader = IndexReader.open(small, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    ScoreDoc[] result;\n\n    // some hits match more terms then others, score should be the same\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T), null, 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE), null, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScores().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScores().mjava","sourceNew":"  public void testEqualScores() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = new IndexSearcher(reader);\n\n    ScoreDoc[] result;\n\n    // some hits match more terms then others, score should be the same\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T), null, 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE), null, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n  }\n\n","sourceOld":"  public void testEqualScores() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexReader reader = IndexReader.open(small, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    ScoreDoc[] result;\n\n    // some hits match more terms then others, score should be the same\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T), null, 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE), null, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScores().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScores().mjava","sourceNew":"  public void testEqualScores() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = new IndexSearcher(reader);\n\n    ScoreDoc[] result;\n\n    // some hits match more terms then others, score should be the same\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T), null, 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE), null, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n  }\n\n","sourceOld":"  public void testEqualScores() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexReader reader = IndexReader.open(small, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    ScoreDoc[] result;\n\n    // some hits match more terms then others, score should be the same\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T), null, 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE), null, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"150488c1317972164a9a824be05b1ba2ba0fc68c","date":1284316090,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScores().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScores().mjava","sourceNew":"  @Test\n  public void testEqualScores() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = new IndexSearcher(reader);\n\n    ScoreDoc[] result;\n\n    // some hits match more terms then others, score should be the same\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T), null, 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE), null, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n  }\n\n","sourceOld":"  public void testEqualScores() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = new IndexSearcher(reader);\n\n    ScoreDoc[] result;\n\n    // some hits match more terms then others, score should be the same\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T), null, 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE), null, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScores().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScores().mjava","sourceNew":"  @Test\n  public void testEqualScores() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = new IndexSearcher(reader);\n\n    ScoreDoc[] result;\n\n    // some hits match more terms then others, score should be the same\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T), null, 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE), null, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n  }\n\n","sourceOld":"  public void testEqualScores() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = new IndexSearcher(reader);\n\n    ScoreDoc[] result;\n\n    // some hits match more terms then others, score should be the same\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T), null, 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE), null, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScores().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScores().mjava","sourceNew":"  @Test\n  public void testEqualScores() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    ScoreDoc[] result;\n\n    // some hits match more terms then others, score should be the same\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T), null, 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE), null, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n    search.close();\n  }\n\n","sourceOld":"  @Test\n  public void testEqualScores() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = new IndexSearcher(reader);\n\n    ScoreDoc[] result;\n\n    // some hits match more terms then others, score should be the same\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T), null, 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE), null, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScores().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScores().mjava","sourceNew":"  @Test\n  public void testEqualScores() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    ScoreDoc[] result;\n\n    // some hits match more terms then others, score should be the same\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T), null, 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE), null, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n    search.close();\n  }\n\n","sourceOld":"  @Test\n  public void testEqualScores() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = new IndexSearcher(reader);\n\n    ScoreDoc[] result;\n\n    // some hits match more terms then others, score should be the same\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T), null, 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE), null, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScores().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScores().mjava","sourceNew":"  @Test\n  public void testEqualScores() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    ScoreDoc[] result;\n\n    // some hits match more terms then others, score should be the same\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T), null, 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE), null, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n    search.close();\n  }\n\n","sourceOld":"  @Test\n  public void testEqualScores() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = new IndexSearcher(reader);\n\n    ScoreDoc[] result;\n\n    // some hits match more terms then others, score should be the same\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T), null, 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE), null, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58f6129aa3cc4d7092fe2dacee662b263fb66e94","date":1315473880,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScores().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScores().mjava","sourceNew":"  @Test\n  public void testEqualScores() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    ScoreDoc[] result;\n\n    // some hits match more terms then others, score should be the same\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T), null, 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE), null, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n    search.close();\n  }\n\n","sourceOld":"  @Test\n  public void testEqualScores() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    ScoreDoc[] result;\n\n    // some hits match more terms then others, score should be the same\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T), null, 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE), null, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score);\n    }\n\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScores().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScores().mjava","sourceNew":"  @Test\n  public void testEqualScores() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    ScoreDoc[] result;\n\n    // some hits match more terms then others, score should be the same\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T), null, 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE), null, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testEqualScores() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    ScoreDoc[] result;\n\n    // some hits match more terms then others, score should be the same\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T), null, 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE), null, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScores().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScores().mjava","sourceNew":"  @Test\n  public void testEqualScores() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    ScoreDoc[] result;\n\n    // some hits match more terms then others, score should be the same\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T), null, 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE), null, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testEqualScores() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    ScoreDoc[] result;\n\n    // some hits match more terms then others, score should be the same\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T), null, 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE), null, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScores().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testEqualScores().mjava","sourceNew":"  @Test\n  public void testEqualScores() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    ScoreDoc[] result;\n\n    // some hits match more terms then others, score should be the same\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T), null, 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE), null, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testEqualScores() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    ScoreDoc[] result;\n\n    // some hits match more terms then others, score should be the same\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T), null, 1000).scoreDocs;\n    int numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    float score = result[0].score;\n    for (int i = 1; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n    result = search.search(csrq(\"data\", \"1\", \"6\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE), null, 1000).scoreDocs;\n    numHits = result.length;\n    assertEquals(\"wrong number of results\", 6, numHits);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"score for \" + i + \" was not the same\", score,\n          result[i].score, SCORE_COMP_THRESH);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58f6129aa3cc4d7092fe2dacee662b263fb66e94":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["58f6129aa3cc4d7092fe2dacee662b263fb66e94","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","c084e47df29de3330311d69dabf515ceaa989512"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","150488c1317972164a9a824be05b1ba2ba0fc68c"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["150488c1317972164a9a824be05b1ba2ba0fc68c"],"c084e47df29de3330311d69dabf515ceaa989512":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["58f6129aa3cc4d7092fe2dacee662b263fb66e94"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["150488c1317972164a9a824be05b1ba2ba0fc68c","790e1fde4caa765b3faaad3fbcd25c6973450336"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"150488c1317972164a9a824be05b1ba2ba0fc68c":["c084e47df29de3330311d69dabf515ceaa989512"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"58f6129aa3cc4d7092fe2dacee662b263fb66e94":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["58f6129aa3cc4d7092fe2dacee662b263fb66e94","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c084e47df29de3330311d69dabf515ceaa989512":["5f4e87790277826a2aea119328600dfb07761f32","150488c1317972164a9a824be05b1ba2ba0fc68c"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"150488c1317972164a9a824be05b1ba2ba0fc68c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336","29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5f4e87790277826a2aea119328600dfb07761f32","c084e47df29de3330311d69dabf515ceaa989512"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}