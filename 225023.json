{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testEventQueue().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testEventQueue().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n\n    String overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    String newNode = cluster.simAddNode();\n    boolean await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer\n    cluster.simRestartOverseer(overseerLeader);\n    cluster.getTimeSource().sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"836215bbe10be1da931a32a7fe6fd0b964a8952d","date":1524168852,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testEventQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testEventQueue().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 16-Apr-2018\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n\n    String overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    String newNode = cluster.simAddNode();\n    boolean await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer\n    cluster.simRestartOverseer(overseerLeader);\n    cluster.getTimeSource().sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n\n    String overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    String newNode = cluster.simAddNode();\n    boolean await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer\n    cluster.simRestartOverseer(overseerLeader);\n    cluster.getTimeSource().sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d8ec787a60b490e9ef74aec8f1c53508f7cc304","date":1524209433,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testEventQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testEventQueue().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 16-Apr-2018\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n\n    String overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    String newNode = cluster.simAddNode();\n    boolean await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer\n    cluster.simRestartOverseer(overseerLeader);\n    cluster.getTimeSource().sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n\n    String overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    String newNode = cluster.simAddNode();\n    boolean await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer\n    cluster.simRestartOverseer(overseerLeader);\n    cluster.getTimeSource().sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testEventQueue().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 16-Apr-2018\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n\n    String overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    String newNode = cluster.simAddNode();\n    boolean await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer\n    cluster.simRestartOverseer(overseerLeader);\n    cluster.getTimeSource().sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 16-Apr-2018\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n\n    String overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    String newNode = cluster.simAddNode();\n    boolean await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer\n    cluster.simRestartOverseer(overseerLeader);\n    cluster.getTimeSource().sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["8d8ec787a60b490e9ef74aec8f1c53508f7cc304"],"8d8ec787a60b490e9ef74aec8f1c53508f7cc304":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","836215bbe10be1da931a32a7fe6fd0b964a8952d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"836215bbe10be1da931a32a7fe6fd0b964a8952d":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6a5c1c40529f15b445e6720dfde1967e139bff1"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8d8ec787a60b490e9ef74aec8f1c53508f7cc304":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"836215bbe10be1da931a32a7fe6fd0b964a8952d":["8d8ec787a60b490e9ef74aec8f1c53508f7cc304"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["8d8ec787a60b490e9ef74aec8f1c53508f7cc304","836215bbe10be1da931a32a7fe6fd0b964a8952d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}