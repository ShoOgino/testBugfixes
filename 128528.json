{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/AssignTest#testAssignNode().mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/AssignTest#testAssignNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","sourceNew":"  @Test\n  public void testAssignNode() throws Exception {\n    assumeWorkingMockito();\n    \n    SolrZkClient zkClient = mock(SolrZkClient.class);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(zkClient.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n        return null;\n      }\n    );\n    when(zkClient.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    // TODO: fix this to be independent of ZK\n    ZkDistribStateManager stateManager = new ZkDistribStateManager(zkClient);\n    String nodeName = Assign.assignCoreNodeName(stateManager, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignCoreNodeName(stateManager, new DocCollection(\"collection2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignCoreNodeName(stateManager, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","sourceOld":"  @Test\n  public void testAssignNode() throws Exception {\n    assumeWorkingMockito();\n    \n    SolrZkClient zkClient = mock(SolrZkClient.class);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(zkClient.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n        return null;\n      }\n    );\n    when(zkClient.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    // TODO: fix this to be independent of ZK\n    ZkDistribStateManager stateManager = new ZkDistribStateManager(zkClient);\n    String nodeName = Assign.assignCoreNodeName(stateManager, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignCoreNodeName(stateManager, new DocCollection(\"collection2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignCoreNodeName(stateManager, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/AssignTest#testAssignNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testAssignNode().mjava","sourceNew":"  @Test\n  public void testAssignNode() throws Exception {\n    assumeWorkingMockito();\n    \n    SolrZkClient zkClient = mock(SolrZkClient.class);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(zkClient.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n        return null;\n      }\n    );\n    when(zkClient.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    // TODO: fix this to be independent of ZK\n    ZkDistribStateManager stateManager = new ZkDistribStateManager(zkClient);\n    String nodeName = Assign.assignCoreNodeName(stateManager, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignCoreNodeName(stateManager, new DocCollection(\"collection2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignCoreNodeName(stateManager, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","sourceOld":"  @Test\n  public void testAssignNode() throws Exception {\n    assumeWorkingMockito();\n    \n    SolrZkClient zkClient = mock(SolrZkClient.class);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(zkClient.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n        return null;\n      }\n    );\n    when(zkClient.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    // TODO: fix this to be independent of ZK\n    ZkDistribStateManager stateManager = new ZkDistribStateManager(zkClient);\n    String nodeName = Assign.assignCoreNodeName(stateManager, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignCoreNodeName(stateManager, new DocCollection(\"collection2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignCoreNodeName(stateManager, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/AssignTest#testAssignNode().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testAssignNode() throws Exception {\n    assumeWorkingMockito();\n    \n    SolrZkClient zkClient = mock(SolrZkClient.class);\n    Map<String, byte[]> zkClientData = new HashMap<>();\n    when(zkClient.setData(anyString(), any(), anyInt(), anyBoolean())).then(invocation -> {\n        zkClientData.put(invocation.getArgument(0), invocation.getArgument(1));\n        return null;\n      }\n    );\n    when(zkClient.getData(anyString(), any(), any(), anyBoolean())).then(invocation ->\n        zkClientData.get(invocation.getArgument(0)));\n    // TODO: fix this to be independent of ZK\n    ZkDistribStateManager stateManager = new ZkDistribStateManager(zkClient);\n    String nodeName = Assign.assignCoreNodeName(stateManager, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignCoreNodeName(stateManager, new DocCollection(\"collection2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node1\", nodeName);\n    nodeName = Assign.assignCoreNodeName(stateManager, new DocCollection(\"collection1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT));\n    assertEquals(\"core_node2\", nodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"3f504512a03d978990cbff30db0522b354e846db":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}