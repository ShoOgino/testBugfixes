{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig#getTriggerConfigs().mjava","commits":[{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig#getTriggerConfigs().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingConfig#getTriggerConfigs().mjava","sourceNew":"  /**\n   * Get trigger configurations.\n   */\n  public Map<String, TriggerConfig> getTriggerConfigs() {\n    if (triggers == null) {\n      if (jsonMap != null) {\n        Map<String, Object> trigMap = (Map<String, Object>)jsonMap.get(\"triggers\");\n        if (trigMap == null) {\n          triggers = Collections.emptyMap();\n        } else {\n          HashMap<String, TriggerConfig> newTriggers = new HashMap<>(trigMap.size());\n          for (Map.Entry<String, Object> entry : trigMap.entrySet()) {\n            newTriggers.put(entry.getKey(), new TriggerConfig(entry.getKey(), (Map<String, Object>)entry.getValue()));\n          }\n          triggers = Collections.unmodifiableMap(newTriggers);\n        }\n      } else {\n        triggers = Collections.emptyMap();\n      }\n    }\n    return triggers;\n  }\n\n","sourceOld":"  /**\n   * Get trigger configurations.\n   */\n  public Map<String, TriggerConfig> getTriggerConfigs() {\n    if (triggers == null) {\n      Map<String, Object> trigMap = (Map<String, Object>)jsonMap.get(\"triggers\");\n      if (trigMap == null) {\n        triggers = Collections.emptyMap();\n      } else {\n        triggers = new HashMap<>(trigMap.size());\n        for (Map.Entry<String, Object> entry : trigMap.entrySet()) {\n          triggers.put(entry.getKey(), new TriggerConfig(entry.getKey(), (Map<String, Object>)entry.getValue()));\n        }\n      }\n    }\n    return triggers;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig#getTriggerConfigs().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get trigger configurations.\n   */\n  public Map<String, TriggerConfig> getTriggerConfigs() {\n    if (triggers == null) {\n      if (jsonMap != null) {\n        Map<String, Object> trigMap = (Map<String, Object>)jsonMap.get(\"triggers\");\n        if (trigMap == null) {\n          triggers = Collections.emptyMap();\n        } else {\n          HashMap<String, TriggerConfig> newTriggers = new HashMap<>(trigMap.size());\n          for (Map.Entry<String, Object> entry : trigMap.entrySet()) {\n            newTriggers.put(entry.getKey(), new TriggerConfig(entry.getKey(), (Map<String, Object>)entry.getValue()));\n          }\n          triggers = Collections.unmodifiableMap(newTriggers);\n        }\n      } else {\n        triggers = Collections.emptyMap();\n      }\n    }\n    return triggers;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig#getTriggerConfigs().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get trigger configurations.\n   */\n  public Map<String, TriggerConfig> getTriggerConfigs() {\n    if (triggers == null) {\n      if (jsonMap != null) {\n        Map<String, Object> trigMap = (Map<String, Object>)jsonMap.get(\"triggers\");\n        if (trigMap == null) {\n          triggers = Collections.emptyMap();\n        } else {\n          HashMap<String, TriggerConfig> newTriggers = new HashMap<>(trigMap.size());\n          for (Map.Entry<String, Object> entry : trigMap.entrySet()) {\n            newTriggers.put(entry.getKey(), new TriggerConfig(entry.getKey(), (Map<String, Object>)entry.getValue()));\n          }\n          triggers = Collections.unmodifiableMap(newTriggers);\n        }\n      } else {\n        triggers = Collections.emptyMap();\n      }\n    }\n    return triggers;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"25d862725cffd5d4d62fd002b5dc320f92c53365","date":1534448650,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig#getTriggerConfigs().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig#getTriggerConfigs().mjava","sourceNew":"  /**\n   * Get trigger configurations.\n   */\n  public Map<String, TriggerConfig> getTriggerConfigs() {\n    if (triggers == null) {\n      if (jsonMap != null) {\n        Map<String, Object> trigMap = (Map<String, Object>)jsonMap.get(\"triggers\");\n        if (trigMap == null) {\n          triggers = Collections.emptyMap();\n        } else {\n          Map<String, TriggerConfig> newTriggers = new LinkedHashMap<>(trigMap.size());\n          for (Map.Entry<String, Object> entry : trigMap.entrySet()) {\n            newTriggers.put(entry.getKey(), new TriggerConfig(entry.getKey(), (Map<String, Object>)entry.getValue()));\n          }\n          triggers = Collections.unmodifiableMap(newTriggers);\n        }\n      } else {\n        triggers = Collections.emptyMap();\n      }\n    }\n    return triggers;\n  }\n\n","sourceOld":"  /**\n   * Get trigger configurations.\n   */\n  public Map<String, TriggerConfig> getTriggerConfigs() {\n    if (triggers == null) {\n      if (jsonMap != null) {\n        Map<String, Object> trigMap = (Map<String, Object>)jsonMap.get(\"triggers\");\n        if (trigMap == null) {\n          triggers = Collections.emptyMap();\n        } else {\n          HashMap<String, TriggerConfig> newTriggers = new HashMap<>(trigMap.size());\n          for (Map.Entry<String, Object> entry : trigMap.entrySet()) {\n            newTriggers.put(entry.getKey(), new TriggerConfig(entry.getKey(), (Map<String, Object>)entry.getValue()));\n          }\n          triggers = Collections.unmodifiableMap(newTriggers);\n        }\n      } else {\n        triggers = Collections.emptyMap();\n      }\n    }\n    return triggers;\n  }\n\n","bugFix":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"527adea7ce767368d7317339023e18e39702132e","date":1592163810,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig#getTriggerConfigs().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig#getTriggerConfigs().mjava","sourceNew":"  /**\n   * Get trigger configurations.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public Map<String, TriggerConfig> getTriggerConfigs() {\n    if (triggers == null) {\n      if (jsonMap != null) {\n        Map<String, Object> trigMap = (Map<String, Object>)jsonMap.get(\"triggers\");\n        if (trigMap == null) {\n          triggers = Collections.emptyMap();\n        } else {\n          Map<String, TriggerConfig> newTriggers = new LinkedHashMap<>(trigMap.size());\n          for (Map.Entry<String, Object> entry : trigMap.entrySet()) {\n            newTriggers.put(entry.getKey(), new TriggerConfig(entry.getKey(), (Map<String, Object>)entry.getValue()));\n          }\n          triggers = Collections.unmodifiableMap(newTriggers);\n        }\n      } else {\n        triggers = Collections.emptyMap();\n      }\n    }\n    return triggers;\n  }\n\n","sourceOld":"  /**\n   * Get trigger configurations.\n   */\n  public Map<String, TriggerConfig> getTriggerConfigs() {\n    if (triggers == null) {\n      if (jsonMap != null) {\n        Map<String, Object> trigMap = (Map<String, Object>)jsonMap.get(\"triggers\");\n        if (trigMap == null) {\n          triggers = Collections.emptyMap();\n        } else {\n          Map<String, TriggerConfig> newTriggers = new LinkedHashMap<>(trigMap.size());\n          for (Map.Entry<String, Object> entry : trigMap.entrySet()) {\n            newTriggers.put(entry.getKey(), new TriggerConfig(entry.getKey(), (Map<String, Object>)entry.getValue()));\n          }\n          triggers = Collections.unmodifiableMap(newTriggers);\n        }\n      } else {\n        triggers = Collections.emptyMap();\n      }\n    }\n    return triggers;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AutoScalingConfig#getTriggerConfigs().mjava","sourceNew":null,"sourceOld":"  /**\n   * Get trigger configurations.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public Map<String, TriggerConfig> getTriggerConfigs() {\n    if (triggers == null) {\n      if (jsonMap != null) {\n        Map<String, Object> trigMap = (Map<String, Object>)jsonMap.get(\"triggers\");\n        if (trigMap == null) {\n          triggers = Collections.emptyMap();\n        } else {\n          Map<String, TriggerConfig> newTriggers = new LinkedHashMap<>(trigMap.size());\n          for (Map.Entry<String, Object> entry : trigMap.entrySet()) {\n            newTriggers.put(entry.getKey(), new TriggerConfig(entry.getKey(), (Map<String, Object>)entry.getValue()));\n          }\n          triggers = Collections.unmodifiableMap(newTriggers);\n        }\n      } else {\n        triggers = Collections.emptyMap();\n      }\n    }\n    return triggers;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"3f504512a03d978990cbff30db0522b354e846db":["527adea7ce767368d7317339023e18e39702132e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"527adea7ce767368d7317339023e18e39702132e":["25d862725cffd5d4d62fd002b5dc320f92c53365"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"25d862725cffd5d4d62fd002b5dc320f92c53365":["560c18d71dad43d675158783c3840f8c80d6d39c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c","219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"527adea7ce767368d7317339023e18e39702132e":["3f504512a03d978990cbff30db0522b354e846db"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"560c18d71dad43d675158783c3840f8c80d6d39c":["25d862725cffd5d4d62fd002b5dc320f92c53365"],"25d862725cffd5d4d62fd002b5dc320f92c53365":["527adea7ce767368d7317339023e18e39702132e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}