{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#open().mjava","commits":[{"id":"79509167584beb75c0b777d2b701adeb1f06d885","date":1441841855,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#open().mjava","pathOld":"/dev/null","sourceNew":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new CloudSolrClient(zkHost);\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, sorts);\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, limit);\n\n    ModifiableSolrParams params = getParams(this.props);\n    params.add(\"json.facet\", json);\n    params.add(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n      Collections.sort(tuples, getStreamSort());\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5287d62ad5da27d35a88ada646ae7d9adfb76826","date":1450041712,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new CloudSolrClient(zkHost);\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, bucketSizeLimit);\n\n    ModifiableSolrParams params = getParams(this.props);\n    params.add(\"json.facet\", json);\n    params.add(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n      Collections.sort(tuples, getStreamSort());\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new CloudSolrClient(zkHost);\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, sorts);\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, limit);\n\n    ModifiableSolrParams params = getParams(this.props);\n    params.add(\"json.facet\", json);\n    params.add(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n      Collections.sort(tuples, getStreamSort());\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, bucketSizeLimit);\n\n    ModifiableSolrParams params = getParams(this.props);\n    params.add(\"json.facet\", json);\n    params.add(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n      Collections.sort(tuples, getStreamSort());\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new CloudSolrClient(zkHost);\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, bucketSizeLimit);\n\n    ModifiableSolrParams params = getParams(this.props);\n    params.add(\"json.facet\", json);\n    params.add(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n      Collections.sort(tuples, getStreamSort());\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, bucketSizeLimit);\n\n    ModifiableSolrParams params = getParams(this.props);\n    params.add(\"json.facet\", json);\n    params.add(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n      Collections.sort(tuples, getStreamSort());\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new CloudSolrClient(zkHost);\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, bucketSizeLimit);\n\n    ModifiableSolrParams params = getParams(this.props);\n    params.add(\"json.facet\", json);\n    params.add(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n      Collections.sort(tuples, getStreamSort());\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, bucketSizeLimit);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n      Collections.sort(tuples, getStreamSort());\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, bucketSizeLimit);\n\n    ModifiableSolrParams params = getParams(this.props);\n    params.add(\"json.facet\", json);\n    params.add(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n      Collections.sort(tuples, getStreamSort());\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["c517f0a79ad9bb05bd316925c6cd35f1ca96ae63"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, bucketSizeLimit);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n      Collections.sort(tuples, getStreamSort());\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, bucketSizeLimit);\n\n    ModifiableSolrParams params = getParams(this.props);\n    params.add(\"json.facet\", json);\n    params.add(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n      Collections.sort(tuples, getStreamSort());\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, bucketSizeLimit);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n      Collections.sort(tuples, getStreamSort());\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, bucketSizeLimit);\n\n    ModifiableSolrParams params = getParams(this.props);\n    params.add(\"json.facet\", json);\n    params.add(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n      Collections.sort(tuples, getStreamSort());\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, bucketSizeLimit);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n      Collections.sort(tuples, getStreamSort());\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, bucketSizeLimit);\n\n    ModifiableSolrParams params = getParams(this.props);\n    params.add(\"json.facet\", json);\n    params.add(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(params);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n      Collections.sort(tuples, getStreamSort());\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9fe3175bbaa122d67f736a75c2984617c502cc0","date":1490722938,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, bucketSizeLimit);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n      Collections.sort(tuples, getStreamSort());\n\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, bucketSizeLimit);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n      Collections.sort(tuples, getStreamSort());\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9b741b54c163686a5fd077895a797daa9b0b95f","date":1490873946,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, bucketSizeLimit);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n      Collections.sort(tuples, getStreamSort());\n\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, bucketSizeLimit);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n      Collections.sort(tuples, getStreamSort());\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8","date":1520696743,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).build();\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, bucketSizeLimit);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n      Collections.sort(tuples, getStreamSort());\n\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, bucketSizeLimit);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n      Collections.sort(tuples, getStreamSort());\n\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"011d43366b2da54d1652d93e7ec6412848eeb009","date":1541521420,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).build();\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    this.resortNeeded = resortNeeded(adjustedSorts);\n\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, method, refine, bucketSizeLimit);\n    assert expectedJson(json);\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n\n      if(resortNeeded) {\n        Collections.sort(tuples, getStreamSort());\n      }\n\n      index=this.offset;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).build();\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, bucketSizeLimit);\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n      Collections.sort(tuples, getStreamSort());\n\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).withSocketTimeout(30000).withConnectionTimeout(15000).build();\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    this.resortNeeded = resortNeeded(adjustedSorts);\n\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, method, refine, bucketSizeLimit);\n    assert expectedJson(json);\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n\n      if(resortNeeded) {\n        Collections.sort(tuples, getStreamSort());\n      }\n\n      index=this.offset;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).build();\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    this.resortNeeded = resortNeeded(adjustedSorts);\n\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, method, refine, bucketSizeLimit);\n    assert expectedJson(json);\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n\n      if(resortNeeded) {\n        Collections.sort(tuples, getStreamSort());\n      }\n\n      index=this.offset;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c517f0a79ad9bb05bd316925c6cd35f1ca96ae63","date":1544462572,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).withSocketTimeout(30000).withConnectionTimeout(15000).build();\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    this.resortNeeded = resortNeeded(adjustedSorts);\n\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, method, refine, bucketSizeLimit);\n    assert expectedJson(json);\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc, SolrRequest.METHOD.POST);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n\n      if(resortNeeded) {\n        Collections.sort(tuples, getStreamSort());\n      }\n\n      index=this.offset;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).withSocketTimeout(30000).withConnectionTimeout(15000).build();\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    this.resortNeeded = resortNeeded(adjustedSorts);\n\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, method, refine, bucketSizeLimit);\n    assert expectedJson(json);\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n\n      if(resortNeeded) {\n        Collections.sort(tuples, getStreamSort());\n      }\n\n      index=this.offset;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":["826d15444ddf61716dc768c229cd54b2c2ccce1c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75","date":1591744896,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).withSocketTimeout(30000).withConnectionTimeout(15000).build();\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    this.resortNeeded = resortNeeded(adjustedSorts);\n\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, method, refine, bucketSizeLimit);\n    assert expectedJson(json);\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc, SolrRequest.METHOD.POST);\n    try {\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n\n      if(resortNeeded) {\n        Collections.sort(tuples, getStreamSort());\n      }\n\n      index=this.offset;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    if(cache != null) {\n      cloudSolrClient = cache.getCloudSolrClient(zkHost);\n    } else {\n      final List<String> hosts = new ArrayList<>();\n      hosts.add(zkHost);\n      cloudSolrClient = new Builder(hosts, Optional.empty()).withSocketTimeout(30000).withConnectionTimeout(15000).build();\n    }\n\n    FieldComparator[] adjustedSorts = adjustSorts(buckets, bucketSorts);\n    this.resortNeeded = resortNeeded(adjustedSorts);\n\n    String json = getJsonFacetString(buckets, metrics, adjustedSorts, method, refine, bucketSizeLimit);\n    assert expectedJson(json);\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams(params);\n    paramsLoc.set(\"json.facet\", json);\n    paramsLoc.set(\"rows\", \"0\");\n\n    QueryRequest request = new QueryRequest(paramsLoc, SolrRequest.METHOD.POST);\n    try {\n      NamedList response = cloudSolrClient.request(request, collection);\n      getTuples(response, buckets, metrics);\n\n      if(resortNeeded) {\n        Collections.sort(tuples, getStreamSort());\n      }\n\n      index=this.offset;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["011d43366b2da54d1652d93e7ec6412848eeb009"],"79509167584beb75c0b777d2b701adeb1f06d885":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5287d62ad5da27d35a88ada646ae7d9adfb76826"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"c517f0a79ad9bb05bd316925c6cd35f1ca96ae63":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"a9b741b54c163686a5fd077895a797daa9b0b95f":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"5287d62ad5da27d35a88ada646ae7d9adfb76826":["79509167584beb75c0b777d2b701adeb1f06d885"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["d9fe3175bbaa122d67f736a75c2984617c502cc0"],"d9fe3175bbaa122d67f736a75c2984617c502cc0":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"011d43366b2da54d1652d93e7ec6412848eeb009":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["5287d62ad5da27d35a88ada646ae7d9adfb76826","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["c517f0a79ad9bb05bd316925c6cd35f1ca96ae63"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["c517f0a79ad9bb05bd316925c6cd35f1ca96ae63"],"79509167584beb75c0b777d2b701adeb1f06d885":["5287d62ad5da27d35a88ada646ae7d9adfb76826"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a9b741b54c163686a5fd077895a797daa9b0b95f","d9fe3175bbaa122d67f736a75c2984617c502cc0"],"c517f0a79ad9bb05bd316925c6cd35f1ca96ae63":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"a9b741b54c163686a5fd077895a797daa9b0b95f":[],"5287d62ad5da27d35a88ada646ae7d9adfb76826":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["011d43366b2da54d1652d93e7ec6412848eeb009"],"d9fe3175bbaa122d67f736a75c2984617c502cc0":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["79509167584beb75c0b777d2b701adeb1f06d885"],"011d43366b2da54d1652d93e7ec6412848eeb009":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["826d15444ddf61716dc768c229cd54b2c2ccce1c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a9b741b54c163686a5fd077895a797daa9b0b95f","e66a459d38c1c4a2f97128433dab546f683a9fed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}