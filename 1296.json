{"path":"backwards/src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Document doc = reader.doc(0, null);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(DocHelper.TEXT_FIELD_1_KEY) != null);\n\n    Fieldable field = doc.getField(DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == true);\n\n    assertTrue(field.isStoreOffsetWithTermVector() == true);\n    assertTrue(field.isStorePositionWithTermVector() == true);\n    assertTrue(field.getOmitNorms() == false);\n    assertTrue(field.getOmitTermFreqAndPositions() == false);\n\n    field = doc.getField(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == false);\n    assertTrue(field.isStoreOffsetWithTermVector() == false);\n    assertTrue(field.isStorePositionWithTermVector() == false);\n    assertTrue(field.getOmitNorms() == true);\n    assertTrue(field.getOmitTermFreqAndPositions() == false);\n\n    field = doc.getField(DocHelper.NO_TF_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == false);\n    assertTrue(field.isStoreOffsetWithTermVector() == false);\n    assertTrue(field.isStorePositionWithTermVector() == false);\n    assertTrue(field.getOmitNorms() == false);\n    assertTrue(field.getOmitTermFreqAndPositions() == true);\n    reader.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestFieldsReader#test().mjava","sourceNew":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Document doc = reader.doc(0, null);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(DocHelper.TEXT_FIELD_1_KEY) != null);\n\n    Fieldable field = doc.getField(DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == true);\n\n    assertTrue(field.isStoreOffsetWithTermVector() == true);\n    assertTrue(field.isStorePositionWithTermVector() == true);\n    assertTrue(field.getOmitNorms() == false);\n    assertTrue(field.getOmitTermFreqAndPositions() == false);\n\n    field = doc.getField(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == false);\n    assertTrue(field.isStoreOffsetWithTermVector() == false);\n    assertTrue(field.isStorePositionWithTermVector() == false);\n    assertTrue(field.getOmitNorms() == true);\n    assertTrue(field.getOmitTermFreqAndPositions() == false);\n\n    field = doc.getField(DocHelper.NO_TF_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == false);\n    assertTrue(field.isStoreOffsetWithTermVector() == false);\n    assertTrue(field.isStorePositionWithTermVector() == false);\n    assertTrue(field.getOmitNorms() == false);\n    assertTrue(field.getOmitTermFreqAndPositions() == true);\n    reader.close();\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    assertTrue(dir != null);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader = new FieldsReader(dir, TEST_SEGMENT_NAME, fieldInfos);\n    assertTrue(reader != null);\n    assertTrue(reader.size() == 1);\n    Document doc = reader.doc(0, null);\n    assertTrue(doc != null);\n    assertTrue(doc.getField(DocHelper.TEXT_FIELD_1_KEY) != null);\n\n    Fieldable field = doc.getField(DocHelper.TEXT_FIELD_2_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == true);\n\n    assertTrue(field.isStoreOffsetWithTermVector() == true);\n    assertTrue(field.isStorePositionWithTermVector() == true);\n    assertTrue(field.getOmitNorms() == false);\n    assertTrue(field.getOmitTermFreqAndPositions() == false);\n\n    field = doc.getField(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == false);\n    assertTrue(field.isStoreOffsetWithTermVector() == false);\n    assertTrue(field.isStorePositionWithTermVector() == false);\n    assertTrue(field.getOmitNorms() == true);\n    assertTrue(field.getOmitTermFreqAndPositions() == false);\n\n    field = doc.getField(DocHelper.NO_TF_KEY);\n    assertTrue(field != null);\n    assertTrue(field.isTermVectorStored() == false);\n    assertTrue(field.isStoreOffsetWithTermVector() == false);\n    assertTrue(field.isStorePositionWithTermVector() == false);\n    assertTrue(field.getOmitNorms() == false);\n    assertTrue(field.getOmitTermFreqAndPositions() == true);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}