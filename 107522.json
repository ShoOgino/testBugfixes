{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMatches().mjava","commits":[{"id":"5999895c8ef48fe0f20d75576aea7e99dcdc8bde","date":1560987620,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMatches().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMatches() throws Exception {\n    String cexpr = \"having(list(tuple(a=\\\"Hello World\\\"), tuple(a=\\\"Good bye\\\")), matches(a, Hello))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 1);\n    Tuple tuple0 = tuples.get(0);\n    assertEquals(tuple0.getString(\"a\"), \"Hello World\");\n\n    cexpr = \"having(list(tuple(a=\\\"Hello World\\\"), tuple(a=\\\"Good bye\\\")), matches(a, \\\"(?i)good\\\"))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 1);\n    tuple0 = tuples.get(0);\n    assertEquals(tuple0.getString(\"a\"), \"Good bye\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35cc45f54fe95a5534e02f9b8ca2a54af211ded5","date":1564774706,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMatches().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMatches().mjava","sourceNew":"  @Test\n  public void testMatches() throws Exception {\n    String cexpr = \"having(list(tuple(a=\\\"Hello World\\\"), tuple(a=\\\"Good bye\\\")), matches(a, \\\"Hello\\\"))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 1);\n    Tuple tuple0 = tuples.get(0);\n    assertEquals(tuple0.getString(\"a\"), \"Hello World\");\n\n    cexpr = \"having(list(tuple(a=\\\"Hello World\\\"), tuple(a=\\\"Good bye\\\")), matches(a, \\\"(?i)good\\\"))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 1);\n    tuple0 = tuples.get(0);\n    assertEquals(tuple0.getString(\"a\"), \"Good bye\");\n  }\n\n","sourceOld":"  @Test\n  public void testMatches() throws Exception {\n    String cexpr = \"having(list(tuple(a=\\\"Hello World\\\"), tuple(a=\\\"Good bye\\\")), matches(a, Hello))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 1);\n    Tuple tuple0 = tuples.get(0);\n    assertEquals(tuple0.getString(\"a\"), \"Hello World\");\n\n    cexpr = \"having(list(tuple(a=\\\"Hello World\\\"), tuple(a=\\\"Good bye\\\")), matches(a, \\\"(?i)good\\\"))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 1);\n    tuple0 = tuples.get(0);\n    assertEquals(tuple0.getString(\"a\"), \"Good bye\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMatches().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMatches().mjava","sourceNew":"  @Test\n  public void testMatches() throws Exception {\n    String cexpr = \"having(list(tuple(a=\\\"Hello World\\\"), tuple(a=\\\"Good bye\\\")), matches(a, \\\"Hello\\\"))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 1);\n    Tuple tuple0 = tuples.get(0);\n    assertEquals(tuple0.getString(\"a\"), \"Hello World\");\n\n    cexpr = \"having(list(tuple(a=\\\"Hello World\\\"), tuple(a=\\\"Good bye\\\")), matches(a, \\\"(?i)good\\\"))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 1);\n    tuple0 = tuples.get(0);\n    assertEquals(tuple0.getString(\"a\"), \"Good bye\");\n  }\n\n","sourceOld":"  @Test\n  public void testMatches() throws Exception {\n    String cexpr = \"having(list(tuple(a=\\\"Hello World\\\"), tuple(a=\\\"Good bye\\\")), matches(a, Hello))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 1);\n    Tuple tuple0 = tuples.get(0);\n    assertEquals(tuple0.getString(\"a\"), \"Hello World\");\n\n    cexpr = \"having(list(tuple(a=\\\"Hello World\\\"), tuple(a=\\\"Good bye\\\")), matches(a, \\\"(?i)good\\\"))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 1);\n    tuple0 = tuples.get(0);\n    assertEquals(tuple0.getString(\"a\"), \"Good bye\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan HÃ¸ydahl","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMatches().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMatches().mjava","sourceNew":"  @Test\n  public void testMatches() throws Exception {\n    String cexpr = \"having(list(tuple(a=\\\"Hello World\\\"), tuple(a=\\\"Good bye\\\")), matches(a, \\\"Hello\\\"))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 1);\n    Tuple tuple0 = tuples.get(0);\n    assertEquals(tuple0.getString(\"a\"), \"Hello World\");\n\n    cexpr = \"having(list(tuple(a=\\\"Hello World\\\"), tuple(a=\\\"Good bye\\\")), matches(a, \\\"(?i)good\\\"))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 1);\n    tuple0 = tuples.get(0);\n    assertEquals(tuple0.getString(\"a\"), \"Good bye\");\n  }\n\n","sourceOld":"  @Test\n  public void testMatches() throws Exception {\n    String cexpr = \"having(list(tuple(a=\\\"Hello World\\\"), tuple(a=\\\"Good bye\\\")), matches(a, Hello))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 1);\n    Tuple tuple0 = tuples.get(0);\n    assertEquals(tuple0.getString(\"a\"), \"Hello World\");\n\n    cexpr = \"having(list(tuple(a=\\\"Hello World\\\"), tuple(a=\\\"Good bye\\\")), matches(a, \\\"(?i)good\\\"))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertEquals(tuples.size(), 1);\n    tuple0 = tuples.get(0);\n    assertEquals(tuple0.getString(\"a\"), \"Good bye\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5999895c8ef48fe0f20d75576aea7e99dcdc8bde":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["5999895c8ef48fe0f20d75576aea7e99dcdc8bde","35cc45f54fe95a5534e02f9b8ca2a54af211ded5"],"35cc45f54fe95a5534e02f9b8ca2a54af211ded5":["5999895c8ef48fe0f20d75576aea7e99dcdc8bde"],"f8061ddd97f3352007d927dae445884a6f3d857b":["5999895c8ef48fe0f20d75576aea7e99dcdc8bde","35cc45f54fe95a5534e02f9b8ca2a54af211ded5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["35cc45f54fe95a5534e02f9b8ca2a54af211ded5"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5999895c8ef48fe0f20d75576aea7e99dcdc8bde"],"5999895c8ef48fe0f20d75576aea7e99dcdc8bde":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","35cc45f54fe95a5534e02f9b8ca2a54af211ded5","f8061ddd97f3352007d927dae445884a6f3d857b"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"35cc45f54fe95a5534e02f9b8ca2a54af211ded5":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}