{"path":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.CountingCollector#collect(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.CountingCollector#collect(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSubScorerFreqs.CountingCollector#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      final Map<Query, Float> freqs = new HashMap<Query, Float>();\n      for (Map.Entry<Query, Scorer> ent : subScorers.entrySet()) {\n        Scorer value = ent.getValue();\n        int matchId = value.docID();\n        freqs.put(ent.getKey(), matchId == doc ? value.freq() : 0.0f);\n      }\n      docCounts.put(doc + docBase, freqs);\n      other.collect(doc);\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      final Map<Query, Float> freqs = new HashMap<Query, Float>();\n      for (Map.Entry<Query, Scorer> ent : subScorers.entrySet()) {\n        Scorer value = ent.getValue();\n        int matchId = value.docID();\n        freqs.put(ent.getKey(), matchId == doc ? value.freq() : 0.0f);\n      }\n      docCounts.put(doc + docBase, freqs);\n      other.collect(doc);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.CountingCollector#collect(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.CountingCollector#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      final Map<Query, Float> freqs = new HashMap<>();\n      for (Map.Entry<Query, Scorer> ent : subScorers.entrySet()) {\n        Scorer value = ent.getValue();\n        int matchId = value.docID();\n        freqs.put(ent.getKey(), matchId == doc ? value.freq() : 0.0f);\n      }\n      docCounts.put(doc + docBase, freqs);\n      other.collect(doc);\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      final Map<Query, Float> freqs = new HashMap<Query, Float>();\n      for (Map.Entry<Query, Scorer> ent : subScorers.entrySet()) {\n        Scorer value = ent.getValue();\n        int matchId = value.docID();\n        freqs.put(ent.getKey(), matchId == doc ? value.freq() : 0.0f);\n      }\n      docCounts.put(doc + docBase, freqs);\n      other.collect(doc);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.CountingCollector#collect(int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      final Map<Query, Float> freqs = new HashMap<>();\n      for (Map.Entry<Query, Scorer> ent : subScorers.entrySet()) {\n        Scorer value = ent.getValue();\n        int matchId = value.docID();\n        freqs.put(ent.getKey(), matchId == doc ? value.freq() : 0.0f);\n      }\n      docCounts.put(doc + docBase, freqs);\n      other.collect(doc);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.CountingCollector#collect(int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      final Map<Query, Float> freqs = new HashMap<>();\n      for (Map.Entry<Query, Scorer> ent : subScorers.entrySet()) {\n        Scorer value = ent.getValue();\n        int matchId = value.docID();\n        freqs.put(ent.getKey(), matchId == doc ? value.freq() : 0.0f);\n      }\n      docCounts.put(doc + docBase, freqs);\n      other.collect(doc);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","ae73da626f97850c922c42736f808d0378e165f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae73da626f97850c922c42736f808d0378e165f0":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ae73da626f97850c922c42736f808d0378e165f0"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ae73da626f97850c922c42736f808d0378e165f0":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}