{"path":"solr/core/src/test/org/apache/solr/search/TestCaffeineCache#testSimple().mjava","commits":[{"id":"87f0484c38f986062889ed50f3bf3bd462848c26","date":1570108628,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCaffeineCache#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSimple() throws IOException {\n    CaffeineCache<Integer, String> lfuCache = new CaffeineCache<>();\n    lfuCache.initializeMetrics(metricManager, registry, \"foo\", scope + \"-1\");\n\n    CaffeineCache<Integer, String> newLFUCache = new CaffeineCache<>();\n    newLFUCache.initializeMetrics(metricManager, registry, \"foo2\", scope + \"-2\");\n\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"100\");\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", \"25\");\n\n    NoOpRegenerator regenerator = new NoOpRegenerator();\n    Object initObj = lfuCache.init(params, null, regenerator);\n    lfuCache.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      lfuCache.put(i + 1, Integer.toString(i + 1));\n    }\n    assertEquals(\"15\", lfuCache.get(15));\n    assertEquals(\"75\", lfuCache.get(75));\n    assertEquals(null, lfuCache.get(110));\n    Map<String, Object> nl = lfuCache.getMetricsMap().getValue();\n    assertEquals(3L, nl.get(\"lookups\"));\n    assertEquals(2L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, lfuCache.get(1));  // first item put in should be the first out\n\n    // Test autowarming\n    newLFUCache.init(params, initObj, regenerator);\n    newLFUCache.warm(null, lfuCache);\n    newLFUCache.setState(SolrCache.State.LIVE);\n\n    newLFUCache.put(103, \"103\");\n    assertEquals(\"15\", newLFUCache.get(15));\n    assertEquals(\"75\", newLFUCache.get(75));\n    assertEquals(null, newLFUCache.get(50));\n    nl = newLFUCache.getMetricsMap().getValue();\n    assertEquals(3L, nl.get(\"lookups\"));\n    assertEquals(2L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(7L, nl.get(\"cumulative_lookups\"));\n    assertEquals(4L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCaffeineCache#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSimple() throws IOException {\n    CaffeineCache<Integer, String> lfuCache = new CaffeineCache<>();\n    lfuCache.initializeMetrics(metricManager, registry, \"foo\", scope + \"-1\");\n\n    CaffeineCache<Integer, String> newLFUCache = new CaffeineCache<>();\n    newLFUCache.initializeMetrics(metricManager, registry, \"foo2\", scope + \"-2\");\n\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"100\");\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", \"25\");\n\n    NoOpRegenerator regenerator = new NoOpRegenerator();\n    Object initObj = lfuCache.init(params, null, regenerator);\n    lfuCache.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      lfuCache.put(i + 1, Integer.toString(i + 1));\n    }\n    assertEquals(\"15\", lfuCache.get(15));\n    assertEquals(\"75\", lfuCache.get(75));\n    assertEquals(null, lfuCache.get(110));\n    Map<String, Object> nl = lfuCache.getMetricsMap().getValue();\n    assertEquals(3L, nl.get(\"lookups\"));\n    assertEquals(2L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, lfuCache.get(1));  // first item put in should be the first out\n\n    // Test autowarming\n    newLFUCache.init(params, initObj, regenerator);\n    newLFUCache.warm(null, lfuCache);\n    newLFUCache.setState(SolrCache.State.LIVE);\n\n    newLFUCache.put(103, \"103\");\n    assertEquals(\"15\", newLFUCache.get(15));\n    assertEquals(\"75\", newLFUCache.get(75));\n    assertEquals(null, newLFUCache.get(50));\n    nl = newLFUCache.getMetricsMap().getValue();\n    assertEquals(3L, nl.get(\"lookups\"));\n    assertEquals(2L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(7L, nl.get(\"cumulative_lookups\"));\n    assertEquals(4L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e9e5eaf280a6aa21423126b8232aa157a9b7366","date":1571772228,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCaffeineCache#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestCaffeineCache#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws IOException {\n    CaffeineCache<Integer, String> lfuCache = new CaffeineCache<>();\n    SolrMetricsContext solrMetricsContext = new SolrMetricsContext(metricManager, registry, \"foo\");\n    lfuCache.initializeMetrics(solrMetricsContext, scope + \"-1\");\n\n    CaffeineCache<Integer, String> newLFUCache = new CaffeineCache<>();\n    newLFUCache.initializeMetrics(solrMetricsContext, scope + \"-2\");\n\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"100\");\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", \"25\");\n\n    NoOpRegenerator regenerator = new NoOpRegenerator();\n    Object initObj = lfuCache.init(params, null, regenerator);\n    lfuCache.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      lfuCache.put(i + 1, Integer.toString(i + 1));\n    }\n    assertEquals(\"15\", lfuCache.get(15));\n    assertEquals(\"75\", lfuCache.get(75));\n    assertEquals(null, lfuCache.get(110));\n    Map<String, Object> nl = lfuCache.getMetricsMap().getValue();\n    assertEquals(3L, nl.get(\"lookups\"));\n    assertEquals(2L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, lfuCache.get(1));  // first item put in should be the first out\n\n    // Test autowarming\n    newLFUCache.init(params, initObj, regenerator);\n    newLFUCache.warm(null, lfuCache);\n    newLFUCache.setState(SolrCache.State.LIVE);\n\n    newLFUCache.put(103, \"103\");\n    assertEquals(\"15\", newLFUCache.get(15));\n    assertEquals(\"75\", newLFUCache.get(75));\n    assertEquals(null, newLFUCache.get(50));\n    nl = newLFUCache.getMetricsMap().getValue();\n    assertEquals(3L, nl.get(\"lookups\"));\n    assertEquals(2L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(7L, nl.get(\"cumulative_lookups\"));\n    assertEquals(4L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws IOException {\n    CaffeineCache<Integer, String> lfuCache = new CaffeineCache<>();\n    lfuCache.initializeMetrics(metricManager, registry, \"foo\", scope + \"-1\");\n\n    CaffeineCache<Integer, String> newLFUCache = new CaffeineCache<>();\n    newLFUCache.initializeMetrics(metricManager, registry, \"foo2\", scope + \"-2\");\n\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"100\");\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", \"25\");\n\n    NoOpRegenerator regenerator = new NoOpRegenerator();\n    Object initObj = lfuCache.init(params, null, regenerator);\n    lfuCache.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      lfuCache.put(i + 1, Integer.toString(i + 1));\n    }\n    assertEquals(\"15\", lfuCache.get(15));\n    assertEquals(\"75\", lfuCache.get(75));\n    assertEquals(null, lfuCache.get(110));\n    Map<String, Object> nl = lfuCache.getMetricsMap().getValue();\n    assertEquals(3L, nl.get(\"lookups\"));\n    assertEquals(2L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, lfuCache.get(1));  // first item put in should be the first out\n\n    // Test autowarming\n    newLFUCache.init(params, initObj, regenerator);\n    newLFUCache.warm(null, lfuCache);\n    newLFUCache.setState(SolrCache.State.LIVE);\n\n    newLFUCache.put(103, \"103\");\n    assertEquals(\"15\", newLFUCache.get(15));\n    assertEquals(\"75\", newLFUCache.get(75));\n    assertEquals(null, newLFUCache.get(50));\n    nl = newLFUCache.getMetricsMap().getValue();\n    assertEquals(3L, nl.get(\"lookups\"));\n    assertEquals(2L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(7L, nl.get(\"cumulative_lookups\"));\n    assertEquals(4L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["87f0484c38f986062889ed50f3bf3bd462848c26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87f0484c38f986062889ed50f3bf3bd462848c26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","87f0484c38f986062889ed50f3bf3bd462848c26"]},"commit2Childs":{"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["87f0484c38f986062889ed50f3bf3bd462848c26","b0b597c65628ca9e73913a07e81691f8229bae35"],"87f0484c38f986062889ed50f3bf3bd462848c26":["2e9e5eaf280a6aa21423126b8232aa157a9b7366","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}