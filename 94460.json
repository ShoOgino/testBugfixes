{"path":"lucene/core/src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","sourceNew":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            @Override\n            public int docID() {\n              return docid;\n            }\n            \n            @Override\n            public int nextDoc() throws IOException {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              while (nextDoc() < target) {}\n              return docid;\n            }\n          };\n        } \n      };\n\t  \n\t\t\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\t\n      };\n\t  \n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList<Integer> list = new ArrayList<Integer>();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\t  \n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator<Integer> intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = intIter.next().intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \" + Arrays.toString(answer));\n      System.out.println(\"gotten: \" + Arrays.toString(docs));\n      fail();\n    }\n  }\n\n","sourceOld":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            @Override\n            public int docID() {\n              return docid;\n            }\n            \n            @Override\n            public int nextDoc() throws IOException {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              while (nextDoc() < target) {}\n              return docid;\n            }\n          };\n        } \n      };\n\t  \n\t\t\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\t\n      };\n\t  \n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList<Integer> list = new ArrayList<Integer>();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\t  \n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator<Integer> intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = intIter.next().intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \" + Arrays.toString(answer));\n      System.out.println(\"gotten: \" + Arrays.toString(docs));\n      fail();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","sourceNew":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            @Override\n            public int docID() {\n              return docid;\n            }\n            \n            @Override\n            public int nextDoc() {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            @Override\n            public int advance(int target) {\n              while (nextDoc() < target) {}\n              return docid;\n            }\n          };\n        } \n      };\n\t  \n\t\t\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\t\n      };\n\t  \n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList<Integer> list = new ArrayList<Integer>();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\t  \n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator<Integer> intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = intIter.next().intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \" + Arrays.toString(answer));\n      System.out.println(\"gotten: \" + Arrays.toString(docs));\n      fail();\n    }\n  }\n\n","sourceOld":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            @Override\n            public int docID() {\n              return docid;\n            }\n            \n            @Override\n            public int nextDoc() throws IOException {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              while (nextDoc() < target) {}\n              return docid;\n            }\n          };\n        } \n      };\n\t  \n\t\t\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\t\n      };\n\t  \n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList<Integer> list = new ArrayList<Integer>();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\t  \n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator<Integer> intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = intIter.next().intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \" + Arrays.toString(answer));\n      System.out.println(\"gotten: \" + Arrays.toString(docs));\n      fail();\n    }\n  }\n\n","bugFix":["30a558487f2298c2c19ceca9103c1b6865d64708"],"bugIntro":["fe43a17fb193c95257604ee5486e9f6e2a392c28"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","sourceNew":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            @Override\n            public int docID() {\n              return docid;\n            }\n            \n            @Override\n            public int nextDoc() {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            @Override\n            public int advance(int target) {\n              while (nextDoc() < target) {}\n              return docid;\n            }\n          };\n        } \n      };\n\t  \n\t\t\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\t\n      };\n\t  \n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList<Integer> list = new ArrayList<Integer>();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\t  \n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator<Integer> intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = intIter.next().intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \" + Arrays.toString(answer));\n      System.out.println(\"gotten: \" + Arrays.toString(docs));\n      fail();\n    }\n  }\n\n","sourceOld":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            @Override\n            public int docID() {\n              return docid;\n            }\n            \n            @Override\n            public int nextDoc() throws IOException {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              while (nextDoc() < target) {}\n              return docid;\n            }\n          };\n        } \n      };\n\t  \n\t\t\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\t\n      };\n\t  \n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList<Integer> list = new ArrayList<Integer>();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\t  \n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator<Integer> intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = intIter.next().intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \" + Arrays.toString(answer));\n      System.out.println(\"gotten: \" + Arrays.toString(docs));\n      fail();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","sourceNew":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            @Override\n            public int docID() {\n              return docid;\n            }\n            \n            @Override\n            public int nextDoc() {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            @Override\n            public int advance(int target) {\n              while (nextDoc() < target) {}\n              return docid;\n            }\n          };\n        } \n      };\n\n\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\n      };\n\n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList<Integer> list = new ArrayList<Integer>();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator<Integer> intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = intIter.next().intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \" + Arrays.toString(answer));\n      System.out.println(\"gotten: \" + Arrays.toString(docs));\n      fail();\n    }\n  }\n\n","sourceOld":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            @Override\n            public int docID() {\n              return docid;\n            }\n            \n            @Override\n            public int nextDoc() {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            @Override\n            public int advance(int target) {\n              while (nextDoc() < target) {}\n              return docid;\n            }\n          };\n        } \n      };\n\t  \n\t\t\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\t\n      };\n\t  \n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList<Integer> list = new ArrayList<Integer>();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\t  \n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator<Integer> intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = intIter.next().intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \" + Arrays.toString(answer));\n      System.out.println(\"gotten: \" + Arrays.toString(docs));\n      fail();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a","date":1363294103,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","sourceNew":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            @Override\n            public int docID() {\n              return docid;\n            }\n            \n            @Override\n            public int nextDoc() {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            @Override\n            public int advance(int target) {\n              while (nextDoc() < target) {}\n              return docid;\n            }\n            \n            @Override\n            public long cost() {\n              return 1;\n            } \n          };\n        } \n      };\n\n\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\n      };\n\n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList<Integer> list = new ArrayList<Integer>();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator<Integer> intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = intIter.next().intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \" + Arrays.toString(answer));\n      System.out.println(\"gotten: \" + Arrays.toString(docs));\n      fail();\n    }\n  }\n\n","sourceOld":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            @Override\n            public int docID() {\n              return docid;\n            }\n            \n            @Override\n            public int nextDoc() {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            @Override\n            public int advance(int target) {\n              while (nextDoc() < target) {}\n              return docid;\n            }\n          };\n        } \n      };\n\n\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\n      };\n\n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList<Integer> list = new ArrayList<Integer>();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator<Integer> intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = intIter.next().intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \" + Arrays.toString(answer));\n      System.out.println(\"gotten: \" + Arrays.toString(docs));\n      fail();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe43a17fb193c95257604ee5486e9f6e2a392c28","date":1365104925,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","sourceNew":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            @Override\n            public int docID() {\n              return docid;\n            }\n            \n            @Override\n            public int nextDoc() {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return slowAdvance(target);\n            }\n            \n            @Override\n            public long cost() {\n              return 1;\n            } \n          };\n        } \n      };\n\n\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\n      };\n\n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList<Integer> list = new ArrayList<Integer>();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator<Integer> intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = intIter.next().intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \" + Arrays.toString(answer));\n      System.out.println(\"gotten: \" + Arrays.toString(docs));\n      fail();\n    }\n  }\n\n","sourceOld":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            @Override\n            public int docID() {\n              return docid;\n            }\n            \n            @Override\n            public int nextDoc() {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            @Override\n            public int advance(int target) {\n              while (nextDoc() < target) {}\n              return docid;\n            }\n            \n            @Override\n            public long cost() {\n              return 1;\n            } \n          };\n        } \n      };\n\n\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\n      };\n\n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList<Integer> list = new ArrayList<Integer>();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator<Integer> intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = intIter.next().intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \" + Arrays.toString(answer));\n      System.out.println(\"gotten: \" + Arrays.toString(docs));\n      fail();\n    }\n  }\n\n","bugFix":["30a558487f2298c2c19ceca9103c1b6865d64708","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","sourceNew":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            @Override\n            public int docID() {\n              return docid;\n            }\n            \n            @Override\n            public int nextDoc() {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return slowAdvance(target);\n            }\n            \n            @Override\n            public long cost() {\n              return 1;\n            } \n          };\n        } \n      };\n\n\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\n      };\n\n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList<Integer> list = new ArrayList<>();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator<Integer> intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = intIter.next().intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \" + Arrays.toString(answer));\n      System.out.println(\"gotten: \" + Arrays.toString(docs));\n      fail();\n    }\n  }\n\n","sourceOld":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            @Override\n            public int docID() {\n              return docid;\n            }\n            \n            @Override\n            public int nextDoc() {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return slowAdvance(target);\n            }\n            \n            @Override\n            public long cost() {\n              return 1;\n            } \n          };\n        } \n      };\n\n\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\n      };\n\n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList<Integer> list = new ArrayList<Integer>();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator<Integer> intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = intIter.next().intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \" + Arrays.toString(answer));\n      System.out.println(\"gotten: \" + Arrays.toString(docs));\n      fail();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ea8c8c94ae9da9a366175e2abbe1dde3aa0453","date":1402659583,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","sourceNew":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n      @Override\n      public long ramBytesUsed() {\n        return 0L;\n      }\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            @Override\n            public int docID() {\n              return docid;\n            }\n            \n            @Override\n            public int nextDoc() {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return slowAdvance(target);\n            }\n            \n            @Override\n            public long cost() {\n              return 1;\n            } \n          };\n        } \n      };\n\n\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\n      };\n\n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList<Integer> list = new ArrayList<>();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator<Integer> intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = intIter.next().intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \" + Arrays.toString(answer));\n      System.out.println(\"gotten: \" + Arrays.toString(docs));\n      fail();\n    }\n  }\n\n","sourceOld":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            @Override\n            public int docID() {\n              return docid;\n            }\n            \n            @Override\n            public int nextDoc() {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return slowAdvance(target);\n            }\n            \n            @Override\n            public long cost() {\n              return 1;\n            } \n          };\n        } \n      };\n\n\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\n      };\n\n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList<Integer> list = new ArrayList<>();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator<Integer> intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = intIter.next().intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \" + Arrays.toString(answer));\n      System.out.println(\"gotten: \" + Arrays.toString(docs));\n      fail();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","sourceNew":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n      @Override\n      public long ramBytesUsed() {\n        return 0L;\n      }\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            @Override\n            public int docID() {\n              return docid;\n            }\n            \n            @Override\n            public int nextDoc() {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return slowAdvance(target);\n            }\n            \n            @Override\n            public long cost() {\n              return 1;\n            } \n          };\n        } \n      };\n\n\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\n      };\n\n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList<Integer> list = new ArrayList<>();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator<Integer> intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = intIter.next().intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \" + Arrays.toString(answer));\n      System.out.println(\"gotten: \" + Arrays.toString(docs));\n      fail();\n    }\n  }\n\n","sourceOld":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            @Override\n            public int docID() {\n              return docid;\n            }\n            \n            @Override\n            public int nextDoc() {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return slowAdvance(target);\n            }\n            \n            @Override\n            public long cost() {\n              return 1;\n            } \n          };\n        } \n      };\n\n\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\n      };\n\n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList<Integer> list = new ArrayList<>();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator<Integer> intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = intIter.next().intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \" + Arrays.toString(answer));\n      System.out.println(\"gotten: \" + Arrays.toString(docs));\n      fail();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d52e48927ca4ef3655a261f2230b968b6fdf3608","date":1444652107,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFilteredDocIdSet#testFilteredDocIdSet().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","sourceNew":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n      @Override\n      public long ramBytesUsed() {\n        return 0L;\n      }\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            @Override\n            public int docID() {\n              return docid;\n            }\n            \n            @Override\n            public int nextDoc() {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return slowAdvance(target);\n            }\n            \n            @Override\n            public long cost() {\n              return 1;\n            } \n          };\n        } \n      };\n\n\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\n      };\n\n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList<Integer> list = new ArrayList<>();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator<Integer> intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = intIter.next().intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \" + Arrays.toString(answer));\n      System.out.println(\"gotten: \" + Arrays.toString(docs));\n      fail();\n    }\n  }\n\n","sourceOld":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n      @Override\n      public long ramBytesUsed() {\n        return 0L;\n      }\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            @Override\n            public int docID() {\n              return docid;\n            }\n            \n            @Override\n            public int nextDoc() {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return slowAdvance(target);\n            }\n            \n            @Override\n            public long cost() {\n              return 1;\n            } \n          };\n        } \n      };\n\n\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\n      };\n\n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList<Integer> list = new ArrayList<>();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator<Integer> intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = intIter.next().intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \" + Arrays.toString(answer));\n      System.out.println(\"gotten: \" + Arrays.toString(docs));\n      fail();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe43a17fb193c95257604ee5486e9f6e2a392c28":["7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["fe43a17fb193c95257604ee5486e9f6e2a392c28"],"54ea8c8c94ae9da9a366175e2abbe1dde3aa0453":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["54ea8c8c94ae9da9a366175e2abbe1dde3aa0453"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","54ea8c8c94ae9da9a366175e2abbe1dde3aa0453"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d52e48927ca4ef3655a261f2230b968b6fdf3608"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"]},"commit2Childs":{"fe43a17fb193c95257604ee5486e9f6e2a392c28":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["54ea8c8c94ae9da9a366175e2abbe1dde3aa0453","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"54ea8c8c94ae9da9a366175e2abbe1dde3aa0453":["d52e48927ca4ef3655a261f2230b968b6fdf3608","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a":["fe43a17fb193c95257604ee5486e9f6e2a392c28"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}