{"path":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#tathamSort(Node).mjava","commits":[{"id":"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","date":1531585717,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#tathamSort(Node).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Simon Tatham's doubly-linked list O(n log n) mergesort\n   * see: http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n   **/\n  private static final void tathamSort(Node list) {\n    Node p, q, e, tail;\n    int i, numMerges, pSize, qSize;\n    int inSize = 1;\n\n    if (list == null) {\n      return;\n    }\n\n    do {\n      p = list;\n      list = null;\n      tail = null;\n      // count number of merges in this pass\n      numMerges = 0;\n\n      while(p != null) {\n        ++numMerges;\n        // step 'insize' places along from p\n        q = p;\n        for (i = 0, pSize = 0; i < inSize && q != null; ++i, ++pSize, q = q.nextZ);\n        // if q hasn't fallen off end, we have two lists to merge\n        qSize = inSize;\n\n        // now we have two lists; merge\n        while (pSize > 0 || (qSize > 0 && q != null)) {\n          // decide whether next element of merge comes from p or q\n          if (pSize == 0) {\n            // p is empty; e must come from q\n            e = q;\n            q = q.nextZ;\n            --qSize;\n          } else if (qSize == 0 || q == null) {\n            // q is empty; e must come from p\n            e = p;\n            p = p.nextZ;\n            --pSize;\n          } else if (Long.compareUnsigned(p.morton, q.morton) <= 0) {\n            // first element of p is lower (or same); e must come from p\n            e = p;\n            p = p.nextZ;\n            --pSize;\n          } else {\n            // first element of q is lower; e must come from q\n            e = q;\n            q = q.nextZ;\n            --qSize;\n          }\n\n          if (tail != null) {\n            tail.nextZ = e;\n          } else {\n            list = e;\n          }\n          // maintain reverse pointers\n          e.previousZ = tail;\n          tail = e;\n        }\n        // now p has stepped 'insize' places along, and q has too\n        p = q;\n      }\n\n      tail.nextZ = null;\n      inSize *= 2;\n    } while (numMerges > 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#tathamSort(Node).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Simon Tatham's doubly-linked list O(n log n) mergesort\n   * see: http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n   **/\n  private static final void tathamSort(Node list) {\n    Node p, q, e, tail;\n    int i, numMerges, pSize, qSize;\n    int inSize = 1;\n\n    if (list == null) {\n      return;\n    }\n\n    do {\n      p = list;\n      list = null;\n      tail = null;\n      // count number of merges in this pass\n      numMerges = 0;\n\n      while(p != null) {\n        ++numMerges;\n        // step 'insize' places along from p\n        q = p;\n        for (i = 0, pSize = 0; i < inSize && q != null; ++i, ++pSize, q = q.nextZ);\n        // if q hasn't fallen off end, we have two lists to merge\n        qSize = inSize;\n\n        // now we have two lists; merge\n        while (pSize > 0 || (qSize > 0 && q != null)) {\n          // decide whether next element of merge comes from p or q\n          if (pSize == 0) {\n            // p is empty; e must come from q\n            e = q;\n            q = q.nextZ;\n            --qSize;\n          } else if (qSize == 0 || q == null) {\n            // q is empty; e must come from p\n            e = p;\n            p = p.nextZ;\n            --pSize;\n          } else if (Long.compareUnsigned(p.morton, q.morton) <= 0) {\n            // first element of p is lower (or same); e must come from p\n            e = p;\n            p = p.nextZ;\n            --pSize;\n          } else {\n            // first element of q is lower; e must come from q\n            e = q;\n            q = q.nextZ;\n            --qSize;\n          }\n\n          if (tail != null) {\n            tail.nextZ = e;\n          } else {\n            list = e;\n          }\n          // maintain reverse pointers\n          e.previousZ = tail;\n          tail = e;\n        }\n        // now p has stepped 'insize' places along, and q has too\n        p = q;\n      }\n\n      tail.nextZ = null;\n      inSize *= 2;\n    } while (numMerges > 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#tathamSort(Node).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Simon Tatham's doubly-linked list O(n log n) mergesort\n   * see: http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n   **/\n  private static final void tathamSort(Node list) {\n    Node p, q, e, tail;\n    int i, numMerges, pSize, qSize;\n    int inSize = 1;\n\n    if (list == null) {\n      return;\n    }\n\n    do {\n      p = list;\n      list = null;\n      tail = null;\n      // count number of merges in this pass\n      numMerges = 0;\n\n      while(p != null) {\n        ++numMerges;\n        // step 'insize' places along from p\n        q = p;\n        for (i = 0, pSize = 0; i < inSize && q != null; ++i, ++pSize, q = q.nextZ);\n        // if q hasn't fallen off end, we have two lists to merge\n        qSize = inSize;\n\n        // now we have two lists; merge\n        while (pSize > 0 || (qSize > 0 && q != null)) {\n          // decide whether next element of merge comes from p or q\n          if (pSize == 0) {\n            // p is empty; e must come from q\n            e = q;\n            q = q.nextZ;\n            --qSize;\n          } else if (qSize == 0 || q == null) {\n            // q is empty; e must come from p\n            e = p;\n            p = p.nextZ;\n            --pSize;\n          } else if (Long.compareUnsigned(p.morton, q.morton) <= 0) {\n            // first element of p is lower (or same); e must come from p\n            e = p;\n            p = p.nextZ;\n            --pSize;\n          } else {\n            // first element of q is lower; e must come from q\n            e = q;\n            q = q.nextZ;\n            --qSize;\n          }\n\n          if (tail != null) {\n            tail.nextZ = e;\n          } else {\n            list = e;\n          }\n          // maintain reverse pointers\n          e.previousZ = tail;\n          tail = e;\n        }\n        // now p has stepped 'insize' places along, and q has too\n        p = q;\n      }\n\n      tail.nextZ = null;\n      inSize *= 2;\n    } while (numMerges > 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48333a719807c020be5d5ef1773d347156d46170","date":1537390171,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#tathamSort(Node).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#tathamSort(Node).mjava","sourceNew":"  /**\n   * Simon Tatham's doubly-linked list O(n log n) mergesort\n   * see: http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n   **/\n  private static final void tathamSort(Node list) {\n    Node p, q, e, tail;\n    int i, numMerges, pSize, qSize;\n    int inSize = 1;\n\n    if (list == null) {\n      return;\n    }\n\n    do {\n      p = list;\n      list = null;\n      tail = null;\n      // count number of merges in this pass\n      numMerges = 0;\n\n      while(p != null) {\n        ++numMerges;\n        // step 'insize' places along from p\n        q = p;\n        for (i = 0, pSize = 0; i < inSize && q != null; ++i, ++pSize, q = q.nextZ);\n        // if q hasn't fallen off end, we have two lists to merge\n        qSize = inSize;\n\n        // now we have two lists; merge\n        while (pSize > 0 || (qSize > 0 && q != null)) {\n          if (pSize != 0 && (qSize == 0 || q == null || Long.compareUnsigned(p.morton, q.morton) <= 0)) {\n            e = p;\n            p = p.nextZ;\n            --pSize;\n          } else {\n            e = q;\n            q = q.nextZ;\n            --qSize;\n          }\n\n          if (tail != null) {\n            tail.nextZ = e;\n          } else {\n            list = e;\n          }\n          // maintain reverse pointers\n          e.previousZ = tail;\n          tail = e;\n        }\n        // now p has stepped 'insize' places along, and q has too\n        p = q;\n      }\n\n      tail.nextZ = null;\n      inSize *= 2;\n    } while (numMerges > 1);\n  }\n\n","sourceOld":"  /**\n   * Simon Tatham's doubly-linked list O(n log n) mergesort\n   * see: http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n   **/\n  private static final void tathamSort(Node list) {\n    Node p, q, e, tail;\n    int i, numMerges, pSize, qSize;\n    int inSize = 1;\n\n    if (list == null) {\n      return;\n    }\n\n    do {\n      p = list;\n      list = null;\n      tail = null;\n      // count number of merges in this pass\n      numMerges = 0;\n\n      while(p != null) {\n        ++numMerges;\n        // step 'insize' places along from p\n        q = p;\n        for (i = 0, pSize = 0; i < inSize && q != null; ++i, ++pSize, q = q.nextZ);\n        // if q hasn't fallen off end, we have two lists to merge\n        qSize = inSize;\n\n        // now we have two lists; merge\n        while (pSize > 0 || (qSize > 0 && q != null)) {\n          // decide whether next element of merge comes from p or q\n          if (pSize == 0) {\n            // p is empty; e must come from q\n            e = q;\n            q = q.nextZ;\n            --qSize;\n          } else if (qSize == 0 || q == null) {\n            // q is empty; e must come from p\n            e = p;\n            p = p.nextZ;\n            --pSize;\n          } else if (Long.compareUnsigned(p.morton, q.morton) <= 0) {\n            // first element of p is lower (or same); e must come from p\n            e = p;\n            p = p.nextZ;\n            --pSize;\n          } else {\n            // first element of q is lower; e must come from q\n            e = q;\n            q = q.nextZ;\n            --qSize;\n          }\n\n          if (tail != null) {\n            tail.nextZ = e;\n          } else {\n            list = e;\n          }\n          // maintain reverse pointers\n          e.previousZ = tail;\n          tail = e;\n        }\n        // now p has stepped 'insize' places along, and q has too\n        p = q;\n      }\n\n      tail.nextZ = null;\n      inSize *= 2;\n    } while (numMerges > 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#tathamSort(Node).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#tathamSort(Node).mjava","sourceNew":"  /**\n   * Simon Tatham's doubly-linked list O(n log n) mergesort\n   * see: http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n   **/\n  private static final void tathamSort(Node list) {\n    Node p, q, e, tail;\n    int i, numMerges, pSize, qSize;\n    int inSize = 1;\n\n    if (list == null) {\n      return;\n    }\n\n    do {\n      p = list;\n      list = null;\n      tail = null;\n      // count number of merges in this pass\n      numMerges = 0;\n\n      while(p != null) {\n        ++numMerges;\n        // step 'insize' places along from p\n        q = p;\n        for (i = 0, pSize = 0; i < inSize && q != null; ++i, ++pSize, q = q.nextZ);\n        // if q hasn't fallen off end, we have two lists to merge\n        qSize = inSize;\n\n        // now we have two lists; merge\n        while (pSize > 0 || (qSize > 0 && q != null)) {\n          if (pSize != 0 && (qSize == 0 || q == null || Long.compareUnsigned(p.morton, q.morton) <= 0)) {\n            e = p;\n            p = p.nextZ;\n            --pSize;\n          } else {\n            e = q;\n            q = q.nextZ;\n            --qSize;\n          }\n\n          if (tail != null) {\n            tail.nextZ = e;\n          } else {\n            list = e;\n          }\n          // maintain reverse pointers\n          e.previousZ = tail;\n          tail = e;\n        }\n        // now p has stepped 'insize' places along, and q has too\n        p = q;\n      }\n\n      tail.nextZ = null;\n      inSize *= 2;\n    } while (numMerges > 1);\n  }\n\n","sourceOld":"  /**\n   * Simon Tatham's doubly-linked list O(n log n) mergesort\n   * see: http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n   **/\n  private static final void tathamSort(Node list) {\n    Node p, q, e, tail;\n    int i, numMerges, pSize, qSize;\n    int inSize = 1;\n\n    if (list == null) {\n      return;\n    }\n\n    do {\n      p = list;\n      list = null;\n      tail = null;\n      // count number of merges in this pass\n      numMerges = 0;\n\n      while(p != null) {\n        ++numMerges;\n        // step 'insize' places along from p\n        q = p;\n        for (i = 0, pSize = 0; i < inSize && q != null; ++i, ++pSize, q = q.nextZ);\n        // if q hasn't fallen off end, we have two lists to merge\n        qSize = inSize;\n\n        // now we have two lists; merge\n        while (pSize > 0 || (qSize > 0 && q != null)) {\n          if (pSize != 0 && (qSize == 0 || q == null || Long.compareUnsigned(p.morton, q.morton) <= 0)) {\n            e = p;\n            p = p.nextZ;\n            --pSize;\n          } else {\n            e = q;\n            q = q.nextZ;\n            --qSize;\n          }\n\n          if (tail != null) {\n            tail.nextZ = e;\n          } else {\n            list = e;\n          }\n          // maintain reverse pointers\n          e.previousZ = tail;\n          tail = e;\n        }\n        // now p has stepped 'insize' places along, and q has too\n        p = q;\n      }\n\n      tail.nextZ = null;\n      inSize *= 2;\n    } while (numMerges > 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["48333a719807c020be5d5ef1773d347156d46170"],"48333a719807c020be5d5ef1773d347156d46170":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"]},"commit2Childs":{"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","48333a719807c020be5d5ef1773d347156d46170","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"48333a719807c020be5d5ef1773d347156d46170":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}