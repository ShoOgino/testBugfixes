{"path":"contrib/analyzers/src/test/org/apache/lucene/analysis/el/GreekAnalyzerTest#assertAnalyzesTo(Analyzer,String,String[]).mjava","commits":[{"id":"79bcc705ddb2efccac2124e1382a0c55a820e201","date":1114471417,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/analyzers/src/test/org/apache/lucene/analysis/el/GreekAnalyzerTest#assertAnalyzesTo(Analyzer,String,String[]).mjava","pathOld":"/dev/null","sourceNew":"\t/**\r\n\t * A helper method copied from org.apache.lucene.analysis.TestAnalyzers.\r\n\t *\r\n\t * @param a\t\t\tthe Analyzer to test\r\n\t * @param input\t\tan input String to analyze\r\n\t * @param output\ta String[] with the results of the analysis\r\n\t * @throws Exception in case an error occurs\r\n\t */\r\n\tprivate void assertAnalyzesTo(Analyzer a, String input, String[] output) throws Exception {\r\n\t\tTokenStream ts = a.tokenStream(\"dummy\", new StringReader(input));\r\n\t\tfor (int i=0; i<output.length; i++) {\r\n\t\t\tToken t = ts.next();\r\n\t\t\tassertNotNull(t);\r\n\t\t\tassertEquals(t.termText(), output[i]);\r\n\t\t}\r\n\t\tassertNull(ts.next());\r\n\t\tts.close();\r\n\t}\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/src/test/org/apache/lucene/analysis/el/GreekAnalyzerTest#assertAnalyzesTo(Analyzer,String,String[]).mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/el/GreekAnalyzerTest#assertAnalyzesTo(Analyzer,String,String[]).mjava","sourceNew":"\t/**\r\n\t * A helper method copied from org.apache.lucene.analysis.TestAnalyzers.\r\n\t *\r\n\t * @param a\t\t\tthe Analyzer to test\r\n\t * @param input\t\tan input String to analyze\r\n\t * @param output\ta String[] with the results of the analysis\r\n\t * @throws Exception in case an error occurs\r\n\t */\r\n\tprivate void assertAnalyzesTo(Analyzer a, String input, String[] output) throws Exception {\r\n\t\tTokenStream ts = a.tokenStream(\"dummy\", new StringReader(input));\r\n                final Token reusableToken = new Token();\r\n\t\tfor (int i=0; i<output.length; i++) {\r\n\t\t        Token nextToken = ts.next(reusableToken);\r\n\t\t\tassertNotNull(nextToken);\r\n\t\t\tassertEquals(nextToken.term(), output[i]);\r\n\t\t}\r\n\t\tassertNull(ts.next(reusableToken));\r\n\t\tts.close();\r\n\t}\r\n\n","sourceOld":"\t/**\r\n\t * A helper method copied from org.apache.lucene.analysis.TestAnalyzers.\r\n\t *\r\n\t * @param a\t\t\tthe Analyzer to test\r\n\t * @param input\t\tan input String to analyze\r\n\t * @param output\ta String[] with the results of the analysis\r\n\t * @throws Exception in case an error occurs\r\n\t */\r\n\tprivate void assertAnalyzesTo(Analyzer a, String input, String[] output) throws Exception {\r\n\t\tTokenStream ts = a.tokenStream(\"dummy\", new StringReader(input));\r\n\t\tfor (int i=0; i<output.length; i++) {\r\n\t\t\tToken t = ts.next();\r\n\t\t\tassertNotNull(t);\r\n\t\t\tassertEquals(t.termText(), output[i]);\r\n\t\t}\r\n\t\tassertNull(ts.next());\r\n\t\tts.close();\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a361a621b184d9b73c9c9a37323a9845b8f8260","date":1226370946,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/analyzers/src/test/org/apache/lucene/analysis/el/GreekAnalyzerTest#assertAnalyzesTo(Analyzer,String,String[]).mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/el/GreekAnalyzerTest#assertAnalyzesTo(Analyzer,String,String[]).mjava","sourceNew":"\t/**\n\t * A helper method copied from org.apache.lucene.analysis.TestAnalyzers.\n\t *\n\t * @param a\t\t\tthe Analyzer to test\n\t * @param input\t\tan input String to analyze\n\t * @param output\ta String[] with the results of the analysis\n\t * @throws Exception in case an error occurs\n\t */\n\tprivate void assertAnalyzesTo(Analyzer a, String input, String[] output) throws Exception {\n\t\tTokenStream ts = a.tokenStream(\"dummy\", new StringReader(input));\n                final Token reusableToken = new Token();\n\t\tfor (int i=0; i<output.length; i++) {\n\t\t        Token nextToken = ts.next(reusableToken);\n\t\t\tassertNotNull(nextToken);\n\t\t\tassertEquals(nextToken.term(), output[i]);\n\t\t}\n\t\tassertNull(ts.next(reusableToken));\n\t\tts.close();\n\t}\n\n","sourceOld":"\t/**\r\n\t * A helper method copied from org.apache.lucene.analysis.TestAnalyzers.\r\n\t *\r\n\t * @param a\t\t\tthe Analyzer to test\r\n\t * @param input\t\tan input String to analyze\r\n\t * @param output\ta String[] with the results of the analysis\r\n\t * @throws Exception in case an error occurs\r\n\t */\r\n\tprivate void assertAnalyzesTo(Analyzer a, String input, String[] output) throws Exception {\r\n\t\tTokenStream ts = a.tokenStream(\"dummy\", new StringReader(input));\r\n                final Token reusableToken = new Token();\r\n\t\tfor (int i=0; i<output.length; i++) {\r\n\t\t        Token nextToken = ts.next(reusableToken);\r\n\t\t\tassertNotNull(nextToken);\r\n\t\t\tassertEquals(nextToken.term(), output[i]);\r\n\t\t}\r\n\t\tassertNull(ts.next(reusableToken));\r\n\t\tts.close();\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/el/GreekAnalyzerTest#assertAnalyzesTo(Analyzer,String,String[]).mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/el/GreekAnalyzerTest#assertAnalyzesTo(Analyzer,String,String[]).mjava","sourceNew":"\t/**\n\t * A helper method copied from org.apache.lucene.analysis.TestAnalyzers.\n\t *\n\t * @param a\t\t\tthe Analyzer to test\n\t * @param input\t\tan input String to analyze\n\t * @param output\ta String[] with the results of the analysis\n\t * @throws Exception in case an error occurs\n\t */\n\tprivate void assertAnalyzesTo(Analyzer a, String input, String[] output) throws Exception {\n\t\tTokenStream ts = a.tokenStream(\"dummy\", new StringReader(input));\n                final Token reusableToken = new Token();\n\t\tfor (int i=0; i<output.length; i++) {\n\t\t        Token nextToken = ts.next(reusableToken);\n\t\t\tassertNotNull(nextToken);\n\t\t\tassertEquals(nextToken.term(), output[i]);\n\t\t}\n\t\tassertNull(ts.next(reusableToken));\n\t\tts.close();\n\t}\n\n","sourceOld":"\t/**\n\t * A helper method copied from org.apache.lucene.analysis.TestAnalyzers.\n\t *\n\t * @param a\t\t\tthe Analyzer to test\n\t * @param input\t\tan input String to analyze\n\t * @param output\ta String[] with the results of the analysis\n\t * @throws Exception in case an error occurs\n\t */\n\tprivate void assertAnalyzesTo(Analyzer a, String input, String[] output) throws Exception {\n\t\tTokenStream ts = a.tokenStream(\"dummy\", new StringReader(input));\n                final Token reusableToken = new Token();\n\t\tfor (int i=0; i<output.length; i++) {\n\t\t        Token nextToken = ts.next(reusableToken);\n\t\t\tassertNotNull(nextToken);\n\t\t\tassertEquals(nextToken.term(), output[i]);\n\t\t}\n\t\tassertNull(ts.next(reusableToken));\n\t\tts.close();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["79bcc705ddb2efccac2124e1382a0c55a820e201"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"79bcc705ddb2efccac2124e1382a0c55a820e201":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"79bcc705ddb2efccac2124e1382a0c55a820e201":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["79bcc705ddb2efccac2124e1382a0c55a820e201"],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}