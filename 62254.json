{"path":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#doSearching(ExecutorService,long).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#doSearching(ExecutorService,long).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSearcherManager#doSearching(ExecutorService,long).mjava","sourceNew":"  @Override\n  protected void doSearching(ExecutorService es, final long stopTime) throws Exception {\n\n    Thread reopenThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while(System.currentTimeMillis() < stopTime) {\n            Thread.sleep(_TestUtil.nextInt(random, 1, 100));\n            writer.commit();\n            Thread.sleep(_TestUtil.nextInt(random, 1, 5));\n            if (mgr.maybeReopen()) {\n              lifetimeMGR.prune(pruner);\n            }\n          }\n        } catch (Throwable t) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: reopen thread hit exc\");\n            t.printStackTrace(System.out);\n          }\n          failed.set(true);\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    reopenThread.setDaemon(true);\n    reopenThread.start();\n\n    runSearchThreads(stopTime);\n\n    reopenThread.join();\n  }\n\n","sourceOld":"  @Override\n  protected void doSearching(ExecutorService es, final long stopTime) throws Exception {\n\n    Thread reopenThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while(System.currentTimeMillis() < stopTime) {\n            Thread.sleep(_TestUtil.nextInt(random, 1, 100));\n            writer.commit();\n            Thread.sleep(_TestUtil.nextInt(random, 1, 5));\n            if (mgr.maybeReopen()) {\n              lifetimeMGR.prune(pruner);\n            }\n          }\n        } catch (Throwable t) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: reopen thread hit exc\");\n            t.printStackTrace(System.out);\n          }\n          failed.set(true);\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    reopenThread.setDaemon(true);\n    reopenThread.start();\n\n    runSearchThreads(stopTime);\n\n    reopenThread.join();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e81b0b3c14cf61c8ec366450276ab80654f7d0d","date":1329233774,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#doSearching(ExecutorService,long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#doSearching(ExecutorService,long).mjava","sourceNew":"  @Override\n  protected void doSearching(ExecutorService es, final long stopTime) throws Exception {\n\n    Thread reopenThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while(System.currentTimeMillis() < stopTime) {\n            Thread.sleep(_TestUtil.nextInt(random, 1, 100));\n            writer.commit();\n            Thread.sleep(_TestUtil.nextInt(random, 1, 5));\n            if (mgr.maybeRefresh()) {\n              lifetimeMGR.prune(pruner);\n            }\n          }\n        } catch (Throwable t) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: reopen thread hit exc\");\n            t.printStackTrace(System.out);\n          }\n          failed.set(true);\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    reopenThread.setDaemon(true);\n    reopenThread.start();\n\n    runSearchThreads(stopTime);\n\n    reopenThread.join();\n  }\n\n","sourceOld":"  @Override\n  protected void doSearching(ExecutorService es, final long stopTime) throws Exception {\n\n    Thread reopenThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while(System.currentTimeMillis() < stopTime) {\n            Thread.sleep(_TestUtil.nextInt(random, 1, 100));\n            writer.commit();\n            Thread.sleep(_TestUtil.nextInt(random, 1, 5));\n            if (mgr.maybeReopen()) {\n              lifetimeMGR.prune(pruner);\n            }\n          }\n        } catch (Throwable t) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: reopen thread hit exc\");\n            t.printStackTrace(System.out);\n          }\n          failed.set(true);\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    reopenThread.setDaemon(true);\n    reopenThread.start();\n\n    runSearchThreads(stopTime);\n\n    reopenThread.join();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#doSearching(ExecutorService,long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#doSearching(ExecutorService,long).mjava","sourceNew":"  @Override\n  protected void doSearching(ExecutorService es, final long stopTime) throws Exception {\n\n    Thread reopenThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while(System.currentTimeMillis() < stopTime) {\n            Thread.sleep(_TestUtil.nextInt(random(), 1, 100));\n            writer.commit();\n            Thread.sleep(_TestUtil.nextInt(random(), 1, 5));\n            if (mgr.maybeRefresh()) {\n              lifetimeMGR.prune(pruner);\n            }\n          }\n        } catch (Throwable t) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: reopen thread hit exc\");\n            t.printStackTrace(System.out);\n          }\n          failed.set(true);\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    reopenThread.setDaemon(true);\n    reopenThread.start();\n\n    runSearchThreads(stopTime);\n\n    reopenThread.join();\n  }\n\n","sourceOld":"  @Override\n  protected void doSearching(ExecutorService es, final long stopTime) throws Exception {\n\n    Thread reopenThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while(System.currentTimeMillis() < stopTime) {\n            Thread.sleep(_TestUtil.nextInt(random, 1, 100));\n            writer.commit();\n            Thread.sleep(_TestUtil.nextInt(random, 1, 5));\n            if (mgr.maybeRefresh()) {\n              lifetimeMGR.prune(pruner);\n            }\n          }\n        } catch (Throwable t) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: reopen thread hit exc\");\n            t.printStackTrace(System.out);\n          }\n          failed.set(true);\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    reopenThread.setDaemon(true);\n    reopenThread.start();\n\n    runSearchThreads(stopTime);\n\n    reopenThread.join();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50cdf7ad2df581562492397453567ab551cc74f9","date":1335885944,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#doSearching(ExecutorService,long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#doSearching(ExecutorService,long).mjava","sourceNew":"  @Override\n  protected void doSearching(ExecutorService es, final long stopTime) throws Exception {\n\n    Thread reopenThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while(System.currentTimeMillis() < stopTime) {\n            Thread.sleep(_TestUtil.nextInt(random(), 1, 100));\n            writer.commit();\n            Thread.sleep(_TestUtil.nextInt(random(), 1, 5));\n            boolean block = random().nextBoolean();\n            if (block) {\n              mgr.maybeRefreshBlocking();\n              lifetimeMGR.prune(pruner);\n            } else if (mgr.maybeRefresh()) {\n              lifetimeMGR.prune(pruner);\n            }\n          }\n        } catch (Throwable t) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: reopen thread hit exc\");\n            t.printStackTrace(System.out);\n          }\n          failed.set(true);\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    reopenThread.setDaemon(true);\n    reopenThread.start();\n\n    runSearchThreads(stopTime);\n\n    reopenThread.join();\n  }\n\n","sourceOld":"  @Override\n  protected void doSearching(ExecutorService es, final long stopTime) throws Exception {\n\n    Thread reopenThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while(System.currentTimeMillis() < stopTime) {\n            Thread.sleep(_TestUtil.nextInt(random(), 1, 100));\n            writer.commit();\n            Thread.sleep(_TestUtil.nextInt(random(), 1, 5));\n            if (mgr.maybeRefresh()) {\n              lifetimeMGR.prune(pruner);\n            }\n          }\n        } catch (Throwable t) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: reopen thread hit exc\");\n            t.printStackTrace(System.out);\n          }\n          failed.set(true);\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    reopenThread.setDaemon(true);\n    reopenThread.start();\n\n    runSearchThreads(stopTime);\n\n    reopenThread.join();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed7ba385535ed5109fa3082c791190945b382538","date":1380021240,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#doSearching(ExecutorService,long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#doSearching(ExecutorService,long).mjava","sourceNew":"  @Override\n  protected void doSearching(ExecutorService es, final long stopTime) throws Exception {\n\n    Thread reopenThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          if (VERBOSE) {\n            System.out.println(\"[\" + Thread.currentThread().getName() + \"]: launch reopen thread\");\n          }\n\n          while(System.currentTimeMillis() < stopTime) {\n            Thread.sleep(_TestUtil.nextInt(random(), 1, 100));\n            writer.commit();\n            Thread.sleep(_TestUtil.nextInt(random(), 1, 5));\n            boolean block = random().nextBoolean();\n            if (block) {\n              mgr.maybeRefreshBlocking();\n              lifetimeMGR.prune(pruner);\n            } else if (mgr.maybeRefresh()) {\n              lifetimeMGR.prune(pruner);\n            }\n          }\n        } catch (Throwable t) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: reopen thread hit exc\");\n            t.printStackTrace(System.out);\n          }\n          failed.set(true);\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    reopenThread.setDaemon(true);\n    reopenThread.start();\n\n    runSearchThreads(stopTime);\n\n    reopenThread.join();\n  }\n\n","sourceOld":"  @Override\n  protected void doSearching(ExecutorService es, final long stopTime) throws Exception {\n\n    Thread reopenThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          while(System.currentTimeMillis() < stopTime) {\n            Thread.sleep(_TestUtil.nextInt(random(), 1, 100));\n            writer.commit();\n            Thread.sleep(_TestUtil.nextInt(random(), 1, 5));\n            boolean block = random().nextBoolean();\n            if (block) {\n              mgr.maybeRefreshBlocking();\n              lifetimeMGR.prune(pruner);\n            } else if (mgr.maybeRefresh()) {\n              lifetimeMGR.prune(pruner);\n            }\n          }\n        } catch (Throwable t) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: reopen thread hit exc\");\n            t.printStackTrace(System.out);\n          }\n          failed.set(true);\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    reopenThread.setDaemon(true);\n    reopenThread.start();\n\n    runSearchThreads(stopTime);\n\n    reopenThread.join();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#doSearching(ExecutorService,long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#doSearching(ExecutorService,long).mjava","sourceNew":"  @Override\n  protected void doSearching(ExecutorService es, final long stopTime) throws Exception {\n\n    Thread reopenThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          if (VERBOSE) {\n            System.out.println(\"[\" + Thread.currentThread().getName() + \"]: launch reopen thread\");\n          }\n\n          while(System.currentTimeMillis() < stopTime) {\n            Thread.sleep(TestUtil.nextInt(random(), 1, 100));\n            writer.commit();\n            Thread.sleep(TestUtil.nextInt(random(), 1, 5));\n            boolean block = random().nextBoolean();\n            if (block) {\n              mgr.maybeRefreshBlocking();\n              lifetimeMGR.prune(pruner);\n            } else if (mgr.maybeRefresh()) {\n              lifetimeMGR.prune(pruner);\n            }\n          }\n        } catch (Throwable t) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: reopen thread hit exc\");\n            t.printStackTrace(System.out);\n          }\n          failed.set(true);\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    reopenThread.setDaemon(true);\n    reopenThread.start();\n\n    runSearchThreads(stopTime);\n\n    reopenThread.join();\n  }\n\n","sourceOld":"  @Override\n  protected void doSearching(ExecutorService es, final long stopTime) throws Exception {\n\n    Thread reopenThread = new Thread() {\n      @Override\n      public void run() {\n        try {\n          if (VERBOSE) {\n            System.out.println(\"[\" + Thread.currentThread().getName() + \"]: launch reopen thread\");\n          }\n\n          while(System.currentTimeMillis() < stopTime) {\n            Thread.sleep(_TestUtil.nextInt(random(), 1, 100));\n            writer.commit();\n            Thread.sleep(_TestUtil.nextInt(random(), 1, 5));\n            boolean block = random().nextBoolean();\n            if (block) {\n              mgr.maybeRefreshBlocking();\n              lifetimeMGR.prune(pruner);\n            } else if (mgr.maybeRefresh()) {\n              lifetimeMGR.prune(pruner);\n            }\n          }\n        } catch (Throwable t) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: reopen thread hit exc\");\n            t.printStackTrace(System.out);\n          }\n          failed.set(true);\n          throw new RuntimeException(t);\n        }\n      }\n      };\n    reopenThread.setDaemon(true);\n    reopenThread.start();\n\n    runSearchThreads(stopTime);\n\n    reopenThread.join();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6613659748fe4411a7dcf85266e55db1f95f7315":["ed7ba385535ed5109fa3082c791190945b382538"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6e81b0b3c14cf61c8ec366450276ab80654f7d0d"],"50cdf7ad2df581562492397453567ab551cc74f9":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"6e81b0b3c14cf61c8ec366450276ab80654f7d0d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6613659748fe4411a7dcf85266e55db1f95f7315"],"ed7ba385535ed5109fa3082c791190945b382538":["50cdf7ad2df581562492397453567ab551cc74f9"]},"commit2Childs":{"6613659748fe4411a7dcf85266e55db1f95f7315":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["6e81b0b3c14cf61c8ec366450276ab80654f7d0d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["50cdf7ad2df581562492397453567ab551cc74f9"],"50cdf7ad2df581562492397453567ab551cc74f9":["ed7ba385535ed5109fa3082c791190945b382538"],"6e81b0b3c14cf61c8ec366450276ab80654f7d0d":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"ed7ba385535ed5109fa3082c791190945b382538":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}