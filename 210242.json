{"path":"lucene/src/java/org/apache/lucene/search/Similarity#idfExplain(Collection[Term],IndexSearcher).mjava","commits":[{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Similarity#idfExplain(Collection[Term],IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Similarity#idfExplain(Collection[Term],Searcher).mjava","sourceNew":"  /**\n   * Computes a score factor for a phrase.\n   * \n   * <p>\n   * The default implementation sums the idf factor for\n   * each term in the phrase.\n   * \n   * @param terms the terms in the phrase\n   * @param searcher the document collection being searched\n   * @return an IDFExplain object that includes both an idf \n   *         score factor for the phrase and an explanation \n   *         for each term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(Collection<Term> terms, IndexSearcher searcher) throws IOException {\n    final int max = searcher.maxDoc();\n    float idf = 0.0f;\n    final StringBuilder exp = new StringBuilder();\n    for (final Term term : terms ) {\n      final int df = searcher.docFreq(term);\n      idf += idf(df, max);\n      exp.append(\" \");\n      exp.append(term.text());\n      exp.append(\"=\");\n      exp.append(df);\n    }\n    final float fIdf = idf;\n    return new IDFExplanation() {\n      @Override\n      public float getIdf() {\n        return fIdf;\n      }\n      @Override\n      public String explain() {\n        return exp.toString();\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Computes a score factor for a phrase.\n   * \n   * <p>\n   * The default implementation sums the idf factor for\n   * each term in the phrase.\n   * \n   * @param terms the terms in the phrase\n   * @param searcher the document collection being searched\n   * @return an IDFExplain object that includes both an idf \n   *         score factor for the phrase and an explanation \n   *         for each term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(Collection<Term> terms, Searcher searcher) throws IOException {\n    final int max = searcher.maxDoc();\n    float idf = 0.0f;\n    final StringBuilder exp = new StringBuilder();\n    for (final Term term : terms ) {\n      final int df = searcher.docFreq(term);\n      idf += idf(df, max);\n      exp.append(\" \");\n      exp.append(term.text());\n      exp.append(\"=\");\n      exp.append(df);\n    }\n    final float fIdf = idf;\n    return new IDFExplanation() {\n      @Override\n      public float getIdf() {\n        return fIdf;\n      }\n      @Override\n      public String explain() {\n        return exp.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/Similarity#idfExplain(Collection[Term],IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Computes a score factor for a phrase.\n   * \n   * <p>\n   * The default implementation sums the idf factor for\n   * each term in the phrase.\n   * \n   * @param terms the terms in the phrase\n   * @param searcher the document collection being searched\n   * @return an IDFExplain object that includes both an idf \n   *         score factor for the phrase and an explanation \n   *         for each term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(Collection<Term> terms, IndexSearcher searcher) throws IOException {\n    final int max = searcher.maxDoc();\n    float idf = 0.0f;\n    final StringBuilder exp = new StringBuilder();\n    for (final Term term : terms ) {\n      final int df = searcher.docFreq(term);\n      idf += idf(df, max);\n      exp.append(\" \");\n      exp.append(term.text());\n      exp.append(\"=\");\n      exp.append(df);\n    }\n    final float fIdf = idf;\n    return new IDFExplanation() {\n      @Override\n      public float getIdf() {\n        return fIdf;\n      }\n      @Override\n      public String explain() {\n        return exp.toString();\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/Similarity#idfExplain(Collection[Term],IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Computes a score factor for a phrase.\n   * \n   * <p>\n   * The default implementation sums the idf factor for\n   * each term in the phrase.\n   * \n   * @param terms the terms in the phrase\n   * @param searcher the document collection being searched\n   * @return an IDFExplain object that includes both an idf \n   *         score factor for the phrase and an explanation \n   *         for each term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(Collection<Term> terms, IndexSearcher searcher) throws IOException {\n    final int max = searcher.maxDoc();\n    float idf = 0.0f;\n    final StringBuilder exp = new StringBuilder();\n    for (final Term term : terms ) {\n      final int df = searcher.docFreq(term);\n      idf += idf(df, max);\n      exp.append(\" \");\n      exp.append(term.text());\n      exp.append(\"=\");\n      exp.append(df);\n    }\n    final float fIdf = idf;\n    return new IDFExplanation() {\n      @Override\n      public float getIdf() {\n        return fIdf;\n      }\n      @Override\n      public String explain() {\n        return exp.toString();\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TFIDFSimilarity#idfExplain(TermContext[],IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Similarity#idfExplain(Collection[Term],IndexSearcher).mjava","sourceNew":"  /**\n   * Computes a score factor for a phrase.\n   * \n   * <p>\n   * The default implementation sums the idf factor for\n   * each term in the phrase.\n   * \n   * @param stats statistics of the terms in the phrase\n   * @param searcher the document collection being searched\n   * @return an Explain object that includes both an idf \n   *         score factor for the phrase and an explanation \n   *         for each term.\n   * @throws IOException\n   */\n  public Explanation idfExplain(final TermContext stats[], IndexSearcher searcher) throws IOException {\n    final int max = searcher.maxDoc();\n    float idf = 0.0f;\n    final Explanation exp = new Explanation();\n    exp.setDescription(\"idf(), sum of:\");\n    for (final TermContext stat : stats ) {\n      final int df = stat.docFreq();\n      final float termIdf = idf(df, max);\n      exp.addDetail(new Explanation(termIdf, \"idf(docFreq=\" + df + \", maxDocs=\" + max + \")\"));\n      idf += termIdf;\n    }\n    exp.setValue(idf);\n    return exp;\n  }\n\n","sourceOld":"  /**\n   * Computes a score factor for a phrase.\n   * \n   * <p>\n   * The default implementation sums the idf factor for\n   * each term in the phrase.\n   * \n   * @param terms the terms in the phrase\n   * @param searcher the document collection being searched\n   * @return an IDFExplain object that includes both an idf \n   *         score factor for the phrase and an explanation \n   *         for each term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(Collection<Term> terms, IndexSearcher searcher) throws IOException {\n    final int max = searcher.maxDoc();\n    float idf = 0.0f;\n    final StringBuilder exp = new StringBuilder();\n    for (final Term term : terms ) {\n      final int df = searcher.docFreq(term);\n      idf += idf(df, max);\n      exp.append(\" \");\n      exp.append(term.text());\n      exp.append(\"=\");\n      exp.append(df);\n    }\n    final float fIdf = idf;\n    return new IDFExplanation() {\n      @Override\n      public float getIdf() {\n        return fIdf;\n      }\n      @Override\n      public String explain() {\n        return exp.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TFIDFSimilarity#idfExplain(TermContext[],IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Similarity#idfExplain(Collection[Term],IndexSearcher).mjava","sourceNew":"  /**\n   * Computes a score factor for a phrase.\n   * \n   * <p>\n   * The default implementation sums the idf factor for\n   * each term in the phrase.\n   * \n   * @param stats statistics of the terms in the phrase\n   * @param searcher the document collection being searched\n   * @return an Explain object that includes both an idf \n   *         score factor for the phrase and an explanation \n   *         for each term.\n   * @throws IOException\n   */\n  public Explanation idfExplain(final TermContext stats[], IndexSearcher searcher) throws IOException {\n    final int max = searcher.maxDoc();\n    float idf = 0.0f;\n    final Explanation exp = new Explanation();\n    exp.setDescription(\"idf(), sum of:\");\n    for (final TermContext stat : stats ) {\n      final int df = stat.docFreq();\n      final float termIdf = idf(df, max);\n      exp.addDetail(new Explanation(termIdf, \"idf(docFreq=\" + df + \", maxDocs=\" + max + \")\"));\n      idf += termIdf;\n    }\n    exp.setValue(idf);\n    return exp;\n  }\n\n","sourceOld":"  /**\n   * Computes a score factor for a phrase.\n   * \n   * <p>\n   * The default implementation sums the idf factor for\n   * each term in the phrase.\n   * \n   * @param terms the terms in the phrase\n   * @param searcher the document collection being searched\n   * @return an IDFExplain object that includes both an idf \n   *         score factor for the phrase and an explanation \n   *         for each term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(Collection<Term> terms, IndexSearcher searcher) throws IOException {\n    final int max = searcher.maxDoc();\n    float idf = 0.0f;\n    final StringBuilder exp = new StringBuilder();\n    for (final Term term : terms ) {\n      final int df = searcher.docFreq(term);\n      idf += idf(df, max);\n      exp.append(\" \");\n      exp.append(term.text());\n      exp.append(\"=\");\n      exp.append(df);\n    }\n    final float fIdf = idf;\n    return new IDFExplanation() {\n      @Override\n      public float getIdf() {\n        return fIdf;\n      }\n      @Override\n      public String explain() {\n        return exp.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TFIDFSimilarity#idfExplain(TermContext[],IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Similarity#idfExplain(Collection[Term],IndexSearcher).mjava","sourceNew":"  /**\n   * Computes a score factor for a phrase.\n   * \n   * <p>\n   * The default implementation sums the idf factor for\n   * each term in the phrase.\n   * \n   * @param stats statistics of the terms in the phrase\n   * @param searcher the document collection being searched\n   * @return an Explain object that includes both an idf \n   *         score factor for the phrase and an explanation \n   *         for each term.\n   * @throws IOException\n   */\n  public Explanation idfExplain(final TermContext stats[], IndexSearcher searcher) throws IOException {\n    final int max = searcher.maxDoc();\n    float idf = 0.0f;\n    final Explanation exp = new Explanation();\n    exp.setDescription(\"idf(), sum of:\");\n    for (final TermContext stat : stats ) {\n      final int df = stat.docFreq();\n      final float termIdf = idf(df, max);\n      exp.addDetail(new Explanation(termIdf, \"idf(docFreq=\" + df + \", maxDocs=\" + max + \")\"));\n      idf += termIdf;\n    }\n    exp.setValue(idf);\n    return exp;\n  }\n\n","sourceOld":"  /**\n   * Computes a score factor for a phrase.\n   * \n   * <p>\n   * The default implementation sums the idf factor for\n   * each term in the phrase.\n   * \n   * @param terms the terms in the phrase\n   * @param searcher the document collection being searched\n   * @return an IDFExplain object that includes both an idf \n   *         score factor for the phrase and an explanation \n   *         for each term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(Collection<Term> terms, IndexSearcher searcher) throws IOException {\n    final int max = searcher.maxDoc();\n    float idf = 0.0f;\n    final StringBuilder exp = new StringBuilder();\n    for (final Term term : terms ) {\n      final int df = searcher.docFreq(term);\n      idf += idf(df, max);\n      exp.append(\" \");\n      exp.append(term.text());\n      exp.append(\"=\");\n      exp.append(df);\n    }\n    final float fIdf = idf;\n    return new IDFExplanation() {\n      @Override\n      public float getIdf() {\n        return fIdf;\n      }\n      @Override\n      public String explain() {\n        return exp.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1291e4568eb7d9463d751627596ef14baf4c1603":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7","0f3cee3d20b0c786e6fca20539454262e29edcab"],"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7","0f3cee3d20b0c786e6fca20539454262e29edcab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f3cee3d20b0c786e6fca20539454262e29edcab"]},"commit2Childs":{"1291e4568eb7d9463d751627596ef14baf4c1603":[],"70ad682703b8585f5d0a637efec044d57ec05efb":[],"0f3cee3d20b0c786e6fca20539454262e29edcab":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["1291e4568eb7d9463d751627596ef14baf4c1603","70ad682703b8585f5d0a637efec044d57ec05efb","0f3cee3d20b0c786e6fca20539454262e29edcab","f0b9507caf22f292ac0e5e59f62db4275adf4511","868da859b43505d9d2a023bfeae6dd0c795f5295"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1291e4568eb7d9463d751627596ef14baf4c1603","70ad682703b8585f5d0a637efec044d57ec05efb","f0b9507caf22f292ac0e5e59f62db4275adf4511","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}