{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/DatePartEvaluatorTest#testAllFunctions().mjava","commits":[{"id":"40b789607c421011dabf36a935528a74fb8b2032","date":1492023606,"type":1,"author":"Gethin James","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/DatePartEvaluatorTest#testAllFunctions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/DateEvaluatorTest#testAllFunctions().mjava","sourceNew":"  @Test\n  public void testAllFunctions() throws Exception {\n\n    //year, month, day, dayofyear, hour, minute, quarter, week, second, epoch\n    testFunction(\"year(a)\", \"1995-12-31T23:59:59Z\", 1995);\n    testFunction(\"month(a)\",\"1995-12-31T23:59:59Z\", 12);\n    testFunction(\"day(a)\",  \"1995-12-31T23:59:59Z\", 31);\n    testFunction(\"dayofyear(a)\",  \"1995-12-31T23:59:59Z\", 365);\n    testFunction(\"dayofquarter(a)\",  \"1995-12-31T23:59:59Z\", 92);\n    testFunction(\"hour(a)\",   \"1995-12-31T23:59:59Z\", 23);\n    testFunction(\"minute(a)\", \"1995-12-31T23:59:59Z\", 59);\n    testFunction(\"quarter(a)\",\"1995-12-31T23:59:59Z\", 4);\n    testFunction(\"week(a)\",   \"1995-12-31T23:59:59Z\", 52);\n    testFunction(\"second(a)\", \"1995-12-31T23:59:58Z\", 58);\n    testFunction(\"epoch(a)\",  \"1995-12-31T23:59:59Z\", 820454399000l);\n\n    testFunction(\"year(a)\", \"2017-03-17T10:30:45Z\", 2017);\n    testFunction(\"year('a')\", \"2017-03-17T10:30:45Z\", 2017);\n    testFunction(\"month(a)\",\"2017-03-17T10:30:45Z\", 3);\n    testFunction(\"day(a)\",  \"2017-03-17T10:30:45Z\", 17);\n    testFunction(\"day('a')\",  \"2017-03-17T10:30:45Z\", 17);\n    testFunction(\"dayofyear(a)\",  \"2017-03-17T10:30:45Z\", 76);\n    testFunction(\"dayofquarter(a)\",  \"2017-03-17T10:30:45Z\", 76);\n    testFunction(\"hour(a)\",   \"2017-03-17T10:30:45Z\", 10);\n    testFunction(\"minute(a)\", \"2017-03-17T10:30:45Z\", 30);\n    testFunction(\"quarter(a)\",\"2017-03-17T10:30:45Z\", 1);\n    testFunction(\"week(a)\",   \"2017-03-17T10:30:45Z\", 11);\n    testFunction(\"second(a)\", \"2017-03-17T10:30:45Z\", 45);\n    testFunction(\"epoch(a)\",  \"2017-03-17T10:30:45Z\", 1489746645000l);\n\n    testFunction(\"epoch(a)\",  new Date(1489746645500l).toInstant().toString(), 1489746645500l);\n    testFunction(\"epoch(a)\",  new Date(820454399990l).toInstant().toString(), 820454399990l);\n\n    //Additionally test all functions to make sure they return a non-null number\n    for (DatePartEvaluator.FUNCTION function : DatePartEvaluator.FUNCTION.values()) {\n      StreamEvaluator evaluator = factory.constructEvaluator(function+\"(a)\");\n      values.clear();\n      values.put(\"a\", \"2017-03-17T10:30:45Z\");\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertNotNull(function+\" should return a result\",result);\n      assertTrue(function+\" should return a number\", result instanceof Number);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAllFunctions() throws Exception {\n\n    //year, month, day, dayofyear, hour, minute, quarter, week, second, epoch\n    testFunction(\"year(a)\", \"1995-12-31T23:59:59Z\", 1995);\n    testFunction(\"month(a)\",\"1995-12-31T23:59:59Z\", 12);\n    testFunction(\"day(a)\",  \"1995-12-31T23:59:59Z\", 31);\n    testFunction(\"dayofyear(a)\",  \"1995-12-31T23:59:59Z\", 365);\n    testFunction(\"dayofquarter(a)\",  \"1995-12-31T23:59:59Z\", 92);\n    testFunction(\"hour(a)\",   \"1995-12-31T23:59:59Z\", 23);\n    testFunction(\"minute(a)\", \"1995-12-31T23:59:59Z\", 59);\n    testFunction(\"quarter(a)\",\"1995-12-31T23:59:59Z\", 4);\n    testFunction(\"week(a)\",   \"1995-12-31T23:59:59Z\", 52);\n    testFunction(\"second(a)\", \"1995-12-31T23:59:58Z\", 58);\n    testFunction(\"epoch(a)\",  \"1995-12-31T23:59:59Z\", 820454399000l);\n\n    testFunction(\"year(a)\", \"2017-03-17T10:30:45Z\", 2017);\n    testFunction(\"year('a')\", \"2017-03-17T10:30:45Z\", 2017);\n    testFunction(\"month(a)\",\"2017-03-17T10:30:45Z\", 3);\n    testFunction(\"day(a)\",  \"2017-03-17T10:30:45Z\", 17);\n    testFunction(\"day('a')\",  \"2017-03-17T10:30:45Z\", 17);\n    testFunction(\"dayofyear(a)\",  \"2017-03-17T10:30:45Z\", 76);\n    testFunction(\"dayofquarter(a)\",  \"2017-03-17T10:30:45Z\", 76);\n    testFunction(\"hour(a)\",   \"2017-03-17T10:30:45Z\", 10);\n    testFunction(\"minute(a)\", \"2017-03-17T10:30:45Z\", 30);\n    testFunction(\"quarter(a)\",\"2017-03-17T10:30:45Z\", 1);\n    testFunction(\"week(a)\",   \"2017-03-17T10:30:45Z\", 11);\n    testFunction(\"second(a)\", \"2017-03-17T10:30:45Z\", 45);\n    testFunction(\"epoch(a)\",  \"2017-03-17T10:30:45Z\", 1489746645000l);\n\n    testFunction(\"epoch(a)\",  new Date(1489746645500l).toInstant().toString(), 1489746645500l);\n    testFunction(\"epoch(a)\",  new Date(820454399990l).toInstant().toString(), 820454399990l);\n\n    //Additionally test all functions to make sure they return a non-null number\n    for (DateEvaluator.FUNCTION function : DateEvaluator.FUNCTION.values()) {\n      StreamEvaluator evaluator = factory.constructEvaluator(function+\"(a)\");\n      values.clear();\n      values.put(\"a\", \"2017-03-17T10:30:45Z\");\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertNotNull(function+\" should return a result\",result);\n      assertTrue(function+\" should return a number\", result instanceof Number);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"185f3c2b04d778454a3f7231f3b2deee75a8c37d","date":1492023606,"type":3,"author":"Gethin James","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/DatePartEvaluatorTest#testAllFunctions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/DatePartEvaluatorTest#testAllFunctions().mjava","sourceNew":"  @Test\n  public void testAllFunctions() throws Exception {\n\n    //year, month, day, dayofyear, hour, minute, quarter, week, second, epoch\n    testFunction(\"year(a)\", \"1995-12-31T23:59:59Z\", 1995);\n    testFunction(\"month(a)\",\"1995-12-31T23:59:59Z\", 12);\n    testFunction(\"day(a)\",  \"1995-12-31T23:59:59Z\", 31);\n    testFunction(\"dayOfYear(a)\",  \"1995-12-31T23:59:59Z\", 365);\n    testFunction(\"dayOfQuarter(a)\",  \"1995-12-31T23:59:59Z\", 92);\n    testFunction(\"hour(a)\",   \"1995-12-31T23:59:59Z\", 23);\n    testFunction(\"minute(a)\", \"1995-12-31T23:59:59Z\", 59);\n    testFunction(\"quarter(a)\",\"1995-12-31T23:59:59Z\", 4);\n    testFunction(\"week(a)\",   \"1995-12-31T23:59:59Z\", 52);\n    testFunction(\"second(a)\", \"1995-12-31T23:59:58Z\", 58);\n    testFunction(\"epoch(a)\",  \"1995-12-31T23:59:59Z\", 820454399000l);\n\n    testFunction(\"year(a)\", \"2017-03-17T10:30:45Z\", 2017);\n    testFunction(\"year('a')\", \"2017-03-17T10:30:45Z\", 2017);\n    testFunction(\"month(a)\",\"2017-03-17T10:30:45Z\", 3);\n    testFunction(\"day(a)\",  \"2017-03-17T10:30:45Z\", 17);\n    testFunction(\"day('a')\",  \"2017-03-17T10:30:45Z\", 17);\n    testFunction(\"dayOfYear(a)\",  \"2017-03-17T10:30:45Z\", 76);\n    testFunction(\"dayOfQuarter(a)\",  \"2017-03-17T10:30:45Z\", 76);\n    testFunction(\"hour(a)\",   \"2017-03-17T10:30:45Z\", 10);\n    testFunction(\"minute(a)\", \"2017-03-17T10:30:45Z\", 30);\n    testFunction(\"quarter(a)\",\"2017-03-17T10:30:45Z\", 1);\n    testFunction(\"week(a)\",   \"2017-03-17T10:30:45Z\", 11);\n    testFunction(\"second(a)\", \"2017-03-17T10:30:45Z\", 45);\n    testFunction(\"epoch(a)\",  \"2017-03-17T10:30:45Z\", 1489746645000l);\n\n    testFunction(\"epoch(a)\",  new Date(1489746645500l).toInstant().toString(), 1489746645500l);\n    testFunction(\"epoch(a)\",  new Date(820454399990l).toInstant().toString(), 820454399990l);\n\n    //Additionally test all functions to make sure they return a non-null number\n    for (DatePartEvaluator.FUNCTION function : DatePartEvaluator.FUNCTION.values()) {\n      StreamEvaluator evaluator = factory.constructEvaluator(function+\"(a)\");\n      values.clear();\n      values.put(\"a\", \"2017-03-17T10:30:45Z\");\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertNotNull(function+\" should return a result\",result);\n      assertTrue(function+\" should return a number\", result instanceof Number);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAllFunctions() throws Exception {\n\n    //year, month, day, dayofyear, hour, minute, quarter, week, second, epoch\n    testFunction(\"year(a)\", \"1995-12-31T23:59:59Z\", 1995);\n    testFunction(\"month(a)\",\"1995-12-31T23:59:59Z\", 12);\n    testFunction(\"day(a)\",  \"1995-12-31T23:59:59Z\", 31);\n    testFunction(\"dayofyear(a)\",  \"1995-12-31T23:59:59Z\", 365);\n    testFunction(\"dayofquarter(a)\",  \"1995-12-31T23:59:59Z\", 92);\n    testFunction(\"hour(a)\",   \"1995-12-31T23:59:59Z\", 23);\n    testFunction(\"minute(a)\", \"1995-12-31T23:59:59Z\", 59);\n    testFunction(\"quarter(a)\",\"1995-12-31T23:59:59Z\", 4);\n    testFunction(\"week(a)\",   \"1995-12-31T23:59:59Z\", 52);\n    testFunction(\"second(a)\", \"1995-12-31T23:59:58Z\", 58);\n    testFunction(\"epoch(a)\",  \"1995-12-31T23:59:59Z\", 820454399000l);\n\n    testFunction(\"year(a)\", \"2017-03-17T10:30:45Z\", 2017);\n    testFunction(\"year('a')\", \"2017-03-17T10:30:45Z\", 2017);\n    testFunction(\"month(a)\",\"2017-03-17T10:30:45Z\", 3);\n    testFunction(\"day(a)\",  \"2017-03-17T10:30:45Z\", 17);\n    testFunction(\"day('a')\",  \"2017-03-17T10:30:45Z\", 17);\n    testFunction(\"dayofyear(a)\",  \"2017-03-17T10:30:45Z\", 76);\n    testFunction(\"dayofquarter(a)\",  \"2017-03-17T10:30:45Z\", 76);\n    testFunction(\"hour(a)\",   \"2017-03-17T10:30:45Z\", 10);\n    testFunction(\"minute(a)\", \"2017-03-17T10:30:45Z\", 30);\n    testFunction(\"quarter(a)\",\"2017-03-17T10:30:45Z\", 1);\n    testFunction(\"week(a)\",   \"2017-03-17T10:30:45Z\", 11);\n    testFunction(\"second(a)\", \"2017-03-17T10:30:45Z\", 45);\n    testFunction(\"epoch(a)\",  \"2017-03-17T10:30:45Z\", 1489746645000l);\n\n    testFunction(\"epoch(a)\",  new Date(1489746645500l).toInstant().toString(), 1489746645500l);\n    testFunction(\"epoch(a)\",  new Date(820454399990l).toInstant().toString(), 820454399990l);\n\n    //Additionally test all functions to make sure they return a non-null number\n    for (DatePartEvaluator.FUNCTION function : DatePartEvaluator.FUNCTION.values()) {\n      StreamEvaluator evaluator = factory.constructEvaluator(function+\"(a)\");\n      values.clear();\n      values.put(\"a\", \"2017-03-17T10:30:45Z\");\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertNotNull(function+\" should return a result\",result);\n      assertTrue(function+\" should return a number\", result instanceof Number);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64ff6b743fd4051da7ebb3d397d1ef80833a741a","date":1492023891,"type":5,"author":"Gethin James","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testAllFunctions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/DatePartEvaluatorTest#testAllFunctions().mjava","sourceNew":"  @Test\n  public void testAllFunctions() throws Exception {\n\n    //year, month, day, dayofyear, hour, minute, quarter, week, second, epoch\n    testFunction(\"year(a)\", \"1995-12-31T23:59:59Z\", 1995);\n    testFunction(\"month(a)\",\"1995-12-31T23:59:59Z\", 12);\n    testFunction(\"day(a)\",  \"1995-12-31T23:59:59Z\", 31);\n    testFunction(\"dayOfYear(a)\",  \"1995-12-31T23:59:59Z\", 365);\n    testFunction(\"dayOfQuarter(a)\",  \"1995-12-31T23:59:59Z\", 92);\n    testFunction(\"hour(a)\",   \"1995-12-31T23:59:59Z\", 23);\n    testFunction(\"minute(a)\", \"1995-12-31T23:59:59Z\", 59);\n    testFunction(\"quarter(a)\",\"1995-12-31T23:59:59Z\", 4);\n    testFunction(\"week(a)\",   \"1995-12-31T23:59:59Z\", 52);\n    testFunction(\"second(a)\", \"1995-12-31T23:59:58Z\", 58);\n    testFunction(\"epoch(a)\",  \"1995-12-31T23:59:59Z\", 820454399000l);\n\n    testFunction(\"year(a)\", \"2017-03-17T10:30:45Z\", 2017);\n    testFunction(\"year('a')\", \"2017-03-17T10:30:45Z\", 2017);\n    testFunction(\"month(a)\",\"2017-03-17T10:30:45Z\", 3);\n    testFunction(\"day(a)\",  \"2017-03-17T10:30:45Z\", 17);\n    testFunction(\"day('a')\",  \"2017-03-17T10:30:45Z\", 17);\n    testFunction(\"dayOfYear(a)\",  \"2017-03-17T10:30:45Z\", 76);\n    testFunction(\"dayOfQuarter(a)\",  \"2017-03-17T10:30:45Z\", 76);\n    testFunction(\"hour(a)\",   \"2017-03-17T10:30:45Z\", 10);\n    testFunction(\"minute(a)\", \"2017-03-17T10:30:45Z\", 30);\n    testFunction(\"quarter(a)\",\"2017-03-17T10:30:45Z\", 1);\n    testFunction(\"week(a)\",   \"2017-03-17T10:30:45Z\", 11);\n    testFunction(\"second(a)\", \"2017-03-17T10:30:45Z\", 45);\n    testFunction(\"epoch(a)\",  \"2017-03-17T10:30:45Z\", 1489746645000l);\n\n    testFunction(\"epoch(a)\",  new Date(1489746645500l).toInstant().toString(), 1489746645500l);\n    testFunction(\"epoch(a)\",  new Date(820454399990l).toInstant().toString(), 820454399990l);\n\n    //Additionally test all functions to make sure they return a non-null number\n    for (DatePartEvaluator.FUNCTION function : DatePartEvaluator.FUNCTION.values()) {\n      StreamEvaluator evaluator = factory.constructEvaluator(function+\"(a)\");\n      values.clear();\n      values.put(\"a\", \"2017-03-17T10:30:45Z\");\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertNotNull(function+\" should return a result\",result);\n      assertTrue(function+\" should return a number\", result instanceof Number);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAllFunctions() throws Exception {\n\n    //year, month, day, dayofyear, hour, minute, quarter, week, second, epoch\n    testFunction(\"year(a)\", \"1995-12-31T23:59:59Z\", 1995);\n    testFunction(\"month(a)\",\"1995-12-31T23:59:59Z\", 12);\n    testFunction(\"day(a)\",  \"1995-12-31T23:59:59Z\", 31);\n    testFunction(\"dayOfYear(a)\",  \"1995-12-31T23:59:59Z\", 365);\n    testFunction(\"dayOfQuarter(a)\",  \"1995-12-31T23:59:59Z\", 92);\n    testFunction(\"hour(a)\",   \"1995-12-31T23:59:59Z\", 23);\n    testFunction(\"minute(a)\", \"1995-12-31T23:59:59Z\", 59);\n    testFunction(\"quarter(a)\",\"1995-12-31T23:59:59Z\", 4);\n    testFunction(\"week(a)\",   \"1995-12-31T23:59:59Z\", 52);\n    testFunction(\"second(a)\", \"1995-12-31T23:59:58Z\", 58);\n    testFunction(\"epoch(a)\",  \"1995-12-31T23:59:59Z\", 820454399000l);\n\n    testFunction(\"year(a)\", \"2017-03-17T10:30:45Z\", 2017);\n    testFunction(\"year('a')\", \"2017-03-17T10:30:45Z\", 2017);\n    testFunction(\"month(a)\",\"2017-03-17T10:30:45Z\", 3);\n    testFunction(\"day(a)\",  \"2017-03-17T10:30:45Z\", 17);\n    testFunction(\"day('a')\",  \"2017-03-17T10:30:45Z\", 17);\n    testFunction(\"dayOfYear(a)\",  \"2017-03-17T10:30:45Z\", 76);\n    testFunction(\"dayOfQuarter(a)\",  \"2017-03-17T10:30:45Z\", 76);\n    testFunction(\"hour(a)\",   \"2017-03-17T10:30:45Z\", 10);\n    testFunction(\"minute(a)\", \"2017-03-17T10:30:45Z\", 30);\n    testFunction(\"quarter(a)\",\"2017-03-17T10:30:45Z\", 1);\n    testFunction(\"week(a)\",   \"2017-03-17T10:30:45Z\", 11);\n    testFunction(\"second(a)\", \"2017-03-17T10:30:45Z\", 45);\n    testFunction(\"epoch(a)\",  \"2017-03-17T10:30:45Z\", 1489746645000l);\n\n    testFunction(\"epoch(a)\",  new Date(1489746645500l).toInstant().toString(), 1489746645500l);\n    testFunction(\"epoch(a)\",  new Date(820454399990l).toInstant().toString(), 820454399990l);\n\n    //Additionally test all functions to make sure they return a non-null number\n    for (DatePartEvaluator.FUNCTION function : DatePartEvaluator.FUNCTION.values()) {\n      StreamEvaluator evaluator = factory.constructEvaluator(function+\"(a)\");\n      values.clear();\n      values.put(\"a\", \"2017-03-17T10:30:45Z\");\n      Object result = evaluator.evaluate(new Tuple(values));\n      assertNotNull(function+\" should return a result\",result);\n      assertTrue(function+\" should return a number\", result instanceof Number);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"185f3c2b04d778454a3f7231f3b2deee75a8c37d":["40b789607c421011dabf36a935528a74fb8b2032"],"64ff6b743fd4051da7ebb3d397d1ef80833a741a":["185f3c2b04d778454a3f7231f3b2deee75a8c37d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"40b789607c421011dabf36a935528a74fb8b2032":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["64ff6b743fd4051da7ebb3d397d1ef80833a741a"]},"commit2Childs":{"185f3c2b04d778454a3f7231f3b2deee75a8c37d":["64ff6b743fd4051da7ebb3d397d1ef80833a741a"],"64ff6b743fd4051da7ebb3d397d1ef80833a741a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["40b789607c421011dabf36a935528a74fb8b2032"],"40b789607c421011dabf36a935528a74fb8b2032":["185f3c2b04d778454a3f7231f3b2deee75a8c37d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}