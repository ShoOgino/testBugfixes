{"path":"lucene/src/test/org/apache/lucene/index/values/TestIndexValues#getDocValues(IndexReader,String).mjava","commits":[{"id":"0e28c49f1fb6215a550fdadcf3805aa629b63ec0","date":1288081775,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestIndexValues#getDocValues(IndexReader,String).mjava","pathOld":"/dev/null","sourceNew":"  private DocValues getDocValues(IndexReader reader, String field)\n      throws IOException {\n    boolean optimized = reader.isOptimized();\n    Fields fields = optimized ? reader.getSequentialSubReaders()[0].fields() : MultiFields\n        .getFields(reader);\n//    return fields.docValues(field);\n    switch (random.nextInt(optimized ? 3 : 2)) {\n    case 0:\n      return fields.docValues(field);\n    case 1:\n      FieldsEnum iterator = fields.iterator();\n      String name;\n      while ((name = iterator.next()) != null) {\n        if (name.equals(field))\n          return iterator.docValues();\n      }\n      throw new RuntimeException(\"no such field \" + field);\n    case 2:\n      return reader.getSequentialSubReaders()[0].docValues(field);\n    }\nthrow new RuntimeException();\n}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39f3757037aa8f710c0cbf9a76a332de735f58b0","date":1288384416,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestIndexValues#getDocValues(IndexReader,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestIndexValues#getDocValues(IndexReader,String).mjava","sourceNew":"  private DocValues getDocValues(IndexReader reader, String field)\n      throws IOException {\n    boolean optimized = reader.isOptimized();\n    Fields fields = optimized ? reader.getSequentialSubReaders()[0].fields()\n        : MultiFields.getFields(reader);\n    switch (random.nextInt(optimized ? 3 : 2)) { // case 2 only if optimized\n    case 0:\n      return fields.docValues(field);\n    case 1:\n      FieldsEnum iterator = fields.iterator();\n      String name;\n      while ((name = iterator.next()) != null) {\n        if (name.equals(field))\n          return iterator.docValues();\n      }\n      throw new RuntimeException(\"no such field \" + field);\n    case 2:// this only works if we are on an optimized index!\n      return reader.getSequentialSubReaders()[0].docValues(field);\n    }\n    throw new RuntimeException();\n  }\n\n","sourceOld":"  private DocValues getDocValues(IndexReader reader, String field)\n      throws IOException {\n    boolean optimized = reader.isOptimized();\n    Fields fields = optimized ? reader.getSequentialSubReaders()[0].fields() : MultiFields\n        .getFields(reader);\n//    return fields.docValues(field);\n    switch (random.nextInt(optimized ? 3 : 2)) {\n    case 0:\n      return fields.docValues(field);\n    case 1:\n      FieldsEnum iterator = fields.iterator();\n      String name;\n      while ((name = iterator.next()) != null) {\n        if (name.equals(field))\n          return iterator.docValues();\n      }\n      throw new RuntimeException(\"no such field \" + field);\n    case 2:\n      return reader.getSequentialSubReaders()[0].docValues(field);\n    }\nthrow new RuntimeException();\n}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5c559c875836474bafae7243263d93b1b1965db","date":1289581659,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#getDocValues(IndexReader,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestIndexValues#getDocValues(IndexReader,String).mjava","sourceNew":"  private DocValues getDocValues(IndexReader reader, String field)\n      throws IOException {\n    boolean optimized = reader.isOptimized();\n    Fields fields = optimized ? reader.getSequentialSubReaders()[0].fields()\n        : MultiFields.getFields(reader);\n    switch (random.nextInt(optimized ? 3 : 2)) { // case 2 only if optimized\n    case 0:\n      return fields.docValues(field);\n    case 1:\n      FieldsEnum iterator = fields.iterator();\n      String name;\n      while ((name = iterator.next()) != null) {\n        if (name.equals(field))\n          return iterator.docValues();\n      }\n      throw new RuntimeException(\"no such field \" + field);\n    case 2:// this only works if we are on an optimized index!\n      return reader.getSequentialSubReaders()[0].docValues(field);\n    }\n    throw new RuntimeException();\n  }\n\n","sourceOld":"  private DocValues getDocValues(IndexReader reader, String field)\n      throws IOException {\n    boolean optimized = reader.isOptimized();\n    Fields fields = optimized ? reader.getSequentialSubReaders()[0].fields()\n        : MultiFields.getFields(reader);\n    switch (random.nextInt(optimized ? 3 : 2)) { // case 2 only if optimized\n    case 0:\n      return fields.docValues(field);\n    case 1:\n      FieldsEnum iterator = fields.iterator();\n      String name;\n      while ((name = iterator.next()) != null) {\n        if (name.equals(field))\n          return iterator.docValues();\n      }\n      throw new RuntimeException(\"no such field \" + field);\n    case 2:// this only works if we are on an optimized index!\n      return reader.getSequentialSubReaders()[0].docValues(field);\n    }\n    throw new RuntimeException();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"39f3757037aa8f710c0cbf9a76a332de735f58b0":["0e28c49f1fb6215a550fdadcf3805aa629b63ec0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b5c559c875836474bafae7243263d93b1b1965db":["39f3757037aa8f710c0cbf9a76a332de735f58b0"]},"commit2Childs":{"39f3757037aa8f710c0cbf9a76a332de735f58b0":["b5c559c875836474bafae7243263d93b1b1965db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0e28c49f1fb6215a550fdadcf3805aa629b63ec0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":["39f3757037aa8f710c0cbf9a76a332de735f58b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b5c559c875836474bafae7243263d93b1b1965db":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b5c559c875836474bafae7243263d93b1b1965db"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}