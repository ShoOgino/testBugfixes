{"path":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testNext().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testNext().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testNext().mjava","sourceNew":"  public void testNext() throws Exception {\n\n    String test = \"The quick|JJ red|JJ fox|NN jumped|VB over the lazy|JJ brown|JJ dogs|NN\";\n    DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter\n      (new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(test)), \n       DelimitedPayloadTokenFilter.DEFAULT_DELIMITER, new IdentityEncoder());\n    assertTermEquals(\"The\", filter, null);\n    assertTermEquals(\"quick\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"red\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"fox\", filter, \"NN\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"jumped\", filter, \"VB\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"over\", filter, null);\n    assertTermEquals(\"the\", filter, null);\n    assertTermEquals(\"lazy\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"brown\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"dogs\", filter, \"NN\".getBytes(\"UTF-8\"));\n    assertFalse(filter.incrementToken());\n  }\n\n","sourceOld":"  public void testNext() throws Exception {\n\n    String test = \"The quick|JJ red|JJ fox|NN jumped|VB over the lazy|JJ brown|JJ dogs|NN\";\n    DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter\n      (new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(test)), \n       DelimitedPayloadTokenFilter.DEFAULT_DELIMITER, new IdentityEncoder());\n    assertTermEquals(\"The\", filter, null);\n    assertTermEquals(\"quick\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"red\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"fox\", filter, \"NN\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"jumped\", filter, \"VB\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"over\", filter, null);\n    assertTermEquals(\"the\", filter, null);\n    assertTermEquals(\"lazy\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"brown\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"dogs\", filter, \"NN\".getBytes(\"UTF-8\"));\n    assertFalse(filter.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testNext().mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#testNext().mjava","sourceNew":"  public void testNext() throws Exception {\n\n    String test = \"The quick|JJ red|JJ fox|NN jumped|VB over the lazy|JJ brown|JJ dogs|NN\";\n    DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter\n      (new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(test)), \n       DelimitedPayloadTokenFilter.DEFAULT_DELIMITER, new IdentityEncoder());\n    assertTermEquals(\"The\", filter, null);\n    assertTermEquals(\"quick\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"red\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"fox\", filter, \"NN\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"jumped\", filter, \"VB\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"over\", filter, null);\n    assertTermEquals(\"the\", filter, null);\n    assertTermEquals(\"lazy\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"brown\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"dogs\", filter, \"NN\".getBytes(\"UTF-8\"));\n    assertFalse(filter.incrementToken());\n  }\n\n","sourceOld":"  public void testNext() throws Exception {\n\n    String test = \"The quick|JJ red|JJ fox|NN jumped|VB over the lazy|JJ brown|JJ dogs|NN\";\n    DelimitedPayloadTokenFilter filter = new DelimitedPayloadTokenFilter\n      (new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(test)), \n       DelimitedPayloadTokenFilter.DEFAULT_DELIMITER, new IdentityEncoder());\n    assertTermEquals(\"The\", filter, null);\n    assertTermEquals(\"quick\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"red\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"fox\", filter, \"NN\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"jumped\", filter, \"VB\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"over\", filter, null);\n    assertTermEquals(\"the\", filter, null);\n    assertTermEquals(\"lazy\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"brown\", filter, \"JJ\".getBytes(\"UTF-8\"));\n    assertTermEquals(\"dogs\", filter, \"NN\".getBytes(\"UTF-8\"));\n    assertFalse(filter.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}