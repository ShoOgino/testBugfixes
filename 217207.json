{"path":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#get(int).mjava","commits":[{"id":"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0","date":1412077943,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#get(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean get(int i) {\n    assert consistent(i);\n    final int i4096 = i >>> 12;\n    final long index = indices[i4096];\n    final int i64 = i >>> 6;\n    // first check the index, if the i64-th bit is not set, then i is not set\n    // note: this relies on the fact that shifts are mod 64 in java\n    if ((index & (1L << i64)) == 0) {\n      return false;\n    }\n\n    // if it is set, then we count the number of bits that are set on the right\n    // of i64, and that gives us the index of the long that stores the bits we\n    // are interested in\n    final long bits = this.bits[i4096][Long.bitCount(index & ((1L << i64) - 1))];\n    return (bits & (1L << i)) != 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5132ed7492455ab92d26486037983253997f6c65"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#get(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean get(int i) {\n    assert consistent(i);\n    final int i4096 = i >>> 12;\n    final long index = indices[i4096];\n    final int i64 = i >>> 6;\n    // first check the index, if the i64-th bit is not set, then i is not set\n    // note: this relies on the fact that shifts are mod 64 in java\n    if ((index & (1L << i64)) == 0) {\n      return false;\n    }\n\n    // if it is set, then we count the number of bits that are set on the right\n    // of i64, and that gives us the index of the long that stores the bits we\n    // are interested in\n    final long bits = this.bits[i4096][Long.bitCount(index & ((1L << i64) - 1))];\n    return (bits & (1L << i)) != 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5132ed7492455ab92d26486037983253997f6c65","date":1413792495,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#get(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#get(int).mjava","sourceNew":"  @Override\n  public boolean get(int i) {\n    assert consistent(i);\n    final int i4096 = i >>> 12;\n    final Block block = blocks[i4096];\n    final int i64 = i >>> 6;\n    // first check the index, if the i64-th bit is not set, then i is not set\n    // note: this relies on the fact that shifts are mod 64 in java\n    if (block == null || (block.index & (1L << i64)) == 0) {\n      return false;\n    }\n\n    // if it is set, then we count the number of bits that are set on the right\n    // of i64, and that gives us the index of the long that stores the bits we\n    // are interested in\n    final long bits = block.bits[Long.bitCount(block.index & ((1L << i64) - 1))];\n    return (bits & (1L << i)) != 0;\n  }\n\n","sourceOld":"  @Override\n  public boolean get(int i) {\n    assert consistent(i);\n    final int i4096 = i >>> 12;\n    final long index = indices[i4096];\n    final int i64 = i >>> 6;\n    // first check the index, if the i64-th bit is not set, then i is not set\n    // note: this relies on the fact that shifts are mod 64 in java\n    if ((index & (1L << i64)) == 0) {\n      return false;\n    }\n\n    // if it is set, then we count the number of bits that are set on the right\n    // of i64, and that gives us the index of the long that stores the bits we\n    // are interested in\n    final long bits = this.bits[i4096][Long.bitCount(index & ((1L << i64) - 1))];\n    return (bits & (1L << i)) != 0;\n  }\n\n","bugFix":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b97a073eaa927466c93dba638b34d56f1beef80a","date":1413793531,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#get(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#get(int).mjava","sourceNew":"  @Override\n  public boolean get(int i) {\n    assert consistent(i);\n    final int i4096 = i >>> 12;\n    final long index = indices[i4096];\n    final int i64 = i >>> 6;\n    // first check the index, if the i64-th bit is not set, then i is not set\n    // note: this relies on the fact that shifts are mod 64 in java\n    if ((index & (1L << i64)) == 0) {\n      return false;\n    }\n\n    // if it is set, then we count the number of bits that are set on the right\n    // of i64, and that gives us the index of the long that stores the bits we\n    // are interested in\n    final long bits = this.bits[i4096][Long.bitCount(index & ((1L << i64) - 1))];\n    return (bits & (1L << i)) != 0;\n  }\n\n","sourceOld":"  @Override\n  public boolean get(int i) {\n    assert consistent(i);\n    final int i4096 = i >>> 12;\n    final Block block = blocks[i4096];\n    final int i64 = i >>> 6;\n    // first check the index, if the i64-th bit is not set, then i is not set\n    // note: this relies on the fact that shifts are mod 64 in java\n    if (block == null || (block.index & (1L << i64)) == 0) {\n      return false;\n    }\n\n    // if it is set, then we count the number of bits that are set on the right\n    // of i64, and that gives us the index of the long that stores the bits we\n    // are interested in\n    final long bits = block.bits[Long.bitCount(block.index & ((1L << i64) - 1))];\n    return (bits & (1L << i)) != 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5132ed7492455ab92d26486037983253997f6c65":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"b97a073eaa927466c93dba638b34d56f1beef80a":["5132ed7492455ab92d26486037983253997f6c65"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b97a073eaa927466c93dba638b34d56f1beef80a"]},"commit2Childs":{"5132ed7492455ab92d26486037983253997f6c65":["b97a073eaa927466c93dba638b34d56f1beef80a"],"b97a073eaa927466c93dba638b34d56f1beef80a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9a47902d6207303f5ed3e7aaca62ca33433af66","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["5132ed7492455ab92d26486037983253997f6c65","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}