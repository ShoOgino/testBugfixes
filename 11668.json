{"path":"lucene/facet/src/java/org/apache/lucene/facet/collections/IntArray#intersect(IntArray).mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/collections/IntArray#intersect(IntArray).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/util/collections/IntArray#intersect(IntArray).mjava","sourceNew":"  /**\n   * Intersects the data with a given IntArray\n   * \n   * @param other\n   *            A given IntArray which holds the data to be intersected agains\n   */\n  public void intersect(IntArray other) {\n    sort();\n    other.sort();\n\n    int myIndex = 0;\n    int otherIndex = 0;\n    int newSize = 0;\n    if (this.size > other.size) {\n      while (otherIndex < other.size && myIndex < size) {\n        while (otherIndex < other.size\n            && other.data[otherIndex] < data[myIndex]) {\n          ++otherIndex;\n        }\n        if (otherIndex == other.size) {\n          break;\n        }\n        while (myIndex < size && other.data[otherIndex] > data[myIndex]) {\n          ++myIndex;\n        }\n        if (other.data[otherIndex] == data[myIndex]) {\n          data[newSize++] = data[myIndex];\n          ++otherIndex;\n          ++myIndex;\n        }\n      }\n    } else {\n      while (otherIndex < other.size && myIndex < size) {\n        while (myIndex < size && other.data[otherIndex] > data[myIndex]) {\n          ++myIndex;\n        }\n        if (myIndex == size) {\n          break;\n        }\n        while (otherIndex < other.size\n            && other.data[otherIndex] < data[myIndex]) {\n          ++otherIndex;\n        }\n        if (other.data[otherIndex] == data[myIndex]) {\n          data[newSize++] = data[myIndex];\n          ++otherIndex;\n          ++myIndex;\n        }\n      }\n    }\n    this.size = newSize;\n  }\n\n","sourceOld":"  /**\n   * Intersects the data with a given IntArray\n   * \n   * @param other\n   *            A given IntArray which holds the data to be intersected agains\n   */\n  public void intersect(IntArray other) {\n    sort();\n    other.sort();\n\n    int myIndex = 0;\n    int otherIndex = 0;\n    int newSize = 0;\n    if (this.size > other.size) {\n      while (otherIndex < other.size && myIndex < size) {\n        while (otherIndex < other.size\n            && other.data[otherIndex] < data[myIndex]) {\n          ++otherIndex;\n        }\n        if (otherIndex == other.size) {\n          break;\n        }\n        while (myIndex < size && other.data[otherIndex] > data[myIndex]) {\n          ++myIndex;\n        }\n        if (other.data[otherIndex] == data[myIndex]) {\n          data[newSize++] = data[myIndex];\n          ++otherIndex;\n          ++myIndex;\n        }\n      }\n    } else {\n      while (otherIndex < other.size && myIndex < size) {\n        while (myIndex < size && other.data[otherIndex] > data[myIndex]) {\n          ++myIndex;\n        }\n        if (myIndex == size) {\n          break;\n        }\n        while (otherIndex < other.size\n            && other.data[otherIndex] < data[myIndex]) {\n          ++otherIndex;\n        }\n        if (other.data[otherIndex] == data[myIndex]) {\n          data[newSize++] = data[myIndex];\n          ++otherIndex;\n          ++myIndex;\n        }\n      }\n    }\n    this.size = newSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/collections/IntArray#intersect(IntArray).mjava","sourceNew":null,"sourceOld":"  /**\n   * Intersects the data with a given IntArray\n   * \n   * @param other\n   *            A given IntArray which holds the data to be intersected agains\n   */\n  public void intersect(IntArray other) {\n    sort();\n    other.sort();\n\n    int myIndex = 0;\n    int otherIndex = 0;\n    int newSize = 0;\n    if (this.size > other.size) {\n      while (otherIndex < other.size && myIndex < size) {\n        while (otherIndex < other.size\n            && other.data[otherIndex] < data[myIndex]) {\n          ++otherIndex;\n        }\n        if (otherIndex == other.size) {\n          break;\n        }\n        while (myIndex < size && other.data[otherIndex] > data[myIndex]) {\n          ++myIndex;\n        }\n        if (other.data[otherIndex] == data[myIndex]) {\n          data[newSize++] = data[myIndex];\n          ++otherIndex;\n          ++myIndex;\n        }\n      }\n    } else {\n      while (otherIndex < other.size && myIndex < size) {\n        while (myIndex < size && other.data[otherIndex] > data[myIndex]) {\n          ++myIndex;\n        }\n        if (myIndex == size) {\n          break;\n        }\n        while (otherIndex < other.size\n            && other.data[otherIndex] < data[myIndex]) {\n          ++otherIndex;\n        }\n        if (other.data[otherIndex] == data[myIndex]) {\n          data[newSize++] = data[myIndex];\n          ++otherIndex;\n          ++myIndex;\n        }\n      }\n    }\n    this.size = newSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/collections/IntArray#intersect(IntArray).mjava","sourceNew":null,"sourceOld":"  /**\n   * Intersects the data with a given IntArray\n   * \n   * @param other\n   *            A given IntArray which holds the data to be intersected agains\n   */\n  public void intersect(IntArray other) {\n    sort();\n    other.sort();\n\n    int myIndex = 0;\n    int otherIndex = 0;\n    int newSize = 0;\n    if (this.size > other.size) {\n      while (otherIndex < other.size && myIndex < size) {\n        while (otherIndex < other.size\n            && other.data[otherIndex] < data[myIndex]) {\n          ++otherIndex;\n        }\n        if (otherIndex == other.size) {\n          break;\n        }\n        while (myIndex < size && other.data[otherIndex] > data[myIndex]) {\n          ++myIndex;\n        }\n        if (other.data[otherIndex] == data[myIndex]) {\n          data[newSize++] = data[myIndex];\n          ++otherIndex;\n          ++myIndex;\n        }\n      }\n    } else {\n      while (otherIndex < other.size && myIndex < size) {\n        while (myIndex < size && other.data[otherIndex] > data[myIndex]) {\n          ++myIndex;\n        }\n        if (myIndex == size) {\n          break;\n        }\n        while (otherIndex < other.size\n            && other.data[otherIndex] < data[myIndex]) {\n          ++otherIndex;\n        }\n        if (other.data[otherIndex] == data[myIndex]) {\n          data[newSize++] = data[myIndex];\n          ++otherIndex;\n          ++myIndex;\n        }\n      }\n    }\n    this.size = newSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["607428da722dcb3e86bbd11c63de8986e6275c36","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}