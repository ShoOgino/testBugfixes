{"path":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#approximation(DocIdSetIterator,FixedBitSet).mjava","commits":[{"id":"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1","date":1423845906,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#approximation(DocIdSetIterator,FixedBitSet).mjava","pathOld":"/dev/null","sourceNew":"  private static TwoPhaseDocIdSetIterator approximation(final DocIdSetIterator iterator, final FixedBitSet confirmed) {\n    return new TwoPhaseDocIdSetIterator() {\n\n      @Override\n      public DocIdSetIterator approximation() {\n        return iterator;\n      }\n\n      @Override\n      public boolean matches() throws IOException {\n        return confirmed.get(iterator.docID());\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3d6eb0072094d94624002318ba2d4c840946833","date":1424947971,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#approximation(DocIdSetIterator,FixedBitSet).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#approximation(DocIdSetIterator,FixedBitSet).mjava","sourceNew":"  private static TwoPhaseIterator approximation(final DocIdSetIterator iterator, final FixedBitSet confirmed) {\n    return new TwoPhaseIterator() {\n\n      @Override\n      public DocIdSetIterator approximation() {\n        return iterator;\n      }\n\n      @Override\n      public boolean matches() throws IOException {\n        return confirmed.get(iterator.docID());\n      }\n    };\n  }\n\n","sourceOld":"  private static TwoPhaseDocIdSetIterator approximation(final DocIdSetIterator iterator, final FixedBitSet confirmed) {\n    return new TwoPhaseDocIdSetIterator() {\n\n      @Override\n      public DocIdSetIterator approximation() {\n        return iterator;\n      }\n\n      @Override\n      public boolean matches() throws IOException {\n        return confirmed.get(iterator.docID());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a6b1be5d2b36d6a30913778ef61374103d55e33","date":1427303640,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#approximation(DocIdSetIterator,FixedBitSet).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#approximation(DocIdSetIterator,FixedBitSet).mjava","sourceNew":"  private static TwoPhaseIterator approximation(final DocIdSetIterator iterator, final FixedBitSet confirmed) {\n    return new TwoPhaseIterator(iterator) {\n\n      @Override\n      public boolean matches() throws IOException {\n        return confirmed.get(iterator.docID());\n      }\n    };\n  }\n\n","sourceOld":"  private static TwoPhaseIterator approximation(final DocIdSetIterator iterator, final FixedBitSet confirmed) {\n    return new TwoPhaseIterator() {\n\n      @Override\n      public DocIdSetIterator approximation() {\n        return iterator;\n      }\n\n      @Override\n      public boolean matches() throws IOException {\n        return confirmed.get(iterator.docID());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#approximation(DocIdSetIterator,FixedBitSet).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#approximation(DocIdSetIterator,FixedBitSet).mjava","sourceNew":"  private static TwoPhaseIterator approximation(final DocIdSetIterator iterator, final FixedBitSet confirmed) {\n    return new TwoPhaseIterator(iterator) {\n\n      @Override\n      public boolean matches() throws IOException {\n        return confirmed.get(iterator.docID());\n      }\n    };\n  }\n\n","sourceOld":"  private static TwoPhaseDocIdSetIterator approximation(final DocIdSetIterator iterator, final FixedBitSet confirmed) {\n    return new TwoPhaseDocIdSetIterator() {\n\n      @Override\n      public DocIdSetIterator approximation() {\n        return iterator;\n      }\n\n      @Override\n      public boolean matches() throws IOException {\n        return confirmed.get(iterator.docID());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d277693481ea6007c1d83cd503d0859bb3b64d20","date":1447445281,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#approximation(DocIdSetIterator,FixedBitSet).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#approximation(DocIdSetIterator,FixedBitSet).mjava","sourceNew":"  private static TwoPhaseIterator approximation(final DocIdSetIterator iterator, final FixedBitSet confirmed) {\n    return new TwoPhaseIterator(iterator) {\n\n      @Override\n      public boolean matches() throws IOException {\n        return confirmed.get(iterator.docID());\n      }\n\n      @Override\n      public float matchCost() {\n        return 5; // #operations in FixedBitSet#get()\n      }\n    };\n  }\n\n","sourceOld":"  private static TwoPhaseIterator approximation(final DocIdSetIterator iterator, final FixedBitSet confirmed) {\n    return new TwoPhaseIterator(iterator) {\n\n      @Override\n      public boolean matches() throws IOException {\n        return confirmed.get(iterator.docID());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e4566afb2ee65953d186f4f93735fde23674641","date":1466575467,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#approximation(DocIdSetIterator,FixedBitSet).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#approximation(DocIdSetIterator,FixedBitSet).mjava","sourceNew":"  private static TwoPhaseIterator approximation(DocIdSetIterator iterator, final FixedBitSet confirmed) {\n    DocIdSetIterator approximation;\n    if (random().nextBoolean()) {\n      approximation = anonymizeIterator(iterator);\n    } else {\n      approximation = iterator;\n    }\n    return new TwoPhaseIterator(approximation) {\n\n      @Override\n      public boolean matches() throws IOException {\n        return confirmed.get(approximation.docID());\n      }\n\n      @Override\n      public float matchCost() {\n        return 5; // #operations in FixedBitSet#get()\n      }\n    };\n  }\n\n","sourceOld":"  private static TwoPhaseIterator approximation(final DocIdSetIterator iterator, final FixedBitSet confirmed) {\n    return new TwoPhaseIterator(iterator) {\n\n      @Override\n      public boolean matches() throws IOException {\n        return confirmed.get(iterator.docID());\n      }\n\n      @Override\n      public float matchCost() {\n        return 5; // #operations in FixedBitSet#get()\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af167ac924ed00018fecc030b0a48b8b795c582e","date":1466596267,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#approximation(DocIdSetIterator,FixedBitSet).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#approximation(DocIdSetIterator,FixedBitSet).mjava","sourceNew":"  private static TwoPhaseIterator approximation(DocIdSetIterator iterator, final FixedBitSet confirmed) {\n    DocIdSetIterator approximation;\n    if (random().nextBoolean()) {\n      approximation = anonymizeIterator(iterator);\n    } else {\n      approximation = iterator;\n    }\n    return new TwoPhaseIterator(approximation) {\n\n      @Override\n      public boolean matches() throws IOException {\n        return confirmed.get(approximation.docID());\n      }\n\n      @Override\n      public float matchCost() {\n        return 5; // #operations in FixedBitSet#get()\n      }\n    };\n  }\n\n","sourceOld":"  private static TwoPhaseIterator approximation(final DocIdSetIterator iterator, final FixedBitSet confirmed) {\n    return new TwoPhaseIterator(iterator) {\n\n      @Override\n      public boolean matches() throws IOException {\n        return confirmed.get(iterator.docID());\n      }\n\n      @Override\n      public float matchCost() {\n        return 5; // #operations in FixedBitSet#get()\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#approximation(DocIdSetIterator,FixedBitSet).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#approximation(DocIdSetIterator,FixedBitSet).mjava","sourceNew":"  private static TwoPhaseIterator approximation(DocIdSetIterator iterator, final FixedBitSet confirmed) {\n    DocIdSetIterator approximation;\n    if (random().nextBoolean()) {\n      approximation = anonymizeIterator(iterator);\n    } else {\n      approximation = iterator;\n    }\n    return new TwoPhaseIterator(approximation) {\n\n      @Override\n      public boolean matches() throws IOException {\n        return confirmed.get(approximation.docID());\n      }\n\n      @Override\n      public float matchCost() {\n        return 5; // #operations in FixedBitSet#get()\n      }\n    };\n  }\n\n","sourceOld":"  private static TwoPhaseIterator approximation(final DocIdSetIterator iterator, final FixedBitSet confirmed) {\n    return new TwoPhaseIterator(iterator) {\n\n      @Override\n      public boolean matches() throws IOException {\n        return confirmed.get(iterator.docID());\n      }\n\n      @Override\n      public float matchCost() {\n        return 5; // #operations in FixedBitSet#get()\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73beab9372f571bc3dc060fcc658d2879ce20d67","date":1601905097,"type":3,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#approximation(DocIdSetIterator,FixedBitSet).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#approximation(DocIdSetIterator,FixedBitSet).mjava","sourceNew":"  private static TwoPhaseIterator approximation(DocIdSetIterator iterator, final FixedBitSet confirmed) {\n    DocIdSetIterator approximation;\n    if (random().nextBoolean()) {\n      approximation = anonymizeIterator(iterator);\n    } else {\n      approximation = iterator;\n    }\n    return new TwoPhaseIterator(approximation) {\n\n      @Override\n      public boolean matches() {\n        return confirmed.get(approximation.docID());\n      }\n\n      @Override\n      public float matchCost() {\n        return 5; // #operations in FixedBitSet#get()\n      }\n    };\n  }\n\n","sourceOld":"  private static TwoPhaseIterator approximation(DocIdSetIterator iterator, final FixedBitSet confirmed) {\n    DocIdSetIterator approximation;\n    if (random().nextBoolean()) {\n      approximation = anonymizeIterator(iterator);\n    } else {\n      approximation = iterator;\n    }\n    return new TwoPhaseIterator(approximation) {\n\n      @Override\n      public boolean matches() throws IOException {\n        return confirmed.get(approximation.docID());\n      }\n\n      @Override\n      public float matchCost() {\n        return 5; // #operations in FixedBitSet#get()\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14eadbcde31ef1b984ca353239772e18e1dcf667","date":1601909725,"type":3,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#approximation(DocIdSetIterator,FixedBitSet).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#approximation(DocIdSetIterator,FixedBitSet).mjava","sourceNew":"  private static TwoPhaseIterator approximation(DocIdSetIterator iterator, final FixedBitSet confirmed) {\n    DocIdSetIterator approximation;\n    if (random().nextBoolean()) {\n      approximation = anonymizeIterator(iterator);\n    } else {\n      approximation = iterator;\n    }\n    return new TwoPhaseIterator(approximation) {\n\n      @Override\n      public boolean matches() throws IOException {\n        return confirmed.get(approximation.docID());\n      }\n\n      @Override\n      public float matchCost() {\n        return 5; // #operations in FixedBitSet#get()\n      }\n    };\n  }\n\n","sourceOld":"  private static TwoPhaseIterator approximation(DocIdSetIterator iterator, final FixedBitSet confirmed) {\n    DocIdSetIterator approximation;\n    if (random().nextBoolean()) {\n      approximation = anonymizeIterator(iterator);\n    } else {\n      approximation = iterator;\n    }\n    return new TwoPhaseIterator(approximation) {\n\n      @Override\n      public boolean matches() {\n        return confirmed.get(approximation.docID());\n      }\n\n      @Override\n      public float matchCost() {\n        return 5; // #operations in FixedBitSet#get()\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9f411fcb966d871aaa550f0ad1e328ce71df018","date":1602004981,"type":3,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#approximation(DocIdSetIterator,FixedBitSet).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#approximation(DocIdSetIterator,FixedBitSet).mjava","sourceNew":"  private static TwoPhaseIterator approximation(DocIdSetIterator iterator, final FixedBitSet confirmed) {\n    DocIdSetIterator approximation;\n    if (random().nextBoolean()) {\n      approximation = anonymizeIterator(iterator);\n    } else {\n      approximation = iterator;\n    }\n    return new TwoPhaseIterator(approximation) {\n\n      @Override\n      public boolean matches() {\n        return confirmed.get(approximation.docID());\n      }\n\n      @Override\n      public float matchCost() {\n        return 5; // #operations in FixedBitSet#get()\n      }\n    };\n  }\n\n","sourceOld":"  private static TwoPhaseIterator approximation(DocIdSetIterator iterator, final FixedBitSet confirmed) {\n    DocIdSetIterator approximation;\n    if (random().nextBoolean()) {\n      approximation = anonymizeIterator(iterator);\n    } else {\n      approximation = iterator;\n    }\n    return new TwoPhaseIterator(approximation) {\n\n      @Override\n      public boolean matches() throws IOException {\n        return confirmed.get(approximation.docID());\n      }\n\n      @Override\n      public float matchCost() {\n        return 5; // #operations in FixedBitSet#get()\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["7a6b1be5d2b36d6a30913778ef61374103d55e33"],"a9f411fcb966d871aaa550f0ad1e328ce71df018":["14eadbcde31ef1b984ca353239772e18e1dcf667"],"a3d6eb0072094d94624002318ba2d4c840946833":["c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d277693481ea6007c1d83cd503d0859bb3b64d20","af167ac924ed00018fecc030b0a48b8b795c582e"],"7a6b1be5d2b36d6a30913778ef61374103d55e33":["a3d6eb0072094d94624002318ba2d4c840946833"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1","7a6b1be5d2b36d6a30913778ef61374103d55e33"],"af167ac924ed00018fecc030b0a48b8b795c582e":["d277693481ea6007c1d83cd503d0859bb3b64d20","2e4566afb2ee65953d186f4f93735fde23674641"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2e4566afb2ee65953d186f4f93735fde23674641":["d277693481ea6007c1d83cd503d0859bb3b64d20"],"73beab9372f571bc3dc060fcc658d2879ce20d67":["af167ac924ed00018fecc030b0a48b8b795c582e"],"14eadbcde31ef1b984ca353239772e18e1dcf667":["73beab9372f571bc3dc060fcc658d2879ce20d67"],"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a9f411fcb966d871aaa550f0ad1e328ce71df018"]},"commit2Childs":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","af167ac924ed00018fecc030b0a48b8b795c582e","2e4566afb2ee65953d186f4f93735fde23674641"],"a9f411fcb966d871aaa550f0ad1e328ce71df018":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3d6eb0072094d94624002318ba2d4c840946833":["7a6b1be5d2b36d6a30913778ef61374103d55e33"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"7a6b1be5d2b36d6a30913778ef61374103d55e33":["d277693481ea6007c1d83cd503d0859bb3b64d20","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"af167ac924ed00018fecc030b0a48b8b795c582e":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","73beab9372f571bc3dc060fcc658d2879ce20d67"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1"],"2e4566afb2ee65953d186f4f93735fde23674641":["af167ac924ed00018fecc030b0a48b8b795c582e"],"73beab9372f571bc3dc060fcc658d2879ce20d67":["14eadbcde31ef1b984ca353239772e18e1dcf667"],"14eadbcde31ef1b984ca353239772e18e1dcf667":["a9f411fcb966d871aaa550f0ad1e328ce71df018"],"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1":["a3d6eb0072094d94624002318ba2d4c840946833","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}