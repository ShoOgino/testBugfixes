{"path":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testStaticMethod2Old().mjava","commits":[{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testStaticMethod2Old().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testStaticMethod2Old().mjava","sourceNew":"  public void testStaticMethod2Old() throws QueryNodeException {\n    String[] fields = { \"b\", \"t\" };\n    BooleanClause.Occur[] flags = { BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT };\n    StandardQueryParser parser = new StandardQueryParser();\n    parser.setMultiFields(fields);\n    parser.setAnalyzer(new MockAnalyzer(random));\n\n    Query q = QueryParserUtil.parse(\"one\", fields, flags,\n        new MockAnalyzer(random));// , fields, flags, new\n    // MockAnalyzer());\n    assertEquals(\"+b:one -t:one\", q.toString());\n\n    q = QueryParserUtil.parse(\"one two\", fields, flags, new MockAnalyzer(random));\n    assertEquals(\"+(b:one b:two) -(t:one t:two)\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = { BooleanClause.Occur.MUST };\n      q = QueryParserUtil.parse(\"blah\", fields, flags2, new MockAnalyzer(random));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","sourceOld":"  public void testStaticMethod2Old() throws QueryNodeException {\n    String[] fields = { \"b\", \"t\" };\n    BooleanClause.Occur[] flags = { BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT };\n    StandardQueryParser parser = new StandardQueryParser();\n    parser.setMultiFields(fields);\n    parser.setAnalyzer(new MockAnalyzer(random));\n\n    Query q = QueryParserUtil.parse(\"one\", fields, flags,\n        new MockAnalyzer(random));// , fields, flags, new\n    // MockAnalyzer());\n    assertEquals(\"+b:one -t:one\", q.toString());\n\n    q = QueryParserUtil.parse(\"one two\", fields, flags, new MockAnalyzer(random));\n    assertEquals(\"+(b:one b:two) -(t:one t:two)\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = { BooleanClause.Occur.MUST };\n      q = QueryParserUtil.parse(\"blah\", fields, flags2, new MockAnalyzer(random));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testStaticMethod2Old().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testStaticMethod2Old().mjava","sourceNew":"  public void testStaticMethod2Old() throws QueryNodeException {\n    String[] fields = { \"b\", \"t\" };\n    BooleanClause.Occur[] flags = { BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT };\n    StandardQueryParser parser = new StandardQueryParser();\n    parser.setMultiFields(fields);\n    parser.setAnalyzer(new MockAnalyzer(random()));\n\n    Query q = QueryParserUtil.parse(\"one\", fields, flags,\n        new MockAnalyzer(random()));// , fields, flags, new\n    // MockAnalyzer());\n    assertEquals(\"+b:one -t:one\", q.toString());\n\n    q = QueryParserUtil.parse(\"one two\", fields, flags, new MockAnalyzer(random()));\n    assertEquals(\"+(b:one b:two) -(t:one t:two)\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = { BooleanClause.Occur.MUST };\n      q = QueryParserUtil.parse(\"blah\", fields, flags2, new MockAnalyzer(random()));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","sourceOld":"  public void testStaticMethod2Old() throws QueryNodeException {\n    String[] fields = { \"b\", \"t\" };\n    BooleanClause.Occur[] flags = { BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT };\n    StandardQueryParser parser = new StandardQueryParser();\n    parser.setMultiFields(fields);\n    parser.setAnalyzer(new MockAnalyzer(random));\n\n    Query q = QueryParserUtil.parse(\"one\", fields, flags,\n        new MockAnalyzer(random));// , fields, flags, new\n    // MockAnalyzer());\n    assertEquals(\"+b:one -t:one\", q.toString());\n\n    q = QueryParserUtil.parse(\"one two\", fields, flags, new MockAnalyzer(random));\n    assertEquals(\"+(b:one b:two) -(t:one t:two)\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = { BooleanClause.Occur.MUST };\n      q = QueryParserUtil.parse(\"blah\", fields, flags2, new MockAnalyzer(random));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testStaticMethod2Old().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testStaticMethod2Old().mjava","sourceNew":"  public void testStaticMethod2Old() throws QueryNodeException {\n    String[] fields = { \"b\", \"t\" };\n    BooleanClause.Occur[] flags = { BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT };\n    StandardQueryParser parser = new StandardQueryParser();\n    parser.setMultiFields(fields);\n    parser.setAnalyzer(new MockAnalyzer(random()));\n\n    Query q = QueryParserUtil.parse(\"one\", fields, flags,\n        new MockAnalyzer(random()));// , fields, flags, new\n    // MockAnalyzer());\n    assertEquals(\"+b:one -t:one\", q.toString());\n\n    q = QueryParserUtil.parse(\"one two\", fields, flags, new MockAnalyzer(random()));\n    assertEquals(\"+(b:one b:two) -(t:one t:two)\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = { BooleanClause.Occur.MUST };\n      q = QueryParserUtil.parse(\"blah\", fields, flags2, new MockAnalyzer(random()));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","sourceOld":"  public void testStaticMethod2Old() throws QueryNodeException {\n    String[] fields = { \"b\", \"t\" };\n    BooleanClause.Occur[] flags = { BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT };\n    StandardQueryParser parser = new StandardQueryParser();\n    parser.setMultiFields(fields);\n    parser.setAnalyzer(new MockAnalyzer(random()));\n\n    Query q = QueryParserUtil.parse(\"one\", fields, flags,\n        new MockAnalyzer(random()));// , fields, flags, new\n    // MockAnalyzer());\n    assertEquals(\"+b:one -t:one\", q.toString());\n\n    q = QueryParserUtil.parse(\"one two\", fields, flags, new MockAnalyzer(random()));\n    assertEquals(\"+(b:one b:two) -(t:one t:two)\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = { BooleanClause.Occur.MUST };\n      q = QueryParserUtil.parse(\"blah\", fields, flags2, new MockAnalyzer(random()));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}