{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockImpactsEverythingEnum#refillDocs().mjava","commits":[{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockImpactsEverythingEnum#refillDocs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockImpactsEverythingEnum#refillDocs().mjava","sourceNew":"    private void refillDocs() throws IOException {\n      if (indexHasFreq) {\n        if (isFreqsRead == false) { // previous freq block was not read\n          // check if we need to load the previous freq block to catch up on positions or we can skip it\n          if (indexHasPos && needsPositions && (posDocUpTo < docUpto)) {\n            forUtil.readBlock(docIn, encoded, freqBuffer); // load the previous freq block\n          } else {\n            forUtil.skipBlock(docIn); // skip it\n          }\n          isFreqsRead = true;\n        }\n        if (indexHasPos && needsPositions) {\n          while (posDocUpTo < docUpto) { // catch on positions, bring posPendingCount upto the current doc\n            posPendingCount += freqBuffer[docBufferUpto - (docUpto - posDocUpTo)];\n            posDocUpTo++;\n          }\n        }\n      }\n\n      final int left = docFreq - docUpto;\n      assert left > 0;\n\n      if (left >= BLOCK_SIZE) {\n        forUtil.readBlock(docIn, encoded, docDeltaBuffer);\n        if (indexHasFreq) {\n          isFreqsRead = false; // freq block will be loaded lazily when necessary, we don't load it here\n        }\n      } else {\n        readVIntBlock(docIn, docDeltaBuffer, freqBuffer, left, indexHasFreq);\n      }\n      docBufferUpto = 0;\n    }\n\n","sourceOld":"    private void refillDocs() throws IOException {\n      if (indexHasFreq) {\n        if (isFreqsRead == false) { // previous freq block was not read\n          // check if we need to load the previous freq block to catch up on positions or we can skip it\n          if (indexHasPos && needsPositions && (posDocUpTo < docUpto)) {\n            forUtil.readBlock(docIn, encoded, freqBuffer); // load the previous freq block\n          } else {\n            forUtil.skipBlock(docIn); // skip it\n          }\n          isFreqsRead = true;\n        }\n        if (indexHasPos && needsPositions) {\n          while (posDocUpTo < docUpto) { // catch on positions, bring posPendingCount upto the current doc\n            posPendingCount += freqBuffer[docBufferUpto - (docUpto - posDocUpTo)];\n            posDocUpTo++;\n          }\n        }\n      }\n\n      final int left = docFreq - docUpto;\n      assert left > 0;\n\n      if (left >= BLOCK_SIZE) {\n        forUtil.readBlock(docIn, encoded, docDeltaBuffer);\n        if (indexHasFreq) {\n          isFreqsRead = false; // freq block will be loaded lazily when necessary, we don't load it here\n        }\n      } else {\n        readVIntBlock(docIn, docDeltaBuffer, freqBuffer, left, indexHasFreq);\n      }\n      docBufferUpto = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"]},"commit2Childs":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}