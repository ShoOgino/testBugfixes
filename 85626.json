{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getLiveOrLiveAndCreateNodeSetList(Set[String],ZkNodeProps,Random).mjava","commits":[{"id":"08b22329006608bd6b95aeba7a59f28092cd7a5e","date":1419362789,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getLiveOrLiveAndCreateNodeSetList(Set[String],ZkNodeProps,Random).mjava","pathOld":"/dev/null","sourceNew":"  private static List<String> getLiveOrLiveAndCreateNodeSetList(final Set<String> liveNodes, final ZkNodeProps message, final Random random) {\n    // TODO: add smarter options that look at the current number of cores per\n    // node?\n    // for now we just go random (except when createNodeSet and createNodeSet.shuffle=false are passed in)\n\n    List<String> nodeList;\n\n    final String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    final List<String> createNodeList = (createNodeSetStr == null)?null:StrUtils.splitSmart(createNodeSetStr, \",\", true);\n\n    if (createNodeList != null) {\n      nodeList = new ArrayList<>(createNodeList);\n      nodeList.retainAll(liveNodes);\n      if (message.getBool(CREATE_NODE_SET_SHUFFLE, CREATE_NODE_SET_SHUFFLE_DEFAULT)) {\n        Collections.shuffle(nodeList, random);\n      }\n    } else {\n      nodeList = new ArrayList<>(liveNodes);\n      Collections.shuffle(nodeList, random);\n    }\n    \n    return nodeList;    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe","date":1430750405,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getLiveOrLiveAndCreateNodeSetList(Set[String],ZkNodeProps,Random).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getLiveOrLiveAndCreateNodeSetList(Set[String],ZkNodeProps,Random).mjava","sourceNew":"  private static List<String> getLiveOrLiveAndCreateNodeSetList(final Set<String> liveNodes, final ZkNodeProps message, final Random random) {\n    // TODO: add smarter options that look at the current number of cores per\n    // node?\n    // for now we just go random (except when createNodeSet and createNodeSet.shuffle=false are passed in)\n\n    List<String> nodeList;\n\n    final String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    final List<String> createNodeList = (createNodeSetStr == null)?null:StrUtils.splitSmart(createNodeSetStr, \",\", true);\n\n    if (createNodeList != null) {\n      nodeList = new ArrayList<>(createNodeList);\n      nodeList.retainAll(liveNodes);\n      if (message.getBool(CREATE_NODE_SET_SHUFFLE, CREATE_NODE_SET_SHUFFLE_DEFAULT)) {\n        Collections.shuffle(nodeList, random);\n      }\n    } else {\n      nodeList = new ArrayList<>(liveNodes);\n      Collections.shuffle(nodeList, random);\n    }\n\n    return nodeList;\n  }\n\n","sourceOld":"  private static List<String> getLiveOrLiveAndCreateNodeSetList(final Set<String> liveNodes, final ZkNodeProps message, final Random random) {\n    // TODO: add smarter options that look at the current number of cores per\n    // node?\n    // for now we just go random (except when createNodeSet and createNodeSet.shuffle=false are passed in)\n\n    List<String> nodeList;\n\n    final String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    final List<String> createNodeList = (createNodeSetStr == null)?null:StrUtils.splitSmart(createNodeSetStr, \",\", true);\n\n    if (createNodeList != null) {\n      nodeList = new ArrayList<>(createNodeList);\n      nodeList.retainAll(liveNodes);\n      if (message.getBool(CREATE_NODE_SET_SHUFFLE, CREATE_NODE_SET_SHUFFLE_DEFAULT)) {\n        Collections.shuffle(nodeList, random);\n      }\n    } else {\n      nodeList = new ArrayList<>(liveNodes);\n      Collections.shuffle(nodeList, random);\n    }\n    \n    return nodeList;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c0d0643efdcc41b0c814bf27a381e4dc2ff472b","date":1438774486,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getLiveOrLiveAndCreateNodeSetList(Set[String],ZkNodeProps,Random).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getLiveOrLiveAndCreateNodeSetList(Set[String],ZkNodeProps,Random).mjava","sourceNew":"  private static List<String> getLiveOrLiveAndCreateNodeSetList(final Set<String> liveNodes, final ZkNodeProps message, final Random random) {\n    // TODO: add smarter options that look at the current number of cores per\n    // node?\n    // for now we just go random (except when createNodeSet and createNodeSet.shuffle=false are passed in)\n\n    List<String> nodeList;\n\n    final String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    final List<String> createNodeList = (createNodeSetStr == null)?null:StrUtils.splitSmart((CREATE_NODE_SET_EMPTY.equals(createNodeSetStr)?\"\":createNodeSetStr), \",\", true);\n\n    if (createNodeList != null) {\n      nodeList = new ArrayList<>(createNodeList);\n      nodeList.retainAll(liveNodes);\n      if (message.getBool(CREATE_NODE_SET_SHUFFLE, CREATE_NODE_SET_SHUFFLE_DEFAULT)) {\n        Collections.shuffle(nodeList, random);\n      }\n    } else {\n      nodeList = new ArrayList<>(liveNodes);\n      Collections.shuffle(nodeList, random);\n    }\n\n    return nodeList;\n  }\n\n","sourceOld":"  private static List<String> getLiveOrLiveAndCreateNodeSetList(final Set<String> liveNodes, final ZkNodeProps message, final Random random) {\n    // TODO: add smarter options that look at the current number of cores per\n    // node?\n    // for now we just go random (except when createNodeSet and createNodeSet.shuffle=false are passed in)\n\n    List<String> nodeList;\n\n    final String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    final List<String> createNodeList = (createNodeSetStr == null)?null:StrUtils.splitSmart(createNodeSetStr, \",\", true);\n\n    if (createNodeList != null) {\n      nodeList = new ArrayList<>(createNodeList);\n      nodeList.retainAll(liveNodes);\n      if (message.getBool(CREATE_NODE_SET_SHUFFLE, CREATE_NODE_SET_SHUFFLE_DEFAULT)) {\n        Collections.shuffle(nodeList, random);\n      }\n    } else {\n      nodeList = new ArrayList<>(liveNodes);\n      Collections.shuffle(nodeList, random);\n    }\n\n    return nodeList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":5,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#getLiveOrLiveAndCreateNodeSetList(Set[String],ZkNodeProps,Random).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#getLiveOrLiveAndCreateNodeSetList(Set[String],ZkNodeProps,Random).mjava","sourceNew":"  private static List<String> getLiveOrLiveAndCreateNodeSetList(final Set<String> liveNodes, final ZkNodeProps message, final Random random) {\n    // TODO: add smarter options that look at the current number of cores per\n    // node?\n    // for now we just go random (except when createNodeSet and createNodeSet.shuffle=false are passed in)\n\n    List<String> nodeList;\n\n    final String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    final List<String> createNodeList = (createNodeSetStr == null)?null:StrUtils.splitSmart((CREATE_NODE_SET_EMPTY.equals(createNodeSetStr)?\"\":createNodeSetStr), \",\", true);\n\n    if (createNodeList != null) {\n      nodeList = new ArrayList<>(createNodeList);\n      nodeList.retainAll(liveNodes);\n      if (message.getBool(CREATE_NODE_SET_SHUFFLE, CREATE_NODE_SET_SHUFFLE_DEFAULT)) {\n        Collections.shuffle(nodeList, random);\n      }\n    } else {\n      nodeList = new ArrayList<>(liveNodes);\n      Collections.shuffle(nodeList, random);\n    }\n\n    return nodeList;\n  }\n\n","sourceOld":"  private static List<String> getLiveOrLiveAndCreateNodeSetList(final Set<String> liveNodes, final ZkNodeProps message, final Random random) {\n    // TODO: add smarter options that look at the current number of cores per\n    // node?\n    // for now we just go random (except when createNodeSet and createNodeSet.shuffle=false are passed in)\n\n    List<String> nodeList;\n\n    final String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    final List<String> createNodeList = (createNodeSetStr == null)?null:StrUtils.splitSmart((CREATE_NODE_SET_EMPTY.equals(createNodeSetStr)?\"\":createNodeSetStr), \",\", true);\n\n    if (createNodeList != null) {\n      nodeList = new ArrayList<>(createNodeList);\n      nodeList.retainAll(liveNodes);\n      if (message.getBool(CREATE_NODE_SET_SHUFFLE, CREATE_NODE_SET_SHUFFLE_DEFAULT)) {\n        Collections.shuffle(nodeList, random);\n      }\n    } else {\n      nodeList = new ArrayList<>(liveNodes);\n      Collections.shuffle(nodeList, random);\n    }\n\n    return nodeList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["2c0d0643efdcc41b0c814bf27a381e4dc2ff472b"],"2c0d0643efdcc41b0c814bf27a381e4dc2ff472b":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe":["08b22329006608bd6b95aeba7a59f28092cd7a5e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"08b22329006608bd6b95aeba7a59f28092cd7a5e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"]},"commit2Childs":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2c0d0643efdcc41b0c814bf27a381e4dc2ff472b":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe":["2c0d0643efdcc41b0c814bf27a381e4dc2ff472b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08b22329006608bd6b95aeba7a59f28092cd7a5e"],"08b22329006608bd6b95aeba7a59f28092cd7a5e":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}