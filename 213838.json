{"path":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testSeekingAndNexting().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testSeekingAndNexting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermsEnum2#testSeekingAndNexting().mjava","sourceNew":"  /** mixes up seek and next for all terms */\n  public void testSeekingAndNexting() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").iterator(null);\n\n      for (BytesRef term : terms) {\n        int c = random.nextInt(3);\n        if (c == 0) {\n          assertEquals(term, te.next());\n        } else if (c == 1) {\n          assertEquals(SeekStatus.FOUND, te.seekCeil(term, random.nextBoolean()));\n          assertEquals(term, te.term());\n        } else {\n          assertTrue(te.seekExact(term, random.nextBoolean()));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** mixes up seek and next for all terms */\n  public void testSeekingAndNexting() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").iterator(null);\n\n      for (BytesRef term : terms) {\n        int c = random.nextInt(3);\n        if (c == 0) {\n          assertEquals(term, te.next());\n        } else if (c == 1) {\n          assertEquals(SeekStatus.FOUND, te.seekCeil(term, random.nextBoolean()));\n          assertEquals(term, te.term());\n        } else {\n          assertTrue(te.seekExact(term, random.nextBoolean()));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testSeekingAndNexting().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testSeekingAndNexting().mjava","sourceNew":"  /** mixes up seek and next for all terms */\n  public void testSeekingAndNexting() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").iterator(null);\n\n      for (BytesRef term : terms) {\n        int c = random().nextInt(3);\n        if (c == 0) {\n          assertEquals(term, te.next());\n        } else if (c == 1) {\n          assertEquals(SeekStatus.FOUND, te.seekCeil(term, random().nextBoolean()));\n          assertEquals(term, te.term());\n        } else {\n          assertTrue(te.seekExact(term, random().nextBoolean()));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** mixes up seek and next for all terms */\n  public void testSeekingAndNexting() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").iterator(null);\n\n      for (BytesRef term : terms) {\n        int c = random.nextInt(3);\n        if (c == 0) {\n          assertEquals(term, te.next());\n        } else if (c == 1) {\n          assertEquals(SeekStatus.FOUND, te.seekCeil(term, random.nextBoolean()));\n          assertEquals(term, te.term());\n        } else {\n          assertTrue(te.seekExact(term, random.nextBoolean()));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testSeekingAndNexting().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testSeekingAndNexting().mjava","sourceNew":"  /** mixes up seek and next for all terms */\n  public void testSeekingAndNexting() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").iterator(null);\n\n      for (BytesRef term : terms) {\n        int c = random().nextInt(3);\n        if (c == 0) {\n          assertEquals(term, te.next());\n        } else if (c == 1) {\n          assertEquals(SeekStatus.FOUND, te.seekCeil(term));\n          assertEquals(term, te.term());\n        } else {\n          assertTrue(te.seekExact(term));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** mixes up seek and next for all terms */\n  public void testSeekingAndNexting() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").iterator(null);\n\n      for (BytesRef term : terms) {\n        int c = random().nextInt(3);\n        if (c == 0) {\n          assertEquals(term, te.next());\n        } else if (c == 1) {\n          assertEquals(SeekStatus.FOUND, te.seekCeil(term, random().nextBoolean()));\n          assertEquals(term, te.term());\n        } else {\n          assertTrue(te.seekExact(term, random().nextBoolean()));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testSeekingAndNexting().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testSeekingAndNexting().mjava","sourceNew":"  /** mixes up seek and next for all terms */\n  public void testSeekingAndNexting() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").iterator(null);\n\n      for (BytesRef term : terms) {\n        int c = random().nextInt(3);\n        if (c == 0) {\n          assertEquals(term, te.next());\n        } else if (c == 1) {\n          assertEquals(SeekStatus.FOUND, te.seekCeil(term));\n          assertEquals(term, te.term());\n        } else {\n          assertTrue(te.seekExact(term));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** mixes up seek and next for all terms */\n  public void testSeekingAndNexting() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").iterator(null);\n\n      for (BytesRef term : terms) {\n        int c = random().nextInt(3);\n        if (c == 0) {\n          assertEquals(term, te.next());\n        } else if (c == 1) {\n          assertEquals(SeekStatus.FOUND, te.seekCeil(term, random().nextBoolean()));\n          assertEquals(term, te.term());\n        } else {\n          assertTrue(te.seekExact(term, random().nextBoolean()));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testSeekingAndNexting().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testSeekingAndNexting().mjava","sourceNew":"  /** mixes up seek and next for all terms */\n  public void testSeekingAndNexting() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").iterator();\n\n      for (BytesRef term : terms) {\n        int c = random().nextInt(3);\n        if (c == 0) {\n          assertEquals(term, te.next());\n        } else if (c == 1) {\n          assertEquals(SeekStatus.FOUND, te.seekCeil(term));\n          assertEquals(term, te.term());\n        } else {\n          assertTrue(te.seekExact(term));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** mixes up seek and next for all terms */\n  public void testSeekingAndNexting() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").iterator(null);\n\n      for (BytesRef term : terms) {\n        int c = random().nextInt(3);\n        if (c == 0) {\n          assertEquals(term, te.next());\n        } else if (c == 1) {\n          assertEquals(SeekStatus.FOUND, te.seekCeil(term));\n          assertEquals(term, te.term());\n        } else {\n          assertTrue(te.seekExact(term));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testSeekingAndNexting().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testSeekingAndNexting().mjava","sourceNew":"  /** mixes up seek and next for all terms */\n  public void testSeekingAndNexting() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      TermsEnum te = MultiTerms.getTerms(reader, \"field\").iterator();\n\n      for (BytesRef term : terms) {\n        int c = random().nextInt(3);\n        if (c == 0) {\n          assertEquals(term, te.next());\n        } else if (c == 1) {\n          assertEquals(SeekStatus.FOUND, te.seekCeil(term));\n          assertEquals(term, te.term());\n        } else {\n          assertTrue(te.seekExact(term));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** mixes up seek and next for all terms */\n  public void testSeekingAndNexting() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").iterator();\n\n      for (BytesRef term : terms) {\n        int c = random().nextInt(3);\n        if (c == 0) {\n          assertEquals(term, te.next());\n        } else if (c == 1) {\n          assertEquals(SeekStatus.FOUND, te.seekCeil(term));\n          assertEquals(term, te.term());\n        } else {\n          assertTrue(te.seekExact(term));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}