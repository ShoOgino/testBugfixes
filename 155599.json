{"path":"contrib/miscellaneous/src/java/org/apache/lucene/misc/SweetSpotSimilarity#baselineTf(float).mjava","commits":[{"id":"6f9cbf33fc4a562e686c8dc8f92b7856f051b90a","date":1148592089,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"contrib/miscellaneous/src/java/org/apache/lucene/misc/SweetSpotSimilarity#baselineTf(float).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Implimented as:\n   * <code>\n   *  (x &lt;= min) ? base : sqrt(x+(base**2)-min)\n   * </code>\n   * ...but with a special case check for 0.\n   * <p>\n   * This degrates to <code>sqrt(x)</code> when min and base are both 0\n   * </p>\n   *\n   * @see #setBaselineTfFactors\n   */\n  public float baselineTf(float freq) {\n\n    if (0.0f == freq) return 0.0f;\n  \n    return (freq <= tf_min)\n      ? tf_base\n      : (float)Math.sqrt(freq + (tf_base * tf_base) - tf_min);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10c49614cb8b943c412debb24ccb614128394470","date":1178343409,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/miscellaneous/src/java/org/apache/lucene/misc/SweetSpotSimilarity#baselineTf(float).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/misc/SweetSpotSimilarity#baselineTf(float).mjava","sourceNew":"  /**\n   * Implemented as:\n   * <code>\n   *  (x &lt;= min) &#63; base : sqrt(x+(base**2)-min)\n   * </code>\n   * ...but with a special case check for 0.\n   * <p>\n   * This degrates to <code>sqrt(x)</code> when min and base are both 0\n   * </p>\n   *\n   * @see #setBaselineTfFactors\n   */\n  public float baselineTf(float freq) {\n\n    if (0.0f == freq) return 0.0f;\n  \n    return (freq <= tf_min)\n      ? tf_base\n      : (float)Math.sqrt(freq + (tf_base * tf_base) - tf_min);\n  }\n\n","sourceOld":"  /**\n   * Implimented as:\n   * <code>\n   *  (x &lt;= min) ? base : sqrt(x+(base**2)-min)\n   * </code>\n   * ...but with a special case check for 0.\n   * <p>\n   * This degrates to <code>sqrt(x)</code> when min and base are both 0\n   * </p>\n   *\n   * @see #setBaselineTfFactors\n   */\n  public float baselineTf(float freq) {\n\n    if (0.0f == freq) return 0.0f;\n  \n    return (freq <= tf_min)\n      ? tf_base\n      : (float)Math.sqrt(freq + (tf_base * tf_base) - tf_min);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48bedd31c61edafb8baaff4bcbcac19449fb7c3a","date":1251468037,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#baselineTf(float).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/misc/SweetSpotSimilarity#baselineTf(float).mjava","sourceNew":"  /**\n   * Implemented as:\n   * <code>\n   *  (x &lt;= min) &#63; base : sqrt(x+(base**2)-min)\n   * </code>\n   * ...but with a special case check for 0.\n   * <p>\n   * This degrates to <code>sqrt(x)</code> when min and base are both 0\n   * </p>\n   *\n   * @see #setBaselineTfFactors\n   */\n  public float baselineTf(float freq) {\n\n    if (0.0f == freq) return 0.0f;\n  \n    return (freq <= tf_min)\n      ? tf_base\n      : (float)Math.sqrt(freq + (tf_base * tf_base) - tf_min);\n  }\n\n","sourceOld":"  /**\n   * Implemented as:\n   * <code>\n   *  (x &lt;= min) &#63; base : sqrt(x+(base**2)-min)\n   * </code>\n   * ...but with a special case check for 0.\n   * <p>\n   * This degrates to <code>sqrt(x)</code> when min and base are both 0\n   * </p>\n   *\n   * @see #setBaselineTfFactors\n   */\n  public float baselineTf(float freq) {\n\n    if (0.0f == freq) return 0.0f;\n  \n    return (freq <= tf_min)\n      ? tf_base\n      : (float)Math.sqrt(freq + (tf_base * tf_base) - tf_min);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["10c49614cb8b943c412debb24ccb614128394470"],"10c49614cb8b943c412debb24ccb614128394470":["6f9cbf33fc4a562e686c8dc8f92b7856f051b90a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6f9cbf33fc4a562e686c8dc8f92b7856f051b90a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"]},"commit2Childs":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"10c49614cb8b943c412debb24ccb614128394470":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6f9cbf33fc4a562e686c8dc8f92b7856f051b90a"],"6f9cbf33fc4a562e686c8dc8f92b7856f051b90a":["10c49614cb8b943c412debb24ccb614128394470"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}