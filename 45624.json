{"path":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#LRUQueryCache(int,long).mjava","commits":[{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#LRUQueryCache(int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUFilterCache#LRUFilterCache(int,long).mjava","sourceNew":"  /**\n   * Create a new instance that will cache at most <code>maxSize</code> queries\n   * with at most <code>maxRamBytesUsed</code> bytes of memory.\n   */\n  public LRUQueryCache(int maxSize, long maxRamBytesUsed) {\n    this.maxSize = maxSize;\n    this.maxRamBytesUsed = maxRamBytesUsed;\n    uniqueQueries = new LinkedHashMap<>(16, 0.75f, true);\n    mostRecentlyUsedQueries = uniqueQueries.keySet();\n    cache = new IdentityHashMap<>();\n    ramBytesUsed = 0;\n  }\n\n","sourceOld":"  /**\n   * Create a new instance that will cache at most <code>maxSize</code> filters\n   * with at most <code>maxRamBytesUsed</code> bytes of memory.\n   */\n  public LRUFilterCache(int maxSize, long maxRamBytesUsed) {\n    this.maxSize = maxSize;\n    this.maxRamBytesUsed = maxRamBytesUsed;\n    uniqueFilters = new LinkedHashMap<Filter, Filter>(16, 0.75f, true);\n    mostRecentlyUsedFilters = uniqueFilters.keySet();\n    cache = new IdentityHashMap<>();\n    ramBytesUsed = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#LRUQueryCache(int,long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new instance that will cache at most <code>maxSize</code> queries\n   * with at most <code>maxRamBytesUsed</code> bytes of memory.\n   */\n  public LRUQueryCache(int maxSize, long maxRamBytesUsed) {\n    this.maxSize = maxSize;\n    this.maxRamBytesUsed = maxRamBytesUsed;\n    uniqueQueries = new LinkedHashMap<>(16, 0.75f, true);\n    mostRecentlyUsedQueries = uniqueQueries.keySet();\n    cache = new IdentityHashMap<>();\n    ramBytesUsed = 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aac61ee5b4492f174e60bd54939aba9539906edf","date":1461245473,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#LRUQueryCache(int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#LRUQueryCache(int,long).mjava","sourceNew":"  /**\n   * Create a new instance that will cache at most <code>maxSize</code> queries\n   * with at most <code>maxRamBytesUsed</code> bytes of memory. Queries will\n   * only be cached on leaves that have more than 10k documents and have more\n   * than 3% of the total number of documents in the index.\n   * This should guarantee that all leaves from the upper\n   * {@link TieredMergePolicy tier} will be cached while ensuring that at most\n   * <tt>33</tt> leaves can make it to the cache (very likely less than 10 in\n   * practice), which is useful for this implementation since some operations\n   * perform in linear time with the number of cached leaves.\n   */\n  public LRUQueryCache(int maxSize, long maxRamBytesUsed) {\n    this(maxSize, maxRamBytesUsed, new MinSegmentSizePredicate(10000, .03f));\n  }\n\n","sourceOld":"  /**\n   * Create a new instance that will cache at most <code>maxSize</code> queries\n   * with at most <code>maxRamBytesUsed</code> bytes of memory.\n   */\n  public LRUQueryCache(int maxSize, long maxRamBytesUsed) {\n    this.maxSize = maxSize;\n    this.maxRamBytesUsed = maxRamBytesUsed;\n    uniqueQueries = new LinkedHashMap<>(16, 0.75f, true);\n    mostRecentlyUsedQueries = uniqueQueries.keySet();\n    cache = new IdentityHashMap<>();\n    ramBytesUsed = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7732a106554be0db3e03ac5211e46f6e0c285b8","date":1511975378,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#LRUQueryCache(int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#LRUQueryCache(int,long).mjava","sourceNew":"  /**\n   * Create a new instance that will cache at most <code>maxSize</code> queries\n   * with at most <code>maxRamBytesUsed</code> bytes of memory. Queries will\n   * only be cached on leaves that have more than 10k documents and have more\n   * than 3% of the total number of documents in the index.\n   * This should guarantee that all leaves from the upper\n   * {@link TieredMergePolicy tier} will be cached while ensuring that at most\n   * <tt>33</tt> leaves can make it to the cache (very likely less than 10 in\n   * practice), which is useful for this implementation since some operations\n   * perform in linear time with the number of cached leaves.\n   * Only clauses whose cost is at most 100x the cost of the top-level query will\n   * be cached in order to not hurt latency too much because of caching.\n   */\n  public LRUQueryCache(int maxSize, long maxRamBytesUsed) {\n    this(maxSize, maxRamBytesUsed, new MinSegmentSizePredicate(10000, .03f), 100);\n  }\n\n","sourceOld":"  /**\n   * Create a new instance that will cache at most <code>maxSize</code> queries\n   * with at most <code>maxRamBytesUsed</code> bytes of memory. Queries will\n   * only be cached on leaves that have more than 10k documents and have more\n   * than 3% of the total number of documents in the index.\n   * This should guarantee that all leaves from the upper\n   * {@link TieredMergePolicy tier} will be cached while ensuring that at most\n   * <tt>33</tt> leaves can make it to the cache (very likely less than 10 in\n   * practice), which is useful for this implementation since some operations\n   * perform in linear time with the number of cached leaves.\n   */\n  public LRUQueryCache(int maxSize, long maxRamBytesUsed) {\n    this(maxSize, maxRamBytesUsed, new MinSegmentSizePredicate(10000, .03f));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#LRUQueryCache(int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#LRUQueryCache(int,long).mjava","sourceNew":"  /**\n   * Create a new instance that will cache at most <code>maxSize</code> queries\n   * with at most <code>maxRamBytesUsed</code> bytes of memory. Queries will\n   * only be cached on leaves that have more than 10k documents and have more\n   * than 3% of the total number of documents in the index.\n   * This should guarantee that all leaves from the upper\n   * {@link TieredMergePolicy tier} will be cached while ensuring that at most\n   * <tt>33</tt> leaves can make it to the cache (very likely less than 10 in\n   * practice), which is useful for this implementation since some operations\n   * perform in linear time with the number of cached leaves.\n   * Only clauses whose cost is at most 100x the cost of the top-level query will\n   * be cached in order to not hurt latency too much because of caching.\n   */\n  public LRUQueryCache(int maxSize, long maxRamBytesUsed) {\n    this(maxSize, maxRamBytesUsed, new MinSegmentSizePredicate(10000, .03f), 100);\n  }\n\n","sourceOld":"  /**\n   * Create a new instance that will cache at most <code>maxSize</code> queries\n   * with at most <code>maxRamBytesUsed</code> bytes of memory. Queries will\n   * only be cached on leaves that have more than 10k documents and have more\n   * than 3% of the total number of documents in the index.\n   * This should guarantee that all leaves from the upper\n   * {@link TieredMergePolicy tier} will be cached while ensuring that at most\n   * <tt>33</tt> leaves can make it to the cache (very likely less than 10 in\n   * practice), which is useful for this implementation since some operations\n   * perform in linear time with the number of cached leaves.\n   */\n  public LRUQueryCache(int maxSize, long maxRamBytesUsed) {\n    this(maxSize, maxRamBytesUsed, new MinSegmentSizePredicate(10000, .03f));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"789fb338d3c53b4478938723d60f6623e764ca38","date":1521535944,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#LRUQueryCache(int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#LRUQueryCache(int,long).mjava","sourceNew":"  /**\n   * Create a new instance that will cache at most <code>maxSize</code> queries\n   * with at most <code>maxRamBytesUsed</code> bytes of memory. Queries will\n   * only be cached on leaves that have more than 10k documents and have more\n   * than 3% of the total number of documents in the index.\n   * This should guarantee that all leaves from the upper\n   * {@link TieredMergePolicy tier} will be cached while ensuring that at most\n   * <tt>33</tt> leaves can make it to the cache (very likely less than 10 in\n   * practice), which is useful for this implementation since some operations\n   * perform in linear time with the number of cached leaves.\n   * Only clauses whose cost is at most 100x the cost of the top-level query will\n   * be cached in order to not hurt latency too much because of caching.\n   */\n  public LRUQueryCache(int maxSize, long maxRamBytesUsed) {\n    this(maxSize, maxRamBytesUsed, new MinSegmentSizePredicate(10000, .03f));\n  }\n\n","sourceOld":"  /**\n   * Create a new instance that will cache at most <code>maxSize</code> queries\n   * with at most <code>maxRamBytesUsed</code> bytes of memory. Queries will\n   * only be cached on leaves that have more than 10k documents and have more\n   * than 3% of the total number of documents in the index.\n   * This should guarantee that all leaves from the upper\n   * {@link TieredMergePolicy tier} will be cached while ensuring that at most\n   * <tt>33</tt> leaves can make it to the cache (very likely less than 10 in\n   * practice), which is useful for this implementation since some operations\n   * perform in linear time with the number of cached leaves.\n   * Only clauses whose cost is at most 100x the cost of the top-level query will\n   * be cached in order to not hurt latency too much because of caching.\n   */\n  public LRUQueryCache(int maxSize, long maxRamBytesUsed) {\n    this(maxSize, maxRamBytesUsed, new MinSegmentSizePredicate(10000, .03f), 100);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","date":1521731438,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#LRUQueryCache(int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#LRUQueryCache(int,long).mjava","sourceNew":"  /**\n   * Create a new instance that will cache at most <code>maxSize</code> queries\n   * with at most <code>maxRamBytesUsed</code> bytes of memory. Queries will\n   * only be cached on leaves that have more than 10k documents and have more\n   * than 3% of the total number of documents in the index.\n   * This should guarantee that all leaves from the upper\n   * {@link TieredMergePolicy tier} will be cached while ensuring that at most\n   * <tt>33</tt> leaves can make it to the cache (very likely less than 10 in\n   * practice), which is useful for this implementation since some operations\n   * perform in linear time with the number of cached leaves.\n   * Only clauses whose cost is at most 100x the cost of the top-level query will\n   * be cached in order to not hurt latency too much because of caching.\n   */\n  public LRUQueryCache(int maxSize, long maxRamBytesUsed) {\n    this(maxSize, maxRamBytesUsed, new MinSegmentSizePredicate(10000, .03f));\n  }\n\n","sourceOld":"  /**\n   * Create a new instance that will cache at most <code>maxSize</code> queries\n   * with at most <code>maxRamBytesUsed</code> bytes of memory. Queries will\n   * only be cached on leaves that have more than 10k documents and have more\n   * than 3% of the total number of documents in the index.\n   * This should guarantee that all leaves from the upper\n   * {@link TieredMergePolicy tier} will be cached while ensuring that at most\n   * <tt>33</tt> leaves can make it to the cache (very likely less than 10 in\n   * practice), which is useful for this implementation since some operations\n   * perform in linear time with the number of cached leaves.\n   * Only clauses whose cost is at most 100x the cost of the top-level query will\n   * be cached in order to not hurt latency too much because of caching.\n   */\n  public LRUQueryCache(int maxSize, long maxRamBytesUsed) {\n    this(maxSize, maxRamBytesUsed, new MinSegmentSizePredicate(10000, .03f), 100);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5754bd6f04f13b67e9575f8b226a0303c31c7d5","date":1573506453,"type":3,"author":"ginger","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#LRUQueryCache(int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#LRUQueryCache(int,long).mjava","sourceNew":"  /**\n   * Create a new instance that will cache at most <code>maxSize</code> queries\n   * with at most <code>maxRamBytesUsed</code> bytes of memory. Queries will\n   * only be cached on leaves that have more than 10k documents and have more\n   * than 3% of the total number of documents in the index.\n   * This should guarantee that all leaves from the upper\n   * {@link TieredMergePolicy tier} will be cached while ensuring that at most\n   * <tt>33</tt> leaves can make it to the cache (very likely less than 10 in\n   * practice), which is useful for this implementation since some operations\n   * perform in linear time with the number of cached leaves.\n   * Only clauses whose cost is at most 100x the cost of the top-level query will\n   * be cached in order to not hurt latency too much because of caching.\n   */\n  public LRUQueryCache(int maxSize, long maxRamBytesUsed) {\n    this(maxSize, maxRamBytesUsed, new MinSegmentSizePredicate(10000, .03f), 250);\n  }\n\n","sourceOld":"  /**\n   * Create a new instance that will cache at most <code>maxSize</code> queries\n   * with at most <code>maxRamBytesUsed</code> bytes of memory. Queries will\n   * only be cached on leaves that have more than 10k documents and have more\n   * than 3% of the total number of documents in the index.\n   * This should guarantee that all leaves from the upper\n   * {@link TieredMergePolicy tier} will be cached while ensuring that at most\n   * <tt>33</tt> leaves can make it to the cache (very likely less than 10 in\n   * practice), which is useful for this implementation since some operations\n   * perform in linear time with the number of cached leaves.\n   * Only clauses whose cost is at most 100x the cost of the top-level query will\n   * be cached in order to not hurt latency too much because of caching.\n   */\n  public LRUQueryCache(int maxSize, long maxRamBytesUsed) {\n    this(maxSize, maxRamBytesUsed, new MinSegmentSizePredicate(10000, .03f));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e3751ad4cc85eb979419cf5469dfba266eae56a","date":1581046252,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#LRUQueryCache(int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#LRUQueryCache(int,long).mjava","sourceNew":"  /**\n   * Create a new instance that will cache at most <code>maxSize</code> queries\n   * with at most <code>maxRamBytesUsed</code> bytes of memory. Queries will\n   * only be cached on leaves that have more than 10k documents and have more\n   * than 3% of the total number of documents in the index.\n   * This should guarantee that all leaves from the upper\n   * {@link TieredMergePolicy tier} will be cached while ensuring that at most\n   * <code>33</code> leaves can make it to the cache (very likely less than 10 in\n   * practice), which is useful for this implementation since some operations\n   * perform in linear time with the number of cached leaves.\n   * Only clauses whose cost is at most 100x the cost of the top-level query will\n   * be cached in order to not hurt latency too much because of caching.\n   */\n  public LRUQueryCache(int maxSize, long maxRamBytesUsed) {\n    this(maxSize, maxRamBytesUsed, new MinSegmentSizePredicate(10000, .03f), 250);\n  }\n\n","sourceOld":"  /**\n   * Create a new instance that will cache at most <code>maxSize</code> queries\n   * with at most <code>maxRamBytesUsed</code> bytes of memory. Queries will\n   * only be cached on leaves that have more than 10k documents and have more\n   * than 3% of the total number of documents in the index.\n   * This should guarantee that all leaves from the upper\n   * {@link TieredMergePolicy tier} will be cached while ensuring that at most\n   * <tt>33</tt> leaves can make it to the cache (very likely less than 10 in\n   * practice), which is useful for this implementation since some operations\n   * perform in linear time with the number of cached leaves.\n   * Only clauses whose cost is at most 100x the cost of the top-level query will\n   * be cached in order to not hurt latency too much because of caching.\n   */\n  public LRUQueryCache(int maxSize, long maxRamBytesUsed) {\n    this(maxSize, maxRamBytesUsed, new MinSegmentSizePredicate(10000, .03f), 250);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7732a106554be0db3e03ac5211e46f6e0c285b8":["aac61ee5b4492f174e60bd54939aba9539906edf"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["aac61ee5b4492f174e60bd54939aba9539906edf","c7732a106554be0db3e03ac5211e46f6e0c285b8"],"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["1aad05eeff7818b0833c02ac6b743aa72054963b","789fb338d3c53b4478938723d60f6623e764ca38"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"9e3751ad4cc85eb979419cf5469dfba266eae56a":["b5754bd6f04f13b67e9575f8b226a0303c31c7d5"],"aac61ee5b4492f174e60bd54939aba9539906edf":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"789fb338d3c53b4478938723d60f6623e764ca38":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"b5754bd6f04f13b67e9575f8b226a0303c31c7d5":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9e3751ad4cc85eb979419cf5469dfba266eae56a"]},"commit2Childs":{"c7732a106554be0db3e03ac5211e46f6e0c285b8":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","789fb338d3c53b4478938723d60f6623e764ca38"],"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["b5754bd6f04f13b67e9575f8b226a0303c31c7d5"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"9e3751ad4cc85eb979419cf5469dfba266eae56a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aac61ee5b4492f174e60bd54939aba9539906edf":["c7732a106554be0db3e03ac5211e46f6e0c285b8","1aad05eeff7818b0833c02ac6b743aa72054963b"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","aac61ee5b4492f174e60bd54939aba9539906edf"],"789fb338d3c53b4478938723d60f6623e764ca38":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"b5754bd6f04f13b67e9575f8b226a0303c31c7d5":["9e3751ad4cc85eb979419cf5469dfba266eae56a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}