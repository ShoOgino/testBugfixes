{"path":"lucene/facet/src/java/org/apache/lucene/facet/util/TaxonomyMergeUtils#merge(Directory,Directory,IndexWriter,DirectoryTaxonomyWriter,FacetIndexingParams).mjava","commits":[{"id":"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc","date":1359570667,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/TaxonomyMergeUtils#merge(Directory,Directory,IndexWriter,DirectoryTaxonomyWriter,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/examples/org/apache/lucene/facet/example/merge/TaxonomyMergeUtils#merge(Directory,Directory,IndexWriter,DirectoryTaxonomyWriter,FacetIndexingParams).mjava","sourceNew":"  /**\n   * Merges the given taxonomy and index directories and commits the changes to\n   * the given writers. This method uses {@link MemoryOrdinalMap} to store the\n   * mapped ordinals. If you cannot afford the memory, you can use\n   * {@link #merge(Directory, Directory, DirectoryTaxonomyWriter.OrdinalMap, IndexWriter, DirectoryTaxonomyWriter, FacetIndexingParams)}\n   * by passing {@link DiskOrdinalMap}.\n   * \n   * @see #merge(Directory, Directory, DirectoryTaxonomyWriter.OrdinalMap,\n   *      IndexWriter, DirectoryTaxonomyWriter, FacetIndexingParams)\n   */\n  public static void merge(Directory srcIndexDir, Directory srcTaxDir, IndexWriter destIndexWriter, \n      DirectoryTaxonomyWriter destTaxWriter, FacetIndexingParams params) throws IOException {\n    merge(srcIndexDir, srcTaxDir, new MemoryOrdinalMap(), destIndexWriter, destTaxWriter, params);\n  }\n\n","sourceOld":"  /**\n   * Merges the given taxonomy and index directories and commits the changes to\n   * the given writers. This method uses {@link MemoryOrdinalMap} to store the\n   * mapped ordinals. If you cannot afford the memory, you can use\n   * {@link #merge(Directory, Directory, DirectoryTaxonomyWriter.OrdinalMap, IndexWriter, DirectoryTaxonomyWriter, FacetIndexingParams)}\n   * by passing {@link DiskOrdinalMap}.\n   * \n   * @see #merge(Directory, Directory, DirectoryTaxonomyWriter.OrdinalMap,\n   *      IndexWriter, DirectoryTaxonomyWriter, FacetIndexingParams)\n   */\n  public static void merge(Directory srcIndexDir, Directory srcTaxDir, IndexWriter destIndexWriter, \n      DirectoryTaxonomyWriter destTaxWriter, FacetIndexingParams params) throws IOException {\n    merge(srcIndexDir, srcTaxDir, new MemoryOrdinalMap(), destIndexWriter, destTaxWriter, params);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d5f95d14e5b9b046998c51e16709a398c15226","date":1359603451,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/TaxonomyMergeUtils#merge(Directory,Directory,IndexWriter,DirectoryTaxonomyWriter,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/examples/org/apache/lucene/facet/example/merge/TaxonomyMergeUtils#merge(Directory,Directory,IndexWriter,DirectoryTaxonomyWriter,FacetIndexingParams).mjava","sourceNew":"  /**\n   * Merges the given taxonomy and index directories and commits the changes to\n   * the given writers. This method uses {@link MemoryOrdinalMap} to store the\n   * mapped ordinals. If you cannot afford the memory, you can use\n   * {@link #merge(Directory, Directory, DirectoryTaxonomyWriter.OrdinalMap, IndexWriter, DirectoryTaxonomyWriter, FacetIndexingParams)}\n   * by passing {@link DiskOrdinalMap}.\n   * \n   * @see #merge(Directory, Directory, DirectoryTaxonomyWriter.OrdinalMap,\n   *      IndexWriter, DirectoryTaxonomyWriter, FacetIndexingParams)\n   */\n  public static void merge(Directory srcIndexDir, Directory srcTaxDir, IndexWriter destIndexWriter, \n      DirectoryTaxonomyWriter destTaxWriter, FacetIndexingParams params) throws IOException {\n    merge(srcIndexDir, srcTaxDir, new MemoryOrdinalMap(), destIndexWriter, destTaxWriter, params);\n  }\n\n","sourceOld":"  /**\n   * Merges the given taxonomy and index directories and commits the changes to\n   * the given writers. This method uses {@link MemoryOrdinalMap} to store the\n   * mapped ordinals. If you cannot afford the memory, you can use\n   * {@link #merge(Directory, Directory, DirectoryTaxonomyWriter.OrdinalMap, IndexWriter, DirectoryTaxonomyWriter, FacetIndexingParams)}\n   * by passing {@link DiskOrdinalMap}.\n   * \n   * @see #merge(Directory, Directory, DirectoryTaxonomyWriter.OrdinalMap,\n   *      IndexWriter, DirectoryTaxonomyWriter, FacetIndexingParams)\n   */\n  public static void merge(Directory srcIndexDir, Directory srcTaxDir, IndexWriter destIndexWriter, \n      DirectoryTaxonomyWriter destTaxWriter, FacetIndexingParams params) throws IOException {\n    merge(srcIndexDir, srcTaxDir, new MemoryOrdinalMap(), destIndexWriter, destTaxWriter, params);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/TaxonomyMergeUtils#merge(Directory,Directory,IndexWriter,DirectoryTaxonomyWriter,FacetIndexingParams).mjava","sourceNew":null,"sourceOld":"  /**\n   * Merges the given taxonomy and index directories and commits the changes to\n   * the given writers. This method uses {@link MemoryOrdinalMap} to store the\n   * mapped ordinals. If you cannot afford the memory, you can use\n   * {@link #merge(Directory, Directory, DirectoryTaxonomyWriter.OrdinalMap, IndexWriter, DirectoryTaxonomyWriter, FacetIndexingParams)}\n   * by passing {@link DiskOrdinalMap}.\n   * \n   * @see #merge(Directory, Directory, DirectoryTaxonomyWriter.OrdinalMap,\n   *      IndexWriter, DirectoryTaxonomyWriter, FacetIndexingParams)\n   */\n  public static void merge(Directory srcIndexDir, Directory srcTaxDir, IndexWriter destIndexWriter, \n      DirectoryTaxonomyWriter destTaxWriter, FacetIndexingParams params) throws IOException {\n    merge(srcIndexDir, srcTaxDir, new MemoryOrdinalMap(), destIndexWriter, destTaxWriter, params);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"61d5f95d14e5b9b046998c51e16709a398c15226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["571abba77e55fea386a38c0024f72ffa5b37a9ad"]},"commit2Childs":{"61d5f95d14e5b9b046998c51e16709a398c15226":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["61d5f95d14e5b9b046998c51e16709a398c15226","1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"],"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc":["61d5f95d14e5b9b046998c51e16709a398c15226","571abba77e55fea386a38c0024f72ffa5b37a9ad"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["61d5f95d14e5b9b046998c51e16709a398c15226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}