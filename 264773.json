{"path":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","commits":[{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","sourceNew":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    this.delegate = delegate;\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    init();\n  }\n\n","sourceOld":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    this.delegate = delegate;\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    init();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","sourceNew":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    this.delegate = delegate;\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    init();\n  }\n\n","sourceOld":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    this.delegate = delegate;\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    init();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","sourceNew":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    this.delegate = delegate;\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    init();\n  }\n\n","sourceOld":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    this.delegate = delegate;\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    init();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf46d950a2020ee31dbae60879a0b0a519224524","date":1305045957,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","sourceNew":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    this.delegate = delegate;\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    init();\n  }\n\n","sourceOld":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    this.delegate = delegate;\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    init();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","sourceNew":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    this.delegate = delegate;\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    init();\n  }\n\n","sourceOld":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    this.delegate = delegate;\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    init();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","sourceNew":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    this.delegate = delegate;\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    init();\n  }\n\n","sourceOld":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    this.delegate = delegate;\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    init();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efb7a19703a037c29e30440260d393500febc1f4","date":1306648116,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","sourceNew":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    this.delegate = delegate;\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    // force wrapping of lockfactory\n    try {\n      setLockFactory(new MockLockFactoryWrapper(this, delegate.getLockFactory()));\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    init();\n  }\n\n","sourceOld":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    this.delegate = delegate;\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    init();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","sourceNew":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    this.delegate = delegate;\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    // force wrapping of lockfactory\n    try {\n      setLockFactory(new MockLockFactoryWrapper(this, delegate.getLockFactory()));\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    init();\n  }\n\n","sourceOld":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    this.delegate = delegate;\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    init();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","sourceNew":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    this.delegate = delegate;\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    // force wrapping of lockfactory\n    try {\n      setLockFactory(new MockLockFactoryWrapper(this, delegate.getLockFactory()));\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    init();\n  }\n\n","sourceOld":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    this.delegate = delegate;\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    init();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","sourceNew":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    this.delegate = delegate;\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    // force wrapping of lockfactory\n    try {\n      setLockFactory(new MockLockFactoryWrapper(this, delegate.getLockFactory()));\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    init();\n  }\n\n","sourceOld":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    this.delegate = delegate;\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    // force wrapping of lockfactory\n    try {\n      setLockFactory(new MockLockFactoryWrapper(this, delegate.getLockFactory()));\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    init();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["efb7a19703a037c29e30440260d393500febc1f4"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","efb7a19703a037c29e30440260d393500febc1f4"],"efb7a19703a037c29e30440260d393500febc1f4":["cf46d950a2020ee31dbae60879a0b0a519224524"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a3776dccca01c11e7046323cfad46a3b4a471233":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","cf46d950a2020ee31dbae60879a0b0a519224524"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["29ef99d61cda9641b6250bf9567329a6e65f901d","cf46d950a2020ee31dbae60879a0b0a519224524"],"cf46d950a2020ee31dbae60879a0b0a519224524":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","efb7a19703a037c29e30440260d393500febc1f4"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"efb7a19703a037c29e30440260d393500febc1f4":["7b91922b55d15444d554721b352861d028eb8278","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"cf46d950a2020ee31dbae60879a0b0a519224524":["efb7a19703a037c29e30440260d393500febc1f4","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","a3776dccca01c11e7046323cfad46a3b4a471233","cf46d950a2020ee31dbae60879a0b0a519224524","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}