{"path":"src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","commits":[{"id":"19ae41667dff0a323d8d33999f0ae6d4afc73ec1","date":1106950924,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"/dev/null","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname xxx lastname foo\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname xxx yyy lastname foo\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc3);\n    \n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(directory);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    Hits hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits.score(0), 0.01);\n    assertEquals(0, hits.id(0));\n    assertEquals(0.44, hits.score(1), 0.01);\n    assertEquals(1, hits.id(1));\n    assertEquals(0.31, hits.score(2), 0.01);\n    assertEquals(2, hits.id(2));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aabae793f43472efdf1dcdaae4e01e28cfc23ccd","date":1161750034,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname xxx lastname foo\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname xxx yyy lastname foo\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc3);\n    \n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(directory);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    Hits hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits.score(0), 0.01);\n    assertEquals(0, hits.id(0));\n    assertEquals(0.44, hits.score(1), 0.01);\n    assertEquals(1, hits.id(1));\n    assertEquals(0.31, hits.score(2), 0.01);\n    assertEquals(2, hits.id(2));\n    QueryUtils.check(query,searcher);        \n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname xxx lastname foo\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname xxx yyy lastname foo\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc3);\n    \n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(directory);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    Hits hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits.score(0), 0.01);\n    assertEquals(0, hits.id(0));\n    assertEquals(0.44, hits.score(1), 0.01);\n    assertEquals(1, hits.id(1));\n    assertEquals(0.31, hits.score(2), 0.01);\n    assertEquals(2, hits.id(2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"235efcba838a273934c5dd0ef66bb07c7fb0d718","date":1201256475,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname xxx lastname foo\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname xxx yyy lastname foo\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc3);\n    \n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(directory);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    Hits hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits.score(0), 0.01);\n    assertEquals(0, hits.id(0));\n    assertEquals(0.44, hits.score(1), 0.01);\n    assertEquals(1, hits.id(1));\n    assertEquals(0.31, hits.score(2), 0.01);\n    assertEquals(2, hits.id(2));\n    QueryUtils.check(query,searcher);        \n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname xxx lastname foo\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname xxx yyy lastname foo\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc3);\n    \n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(directory);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    Hits hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits.score(0), 0.01);\n    assertEquals(0, hits.id(0));\n    assertEquals(0.44, hits.score(1), 0.01);\n    assertEquals(1, hits.id(1));\n    assertEquals(0.31, hits.score(2), 0.01);\n    assertEquals(2, hits.id(2));\n    QueryUtils.check(query,searcher);        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname xxx lastname foo\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname xxx yyy lastname foo\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc3);\n    \n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(directory);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);        \n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname xxx lastname foo\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname xxx yyy lastname foo\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc3);\n    \n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(directory);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    Hits hits = searcher.search(query);\n    assertEquals(3, hits.length());\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits.score(0), 0.01);\n    assertEquals(0, hits.id(0));\n    assertEquals(0.44, hits.score(1), 0.01);\n    assertEquals(1, hits.id(1));\n    assertEquals(0.31, hits.score(2), 0.01);\n    assertEquals(2, hits.id(2));\n    QueryUtils.check(query,searcher);        \n  }\n\n","bugFix":null,"bugIntro":["6e75448368ba628d73e9967b45e29c40bbfe39fa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname xxx lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname xxx yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(directory);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);        \n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname xxx lastname foo\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname xxx yyy lastname foo\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc3);\n    \n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(directory);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname xxx lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname xxx yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(directory, true);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);        \n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname xxx lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname xxx yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(directory);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname xxx lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname xxx yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(directory, true);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);        \n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname xxx lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname xxx yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(directory);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname xxx lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname xxx yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(directory, true);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);        \n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname xxx lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname xxx yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(directory, true);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname xxx lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname xxx yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(directory, true);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);        \n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname xxx lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname xxx yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(directory, true);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT));\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname xxx lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname xxx yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(directory, true);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);        \n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname xxx lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname xxx yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(directory, true);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname xxx lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname xxx yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(directory, true);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);        \n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT));\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname xxx lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname xxx yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(directory, true);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname xxx lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname xxx yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(directory, true);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);        \n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname xxx lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname xxx yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(directory, true);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","pathOld":"src/test/org/apache/lucene/search/TestPhraseQuery#testSlopScoring().mjava","sourceNew":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname xxx lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname xxx yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(directory, true);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);        \n  }\n\n","sourceOld":"  public void testSlopScoring() throws IOException {\n    Directory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"foo firstname lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    \n    Document doc2 = new Document();\n    doc2.add(new Field(\"field\", \"foo firstname xxx lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc2);\n    \n    Document doc3 = new Document();\n    doc3.add(new Field(\"field\", \"foo firstname xxx yyy lastname foo\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc3);\n    \n    writer.optimize();\n    writer.close();\n\n    Searcher searcher = new IndexSearcher(directory, true);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"firstname\"));\n    query.add(new Term(\"field\", \"lastname\"));\n    query.setSlop(Integer.MAX_VALUE);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    // Make sure that those matches where the terms appear closer to\n    // each other get a higher score:\n    assertEquals(0.71, hits[0].score, 0.01);\n    assertEquals(0, hits[0].doc);\n    assertEquals(0.44, hits[1].score, 0.01);\n    assertEquals(1, hits[1].doc);\n    assertEquals(0.31, hits[2].score, 0.01);\n    assertEquals(2, hits[2].doc);\n    QueryUtils.check(query,searcher);        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"235efcba838a273934c5dd0ef66bb07c7fb0d718":["aabae793f43472efdf1dcdaae4e01e28cfc23ccd"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"aabae793f43472efdf1dcdaae4e01e28cfc23ccd":["19ae41667dff0a323d8d33999f0ae6d4afc73ec1"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"19ae41667dff0a323d8d33999f0ae6d4afc73ec1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"235efcba838a273934c5dd0ef66bb07c7fb0d718":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"aabae793f43472efdf1dcdaae4e01e28cfc23ccd":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["19ae41667dff0a323d8d33999f0ae6d4afc73ec1"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"19ae41667dff0a323d8d33999f0ae6d4afc73ec1":["aabae793f43472efdf1dcdaae4e01e28cfc23ccd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}