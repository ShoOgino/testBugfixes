{"path":"src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,TermPositions[],Similarity,byte[]).mjava","commits":[{"id":"27274410c91546fcfc28e692abd2dd77ca99be4b","date":1042501834,"type":1,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,TermPositions[],Similarity,byte[]).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(TermPositions[],Similarity,byte[],float).mjava","sourceNew":"  PhraseScorer(Weight weight, TermPositions[] tps, Similarity similarity,\n               byte[] norms) throws IOException {\n    super(similarity);\n    this.norms = norms;\n    this.weight = weight;\n    this.value = weight.getValue();\n\n    // use PQ to build a sorted list of PhrasePositions\n    pq = new PhraseQueue(tps.length);\n    for (int i = 0; i < tps.length; i++)\n      pq.put(new PhrasePositions(tps[i], i));\n    pqToList();\n  }\n\n","sourceOld":"  PhraseScorer(TermPositions[] tps, Similarity similarity,\n               byte[] norms, float weight) throws IOException {\n    super(similarity);\n    this.norms = norms;\n    this.weight = weight;\n\n    // use PQ to build a sorted list of PhrasePositions\n    pq = new PhraseQueue(tps.length);\n    for (int i = 0; i < tps.length; i++)\n      pq.put(new PhrasePositions(tps[i], i));\n    pqToList();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9d9dc36efcf84dcc613e66f8eeef578481dfc8d","date":1063243547,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,TermPositions[],Similarity,byte[]).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,TermPositions[],Similarity,byte[]).mjava","sourceNew":"    PhraseScorer(Weight weight, TermPositions[] tps, Similarity similarity,\n                 byte[] norms) throws IOException {\n        super(similarity);\n        this.norms = norms;\n        this.weight = weight;\n        this.value = weight.getValue();\n\n        // use PQ to build a sorted list of PhrasePositions\n        pq = new PhraseQueue(tps.length);\n        for (int i = 0; i < tps.length; i++) {\n            pq.put(new PhrasePositions(tps[i], i));\n        }\n        pqToList();\n    }\n\n","sourceOld":"  PhraseScorer(Weight weight, TermPositions[] tps, Similarity similarity,\n               byte[] norms) throws IOException {\n    super(similarity);\n    this.norms = norms;\n    this.weight = weight;\n    this.value = weight.getValue();\n\n    // use PQ to build a sorted list of PhrasePositions\n    pq = new PhraseQueue(tps.length);\n    for (int i = 0; i < tps.length; i++)\n      pq.put(new PhrasePositions(tps[i], i));\n    pqToList();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15c469602973ef1a33c9a07367a380d278ffab20","date":1074206555,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,TermPositions[],Similarity,byte[]).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,TermPositions[],Similarity,byte[]).mjava","sourceNew":"  PhraseScorer(Weight weight, TermPositions[] tps, Similarity similarity,\n               byte[] norms) throws IOException {\n    super(similarity);\n    this.norms = norms;\n    this.weight = weight;\n    this.value = weight.getValue();\n\n    // convert tps to a list\n    for (int i = 0; i < tps.length; i++) {\n      PhrasePositions pp = new PhrasePositions(tps[i], i);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else\n        first = pp;\n      last = pp;\n    }\n\n    pq = new PhraseQueue(tps.length);             // construct empty pq\n\n  }\n\n","sourceOld":"    PhraseScorer(Weight weight, TermPositions[] tps, Similarity similarity,\n                 byte[] norms) throws IOException {\n        super(similarity);\n        this.norms = norms;\n        this.weight = weight;\n        this.value = weight.getValue();\n\n        // use PQ to build a sorted list of PhrasePositions\n        pq = new PhraseQueue(tps.length);\n        for (int i = 0; i < tps.length; i++) {\n            pq.put(new PhrasePositions(tps[i], i));\n        }\n        pqToList();\n    }\n\n","bugFix":null,"bugIntro":["b3e493496c35fb4f17315b8827d1ba1ae1585554","b3e493496c35fb4f17315b8827d1ba1ae1585554"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3f314029fc991d70f9c6a7fd0b01f36da98c1c32","date":1091823553,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,TermPositions[],Similarity,byte[]).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,TermPositions[],Similarity,byte[]).mjava","sourceNew":"  PhraseScorer(Weight weight, TermPositions[] tps, Similarity similarity,\n               byte[] norms) {\n    super(similarity);\n    this.norms = norms;\n    this.weight = weight;\n    this.value = weight.getValue();\n\n    // convert tps to a list\n    for (int i = 0; i < tps.length; i++) {\n      PhrasePositions pp = new PhrasePositions(tps[i], i);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else\n        first = pp;\n      last = pp;\n    }\n\n    pq = new PhraseQueue(tps.length);             // construct empty pq\n\n  }\n\n","sourceOld":"  PhraseScorer(Weight weight, TermPositions[] tps, Similarity similarity,\n               byte[] norms) throws IOException {\n    super(similarity);\n    this.norms = norms;\n    this.weight = weight;\n    this.value = weight.getValue();\n\n    // convert tps to a list\n    for (int i = 0; i < tps.length; i++) {\n      PhrasePositions pp = new PhrasePositions(tps[i], i);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else\n        first = pp;\n      last = pp;\n    }\n\n    pq = new PhraseQueue(tps.length);             // construct empty pq\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4988178cfbf5117763a956901f39d3efa3282e72","date":1095241130,"type":5,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,TermPositions[],int[],Similarity,byte[]).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,TermPositions[],Similarity,byte[]).mjava","sourceNew":"  PhraseScorer(Weight weight, TermPositions[] tps, int[] positions, Similarity similarity,\n               byte[] norms) {\n    super(similarity);\n    this.norms = norms;\n    this.weight = weight;\n    this.value = weight.getValue();\n\n    // convert tps to a list\n    for (int i = 0; i < tps.length; i++) {\n      PhrasePositions pp = new PhrasePositions(tps[i], positions[i]);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else\n        first = pp;\n      last = pp;\n    }\n\n    pq = new PhraseQueue(tps.length);             // construct empty pq\n\n  }\n\n","sourceOld":"  PhraseScorer(Weight weight, TermPositions[] tps, Similarity similarity,\n               byte[] norms) {\n    super(similarity);\n    this.norms = norms;\n    this.weight = weight;\n    this.value = weight.getValue();\n\n    // convert tps to a list\n    for (int i = 0; i < tps.length; i++) {\n      PhrasePositions pp = new PhrasePositions(tps[i], i);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else\n        first = pp;\n      last = pp;\n    }\n\n    pq = new PhraseQueue(tps.length);             // construct empty pq\n\n  }\n\n","bugFix":null,"bugIntro":["b3e493496c35fb4f17315b8827d1ba1ae1585554","b3e493496c35fb4f17315b8827d1ba1ae1585554"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3f314029fc991d70f9c6a7fd0b01f36da98c1c32":["15c469602973ef1a33c9a07367a380d278ffab20"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e9d9dc36efcf84dcc613e66f8eeef578481dfc8d":["27274410c91546fcfc28e692abd2dd77ca99be4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4988178cfbf5117763a956901f39d3efa3282e72"],"4988178cfbf5117763a956901f39d3efa3282e72":["3f314029fc991d70f9c6a7fd0b01f36da98c1c32"],"15c469602973ef1a33c9a07367a380d278ffab20":["e9d9dc36efcf84dcc613e66f8eeef578481dfc8d"]},"commit2Childs":{"3f314029fc991d70f9c6a7fd0b01f36da98c1c32":["4988178cfbf5117763a956901f39d3efa3282e72"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["e9d9dc36efcf84dcc613e66f8eeef578481dfc8d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["27274410c91546fcfc28e692abd2dd77ca99be4b"],"e9d9dc36efcf84dcc613e66f8eeef578481dfc8d":["15c469602973ef1a33c9a07367a380d278ffab20"],"15c469602973ef1a33c9a07367a380d278ffab20":["3f314029fc991d70f9c6a7fd0b01f36da98c1c32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"4988178cfbf5117763a956901f39d3efa3282e72":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}