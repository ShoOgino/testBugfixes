{"path":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/dict/UserDictionary#lookup(char[],int,int).mjava","commits":[{"id":"6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2","date":1326399048,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/dict/UserDictionary#lookup(char[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Lookup words in text\n   * @param chars text\n   * @param off offset into text\n   * @param len length of text\n   * @return array of {wordId, position, length}\n   */\n  public int[][] lookup(char[] chars, int off, int len) throws IOException {\n    // TODO: can we avoid this treemap/toIndexArray?\n    TreeMap<Integer, int[]> result = new TreeMap<Integer, int[]>(); // index, [length, length...]\n    boolean found = false; // true if we found any results\n\n    FST.Arc<Long> arc = new FST.Arc<Long>();\n    int end = off + len;\n    for (int startOffset = off; startOffset < end; startOffset++) {\n      arc = fst.getFirstArc(arc);\n      int output = 0;\n      int remaining = end - startOffset;\n      for (int i = 0; i < remaining; i++) {\n        int ch = chars[startOffset+i];\n        if (fst.findTargetArc(ch, arc, arc, i == 0) == null) {\n          break; // continue to next position\n        }\n        output += arc.output.intValue();\n        if (arc.isFinal()) {\n          output += arc.nextFinalOutput.intValue();\n          result.put(startOffset-off, segmentations[output]);\n          found = true;\n        }\n      }\n    }\n    \n    return found ? toIndexArray(result) : EMPTY_RESULT;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3be20ca1091c0b7cdb2308b9023606a5e451cec","date":1327877325,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/dict/UserDictionary#lookup(char[],int,int).mjava","pathOld":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/dict/UserDictionary#lookup(char[],int,int).mjava","sourceNew":"  /**\n   * Lookup words in text\n   * @param chars text\n   * @param off offset into text\n   * @param len length of text\n   * @return array of {wordId, position, length}\n   */\n  public int[][] lookup(char[] chars, int off, int len) throws IOException {\n    // TODO: can we avoid this treemap/toIndexArray?\n    TreeMap<Integer, int[]> result = new TreeMap<Integer, int[]>(); // index, [length, length...]\n    boolean found = false; // true if we found any results\n\n    final FST.BytesReader fstReader = fst.getBytesReader(0);\n\n    FST.Arc<Long> arc = new FST.Arc<Long>();\n    int end = off + len;\n    for (int startOffset = off; startOffset < end; startOffset++) {\n      arc = fst.getFirstArc(arc);\n      int output = 0;\n      int remaining = end - startOffset;\n      for (int i = 0; i < remaining; i++) {\n        int ch = chars[startOffset+i];\n        if (fst.findTargetArc(ch, arc, arc, i == 0, fstReader) == null) {\n          break; // continue to next position\n        }\n        output += arc.output.intValue();\n        if (arc.isFinal()) {\n          output += arc.nextFinalOutput.intValue();\n          result.put(startOffset-off, segmentations[output]);\n          found = true;\n        }\n      }\n    }\n    \n    return found ? toIndexArray(result) : EMPTY_RESULT;\n  }\n\n","sourceOld":"  /**\n   * Lookup words in text\n   * @param chars text\n   * @param off offset into text\n   * @param len length of text\n   * @return array of {wordId, position, length}\n   */\n  public int[][] lookup(char[] chars, int off, int len) throws IOException {\n    // TODO: can we avoid this treemap/toIndexArray?\n    TreeMap<Integer, int[]> result = new TreeMap<Integer, int[]>(); // index, [length, length...]\n    boolean found = false; // true if we found any results\n\n    FST.Arc<Long> arc = new FST.Arc<Long>();\n    int end = off + len;\n    for (int startOffset = off; startOffset < end; startOffset++) {\n      arc = fst.getFirstArc(arc);\n      int output = 0;\n      int remaining = end - startOffset;\n      for (int i = 0; i < remaining; i++) {\n        int ch = chars[startOffset+i];\n        if (fst.findTargetArc(ch, arc, arc, i == 0) == null) {\n          break; // continue to next position\n        }\n        output += arc.output.intValue();\n        if (arc.isFinal()) {\n          output += arc.nextFinalOutput.intValue();\n          result.put(startOffset-off, segmentations[output]);\n          found = true;\n        }\n      }\n    }\n    \n    return found ? toIndexArray(result) : EMPTY_RESULT;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/dict/UserDictionary#lookup(char[],int,int).mjava","pathOld":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/dict/UserDictionary#lookup(char[],int,int).mjava","sourceNew":"  /**\n   * Lookup words in text\n   * @param chars text\n   * @param off offset into text\n   * @param len length of text\n   * @return array of {wordId, position, length}\n   */\n  public int[][] lookup(char[] chars, int off, int len) throws IOException {\n    // TODO: can we avoid this treemap/toIndexArray?\n    TreeMap<Integer, int[]> result = new TreeMap<Integer, int[]>(); // index, [length, length...]\n    boolean found = false; // true if we found any results\n\n    final FST.BytesReader fstReader = fst.getBytesReader(0);\n\n    FST.Arc<Long> arc = new FST.Arc<Long>();\n    int end = off + len;\n    for (int startOffset = off; startOffset < end; startOffset++) {\n      arc = fst.getFirstArc(arc);\n      int output = 0;\n      int remaining = end - startOffset;\n      for (int i = 0; i < remaining; i++) {\n        int ch = chars[startOffset+i];\n        if (fst.findTargetArc(ch, arc, arc, i == 0, fstReader) == null) {\n          break; // continue to next position\n        }\n        output += arc.output.intValue();\n        if (arc.isFinal()) {\n          output += arc.nextFinalOutput.intValue();\n          result.put(startOffset-off, segmentations[output]);\n          found = true;\n        }\n      }\n    }\n    \n    return found ? toIndexArray(result) : EMPTY_RESULT;\n  }\n\n","sourceOld":"  /**\n   * Lookup words in text\n   * @param chars text\n   * @param off offset into text\n   * @param len length of text\n   * @return array of {wordId, position, length}\n   */\n  public int[][] lookup(char[] chars, int off, int len) throws IOException {\n    // TODO: can we avoid this treemap/toIndexArray?\n    TreeMap<Integer, int[]> result = new TreeMap<Integer, int[]>(); // index, [length, length...]\n    boolean found = false; // true if we found any results\n\n    FST.Arc<Long> arc = new FST.Arc<Long>();\n    int end = off + len;\n    for (int startOffset = off; startOffset < end; startOffset++) {\n      arc = fst.getFirstArc(arc);\n      int output = 0;\n      int remaining = end - startOffset;\n      for (int i = 0; i < remaining; i++) {\n        int ch = chars[startOffset+i];\n        if (fst.findTargetArc(ch, arc, arc, i == 0) == null) {\n          break; // continue to next position\n        }\n        output += arc.output.intValue();\n        if (arc.isFinal()) {\n          output += arc.nextFinalOutput.intValue();\n          result.put(startOffset-off, segmentations[output]);\n          found = true;\n        }\n      }\n    }\n    \n    return found ? toIndexArray(result) : EMPTY_RESULT;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/dict/UserDictionary#lookup(char[],int,int).mjava","pathOld":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/dict/UserDictionary#lookup(char[],int,int).mjava","sourceNew":"  /**\n   * Lookup words in text\n   * @param chars text\n   * @param off offset into text\n   * @param len length of text\n   * @return array of {wordId, position, length}\n   */\n  public int[][] lookup(char[] chars, int off, int len) throws IOException {\n    // TODO: can we avoid this treemap/toIndexArray?\n    TreeMap<Integer, int[]> result = new TreeMap<Integer, int[]>(); // index, [length, length...]\n    boolean found = false; // true if we found any results\n\n    final FST.BytesReader fstReader = fst.getBytesReader(0);\n\n    FST.Arc<Long> arc = new FST.Arc<Long>();\n    int end = off + len;\n    for (int startOffset = off; startOffset < end; startOffset++) {\n      arc = fst.getFirstArc(arc);\n      int output = 0;\n      int remaining = end - startOffset;\n      for (int i = 0; i < remaining; i++) {\n        int ch = chars[startOffset+i];\n        if (fst.findTargetArc(ch, arc, arc, i == 0, fstReader) == null) {\n          break; // continue to next position\n        }\n        output += arc.output.intValue();\n        if (arc.isFinal()) {\n          output += arc.nextFinalOutput.intValue();\n          result.put(startOffset-off, segmentations[output]);\n          found = true;\n        }\n      }\n    }\n    \n    return found ? toIndexArray(result) : EMPTY_RESULT;\n  }\n\n","sourceOld":"  /**\n   * Lookup words in text\n   * @param chars text\n   * @param off offset into text\n   * @param len length of text\n   * @return array of {wordId, position, length}\n   */\n  public int[][] lookup(char[] chars, int off, int len) throws IOException {\n    // TODO: can we avoid this treemap/toIndexArray?\n    TreeMap<Integer, int[]> result = new TreeMap<Integer, int[]>(); // index, [length, length...]\n    boolean found = false; // true if we found any results\n\n    FST.Arc<Long> arc = new FST.Arc<Long>();\n    int end = off + len;\n    for (int startOffset = off; startOffset < end; startOffset++) {\n      arc = fst.getFirstArc(arc);\n      int output = 0;\n      int remaining = end - startOffset;\n      for (int i = 0; i < remaining; i++) {\n        int ch = chars[startOffset+i];\n        if (fst.findTargetArc(ch, arc, arc, i == 0) == null) {\n          break; // continue to next position\n        }\n        output += arc.output.intValue();\n        if (arc.isFinal()) {\n          output += arc.nextFinalOutput.intValue();\n          result.put(startOffset-off, segmentations[output]);\n          found = true;\n        }\n      }\n    }\n    \n    return found ? toIndexArray(result) : EMPTY_RESULT;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13bedc217a57b03b17f22e563b0c4892fefe8ff2","date":1328194873,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/dict/UserDictionary#lookup(char[],int,int).mjava","pathOld":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/dict/UserDictionary#lookup(char[],int,int).mjava","sourceNew":"  /**\n   * Lookup words in text\n   * @param chars text\n   * @param off offset into text\n   * @param len length of text\n   * @return array of {wordId, position, length}\n   */\n  public int[][] lookup(char[] chars, int off, int len) throws IOException {\n    // TODO: can we avoid this treemap/toIndexArray?\n    TreeMap<Integer, int[]> result = new TreeMap<Integer, int[]>(); // index, [length, length...]\n    boolean found = false; // true if we found any results\n\n    final FST.BytesReader fstReader = fst.getBytesReader(0);\n\n    FST.Arc<Long> arc = new FST.Arc<Long>();\n    int end = off + len;\n    for (int startOffset = off; startOffset < end; startOffset++) {\n      arc = fst.getFirstArc(arc);\n      int output = 0;\n      int remaining = end - startOffset;\n      for (int i = 0; i < remaining; i++) {\n        int ch = chars[startOffset+i];\n        if (fst.findTargetArc(ch, arc, arc, i == 0, fstReader) == null) {\n          break; // continue to next position\n        }\n        output += arc.output.intValue();\n        if (arc.isFinal()) {\n          final int finalOutput = output + arc.nextFinalOutput.intValue();\n          result.put(startOffset-off, segmentations[finalOutput]);\n          found = true;\n        }\n      }\n    }\n    \n    return found ? toIndexArray(result) : EMPTY_RESULT;\n  }\n\n","sourceOld":"  /**\n   * Lookup words in text\n   * @param chars text\n   * @param off offset into text\n   * @param len length of text\n   * @return array of {wordId, position, length}\n   */\n  public int[][] lookup(char[] chars, int off, int len) throws IOException {\n    // TODO: can we avoid this treemap/toIndexArray?\n    TreeMap<Integer, int[]> result = new TreeMap<Integer, int[]>(); // index, [length, length...]\n    boolean found = false; // true if we found any results\n\n    final FST.BytesReader fstReader = fst.getBytesReader(0);\n\n    FST.Arc<Long> arc = new FST.Arc<Long>();\n    int end = off + len;\n    for (int startOffset = off; startOffset < end; startOffset++) {\n      arc = fst.getFirstArc(arc);\n      int output = 0;\n      int remaining = end - startOffset;\n      for (int i = 0; i < remaining; i++) {\n        int ch = chars[startOffset+i];\n        if (fst.findTargetArc(ch, arc, arc, i == 0, fstReader) == null) {\n          break; // continue to next position\n        }\n        output += arc.output.intValue();\n        if (arc.isFinal()) {\n          output += arc.nextFinalOutput.intValue();\n          result.put(startOffset-off, segmentations[output]);\n          found = true;\n        }\n      }\n    }\n    \n    return found ? toIndexArray(result) : EMPTY_RESULT;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98d45c1ff2c99694b6de2201175f9b8b8b27b597","date":1332757908,"type":5,"author":"Christian Moen","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UserDictionary#lookup(char[],int,int).mjava","pathOld":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/dict/UserDictionary#lookup(char[],int,int).mjava","sourceNew":"  /**\n   * Lookup words in text\n   * @param chars text\n   * @param off offset into text\n   * @param len length of text\n   * @return array of {wordId, position, length}\n   */\n  public int[][] lookup(char[] chars, int off, int len) throws IOException {\n    // TODO: can we avoid this treemap/toIndexArray?\n    TreeMap<Integer, int[]> result = new TreeMap<Integer, int[]>(); // index, [length, length...]\n    boolean found = false; // true if we found any results\n\n    final FST.BytesReader fstReader = fst.getBytesReader(0);\n\n    FST.Arc<Long> arc = new FST.Arc<Long>();\n    int end = off + len;\n    for (int startOffset = off; startOffset < end; startOffset++) {\n      arc = fst.getFirstArc(arc);\n      int output = 0;\n      int remaining = end - startOffset;\n      for (int i = 0; i < remaining; i++) {\n        int ch = chars[startOffset+i];\n        if (fst.findTargetArc(ch, arc, arc, i == 0, fstReader) == null) {\n          break; // continue to next position\n        }\n        output += arc.output.intValue();\n        if (arc.isFinal()) {\n          final int finalOutput = output + arc.nextFinalOutput.intValue();\n          result.put(startOffset-off, segmentations[finalOutput]);\n          found = true;\n        }\n      }\n    }\n    \n    return found ? toIndexArray(result) : EMPTY_RESULT;\n  }\n\n","sourceOld":"  /**\n   * Lookup words in text\n   * @param chars text\n   * @param off offset into text\n   * @param len length of text\n   * @return array of {wordId, position, length}\n   */\n  public int[][] lookup(char[] chars, int off, int len) throws IOException {\n    // TODO: can we avoid this treemap/toIndexArray?\n    TreeMap<Integer, int[]> result = new TreeMap<Integer, int[]>(); // index, [length, length...]\n    boolean found = false; // true if we found any results\n\n    final FST.BytesReader fstReader = fst.getBytesReader(0);\n\n    FST.Arc<Long> arc = new FST.Arc<Long>();\n    int end = off + len;\n    for (int startOffset = off; startOffset < end; startOffset++) {\n      arc = fst.getFirstArc(arc);\n      int output = 0;\n      int remaining = end - startOffset;\n      for (int i = 0; i < remaining; i++) {\n        int ch = chars[startOffset+i];\n        if (fst.findTargetArc(ch, arc, arc, i == 0, fstReader) == null) {\n          break; // continue to next position\n        }\n        output += arc.output.intValue();\n        if (arc.isFinal()) {\n          final int finalOutput = output + arc.nextFinalOutput.intValue();\n          result.put(startOffset-off, segmentations[finalOutput]);\n          found = true;\n        }\n      }\n    }\n    \n    return found ? toIndexArray(result) : EMPTY_RESULT;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["13bedc217a57b03b17f22e563b0c4892fefe8ff2"],"5b6fdfce35d0adb18836cf8711abe487a934df33":["6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"13bedc217a57b03b17f22e563b0c4892fefe8ff2":["b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"]},"commit2Childs":{"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","13bedc217a57b03b17f22e563b0c4892fefe8ff2"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2"],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2":["b3be20ca1091c0b7cdb2308b9023606a5e451cec","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"13bedc217a57b03b17f22e563b0c4892fefe8ff2":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}