{"path":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrJmxReporter#doInit().mjava","commits":[{"id":"e3ee7308fb49e4d4f77d7a23584a2128a0d6921e","date":1496661458,"type":1,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrJmxReporter#doInit().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrJmxReporter#init(PluginInfo).mjava","sourceNew":"  protected synchronized void doInit() {\n    if (serviceUrl != null && agentId != null) {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.warn(\"No more than one of serviceUrl({}) and agentId({}) should be configured, using first MBeanServer instead of configuration.\",\n          serviceUrl, agentId, mBeanServer);\n    } else if (serviceUrl != null) {\n      // reuse existing services\n      mBeanServer = serviceRegistry.getOrCreate(serviceUrl, () -> JmxUtil.findMBeanServerForServiceUrl(serviceUrl));\n    } else if (agentId != null) {\n      mBeanServer = JmxUtil.findMBeanServerForAgentId(agentId);\n    } else {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.debug(\"No serviceUrl or agentId was configured, using first MBeanServer: \" + mBeanServer);\n    }\n\n    if (mBeanServer == null) {\n      log.warn(\"No JMX server found. Not exposing Solr metrics via JMX.\");\n      return;\n    }\n\n    if (domain == null || domain.isEmpty()) {\n      domain = registryName;\n    }\n    String fullDomain = domain;\n    if (rootName != null && !rootName.isEmpty()) {\n      fullDomain = rootName + \".\" + domain;\n    }\n    JmxObjectNameFactory jmxObjectNameFactory = new JmxObjectNameFactory(pluginInfo.name, fullDomain);\n    registry = metricManager.registry(registryName);\n    // filter out MetricsMap gauges - we have a better way of handling them\n    MetricFilter mmFilter = (name, metric) -> !(metric instanceof MetricsMap);\n    MetricFilter filter;\n    if (filters.isEmpty()) {\n      filter = mmFilter;\n    } else {\n      // apply also prefix filters\n      SolrMetricManager.PrefixFilter prefixFilter = new SolrMetricManager.PrefixFilter(filters);\n      filter = new SolrMetricManager.AndFilter(prefixFilter, mmFilter);\n    }\n\n    reporter = JmxReporter.forRegistry(registry)\n                          .registerWith(mBeanServer)\n                          .inDomain(fullDomain)\n                          .filter(filter)\n                          .createsObjectNamesWith(jmxObjectNameFactory)\n                          .build();\n    reporter.start();\n    // workaround for inability to register custom MBeans (to be available in metrics 4.0?)\n    listener = new MetricsMapListener(mBeanServer, jmxObjectNameFactory);\n    registry.addListener(listener);\n\n    log.info(\"JMX monitoring for '\" + fullDomain + \"' (registry '\" + registryName + \"') enabled at server: \" + mBeanServer);\n  }\n\n","sourceOld":"  /**\n   * Initializes the reporter by finding an MBeanServer\n   * and registering the metricManager's metric registry.\n   *\n   * @param pluginInfo the configuration for the reporter\n   */\n  @Override\n  public synchronized void init(PluginInfo pluginInfo) {\n    super.init(pluginInfo);\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    log.debug(\"Initializing for registry \" + registryName);\n    if (serviceUrl != null && agentId != null) {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.warn(\"No more than one of serviceUrl({}) and agentId({}) should be configured, using first MBeanServer instead of configuration.\",\n          serviceUrl, agentId, mBeanServer);\n    } else if (serviceUrl != null) {\n      // reuse existing services\n      mBeanServer = serviceRegistry.getOrCreate(serviceUrl, () -> JmxUtil.findMBeanServerForServiceUrl(serviceUrl));\n    } else if (agentId != null) {\n      mBeanServer = JmxUtil.findMBeanServerForAgentId(agentId);\n    } else {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.debug(\"No serviceUrl or agentId was configured, using first MBeanServer: \" + mBeanServer);\n    }\n\n    if (mBeanServer == null) {\n      log.warn(\"No JMX server found. Not exposing Solr metrics via JMX.\");\n      return;\n    }\n\n    if (domain == null || domain.isEmpty()) {\n      domain = registryName;\n    }\n    String fullDomain = domain;\n    if (rootName != null && !rootName.isEmpty()) {\n      fullDomain = rootName + \".\" + domain;\n    }\n    JmxObjectNameFactory jmxObjectNameFactory = new JmxObjectNameFactory(pluginInfo.name, fullDomain);\n    registry = metricManager.registry(registryName);\n    // filter out MetricsMap gauges - we have a better way of handling them\n    MetricFilter mmFilter = (name, metric) -> !(metric instanceof MetricsMap);\n    MetricFilter filter;\n    if (filters.isEmpty()) {\n      filter = mmFilter;\n    } else {\n      // apply also prefix filters\n      SolrMetricManager.PrefixFilter prefixFilter = new SolrMetricManager.PrefixFilter(filters);\n      filter = new SolrMetricManager.AndFilter(prefixFilter, mmFilter);\n    }\n\n    reporter = JmxReporter.forRegistry(registry)\n                          .registerWith(mBeanServer)\n                          .inDomain(fullDomain)\n                          .filter(filter)\n                          .createsObjectNamesWith(jmxObjectNameFactory)\n                          .build();\n    reporter.start();\n    // workaround for inability to register custom MBeans (to be available in metrics 4.0?)\n    listener = new MetricsMapListener(mBeanServer, jmxObjectNameFactory);\n    registry.addListener(listener);\n\n    log.info(\"JMX monitoring for '\" + fullDomain + \"' (registry '\" + registryName + \"') enabled at server: \" + mBeanServer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrJmxReporter#doInit().mjava","pathOld":"/dev/null","sourceNew":"  protected synchronized void doInit() {\n    if (serviceUrl != null && agentId != null) {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.warn(\"No more than one of serviceUrl({}) and agentId({}) should be configured, using first MBeanServer instead of configuration.\",\n          serviceUrl, agentId, mBeanServer);\n    } else if (serviceUrl != null) {\n      // reuse existing services\n      mBeanServer = serviceRegistry.getOrCreate(serviceUrl, () -> JmxUtil.findMBeanServerForServiceUrl(serviceUrl));\n    } else if (agentId != null) {\n      mBeanServer = JmxUtil.findMBeanServerForAgentId(agentId);\n    } else {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.debug(\"No serviceUrl or agentId was configured, using first MBeanServer: \" + mBeanServer);\n    }\n\n    if (mBeanServer == null) {\n      log.warn(\"No JMX server found. Not exposing Solr metrics via JMX.\");\n      return;\n    }\n\n    if (domain == null || domain.isEmpty()) {\n      domain = registryName;\n    }\n    String fullDomain = domain;\n    if (rootName != null && !rootName.isEmpty()) {\n      fullDomain = rootName + \".\" + domain;\n    }\n    JmxObjectNameFactory jmxObjectNameFactory = new JmxObjectNameFactory(pluginInfo.name, fullDomain);\n    registry = metricManager.registry(registryName);\n    // filter out MetricsMap gauges - we have a better way of handling them\n    MetricFilter mmFilter = (name, metric) -> !(metric instanceof MetricsMap);\n    MetricFilter filter;\n    if (filters.isEmpty()) {\n      filter = mmFilter;\n    } else {\n      // apply also prefix filters\n      SolrMetricManager.PrefixFilter prefixFilter = new SolrMetricManager.PrefixFilter(filters);\n      filter = new SolrMetricManager.AndFilter(prefixFilter, mmFilter);\n    }\n\n    reporter = JmxReporter.forRegistry(registry)\n                          .registerWith(mBeanServer)\n                          .inDomain(fullDomain)\n                          .filter(filter)\n                          .createsObjectNamesWith(jmxObjectNameFactory)\n                          .build();\n    reporter.start();\n    // workaround for inability to register custom MBeans (to be available in metrics 4.0?)\n    listener = new MetricsMapListener(mBeanServer, jmxObjectNameFactory);\n    registry.addListener(listener);\n\n    log.info(\"JMX monitoring for '\" + fullDomain + \"' (registry '\" + registryName + \"') enabled at server: \" + mBeanServer);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrJmxReporter#doInit().mjava","pathOld":"/dev/null","sourceNew":"  protected synchronized void doInit() {\n    if (serviceUrl != null && agentId != null) {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.warn(\"No more than one of serviceUrl({}) and agentId({}) should be configured, using first MBeanServer instead of configuration.\",\n          serviceUrl, agentId, mBeanServer);\n    } else if (serviceUrl != null) {\n      // reuse existing services\n      mBeanServer = serviceRegistry.getOrCreate(serviceUrl, () -> JmxUtil.findMBeanServerForServiceUrl(serviceUrl));\n    } else if (agentId != null) {\n      mBeanServer = JmxUtil.findMBeanServerForAgentId(agentId);\n    } else {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.debug(\"No serviceUrl or agentId was configured, using first MBeanServer: \" + mBeanServer);\n    }\n\n    if (mBeanServer == null) {\n      log.warn(\"No JMX server found. Not exposing Solr metrics via JMX.\");\n      return;\n    }\n\n    if (domain == null || domain.isEmpty()) {\n      domain = registryName;\n    }\n    String fullDomain = domain;\n    if (rootName != null && !rootName.isEmpty()) {\n      fullDomain = rootName + \".\" + domain;\n    }\n    JmxObjectNameFactory jmxObjectNameFactory = new JmxObjectNameFactory(pluginInfo.name, fullDomain);\n    registry = metricManager.registry(registryName);\n    // filter out MetricsMap gauges - we have a better way of handling them\n    MetricFilter mmFilter = (name, metric) -> !(metric instanceof MetricsMap);\n    MetricFilter filter;\n    if (filters.isEmpty()) {\n      filter = mmFilter;\n    } else {\n      // apply also prefix filters\n      SolrMetricManager.PrefixFilter prefixFilter = new SolrMetricManager.PrefixFilter(filters);\n      filter = new SolrMetricManager.AndFilter(prefixFilter, mmFilter);\n    }\n\n    reporter = JmxReporter.forRegistry(registry)\n                          .registerWith(mBeanServer)\n                          .inDomain(fullDomain)\n                          .filter(filter)\n                          .createsObjectNamesWith(jmxObjectNameFactory)\n                          .build();\n    reporter.start();\n    // workaround for inability to register custom MBeans (to be available in metrics 4.0?)\n    listener = new MetricsMapListener(mBeanServer, jmxObjectNameFactory);\n    registry.addListener(listener);\n\n    log.info(\"JMX monitoring for '\" + fullDomain + \"' (registry '\" + registryName + \"') enabled at server: \" + mBeanServer);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"13d3c80f54bcf650ad014d5768f8cffcd8d6fe1a","date":1499173980,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrJmxReporter#doInit().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrJmxReporter#doInit().mjava","sourceNew":"  protected synchronized void doInit() {\n    if (serviceUrl != null && agentId != null) {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.warn(\"No more than one of serviceUrl({}) and agentId({}) should be configured, using first MBeanServer instead of configuration.\",\n          serviceUrl, agentId, mBeanServer);\n    } else if (serviceUrl != null) {\n      // reuse existing services\n      mBeanServer = serviceRegistry.getOrCreate(serviceUrl, () -> JmxUtil.findMBeanServerForServiceUrl(serviceUrl));\n    } else if (agentId != null) {\n      mBeanServer = JmxUtil.findMBeanServerForAgentId(agentId);\n    } else {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.debug(\"No serviceUrl or agentId was configured, using first MBeanServer: \" + mBeanServer);\n    }\n\n    if (mBeanServer == null) {\n      log.warn(\"No JMX server found. Not exposing Solr metrics via JMX.\");\n      return;\n    }\n\n    if (domain == null || domain.isEmpty()) {\n      domain = registryName;\n    }\n    String fullDomain = domain;\n    if (rootName != null && !rootName.isEmpty()) {\n      fullDomain = rootName + \".\" + domain;\n    }\n    JmxObjectNameFactory jmxObjectNameFactory = new JmxObjectNameFactory(pluginInfo.name, fullDomain);\n    registry = metricManager.registry(registryName);\n    final MetricFilter filter = newMetricFilter();\n\n    reporter = JmxReporter.forRegistry(registry)\n                          .registerWith(mBeanServer)\n                          .inDomain(fullDomain)\n                          .filter(filter)\n                          .createsObjectNamesWith(jmxObjectNameFactory)\n                          .build();\n    reporter.start();\n    // workaround for inability to register custom MBeans (to be available in metrics 4.0?)\n    listener = new MetricsMapListener(mBeanServer, jmxObjectNameFactory);\n    registry.addListener(listener);\n\n    log.info(\"JMX monitoring for '\" + fullDomain + \"' (registry '\" + registryName + \"') enabled at server: \" + mBeanServer);\n  }\n\n","sourceOld":"  protected synchronized void doInit() {\n    if (serviceUrl != null && agentId != null) {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.warn(\"No more than one of serviceUrl({}) and agentId({}) should be configured, using first MBeanServer instead of configuration.\",\n          serviceUrl, agentId, mBeanServer);\n    } else if (serviceUrl != null) {\n      // reuse existing services\n      mBeanServer = serviceRegistry.getOrCreate(serviceUrl, () -> JmxUtil.findMBeanServerForServiceUrl(serviceUrl));\n    } else if (agentId != null) {\n      mBeanServer = JmxUtil.findMBeanServerForAgentId(agentId);\n    } else {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.debug(\"No serviceUrl or agentId was configured, using first MBeanServer: \" + mBeanServer);\n    }\n\n    if (mBeanServer == null) {\n      log.warn(\"No JMX server found. Not exposing Solr metrics via JMX.\");\n      return;\n    }\n\n    if (domain == null || domain.isEmpty()) {\n      domain = registryName;\n    }\n    String fullDomain = domain;\n    if (rootName != null && !rootName.isEmpty()) {\n      fullDomain = rootName + \".\" + domain;\n    }\n    JmxObjectNameFactory jmxObjectNameFactory = new JmxObjectNameFactory(pluginInfo.name, fullDomain);\n    registry = metricManager.registry(registryName);\n    // filter out MetricsMap gauges - we have a better way of handling them\n    MetricFilter mmFilter = (name, metric) -> !(metric instanceof MetricsMap);\n    MetricFilter filter;\n    if (filters.isEmpty()) {\n      filter = mmFilter;\n    } else {\n      // apply also prefix filters\n      SolrMetricManager.PrefixFilter prefixFilter = new SolrMetricManager.PrefixFilter(filters);\n      filter = new SolrMetricManager.AndFilter(prefixFilter, mmFilter);\n    }\n\n    reporter = JmxReporter.forRegistry(registry)\n                          .registerWith(mBeanServer)\n                          .inDomain(fullDomain)\n                          .filter(filter)\n                          .createsObjectNamesWith(jmxObjectNameFactory)\n                          .build();\n    reporter.start();\n    // workaround for inability to register custom MBeans (to be available in metrics 4.0?)\n    listener = new MetricsMapListener(mBeanServer, jmxObjectNameFactory);\n    registry.addListener(listener);\n\n    log.info(\"JMX monitoring for '\" + fullDomain + \"' (registry '\" + registryName + \"') enabled at server: \" + mBeanServer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrJmxReporter#doInit().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrJmxReporter#doInit().mjava","sourceNew":"  protected synchronized void doInit() {\n    if (serviceUrl != null && agentId != null) {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.warn(\"No more than one of serviceUrl({}) and agentId({}) should be configured, using first MBeanServer instead of configuration.\",\n          serviceUrl, agentId, mBeanServer);\n    } else if (serviceUrl != null) {\n      // reuse existing services\n      mBeanServer = serviceRegistry.getOrCreate(serviceUrl, () -> JmxUtil.findMBeanServerForServiceUrl(serviceUrl));\n    } else if (agentId != null) {\n      mBeanServer = JmxUtil.findMBeanServerForAgentId(agentId);\n    } else {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.debug(\"No serviceUrl or agentId was configured, using first MBeanServer: \" + mBeanServer);\n    }\n\n    if (mBeanServer == null) {\n      log.warn(\"No JMX server found. Not exposing Solr metrics via JMX.\");\n      return;\n    }\n\n    if (domain == null || domain.isEmpty()) {\n      domain = registryName;\n    }\n    String fullDomain = domain;\n    if (rootName != null && !rootName.isEmpty()) {\n      fullDomain = rootName + \".\" + domain;\n    }\n    JmxObjectNameFactory jmxObjectNameFactory = new JmxObjectNameFactory(pluginInfo.name, fullDomain);\n    registry = metricManager.registry(registryName);\n    final MetricFilter filter = newMetricFilter();\n\n    reporter = JmxReporter.forRegistry(registry)\n                          .registerWith(mBeanServer)\n                          .inDomain(fullDomain)\n                          .filter(filter)\n                          .createsObjectNamesWith(jmxObjectNameFactory)\n                          .build();\n    reporter.start();\n    // workaround for inability to register custom MBeans (to be available in metrics 4.0?)\n    listener = new MetricsMapListener(mBeanServer, jmxObjectNameFactory);\n    registry.addListener(listener);\n\n    log.info(\"JMX monitoring for '\" + fullDomain + \"' (registry '\" + registryName + \"') enabled at server: \" + mBeanServer);\n  }\n\n","sourceOld":"  protected synchronized void doInit() {\n    if (serviceUrl != null && agentId != null) {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.warn(\"No more than one of serviceUrl({}) and agentId({}) should be configured, using first MBeanServer instead of configuration.\",\n          serviceUrl, agentId, mBeanServer);\n    } else if (serviceUrl != null) {\n      // reuse existing services\n      mBeanServer = serviceRegistry.getOrCreate(serviceUrl, () -> JmxUtil.findMBeanServerForServiceUrl(serviceUrl));\n    } else if (agentId != null) {\n      mBeanServer = JmxUtil.findMBeanServerForAgentId(agentId);\n    } else {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.debug(\"No serviceUrl or agentId was configured, using first MBeanServer: \" + mBeanServer);\n    }\n\n    if (mBeanServer == null) {\n      log.warn(\"No JMX server found. Not exposing Solr metrics via JMX.\");\n      return;\n    }\n\n    if (domain == null || domain.isEmpty()) {\n      domain = registryName;\n    }\n    String fullDomain = domain;\n    if (rootName != null && !rootName.isEmpty()) {\n      fullDomain = rootName + \".\" + domain;\n    }\n    JmxObjectNameFactory jmxObjectNameFactory = new JmxObjectNameFactory(pluginInfo.name, fullDomain);\n    registry = metricManager.registry(registryName);\n    // filter out MetricsMap gauges - we have a better way of handling them\n    MetricFilter mmFilter = (name, metric) -> !(metric instanceof MetricsMap);\n    MetricFilter filter;\n    if (filters.isEmpty()) {\n      filter = mmFilter;\n    } else {\n      // apply also prefix filters\n      SolrMetricManager.PrefixFilter prefixFilter = new SolrMetricManager.PrefixFilter(filters);\n      filter = new SolrMetricManager.AndFilter(prefixFilter, mmFilter);\n    }\n\n    reporter = JmxReporter.forRegistry(registry)\n                          .registerWith(mBeanServer)\n                          .inDomain(fullDomain)\n                          .filter(filter)\n                          .createsObjectNamesWith(jmxObjectNameFactory)\n                          .build();\n    reporter.start();\n    // workaround for inability to register custom MBeans (to be available in metrics 4.0?)\n    listener = new MetricsMapListener(mBeanServer, jmxObjectNameFactory);\n    registry.addListener(listener);\n\n    log.info(\"JMX monitoring for '\" + fullDomain + \"' (registry '\" + registryName + \"') enabled at server: \" + mBeanServer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"122c889ac8944e19f984ba4306b02a8742e914a7","date":1502707353,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrJmxReporter#doInit().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrJmxReporter#doInit().mjava","sourceNew":"  protected synchronized void doInit() {\n    if (serviceUrl != null && agentId != null) {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.warn(\"No more than one of serviceUrl({}) and agentId({}) should be configured, using first MBeanServer instead of configuration.\",\n          serviceUrl, agentId, mBeanServer);\n    } else if (serviceUrl != null) {\n      // reuse existing services\n      mBeanServer = serviceRegistry.getOrCreate(serviceUrl, () -> JmxUtil.findMBeanServerForServiceUrl(serviceUrl));\n    } else if (agentId != null) {\n      mBeanServer = JmxUtil.findMBeanServerForAgentId(agentId);\n    } else {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.debug(\"No serviceUrl or agentId was configured, using first MBeanServer: \" + mBeanServer);\n    }\n\n    if (mBeanServer == null) {\n      log.warn(\"No JMX server found. Not exposing Solr metrics via JMX.\");\n      return;\n    }\n\n    if (domain == null || domain.isEmpty()) {\n      domain = registryName;\n    }\n    String fullDomain = domain;\n    if (rootName != null && !rootName.isEmpty()) {\n      fullDomain = rootName + \".\" + domain;\n    }\n    JmxObjectNameFactory jmxObjectNameFactory = new JmxObjectNameFactory(pluginInfo.name, fullDomain);\n    registry = metricManager.registry(registryName);\n\n    final MetricFilter filter = newMetricFilter();\n    String tag = Integer.toHexString(this.hashCode());\n    reporter = JmxMetricsReporter.forRegistry(registry)\n                          .registerWith(mBeanServer)\n                          .inDomain(fullDomain)\n                          .filter(filter)\n                          .createsObjectNamesWith(jmxObjectNameFactory)\n                          .withTag(tag)\n                          .build();\n    reporter.start();\n    started = true;\n    log.info(\"JMX monitoring for '\" + fullDomain + \"' (registry '\" + registryName + \"') enabled at server: \" + mBeanServer);\n  }\n\n","sourceOld":"  protected synchronized void doInit() {\n    if (serviceUrl != null && agentId != null) {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.warn(\"No more than one of serviceUrl({}) and agentId({}) should be configured, using first MBeanServer instead of configuration.\",\n          serviceUrl, agentId, mBeanServer);\n    } else if (serviceUrl != null) {\n      // reuse existing services\n      mBeanServer = serviceRegistry.getOrCreate(serviceUrl, () -> JmxUtil.findMBeanServerForServiceUrl(serviceUrl));\n    } else if (agentId != null) {\n      mBeanServer = JmxUtil.findMBeanServerForAgentId(agentId);\n    } else {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.debug(\"No serviceUrl or agentId was configured, using first MBeanServer: \" + mBeanServer);\n    }\n\n    if (mBeanServer == null) {\n      log.warn(\"No JMX server found. Not exposing Solr metrics via JMX.\");\n      return;\n    }\n\n    if (domain == null || domain.isEmpty()) {\n      domain = registryName;\n    }\n    String fullDomain = domain;\n    if (rootName != null && !rootName.isEmpty()) {\n      fullDomain = rootName + \".\" + domain;\n    }\n    JmxObjectNameFactory jmxObjectNameFactory = new JmxObjectNameFactory(pluginInfo.name, fullDomain);\n    registry = metricManager.registry(registryName);\n    final MetricFilter filter = newMetricFilter();\n\n    reporter = JmxReporter.forRegistry(registry)\n                          .registerWith(mBeanServer)\n                          .inDomain(fullDomain)\n                          .filter(filter)\n                          .createsObjectNamesWith(jmxObjectNameFactory)\n                          .build();\n    reporter.start();\n    // workaround for inability to register custom MBeans (to be available in metrics 4.0?)\n    listener = new MetricsMapListener(mBeanServer, jmxObjectNameFactory);\n    registry.addListener(listener);\n\n    log.info(\"JMX monitoring for '\" + fullDomain + \"' (registry '\" + registryName + \"') enabled at server: \" + mBeanServer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c00aac053fdd75193eb8b6d45b64c26c3b586d5b","date":1503143818,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrJmxReporter#doInit().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrJmxReporter#doInit().mjava","sourceNew":"  protected synchronized void doInit() {\n    if (serviceUrl != null && agentId != null) {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.warn(\"No more than one of serviceUrl({}) and agentId({}) should be configured, using first MBeanServer instead of configuration.\",\n          serviceUrl, agentId, mBeanServer);\n    } else if (serviceUrl != null) {\n      // reuse existing services\n      mBeanServer = serviceRegistry.getOrCreate(serviceUrl, () -> JmxUtil.findMBeanServerForServiceUrl(serviceUrl));\n    } else if (agentId != null) {\n      mBeanServer = JmxUtil.findMBeanServerForAgentId(agentId);\n    } else {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.debug(\"No serviceUrl or agentId was configured, using first MBeanServer: \" + mBeanServer);\n    }\n\n    if (mBeanServer == null) {\n      log.warn(\"No JMX server found. Not exposing Solr metrics via JMX.\");\n      return;\n    }\n\n    if (domain == null || domain.isEmpty()) {\n      domain = registryName;\n    }\n    String fullDomain = domain;\n    if (rootName != null && !rootName.isEmpty()) {\n      fullDomain = rootName + \".\" + domain;\n    }\n    JmxObjectNameFactory jmxObjectNameFactory = new JmxObjectNameFactory(pluginInfo.name, fullDomain);\n    registry = metricManager.registry(registryName);\n\n    final MetricFilter filter = newMetricFilter();\n    String tag = Integer.toHexString(this.hashCode());\n    reporter = JmxMetricsReporter.forRegistry(registry)\n                          .registerWith(mBeanServer)\n                          .inDomain(fullDomain)\n                          .filter(filter)\n                          .createsObjectNamesWith(jmxObjectNameFactory)\n                          .withTag(tag)\n                          .build();\n    reporter.start();\n    started = true;\n    log.info(\"JMX monitoring for '\" + fullDomain + \"' (registry '\" + registryName + \"') enabled at server: \" + mBeanServer);\n  }\n\n","sourceOld":"  protected synchronized void doInit() {\n    if (serviceUrl != null && agentId != null) {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.warn(\"No more than one of serviceUrl({}) and agentId({}) should be configured, using first MBeanServer instead of configuration.\",\n          serviceUrl, agentId, mBeanServer);\n    } else if (serviceUrl != null) {\n      // reuse existing services\n      mBeanServer = serviceRegistry.getOrCreate(serviceUrl, () -> JmxUtil.findMBeanServerForServiceUrl(serviceUrl));\n    } else if (agentId != null) {\n      mBeanServer = JmxUtil.findMBeanServerForAgentId(agentId);\n    } else {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.debug(\"No serviceUrl or agentId was configured, using first MBeanServer: \" + mBeanServer);\n    }\n\n    if (mBeanServer == null) {\n      log.warn(\"No JMX server found. Not exposing Solr metrics via JMX.\");\n      return;\n    }\n\n    if (domain == null || domain.isEmpty()) {\n      domain = registryName;\n    }\n    String fullDomain = domain;\n    if (rootName != null && !rootName.isEmpty()) {\n      fullDomain = rootName + \".\" + domain;\n    }\n    JmxObjectNameFactory jmxObjectNameFactory = new JmxObjectNameFactory(pluginInfo.name, fullDomain);\n    registry = metricManager.registry(registryName);\n    final MetricFilter filter = newMetricFilter();\n\n    reporter = JmxReporter.forRegistry(registry)\n                          .registerWith(mBeanServer)\n                          .inDomain(fullDomain)\n                          .filter(filter)\n                          .createsObjectNamesWith(jmxObjectNameFactory)\n                          .build();\n    reporter.start();\n    // workaround for inability to register custom MBeans (to be available in metrics 4.0?)\n    listener = new MetricsMapListener(mBeanServer, jmxObjectNameFactory);\n    registry.addListener(listener);\n\n    log.info(\"JMX monitoring for '\" + fullDomain + \"' (registry '\" + registryName + \"') enabled at server: \" + mBeanServer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc0288a6452293dcaa562210b708e58f19b7c3c5","date":1520861290,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrJmxReporter#doInit().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrJmxReporter#doInit().mjava","sourceNew":"  protected synchronized void doInit() {\n    if (serviceUrl != null && agentId != null) {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.warn(\"No more than one of serviceUrl({}) and agentId({}) should be configured, using first MBeanServer instead of configuration.\",\n          serviceUrl, agentId, mBeanServer);\n    } else if (serviceUrl != null) {\n      // reuse existing services\n      mBeanServer = serviceRegistry.getOrCreate(serviceUrl, () -> JmxUtil.findMBeanServerForServiceUrl(serviceUrl));\n    } else if (agentId != null) {\n      mBeanServer = JmxUtil.findMBeanServerForAgentId(agentId);\n    } else {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.debug(\"No serviceUrl or agentId was configured, using first MBeanServer: \" + mBeanServer);\n    }\n\n    if (mBeanServer == null) {\n      log.warn(\"No JMX server found. Not exposing Solr metrics via JMX.\");\n      return;\n    }\n\n    if (domain == null || domain.isEmpty()) {\n      domain = registryName;\n    }\n    String fullDomain = domain;\n    if (rootName != null && !rootName.isEmpty()) {\n      fullDomain = rootName + \".\" + domain;\n    }\n    JmxObjectNameFactory jmxObjectNameFactory = new JmxObjectNameFactory(pluginInfo.name, fullDomain);\n    registry = metricManager.registry(registryName);\n\n    final MetricFilter filter = newMetricFilter();\n    instanceTag = Integer.toHexString(this.hashCode());\n    reporter = JmxMetricsReporter.forRegistry(registry)\n                          .registerWith(mBeanServer)\n                          .inDomain(fullDomain)\n                          .filter(filter)\n                          .createsObjectNamesWith(jmxObjectNameFactory)\n                          .withTag(instanceTag)\n                          .build();\n    reporter.start();\n    started = true;\n    log.info(\"JMX monitoring for '\" + fullDomain + \"' (registry '\" + registryName + \"') enabled at server: \" + mBeanServer);\n  }\n\n","sourceOld":"  protected synchronized void doInit() {\n    if (serviceUrl != null && agentId != null) {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.warn(\"No more than one of serviceUrl({}) and agentId({}) should be configured, using first MBeanServer instead of configuration.\",\n          serviceUrl, agentId, mBeanServer);\n    } else if (serviceUrl != null) {\n      // reuse existing services\n      mBeanServer = serviceRegistry.getOrCreate(serviceUrl, () -> JmxUtil.findMBeanServerForServiceUrl(serviceUrl));\n    } else if (agentId != null) {\n      mBeanServer = JmxUtil.findMBeanServerForAgentId(agentId);\n    } else {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.debug(\"No serviceUrl or agentId was configured, using first MBeanServer: \" + mBeanServer);\n    }\n\n    if (mBeanServer == null) {\n      log.warn(\"No JMX server found. Not exposing Solr metrics via JMX.\");\n      return;\n    }\n\n    if (domain == null || domain.isEmpty()) {\n      domain = registryName;\n    }\n    String fullDomain = domain;\n    if (rootName != null && !rootName.isEmpty()) {\n      fullDomain = rootName + \".\" + domain;\n    }\n    JmxObjectNameFactory jmxObjectNameFactory = new JmxObjectNameFactory(pluginInfo.name, fullDomain);\n    registry = metricManager.registry(registryName);\n\n    final MetricFilter filter = newMetricFilter();\n    String tag = Integer.toHexString(this.hashCode());\n    reporter = JmxMetricsReporter.forRegistry(registry)\n                          .registerWith(mBeanServer)\n                          .inDomain(fullDomain)\n                          .filter(filter)\n                          .createsObjectNamesWith(jmxObjectNameFactory)\n                          .withTag(tag)\n                          .build();\n    reporter.start();\n    started = true;\n    log.info(\"JMX monitoring for '\" + fullDomain + \"' (registry '\" + registryName + \"') enabled at server: \" + mBeanServer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f153defc3456622167a186dcb3e25f1979a4a825","date":1569731998,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrJmxReporter#doInit().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrJmxReporter#doInit().mjava","sourceNew":"  protected synchronized void doInit() {\n    if (serviceUrl != null && agentId != null) {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.warn(\"No more than one of serviceUrl({}) and agentId({}) should be configured, using first MBeanServer {} instead of configuration.\",\n          serviceUrl, agentId, mBeanServer);\n    } else if (serviceUrl != null) {\n      // reuse existing services\n      mBeanServer = serviceRegistry.getOrCreate(serviceUrl, () -> JmxUtil.findMBeanServerForServiceUrl(serviceUrl));\n    } else if (agentId != null) {\n      mBeanServer = JmxUtil.findMBeanServerForAgentId(agentId);\n    } else {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.debug(\"No serviceUrl or agentId was configured, using first MBeanServer: \" + mBeanServer);\n    }\n\n    if (mBeanServer == null) {\n      log.warn(\"No JMX server found. Not exposing Solr metrics via JMX.\");\n      return;\n    }\n\n    if (domain == null || domain.isEmpty()) {\n      domain = registryName;\n    }\n    String fullDomain = domain;\n    if (rootName != null && !rootName.isEmpty()) {\n      fullDomain = rootName + \".\" + domain;\n    }\n    JmxObjectNameFactory jmxObjectNameFactory = new JmxObjectNameFactory(pluginInfo.name, fullDomain);\n    registry = metricManager.registry(registryName);\n\n    final MetricFilter filter = newMetricFilter();\n    instanceTag = Integer.toHexString(this.hashCode());\n    reporter = JmxMetricsReporter.forRegistry(registry)\n                          .registerWith(mBeanServer)\n                          .inDomain(fullDomain)\n                          .filter(filter)\n                          .createsObjectNamesWith(jmxObjectNameFactory)\n                          .withTag(instanceTag)\n                          .build();\n    reporter.start();\n    started = true;\n    log.info(\"JMX monitoring for '\" + fullDomain + \"' (registry '\" + registryName + \"') enabled at server: \" + mBeanServer);\n  }\n\n","sourceOld":"  protected synchronized void doInit() {\n    if (serviceUrl != null && agentId != null) {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.warn(\"No more than one of serviceUrl({}) and agentId({}) should be configured, using first MBeanServer instead of configuration.\",\n          serviceUrl, agentId, mBeanServer);\n    } else if (serviceUrl != null) {\n      // reuse existing services\n      mBeanServer = serviceRegistry.getOrCreate(serviceUrl, () -> JmxUtil.findMBeanServerForServiceUrl(serviceUrl));\n    } else if (agentId != null) {\n      mBeanServer = JmxUtil.findMBeanServerForAgentId(agentId);\n    } else {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.debug(\"No serviceUrl or agentId was configured, using first MBeanServer: \" + mBeanServer);\n    }\n\n    if (mBeanServer == null) {\n      log.warn(\"No JMX server found. Not exposing Solr metrics via JMX.\");\n      return;\n    }\n\n    if (domain == null || domain.isEmpty()) {\n      domain = registryName;\n    }\n    String fullDomain = domain;\n    if (rootName != null && !rootName.isEmpty()) {\n      fullDomain = rootName + \".\" + domain;\n    }\n    JmxObjectNameFactory jmxObjectNameFactory = new JmxObjectNameFactory(pluginInfo.name, fullDomain);\n    registry = metricManager.registry(registryName);\n\n    final MetricFilter filter = newMetricFilter();\n    instanceTag = Integer.toHexString(this.hashCode());\n    reporter = JmxMetricsReporter.forRegistry(registry)\n                          .registerWith(mBeanServer)\n                          .inDomain(fullDomain)\n                          .filter(filter)\n                          .createsObjectNamesWith(jmxObjectNameFactory)\n                          .withTag(instanceTag)\n                          .build();\n    reporter.start();\n    started = true;\n    log.info(\"JMX monitoring for '\" + fullDomain + \"' (registry '\" + registryName + \"') enabled at server: \" + mBeanServer);\n  }\n\n","bugFix":["816521ebaad5add9cb96bb88c577394e2938c40b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b9f74021389e2b32ee750fa5a24281c87951ec3","date":1569845983,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrJmxReporter#doInit().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrJmxReporter#doInit().mjava","sourceNew":"  protected synchronized void doInit() {\n    if (serviceUrl != null && agentId != null) {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.warn(\"No more than one of serviceUrl({}) and agentId({}) should be configured, using first MBeanServer {} instead of configuration.\",\n          serviceUrl, agentId, mBeanServer);\n    } else if (serviceUrl != null) {\n      // reuse existing services\n      mBeanServer = serviceRegistry.getOrCreate(serviceUrl, () -> JmxUtil.findMBeanServerForServiceUrl(serviceUrl));\n    } else if (agentId != null) {\n      mBeanServer = JmxUtil.findMBeanServerForAgentId(agentId);\n    } else {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.debug(\"No serviceUrl or agentId was configured, using first MBeanServer: \" + mBeanServer);\n    }\n\n    if (mBeanServer == null) {\n      log.warn(\"No JMX server found. Not exposing Solr metrics via JMX.\");\n      return;\n    }\n\n    if (domain == null || domain.isEmpty()) {\n      domain = registryName;\n    }\n    String fullDomain = domain;\n    if (rootName != null && !rootName.isEmpty()) {\n      fullDomain = rootName + \".\" + domain;\n    }\n    JmxObjectNameFactory jmxObjectNameFactory = new JmxObjectNameFactory(pluginInfo.name, fullDomain);\n    registry = metricManager.registry(registryName);\n\n    final MetricFilter filter = newMetricFilter();\n    instanceTag = Integer.toHexString(this.hashCode());\n    reporter = JmxMetricsReporter.forRegistry(registry)\n                          .registerWith(mBeanServer)\n                          .inDomain(fullDomain)\n                          .filter(filter)\n                          .createsObjectNamesWith(jmxObjectNameFactory)\n                          .withTag(instanceTag)\n                          .build();\n    reporter.start();\n    started = true;\n    log.info(\"JMX monitoring for '\" + fullDomain + \"' (registry '\" + registryName + \"') enabled at server: \" + mBeanServer);\n  }\n\n","sourceOld":"  protected synchronized void doInit() {\n    if (serviceUrl != null && agentId != null) {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.warn(\"No more than one of serviceUrl({}) and agentId({}) should be configured, using first MBeanServer instead of configuration.\",\n          serviceUrl, agentId, mBeanServer);\n    } else if (serviceUrl != null) {\n      // reuse existing services\n      mBeanServer = serviceRegistry.getOrCreate(serviceUrl, () -> JmxUtil.findMBeanServerForServiceUrl(serviceUrl));\n    } else if (agentId != null) {\n      mBeanServer = JmxUtil.findMBeanServerForAgentId(agentId);\n    } else {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.debug(\"No serviceUrl or agentId was configured, using first MBeanServer: \" + mBeanServer);\n    }\n\n    if (mBeanServer == null) {\n      log.warn(\"No JMX server found. Not exposing Solr metrics via JMX.\");\n      return;\n    }\n\n    if (domain == null || domain.isEmpty()) {\n      domain = registryName;\n    }\n    String fullDomain = domain;\n    if (rootName != null && !rootName.isEmpty()) {\n      fullDomain = rootName + \".\" + domain;\n    }\n    JmxObjectNameFactory jmxObjectNameFactory = new JmxObjectNameFactory(pluginInfo.name, fullDomain);\n    registry = metricManager.registry(registryName);\n\n    final MetricFilter filter = newMetricFilter();\n    instanceTag = Integer.toHexString(this.hashCode());\n    reporter = JmxMetricsReporter.forRegistry(registry)\n                          .registerWith(mBeanServer)\n                          .inDomain(fullDomain)\n                          .filter(filter)\n                          .createsObjectNamesWith(jmxObjectNameFactory)\n                          .withTag(instanceTag)\n                          .build();\n    reporter.start();\n    started = true;\n    log.info(\"JMX monitoring for '\" + fullDomain + \"' (registry '\" + registryName + \"') enabled at server: \" + mBeanServer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9df8125ba9193a2e2e285ed92157810b1952a244","date":1587326330,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrJmxReporter#doInit().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrJmxReporter#doInit().mjava","sourceNew":"  protected synchronized void doInit() {\n    if (serviceUrl != null && agentId != null) {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.warn(\"No more than one of serviceUrl({}) and agentId({}) should be configured, using first MBeanServer {} instead of configuration.\",\n          serviceUrl, agentId, mBeanServer);\n    } else if (serviceUrl != null) {\n      // reuse existing services\n      mBeanServer = serviceRegistry.getOrCreate(serviceUrl, () -> JmxUtil.findMBeanServerForServiceUrl(serviceUrl));\n    } else if (agentId != null) {\n      mBeanServer = JmxUtil.findMBeanServerForAgentId(agentId);\n    } else {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.debug(\"No serviceUrl or agentId was configured, using first MBeanServer: {}\", mBeanServer);\n    }\n\n    if (mBeanServer == null) {\n      log.warn(\"No JMX server found. Not exposing Solr metrics via JMX.\");\n      return;\n    }\n\n    if (domain == null || domain.isEmpty()) {\n      domain = registryName;\n    }\n    String fullDomain = domain;\n    if (rootName != null && !rootName.isEmpty()) {\n      fullDomain = rootName + \".\" + domain;\n    }\n    JmxObjectNameFactory jmxObjectNameFactory = new JmxObjectNameFactory(pluginInfo.name, fullDomain);\n    registry = metricManager.registry(registryName);\n\n    final MetricFilter filter = newMetricFilter();\n    instanceTag = Integer.toHexString(this.hashCode());\n    reporter = JmxMetricsReporter.forRegistry(registry)\n                          .registerWith(mBeanServer)\n                          .inDomain(fullDomain)\n                          .filter(filter)\n                          .createsObjectNamesWith(jmxObjectNameFactory)\n                          .withTag(instanceTag)\n                          .build();\n    reporter.start();\n    started = true;\n    log.info(\"JMX monitoring for '{}' (registry '{}') enabled at server: {}\", fullDomain, registryName, mBeanServer);\n  }\n\n","sourceOld":"  protected synchronized void doInit() {\n    if (serviceUrl != null && agentId != null) {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.warn(\"No more than one of serviceUrl({}) and agentId({}) should be configured, using first MBeanServer {} instead of configuration.\",\n          serviceUrl, agentId, mBeanServer);\n    } else if (serviceUrl != null) {\n      // reuse existing services\n      mBeanServer = serviceRegistry.getOrCreate(serviceUrl, () -> JmxUtil.findMBeanServerForServiceUrl(serviceUrl));\n    } else if (agentId != null) {\n      mBeanServer = JmxUtil.findMBeanServerForAgentId(agentId);\n    } else {\n      mBeanServer = JmxUtil.findFirstMBeanServer();\n      log.debug(\"No serviceUrl or agentId was configured, using first MBeanServer: \" + mBeanServer);\n    }\n\n    if (mBeanServer == null) {\n      log.warn(\"No JMX server found. Not exposing Solr metrics via JMX.\");\n      return;\n    }\n\n    if (domain == null || domain.isEmpty()) {\n      domain = registryName;\n    }\n    String fullDomain = domain;\n    if (rootName != null && !rootName.isEmpty()) {\n      fullDomain = rootName + \".\" + domain;\n    }\n    JmxObjectNameFactory jmxObjectNameFactory = new JmxObjectNameFactory(pluginInfo.name, fullDomain);\n    registry = metricManager.registry(registryName);\n\n    final MetricFilter filter = newMetricFilter();\n    instanceTag = Integer.toHexString(this.hashCode());\n    reporter = JmxMetricsReporter.forRegistry(registry)\n                          .registerWith(mBeanServer)\n                          .inDomain(fullDomain)\n                          .filter(filter)\n                          .createsObjectNamesWith(jmxObjectNameFactory)\n                          .withTag(instanceTag)\n                          .build();\n    reporter.start();\n    started = true;\n    log.info(\"JMX monitoring for '\" + fullDomain + \"' (registry '\" + registryName + \"') enabled at server: \" + mBeanServer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c00aac053fdd75193eb8b6d45b64c26c3b586d5b":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","122c889ac8944e19f984ba4306b02a8742e914a7"],"13d3c80f54bcf650ad014d5768f8cffcd8d6fe1a":["28288370235ed02234a64753cdbf0c6ec096304a"],"e3ee7308fb49e4d4f77d7a23584a2128a0d6921e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e3ee7308fb49e4d4f77d7a23584a2128a0d6921e"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e3ee7308fb49e4d4f77d7a23584a2128a0d6921e"],"fc0288a6452293dcaa562210b708e58f19b7c3c5":["122c889ac8944e19f984ba4306b02a8742e914a7"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["e9017cf144952056066919f1ebc7897ff9bd71b1","13d3c80f54bcf650ad014d5768f8cffcd8d6fe1a"],"f153defc3456622167a186dcb3e25f1979a4a825":["fc0288a6452293dcaa562210b708e58f19b7c3c5"],"122c889ac8944e19f984ba4306b02a8742e914a7":["13d3c80f54bcf650ad014d5768f8cffcd8d6fe1a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b9f74021389e2b32ee750fa5a24281c87951ec3":["fc0288a6452293dcaa562210b708e58f19b7c3c5","f153defc3456622167a186dcb3e25f1979a4a825"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9df8125ba9193a2e2e285ed92157810b1952a244"],"9df8125ba9193a2e2e285ed92157810b1952a244":["f153defc3456622167a186dcb3e25f1979a4a825"]},"commit2Childs":{"c00aac053fdd75193eb8b6d45b64c26c3b586d5b":[],"13d3c80f54bcf650ad014d5768f8cffcd8d6fe1a":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","122c889ac8944e19f984ba4306b02a8742e914a7"],"e3ee7308fb49e4d4f77d7a23584a2128a0d6921e":["28288370235ed02234a64753cdbf0c6ec096304a","e9017cf144952056066919f1ebc7897ff9bd71b1"],"28288370235ed02234a64753cdbf0c6ec096304a":["13d3c80f54bcf650ad014d5768f8cffcd8d6fe1a"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"fc0288a6452293dcaa562210b708e58f19b7c3c5":["f153defc3456622167a186dcb3e25f1979a4a825","4b9f74021389e2b32ee750fa5a24281c87951ec3"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b"],"f153defc3456622167a186dcb3e25f1979a4a825":["4b9f74021389e2b32ee750fa5a24281c87951ec3","9df8125ba9193a2e2e285ed92157810b1952a244"],"122c889ac8944e19f984ba4306b02a8742e914a7":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b","fc0288a6452293dcaa562210b708e58f19b7c3c5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3ee7308fb49e4d4f77d7a23584a2128a0d6921e","28288370235ed02234a64753cdbf0c6ec096304a","e9017cf144952056066919f1ebc7897ff9bd71b1"],"4b9f74021389e2b32ee750fa5a24281c87951ec3":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9df8125ba9193a2e2e285ed92157810b1952a244":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b","4b9f74021389e2b32ee750fa5a24281c87951ec3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}