{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#getOptions().mjava","commits":[{"id":"9b95105f40584c3ef98e6a1ab1b55ad47d67f136","date":1476256601,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#getOptions().mjava","pathOld":"/dev/null","sourceNew":"    @SuppressWarnings(\"static-access\")\n    public Option[] getOptions() {\n      return new Option[] {\n          OptionBuilder\n              .withDescription(\"Asserts that we are NOT the root user\")\n              .withLongOpt(\"not-root\")\n              .create(\"R\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we are the root user\")\n              .withLongOpt(\"root\")\n              .create(\"r\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is NOT started on a certain URL\")\n              .withLongOpt(\"not-started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"S\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is started on a certain URL\")\n              .withLongOpt(\"started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"s\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we run as same user that owns <directory>\")\n              .withLongOpt(\"same-user\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"u\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> exists\")\n              .withLongOpt(\"exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"x\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> does NOT exist\")\n              .withLongOpt(\"not-exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"X\"),\n          OptionBuilder\n              .withDescription(\"Exception message to be used in place of the default error message\")\n              .withLongOpt(\"message\")\n              .hasArg(true)\n              .withArgName(\"message\")\n              .create(\"m\"),\n          OptionBuilder\n              .withDescription(\"Return an exit code instead of printing error message on assert fail.\")\n              .withLongOpt(\"exitcode\")\n              .create(\"e\")\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ee8fbffa595c312bc0437f2c9bb6376a29c1b427"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#getOptions().mjava","pathOld":"/dev/null","sourceNew":"    @SuppressWarnings(\"static-access\")\n    public Option[] getOptions() {\n      return new Option[] {\n          OptionBuilder\n              .withDescription(\"Asserts that we are NOT the root user\")\n              .withLongOpt(\"not-root\")\n              .create(\"R\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we are the root user\")\n              .withLongOpt(\"root\")\n              .create(\"r\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is NOT started on a certain URL\")\n              .withLongOpt(\"not-started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"S\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is started on a certain URL\")\n              .withLongOpt(\"started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"s\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we run as same user that owns <directory>\")\n              .withLongOpt(\"same-user\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"u\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> exists\")\n              .withLongOpt(\"exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"x\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> does NOT exist\")\n              .withLongOpt(\"not-exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"X\"),\n          OptionBuilder\n              .withDescription(\"Exception message to be used in place of the default error message\")\n              .withLongOpt(\"message\")\n              .hasArg(true)\n              .withArgName(\"message\")\n              .create(\"m\"),\n          OptionBuilder\n              .withDescription(\"Return an exit code instead of printing error message on assert fail.\")\n              .withLongOpt(\"exitcode\")\n              .create(\"e\")\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8677448a186f4abd32218787f7ae73ad38f575cf","date":1477484362,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#getOptions().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#getOptions().mjava","sourceNew":"    @SuppressWarnings(\"static-access\")\n    public Option[] getOptions() {\n      return new Option[] {\n          OptionBuilder\n              .withDescription(\"Asserts that we are NOT the root user\")\n              .withLongOpt(\"not-root\")\n              .create(\"R\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we are the root user\")\n              .withLongOpt(\"root\")\n              .create(\"r\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is NOT running on a certain URL. Default timeout is 1000ms\")\n              .withLongOpt(\"not-started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"S\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is running on a certain URL. Default timeout is 1000ms\")\n              .withLongOpt(\"started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"s\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we run as same user that owns <directory>\")\n              .withLongOpt(\"same-user\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"u\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> exists\")\n              .withLongOpt(\"exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"x\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> does NOT exist\")\n              .withLongOpt(\"not-exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"X\"),\n          OptionBuilder\n              .withDescription(\"Exception message to be used in place of the default error message\")\n              .withLongOpt(\"message\")\n              .hasArg(true)\n              .withArgName(\"message\")\n              .create(\"m\"),\n          OptionBuilder\n              .withDescription(\"Timeout in ms for commands supporting a timeout\")\n              .withLongOpt(\"ms\")\n              .hasArg(true)\n              .withType(Long.class)\n              .withArgName(\"ms\")\n              .create(\"t\"),\n          OptionBuilder\n              .withDescription(\"Return an exit code instead of printing error message on assert fail.\")\n              .withLongOpt(\"exitcode\")\n              .create(\"e\")\n      };\n    }\n\n","sourceOld":"    @SuppressWarnings(\"static-access\")\n    public Option[] getOptions() {\n      return new Option[] {\n          OptionBuilder\n              .withDescription(\"Asserts that we are NOT the root user\")\n              .withLongOpt(\"not-root\")\n              .create(\"R\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we are the root user\")\n              .withLongOpt(\"root\")\n              .create(\"r\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is NOT started on a certain URL\")\n              .withLongOpt(\"not-started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"S\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is started on a certain URL\")\n              .withLongOpt(\"started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"s\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we run as same user that owns <directory>\")\n              .withLongOpt(\"same-user\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"u\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> exists\")\n              .withLongOpt(\"exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"x\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> does NOT exist\")\n              .withLongOpt(\"not-exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"X\"),\n          OptionBuilder\n              .withDescription(\"Exception message to be used in place of the default error message\")\n              .withLongOpt(\"message\")\n              .hasArg(true)\n              .withArgName(\"message\")\n              .create(\"m\"),\n          OptionBuilder\n              .withDescription(\"Return an exit code instead of printing error message on assert fail.\")\n              .withLongOpt(\"exitcode\")\n              .create(\"e\")\n      };\n    }\n\n","bugFix":null,"bugIntro":["ee8fbffa595c312bc0437f2c9bb6376a29c1b427"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#getOptions().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#getOptions().mjava","sourceNew":"    @SuppressWarnings(\"static-access\")\n    public Option[] getOptions() {\n      return new Option[] {\n          OptionBuilder\n              .withDescription(\"Asserts that we are NOT the root user\")\n              .withLongOpt(\"not-root\")\n              .create(\"R\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we are the root user\")\n              .withLongOpt(\"root\")\n              .create(\"r\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is NOT running on a certain URL. Default timeout is 1000ms\")\n              .withLongOpt(\"not-started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"S\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is running on a certain URL. Default timeout is 1000ms\")\n              .withLongOpt(\"started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"s\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we run as same user that owns <directory>\")\n              .withLongOpt(\"same-user\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"u\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> exists\")\n              .withLongOpt(\"exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"x\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> does NOT exist\")\n              .withLongOpt(\"not-exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"X\"),\n          OptionBuilder\n              .withDescription(\"Exception message to be used in place of the default error message\")\n              .withLongOpt(\"message\")\n              .hasArg(true)\n              .withArgName(\"message\")\n              .create(\"m\"),\n          OptionBuilder\n              .withDescription(\"Timeout in ms for commands supporting a timeout\")\n              .withLongOpt(\"ms\")\n              .hasArg(true)\n              .withType(Long.class)\n              .withArgName(\"ms\")\n              .create(\"t\"),\n          OptionBuilder\n              .withDescription(\"Return an exit code instead of printing error message on assert fail.\")\n              .withLongOpt(\"exitcode\")\n              .create(\"e\")\n      };\n    }\n\n","sourceOld":"    @SuppressWarnings(\"static-access\")\n    public Option[] getOptions() {\n      return new Option[] {\n          OptionBuilder\n              .withDescription(\"Asserts that we are NOT the root user\")\n              .withLongOpt(\"not-root\")\n              .create(\"R\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we are the root user\")\n              .withLongOpt(\"root\")\n              .create(\"r\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is NOT started on a certain URL\")\n              .withLongOpt(\"not-started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"S\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is started on a certain URL\")\n              .withLongOpt(\"started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"s\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we run as same user that owns <directory>\")\n              .withLongOpt(\"same-user\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"u\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> exists\")\n              .withLongOpt(\"exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"x\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> does NOT exist\")\n              .withLongOpt(\"not-exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"X\"),\n          OptionBuilder\n              .withDescription(\"Exception message to be used in place of the default error message\")\n              .withLongOpt(\"message\")\n              .hasArg(true)\n              .withArgName(\"message\")\n              .create(\"m\"),\n          OptionBuilder\n              .withDescription(\"Return an exit code instead of printing error message on assert fail.\")\n              .withLongOpt(\"exitcode\")\n              .create(\"e\")\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c142bc095756829ecf08d95cbdc716a5a8fb9716","date":1477604503,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#getOptions().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#getOptions().mjava","sourceNew":"    @SuppressWarnings(\"static-access\")\n    public Option[] getOptions() {\n      return new Option[] {\n          OptionBuilder\n              .withDescription(\"Asserts that we are NOT the root user\")\n              .withLongOpt(\"not-root\")\n              .create(\"R\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we are the root user\")\n              .withLongOpt(\"root\")\n              .create(\"r\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is NOT running on a certain URL. Default timeout is 1000ms\")\n              .withLongOpt(\"not-started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"S\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is running on a certain URL. Default timeout is 1000ms\")\n              .withLongOpt(\"started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"s\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we run as same user that owns <directory>\")\n              .withLongOpt(\"same-user\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"u\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> exists\")\n              .withLongOpt(\"exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"x\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> does NOT exist\")\n              .withLongOpt(\"not-exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"X\"),\n          OptionBuilder\n              .withDescription(\"Exception message to be used in place of the default error message\")\n              .withLongOpt(\"message\")\n              .hasArg(true)\n              .withArgName(\"message\")\n              .create(\"m\"),\n          OptionBuilder\n              .withDescription(\"Timeout in ms for commands supporting a timeout\")\n              .withLongOpt(\"timeout\")\n              .hasArg(true)\n              .withType(Long.class)\n              .withArgName(\"ms\")\n              .create(\"t\"),\n          OptionBuilder\n              .withDescription(\"Return an exit code instead of printing error message on assert fail.\")\n              .withLongOpt(\"exitcode\")\n              .create(\"e\")\n      };\n    }\n\n","sourceOld":"    @SuppressWarnings(\"static-access\")\n    public Option[] getOptions() {\n      return new Option[] {\n          OptionBuilder\n              .withDescription(\"Asserts that we are NOT the root user\")\n              .withLongOpt(\"not-root\")\n              .create(\"R\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we are the root user\")\n              .withLongOpt(\"root\")\n              .create(\"r\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is NOT running on a certain URL. Default timeout is 1000ms\")\n              .withLongOpt(\"not-started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"S\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is running on a certain URL. Default timeout is 1000ms\")\n              .withLongOpt(\"started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"s\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we run as same user that owns <directory>\")\n              .withLongOpt(\"same-user\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"u\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> exists\")\n              .withLongOpt(\"exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"x\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> does NOT exist\")\n              .withLongOpt(\"not-exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"X\"),\n          OptionBuilder\n              .withDescription(\"Exception message to be used in place of the default error message\")\n              .withLongOpt(\"message\")\n              .hasArg(true)\n              .withArgName(\"message\")\n              .create(\"m\"),\n          OptionBuilder\n              .withDescription(\"Timeout in ms for commands supporting a timeout\")\n              .withLongOpt(\"ms\")\n              .hasArg(true)\n              .withType(Long.class)\n              .withArgName(\"ms\")\n              .create(\"t\"),\n          OptionBuilder\n              .withDescription(\"Return an exit code instead of printing error message on assert fail.\")\n              .withLongOpt(\"exitcode\")\n              .create(\"e\")\n      };\n    }\n\n","bugFix":null,"bugIntro":["ee8fbffa595c312bc0437f2c9bb6376a29c1b427"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e24ef15e7e97c77f0829a62180966fccd2e94b5","date":1477623326,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#getOptions().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#getOptions().mjava","sourceNew":"    @SuppressWarnings(\"static-access\")\n    public Option[] getOptions() {\n      return new Option[] {\n          OptionBuilder\n              .withDescription(\"Asserts that we are NOT the root user\")\n              .withLongOpt(\"not-root\")\n              .create(\"R\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we are the root user\")\n              .withLongOpt(\"root\")\n              .create(\"r\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is NOT running on a certain URL. Default timeout is 1000ms\")\n              .withLongOpt(\"not-started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"S\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is running on a certain URL. Default timeout is 1000ms\")\n              .withLongOpt(\"started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"s\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we run as same user that owns <directory>\")\n              .withLongOpt(\"same-user\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"u\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> exists\")\n              .withLongOpt(\"exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"x\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> does NOT exist\")\n              .withLongOpt(\"not-exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"X\"),\n          OptionBuilder\n              .withDescription(\"Exception message to be used in place of the default error message\")\n              .withLongOpt(\"message\")\n              .hasArg(true)\n              .withArgName(\"message\")\n              .create(\"m\"),\n          OptionBuilder\n              .withDescription(\"Timeout in ms for commands supporting a timeout\")\n              .withLongOpt(\"timeout\")\n              .hasArg(true)\n              .withType(Long.class)\n              .withArgName(\"ms\")\n              .create(\"t\"),\n          OptionBuilder\n              .withDescription(\"Return an exit code instead of printing error message on assert fail.\")\n              .withLongOpt(\"exitcode\")\n              .create(\"e\")\n      };\n    }\n\n","sourceOld":"    @SuppressWarnings(\"static-access\")\n    public Option[] getOptions() {\n      return new Option[] {\n          OptionBuilder\n              .withDescription(\"Asserts that we are NOT the root user\")\n              .withLongOpt(\"not-root\")\n              .create(\"R\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we are the root user\")\n              .withLongOpt(\"root\")\n              .create(\"r\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is NOT running on a certain URL. Default timeout is 1000ms\")\n              .withLongOpt(\"not-started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"S\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is running on a certain URL. Default timeout is 1000ms\")\n              .withLongOpt(\"started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"s\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we run as same user that owns <directory>\")\n              .withLongOpt(\"same-user\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"u\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> exists\")\n              .withLongOpt(\"exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"x\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> does NOT exist\")\n              .withLongOpt(\"not-exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"X\"),\n          OptionBuilder\n              .withDescription(\"Exception message to be used in place of the default error message\")\n              .withLongOpt(\"message\")\n              .hasArg(true)\n              .withArgName(\"message\")\n              .create(\"m\"),\n          OptionBuilder\n              .withDescription(\"Timeout in ms for commands supporting a timeout\")\n              .withLongOpt(\"ms\")\n              .hasArg(true)\n              .withType(Long.class)\n              .withArgName(\"ms\")\n              .create(\"t\"),\n          OptionBuilder\n              .withDescription(\"Return an exit code instead of printing error message on assert fail.\")\n              .withLongOpt(\"exitcode\")\n              .create(\"e\")\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"59dce44d6a0b58c171de1d47ad8c0a75831f94fd","date":1477668573,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#getOptions().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#getOptions().mjava","sourceNew":"    @SuppressWarnings(\"static-access\")\n    public Option[] getOptions() {\n      return new Option[] {\n          OptionBuilder\n              .withDescription(\"Asserts that we are NOT the root user\")\n              .withLongOpt(\"not-root\")\n              .create(\"R\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we are the root user\")\n              .withLongOpt(\"root\")\n              .create(\"r\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is NOT running on a certain URL. Default timeout is 1000ms\")\n              .withLongOpt(\"not-started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"S\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is running on a certain URL. Default timeout is 1000ms\")\n              .withLongOpt(\"started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"s\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we run as same user that owns <directory>\")\n              .withLongOpt(\"same-user\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"u\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> exists\")\n              .withLongOpt(\"exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"x\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> does NOT exist\")\n              .withLongOpt(\"not-exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"X\"),\n          OptionBuilder\n              .withDescription(\"Exception message to be used in place of the default error message\")\n              .withLongOpt(\"message\")\n              .hasArg(true)\n              .withArgName(\"message\")\n              .create(\"m\"),\n          OptionBuilder\n              .withDescription(\"Timeout in ms for commands supporting a timeout\")\n              .withLongOpt(\"timeout\")\n              .hasArg(true)\n              .withType(Long.class)\n              .withArgName(\"ms\")\n              .create(\"t\"),\n          OptionBuilder\n              .withDescription(\"Return an exit code instead of printing error message on assert fail.\")\n              .withLongOpt(\"exitcode\")\n              .create(\"e\")\n      };\n    }\n\n","sourceOld":"    @SuppressWarnings(\"static-access\")\n    public Option[] getOptions() {\n      return new Option[] {\n          OptionBuilder\n              .withDescription(\"Asserts that we are NOT the root user\")\n              .withLongOpt(\"not-root\")\n              .create(\"R\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we are the root user\")\n              .withLongOpt(\"root\")\n              .create(\"r\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is NOT running on a certain URL. Default timeout is 1000ms\")\n              .withLongOpt(\"not-started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"S\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is running on a certain URL. Default timeout is 1000ms\")\n              .withLongOpt(\"started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"s\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we run as same user that owns <directory>\")\n              .withLongOpt(\"same-user\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"u\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> exists\")\n              .withLongOpt(\"exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"x\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> does NOT exist\")\n              .withLongOpt(\"not-exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"X\"),\n          OptionBuilder\n              .withDescription(\"Exception message to be used in place of the default error message\")\n              .withLongOpt(\"message\")\n              .hasArg(true)\n              .withArgName(\"message\")\n              .create(\"m\"),\n          OptionBuilder\n              .withDescription(\"Timeout in ms for commands supporting a timeout\")\n              .withLongOpt(\"ms\")\n              .hasArg(true)\n              .withType(Long.class)\n              .withArgName(\"ms\")\n              .create(\"t\"),\n          OptionBuilder\n              .withDescription(\"Return an exit code instead of printing error message on assert fail.\")\n              .withLongOpt(\"exitcode\")\n              .create(\"e\")\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a171ed3ff25e158a76780310dbb91c67f6801238","date":1519299877,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#getOptions().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#getOptions().mjava","sourceNew":"    @SuppressWarnings(\"static-access\")\n    public Option[] getOptions() {\n      return new Option[] {\n          OptionBuilder\n              .withDescription(\"Asserts that we are NOT the root user\")\n              .withLongOpt(\"not-root\")\n              .create(\"R\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we are the root user\")\n              .withLongOpt(\"root\")\n              .create(\"r\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is NOT running on a certain URL. Default timeout is 1000ms\")\n              .withLongOpt(\"not-started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"S\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is running on a certain URL. Default timeout is 1000ms\")\n              .withLongOpt(\"started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"s\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we run as same user that owns <directory>\")\n              .withLongOpt(\"same-user\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"u\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> exists\")\n              .withLongOpt(\"exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"x\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> does NOT exist\")\n              .withLongOpt(\"not-exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"X\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is running in cloud mode.  Also fails if Solr not running.  URL should be for root Solr path.\")\n              .withLongOpt(\"cloud\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"c\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is not running in cloud mode.  Also fails if Solr not running.  URL should be for root Solr path.\")\n              .withLongOpt(\"not-cloud\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"C\"),\n          OptionBuilder\n              .withDescription(\"Exception message to be used in place of the default error message\")\n              .withLongOpt(\"message\")\n              .hasArg(true)\n              .withArgName(\"message\")\n              .create(\"m\"),\n          OptionBuilder\n              .withDescription(\"Timeout in ms for commands supporting a timeout\")\n              .withLongOpt(\"timeout\")\n              .hasArg(true)\n              .withType(Long.class)\n              .withArgName(\"ms\")\n              .create(\"t\"),\n          OptionBuilder\n              .withDescription(\"Return an exit code instead of printing error message on assert fail.\")\n              .withLongOpt(\"exitcode\")\n              .create(\"e\")\n      };\n    }\n\n","sourceOld":"    @SuppressWarnings(\"static-access\")\n    public Option[] getOptions() {\n      return new Option[] {\n          OptionBuilder\n              .withDescription(\"Asserts that we are NOT the root user\")\n              .withLongOpt(\"not-root\")\n              .create(\"R\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we are the root user\")\n              .withLongOpt(\"root\")\n              .create(\"r\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is NOT running on a certain URL. Default timeout is 1000ms\")\n              .withLongOpt(\"not-started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"S\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is running on a certain URL. Default timeout is 1000ms\")\n              .withLongOpt(\"started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"s\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we run as same user that owns <directory>\")\n              .withLongOpt(\"same-user\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"u\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> exists\")\n              .withLongOpt(\"exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"x\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> does NOT exist\")\n              .withLongOpt(\"not-exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"X\"),\n          OptionBuilder\n              .withDescription(\"Exception message to be used in place of the default error message\")\n              .withLongOpt(\"message\")\n              .hasArg(true)\n              .withArgName(\"message\")\n              .create(\"m\"),\n          OptionBuilder\n              .withDescription(\"Timeout in ms for commands supporting a timeout\")\n              .withLongOpt(\"timeout\")\n              .hasArg(true)\n              .withType(Long.class)\n              .withArgName(\"ms\")\n              .create(\"t\"),\n          OptionBuilder\n              .withDescription(\"Return an exit code instead of printing error message on assert fail.\")\n              .withLongOpt(\"exitcode\")\n              .create(\"e\")\n      };\n    }\n\n","bugFix":null,"bugIntro":["ee8fbffa595c312bc0437f2c9bb6376a29c1b427"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b79a5db147a1c6f95d1625ddbc3561ef56955225","date":1528848080,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#getOptions().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#getOptions().mjava","sourceNew":"    @SuppressWarnings(\"static-access\")\n    public Option[] getOptions() {\n      return new Option[] {\n          OptionBuilder\n              .withDescription(\"Asserts that we are NOT the root user\")\n              .withLongOpt(\"not-root\")\n              .create(\"R\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we are the root user\")\n              .withLongOpt(\"root\")\n              .create(\"r\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is NOT running on a certain URL. Default timeout is 1000ms\")\n              .withLongOpt(\"not-started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"S\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is running on a certain URL. Default timeout is 1000ms\")\n              .withLongOpt(\"started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"s\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we run as same user that owns <directory>\")\n              .withLongOpt(\"same-user\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"u\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> exists\")\n              .withLongOpt(\"exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"x\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> does NOT exist\")\n              .withLongOpt(\"not-exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"X\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is running in cloud mode.  Also fails if Solr not running.  URL should be for root Solr path.\")\n              .withLongOpt(\"cloud\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"c\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is not running in cloud mode.  Also fails if Solr not running.  URL should be for root Solr path.\")\n              .withLongOpt(\"not-cloud\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"C\"),\n          OptionBuilder\n              .withDescription(\"Exception message to be used in place of the default error message\")\n              .withLongOpt(\"message\")\n              .hasArg(true)\n              .withArgName(\"message\")\n              .create(\"m\"),\n          OptionBuilder\n              .withDescription(\"Timeout in ms for commands supporting a timeout\")\n              .withLongOpt(\"timeout\")\n              .hasArg(true)\n              .withType(Long.class)\n              .withArgName(\"ms\")\n              .create(\"t\"),\n          OptionBuilder\n              .withDescription(\"Return an exit code instead of printing error message on assert fail.\")\n              .withLongOpt(\"exitcode\")\n              .create(\"e\")\n      };\n    }\n\n","sourceOld":"    @SuppressWarnings(\"static-access\")\n    public Option[] getOptions() {\n      return new Option[] {\n          OptionBuilder\n              .withDescription(\"Asserts that we are NOT the root user\")\n              .withLongOpt(\"not-root\")\n              .create(\"R\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we are the root user\")\n              .withLongOpt(\"root\")\n              .create(\"r\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is NOT running on a certain URL. Default timeout is 1000ms\")\n              .withLongOpt(\"not-started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"S\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is running on a certain URL. Default timeout is 1000ms\")\n              .withLongOpt(\"started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"s\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we run as same user that owns <directory>\")\n              .withLongOpt(\"same-user\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"u\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> exists\")\n              .withLongOpt(\"exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"x\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> does NOT exist\")\n              .withLongOpt(\"not-exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"X\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is running in cloud mode.  Also fails if Solr not running.  URL should be for root Solr path.\")\n              .withLongOpt(\"cloud\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"c\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is not running in cloud mode.  Also fails if Solr not running.  URL should be for root Solr path.\")\n              .withLongOpt(\"not-cloud\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"C\"),\n          OptionBuilder\n              .withDescription(\"Exception message to be used in place of the default error message\")\n              .withLongOpt(\"message\")\n              .hasArg(true)\n              .withArgName(\"message\")\n              .create(\"m\"),\n          OptionBuilder\n              .withDescription(\"Timeout in ms for commands supporting a timeout\")\n              .withLongOpt(\"timeout\")\n              .hasArg(true)\n              .withType(Long.class)\n              .withArgName(\"ms\")\n              .create(\"t\"),\n          OptionBuilder\n              .withDescription(\"Return an exit code instead of printing error message on assert fail.\")\n              .withLongOpt(\"exitcode\")\n              .create(\"e\")\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#getOptions().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#getOptions().mjava","sourceNew":"    @SuppressWarnings(\"static-access\")\n    public Option[] getOptions() {\n      return new Option[] {\n          OptionBuilder\n              .withDescription(\"Asserts that we are NOT the root user\")\n              .withLongOpt(\"not-root\")\n              .create(\"R\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we are the root user\")\n              .withLongOpt(\"root\")\n              .create(\"r\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is NOT running on a certain URL. Default timeout is 1000ms\")\n              .withLongOpt(\"not-started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"S\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is running on a certain URL. Default timeout is 1000ms\")\n              .withLongOpt(\"started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"s\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we run as same user that owns <directory>\")\n              .withLongOpt(\"same-user\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"u\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> exists\")\n              .withLongOpt(\"exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"x\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> does NOT exist\")\n              .withLongOpt(\"not-exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"X\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is running in cloud mode.  Also fails if Solr not running.  URL should be for root Solr path.\")\n              .withLongOpt(\"cloud\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"c\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is not running in cloud mode.  Also fails if Solr not running.  URL should be for root Solr path.\")\n              .withLongOpt(\"not-cloud\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"C\"),\n          OptionBuilder\n              .withDescription(\"Exception message to be used in place of the default error message\")\n              .withLongOpt(\"message\")\n              .hasArg(true)\n              .withArgName(\"message\")\n              .create(\"m\"),\n          OptionBuilder\n              .withDescription(\"Timeout in ms for commands supporting a timeout\")\n              .withLongOpt(\"timeout\")\n              .hasArg(true)\n              .withType(Long.class)\n              .withArgName(\"ms\")\n              .create(\"t\"),\n          OptionBuilder\n              .withDescription(\"Return an exit code instead of printing error message on assert fail.\")\n              .withLongOpt(\"exitcode\")\n              .create(\"e\")\n      };\n    }\n\n","sourceOld":"    @SuppressWarnings(\"static-access\")\n    public Option[] getOptions() {\n      return new Option[] {\n          OptionBuilder\n              .withDescription(\"Asserts that we are NOT the root user\")\n              .withLongOpt(\"not-root\")\n              .create(\"R\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we are the root user\")\n              .withLongOpt(\"root\")\n              .create(\"r\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is NOT running on a certain URL. Default timeout is 1000ms\")\n              .withLongOpt(\"not-started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"S\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is running on a certain URL. Default timeout is 1000ms\")\n              .withLongOpt(\"started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"s\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we run as same user that owns <directory>\")\n              .withLongOpt(\"same-user\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"u\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> exists\")\n              .withLongOpt(\"exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"x\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> does NOT exist\")\n              .withLongOpt(\"not-exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"X\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is running in cloud mode.  Also fails if Solr not running.  URL should be for root Solr path.\")\n              .withLongOpt(\"cloud\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"c\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is not running in cloud mode.  Also fails if Solr not running.  URL should be for root Solr path.\")\n              .withLongOpt(\"not-cloud\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"C\"),\n          OptionBuilder\n              .withDescription(\"Exception message to be used in place of the default error message\")\n              .withLongOpt(\"message\")\n              .hasArg(true)\n              .withArgName(\"message\")\n              .create(\"m\"),\n          OptionBuilder\n              .withDescription(\"Timeout in ms for commands supporting a timeout\")\n              .withLongOpt(\"timeout\")\n              .hasArg(true)\n              .withType(Long.class)\n              .withArgName(\"ms\")\n              .create(\"t\"),\n          OptionBuilder\n              .withDescription(\"Return an exit code instead of printing error message on assert fail.\")\n              .withLongOpt(\"exitcode\")\n              .create(\"e\")\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#getOptions().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#getOptions().mjava","sourceNew":"    @SuppressWarnings(\"static-access\")\n    public Option[] getOptions() {\n      return new Option[] {\n          OptionBuilder\n              .withDescription(\"Asserts that we are NOT the root user\")\n              .withLongOpt(\"not-root\")\n              .create(\"R\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we are the root user\")\n              .withLongOpt(\"root\")\n              .create(\"r\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is NOT running on a certain URL. Default timeout is 1000ms\")\n              .withLongOpt(\"not-started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"S\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is running on a certain URL. Default timeout is 1000ms\")\n              .withLongOpt(\"started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"s\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we run as same user that owns <directory>\")\n              .withLongOpt(\"same-user\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"u\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> exists\")\n              .withLongOpt(\"exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"x\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> does NOT exist\")\n              .withLongOpt(\"not-exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"X\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is running in cloud mode.  Also fails if Solr not running.  URL should be for root Solr path.\")\n              .withLongOpt(\"cloud\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"c\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is not running in cloud mode.  Also fails if Solr not running.  URL should be for root Solr path.\")\n              .withLongOpt(\"not-cloud\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"C\"),\n          OptionBuilder\n              .withDescription(\"Exception message to be used in place of the default error message\")\n              .withLongOpt(\"message\")\n              .hasArg(true)\n              .withArgName(\"message\")\n              .create(\"m\"),\n          OptionBuilder\n              .withDescription(\"Timeout in ms for commands supporting a timeout\")\n              .withLongOpt(\"timeout\")\n              .hasArg(true)\n              .withType(Long.class)\n              .withArgName(\"ms\")\n              .create(\"t\"),\n          OptionBuilder\n              .withDescription(\"Return an exit code instead of printing error message on assert fail.\")\n              .withLongOpt(\"exitcode\")\n              .create(\"e\")\n      };\n    }\n\n","sourceOld":"    @SuppressWarnings(\"static-access\")\n    public Option[] getOptions() {\n      return new Option[] {\n          OptionBuilder\n              .withDescription(\"Asserts that we are NOT the root user\")\n              .withLongOpt(\"not-root\")\n              .create(\"R\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we are the root user\")\n              .withLongOpt(\"root\")\n              .create(\"r\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is NOT running on a certain URL. Default timeout is 1000ms\")\n              .withLongOpt(\"not-started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"S\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is running on a certain URL. Default timeout is 1000ms\")\n              .withLongOpt(\"started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"s\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we run as same user that owns <directory>\")\n              .withLongOpt(\"same-user\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"u\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> exists\")\n              .withLongOpt(\"exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"x\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> does NOT exist\")\n              .withLongOpt(\"not-exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"X\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is running in cloud mode.  Also fails if Solr not running.  URL should be for root Solr path.\")\n              .withLongOpt(\"cloud\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"c\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is not running in cloud mode.  Also fails if Solr not running.  URL should be for root Solr path.\")\n              .withLongOpt(\"not-cloud\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"C\"),\n          OptionBuilder\n              .withDescription(\"Exception message to be used in place of the default error message\")\n              .withLongOpt(\"message\")\n              .hasArg(true)\n              .withArgName(\"message\")\n              .create(\"m\"),\n          OptionBuilder\n              .withDescription(\"Timeout in ms for commands supporting a timeout\")\n              .withLongOpt(\"timeout\")\n              .hasArg(true)\n              .withType(Long.class)\n              .withArgName(\"ms\")\n              .create(\"t\"),\n          OptionBuilder\n              .withDescription(\"Return an exit code instead of printing error message on assert fail.\")\n              .withLongOpt(\"exitcode\")\n              .create(\"e\")\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee8fbffa595c312bc0437f2c9bb6376a29c1b427","date":1589412657,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#getOptions().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AssertTool#getOptions().mjava","sourceNew":"    public Option[] getOptions() {\n      return new Option[] {\n          Option.builder(\"R\")\n              .desc(\"Asserts that we are NOT the root user\")\n              .longOpt(\"not-root\")\n              .build(),\n          Option.builder(\"r\")\n              .desc(\"Asserts that we are the root user\")\n              .longOpt(\"root\")\n              .build(),\n          Option.builder(\"S\")\n              .desc(\"Asserts that Solr is NOT running on a certain URL. Default timeout is 1000ms\")\n              .longOpt(\"not-started\")\n              .hasArg(true)\n              .argName(\"url\")\n              .build(),\n          Option.builder(\"s\")\n              .desc(\"Asserts that Solr is running on a certain URL. Default timeout is 1000ms\")\n              .longOpt(\"started\")\n              .hasArg(true)\n              .argName(\"url\")\n              .build(),\n          Option.builder(\"u\")\n              .desc(\"Asserts that we run as same user that owns <directory>\")\n              .longOpt(\"same-user\")\n              .hasArg(true)\n              .argName(\"directory\")\n              .build(),\n          Option.builder(\"x\")\n              .desc(\"Asserts that directory <directory> exists\")\n              .longOpt(\"exists\")\n              .hasArg(true)\n              .argName(\"directory\")\n              .build(),\n          Option.builder(\"X\")\n              .desc(\"Asserts that directory <directory> does NOT exist\")\n              .longOpt(\"not-exists\")\n              .hasArg(true)\n              .argName(\"directory\")\n              .build(),\n          Option.builder(\"c\")\n              .desc(\"Asserts that Solr is running in cloud mode.  Also fails if Solr not running.  URL should be for root Solr path.\")\n              .longOpt(\"cloud\")\n              .hasArg(true)\n              .argName(\"url\")\n              .build(),\n          Option.builder(\"C\")\n              .desc(\"Asserts that Solr is not running in cloud mode.  Also fails if Solr not running.  URL should be for root Solr path.\")\n              .longOpt(\"not-cloud\")\n              .hasArg(true)\n              .argName(\"url\")\n              .build(),\n          Option.builder(\"m\")\n              .desc(\"Exception message to be used in place of the default error message\")\n              .longOpt(\"message\")\n              .hasArg(true)\n              .argName(\"message\")\n              .build(),\n          Option.builder(\"t\")\n              .desc(\"Timeout in ms for commands supporting a timeout\")\n              .longOpt(\"timeout\")\n              .hasArg(true)\n              .type(Long.class)\n              .argName(\"ms\")\n              .build(),\n          Option.builder(\"e\")\n              .desc(\"Return an exit code instead of printing error message on assert fail.\")\n              .longOpt(\"exitcode\")\n              .build()\n      };\n    }\n\n","sourceOld":"    @SuppressWarnings(\"static-access\")\n    public Option[] getOptions() {\n      return new Option[] {\n          OptionBuilder\n              .withDescription(\"Asserts that we are NOT the root user\")\n              .withLongOpt(\"not-root\")\n              .create(\"R\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we are the root user\")\n              .withLongOpt(\"root\")\n              .create(\"r\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is NOT running on a certain URL. Default timeout is 1000ms\")\n              .withLongOpt(\"not-started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"S\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is running on a certain URL. Default timeout is 1000ms\")\n              .withLongOpt(\"started\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"s\"),\n          OptionBuilder\n              .withDescription(\"Asserts that we run as same user that owns <directory>\")\n              .withLongOpt(\"same-user\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"u\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> exists\")\n              .withLongOpt(\"exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"x\"),\n          OptionBuilder\n              .withDescription(\"Asserts that directory <directory> does NOT exist\")\n              .withLongOpt(\"not-exists\")\n              .hasArg(true)\n              .withArgName(\"directory\")\n              .create(\"X\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is running in cloud mode.  Also fails if Solr not running.  URL should be for root Solr path.\")\n              .withLongOpt(\"cloud\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"c\"),\n          OptionBuilder\n              .withDescription(\"Asserts that Solr is not running in cloud mode.  Also fails if Solr not running.  URL should be for root Solr path.\")\n              .withLongOpt(\"not-cloud\")\n              .hasArg(true)\n              .withArgName(\"url\")\n              .create(\"C\"),\n          OptionBuilder\n              .withDescription(\"Exception message to be used in place of the default error message\")\n              .withLongOpt(\"message\")\n              .hasArg(true)\n              .withArgName(\"message\")\n              .create(\"m\"),\n          OptionBuilder\n              .withDescription(\"Timeout in ms for commands supporting a timeout\")\n              .withLongOpt(\"timeout\")\n              .hasArg(true)\n              .withType(Long.class)\n              .withArgName(\"ms\")\n              .create(\"t\"),\n          OptionBuilder\n              .withDescription(\"Return an exit code instead of printing error message on assert fail.\")\n              .withLongOpt(\"exitcode\")\n              .create(\"e\")\n      };\n    }\n\n","bugFix":["8677448a186f4abd32218787f7ae73ad38f575cf","a171ed3ff25e158a76780310dbb91c67f6801238","9b95105f40584c3ef98e6a1ab1b55ad47d67f136","c142bc095756829ecf08d95cbdc716a5a8fb9716"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","7e24ef15e7e97c77f0829a62180966fccd2e94b5"],"c142bc095756829ecf08d95cbdc716a5a8fb9716":["8677448a186f4abd32218787f7ae73ad38f575cf"],"7e24ef15e7e97c77f0829a62180966fccd2e94b5":["8677448a186f4abd32218787f7ae73ad38f575cf","c142bc095756829ecf08d95cbdc716a5a8fb9716"],"a171ed3ff25e158a76780310dbb91c67f6801238":["7e24ef15e7e97c77f0829a62180966fccd2e94b5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9b95105f40584c3ef98e6a1ab1b55ad47d67f136"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["a171ed3ff25e158a76780310dbb91c67f6801238"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a171ed3ff25e158a76780310dbb91c67f6801238","b79a5db147a1c6f95d1625ddbc3561ef56955225"],"8677448a186f4abd32218787f7ae73ad38f575cf":["9b95105f40584c3ef98e6a1ab1b55ad47d67f136"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8677448a186f4abd32218787f7ae73ad38f575cf"],"ee8fbffa595c312bc0437f2c9bb6376a29c1b427":["b79a5db147a1c6f95d1625ddbc3561ef56955225"],"9b95105f40584c3ef98e6a1ab1b55ad47d67f136":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ee8fbffa595c312bc0437f2c9bb6376a29c1b427"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a171ed3ff25e158a76780310dbb91c67f6801238","b79a5db147a1c6f95d1625ddbc3561ef56955225"]},"commit2Childs":{"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":[],"c142bc095756829ecf08d95cbdc716a5a8fb9716":["7e24ef15e7e97c77f0829a62180966fccd2e94b5"],"7e24ef15e7e97c77f0829a62180966fccd2e94b5":["59dce44d6a0b58c171de1d47ad8c0a75831f94fd","a171ed3ff25e158a76780310dbb91c67f6801238"],"a171ed3ff25e158a76780310dbb91c67f6801238":["b79a5db147a1c6f95d1625ddbc3561ef56955225","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","ee8fbffa595c312bc0437f2c9bb6376a29c1b427","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["59dce44d6a0b58c171de1d47ad8c0a75831f94fd"],"8677448a186f4abd32218787f7ae73ad38f575cf":["c142bc095756829ecf08d95cbdc716a5a8fb9716","7e24ef15e7e97c77f0829a62180966fccd2e94b5","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","9b95105f40584c3ef98e6a1ab1b55ad47d67f136"],"ee8fbffa595c312bc0437f2c9bb6376a29c1b427":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9b95105f40584c3ef98e6a1ab1b55ad47d67f136":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8677448a186f4abd32218787f7ae73ad38f575cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["59dce44d6a0b58c171de1d47ad8c0a75831f94fd","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}