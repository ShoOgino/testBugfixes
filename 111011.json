{"path":"lucene/core/src/java/org/apache/lucene/search/PhraseWeight#matches(LeafReaderContext,int).mjava","commits":[{"id":"3b11b9d5eaf9707760ca5151530830a825197023","date":1525941319,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseWeight#matches(LeafReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Matches matches(LeafReaderContext context, int doc) throws IOException {\n    return Matches.forField(field, () -> {\n      PhraseMatcher matcher = getPhraseMatcher(context, true);\n      if (matcher == null || matcher.approximation.advance(doc) != doc) {\n        return null;\n      }\n      matcher.reset();\n      if (matcher.nextMatch() == false) {\n        return null;\n      }\n      return new MatchesIterator() {\n        boolean started = false;\n        @Override\n        public boolean next() throws IOException {\n          if (started == false) {\n            return started = true;\n          }\n          return matcher.nextMatch();\n        }\n\n        @Override\n        public int startPosition() {\n          return matcher.startPosition();\n        }\n\n        @Override\n        public int endPosition() {\n          return matcher.endPosition();\n        }\n\n        @Override\n        public int startOffset() throws IOException {\n          return matcher.startOffset();\n        }\n\n        @Override\n        public int endOffset() throws IOException {\n          return matcher.endOffset();\n        }\n      };\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"165c3432cb3c4fcfc8e859af24323bbbd12084af","date":1532292166,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseWeight#matches(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseWeight#matches(LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public Matches matches(LeafReaderContext context, int doc) throws IOException {\n    return Matches.forField(field, () -> {\n      PhraseMatcher matcher = getPhraseMatcher(context, true);\n      if (matcher == null || matcher.approximation.advance(doc) != doc) {\n        return null;\n      }\n      matcher.reset();\n      if (matcher.nextMatch() == false) {\n        return null;\n      }\n      return new MatchesIterator() {\n        boolean started = false;\n        @Override\n        public boolean next() throws IOException {\n          if (started == false) {\n            return started = true;\n          }\n          return matcher.nextMatch();\n        }\n\n        @Override\n        public int startPosition() {\n          return matcher.startPosition();\n        }\n\n        @Override\n        public int endPosition() {\n          return matcher.endPosition();\n        }\n\n        @Override\n        public int startOffset() throws IOException {\n          return matcher.startOffset();\n        }\n\n        @Override\n        public int endOffset() throws IOException {\n          return matcher.endOffset();\n        }\n\n        @Override\n        public MatchesIterator getSubMatches() throws IOException {\n          return matcher.getSubMatches();\n        }\n\n        @Override\n        public Object label() {\n          return matcher;\n        }\n      };\n    });\n  }\n\n","sourceOld":"  @Override\n  public Matches matches(LeafReaderContext context, int doc) throws IOException {\n    return Matches.forField(field, () -> {\n      PhraseMatcher matcher = getPhraseMatcher(context, true);\n      if (matcher == null || matcher.approximation.advance(doc) != doc) {\n        return null;\n      }\n      matcher.reset();\n      if (matcher.nextMatch() == false) {\n        return null;\n      }\n      return new MatchesIterator() {\n        boolean started = false;\n        @Override\n        public boolean next() throws IOException {\n          if (started == false) {\n            return started = true;\n          }\n          return matcher.nextMatch();\n        }\n\n        @Override\n        public int startPosition() {\n          return matcher.startPosition();\n        }\n\n        @Override\n        public int endPosition() {\n          return matcher.endPosition();\n        }\n\n        @Override\n        public int startOffset() throws IOException {\n          return matcher.startOffset();\n        }\n\n        @Override\n        public int endOffset() throws IOException {\n          return matcher.endOffset();\n        }\n      };\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62ba8124694976baa3b03705351de238ec5d4352","date":1532295406,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseWeight#matches(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseWeight#matches(LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public Matches matches(LeafReaderContext context, int doc) throws IOException {\n    return Matches.forField(field, () -> {\n      PhraseMatcher matcher = getPhraseMatcher(context, true);\n      if (matcher == null || matcher.approximation.advance(doc) != doc) {\n        return null;\n      }\n      matcher.reset();\n      if (matcher.nextMatch() == false) {\n        return null;\n      }\n      return new MatchesIterator() {\n        boolean started = false;\n        @Override\n        public boolean next() throws IOException {\n          if (started == false) {\n            return started = true;\n          }\n          return matcher.nextMatch();\n        }\n\n        @Override\n        public int startPosition() {\n          return matcher.startPosition();\n        }\n\n        @Override\n        public int endPosition() {\n          return matcher.endPosition();\n        }\n\n        @Override\n        public int startOffset() throws IOException {\n          return matcher.startOffset();\n        }\n\n        @Override\n        public int endOffset() throws IOException {\n          return matcher.endOffset();\n        }\n      };\n    });\n  }\n\n","sourceOld":"  @Override\n  public Matches matches(LeafReaderContext context, int doc) throws IOException {\n    return Matches.forField(field, () -> {\n      PhraseMatcher matcher = getPhraseMatcher(context, true);\n      if (matcher == null || matcher.approximation.advance(doc) != doc) {\n        return null;\n      }\n      matcher.reset();\n      if (matcher.nextMatch() == false) {\n        return null;\n      }\n      return new MatchesIterator() {\n        boolean started = false;\n        @Override\n        public boolean next() throws IOException {\n          if (started == false) {\n            return started = true;\n          }\n          return matcher.nextMatch();\n        }\n\n        @Override\n        public int startPosition() {\n          return matcher.startPosition();\n        }\n\n        @Override\n        public int endPosition() {\n          return matcher.endPosition();\n        }\n\n        @Override\n        public int startOffset() throws IOException {\n          return matcher.startOffset();\n        }\n\n        @Override\n        public int endOffset() throws IOException {\n          return matcher.endOffset();\n        }\n\n        @Override\n        public MatchesIterator getSubMatches() throws IOException {\n          return matcher.getSubMatches();\n        }\n\n        @Override\n        public Object label() {\n          return matcher;\n        }\n      };\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41ebc07bccf12a902ca6a0077910d18ee38b695f","date":1532336521,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseWeight#matches(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseWeight#matches(LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public Matches matches(LeafReaderContext context, int doc) throws IOException {\n    return Matches.forField(field, () -> {\n      PhraseMatcher matcher = getPhraseMatcher(context, true);\n      if (matcher == null || matcher.approximation.advance(doc) != doc) {\n        return null;\n      }\n      matcher.reset();\n      if (matcher.nextMatch() == false) {\n        return null;\n      }\n      return new MatchesIterator() {\n        boolean started = false;\n        @Override\n        public boolean next() throws IOException {\n          if (started == false) {\n            return started = true;\n          }\n          return matcher.nextMatch();\n        }\n\n        @Override\n        public int startPosition() {\n          return matcher.startPosition();\n        }\n\n        @Override\n        public int endPosition() {\n          return matcher.endPosition();\n        }\n\n        @Override\n        public int startOffset() throws IOException {\n          return matcher.startOffset();\n        }\n\n        @Override\n        public int endOffset() throws IOException {\n          return matcher.endOffset();\n        }\n\n        @Override\n        public MatchesIterator getSubMatches() throws IOException {\n          return null;    // phrases are treated as leaves\n        }\n\n        @Override\n        public Query getQuery() {\n          return PhraseWeight.this.getQuery();\n        }\n      };\n    });\n  }\n\n","sourceOld":"  @Override\n  public Matches matches(LeafReaderContext context, int doc) throws IOException {\n    return Matches.forField(field, () -> {\n      PhraseMatcher matcher = getPhraseMatcher(context, true);\n      if (matcher == null || matcher.approximation.advance(doc) != doc) {\n        return null;\n      }\n      matcher.reset();\n      if (matcher.nextMatch() == false) {\n        return null;\n      }\n      return new MatchesIterator() {\n        boolean started = false;\n        @Override\n        public boolean next() throws IOException {\n          if (started == false) {\n            return started = true;\n          }\n          return matcher.nextMatch();\n        }\n\n        @Override\n        public int startPosition() {\n          return matcher.startPosition();\n        }\n\n        @Override\n        public int endPosition() {\n          return matcher.endPosition();\n        }\n\n        @Override\n        public int startOffset() throws IOException {\n          return matcher.startOffset();\n        }\n\n        @Override\n        public int endOffset() throws IOException {\n          return matcher.endOffset();\n        }\n      };\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2375622520a4e480775e3104a2f9a423536755b4","date":1536005521,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseWeight#matches(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseWeight#matches(LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public Matches matches(LeafReaderContext context, int doc) throws IOException {\n    return MatchesUtils.forField(field, () -> {\n      PhraseMatcher matcher = getPhraseMatcher(context, true);\n      if (matcher == null || matcher.approximation.advance(doc) != doc) {\n        return null;\n      }\n      matcher.reset();\n      if (matcher.nextMatch() == false) {\n        return null;\n      }\n      return new MatchesIterator() {\n        boolean started = false;\n        @Override\n        public boolean next() throws IOException {\n          if (started == false) {\n            return started = true;\n          }\n          return matcher.nextMatch();\n        }\n\n        @Override\n        public int startPosition() {\n          return matcher.startPosition();\n        }\n\n        @Override\n        public int endPosition() {\n          return matcher.endPosition();\n        }\n\n        @Override\n        public int startOffset() throws IOException {\n          return matcher.startOffset();\n        }\n\n        @Override\n        public int endOffset() throws IOException {\n          return matcher.endOffset();\n        }\n\n        @Override\n        public MatchesIterator getSubMatches() throws IOException {\n          return null;    // phrases are treated as leaves\n        }\n\n        @Override\n        public Query getQuery() {\n          return PhraseWeight.this.getQuery();\n        }\n      };\n    });\n  }\n\n","sourceOld":"  @Override\n  public Matches matches(LeafReaderContext context, int doc) throws IOException {\n    return Matches.forField(field, () -> {\n      PhraseMatcher matcher = getPhraseMatcher(context, true);\n      if (matcher == null || matcher.approximation.advance(doc) != doc) {\n        return null;\n      }\n      matcher.reset();\n      if (matcher.nextMatch() == false) {\n        return null;\n      }\n      return new MatchesIterator() {\n        boolean started = false;\n        @Override\n        public boolean next() throws IOException {\n          if (started == false) {\n            return started = true;\n          }\n          return matcher.nextMatch();\n        }\n\n        @Override\n        public int startPosition() {\n          return matcher.startPosition();\n        }\n\n        @Override\n        public int endPosition() {\n          return matcher.endPosition();\n        }\n\n        @Override\n        public int startOffset() throws IOException {\n          return matcher.startOffset();\n        }\n\n        @Override\n        public int endOffset() throws IOException {\n          return matcher.endOffset();\n        }\n\n        @Override\n        public MatchesIterator getSubMatches() throws IOException {\n          return null;    // phrases are treated as leaves\n        }\n\n        @Override\n        public Query getQuery() {\n          return PhraseWeight.this.getQuery();\n        }\n      };\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8dd25829321d66cd54ea7d40a4130e0d2a29bec","date":1562680889,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseWeight#matches(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseWeight#matches(LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public Matches matches(LeafReaderContext context, int doc) throws IOException {\n    return MatchesUtils.forField(field, () -> {\n      PhraseMatcher matcher = getPhraseMatcher(context, stats, true);\n      if (matcher == null || matcher.approximation().advance(doc) != doc) {\n        return null;\n      }\n      matcher.reset();\n      if (matcher.nextMatch() == false) {\n        return null;\n      }\n      return new MatchesIterator() {\n        boolean started = false;\n        @Override\n        public boolean next() throws IOException {\n          if (started == false) {\n            return started = true;\n          }\n          return matcher.nextMatch();\n        }\n\n        @Override\n        public int startPosition() {\n          return matcher.startPosition();\n        }\n\n        @Override\n        public int endPosition() {\n          return matcher.endPosition();\n        }\n\n        @Override\n        public int startOffset() throws IOException {\n          return matcher.startOffset();\n        }\n\n        @Override\n        public int endOffset() throws IOException {\n          return matcher.endOffset();\n        }\n\n        @Override\n        public MatchesIterator getSubMatches() throws IOException {\n          return null;    // phrases are treated as leaves\n        }\n\n        @Override\n        public Query getQuery() {\n          return PhraseWeight.this.getQuery();\n        }\n      };\n    });\n  }\n\n","sourceOld":"  @Override\n  public Matches matches(LeafReaderContext context, int doc) throws IOException {\n    return MatchesUtils.forField(field, () -> {\n      PhraseMatcher matcher = getPhraseMatcher(context, true);\n      if (matcher == null || matcher.approximation.advance(doc) != doc) {\n        return null;\n      }\n      matcher.reset();\n      if (matcher.nextMatch() == false) {\n        return null;\n      }\n      return new MatchesIterator() {\n        boolean started = false;\n        @Override\n        public boolean next() throws IOException {\n          if (started == false) {\n            return started = true;\n          }\n          return matcher.nextMatch();\n        }\n\n        @Override\n        public int startPosition() {\n          return matcher.startPosition();\n        }\n\n        @Override\n        public int endPosition() {\n          return matcher.endPosition();\n        }\n\n        @Override\n        public int startOffset() throws IOException {\n          return matcher.startOffset();\n        }\n\n        @Override\n        public int endOffset() throws IOException {\n          return matcher.endOffset();\n        }\n\n        @Override\n        public MatchesIterator getSubMatches() throws IOException {\n          return null;    // phrases are treated as leaves\n        }\n\n        @Override\n        public Query getQuery() {\n          return PhraseWeight.this.getQuery();\n        }\n      };\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b11b9d5eaf9707760ca5151530830a825197023":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8dd25829321d66cd54ea7d40a4130e0d2a29bec":["2375622520a4e480775e3104a2f9a423536755b4"],"165c3432cb3c4fcfc8e859af24323bbbd12084af":["3b11b9d5eaf9707760ca5151530830a825197023"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2375622520a4e480775e3104a2f9a423536755b4":["41ebc07bccf12a902ca6a0077910d18ee38b695f"],"62ba8124694976baa3b03705351de238ec5d4352":["165c3432cb3c4fcfc8e859af24323bbbd12084af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8dd25829321d66cd54ea7d40a4130e0d2a29bec"],"41ebc07bccf12a902ca6a0077910d18ee38b695f":["62ba8124694976baa3b03705351de238ec5d4352"]},"commit2Childs":{"3b11b9d5eaf9707760ca5151530830a825197023":["165c3432cb3c4fcfc8e859af24323bbbd12084af"],"f8dd25829321d66cd54ea7d40a4130e0d2a29bec":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b11b9d5eaf9707760ca5151530830a825197023"],"165c3432cb3c4fcfc8e859af24323bbbd12084af":["62ba8124694976baa3b03705351de238ec5d4352"],"2375622520a4e480775e3104a2f9a423536755b4":["f8dd25829321d66cd54ea7d40a4130e0d2a29bec"],"62ba8124694976baa3b03705351de238ec5d4352":["41ebc07bccf12a902ca6a0077910d18ee38b695f"],"41ebc07bccf12a902ca6a0077910d18ee38b695f":["2375622520a4e480775e3104a2f9a423536755b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}