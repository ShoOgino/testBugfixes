{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#LatLonPoint(String,double,double).mjava","commits":[{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#LatLonPoint(String,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/DimensionalLatLonField#DimensionalLatLonField(String,double,double).mjava","sourceNew":"  /** \n   * Creates a new LatLonPoint with the specified lat and lon\n   * @param name field name\n   * @param lat double latitude\n   * @param lon double longitude\n   * @throws IllegalArgumentException if the field name is null or lat or lon are out of bounds\n   */\n  public LatLonPoint(String name, double lat, double lon) {\n    super(name, TYPE);\n    if (GeoUtils.isValidLat(lat) == false) {\n      throw new IllegalArgumentException(\"invalid lat (\" + lat + \"): must be -90 to 90\");\n    }\n    if (GeoUtils.isValidLon(lon) == false) {\n      throw new IllegalArgumentException(\"invalid lon (\" + lon + \"): must be -180 to 180\");\n    }\n    byte[] bytes = new byte[8];\n    NumericUtils.intToBytes(encodeLat(lat), bytes, 0);\n    NumericUtils.intToBytes(encodeLon(lon), bytes, 1);\n    fieldsData = new BytesRef(bytes);\n  }\n\n","sourceOld":"  /** \n   * Creates a new DimensionalLatLonField with the specified lat and lon\n   * @param name field name\n   * @param lat double latitude\n   * @param lon double longitude\n   * @throws IllegalArgumentException if the field name is null or lat or lon are out of bounds\n   */\n  public DimensionalLatLonField(String name, double lat, double lon) {\n    super(name, TYPE);\n    if (GeoUtils.isValidLat(lat) == false) {\n      throw new IllegalArgumentException(\"invalid lat (\" + lat + \"): must be -90 to 90\");\n    }\n    if (GeoUtils.isValidLon(lon) == false) {\n      throw new IllegalArgumentException(\"invalid lon (\" + lon + \"): must be -180 to 180\");\n    }\n    byte[] bytes = new byte[8];\n    NumericUtils.intToBytes(encodeLat(lat), bytes, 0);\n    NumericUtils.intToBytes(encodeLon(lon), bytes, 1);\n    fieldsData = new BytesRef(bytes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f226a8b088dd9c8f6ab287a77237c4aa00a238e5","date":1456187572,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#LatLonPoint(String,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#LatLonPoint(String,double,double).mjava","sourceNew":"  /** \n   * Creates a new LatLonPoint with the specified lat and lon\n   * @param name field name\n   * @param lat double latitude\n   * @param lon double longitude\n   * @throws IllegalArgumentException if the field name is null or lat or lon are out of bounds\n   */\n  public LatLonPoint(String name, double lat, double lon) {\n    super(name, TYPE);\n    if (GeoUtils.isValidLat(lat) == false) {\n      throw new IllegalArgumentException(\"invalid lat (\" + lat + \"): must be -90 to 90\");\n    }\n    if (GeoUtils.isValidLon(lon) == false) {\n      throw new IllegalArgumentException(\"invalid lon (\" + lon + \"): must be -180 to 180\");\n    }\n    byte[] bytes = new byte[8];\n    NumericUtils.intToBytes(encodeLat(lat), bytes, 0);\n    NumericUtils.intToBytes(encodeLon(lon), bytes, Integer.BYTES);\n    fieldsData = new BytesRef(bytes);\n  }\n\n","sourceOld":"  /** \n   * Creates a new LatLonPoint with the specified lat and lon\n   * @param name field name\n   * @param lat double latitude\n   * @param lon double longitude\n   * @throws IllegalArgumentException if the field name is null or lat or lon are out of bounds\n   */\n  public LatLonPoint(String name, double lat, double lon) {\n    super(name, TYPE);\n    if (GeoUtils.isValidLat(lat) == false) {\n      throw new IllegalArgumentException(\"invalid lat (\" + lat + \"): must be -90 to 90\");\n    }\n    if (GeoUtils.isValidLon(lon) == false) {\n      throw new IllegalArgumentException(\"invalid lon (\" + lon + \"): must be -180 to 180\");\n    }\n    byte[] bytes = new byte[8];\n    NumericUtils.intToBytes(encodeLat(lat), bytes, 0);\n    NumericUtils.intToBytes(encodeLon(lon), bytes, 1);\n    fieldsData = new BytesRef(bytes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#LatLonPoint(String,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#LatLonPoint(String,double,double).mjava","sourceNew":"  /** \n   * Creates a new LatLonPoint with the specified lat and lon\n   * @param name field name\n   * @param lat double latitude\n   * @param lon double longitude\n   * @throws IllegalArgumentException if the field name is null or lat or lon are out of bounds\n   */\n  public LatLonPoint(String name, double lat, double lon) {\n    super(name, TYPE);\n    if (GeoUtils.isValidLat(lat) == false) {\n      throw new IllegalArgumentException(\"invalid lat (\" + lat + \"): must be -90 to 90\");\n    }\n    if (GeoUtils.isValidLon(lon) == false) {\n      throw new IllegalArgumentException(\"invalid lon (\" + lon + \"): must be -180 to 180\");\n    }\n    byte[] bytes = new byte[8];\n    NumericUtils.intToBytes(encodeLat(lat), bytes, 0);\n    NumericUtils.intToBytes(encodeLon(lon), bytes, Integer.BYTES);\n    fieldsData = new BytesRef(bytes);\n  }\n\n","sourceOld":"  /** \n   * Creates a new LatLonPoint with the specified lat and lon\n   * @param name field name\n   * @param lat double latitude\n   * @param lon double longitude\n   * @throws IllegalArgumentException if the field name is null or lat or lon are out of bounds\n   */\n  public LatLonPoint(String name, double lat, double lon) {\n    super(name, TYPE);\n    if (GeoUtils.isValidLat(lat) == false) {\n      throw new IllegalArgumentException(\"invalid lat (\" + lat + \"): must be -90 to 90\");\n    }\n    if (GeoUtils.isValidLon(lon) == false) {\n      throw new IllegalArgumentException(\"invalid lon (\" + lon + \"): must be -180 to 180\");\n    }\n    byte[] bytes = new byte[8];\n    NumericUtils.intToBytes(encodeLat(lat), bytes, 0);\n    NumericUtils.intToBytes(encodeLon(lon), bytes, 1);\n    fieldsData = new BytesRef(bytes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94ee361295fb38310ac4d53cb4773d1622423d68","date":1456833885,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#LatLonPoint(String,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#LatLonPoint(String,double,double).mjava","sourceNew":"  /** \n   * Creates a new LatLonPoint with the specified latitude and longitude\n   * @param name field name\n   * @param latitude latitude value: must be within standard +/-90 coordinate bounds.\n   * @param longitude longitude value: must be within standard +/-180 coordinate bounds.\n   * @throws IllegalArgumentException if the field name is null or latitude or longitude are out of bounds\n   */\n  public LatLonPoint(String name, double latitude, double longitude) {\n    super(name, TYPE);\n    setLocationValue(latitude, longitude);\n  }\n\n","sourceOld":"  /** \n   * Creates a new LatLonPoint with the specified lat and lon\n   * @param name field name\n   * @param lat double latitude\n   * @param lon double longitude\n   * @throws IllegalArgumentException if the field name is null or lat or lon are out of bounds\n   */\n  public LatLonPoint(String name, double lat, double lon) {\n    super(name, TYPE);\n    if (GeoUtils.isValidLat(lat) == false) {\n      throw new IllegalArgumentException(\"invalid lat (\" + lat + \"): must be -90 to 90\");\n    }\n    if (GeoUtils.isValidLon(lon) == false) {\n      throw new IllegalArgumentException(\"invalid lon (\" + lon + \"): must be -180 to 180\");\n    }\n    byte[] bytes = new byte[8];\n    NumericUtils.intToBytes(encodeLat(lat), bytes, 0);\n    NumericUtils.intToBytes(encodeLon(lon), bytes, Integer.BYTES);\n    fieldsData = new BytesRef(bytes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#LatLonPoint(String,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#LatLonPoint(String,double,double).mjava","sourceNew":"  /** \n   * Creates a new LatLonPoint with the specified latitude and longitude\n   * @param name field name\n   * @param latitude latitude value: must be within standard +/-90 coordinate bounds.\n   * @param longitude longitude value: must be within standard +/-180 coordinate bounds.\n   * @throws IllegalArgumentException if the field name is null or latitude or longitude are out of bounds\n   */\n  public LatLonPoint(String name, double latitude, double longitude) {\n    super(name, TYPE);\n    setLocationValue(latitude, longitude);\n  }\n\n","sourceOld":"  /** \n   * Creates a new LatLonPoint with the specified lat and lon\n   * @param name field name\n   * @param lat double latitude\n   * @param lon double longitude\n   * @throws IllegalArgumentException if the field name is null or lat or lon are out of bounds\n   */\n  public LatLonPoint(String name, double lat, double lon) {\n    super(name, TYPE);\n    if (GeoUtils.isValidLat(lat) == false) {\n      throw new IllegalArgumentException(\"invalid lat (\" + lat + \"): must be -90 to 90\");\n    }\n    if (GeoUtils.isValidLon(lon) == false) {\n      throw new IllegalArgumentException(\"invalid lon (\" + lon + \"): must be -180 to 180\");\n    }\n    byte[] bytes = new byte[8];\n    NumericUtils.intToBytes(encodeLat(lat), bytes, 0);\n    NumericUtils.intToBytes(encodeLon(lon), bytes, Integer.BYTES);\n    fieldsData = new BytesRef(bytes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88b0212386fe531136816706dc37dc49b9dbf7dc","date":1532560226,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonPoint#LatLonPoint(String,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#LatLonPoint(String,double,double).mjava","sourceNew":"  /** \n   * Creates a new LatLonPoint with the specified latitude and longitude\n   * @param name field name\n   * @param latitude latitude value: must be within standard +/-90 coordinate bounds.\n   * @param longitude longitude value: must be within standard +/-180 coordinate bounds.\n   * @throws IllegalArgumentException if the field name is null or latitude or longitude are out of bounds\n   */\n  public LatLonPoint(String name, double latitude, double longitude) {\n    super(name, TYPE);\n    setLocationValue(latitude, longitude);\n  }\n\n","sourceOld":"  /** \n   * Creates a new LatLonPoint with the specified latitude and longitude\n   * @param name field name\n   * @param latitude latitude value: must be within standard +/-90 coordinate bounds.\n   * @param longitude longitude value: must be within standard +/-180 coordinate bounds.\n   * @throws IllegalArgumentException if the field name is null or latitude or longitude are out of bounds\n   */\n  public LatLonPoint(String name, double latitude, double longitude) {\n    super(name, TYPE);\n    setLocationValue(latitude, longitude);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"88b0212386fe531136816706dc37dc49b9dbf7dc":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"94ee361295fb38310ac4d53cb4773d1622423d68":["419a8f52c6635419beb951255cacbbb281044c57"],"419a8f52c6635419beb951255cacbbb281044c57":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["419a8f52c6635419beb951255cacbbb281044c57","94ee361295fb38310ac4d53cb4773d1622423d68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["88b0212386fe531136816706dc37dc49b9dbf7dc"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["419a8f52c6635419beb951255cacbbb281044c57","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"88b0212386fe531136816706dc37dc49b9dbf7dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"94ee361295fb38310ac4d53cb4773d1622423d68":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"419a8f52c6635419beb951255cacbbb281044c57":["94ee361295fb38310ac4d53cb4773d1622423d68","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["419a8f52c6635419beb951255cacbbb281044c57"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["88b0212386fe531136816706dc37dc49b9dbf7dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}