{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario#run().mjava","commits":[{"id":"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d","date":1571856490,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario#run().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Run the scenario.\n   */\n  public void run() throws Exception {\n    for (int i = 0; i < ops.size(); i++) {\n      if (abortScenario) {\n        log.info(\"-- abortScenario requested, aborting after \" + i + \" ops.\");\n        return;\n      }\n      SimOp op = ops.get(i);\n      log.info((i + 1) + \".\\t\" + op.getClass().getSimpleName() + \"\\t\" + op.initParams.toString());\n      // substitute parameters based on the current context\n      if (cluster != null && cluster.getLiveNodesSet().size() > 0) {\n        context.put(LIVE_NODES_CTX_PROP, new ArrayList<>(cluster.getLiveNodesSet().get()));\n        context.put(RANDOM_NODE_CTX_PROP, cluster.getSimClusterStateProvider().simGetRandomNode());\n        context.put(COLLECTIONS_CTX_PROP, cluster.getSimClusterStateProvider().simListCollections());\n        context.put(OVERSEER_LEADER_CTX_PROP, cluster.getSimClusterStateProvider().simGetOverseerLeader());\n      } else {\n        context.remove(LIVE_NODES_CTX_PROP);\n        context.remove(COLLECTIONS_CTX_PROP);\n        context.remove(RANDOM_NODE_CTX_PROP);\n        context.remove(SUGGESTIONS_CTX_PROP);\n        context.remove(OVERSEER_LEADER_CTX_PROP);\n      }\n      op.prepareCurrentParams(this);\n      log.info(\"\\t\\t\" + op.getClass().getSimpleName() + \"\\t\" + op.params.toString());\n      op.execute(this);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e35f2dde06b35aa9904949a3a93fabd090371077","date":1587906921,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario#run().mjava","sourceNew":"  /**\n   * Run the scenario.\n   */\n  public void run() throws Exception {\n    for (int i = 0; i < ops.size(); i++) {\n      if (abortScenario) {\n        log.info(\"-- abortScenario requested, aborting after {} ops.\", i);\n        return;\n      }\n      SimOp op = ops.get(i);\n      if (log.isInfoEnabled()) {\n        log.info(\"{}.\\t{}\\t{}\", i + 1, op.getClass().getSimpleName(), op.initParams); // logOk\n      }\n      // substitute parameters based on the current context\n      if (cluster != null && cluster.getLiveNodesSet().size() > 0) {\n        context.put(LIVE_NODES_CTX_PROP, new ArrayList<>(cluster.getLiveNodesSet().get()));\n        context.put(RANDOM_NODE_CTX_PROP, cluster.getSimClusterStateProvider().simGetRandomNode());\n        context.put(COLLECTIONS_CTX_PROP, cluster.getSimClusterStateProvider().simListCollections());\n        context.put(OVERSEER_LEADER_CTX_PROP, cluster.getSimClusterStateProvider().simGetOverseerLeader());\n      } else {\n        context.remove(LIVE_NODES_CTX_PROP);\n        context.remove(COLLECTIONS_CTX_PROP);\n        context.remove(RANDOM_NODE_CTX_PROP);\n        context.remove(SUGGESTIONS_CTX_PROP);\n        context.remove(OVERSEER_LEADER_CTX_PROP);\n      }\n      op.prepareCurrentParams(this);\n      if (log.isInfoEnabled()) {\n        log.info(\"\\t\\t{}\\t{}\", op.getClass().getSimpleName(), op.params);\n      }\n      op.execute(this);\n    }\n  }\n\n","sourceOld":"  /**\n   * Run the scenario.\n   */\n  public void run() throws Exception {\n    for (int i = 0; i < ops.size(); i++) {\n      if (abortScenario) {\n        log.info(\"-- abortScenario requested, aborting after \" + i + \" ops.\");\n        return;\n      }\n      SimOp op = ops.get(i);\n      log.info((i + 1) + \".\\t\" + op.getClass().getSimpleName() + \"\\t\" + op.initParams.toString());\n      // substitute parameters based on the current context\n      if (cluster != null && cluster.getLiveNodesSet().size() > 0) {\n        context.put(LIVE_NODES_CTX_PROP, new ArrayList<>(cluster.getLiveNodesSet().get()));\n        context.put(RANDOM_NODE_CTX_PROP, cluster.getSimClusterStateProvider().simGetRandomNode());\n        context.put(COLLECTIONS_CTX_PROP, cluster.getSimClusterStateProvider().simListCollections());\n        context.put(OVERSEER_LEADER_CTX_PROP, cluster.getSimClusterStateProvider().simGetOverseerLeader());\n      } else {\n        context.remove(LIVE_NODES_CTX_PROP);\n        context.remove(COLLECTIONS_CTX_PROP);\n        context.remove(RANDOM_NODE_CTX_PROP);\n        context.remove(SUGGESTIONS_CTX_PROP);\n        context.remove(OVERSEER_LEADER_CTX_PROP);\n      }\n      op.prepareCurrentParams(this);\n      log.info(\"\\t\\t\" + op.getClass().getSimpleName() + \"\\t\" + op.params.toString());\n      op.execute(this);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario#run().mjava","sourceNew":null,"sourceOld":"  /**\n   * Run the scenario.\n   */\n  public void run() throws Exception {\n    for (int i = 0; i < ops.size(); i++) {\n      if (abortScenario) {\n        log.info(\"-- abortScenario requested, aborting after {} ops.\", i);\n        return;\n      }\n      SimOp op = ops.get(i);\n      if (log.isInfoEnabled()) {\n        log.info(\"{}.\\t{}\\t{}\", i + 1, op.getClass().getSimpleName(), op.initParams); // logOk\n      }\n      // substitute parameters based on the current context\n      if (cluster != null && cluster.getLiveNodesSet().size() > 0) {\n        context.put(LIVE_NODES_CTX_PROP, new ArrayList<>(cluster.getLiveNodesSet().get()));\n        context.put(RANDOM_NODE_CTX_PROP, cluster.getSimClusterStateProvider().simGetRandomNode());\n        context.put(COLLECTIONS_CTX_PROP, cluster.getSimClusterStateProvider().simListCollections());\n        context.put(OVERSEER_LEADER_CTX_PROP, cluster.getSimClusterStateProvider().simGetOverseerLeader());\n      } else {\n        context.remove(LIVE_NODES_CTX_PROP);\n        context.remove(COLLECTIONS_CTX_PROP);\n        context.remove(RANDOM_NODE_CTX_PROP);\n        context.remove(SUGGESTIONS_CTX_PROP);\n        context.remove(OVERSEER_LEADER_CTX_PROP);\n      }\n      op.prepareCurrentParams(this);\n      if (log.isInfoEnabled()) {\n        log.info(\"\\t\\t{}\\t{}\", op.getClass().getSimpleName(), op.params);\n      }\n      op.execute(this);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["e35f2dde06b35aa9904949a3a93fabd090371077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e35f2dde06b35aa9904949a3a93fabd090371077":["a7aeb53916301ea6a5fedff4fdc9617b257cbc7d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a7aeb53916301ea6a5fedff4fdc9617b257cbc7d"],"e35f2dde06b35aa9904949a3a93fabd090371077":["3f504512a03d978990cbff30db0522b354e846db"],"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d":["e35f2dde06b35aa9904949a3a93fabd090371077"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}