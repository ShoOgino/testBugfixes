{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#checkForBackupSuccess(HttpSolrServer,File).mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#checkForBackupSuccess(HttpSolrServer,File).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#checkForBackupSuccess(HttpSolrServer).mjava","sourceNew":"  private void checkForBackupSuccess(final HttpSolrServer client, File location)\n      throws InterruptedException, IOException {\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      final Pattern p = Pattern\n          .compile(\"<str name=\\\"snapshotCompletedAt\\\">(.*?)</str>\");\n      \n      CheckStatus() {}\n      \n      @Override\n      public void run() {\n        String masterUrl = client.getBaseURL() + \"/replication?command=\"\n            + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream, \"UTF-8\");\n          if (response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            Matcher m = p.matcher(response);\n            if (!m.find()) {\n              fail(\"could not find the completed timestamp in response.\");\n            }\n            \n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          e.printStackTrace();\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n        \n      };\n    }\n    \n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while (true) {\n      checkStatus.run();\n      if (checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if (checkStatus.success) {\n        break;\n      }\n      Thread.sleep(500);\n      if (waitCnt == 90) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    File[] files = location.listFiles(new FilenameFilter() {\n      \n      @Override\n      public boolean accept(File dir, String name) {\n        if (name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(Arrays.asList(files).toString(), 1, files.length);\n    File snapDir = files[0];\n    \n    AbstractSolrTestCase.recurseDelete(snapDir); // clean up the snap dir\n  }\n\n","sourceOld":"  private void checkForBackupSuccess(final HttpSolrServer client)\n      throws InterruptedException, IOException {\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      final Pattern p = Pattern\n          .compile(\"<str name=\\\"snapshotCompletedAt\\\">(.*?)</str>\");\n      \n      CheckStatus() {}\n      \n      @Override\n      public void run() {\n        String masterUrl = client.getBaseURL() + \"/replication?command=\"\n            + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream, \"UTF-8\");\n          if (response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            Matcher m = p.matcher(response);\n            if (!m.find()) {\n              fail(\"could not find the completed timestamp in response.\");\n            }\n            \n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          e.printStackTrace();\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n        \n      };\n    }\n    ;\n    SolrCore core = ((SolrDispatchFilter) shardToJetty.get(SHARD2).get(0).jetty\n        .getDispatchFilter().getFilter()).getCores().getCore(\"collection1\");\n    String ddir;\n    try {\n      ddir = core.getDataDir(); \n    } finally {\n      core.close();\n    }\n    File dataDir = new File(ddir);\n    \n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while (true) {\n      checkStatus.run();\n      if (checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if (checkStatus.success) {\n        break;\n      }\n      Thread.sleep(200);\n      if (waitCnt == 20) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    File[] files = dataDir.listFiles(new FilenameFilter() {\n      \n      @Override\n      public boolean accept(File dir, String name) {\n        if (name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(Arrays.asList(files).toString(), 1, files.length);\n    File snapDir = files[0];\n    \n    AbstractSolrTestCase.recurseDelete(snapDir); // clean up the snap dir\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#checkForBackupSuccess(HttpSolrServer,File).mjava","pathOld":"/dev/null","sourceNew":"  private void checkForBackupSuccess(final HttpSolrServer client, File location)\n      throws InterruptedException, IOException {\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      final Pattern p = Pattern\n          .compile(\"<str name=\\\"snapshotCompletedAt\\\">(.*?)</str>\");\n      \n      CheckStatus() {}\n      \n      @Override\n      public void run() {\n        String masterUrl = client.getBaseURL() + \"/replication?command=\"\n            + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream, \"UTF-8\");\n          if (response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            Matcher m = p.matcher(response);\n            if (!m.find()) {\n              fail(\"could not find the completed timestamp in response.\");\n            }\n            \n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          e.printStackTrace();\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n        \n      };\n    }\n    \n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while (true) {\n      checkStatus.run();\n      if (checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if (checkStatus.success) {\n        break;\n      }\n      Thread.sleep(500);\n      if (waitCnt == 90) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    File[] files = location.listFiles(new FilenameFilter() {\n      \n      @Override\n      public boolean accept(File dir, String name) {\n        if (name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(Arrays.asList(files).toString(), 1, files.length);\n    File snapDir = files[0];\n    \n    AbstractSolrTestCase.recurseDelete(snapDir); // clean up the snap dir\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72","date":1391985588,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#checkForBackupSuccess(HttpSolrServer,File).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#checkForBackupSuccess(HttpSolrServer,File).mjava","sourceNew":"  private void checkForBackupSuccess(final HttpSolrServer client, File location)\n      throws InterruptedException, IOException {\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      final Pattern p = Pattern\n          .compile(\"<str name=\\\"snapshotCompletedAt\\\">(.*?)</str>\");\n      \n      CheckStatus() {}\n      \n      @Override\n      public void run() {\n        String masterUrl = client.getBaseURL() + \"/replication?command=\"\n            + ReplicationHandler.CMD_DETAILS;\n        \n        try {\n          response = client.getHttpClient().execute(new HttpGet(masterUrl), new BasicResponseHandler());\n          if (response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            Matcher m = p.matcher(response);\n            if (!m.find()) {\n              fail(\"could not find the completed timestamp in response.\");\n            }\n            \n            success = true;\n          }\n        } catch (Exception e) {\n          e.printStackTrace();\n          fail = e.getMessage();\n        }\n        \n      };\n    }\n    \n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while (true) {\n      checkStatus.run();\n      if (checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if (checkStatus.success) {\n        break;\n      }\n      Thread.sleep(500);\n      if (waitCnt == 90) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    File[] files = location.listFiles(new FilenameFilter() {\n      \n      @Override\n      public boolean accept(File dir, String name) {\n        if (name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(Arrays.asList(files).toString(), 1, files.length);\n    File snapDir = files[0];\n    \n    AbstractSolrTestCase.recurseDelete(snapDir); // clean up the snap dir\n  }\n\n","sourceOld":"  private void checkForBackupSuccess(final HttpSolrServer client, File location)\n      throws InterruptedException, IOException {\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      final Pattern p = Pattern\n          .compile(\"<str name=\\\"snapshotCompletedAt\\\">(.*?)</str>\");\n      \n      CheckStatus() {}\n      \n      @Override\n      public void run() {\n        String masterUrl = client.getBaseURL() + \"/replication?command=\"\n            + ReplicationHandler.CMD_DETAILS;\n        URL url;\n        InputStream stream = null;\n        try {\n          url = new URL(masterUrl);\n          stream = url.openStream();\n          response = IOUtils.toString(stream, \"UTF-8\");\n          if (response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            Matcher m = p.matcher(response);\n            if (!m.find()) {\n              fail(\"could not find the completed timestamp in response.\");\n            }\n            \n            success = true;\n          }\n          stream.close();\n        } catch (Exception e) {\n          e.printStackTrace();\n          fail = e.getMessage();\n        } finally {\n          IOUtils.closeQuietly(stream);\n        }\n        \n      };\n    }\n    \n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while (true) {\n      checkStatus.run();\n      if (checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if (checkStatus.success) {\n        break;\n      }\n      Thread.sleep(500);\n      if (waitCnt == 90) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    File[] files = location.listFiles(new FilenameFilter() {\n      \n      @Override\n      public boolean accept(File dir, String name) {\n        if (name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(Arrays.asList(files).toString(), 1, files.length);\n    File snapDir = files[0];\n    \n    AbstractSolrTestCase.recurseDelete(snapDir); // clean up the snap dir\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e85f88536da92df6654f2182f3a477355cc4aae","date":1401284092,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#checkForBackupSuccess(HttpSolrServer,File).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#checkForBackupSuccess(HttpSolrServer,File).mjava","sourceNew":"  private void checkForBackupSuccess(final HttpSolrServer client, File location)\n      throws InterruptedException, IOException {\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      final Pattern p = Pattern\n          .compile(\"<str name=\\\"snapshotCompletedAt\\\">(.*?)</str>\");\n      \n      CheckStatus() {}\n      \n      @Override\n      public void run() {\n        String masterUrl = client.getBaseURL() + \"/replication?command=\"\n            + ReplicationHandler.CMD_DETAILS;\n        \n        try {\n          response = client.getHttpClient().execute(new HttpGet(masterUrl), new BasicResponseHandler());\n          if (response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            Matcher m = p.matcher(response);\n            if (!m.find()) {\n              fail(\"could not find the completed timestamp in response.\");\n            }\n            \n            success = true;\n          }\n        } catch (Exception e) {\n          e.printStackTrace();\n          fail = e.getMessage();\n        }\n        \n      };\n    }\n    \n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while (true) {\n      checkStatus.run();\n      if (checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if (checkStatus.success) {\n        break;\n      }\n      Thread.sleep(500);\n      if (waitCnt == 90) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    File[] files = location.listFiles(new FilenameFilter() {\n      \n      @Override\n      public boolean accept(File dir, String name) {\n        if (name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(Arrays.asList(files).toString(), 1, files.length);\n    File snapDir = files[0];\n    \n    TestUtil.rm(snapDir);\n  }\n\n","sourceOld":"  private void checkForBackupSuccess(final HttpSolrServer client, File location)\n      throws InterruptedException, IOException {\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      final Pattern p = Pattern\n          .compile(\"<str name=\\\"snapshotCompletedAt\\\">(.*?)</str>\");\n      \n      CheckStatus() {}\n      \n      @Override\n      public void run() {\n        String masterUrl = client.getBaseURL() + \"/replication?command=\"\n            + ReplicationHandler.CMD_DETAILS;\n        \n        try {\n          response = client.getHttpClient().execute(new HttpGet(masterUrl), new BasicResponseHandler());\n          if (response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            Matcher m = p.matcher(response);\n            if (!m.find()) {\n              fail(\"could not find the completed timestamp in response.\");\n            }\n            \n            success = true;\n          }\n        } catch (Exception e) {\n          e.printStackTrace();\n          fail = e.getMessage();\n        }\n        \n      };\n    }\n    \n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while (true) {\n      checkStatus.run();\n      if (checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if (checkStatus.success) {\n        break;\n      }\n      Thread.sleep(500);\n      if (waitCnt == 90) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    File[] files = location.listFiles(new FilenameFilter() {\n      \n      @Override\n      public boolean accept(File dir, String name) {\n        if (name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(Arrays.asList(files).toString(), 1, files.length);\n    File snapDir = files[0];\n    \n    AbstractSolrTestCase.recurseDelete(snapDir); // clean up the snap dir\n  }\n\n","bugFix":null,"bugIntro":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbc3688252d4a8045d69a164236b2cf87b721f17","date":1409846185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#checkForBackupSuccess(HttpSolrServer,File).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#checkForBackupSuccess(HttpSolrServer,File).mjava","sourceNew":"  private void checkForBackupSuccess(final HttpSolrServer client, File location)\n      throws InterruptedException, IOException {\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      final Pattern p = Pattern\n          .compile(\"<str name=\\\"snapshotCompletedAt\\\">(.*?)</str>\");\n      \n      CheckStatus() {}\n      \n      @Override\n      public void run() {\n        String masterUrl = client.getBaseURL() + \"/replication?command=\"\n            + ReplicationHandler.CMD_DETAILS;\n        \n        try {\n          response = client.getHttpClient().execute(new HttpGet(masterUrl), new BasicResponseHandler());\n          if (response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            Matcher m = p.matcher(response);\n            if (!m.find()) {\n              fail(\"could not find the completed timestamp in response.\");\n            }\n            \n            success = true;\n          }\n        } catch (Exception e) {\n          e.printStackTrace();\n          fail = e.getMessage();\n        }\n        \n      };\n    }\n    \n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while (true) {\n      checkStatus.run();\n      if (checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if (checkStatus.success) {\n        break;\n      }\n      Thread.sleep(500);\n      if (waitCnt == 90) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    File[] files = location.listFiles(new FilenameFilter() {\n      \n      @Override\n      public boolean accept(File dir, String name) {\n        if (name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(Arrays.asList(files).toString(), 1, files.length);\n    File snapDir = files[0];\n    \n    IOUtils.rm(snapDir);\n  }\n\n","sourceOld":"  private void checkForBackupSuccess(final HttpSolrServer client, File location)\n      throws InterruptedException, IOException {\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      final Pattern p = Pattern\n          .compile(\"<str name=\\\"snapshotCompletedAt\\\">(.*?)</str>\");\n      \n      CheckStatus() {}\n      \n      @Override\n      public void run() {\n        String masterUrl = client.getBaseURL() + \"/replication?command=\"\n            + ReplicationHandler.CMD_DETAILS;\n        \n        try {\n          response = client.getHttpClient().execute(new HttpGet(masterUrl), new BasicResponseHandler());\n          if (response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            Matcher m = p.matcher(response);\n            if (!m.find()) {\n              fail(\"could not find the completed timestamp in response.\");\n            }\n            \n            success = true;\n          }\n        } catch (Exception e) {\n          e.printStackTrace();\n          fail = e.getMessage();\n        }\n        \n      };\n    }\n    \n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while (true) {\n      checkStatus.run();\n      if (checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if (checkStatus.success) {\n        break;\n      }\n      Thread.sleep(500);\n      if (waitCnt == 90) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    File[] files = location.listFiles(new FilenameFilter() {\n      \n      @Override\n      public boolean accept(File dir, String name) {\n        if (name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(Arrays.asList(files).toString(), 1, files.length);\n    File snapDir = files[0];\n    \n    TestUtil.rm(snapDir);\n  }\n\n","bugFix":["4e85f88536da92df6654f2182f3a477355cc4aae"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#checkForBackupSuccess(HttpSolrServer,File).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#checkForBackupSuccess(HttpSolrServer,File).mjava","sourceNew":"  private void checkForBackupSuccess(final HttpSolrServer client, File location)\n      throws InterruptedException, IOException {\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      final Pattern p = Pattern\n          .compile(\"<str name=\\\"snapshotCompletedAt\\\">(.*?)</str>\");\n      \n      CheckStatus() {}\n      \n      @Override\n      public void run() {\n        String masterUrl = client.getBaseURL() + \"/replication?command=\"\n            + ReplicationHandler.CMD_DETAILS;\n        \n        try {\n          response = client.getHttpClient().execute(new HttpGet(masterUrl), new BasicResponseHandler());\n          if (response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            Matcher m = p.matcher(response);\n            if (!m.find()) {\n              fail(\"could not find the completed timestamp in response.\");\n            }\n            \n            success = true;\n          }\n        } catch (Exception e) {\n          e.printStackTrace();\n          fail = e.getMessage();\n        }\n        \n      };\n    }\n    \n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while (true) {\n      checkStatus.run();\n      if (checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if (checkStatus.success) {\n        break;\n      }\n      Thread.sleep(500);\n      if (waitCnt == 90) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    File[] files = location.listFiles(new FilenameFilter() {\n      \n      @Override\n      public boolean accept(File dir, String name) {\n        if (name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(Arrays.asList(files).toString(), 1, files.length);\n    File snapDir = files[0];\n    \n    IOUtils.rm(snapDir.toPath());\n  }\n\n","sourceOld":"  private void checkForBackupSuccess(final HttpSolrServer client, File location)\n      throws InterruptedException, IOException {\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      final Pattern p = Pattern\n          .compile(\"<str name=\\\"snapshotCompletedAt\\\">(.*?)</str>\");\n      \n      CheckStatus() {}\n      \n      @Override\n      public void run() {\n        String masterUrl = client.getBaseURL() + \"/replication?command=\"\n            + ReplicationHandler.CMD_DETAILS;\n        \n        try {\n          response = client.getHttpClient().execute(new HttpGet(masterUrl), new BasicResponseHandler());\n          if (response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            Matcher m = p.matcher(response);\n            if (!m.find()) {\n              fail(\"could not find the completed timestamp in response.\");\n            }\n            \n            success = true;\n          }\n        } catch (Exception e) {\n          e.printStackTrace();\n          fail = e.getMessage();\n        }\n        \n      };\n    }\n    \n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while (true) {\n      checkStatus.run();\n      if (checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if (checkStatus.success) {\n        break;\n      }\n      Thread.sleep(500);\n      if (waitCnt == 90) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    File[] files = location.listFiles(new FilenameFilter() {\n      \n      @Override\n      public boolean accept(File dir, String name) {\n        if (name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(Arrays.asList(files).toString(), 1, files.length);\n    File snapDir = files[0];\n    \n    IOUtils.rm(snapDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#checkForBackupSuccess(HttpSolrClient,File).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#checkForBackupSuccess(HttpSolrServer,File).mjava","sourceNew":"  private void checkForBackupSuccess(final HttpSolrClient client, File location)\n      throws InterruptedException, IOException {\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      final Pattern p = Pattern\n          .compile(\"<str name=\\\"snapshotCompletedAt\\\">(.*?)</str>\");\n      \n      CheckStatus() {}\n      \n      @Override\n      public void run() {\n        String masterUrl = client.getBaseURL() + \"/replication?command=\"\n            + ReplicationHandler.CMD_DETAILS;\n        \n        try {\n          response = client.getHttpClient().execute(new HttpGet(masterUrl), new BasicResponseHandler());\n          if (response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            Matcher m = p.matcher(response);\n            if (!m.find()) {\n              fail(\"could not find the completed timestamp in response.\");\n            }\n            \n            success = true;\n          }\n        } catch (Exception e) {\n          e.printStackTrace();\n          fail = e.getMessage();\n        }\n        \n      };\n    }\n    \n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while (true) {\n      checkStatus.run();\n      if (checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if (checkStatus.success) {\n        break;\n      }\n      Thread.sleep(500);\n      if (waitCnt == 90) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    File[] files = location.listFiles(new FilenameFilter() {\n      \n      @Override\n      public boolean accept(File dir, String name) {\n        if (name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(Arrays.asList(files).toString(), 1, files.length);\n    File snapDir = files[0];\n    \n    IOUtils.rm(snapDir.toPath());\n  }\n\n","sourceOld":"  private void checkForBackupSuccess(final HttpSolrServer client, File location)\n      throws InterruptedException, IOException {\n    class CheckStatus extends Thread {\n      volatile String fail = null;\n      volatile String response = null;\n      volatile boolean success = false;\n      final Pattern p = Pattern\n          .compile(\"<str name=\\\"snapshotCompletedAt\\\">(.*?)</str>\");\n      \n      CheckStatus() {}\n      \n      @Override\n      public void run() {\n        String masterUrl = client.getBaseURL() + \"/replication?command=\"\n            + ReplicationHandler.CMD_DETAILS;\n        \n        try {\n          response = client.getHttpClient().execute(new HttpGet(masterUrl), new BasicResponseHandler());\n          if (response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n            Matcher m = p.matcher(response);\n            if (!m.find()) {\n              fail(\"could not find the completed timestamp in response.\");\n            }\n            \n            success = true;\n          }\n        } catch (Exception e) {\n          e.printStackTrace();\n          fail = e.getMessage();\n        }\n        \n      };\n    }\n    \n    int waitCnt = 0;\n    CheckStatus checkStatus = new CheckStatus();\n    while (true) {\n      checkStatus.run();\n      if (checkStatus.fail != null) {\n        fail(checkStatus.fail);\n      }\n      if (checkStatus.success) {\n        break;\n      }\n      Thread.sleep(500);\n      if (waitCnt == 90) {\n        fail(\"Backup success not detected:\" + checkStatus.response);\n      }\n      waitCnt++;\n    }\n    \n    File[] files = location.listFiles(new FilenameFilter() {\n      \n      @Override\n      public boolean accept(File dir, String name) {\n        if (name.startsWith(\"snapshot\")) {\n          return true;\n        }\n        return false;\n      }\n    });\n    assertEquals(Arrays.asList(files).toString(), 1, files.length);\n    File snapDir = files[0];\n    \n    IOUtils.rm(snapDir.toPath());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["4e85f88536da92df6654f2182f3a477355cc4aae"],"4e85f88536da92df6654f2182f3a477355cc4aae":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"],"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["f4abec28b874149a7223e32cc7a01704c27790de"],"4e85f88536da92df6654f2182f3a477355cc4aae":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["4e85f88536da92df6654f2182f3a477355cc4aae"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f4abec28b874149a7223e32cc7a01704c27790de":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}