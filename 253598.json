{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testBackgroundForceMerge().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testBackgroundForceMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testBackgroundForceMerge().mjava","sourceNew":"  // Test calling forceMerge(1, false) whereby forceMerge is kicked\n  // off but we don't wait for it to finish (but\n  // writer.close()) does wait\n  public void testBackgroundForceMerge() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int pass=0;pass<2;pass++) {\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy(51))\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"aaa\", StringField.TYPE_UNSTORED));\n      for(int i=0;i<100;i++)\n        writer.addDocument(doc);\n      writer.forceMerge(1, false);\n\n      if (0 == pass) {\n        writer.close();\n        DirectoryReader reader = IndexReader.open(dir);\n        assertEquals(1, reader.getSequentialSubReaders().length);\n        reader.close();\n      } else {\n        // Get another segment to flush so we can verify it is\n        // NOT included in the merging\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n        writer.close();\n\n        DirectoryReader reader = IndexReader.open(dir);\n        assertTrue(reader.getSequentialSubReaders().length > 1);\n        reader.close();\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(dir);\n        assertEquals(2, infos.size());\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  // Test calling forceMerge(1, false) whereby forceMerge is kicked\n  // off but we don't wait for it to finish (but\n  // writer.close()) does wait\n  public void testBackgroundForceMerge() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int pass=0;pass<2;pass++) {\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy(51))\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"aaa\", StringField.TYPE_UNSTORED));\n      for(int i=0;i<100;i++)\n        writer.addDocument(doc);\n      writer.forceMerge(1, false);\n\n      if (0 == pass) {\n        writer.close();\n        DirectoryReader reader = IndexReader.open(dir);\n        assertEquals(1, reader.getSequentialSubReaders().length);\n        reader.close();\n      } else {\n        // Get another segment to flush so we can verify it is\n        // NOT included in the merging\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n        writer.close();\n\n        DirectoryReader reader = IndexReader.open(dir);\n        assertTrue(reader.getSequentialSubReaders().length > 1);\n        reader.close();\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(dir);\n        assertEquals(2, infos.size());\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testBackgroundForceMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testBackgroundForceMerge().mjava","sourceNew":"  // Test calling forceMerge(1, false) whereby forceMerge is kicked\n  // off but we don't wait for it to finish (but\n  // writer.close()) does wait\n  public void testBackgroundForceMerge() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int pass=0;pass<2;pass++) {\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy(51))\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"aaa\", StringField.TYPE_UNSTORED));\n      for(int i=0;i<100;i++)\n        writer.addDocument(doc);\n      writer.forceMerge(1, false);\n\n      if (0 == pass) {\n        writer.close();\n        DirectoryReader reader = IndexReader.open(dir);\n        assertEquals(1, reader.getSequentialSubReaders().length);\n        reader.close();\n      } else {\n        // Get another segment to flush so we can verify it is\n        // NOT included in the merging\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n        writer.close();\n\n        DirectoryReader reader = IndexReader.open(dir);\n        assertTrue(reader.getSequentialSubReaders().length > 1);\n        reader.close();\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(dir);\n        assertEquals(2, infos.size());\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  // Test calling forceMerge(1, false) whereby forceMerge is kicked\n  // off but we don't wait for it to finish (but\n  // writer.close()) does wait\n  public void testBackgroundForceMerge() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int pass=0;pass<2;pass++) {\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy(51))\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"aaa\", StringField.TYPE_UNSTORED));\n      for(int i=0;i<100;i++)\n        writer.addDocument(doc);\n      writer.forceMerge(1, false);\n\n      if (0 == pass) {\n        writer.close();\n        DirectoryReader reader = IndexReader.open(dir);\n        assertEquals(1, reader.getSequentialSubReaders().length);\n        reader.close();\n      } else {\n        // Get another segment to flush so we can verify it is\n        // NOT included in the merging\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n        writer.close();\n\n        DirectoryReader reader = IndexReader.open(dir);\n        assertTrue(reader.getSequentialSubReaders().length > 1);\n        reader.close();\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(dir);\n        assertEquals(2, infos.size());\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testBackgroundForceMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testBackgroundForceMerge().mjava","sourceNew":"  // Test calling forceMerge(1, false) whereby forceMerge is kicked\n  // off but we don't wait for it to finish (but\n  // writer.close()) does wait\n  public void testBackgroundForceMerge() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int pass=0;pass<2;pass++) {\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy(51))\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"aaa\", StringField.TYPE_UNSTORED));\n      for(int i=0;i<100;i++)\n        writer.addDocument(doc);\n      writer.forceMerge(1, false);\n\n      if (0 == pass) {\n        writer.close();\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertEquals(1, reader.getSequentialSubReaders().length);\n        reader.close();\n      } else {\n        // Get another segment to flush so we can verify it is\n        // NOT included in the merging\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n        writer.close();\n\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.getSequentialSubReaders().length > 1);\n        reader.close();\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(dir);\n        assertEquals(2, infos.size());\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  // Test calling forceMerge(1, false) whereby forceMerge is kicked\n  // off but we don't wait for it to finish (but\n  // writer.close()) does wait\n  public void testBackgroundForceMerge() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int pass=0;pass<2;pass++) {\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy(51))\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"aaa\", StringField.TYPE_UNSTORED));\n      for(int i=0;i<100;i++)\n        writer.addDocument(doc);\n      writer.forceMerge(1, false);\n\n      if (0 == pass) {\n        writer.close();\n        DirectoryReader reader = IndexReader.open(dir);\n        assertEquals(1, reader.getSequentialSubReaders().length);\n        reader.close();\n      } else {\n        // Get another segment to flush so we can verify it is\n        // NOT included in the merging\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n        writer.close();\n\n        DirectoryReader reader = IndexReader.open(dir);\n        assertTrue(reader.getSequentialSubReaders().length > 1);\n        reader.close();\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(dir);\n        assertEquals(2, infos.size());\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testBackgroundForceMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testBackgroundForceMerge().mjava","sourceNew":"  // Test calling forceMerge(1, false) whereby forceMerge is kicked\n  // off but we don't wait for it to finish (but\n  // writer.close()) does wait\n  public void testBackgroundForceMerge() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int pass=0;pass<2;pass++) {\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy(51))\n      );\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", \"aaa\", Field.Store.NO));\n      for(int i=0;i<100;i++)\n        writer.addDocument(doc);\n      writer.forceMerge(1, false);\n\n      if (0 == pass) {\n        writer.close();\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertEquals(1, reader.getSequentialSubReaders().length);\n        reader.close();\n      } else {\n        // Get another segment to flush so we can verify it is\n        // NOT included in the merging\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n        writer.close();\n\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.getSequentialSubReaders().length > 1);\n        reader.close();\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(dir);\n        assertEquals(2, infos.size());\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  // Test calling forceMerge(1, false) whereby forceMerge is kicked\n  // off but we don't wait for it to finish (but\n  // writer.close()) does wait\n  public void testBackgroundForceMerge() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int pass=0;pass<2;pass++) {\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy(51))\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"aaa\", StringField.TYPE_UNSTORED));\n      for(int i=0;i<100;i++)\n        writer.addDocument(doc);\n      writer.forceMerge(1, false);\n\n      if (0 == pass) {\n        writer.close();\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertEquals(1, reader.getSequentialSubReaders().length);\n        reader.close();\n      } else {\n        // Get another segment to flush so we can verify it is\n        // NOT included in the merging\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n        writer.close();\n\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.getSequentialSubReaders().length > 1);\n        reader.close();\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(dir);\n        assertEquals(2, infos.size());\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testBackgroundForceMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testBackgroundForceMerge().mjava","sourceNew":"  // Test calling forceMerge(1, false) whereby forceMerge is kicked\n  // off but we don't wait for it to finish (but\n  // writer.close()) does wait\n  public void testBackgroundForceMerge() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int pass=0;pass<2;pass++) {\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy(51))\n      );\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", \"aaa\", Field.Store.NO));\n      for(int i=0;i<100;i++)\n        writer.addDocument(doc);\n      writer.forceMerge(1, false);\n\n      if (0 == pass) {\n        writer.close();\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertEquals(1, reader.getSequentialSubReaders().size());\n        reader.close();\n      } else {\n        // Get another segment to flush so we can verify it is\n        // NOT included in the merging\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n        writer.close();\n\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.getSequentialSubReaders().size() > 1);\n        reader.close();\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(dir);\n        assertEquals(2, infos.size());\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  // Test calling forceMerge(1, false) whereby forceMerge is kicked\n  // off but we don't wait for it to finish (but\n  // writer.close()) does wait\n  public void testBackgroundForceMerge() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int pass=0;pass<2;pass++) {\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy(51))\n      );\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", \"aaa\", Field.Store.NO));\n      for(int i=0;i<100;i++)\n        writer.addDocument(doc);\n      writer.forceMerge(1, false);\n\n      if (0 == pass) {\n        writer.close();\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertEquals(1, reader.getSequentialSubReaders().length);\n        reader.close();\n      } else {\n        // Get another segment to flush so we can verify it is\n        // NOT included in the merging\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n        writer.close();\n\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.getSequentialSubReaders().length > 1);\n        reader.close();\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(dir);\n        assertEquals(2, infos.size());\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ced66195b26fdb1f77ee00e2a77ec6918dedd766","date":1344948886,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testBackgroundForceMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testBackgroundForceMerge().mjava","sourceNew":"  // Test calling forceMerge(1, false) whereby forceMerge is kicked\n  // off but we don't wait for it to finish (but\n  // writer.close()) does wait\n  public void testBackgroundForceMerge() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int pass=0;pass<2;pass++) {\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy(51))\n      );\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", \"aaa\", Field.Store.NO));\n      for(int i=0;i<100;i++)\n        writer.addDocument(doc);\n      writer.forceMerge(1, false);\n\n      if (0 == pass) {\n        writer.close();\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertEquals(1, reader.leaves().size());\n        reader.close();\n      } else {\n        // Get another segment to flush so we can verify it is\n        // NOT included in the merging\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n        writer.close();\n\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.leaves().size() > 1);\n        reader.close();\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(dir);\n        assertEquals(2, infos.size());\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  // Test calling forceMerge(1, false) whereby forceMerge is kicked\n  // off but we don't wait for it to finish (but\n  // writer.close()) does wait\n  public void testBackgroundForceMerge() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int pass=0;pass<2;pass++) {\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy(51))\n      );\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", \"aaa\", Field.Store.NO));\n      for(int i=0;i<100;i++)\n        writer.addDocument(doc);\n      writer.forceMerge(1, false);\n\n      if (0 == pass) {\n        writer.close();\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertEquals(1, reader.getSequentialSubReaders().size());\n        reader.close();\n      } else {\n        // Get another segment to flush so we can verify it is\n        // NOT included in the merging\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n        writer.close();\n\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.getSequentialSubReaders().size() > 1);\n        reader.close();\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(dir);\n        assertEquals(2, infos.size());\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testBackgroundForceMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testBackgroundForceMerge().mjava","sourceNew":"  // Test calling forceMerge(1, false) whereby forceMerge is kicked\n  // off but we don't wait for it to finish (but\n  // writer.close()) does wait\n  public void testBackgroundForceMerge() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int pass=0;pass<2;pass++) {\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy(51))\n      );\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", \"aaa\", Field.Store.NO));\n      for(int i=0;i<100;i++)\n        writer.addDocument(doc);\n      writer.forceMerge(1, false);\n\n      if (0 == pass) {\n        writer.close();\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertEquals(1, reader.leaves().size());\n        reader.close();\n      } else {\n        // Get another segment to flush so we can verify it is\n        // NOT included in the merging\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n        writer.close();\n\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.leaves().size() > 1);\n        reader.close();\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(dir);\n        assertEquals(2, infos.size());\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  // Test calling forceMerge(1, false) whereby forceMerge is kicked\n  // off but we don't wait for it to finish (but\n  // writer.close()) does wait\n  public void testBackgroundForceMerge() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int pass=0;pass<2;pass++) {\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy(51))\n      );\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", \"aaa\", Field.Store.NO));\n      for(int i=0;i<100;i++)\n        writer.addDocument(doc);\n      writer.forceMerge(1, false);\n\n      if (0 == pass) {\n        writer.close();\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertEquals(1, reader.getSequentialSubReaders().size());\n        reader.close();\n      } else {\n        // Get another segment to flush so we can verify it is\n        // NOT included in the merging\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n        writer.close();\n\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.getSequentialSubReaders().size() > 1);\n        reader.close();\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(dir);\n        assertEquals(2, infos.size());\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testBackgroundForceMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testBackgroundForceMerge().mjava","sourceNew":"  // Test calling forceMerge(1, false) whereby forceMerge is kicked\n  // off but we don't wait for it to finish (but\n  // writer.close()) does wait\n  public void testBackgroundForceMerge() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int pass=0;pass<2;pass++) {\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy(51))\n      );\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", \"aaa\", Field.Store.NO));\n      for(int i=0;i<100;i++)\n        writer.addDocument(doc);\n      writer.forceMerge(1, false);\n\n      if (0 == pass) {\n        writer.close();\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertEquals(1, reader.leaves().size());\n        reader.close();\n      } else {\n        // Get another segment to flush so we can verify it is\n        // NOT included in the merging\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n        writer.close();\n\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.leaves().size() > 1);\n        reader.close();\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(dir);\n        assertEquals(2, infos.size());\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  // Test calling forceMerge(1, false) whereby forceMerge is kicked\n  // off but we don't wait for it to finish (but\n  // writer.close()) does wait\n  public void testBackgroundForceMerge() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int pass=0;pass<2;pass++) {\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy(51))\n      );\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", \"aaa\", Field.Store.NO));\n      for(int i=0;i<100;i++)\n        writer.addDocument(doc);\n      writer.forceMerge(1, false);\n\n      if (0 == pass) {\n        writer.close();\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertEquals(1, reader.getSequentialSubReaders().size());\n        reader.close();\n      } else {\n        // Get another segment to flush so we can verify it is\n        // NOT included in the merging\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n        writer.close();\n\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.getSequentialSubReaders().size() > 1);\n        reader.close();\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(dir);\n        assertEquals(2, infos.size());\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testBackgroundForceMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testBackgroundForceMerge().mjava","sourceNew":"  // Test calling forceMerge(1, false) whereby forceMerge is kicked\n  // off but we don't wait for it to finish (but\n  // writer.close()) does wait\n  public void testBackgroundForceMerge() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int pass=0;pass<2;pass++) {\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy(51))\n      );\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", \"aaa\", Field.Store.NO));\n      for(int i=0;i<100;i++)\n        writer.addDocument(doc);\n      writer.forceMerge(1, false);\n\n      if (0 == pass) {\n        writer.close();\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertEquals(1, reader.getSequentialSubReaders().size());\n        reader.close();\n      } else {\n        // Get another segment to flush so we can verify it is\n        // NOT included in the merging\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n        writer.close();\n\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.getSequentialSubReaders().size() > 1);\n        reader.close();\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(dir);\n        assertEquals(2, infos.size());\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  // Test calling forceMerge(1, false) whereby forceMerge is kicked\n  // off but we don't wait for it to finish (but\n  // writer.close()) does wait\n  public void testBackgroundForceMerge() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int pass=0;pass<2;pass++) {\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy(51))\n      );\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", \"aaa\", Field.Store.NO));\n      for(int i=0;i<100;i++)\n        writer.addDocument(doc);\n      writer.forceMerge(1, false);\n\n      if (0 == pass) {\n        writer.close();\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertEquals(1, reader.leaves().size());\n        reader.close();\n      } else {\n        // Get another segment to flush so we can verify it is\n        // NOT included in the merging\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n        writer.close();\n\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.leaves().size() > 1);\n        reader.close();\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(dir);\n        assertEquals(2, infos.size());\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testBackgroundForceMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testBackgroundForceMerge().mjava","sourceNew":"  // Test calling forceMerge(1, false) whereby forceMerge is kicked\n  // off but we don't wait for it to finish (but\n  // writer.close()) does wait\n  public void testBackgroundForceMerge() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int pass=0;pass<2;pass++) {\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy(51))\n      );\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", \"aaa\", Field.Store.NO));\n      for(int i=0;i<100;i++)\n        writer.addDocument(doc);\n      writer.forceMerge(1, false);\n\n      if (0 == pass) {\n        writer.close();\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertEquals(1, reader.leaves().size());\n        reader.close();\n      } else {\n        // Get another segment to flush so we can verify it is\n        // NOT included in the merging\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n        writer.close();\n\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.leaves().size() > 1);\n        reader.close();\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(dir);\n        assertEquals(2, infos.size());\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  // Test calling forceMerge(1, false) whereby forceMerge is kicked\n  // off but we don't wait for it to finish (but\n  // writer.close()) does wait\n  public void testBackgroundForceMerge() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int pass=0;pass<2;pass++) {\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy(51))\n      );\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", \"aaa\", Field.Store.NO));\n      for(int i=0;i<100;i++)\n        writer.addDocument(doc);\n      writer.forceMerge(1, false);\n\n      if (0 == pass) {\n        writer.close();\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertEquals(1, reader.getSequentialSubReaders().size());\n        reader.close();\n      } else {\n        // Get another segment to flush so we can verify it is\n        // NOT included in the merging\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n        writer.close();\n\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.getSequentialSubReaders().size() > 1);\n        reader.close();\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(dir);\n        assertEquals(2, infos.size());\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testBackgroundForceMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testBackgroundForceMerge().mjava","sourceNew":"  // Test calling forceMerge(1, false) whereby forceMerge is kicked\n  // off but we don't wait for it to finish (but\n  // writer.shutdown()) does wait\n  public void testBackgroundForceMerge() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int pass=0;pass<2;pass++) {\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy(51))\n      );\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", \"aaa\", Field.Store.NO));\n      for(int i=0;i<100;i++)\n        writer.addDocument(doc);\n      writer.forceMerge(1, false);\n\n      if (0 == pass) {\n        writer.shutdown();\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertEquals(1, reader.leaves().size());\n        reader.close();\n      } else {\n        // Get another segment to flush so we can verify it is\n        // NOT included in the merging\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n        writer.shutdown();\n\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.leaves().size() > 1);\n        reader.close();\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(dir);\n        assertEquals(2, infos.size());\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  // Test calling forceMerge(1, false) whereby forceMerge is kicked\n  // off but we don't wait for it to finish (but\n  // writer.close()) does wait\n  public void testBackgroundForceMerge() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int pass=0;pass<2;pass++) {\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy(51))\n      );\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", \"aaa\", Field.Store.NO));\n      for(int i=0;i<100;i++)\n        writer.addDocument(doc);\n      writer.forceMerge(1, false);\n\n      if (0 == pass) {\n        writer.close();\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertEquals(1, reader.leaves().size());\n        reader.close();\n      } else {\n        // Get another segment to flush so we can verify it is\n        // NOT included in the merging\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n        writer.close();\n\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.leaves().size() > 1);\n        reader.close();\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(dir);\n        assertEquals(2, infos.size());\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testBackgroundForceMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testBackgroundForceMerge().mjava","sourceNew":"  // Test calling forceMerge(1, false) whereby forceMerge is kicked\n  // off but we don't wait for it to finish (but\n  // writer.shutdown()) does wait\n  public void testBackgroundForceMerge() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int pass=0;pass<2;pass++) {\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n              .setOpenMode(OpenMode.CREATE)\n              .setMaxBufferedDocs(2)\n              .setMergePolicy(newLogMergePolicy(51))\n      );\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", \"aaa\", Field.Store.NO));\n      for(int i=0;i<100;i++)\n        writer.addDocument(doc);\n      writer.forceMerge(1, false);\n\n      if (0 == pass) {\n        writer.shutdown();\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertEquals(1, reader.leaves().size());\n        reader.close();\n      } else {\n        // Get another segment to flush so we can verify it is\n        // NOT included in the merging\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n        writer.shutdown();\n\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.leaves().size() > 1);\n        reader.close();\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(dir);\n        assertEquals(2, infos.size());\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  // Test calling forceMerge(1, false) whereby forceMerge is kicked\n  // off but we don't wait for it to finish (but\n  // writer.shutdown()) does wait\n  public void testBackgroundForceMerge() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int pass=0;pass<2;pass++) {\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy(51))\n      );\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", \"aaa\", Field.Store.NO));\n      for(int i=0;i<100;i++)\n        writer.addDocument(doc);\n      writer.forceMerge(1, false);\n\n      if (0 == pass) {\n        writer.shutdown();\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertEquals(1, reader.leaves().size());\n        reader.close();\n      } else {\n        // Get another segment to flush so we can verify it is\n        // NOT included in the merging\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n        writer.shutdown();\n\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.leaves().size() > 1);\n        reader.close();\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(dir);\n        assertEquals(2, infos.size());\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testBackgroundForceMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testBackgroundForceMerge().mjava","sourceNew":"  // Test calling forceMerge(1, false) whereby forceMerge is kicked\n  // off but we don't wait for it to finish (but\n  // writer.close()) does wait\n  public void testBackgroundForceMerge() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int pass=0;pass<2;pass++) {\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n              .setOpenMode(OpenMode.CREATE)\n              .setMaxBufferedDocs(2)\n              .setMergePolicy(newLogMergePolicy(51))\n      );\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", \"aaa\", Field.Store.NO));\n      for(int i=0;i<100;i++)\n        writer.addDocument(doc);\n      writer.forceMerge(1, false);\n\n      if (0 == pass) {\n        writer.close();\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertEquals(1, reader.leaves().size());\n        reader.close();\n      } else {\n        // Get another segment to flush so we can verify it is\n        // NOT included in the merging\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n        writer.close();\n\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.leaves().size() > 1);\n        reader.close();\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(dir);\n        assertEquals(2, infos.size());\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  // Test calling forceMerge(1, false) whereby forceMerge is kicked\n  // off but we don't wait for it to finish (but\n  // writer.shutdown()) does wait\n  public void testBackgroundForceMerge() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int pass=0;pass<2;pass++) {\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n              .setOpenMode(OpenMode.CREATE)\n              .setMaxBufferedDocs(2)\n              .setMergePolicy(newLogMergePolicy(51))\n      );\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", \"aaa\", Field.Store.NO));\n      for(int i=0;i<100;i++)\n        writer.addDocument(doc);\n      writer.forceMerge(1, false);\n\n      if (0 == pass) {\n        writer.shutdown();\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertEquals(1, reader.leaves().size());\n        reader.close();\n      } else {\n        // Get another segment to flush so we can verify it is\n        // NOT included in the merging\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n        writer.shutdown();\n\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.leaves().size() > 1);\n        reader.close();\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(dir);\n        assertEquals(2, infos.size());\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testBackgroundForceMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testBackgroundForceMerge().mjava","sourceNew":"  // Test calling forceMerge(1, false) whereby forceMerge is kicked\n  // off but we don't wait for it to finish (but\n  // writer.close()) does wait\n  public void testBackgroundForceMerge() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int pass=0;pass<2;pass++) {\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n              .setOpenMode(OpenMode.CREATE)\n              .setMaxBufferedDocs(2)\n              .setMergePolicy(newLogMergePolicy(51))\n      );\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", \"aaa\", Field.Store.NO));\n      for(int i=0;i<100;i++)\n        writer.addDocument(doc);\n      writer.forceMerge(1, false);\n\n      if (0 == pass) {\n        writer.close();\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertEquals(1, reader.leaves().size());\n        reader.close();\n      } else {\n        // Get another segment to flush so we can verify it is\n        // NOT included in the merging\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n        writer.close();\n\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.leaves().size() > 1);\n        reader.close();\n\n        SegmentInfos infos = SegmentInfos.readLatestCommit(dir);\n        assertEquals(2, infos.size());\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  // Test calling forceMerge(1, false) whereby forceMerge is kicked\n  // off but we don't wait for it to finish (but\n  // writer.close()) does wait\n  public void testBackgroundForceMerge() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int pass=0;pass<2;pass++) {\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n              .setOpenMode(OpenMode.CREATE)\n              .setMaxBufferedDocs(2)\n              .setMergePolicy(newLogMergePolicy(51))\n      );\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", \"aaa\", Field.Store.NO));\n      for(int i=0;i<100;i++)\n        writer.addDocument(doc);\n      writer.forceMerge(1, false);\n\n      if (0 == pass) {\n        writer.close();\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertEquals(1, reader.leaves().size());\n        reader.close();\n      } else {\n        // Get another segment to flush so we can verify it is\n        // NOT included in the merging\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n        writer.close();\n\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.leaves().size() > 1);\n        reader.close();\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(dir);\n        assertEquals(2, infos.size());\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testBackgroundForceMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testBackgroundForceMerge().mjava","sourceNew":"  // Test calling forceMerge(1, false) whereby forceMerge is kicked\n  // off but we don't wait for it to finish (but\n  // writer.close()) does wait\n  public void testBackgroundForceMerge() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int pass=0;pass<2;pass++) {\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n              .setOpenMode(OpenMode.CREATE)\n              .setMaxBufferedDocs(2)\n              .setMergePolicy(newLogMergePolicy(51))\n      );\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", \"aaa\", Field.Store.NO));\n      for(int i=0;i<100;i++)\n        writer.addDocument(doc);\n      writer.forceMerge(1, false);\n\n      if (0 == pass) {\n        writer.close();\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertEquals(1, reader.leaves().size());\n        reader.close();\n      } else {\n        // Get another segment to flush so we can verify it is\n        // NOT included in the merging\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n        writer.close();\n\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.leaves().size() > 1);\n        reader.close();\n\n        SegmentInfos infos = SegmentInfos.readLatestCommit(dir);\n        assertEquals(2, infos.size());\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  // Test calling forceMerge(1, false) whereby forceMerge is kicked\n  // off but we don't wait for it to finish (but\n  // writer.close()) does wait\n  public void testBackgroundForceMerge() throws IOException {\n\n    Directory dir = newDirectory();\n    for(int pass=0;pass<2;pass++) {\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n              .setOpenMode(OpenMode.CREATE)\n              .setMaxBufferedDocs(2)\n              .setMergePolicy(newLogMergePolicy(51))\n      );\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", \"aaa\", Field.Store.NO));\n      for(int i=0;i<100;i++)\n        writer.addDocument(doc);\n      writer.forceMerge(1, false);\n\n      if (0 == pass) {\n        writer.close();\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertEquals(1, reader.leaves().size());\n        reader.close();\n      } else {\n        // Get another segment to flush so we can verify it is\n        // NOT included in the merging\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n        writer.close();\n\n        DirectoryReader reader = DirectoryReader.open(dir);\n        assertTrue(reader.leaves().size() > 1);\n        reader.close();\n\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(dir);\n        assertEquals(2, infos.size());\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["d0ef034a4f10871667ae75181537775ddcf8ade4","3384e6013a93e4d11b7d75388693f8d0388602bf"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["3c188105a9aae04f56c24996f98f8333fc825d2e","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"04f07771a2a7dd3a395700665ed839c3dae2def2":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["3384e6013a93e4d11b7d75388693f8d0388602bf","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}