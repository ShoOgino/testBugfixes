{"path":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilderTest#testDiscreteMultiValueHighlighting().mjava","commits":[{"id":"73187ff81dbd931417f46f53360c5dcf390ebde2","date":1342466689,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilderTest#testDiscreteMultiValueHighlighting().mjava","pathOld":"/dev/null","sourceNew":"  public void testDiscreteMultiValueHighlighting() throws Exception {\n    makeIndexShortMV();\n\n    FieldQuery fq = new FieldQuery( tq( \"d\" ), true, true );\n    FieldTermStack stack = new FieldTermStack( reader, 0, F, fq );\n    FieldPhraseList fpl = new FieldPhraseList( stack, fq );\n    SimpleFragListBuilder sflb = new SimpleFragListBuilder();\n    FieldFragList ffl = sflb.createFieldFragList( fpl, 100 );\n    SimpleFragmentsBuilder sfb = new SimpleFragmentsBuilder();\n    sfb.setDiscreteMultiValueHighlighting(true);\n    assertEquals( \"<b>d</b> e\", sfb.createFragment( reader, 0, F, ffl ) );\n\n    make1dmfIndex(\"some text to highlight\", \"highlight other text\");\n    fq = new FieldQuery( tq( \"text\" ), true, true );\n    stack = new FieldTermStack( reader, 0, F, fq );\n    fpl = new FieldPhraseList( stack, fq );\n    sflb = new SimpleFragListBuilder();\n    ffl = sflb.createFieldFragList( fpl, 32 );\n    String[] result = sfb.createFragments(reader, 0, F, ffl, 3);\n    assertEquals(2, result.length);\n    assertEquals(\"some <b>text</b> to highlight\", result[0]);\n    assertEquals(\"other <b>text</b>\", result[1]);\n\n    fq = new FieldQuery( tq( \"highlight\" ), true, true );\n    stack = new FieldTermStack( reader, 0, F, fq );\n    fpl = new FieldPhraseList( stack, fq );\n    sflb = new SimpleFragListBuilder();\n    ffl = sflb.createFieldFragList( fpl, 32 );\n    result = sfb.createFragments(reader, 0, F, ffl, 3);\n    assertEquals(2, result.length);\n    assertEquals(\"text to <b>highlight</b>\", result[0]);\n    assertEquals(\"<b>highlight</b> other text\", result[1]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilderTest#testDiscreteMultiValueHighlighting().mjava","pathOld":"/dev/null","sourceNew":"  public void testDiscreteMultiValueHighlighting() throws Exception {\n    makeIndexShortMV();\n\n    FieldQuery fq = new FieldQuery( tq( \"d\" ), true, true );\n    FieldTermStack stack = new FieldTermStack( reader, 0, F, fq );\n    FieldPhraseList fpl = new FieldPhraseList( stack, fq );\n    SimpleFragListBuilder sflb = new SimpleFragListBuilder();\n    FieldFragList ffl = sflb.createFieldFragList( fpl, 100 );\n    SimpleFragmentsBuilder sfb = new SimpleFragmentsBuilder();\n    sfb.setDiscreteMultiValueHighlighting(true);\n    assertEquals( \"<b>d</b> e\", sfb.createFragment( reader, 0, F, ffl ) );\n\n    make1dmfIndex(\"some text to highlight\", \"highlight other text\");\n    fq = new FieldQuery( tq( \"text\" ), true, true );\n    stack = new FieldTermStack( reader, 0, F, fq );\n    fpl = new FieldPhraseList( stack, fq );\n    sflb = new SimpleFragListBuilder();\n    ffl = sflb.createFieldFragList( fpl, 32 );\n    String[] result = sfb.createFragments(reader, 0, F, ffl, 3);\n    assertEquals(2, result.length);\n    assertEquals(\"some <b>text</b> to highlight\", result[0]);\n    assertEquals(\"other <b>text</b>\", result[1]);\n\n    fq = new FieldQuery( tq( \"highlight\" ), true, true );\n    stack = new FieldTermStack( reader, 0, F, fq );\n    fpl = new FieldPhraseList( stack, fq );\n    sflb = new SimpleFragListBuilder();\n    ffl = sflb.createFieldFragList( fpl, 32 );\n    result = sfb.createFragments(reader, 0, F, ffl, 3);\n    assertEquals(2, result.length);\n    assertEquals(\"text to <b>highlight</b>\", result[0]);\n    assertEquals(\"<b>highlight</b> other text\", result[1]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilderTest#testDiscreteMultiValueHighlighting().mjava","pathOld":"/dev/null","sourceNew":"  public void testDiscreteMultiValueHighlighting() throws Exception {\n    makeIndexShortMV();\n\n    FieldQuery fq = new FieldQuery( tq( \"d\" ), true, true );\n    FieldTermStack stack = new FieldTermStack( reader, 0, F, fq );\n    FieldPhraseList fpl = new FieldPhraseList( stack, fq );\n    SimpleFragListBuilder sflb = new SimpleFragListBuilder();\n    FieldFragList ffl = sflb.createFieldFragList( fpl, 100 );\n    SimpleFragmentsBuilder sfb = new SimpleFragmentsBuilder();\n    sfb.setDiscreteMultiValueHighlighting(true);\n    assertEquals( \"<b>d</b> e\", sfb.createFragment( reader, 0, F, ffl ) );\n\n    make1dmfIndex(\"some text to highlight\", \"highlight other text\");\n    fq = new FieldQuery( tq( \"text\" ), true, true );\n    stack = new FieldTermStack( reader, 0, F, fq );\n    fpl = new FieldPhraseList( stack, fq );\n    sflb = new SimpleFragListBuilder();\n    ffl = sflb.createFieldFragList( fpl, 32 );\n    String[] result = sfb.createFragments(reader, 0, F, ffl, 3);\n    assertEquals(2, result.length);\n    assertEquals(\"some <b>text</b> to highlight\", result[0]);\n    assertEquals(\"other <b>text</b>\", result[1]);\n\n    fq = new FieldQuery( tq( \"highlight\" ), true, true );\n    stack = new FieldTermStack( reader, 0, F, fq );\n    fpl = new FieldPhraseList( stack, fq );\n    sflb = new SimpleFragListBuilder();\n    ffl = sflb.createFieldFragList( fpl, 32 );\n    result = sfb.createFragments(reader, 0, F, ffl, 3);\n    assertEquals(2, result.length);\n    assertEquals(\"text to <b>highlight</b>\", result[0]);\n    assertEquals(\"<b>highlight</b> other text\", result[1]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"335fa85a41a431b929ff93a0eb831abfc7b91e63","date":1349750333,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilderTest#testDiscreteMultiValueHighlighting().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilderTest#testDiscreteMultiValueHighlighting().mjava","sourceNew":"  public void testDiscreteMultiValueHighlighting() throws Exception {\n    makeIndexShortMV();\n\n    FieldQuery fq = new FieldQuery( tq( \"d\" ), true, true );\n    FieldTermStack stack = new FieldTermStack( reader, 0, F, fq );\n    FieldPhraseList fpl = new FieldPhraseList( stack, fq );\n    SimpleFragListBuilder sflb = new SimpleFragListBuilder();\n    FieldFragList ffl = sflb.createFieldFragList( fpl, 100 );\n    SimpleFragmentsBuilder sfb = new SimpleFragmentsBuilder();\n    sfb.setDiscreteMultiValueHighlighting(true);\n    assertEquals( \"<b>d</b> e\", sfb.createFragment( reader, 0, F, ffl ) );\n\n    make1dmfIndex(\"some text to highlight\", \"highlight other text\");\n    fq = new FieldQuery( tq( \"text\" ), true, true );\n    stack = new FieldTermStack( reader, 0, F, fq );\n    fpl = new FieldPhraseList( stack, fq );\n    sflb = new SimpleFragListBuilder();\n    ffl = sflb.createFieldFragList( fpl, 32 );\n    String[] result = sfb.createFragments(reader, 0, F, ffl, 3);\n    assertEquals(2, result.length);\n    assertEquals(\"some <b>text</b> to highlight\", result[0]);\n    assertEquals(\"highlight other <b>text</b>\", result[1]);\n\n    fq = new FieldQuery( tq( \"highlight\" ), true, true );\n    stack = new FieldTermStack( reader, 0, F, fq );\n    fpl = new FieldPhraseList( stack, fq );\n    sflb = new SimpleFragListBuilder();\n    ffl = sflb.createFieldFragList( fpl, 32 );\n    result = sfb.createFragments(reader, 0, F, ffl, 3);\n    assertEquals(2, result.length);\n    assertEquals(\"text to <b>highlight</b>\", result[0]);\n    assertEquals(\"<b>highlight</b> other text\", result[1]);\n  }\n\n","sourceOld":"  public void testDiscreteMultiValueHighlighting() throws Exception {\n    makeIndexShortMV();\n\n    FieldQuery fq = new FieldQuery( tq( \"d\" ), true, true );\n    FieldTermStack stack = new FieldTermStack( reader, 0, F, fq );\n    FieldPhraseList fpl = new FieldPhraseList( stack, fq );\n    SimpleFragListBuilder sflb = new SimpleFragListBuilder();\n    FieldFragList ffl = sflb.createFieldFragList( fpl, 100 );\n    SimpleFragmentsBuilder sfb = new SimpleFragmentsBuilder();\n    sfb.setDiscreteMultiValueHighlighting(true);\n    assertEquals( \"<b>d</b> e\", sfb.createFragment( reader, 0, F, ffl ) );\n\n    make1dmfIndex(\"some text to highlight\", \"highlight other text\");\n    fq = new FieldQuery( tq( \"text\" ), true, true );\n    stack = new FieldTermStack( reader, 0, F, fq );\n    fpl = new FieldPhraseList( stack, fq );\n    sflb = new SimpleFragListBuilder();\n    ffl = sflb.createFieldFragList( fpl, 32 );\n    String[] result = sfb.createFragments(reader, 0, F, ffl, 3);\n    assertEquals(2, result.length);\n    assertEquals(\"some <b>text</b> to highlight\", result[0]);\n    assertEquals(\"other <b>text</b>\", result[1]);\n\n    fq = new FieldQuery( tq( \"highlight\" ), true, true );\n    stack = new FieldTermStack( reader, 0, F, fq );\n    fpl = new FieldPhraseList( stack, fq );\n    sflb = new SimpleFragListBuilder();\n    ffl = sflb.createFieldFragList( fpl, 32 );\n    result = sfb.createFragments(reader, 0, F, ffl, 3);\n    assertEquals(2, result.length);\n    assertEquals(\"text to <b>highlight</b>\", result[0]);\n    assertEquals(\"<b>highlight</b> other text\", result[1]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"335fa85a41a431b929ff93a0eb831abfc7b91e63":["73187ff81dbd931417f46f53360c5dcf390ebde2"],"73187ff81dbd931417f46f53360c5dcf390ebde2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","73187ff81dbd931417f46f53360c5dcf390ebde2"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","73187ff81dbd931417f46f53360c5dcf390ebde2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["335fa85a41a431b929ff93a0eb831abfc7b91e63"]},"commit2Childs":{"335fa85a41a431b929ff93a0eb831abfc7b91e63":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"73187ff81dbd931417f46f53360c5dcf390ebde2":["335fa85a41a431b929ff93a0eb831abfc7b91e63","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73187ff81dbd931417f46f53360c5dcf390ebde2","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}