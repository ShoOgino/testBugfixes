{"path":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlagsKey().mjava","commits":[{"id":"2070bf73ffa1039a505000f99ea245884ff19e11","date":1177653367,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlagsKey().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @return a key to what each character means\n   */\n  private static SimpleOrderedMap<String> getFieldFlagsKey()\n  {\n    SimpleOrderedMap<String> key = new SimpleOrderedMap<String>();\n    key.add( \"I\", \"Indexed\" );                     \n    key.add( \"T\", \"Tokenized\" );                   \n    key.add( \"S\", \"Stored\" );                   \n    key.add( \"M\", \"Multivalued\" );                     \n    key.add( \"V\", \"TermVector Stored\" );            \n    key.add( \"o\", \"Store Offset With TermVector\" );   \n    key.add( \"p\", \"Store Position With TermVector\" ); \n    key.add( \"O\", \"Omit Norms\" );                  \n    key.add( \"L\", \"Lazy\" );                        \n    key.add( \"B\", \"Binary\" );                      \n    key.add( \"C\", \"Compressed\" );                  \n    key.add( \"f\", \"Sort Missing First\" );                  \n    key.add( \"l\", \"Sort Missing Last\" );                  \n    return key;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8d47f9ca2aa071e747f8c770352c2d9dde30d240","8d47f9ca2aa071e747f8c770352c2d9dde30d240","8d47f9ca2aa071e747f8c770352c2d9dde30d240"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"34a68b3240cf63c0ebea7a73b217a999a8f585c6","date":1190911422,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlagsKey().mjava","pathOld":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlagsKey().mjava","sourceNew":"  /**\n   * @return a key to what each character means\n   */\n  public static SimpleOrderedMap<String> getFieldFlagsKey()\n  {\n    SimpleOrderedMap<String> key = new SimpleOrderedMap<String>();\n    key.add(String.valueOf(FieldFlag.INDEXED.getAbbreviation()), FieldFlag.INDEXED.getDisplay() );\n    key.add(String.valueOf(FieldFlag.TOKENIZED.getAbbreviation()), FieldFlag.TOKENIZED.getDisplay() );\n    key.add( String.valueOf(FieldFlag.STORED.getAbbreviation()), FieldFlag.STORED.getDisplay() );\n    key.add( String.valueOf(FieldFlag.MULTI_VALUED.getAbbreviation()), FieldFlag.MULTI_VALUED.getDisplay() );\n    key.add( String.valueOf(FieldFlag.TERM_VECTOR_STORED.getAbbreviation()), FieldFlag.TERM_VECTOR_STORED.getDisplay() );\n    key.add( String.valueOf(FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation()), FieldFlag.TERM_VECTOR_OFFSET.getDisplay() );\n    key.add( String.valueOf(FieldFlag.TERM_VECTOR_POSITION.getAbbreviation()), FieldFlag.TERM_VECTOR_POSITION.getDisplay() );\n    key.add( String.valueOf(FieldFlag.OMIT_NORMS.getAbbreviation()), FieldFlag.OMIT_NORMS.getDisplay() );\n    key.add( String.valueOf(FieldFlag.LAZY.getAbbreviation()), FieldFlag.LAZY.getDisplay() );\n    key.add( String.valueOf(FieldFlag.BINARY.getAbbreviation()), FieldFlag.BINARY.getDisplay() );\n    key.add( String.valueOf(FieldFlag.COMPRESSED.getAbbreviation()), FieldFlag.COMPRESSED.getDisplay() );\n    key.add( String.valueOf(FieldFlag.SORT_MISSING_FIRST.getAbbreviation()), FieldFlag.SORT_MISSING_FIRST.getDisplay() );\n    key.add( String.valueOf(FieldFlag.SORT_MISSING_LAST.getAbbreviation()), FieldFlag.SORT_MISSING_LAST.getDisplay() );\n    return key;\n  }\n\n","sourceOld":"  /**\n   * @return a key to what each character means\n   */\n  private static SimpleOrderedMap<String> getFieldFlagsKey()\n  {\n    SimpleOrderedMap<String> key = new SimpleOrderedMap<String>();\n    key.add( \"I\", \"Indexed\" );                     \n    key.add( \"T\", \"Tokenized\" );                   \n    key.add( \"S\", \"Stored\" );                   \n    key.add( \"M\", \"Multivalued\" );                     \n    key.add( \"V\", \"TermVector Stored\" );            \n    key.add( \"o\", \"Store Offset With TermVector\" );   \n    key.add( \"p\", \"Store Position With TermVector\" ); \n    key.add( \"O\", \"Omit Norms\" );                  \n    key.add( \"L\", \"Lazy\" );                        \n    key.add( \"B\", \"Binary\" );                      \n    key.add( \"C\", \"Compressed\" );                  \n    key.add( \"f\", \"Sort Missing First\" );                  \n    key.add( \"l\", \"Sort Missing Last\" );                  \n    return key;\n  }\n\n","bugFix":null,"bugIntro":["8d47f9ca2aa071e747f8c770352c2d9dde30d240","8d47f9ca2aa071e747f8c770352c2d9dde30d240","8d47f9ca2aa071e747f8c770352c2d9dde30d240"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"abdb6dddeb9ee17be5f51bf7c75b2405393b72ac","date":1268682985,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlagsKey().mjava","pathOld":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlagsKey().mjava","sourceNew":"  /**\n   * @return a key to what each character means\n   */\n  public static SimpleOrderedMap<String> getFieldFlagsKey()\n  {\n    SimpleOrderedMap<String> key = new SimpleOrderedMap<String>();\n    key.add(String.valueOf(FieldFlag.INDEXED.getAbbreviation()), FieldFlag.INDEXED.getDisplay() );\n    key.add(String.valueOf(FieldFlag.TOKENIZED.getAbbreviation()), FieldFlag.TOKENIZED.getDisplay() );\n    key.add( String.valueOf(FieldFlag.STORED.getAbbreviation()), FieldFlag.STORED.getDisplay() );\n    key.add( String.valueOf(FieldFlag.MULTI_VALUED.getAbbreviation()), FieldFlag.MULTI_VALUED.getDisplay() );\n    key.add( String.valueOf(FieldFlag.TERM_VECTOR_STORED.getAbbreviation()), FieldFlag.TERM_VECTOR_STORED.getDisplay() );\n    key.add( String.valueOf(FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation()), FieldFlag.TERM_VECTOR_OFFSET.getDisplay() );\n    key.add( String.valueOf(FieldFlag.TERM_VECTOR_POSITION.getAbbreviation()), FieldFlag.TERM_VECTOR_POSITION.getDisplay() );\n    key.add( String.valueOf(FieldFlag.OMIT_NORMS.getAbbreviation()), FieldFlag.OMIT_NORMS.getDisplay() );\n    key.add( String.valueOf(FieldFlag.LAZY.getAbbreviation()), FieldFlag.LAZY.getDisplay() );\n    key.add( String.valueOf(FieldFlag.BINARY.getAbbreviation()), FieldFlag.BINARY.getDisplay() );\n    key.add( String.valueOf(FieldFlag.SORT_MISSING_FIRST.getAbbreviation()), FieldFlag.SORT_MISSING_FIRST.getDisplay() );\n    key.add( String.valueOf(FieldFlag.SORT_MISSING_LAST.getAbbreviation()), FieldFlag.SORT_MISSING_LAST.getDisplay() );\n    return key;\n  }\n\n","sourceOld":"  /**\n   * @return a key to what each character means\n   */\n  public static SimpleOrderedMap<String> getFieldFlagsKey()\n  {\n    SimpleOrderedMap<String> key = new SimpleOrderedMap<String>();\n    key.add(String.valueOf(FieldFlag.INDEXED.getAbbreviation()), FieldFlag.INDEXED.getDisplay() );\n    key.add(String.valueOf(FieldFlag.TOKENIZED.getAbbreviation()), FieldFlag.TOKENIZED.getDisplay() );\n    key.add( String.valueOf(FieldFlag.STORED.getAbbreviation()), FieldFlag.STORED.getDisplay() );\n    key.add( String.valueOf(FieldFlag.MULTI_VALUED.getAbbreviation()), FieldFlag.MULTI_VALUED.getDisplay() );\n    key.add( String.valueOf(FieldFlag.TERM_VECTOR_STORED.getAbbreviation()), FieldFlag.TERM_VECTOR_STORED.getDisplay() );\n    key.add( String.valueOf(FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation()), FieldFlag.TERM_VECTOR_OFFSET.getDisplay() );\n    key.add( String.valueOf(FieldFlag.TERM_VECTOR_POSITION.getAbbreviation()), FieldFlag.TERM_VECTOR_POSITION.getDisplay() );\n    key.add( String.valueOf(FieldFlag.OMIT_NORMS.getAbbreviation()), FieldFlag.OMIT_NORMS.getDisplay() );\n    key.add( String.valueOf(FieldFlag.LAZY.getAbbreviation()), FieldFlag.LAZY.getDisplay() );\n    key.add( String.valueOf(FieldFlag.BINARY.getAbbreviation()), FieldFlag.BINARY.getDisplay() );\n    key.add( String.valueOf(FieldFlag.COMPRESSED.getAbbreviation()), FieldFlag.COMPRESSED.getDisplay() );\n    key.add( String.valueOf(FieldFlag.SORT_MISSING_FIRST.getAbbreviation()), FieldFlag.SORT_MISSING_FIRST.getDisplay() );\n    key.add( String.valueOf(FieldFlag.SORT_MISSING_LAST.getAbbreviation()), FieldFlag.SORT_MISSING_LAST.getDisplay() );\n    return key;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlagsKey().mjava","pathOld":"src/java/org/apache/solr/handler/admin/LukeRequestHandler#getFieldFlagsKey().mjava","sourceNew":"  /**\n   * @return a key to what each character means\n   */\n  public static SimpleOrderedMap<String> getFieldFlagsKey()\n  {\n    SimpleOrderedMap<String> key = new SimpleOrderedMap<String>();\n    key.add(String.valueOf(FieldFlag.INDEXED.getAbbreviation()), FieldFlag.INDEXED.getDisplay() );\n    key.add(String.valueOf(FieldFlag.TOKENIZED.getAbbreviation()), FieldFlag.TOKENIZED.getDisplay() );\n    key.add( String.valueOf(FieldFlag.STORED.getAbbreviation()), FieldFlag.STORED.getDisplay() );\n    key.add( String.valueOf(FieldFlag.MULTI_VALUED.getAbbreviation()), FieldFlag.MULTI_VALUED.getDisplay() );\n    key.add( String.valueOf(FieldFlag.TERM_VECTOR_STORED.getAbbreviation()), FieldFlag.TERM_VECTOR_STORED.getDisplay() );\n    key.add( String.valueOf(FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation()), FieldFlag.TERM_VECTOR_OFFSET.getDisplay() );\n    key.add( String.valueOf(FieldFlag.TERM_VECTOR_POSITION.getAbbreviation()), FieldFlag.TERM_VECTOR_POSITION.getDisplay() );\n    key.add( String.valueOf(FieldFlag.OMIT_NORMS.getAbbreviation()), FieldFlag.OMIT_NORMS.getDisplay() );\n    key.add( String.valueOf(FieldFlag.LAZY.getAbbreviation()), FieldFlag.LAZY.getDisplay() );\n    key.add( String.valueOf(FieldFlag.BINARY.getAbbreviation()), FieldFlag.BINARY.getDisplay() );\n    key.add( String.valueOf(FieldFlag.SORT_MISSING_FIRST.getAbbreviation()), FieldFlag.SORT_MISSING_FIRST.getDisplay() );\n    key.add( String.valueOf(FieldFlag.SORT_MISSING_LAST.getAbbreviation()), FieldFlag.SORT_MISSING_LAST.getDisplay() );\n    return key;\n  }\n\n","sourceOld":"  /**\n   * @return a key to what each character means\n   */\n  public static SimpleOrderedMap<String> getFieldFlagsKey()\n  {\n    SimpleOrderedMap<String> key = new SimpleOrderedMap<String>();\n    key.add(String.valueOf(FieldFlag.INDEXED.getAbbreviation()), FieldFlag.INDEXED.getDisplay() );\n    key.add(String.valueOf(FieldFlag.TOKENIZED.getAbbreviation()), FieldFlag.TOKENIZED.getDisplay() );\n    key.add( String.valueOf(FieldFlag.STORED.getAbbreviation()), FieldFlag.STORED.getDisplay() );\n    key.add( String.valueOf(FieldFlag.MULTI_VALUED.getAbbreviation()), FieldFlag.MULTI_VALUED.getDisplay() );\n    key.add( String.valueOf(FieldFlag.TERM_VECTOR_STORED.getAbbreviation()), FieldFlag.TERM_VECTOR_STORED.getDisplay() );\n    key.add( String.valueOf(FieldFlag.TERM_VECTOR_OFFSET.getAbbreviation()), FieldFlag.TERM_VECTOR_OFFSET.getDisplay() );\n    key.add( String.valueOf(FieldFlag.TERM_VECTOR_POSITION.getAbbreviation()), FieldFlag.TERM_VECTOR_POSITION.getDisplay() );\n    key.add( String.valueOf(FieldFlag.OMIT_NORMS.getAbbreviation()), FieldFlag.OMIT_NORMS.getDisplay() );\n    key.add( String.valueOf(FieldFlag.LAZY.getAbbreviation()), FieldFlag.LAZY.getDisplay() );\n    key.add( String.valueOf(FieldFlag.BINARY.getAbbreviation()), FieldFlag.BINARY.getDisplay() );\n    key.add( String.valueOf(FieldFlag.SORT_MISSING_FIRST.getAbbreviation()), FieldFlag.SORT_MISSING_FIRST.getDisplay() );\n    key.add( String.valueOf(FieldFlag.SORT_MISSING_LAST.getAbbreviation()), FieldFlag.SORT_MISSING_LAST.getDisplay() );\n    return key;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"34a68b3240cf63c0ebea7a73b217a999a8f585c6":["2070bf73ffa1039a505000f99ea245884ff19e11"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"2070bf73ffa1039a505000f99ea245884ff19e11":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["abdb6dddeb9ee17be5f51bf7c75b2405393b72ac"],"abdb6dddeb9ee17be5f51bf7c75b2405393b72ac":["34a68b3240cf63c0ebea7a73b217a999a8f585c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"34a68b3240cf63c0ebea7a73b217a999a8f585c6":["abdb6dddeb9ee17be5f51bf7c75b2405393b72ac"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["2070bf73ffa1039a505000f99ea245884ff19e11"],"2070bf73ffa1039a505000f99ea245884ff19e11":["34a68b3240cf63c0ebea7a73b217a999a8f585c6"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"abdb6dddeb9ee17be5f51bf7c75b2405393b72ac":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}