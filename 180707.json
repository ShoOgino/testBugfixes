{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/StandardQueryParser#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/StandardQueryParser#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/StandardQueryParser#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  /**\n   * By default, it uses\n   * {@link MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT} when creating a\n   * prefix, wildcard and range queries. This implementation is generally\n   * preferable because it a) Runs faster b) Does not have the scarcity of terms\n   * unduly influence score c) avoids any {@link TooManyListenersException}\n   * exception. However, if your application really needs to use the\n   * old-fashioned boolean queries expansion rewriting and the above points are\n   * not relevant then use this change the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    getQueryConfigHandler().set(ConfigurationKeys.MULTI_TERM_REWRITE_METHOD, method);\n  }\n\n","sourceOld":"  /**\n   * By default, it uses\n   * {@link MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT} when creating a\n   * prefix, wildcard and range queries. This implementation is generally\n   * preferable because it a) Runs faster b) Does not have the scarcity of terms\n   * unduly influence score c) avoids any {@link TooManyListenersException}\n   * exception. However, if your application really needs to use the\n   * old-fashioned boolean queries expansion rewriting and the above points are\n   * not relevant then use this change the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    getQueryConfigHandler().set(ConfigurationKeys.MULTI_TERM_REWRITE_METHOD, method);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/StandardQueryParser#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/StandardQueryParser#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  /**\n   * By default, it uses\n   * {@link MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT} when creating a\n   * prefix, wildcard and range queries. This implementation is generally\n   * preferable because it a) Runs faster b) Does not have the scarcity of terms\n   * unduly influence score c) avoids any {@link TooManyListenersException}\n   * exception. However, if your application really needs to use the\n   * old-fashioned boolean queries expansion rewriting and the above points are\n   * not relevant then use this change the rewrite method.\n   */\n  @Override\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    getQueryConfigHandler().set(ConfigurationKeys.MULTI_TERM_REWRITE_METHOD, method);\n  }\n\n","sourceOld":"  /**\n   * By default, it uses\n   * {@link MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT} when creating a\n   * prefix, wildcard and range queries. This implementation is generally\n   * preferable because it a) Runs faster b) Does not have the scarcity of terms\n   * unduly influence score c) avoids any {@link TooManyListenersException}\n   * exception. However, if your application really needs to use the\n   * old-fashioned boolean queries expansion rewriting and the above points are\n   * not relevant then use this change the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    getQueryConfigHandler().set(ConfigurationKeys.MULTI_TERM_REWRITE_METHOD, method);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/StandardQueryParser#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/StandardQueryParser#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  /**\n   * By default, it uses\n   * {@link MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT} when creating a\n   * prefix, wildcard and range queries. This implementation is generally\n   * preferable because it a) Runs faster b) Does not have the scarcity of terms\n   * unduly influence score c) avoids any {@link TooManyListenersException}\n   * exception. However, if your application really needs to use the\n   * old-fashioned boolean queries expansion rewriting and the above points are\n   * not relevant then use this change the rewrite method.\n   */\n  @Override\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    getQueryConfigHandler().set(ConfigurationKeys.MULTI_TERM_REWRITE_METHOD, method);\n  }\n\n","sourceOld":"  /**\n   * By default, it uses\n   * {@link MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT} when creating a\n   * prefix, wildcard and range queries. This implementation is generally\n   * preferable because it a) Runs faster b) Does not have the scarcity of terms\n   * unduly influence score c) avoids any {@link TooManyListenersException}\n   * exception. However, if your application really needs to use the\n   * old-fashioned boolean queries expansion rewriting and the above points are\n   * not relevant then use this change the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    getQueryConfigHandler().set(ConfigurationKeys.MULTI_TERM_REWRITE_METHOD, method);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0","date":1412077943,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/StandardQueryParser#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/StandardQueryParser#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  /**\n   * By default, it uses\n   * {@link MultiTermQuery#CONSTANT_SCORE_FILTER_REWRITE} when creating a\n   * prefix, wildcard and range queries. This implementation is generally\n   * preferable because it a) Runs faster b) Does not have the scarcity of terms\n   * unduly influence score c) avoids any {@link TooManyListenersException}\n   * exception. However, if your application really needs to use the\n   * old-fashioned boolean queries expansion rewriting and the above points are\n   * not relevant then use this change the rewrite method.\n   */\n  @Override\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    getQueryConfigHandler().set(ConfigurationKeys.MULTI_TERM_REWRITE_METHOD, method);\n  }\n\n","sourceOld":"  /**\n   * By default, it uses\n   * {@link MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT} when creating a\n   * prefix, wildcard and range queries. This implementation is generally\n   * preferable because it a) Runs faster b) Does not have the scarcity of terms\n   * unduly influence score c) avoids any {@link TooManyListenersException}\n   * exception. However, if your application really needs to use the\n   * old-fashioned boolean queries expansion rewriting and the above points are\n   * not relevant then use this change the rewrite method.\n   */\n  @Override\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    getQueryConfigHandler().set(ConfigurationKeys.MULTI_TERM_REWRITE_METHOD, method);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/StandardQueryParser#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/StandardQueryParser#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  /**\n   * By default, it uses\n   * {@link MultiTermQuery#CONSTANT_SCORE_FILTER_REWRITE} when creating a\n   * prefix, wildcard and range queries. This implementation is generally\n   * preferable because it a) Runs faster b) Does not have the scarcity of terms\n   * unduly influence score c) avoids any {@link TooManyListenersException}\n   * exception. However, if your application really needs to use the\n   * old-fashioned boolean queries expansion rewriting and the above points are\n   * not relevant then use this change the rewrite method.\n   */\n  @Override\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    getQueryConfigHandler().set(ConfigurationKeys.MULTI_TERM_REWRITE_METHOD, method);\n  }\n\n","sourceOld":"  /**\n   * By default, it uses\n   * {@link MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT} when creating a\n   * prefix, wildcard and range queries. This implementation is generally\n   * preferable because it a) Runs faster b) Does not have the scarcity of terms\n   * unduly influence score c) avoids any {@link TooManyListenersException}\n   * exception. However, if your application really needs to use the\n   * old-fashioned boolean queries expansion rewriting and the above points are\n   * not relevant then use this change the rewrite method.\n   */\n  @Override\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    getQueryConfigHandler().set(ConfigurationKeys.MULTI_TERM_REWRITE_METHOD, method);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2713584a660051cd646423be682771e3bbd99985","date":1425046322,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/StandardQueryParser#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/StandardQueryParser#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  /**\n   * By default, it uses\n   * {@link MultiTermQuery#CONSTANT_SCORE_REWRITE} when creating a\n   * prefix, wildcard and range queries. This implementation is generally\n   * preferable because it a) Runs faster b) Does not have the scarcity of terms\n   * unduly influence score c) avoids any {@link TooManyListenersException}\n   * exception. However, if your application really needs to use the\n   * old-fashioned boolean queries expansion rewriting and the above points are\n   * not relevant then use this change the rewrite method.\n   */\n  @Override\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    getQueryConfigHandler().set(ConfigurationKeys.MULTI_TERM_REWRITE_METHOD, method);\n  }\n\n","sourceOld":"  /**\n   * By default, it uses\n   * {@link MultiTermQuery#CONSTANT_SCORE_FILTER_REWRITE} when creating a\n   * prefix, wildcard and range queries. This implementation is generally\n   * preferable because it a) Runs faster b) Does not have the scarcity of terms\n   * unduly influence score c) avoids any {@link TooManyListenersException}\n   * exception. However, if your application really needs to use the\n   * old-fashioned boolean queries expansion rewriting and the above points are\n   * not relevant then use this change the rewrite method.\n   */\n  @Override\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    getQueryConfigHandler().set(ConfigurationKeys.MULTI_TERM_REWRITE_METHOD, method);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/StandardQueryParser#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/StandardQueryParser#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  /**\n   * By default, it uses\n   * {@link MultiTermQuery#CONSTANT_SCORE_REWRITE} when creating a\n   * prefix, wildcard and range queries. This implementation is generally\n   * preferable because it a) Runs faster b) Does not have the scarcity of terms\n   * unduly influence score c) avoids any {@link TooManyListenersException}\n   * exception. However, if your application really needs to use the\n   * old-fashioned boolean queries expansion rewriting and the above points are\n   * not relevant then use this change the rewrite method.\n   */\n  @Override\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    getQueryConfigHandler().set(ConfigurationKeys.MULTI_TERM_REWRITE_METHOD, method);\n  }\n\n","sourceOld":"  /**\n   * By default, it uses\n   * {@link MultiTermQuery#CONSTANT_SCORE_FILTER_REWRITE} when creating a\n   * prefix, wildcard and range queries. This implementation is generally\n   * preferable because it a) Runs faster b) Does not have the scarcity of terms\n   * unduly influence score c) avoids any {@link TooManyListenersException}\n   * exception. However, if your application really needs to use the\n   * old-fashioned boolean queries expansion rewriting and the above points are\n   * not relevant then use this change the rewrite method.\n   */\n  @Override\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    getQueryConfigHandler().set(ConfigurationKeys.MULTI_TERM_REWRITE_METHOD, method);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0","2713584a660051cd646423be682771e3bbd99985"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2713584a660051cd646423be682771e3bbd99985":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["7530de27b87b961b51f01bd1299b7004d46e8823","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2713584a660051cd646423be682771e3bbd99985"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"2713584a660051cd646423be682771e3bbd99985":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d9a47902d6207303f5ed3e7aaca62ca33433af66","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2713584a660051cd646423be682771e3bbd99985","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}