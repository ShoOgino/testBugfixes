{"path":"solr/src/test/org/apache/solr/schema/TestBinaryField#testSimple().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/schema/TestBinaryField#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimple() throws Exception {\n    byte[] buf = new byte[10];\n    for (int i = 0; i < 10; i++) {\n      buf[i] = (byte) i;\n    }\n    SolrInputDocument doc = null;\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"data\", ByteBuffer.wrap(buf, 2, 5));\n    server.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.addField(\"data\", ByteBuffer.wrap(buf, 4, 3));\n    server.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"data\", buf);\n    server.add(doc);\n\n    server.commit();\n\n    QueryResponse resp = server.query(new SolrQuery(\"*:*\"));\n    SolrDocumentList res = resp.getResults();\n    List<Bean> beans = resp.getBeans(Bean.class);\n    assertEquals(3, res.size());\n    assertEquals(3, beans.size());\n    for (SolrDocument d : res) {\n      Integer id = (Integer) d.getFieldValue(\"id\");\n      byte[] data = (byte[]) d.getFieldValue(\"data\");\n      if (id == 1) {\n        assertEquals(5, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 2), b);\n        }\n\n      } else if (id == 2) {\n        assertEquals(3, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 4), b);\n        }\n\n\n      } else if (id == 3) {\n        assertEquals(10, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)i, b);\n        }\n\n      }\n\n    }\n    for (Bean d : beans) {\n      Integer id = d.id;\n      byte[] data = d.data;\n      if (id == 1) {\n        assertEquals(5, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 2), b);\n        }\n\n      } else if (id == 2) {\n        assertEquals(3, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 4), b);\n        }\n\n\n      } else if (id == 3) {\n        assertEquals(10, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)i, b);\n        }\n\n      }\n\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/schema/TestBinaryField#testSimple().mjava","sourceNew":null,"sourceOld":"  public void testSimple() throws Exception {\n    byte[] buf = new byte[10];\n    for (int i = 0; i < 10; i++) {\n      buf[i] = (byte) i;\n    }\n    SolrInputDocument doc = null;\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"data\", ByteBuffer.wrap(buf, 2, 5));\n    server.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.addField(\"data\", ByteBuffer.wrap(buf, 4, 3));\n    server.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"data\", buf);\n    server.add(doc);\n\n    server.commit();\n\n    QueryResponse resp = server.query(new SolrQuery(\"*:*\"));\n    SolrDocumentList res = resp.getResults();\n    List<Bean> beans = resp.getBeans(Bean.class);\n    assertEquals(3, res.size());\n    assertEquals(3, beans.size());\n    for (SolrDocument d : res) {\n      Integer id = (Integer) d.getFieldValue(\"id\");\n      byte[] data = (byte[]) d.getFieldValue(\"data\");\n      if (id == 1) {\n        assertEquals(5, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 2), b);\n        }\n\n      } else if (id == 2) {\n        assertEquals(3, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 4), b);\n        }\n\n\n      } else if (id == 3) {\n        assertEquals(10, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)i, b);\n        }\n\n      }\n\n    }\n    for (Bean d : beans) {\n      Integer id = d.id;\n      byte[] data = d.data;\n      if (id == 1) {\n        assertEquals(5, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 2), b);\n        }\n\n      } else if (id == 2) {\n        assertEquals(3, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 4), b);\n        }\n\n\n      } else if (id == 3) {\n        assertEquals(10, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)i, b);\n        }\n\n      }\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/schema/TestBinaryField#testSimple().mjava","pathOld":"src/test/org/apache/solr/schema/TestBinaryField#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    byte[] buf = new byte[10];\n    for (int i = 0; i < 10; i++) {\n      buf[i] = (byte) i;\n    }\n    SolrInputDocument doc = null;\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"data\", ByteBuffer.wrap(buf, 2, 5));\n    server.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.addField(\"data\", ByteBuffer.wrap(buf, 4, 3));\n    server.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"data\", buf);\n    server.add(doc);\n\n    server.commit();\n\n    QueryResponse resp = server.query(new SolrQuery(\"*:*\"));\n    SolrDocumentList res = resp.getResults();\n    List<Bean> beans = resp.getBeans(Bean.class);\n    assertEquals(3, res.size());\n    assertEquals(3, beans.size());\n    for (SolrDocument d : res) {\n      Integer id = (Integer) d.getFieldValue(\"id\");\n      byte[] data = (byte[]) d.getFieldValue(\"data\");\n      if (id == 1) {\n        assertEquals(5, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 2), b);\n        }\n\n      } else if (id == 2) {\n        assertEquals(3, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 4), b);\n        }\n\n\n      } else if (id == 3) {\n        assertEquals(10, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)i, b);\n        }\n\n      }\n\n    }\n    for (Bean d : beans) {\n      Integer id = d.id;\n      byte[] data = d.data;\n      if (id == 1) {\n        assertEquals(5, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 2), b);\n        }\n\n      } else if (id == 2) {\n        assertEquals(3, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 4), b);\n        }\n\n\n      } else if (id == 3) {\n        assertEquals(10, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)i, b);\n        }\n\n      }\n\n    }\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    byte[] buf = new byte[10];\n    for (int i = 0; i < 10; i++) {\n      buf[i] = (byte) i;\n    }\n    SolrInputDocument doc = null;\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"data\", ByteBuffer.wrap(buf, 2, 5));\n    server.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.addField(\"data\", ByteBuffer.wrap(buf, 4, 3));\n    server.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"data\", buf);\n    server.add(doc);\n\n    server.commit();\n\n    QueryResponse resp = server.query(new SolrQuery(\"*:*\"));\n    SolrDocumentList res = resp.getResults();\n    List<Bean> beans = resp.getBeans(Bean.class);\n    assertEquals(3, res.size());\n    assertEquals(3, beans.size());\n    for (SolrDocument d : res) {\n      Integer id = (Integer) d.getFieldValue(\"id\");\n      byte[] data = (byte[]) d.getFieldValue(\"data\");\n      if (id == 1) {\n        assertEquals(5, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 2), b);\n        }\n\n      } else if (id == 2) {\n        assertEquals(3, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 4), b);\n        }\n\n\n      } else if (id == 3) {\n        assertEquals(10, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)i, b);\n        }\n\n      }\n\n    }\n    for (Bean d : beans) {\n      Integer id = d.id;\n      byte[] data = d.data;\n      if (id == 1) {\n        assertEquals(5, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 2), b);\n        }\n\n      } else if (id == 2) {\n        assertEquals(3, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 4), b);\n        }\n\n\n      } else if (id == 3) {\n        assertEquals(10, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)i, b);\n        }\n\n      }\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/schema/TestBinaryField#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimple() throws Exception {\n    byte[] buf = new byte[10];\n    for (int i = 0; i < 10; i++) {\n      buf[i] = (byte) i;\n    }\n    SolrInputDocument doc = null;\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"data\", ByteBuffer.wrap(buf, 2, 5));\n    server.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.addField(\"data\", ByteBuffer.wrap(buf, 4, 3));\n    server.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"data\", buf);\n    server.add(doc);\n\n    server.commit();\n\n    QueryResponse resp = server.query(new SolrQuery(\"*:*\"));\n    SolrDocumentList res = resp.getResults();\n    List<Bean> beans = resp.getBeans(Bean.class);\n    assertEquals(3, res.size());\n    assertEquals(3, beans.size());\n    for (SolrDocument d : res) {\n      Integer id = (Integer) d.getFieldValue(\"id\");\n      byte[] data = (byte[]) d.getFieldValue(\"data\");\n      if (id == 1) {\n        assertEquals(5, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 2), b);\n        }\n\n      } else if (id == 2) {\n        assertEquals(3, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 4), b);\n        }\n\n\n      } else if (id == 3) {\n        assertEquals(10, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)i, b);\n        }\n\n      }\n\n    }\n    for (Bean d : beans) {\n      Integer id = d.id;\n      byte[] data = d.data;\n      if (id == 1) {\n        assertEquals(5, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 2), b);\n        }\n\n      } else if (id == 2) {\n        assertEquals(3, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 4), b);\n        }\n\n\n      } else if (id == 3) {\n        assertEquals(10, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)i, b);\n        }\n\n      }\n\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestBinaryField#testSimple().mjava","pathOld":"solr/src/test/org/apache/solr/schema/TestBinaryField#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    byte[] buf = new byte[10];\n    for (int i = 0; i < 10; i++) {\n      buf[i] = (byte) i;\n    }\n    SolrInputDocument doc = null;\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"data\", ByteBuffer.wrap(buf, 2, 5));\n    server.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.addField(\"data\", ByteBuffer.wrap(buf, 4, 3));\n    server.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"data\", buf);\n    server.add(doc);\n\n    server.commit();\n\n    QueryResponse resp = server.query(new SolrQuery(\"*:*\"));\n    SolrDocumentList res = resp.getResults();\n    List<Bean> beans = resp.getBeans(Bean.class);\n    assertEquals(3, res.size());\n    assertEquals(3, beans.size());\n    for (SolrDocument d : res) {\n      Integer id = (Integer) d.getFieldValue(\"id\");\n      byte[] data = (byte[]) d.getFieldValue(\"data\");\n      if (id == 1) {\n        assertEquals(5, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 2), b);\n        }\n\n      } else if (id == 2) {\n        assertEquals(3, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 4), b);\n        }\n\n\n      } else if (id == 3) {\n        assertEquals(10, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)i, b);\n        }\n\n      }\n\n    }\n    for (Bean d : beans) {\n      Integer id = d.id;\n      byte[] data = d.data;\n      if (id == 1) {\n        assertEquals(5, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 2), b);\n        }\n\n      } else if (id == 2) {\n        assertEquals(3, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 4), b);\n        }\n\n\n      } else if (id == 3) {\n        assertEquals(10, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)i, b);\n        }\n\n      }\n\n    }\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    byte[] buf = new byte[10];\n    for (int i = 0; i < 10; i++) {\n      buf[i] = (byte) i;\n    }\n    SolrInputDocument doc = null;\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"data\", ByteBuffer.wrap(buf, 2, 5));\n    server.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.addField(\"data\", ByteBuffer.wrap(buf, 4, 3));\n    server.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"data\", buf);\n    server.add(doc);\n\n    server.commit();\n\n    QueryResponse resp = server.query(new SolrQuery(\"*:*\"));\n    SolrDocumentList res = resp.getResults();\n    List<Bean> beans = resp.getBeans(Bean.class);\n    assertEquals(3, res.size());\n    assertEquals(3, beans.size());\n    for (SolrDocument d : res) {\n      Integer id = (Integer) d.getFieldValue(\"id\");\n      byte[] data = (byte[]) d.getFieldValue(\"data\");\n      if (id == 1) {\n        assertEquals(5, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 2), b);\n        }\n\n      } else if (id == 2) {\n        assertEquals(3, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 4), b);\n        }\n\n\n      } else if (id == 3) {\n        assertEquals(10, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)i, b);\n        }\n\n      }\n\n    }\n    for (Bean d : beans) {\n      Integer id = d.id;\n      byte[] data = d.data;\n      if (id == 1) {\n        assertEquals(5, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 2), b);\n        }\n\n      } else if (id == 2) {\n        assertEquals(3, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 4), b);\n        }\n\n\n      } else if (id == 3) {\n        assertEquals(10, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)i, b);\n        }\n\n      }\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestBinaryField#testSimple().mjava","pathOld":"solr/src/test/org/apache/solr/schema/TestBinaryField#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    byte[] buf = new byte[10];\n    for (int i = 0; i < 10; i++) {\n      buf[i] = (byte) i;\n    }\n    SolrInputDocument doc = null;\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"data\", ByteBuffer.wrap(buf, 2, 5));\n    server.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.addField(\"data\", ByteBuffer.wrap(buf, 4, 3));\n    server.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"data\", buf);\n    server.add(doc);\n\n    server.commit();\n\n    QueryResponse resp = server.query(new SolrQuery(\"*:*\"));\n    SolrDocumentList res = resp.getResults();\n    List<Bean> beans = resp.getBeans(Bean.class);\n    assertEquals(3, res.size());\n    assertEquals(3, beans.size());\n    for (SolrDocument d : res) {\n      Integer id = (Integer) d.getFieldValue(\"id\");\n      byte[] data = (byte[]) d.getFieldValue(\"data\");\n      if (id == 1) {\n        assertEquals(5, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 2), b);\n        }\n\n      } else if (id == 2) {\n        assertEquals(3, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 4), b);\n        }\n\n\n      } else if (id == 3) {\n        assertEquals(10, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)i, b);\n        }\n\n      }\n\n    }\n    for (Bean d : beans) {\n      Integer id = d.id;\n      byte[] data = d.data;\n      if (id == 1) {\n        assertEquals(5, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 2), b);\n        }\n\n      } else if (id == 2) {\n        assertEquals(3, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 4), b);\n        }\n\n\n      } else if (id == 3) {\n        assertEquals(10, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)i, b);\n        }\n\n      }\n\n    }\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    byte[] buf = new byte[10];\n    for (int i = 0; i < 10; i++) {\n      buf[i] = (byte) i;\n    }\n    SolrInputDocument doc = null;\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"data\", ByteBuffer.wrap(buf, 2, 5));\n    server.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.addField(\"data\", ByteBuffer.wrap(buf, 4, 3));\n    server.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"data\", buf);\n    server.add(doc);\n\n    server.commit();\n\n    QueryResponse resp = server.query(new SolrQuery(\"*:*\"));\n    SolrDocumentList res = resp.getResults();\n    List<Bean> beans = resp.getBeans(Bean.class);\n    assertEquals(3, res.size());\n    assertEquals(3, beans.size());\n    for (SolrDocument d : res) {\n      Integer id = (Integer) d.getFieldValue(\"id\");\n      byte[] data = (byte[]) d.getFieldValue(\"data\");\n      if (id == 1) {\n        assertEquals(5, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 2), b);\n        }\n\n      } else if (id == 2) {\n        assertEquals(3, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 4), b);\n        }\n\n\n      } else if (id == 3) {\n        assertEquals(10, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)i, b);\n        }\n\n      }\n\n    }\n    for (Bean d : beans) {\n      Integer id = d.id;\n      byte[] data = d.data;\n      if (id == 1) {\n        assertEquals(5, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 2), b);\n        }\n\n      } else if (id == 2) {\n        assertEquals(3, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 4), b);\n        }\n\n\n      } else if (id == 3) {\n        assertEquals(10, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)i, b);\n        }\n\n      }\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestBinaryField#testSimple().mjava","pathOld":"solr/src/test/org/apache/solr/schema/TestBinaryField#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    byte[] buf = new byte[10];\n    for (int i = 0; i < 10; i++) {\n      buf[i] = (byte) i;\n    }\n    SolrInputDocument doc = null;\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"data\", ByteBuffer.wrap(buf, 2, 5));\n    server.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.addField(\"data\", ByteBuffer.wrap(buf, 4, 3));\n    server.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"data\", buf);\n    server.add(doc);\n\n    server.commit();\n\n    QueryResponse resp = server.query(new SolrQuery(\"*:*\"));\n    SolrDocumentList res = resp.getResults();\n    List<Bean> beans = resp.getBeans(Bean.class);\n    assertEquals(3, res.size());\n    assertEquals(3, beans.size());\n    for (SolrDocument d : res) {\n      Integer id = (Integer) d.getFieldValue(\"id\");\n      byte[] data = (byte[]) d.getFieldValue(\"data\");\n      if (id == 1) {\n        assertEquals(5, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 2), b);\n        }\n\n      } else if (id == 2) {\n        assertEquals(3, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 4), b);\n        }\n\n\n      } else if (id == 3) {\n        assertEquals(10, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)i, b);\n        }\n\n      }\n\n    }\n    for (Bean d : beans) {\n      Integer id = d.id;\n      byte[] data = d.data;\n      if (id == 1) {\n        assertEquals(5, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 2), b);\n        }\n\n      } else if (id == 2) {\n        assertEquals(3, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 4), b);\n        }\n\n\n      } else if (id == 3) {\n        assertEquals(10, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)i, b);\n        }\n\n      }\n\n    }\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    byte[] buf = new byte[10];\n    for (int i = 0; i < 10; i++) {\n      buf[i] = (byte) i;\n    }\n    SolrInputDocument doc = null;\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"data\", ByteBuffer.wrap(buf, 2, 5));\n    server.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.addField(\"data\", ByteBuffer.wrap(buf, 4, 3));\n    server.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"data\", buf);\n    server.add(doc);\n\n    server.commit();\n\n    QueryResponse resp = server.query(new SolrQuery(\"*:*\"));\n    SolrDocumentList res = resp.getResults();\n    List<Bean> beans = resp.getBeans(Bean.class);\n    assertEquals(3, res.size());\n    assertEquals(3, beans.size());\n    for (SolrDocument d : res) {\n      Integer id = (Integer) d.getFieldValue(\"id\");\n      byte[] data = (byte[]) d.getFieldValue(\"data\");\n      if (id == 1) {\n        assertEquals(5, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 2), b);\n        }\n\n      } else if (id == 2) {\n        assertEquals(3, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 4), b);\n        }\n\n\n      } else if (id == 3) {\n        assertEquals(10, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)i, b);\n        }\n\n      }\n\n    }\n    for (Bean d : beans) {\n      Integer id = d.id;\n      byte[] data = d.data;\n      if (id == 1) {\n        assertEquals(5, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 2), b);\n        }\n\n      } else if (id == 2) {\n        assertEquals(3, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 4), b);\n        }\n\n\n      } else if (id == 3) {\n        assertEquals(10, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)i, b);\n        }\n\n      }\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["1da8d55113b689b06716246649de6f62430f15c0","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}