{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#distribSetUp().mjava","commits":[{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#distribSetUp().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#setUp().mjava","sourceNew":"  @Override\n  public void distribSetUp() throws Exception {\n    super.distribSetUp();\n    // ignoreException(\".*\");\n    if (sliceCount > 0) {\n      System.setProperty(\"numShards\", Integer.toString(sliceCount));\n    } else {\n      System.clearProperty(\"numShards\");\n    }\n\n    if (isSSLMode()) {\n      System.clearProperty(\"urlScheme\");\n      ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      try {\n        zkStateReader.getZkClient().create(ZkStateReader.CLUSTER_PROPS,\n          ZkStateReader.toJSON(Collections.singletonMap(\"urlScheme\",\"https\")),\n          CreateMode.PERSISTENT, true);\n      } finally {\n        zkStateReader.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Before\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    // ignoreException(\".*\");\n    if (sliceCount > 0) {\n      System.setProperty(\"numShards\", Integer.toString(sliceCount));\n    } else {\n      System.clearProperty(\"numShards\");\n    }\n    \n    if (isSSLMode()) {\n      System.clearProperty(\"urlScheme\");\n      ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      try {\n        zkStateReader.getZkClient().create(ZkStateReader.CLUSTER_PROPS,\n          ZkStateReader.toJSON(Collections.singletonMap(\"urlScheme\",\"https\")), \n          CreateMode.PERSISTENT, true);\n      } finally {\n        zkStateReader.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98287baa2c8d136e801f366a73e27a23285b7b98","date":1427241813,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#distribSetUp().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#distribSetUp().mjava","sourceNew":"  @Override\n  public void distribSetUp() throws Exception {\n    super.distribSetUp();\n    // ignoreException(\".*\");\n    if (sliceCount > 0) {\n      System.setProperty(\"numShards\", Integer.toString(sliceCount));\n    } else {\n      System.clearProperty(\"numShards\");\n    }\n\n    if (isSSLMode()) {\n      System.clearProperty(\"urlScheme\");\n      try (ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT)) {\n        zkStateReader.getZkClient().create(ZkStateReader.CLUSTER_PROPS,\n            ZkStateReader.toJSON(Collections.singletonMap(\"urlScheme\", \"https\")),\n            CreateMode.PERSISTENT, true);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void distribSetUp() throws Exception {\n    super.distribSetUp();\n    // ignoreException(\".*\");\n    if (sliceCount > 0) {\n      System.setProperty(\"numShards\", Integer.toString(sliceCount));\n    } else {\n      System.clearProperty(\"numShards\");\n    }\n\n    if (isSSLMode()) {\n      System.clearProperty(\"urlScheme\");\n      ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      try {\n        zkStateReader.getZkClient().create(ZkStateReader.CLUSTER_PROPS,\n          ZkStateReader.toJSON(Collections.singletonMap(\"urlScheme\",\"https\")),\n          CreateMode.PERSISTENT, true);\n      } finally {\n        zkStateReader.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#distribSetUp().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#distribSetUp().mjava","sourceNew":"  @Override\n  public void distribSetUp() throws Exception {\n    super.distribSetUp();\n    // ignoreException(\".*\");\n    if (sliceCount > 0) {\n      System.setProperty(\"numShards\", Integer.toString(sliceCount));\n    } else {\n      System.clearProperty(\"numShards\");\n    }\n\n    if (isSSLMode()) {\n      System.clearProperty(\"urlScheme\");\n      try (ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT)) {\n        zkStateReader.getZkClient().create(ZkStateReader.CLUSTER_PROPS,\n            ZkStateReader.toJSON(Collections.singletonMap(\"urlScheme\", \"https\")),\n            CreateMode.PERSISTENT, true);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void distribSetUp() throws Exception {\n    super.distribSetUp();\n    // ignoreException(\".*\");\n    if (sliceCount > 0) {\n      System.setProperty(\"numShards\", Integer.toString(sliceCount));\n    } else {\n      System.clearProperty(\"numShards\");\n    }\n\n    if (isSSLMode()) {\n      System.clearProperty(\"urlScheme\");\n      ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);\n      try {\n        zkStateReader.getZkClient().create(ZkStateReader.CLUSTER_PROPS,\n          ZkStateReader.toJSON(Collections.singletonMap(\"urlScheme\",\"https\")),\n          CreateMode.PERSISTENT, true);\n      } finally {\n        zkStateReader.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#distribSetUp().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#distribSetUp().mjava","sourceNew":"  @Override\n  public void distribSetUp() throws Exception {\n    super.distribSetUp();\n    // ignoreException(\".*\");\n    if (sliceCount > 0) {\n      System.setProperty(\"numShards\", Integer.toString(sliceCount));\n    } else {\n      System.clearProperty(\"numShards\");\n    }\n\n    if (isSSLMode()) {\n      System.clearProperty(\"urlScheme\");\n      try (ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT)) {\n        zkStateReader.getZkClient().create(ZkStateReader.CLUSTER_PROPS,\n            Utils.toJSON(Collections.singletonMap(\"urlScheme\", \"https\")),\n            CreateMode.PERSISTENT, true);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void distribSetUp() throws Exception {\n    super.distribSetUp();\n    // ignoreException(\".*\");\n    if (sliceCount > 0) {\n      System.setProperty(\"numShards\", Integer.toString(sliceCount));\n    } else {\n      System.clearProperty(\"numShards\");\n    }\n\n    if (isSSLMode()) {\n      System.clearProperty(\"urlScheme\");\n      try (ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT)) {\n        zkStateReader.getZkClient().create(ZkStateReader.CLUSTER_PROPS,\n            ZkStateReader.toJSON(Collections.singletonMap(\"urlScheme\", \"https\")),\n            CreateMode.PERSISTENT, true);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#distribSetUp().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#distribSetUp().mjava","sourceNew":"  @Override\n  public void distribSetUp() throws Exception {\n    super.distribSetUp();\n    // ignoreException(\".*\");\n    if (sliceCount > 0) {\n      System.setProperty(\"numShards\", Integer.toString(sliceCount));\n    } else {\n      System.clearProperty(\"numShards\");\n    }\n\n    if (isSSLMode()) {\n      System.clearProperty(\"urlScheme\");\n      try (ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT)) {\n        zkStateReader.getZkClient().create(ZkStateReader.CLUSTER_PROPS,\n            Utils.toJSON(Collections.singletonMap(\"urlScheme\", \"https\")),\n            CreateMode.PERSISTENT, true);\n      }\n    }\n    if (useTlogReplicas()) {\n      log.info(\"Will use {} replicas unless explicitly asked otherwise\", Replica.Type.TLOG);\n    } else {\n      log.info(\"Will use {} replicas unless explicitly asked otherwise\", Replica.Type.NRT);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void distribSetUp() throws Exception {\n    super.distribSetUp();\n    // ignoreException(\".*\");\n    if (sliceCount > 0) {\n      System.setProperty(\"numShards\", Integer.toString(sliceCount));\n    } else {\n      System.clearProperty(\"numShards\");\n    }\n\n    if (isSSLMode()) {\n      System.clearProperty(\"urlScheme\");\n      try (ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT)) {\n        zkStateReader.getZkClient().create(ZkStateReader.CLUSTER_PROPS,\n            Utils.toJSON(Collections.singletonMap(\"urlScheme\", \"https\")),\n            CreateMode.PERSISTENT, true);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#distribSetUp().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#distribSetUp().mjava","sourceNew":"  @Override\n  public void distribSetUp() throws Exception {\n    super.distribSetUp();\n    // ignoreException(\".*\");\n    if (sliceCount > 0) {\n      System.setProperty(\"numShards\", Integer.toString(sliceCount));\n    } else {\n      System.clearProperty(\"numShards\");\n    }\n\n    if (isSSLMode()) {\n      System.clearProperty(\"urlScheme\");\n      try (ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT)) {\n        zkStateReader.getZkClient().create(ZkStateReader.CLUSTER_PROPS,\n            Utils.toJSON(Collections.singletonMap(\"urlScheme\", \"https\")),\n            CreateMode.PERSISTENT, true);\n      }\n    }\n    if (useTlogReplicas()) {\n      log.info(\"Will use {} replicas unless explicitly asked otherwise\", Replica.Type.TLOG);\n    } else {\n      log.info(\"Will use {} replicas unless explicitly asked otherwise\", Replica.Type.NRT);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void distribSetUp() throws Exception {\n    super.distribSetUp();\n    // ignoreException(\".*\");\n    if (sliceCount > 0) {\n      System.setProperty(\"numShards\", Integer.toString(sliceCount));\n    } else {\n      System.clearProperty(\"numShards\");\n    }\n\n    if (isSSLMode()) {\n      System.clearProperty(\"urlScheme\");\n      try (ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT)) {\n        zkStateReader.getZkClient().create(ZkStateReader.CLUSTER_PROPS,\n            Utils.toJSON(Collections.singletonMap(\"urlScheme\", \"https\")),\n            CreateMode.PERSISTENT, true);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9b4296bd51ca61b482138791478afdd0f7d3a3d","date":1498058739,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#distribSetUp().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#distribSetUp().mjava","sourceNew":"  @Override\n  public void distribSetUp() throws Exception {\n    super.distribSetUp();\n    // ignoreException(\".*\");\n    if (sliceCount > 0) {\n      System.setProperty(\"numShards\", Integer.toString(sliceCount));\n    } else {\n      System.clearProperty(\"numShards\");\n    }\n\n    if (isSSLMode()) {\n      System.clearProperty(\"urlScheme\");\n      try (ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT)) {\n        try {\n          zkStateReader.getZkClient().create(ZkStateReader.CLUSTER_PROPS,\n              Utils.toJSON(Collections.singletonMap(\"urlScheme\", \"https\")),\n              CreateMode.PERSISTENT, true);\n        } catch (KeeperException.NodeExistsException e) {\n          ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(ZkStateReader.CLUSTER_PROPS,\n              null, null, true));\n          zkStateReader.getZkClient().setData(ZkStateReader.CLUSTER_PROPS, Utils.toJSON(props.plus(\"urlScheme\", \"https\")), true);\n        }\n      }\n    }\n    if (useTlogReplicas()) {\n      log.info(\"Will use {} replicas unless explicitly asked otherwise\", Replica.Type.TLOG);\n    } else {\n      log.info(\"Will use {} replicas unless explicitly asked otherwise\", Replica.Type.NRT);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void distribSetUp() throws Exception {\n    super.distribSetUp();\n    // ignoreException(\".*\");\n    if (sliceCount > 0) {\n      System.setProperty(\"numShards\", Integer.toString(sliceCount));\n    } else {\n      System.clearProperty(\"numShards\");\n    }\n\n    if (isSSLMode()) {\n      System.clearProperty(\"urlScheme\");\n      try (ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT)) {\n        zkStateReader.getZkClient().create(ZkStateReader.CLUSTER_PROPS,\n            Utils.toJSON(Collections.singletonMap(\"urlScheme\", \"https\")),\n            CreateMode.PERSISTENT, true);\n      }\n    }\n    if (useTlogReplicas()) {\n      log.info(\"Will use {} replicas unless explicitly asked otherwise\", Replica.Type.TLOG);\n    } else {\n      log.info(\"Will use {} replicas unless explicitly asked otherwise\", Replica.Type.NRT);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#distribSetUp().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#distribSetUp().mjava","sourceNew":"  @Override\n  public void distribSetUp() throws Exception {\n    super.distribSetUp();\n    // ignoreException(\".*\");\n    if (sliceCount > 0) {\n      System.setProperty(\"numShards\", Integer.toString(sliceCount));\n    } else {\n      System.clearProperty(\"numShards\");\n    }\n\n    if (isSSLMode()) {\n      System.clearProperty(\"urlScheme\");\n      try (ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT)) {\n        try {\n          zkStateReader.getZkClient().create(ZkStateReader.CLUSTER_PROPS,\n              Utils.toJSON(Collections.singletonMap(\"urlScheme\", \"https\")),\n              CreateMode.PERSISTENT, true);\n        } catch (KeeperException.NodeExistsException e) {\n          ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(ZkStateReader.CLUSTER_PROPS,\n              null, null, true));\n          zkStateReader.getZkClient().setData(ZkStateReader.CLUSTER_PROPS, Utils.toJSON(props.plus(\"urlScheme\", \"https\")), true);\n        }\n      }\n    }\n    if (useTlogReplicas()) {\n      log.info(\"Will use {} replicas unless explicitly asked otherwise\", Replica.Type.TLOG);\n    } else {\n      log.info(\"Will use {} replicas unless explicitly asked otherwise\", Replica.Type.NRT);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void distribSetUp() throws Exception {\n    super.distribSetUp();\n    // ignoreException(\".*\");\n    if (sliceCount > 0) {\n      System.setProperty(\"numShards\", Integer.toString(sliceCount));\n    } else {\n      System.clearProperty(\"numShards\");\n    }\n\n    if (isSSLMode()) {\n      System.clearProperty(\"urlScheme\");\n      try (ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT)) {\n        zkStateReader.getZkClient().create(ZkStateReader.CLUSTER_PROPS,\n            Utils.toJSON(Collections.singletonMap(\"urlScheme\", \"https\")),\n            CreateMode.PERSISTENT, true);\n      }\n    }\n    if (useTlogReplicas()) {\n      log.info(\"Will use {} replicas unless explicitly asked otherwise\", Replica.Type.TLOG);\n    } else {\n      log.info(\"Will use {} replicas unless explicitly asked otherwise\", Replica.Type.NRT);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#distribSetUp().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#distribSetUp().mjava","sourceNew":"  @Override\n  public void distribSetUp() throws Exception {\n    super.distribSetUp();\n    // ignoreException(\".*\");\n    if (sliceCount > 0) {\n      System.setProperty(\"numShards\", Integer.toString(sliceCount));\n    } else {\n      System.clearProperty(\"numShards\");\n    }\n\n    if (isSSLMode()) {\n      System.clearProperty(\"urlScheme\");\n      try (ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT)) {\n        try {\n          zkStateReader.getZkClient().create(ZkStateReader.CLUSTER_PROPS,\n              Utils.toJSON(Collections.singletonMap(\"urlScheme\", \"https\")),\n              CreateMode.PERSISTENT, true);\n        } catch (KeeperException.NodeExistsException e) {\n          ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(ZkStateReader.CLUSTER_PROPS,\n              null, null, true));\n          zkStateReader.getZkClient().setData(ZkStateReader.CLUSTER_PROPS, Utils.toJSON(props.plus(\"urlScheme\", \"https\")), true);\n        }\n      }\n    }\n    if (useTlogReplicas()) {\n      log.info(\"Will use {} replicas unless explicitly asked otherwise\", Replica.Type.TLOG);\n    } else {\n      log.info(\"Will use {} replicas unless explicitly asked otherwise\", Replica.Type.NRT);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void distribSetUp() throws Exception {\n    super.distribSetUp();\n    // ignoreException(\".*\");\n    if (sliceCount > 0) {\n      System.setProperty(\"numShards\", Integer.toString(sliceCount));\n    } else {\n      System.clearProperty(\"numShards\");\n    }\n\n    if (isSSLMode()) {\n      System.clearProperty(\"urlScheme\");\n      try (ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT)) {\n        zkStateReader.getZkClient().create(ZkStateReader.CLUSTER_PROPS,\n            Utils.toJSON(Collections.singletonMap(\"urlScheme\", \"https\")),\n            CreateMode.PERSISTENT, true);\n      }\n    }\n    if (useTlogReplicas()) {\n      log.info(\"Will use {} replicas unless explicitly asked otherwise\", Replica.Type.TLOG);\n    } else {\n      log.info(\"Will use {} replicas unless explicitly asked otherwise\", Replica.Type.NRT);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#distribSetUp().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#distribSetUp().mjava","sourceNew":"  @Override\n  public void distribSetUp() throws Exception {\n    super.distribSetUp();\n    // ignoreException(\".*\");\n    \n    cloudInit = false;\n    \n    if (sliceCount > 0) {\n      System.setProperty(\"numShards\", Integer.toString(sliceCount));\n    } else {\n      System.clearProperty(\"numShards\");\n    }\n\n    if (isSSLMode()) {\n      System.clearProperty(\"urlScheme\");\n      try (ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT)) {\n        try {\n          zkStateReader.getZkClient().create(ZkStateReader.CLUSTER_PROPS,\n              Utils.toJSON(Collections.singletonMap(\"urlScheme\", \"https\")),\n              CreateMode.PERSISTENT, true);\n        } catch (KeeperException.NodeExistsException e) {\n          ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(ZkStateReader.CLUSTER_PROPS,\n              null, null, true));\n          zkStateReader.getZkClient().setData(ZkStateReader.CLUSTER_PROPS, Utils.toJSON(props.plus(\"urlScheme\", \"https\")), true);\n        }\n      }\n    }\n    if (useTlogReplicas()) {\n      log.info(\"Will use {} replicas unless explicitly asked otherwise\", Replica.Type.TLOG);\n    } else {\n      log.info(\"Will use {} replicas unless explicitly asked otherwise\", Replica.Type.NRT);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void distribSetUp() throws Exception {\n    super.distribSetUp();\n    // ignoreException(\".*\");\n    if (sliceCount > 0) {\n      System.setProperty(\"numShards\", Integer.toString(sliceCount));\n    } else {\n      System.clearProperty(\"numShards\");\n    }\n\n    if (isSSLMode()) {\n      System.clearProperty(\"urlScheme\");\n      try (ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT)) {\n        try {\n          zkStateReader.getZkClient().create(ZkStateReader.CLUSTER_PROPS,\n              Utils.toJSON(Collections.singletonMap(\"urlScheme\", \"https\")),\n              CreateMode.PERSISTENT, true);\n        } catch (KeeperException.NodeExistsException e) {\n          ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(ZkStateReader.CLUSTER_PROPS,\n              null, null, true));\n          zkStateReader.getZkClient().setData(ZkStateReader.CLUSTER_PROPS, Utils.toJSON(props.plus(\"urlScheme\", \"https\")), true);\n        }\n      }\n    }\n    if (useTlogReplicas()) {\n      log.info(\"Will use {} replicas unless explicitly asked otherwise\", Replica.Type.TLOG);\n    } else {\n      log.info(\"Will use {} replicas unless explicitly asked otherwise\", Replica.Type.NRT);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["b693a83132c9e45afcd564fd65a25b60ed80388b","61c45e99cf6676da48f19d7511c73712ad39402b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["abb23fcc2461782ab204e61213240feb77d355aa","98287baa2c8d136e801f366a73e27a23285b7b98"],"61c45e99cf6676da48f19d7511c73712ad39402b":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["61c45e99cf6676da48f19d7511c73712ad39402b"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["28288370235ed02234a64753cdbf0c6ec096304a"],"abb23fcc2461782ab204e61213240feb77d355aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b693a83132c9e45afcd564fd65a25b60ed80388b":["98287baa2c8d136e801f366a73e27a23285b7b98"],"98287baa2c8d136e801f366a73e27a23285b7b98":["abb23fcc2461782ab204e61213240feb77d355aa"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["e9017cf144952056066919f1ebc7897ff9bd71b1","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"28288370235ed02234a64753cdbf0c6ec096304a":["61c45e99cf6676da48f19d7511c73712ad39402b","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","a9b4296bd51ca61b482138791478afdd0f7d3a3d","28288370235ed02234a64753cdbf0c6ec096304a"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"abb23fcc2461782ab204e61213240feb77d355aa":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","98287baa2c8d136e801f366a73e27a23285b7b98"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["abb23fcc2461782ab204e61213240feb77d355aa"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b"],"98287baa2c8d136e801f366a73e27a23285b7b98":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b693a83132c9e45afcd564fd65a25b60ed80388b"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}