{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newPolygonQuery(String,Polygon...).mjava","commits":[{"id":"7593e6c5cc33e73fa12f7d1b0035d218d3a36309","date":1459810619,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newPolygonQuery(String,Polygon...).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Create a query for matching a polygon.\n   * <p>\n   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.\n   * @param field field name. must not be null.\n   * @param polygons is the list of polygons to use to construct the query; must be at least one.\n   * @return query matching points within this polygon\n   */\n  public static Query newPolygonQuery(final String field, final Polygon... polygons) {\n    if (polygons.length < 1) {\n      throw new IllegalArgumentException(\"need at least one polygon\");\n    }\n    final GeoShape shape;\n    if (polygons.length == 1) {\n      shape = fromPolygon(polygons[0], false);\n    } else {\n      final GeoCompositePolygon poly = new GeoCompositePolygon();\n      for (final Polygon p : polygons) {\n        poly.addShape(fromPolygon(p, false));\n      }\n      shape = poly;\n    }\n    return newShapeQuery(field, shape);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09af2c9610ce53a4b25fd99344299b40318a4a1a","date":1459876565,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newPolygonQuery(String,Polygon...).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Create a query for matching a polygon.\n   * <p>\n   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.\n   * @param field field name. must not be null.\n   * @param polygons is the list of polygons to use to construct the query; must be at least one.\n   * @return query matching points within this polygon\n   */\n  public static Query newPolygonQuery(final String field, final Polygon... polygons) {\n    if (polygons.length < 1) {\n      throw new IllegalArgumentException(\"need at least one polygon\");\n    }\n    final GeoShape shape;\n    if (polygons.length == 1) {\n      shape = fromPolygon(polygons[0], false);\n    } else {\n      final GeoCompositePolygon poly = new GeoCompositePolygon();\n      for (final Polygon p : polygons) {\n        poly.addShape(fromPolygon(p, false));\n      }\n      shape = poly;\n    }\n    return newShapeQuery(field, shape);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"536a864ce38bf14fb3f072a3129a389e95200e20","date":1461068886,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newPolygonQuery(String,Polygon...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newPolygonQuery(String,Polygon...).mjava","sourceNew":"  /** \n   * Create a query for matching a polygon.\n   * <p>\n   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.\n   * @param field field name. must not be null.\n   * @param polygons is the list of polygons to use to construct the query; must be at least one.\n   * @return query matching points within this polygon\n   */\n  public static Query newPolygonQuery(final String field, final Polygon... polygons) {\n    if (polygons.length < 1) {\n      throw new IllegalArgumentException(\"need at least one polygon\");\n    }\n    final GeoShape shape;\n    if (polygons.length == 1) {\n      final GeoShape component = fromPolygon(polygons[0], false);\n      if (component == null) {\n        // Polygon is degenerate\n        shape = new GeoCompositePolygon();\n      } else {\n        shape = component;\n      }\n    } else {\n      final GeoCompositePolygon poly = new GeoCompositePolygon();\n      for (final Polygon p : polygons) {\n        final GeoPolygon component = fromPolygon(p, false);\n        if (component != null) {\n          poly.addShape(component);\n        }\n      }\n      shape = poly;\n    }\n    return newShapeQuery(field, shape);\n  }\n\n","sourceOld":"  /** \n   * Create a query for matching a polygon.\n   * <p>\n   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.\n   * @param field field name. must not be null.\n   * @param polygons is the list of polygons to use to construct the query; must be at least one.\n   * @return query matching points within this polygon\n   */\n  public static Query newPolygonQuery(final String field, final Polygon... polygons) {\n    if (polygons.length < 1) {\n      throw new IllegalArgumentException(\"need at least one polygon\");\n    }\n    final GeoShape shape;\n    if (polygons.length == 1) {\n      shape = fromPolygon(polygons[0], false);\n    } else {\n      final GeoCompositePolygon poly = new GeoCompositePolygon();\n      for (final Polygon p : polygons) {\n        poly.addShape(fromPolygon(p, false));\n      }\n      shape = poly;\n    }\n    return newShapeQuery(field, shape);\n  }\n\n","bugFix":null,"bugIntro":["ba81c43c13d92ea74a6388471cf358eb7068744d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2c4ea54ac6c0e876359818ff9634e6c179769c1e","date":1461111125,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newPolygonQuery(String,Polygon...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newPolygonQuery(String,Polygon...).mjava","sourceNew":"  /** \n   * Create a query for matching a polygon.\n   * <p>\n   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.\n   * @param field field name. must not be null.\n   * @param polygons is the list of polygons to use to construct the query; must be at least one.\n   * @return query matching points within this polygon\n   */\n  public static Query newPolygonQuery(final String field, final Polygon... polygons) {\n    //System.err.println(\"Creating polygon...\");\n    if (polygons.length < 1) {\n      throw new IllegalArgumentException(\"need at least one polygon\");\n    }\n    final GeoShape shape;\n    if (polygons.length == 1) {\n      final GeoShape component = fromPolygon(polygons[0], false);\n      if (component == null) {\n        // Polygon is degenerate\n        shape = new GeoCompositePolygon();\n      } else {\n        shape = component;\n      }\n    } else {\n      final GeoCompositePolygon poly = new GeoCompositePolygon();\n      for (final Polygon p : polygons) {\n        final GeoPolygon component = fromPolygon(p, false);\n        if (component != null) {\n          poly.addShape(component);\n        }\n      }\n      shape = poly;\n    }\n    //System.err.println(\"...done\");\n    return newShapeQuery(field, shape);\n  }\n\n","sourceOld":"  /** \n   * Create a query for matching a polygon.\n   * <p>\n   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.\n   * @param field field name. must not be null.\n   * @param polygons is the list of polygons to use to construct the query; must be at least one.\n   * @return query matching points within this polygon\n   */\n  public static Query newPolygonQuery(final String field, final Polygon... polygons) {\n    if (polygons.length < 1) {\n      throw new IllegalArgumentException(\"need at least one polygon\");\n    }\n    final GeoShape shape;\n    if (polygons.length == 1) {\n      final GeoShape component = fromPolygon(polygons[0], false);\n      if (component == null) {\n        // Polygon is degenerate\n        shape = new GeoCompositePolygon();\n      } else {\n        shape = component;\n      }\n    } else {\n      final GeoCompositePolygon poly = new GeoCompositePolygon();\n      for (final Polygon p : polygons) {\n        final GeoPolygon component = fromPolygon(p, false);\n        if (component != null) {\n          poly.addShape(component);\n        }\n      }\n      shape = poly;\n    }\n    return newShapeQuery(field, shape);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba81c43c13d92ea74a6388471cf358eb7068744d","date":1461408282,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newPolygonQuery(String,Polygon...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newPolygonQuery(String,Polygon...).mjava","sourceNew":"  /** \n   * Create a query for matching a polygon.\n   * <p>\n   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.\n   * @param field field name. must not be null.\n   * @param polygons is the list of polygons to use to construct the query; must be at least one.\n   * @return query matching points within this polygon\n   */\n  public static Query newPolygonQuery(final String field, final Polygon... polygons) {\n    //System.err.println(\"Creating polygon...\");\n    if (polygons.length < 1) {\n      throw new IllegalArgumentException(\"need at least one polygon\");\n    }\n    final GeoShape shape;\n    if (polygons.length == 1) {\n      final GeoShape component = fromPolygon(polygons[0]);\n      if (component == null) {\n        // Polygon is degenerate\n        shape = new GeoCompositePolygon();\n      } else {\n        shape = component;\n      }\n    } else {\n      final GeoCompositePolygon poly = new GeoCompositePolygon();\n      for (final Polygon p : polygons) {\n        final GeoPolygon component = fromPolygon(p);\n        if (component != null) {\n          poly.addShape(component);\n        }\n      }\n      shape = poly;\n    }\n    //System.err.println(\"...done\");\n    return newShapeQuery(field, shape);\n  }\n\n","sourceOld":"  /** \n   * Create a query for matching a polygon.\n   * <p>\n   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.\n   * @param field field name. must not be null.\n   * @param polygons is the list of polygons to use to construct the query; must be at least one.\n   * @return query matching points within this polygon\n   */\n  public static Query newPolygonQuery(final String field, final Polygon... polygons) {\n    //System.err.println(\"Creating polygon...\");\n    if (polygons.length < 1) {\n      throw new IllegalArgumentException(\"need at least one polygon\");\n    }\n    final GeoShape shape;\n    if (polygons.length == 1) {\n      final GeoShape component = fromPolygon(polygons[0], false);\n      if (component == null) {\n        // Polygon is degenerate\n        shape = new GeoCompositePolygon();\n      } else {\n        shape = component;\n      }\n    } else {\n      final GeoCompositePolygon poly = new GeoCompositePolygon();\n      for (final Polygon p : polygons) {\n        final GeoPolygon component = fromPolygon(p, false);\n        if (component != null) {\n          poly.addShape(component);\n        }\n      }\n      shape = poly;\n    }\n    //System.err.println(\"...done\");\n    return newShapeQuery(field, shape);\n  }\n\n","bugFix":["536a864ce38bf14fb3f072a3129a389e95200e20"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newPolygonQuery(String,Polygon...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newPolygonQuery(String,Polygon...).mjava","sourceNew":"  /** \n   * Create a query for matching a polygon.\n   * <p>\n   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.\n   * @param field field name. must not be null.\n   * @param polygons is the list of polygons to use to construct the query; must be at least one.\n   * @return query matching points within this polygon\n   */\n  public static Query newPolygonQuery(final String field, final Polygon... polygons) {\n    //System.err.println(\"Creating polygon...\");\n    if (polygons.length < 1) {\n      throw new IllegalArgumentException(\"need at least one polygon\");\n    }\n    final GeoShape shape;\n    if (polygons.length == 1) {\n      final GeoShape component = fromPolygon(polygons[0]);\n      if (component == null) {\n        // Polygon is degenerate\n        shape = new GeoCompositePolygon();\n      } else {\n        shape = component;\n      }\n    } else {\n      final GeoCompositePolygon poly = new GeoCompositePolygon();\n      for (final Polygon p : polygons) {\n        final GeoPolygon component = fromPolygon(p);\n        if (component != null) {\n          poly.addShape(component);\n        }\n      }\n      shape = poly;\n    }\n    //System.err.println(\"...done\");\n    return newShapeQuery(field, shape);\n  }\n\n","sourceOld":"  /** \n   * Create a query for matching a polygon.\n   * <p>\n   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.\n   * @param field field name. must not be null.\n   * @param polygons is the list of polygons to use to construct the query; must be at least one.\n   * @return query matching points within this polygon\n   */\n  public static Query newPolygonQuery(final String field, final Polygon... polygons) {\n    //System.err.println(\"Creating polygon...\");\n    if (polygons.length < 1) {\n      throw new IllegalArgumentException(\"need at least one polygon\");\n    }\n    final GeoShape shape;\n    if (polygons.length == 1) {\n      final GeoShape component = fromPolygon(polygons[0], false);\n      if (component == null) {\n        // Polygon is degenerate\n        shape = new GeoCompositePolygon();\n      } else {\n        shape = component;\n      }\n    } else {\n      final GeoCompositePolygon poly = new GeoCompositePolygon();\n      for (final Polygon p : polygons) {\n        final GeoPolygon component = fromPolygon(p, false);\n        if (component != null) {\n          poly.addShape(component);\n        }\n      }\n      shape = poly;\n    }\n    //System.err.println(\"...done\");\n    return newShapeQuery(field, shape);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d96ad5ec0c23d196a0c31b948fc260195a06133a","date":1461951175,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newPolygonQuery(String,Polygon...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newPolygonQuery(String,Polygon...).mjava","sourceNew":"  /** \n   * Create a query for matching a polygon.  The polygon should have a limited number of edges (less than 100) and be well-defined,\n   * with well-separated vertices.\n   * <p>\n   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.\n   * @param field field name. must not be null.\n   * @param polygons is the list of polygons to use to construct the query; must be at least one.\n   * @return query matching points within this polygon\n   */\n  public static Query newPolygonQuery(final String field, final Polygon... polygons) {\n    //System.err.println(\"Creating polygon...\");\n    if (polygons.length < 1) {\n      throw new IllegalArgumentException(\"need at least one polygon\");\n    }\n    final GeoShape shape;\n    if (polygons.length == 1) {\n      final GeoShape component = fromPolygon(polygons[0]);\n      if (component == null) {\n        // Polygon is degenerate\n        shape = new GeoCompositePolygon();\n      } else {\n        shape = component;\n      }\n    } else {\n      final GeoCompositePolygon poly = new GeoCompositePolygon();\n      for (final Polygon p : polygons) {\n        final GeoPolygon component = fromPolygon(p);\n        if (component != null) {\n          poly.addShape(component);\n        }\n      }\n      shape = poly;\n    }\n    //System.err.println(\"...done\");\n    return newShapeQuery(field, shape);\n  }\n\n","sourceOld":"  /** \n   * Create a query for matching a polygon.\n   * <p>\n   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.\n   * @param field field name. must not be null.\n   * @param polygons is the list of polygons to use to construct the query; must be at least one.\n   * @return query matching points within this polygon\n   */\n  public static Query newPolygonQuery(final String field, final Polygon... polygons) {\n    //System.err.println(\"Creating polygon...\");\n    if (polygons.length < 1) {\n      throw new IllegalArgumentException(\"need at least one polygon\");\n    }\n    final GeoShape shape;\n    if (polygons.length == 1) {\n      final GeoShape component = fromPolygon(polygons[0]);\n      if (component == null) {\n        // Polygon is degenerate\n        shape = new GeoCompositePolygon();\n      } else {\n        shape = component;\n      }\n    } else {\n      final GeoCompositePolygon poly = new GeoCompositePolygon();\n      for (final Polygon p : polygons) {\n        final GeoPolygon component = fromPolygon(p);\n        if (component != null) {\n          poly.addShape(component);\n        }\n      }\n      shape = poly;\n    }\n    //System.err.println(\"...done\");\n    return newShapeQuery(field, shape);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newPolygonQuery(String,Polygon...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newPolygonQuery(String,Polygon...).mjava","sourceNew":"  /** \n   * Create a query for matching a polygon.  The polygon should have a limited number of edges (less than 100) and be well-defined,\n   * with well-separated vertices.\n   * <p>\n   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.\n   * @param field field name. must not be null.\n   * @param polygons is the list of polygons to use to construct the query; must be at least one.\n   * @return query matching points within this polygon\n   */\n  public static Query newPolygonQuery(final String field, final Polygon... polygons) {\n    //System.err.println(\"Creating polygon...\");\n    if (polygons.length < 1) {\n      throw new IllegalArgumentException(\"need at least one polygon\");\n    }\n    final GeoShape shape;\n    if (polygons.length == 1) {\n      final GeoShape component = fromPolygon(polygons[0]);\n      if (component == null) {\n        // Polygon is degenerate\n        shape = new GeoCompositePolygon();\n      } else {\n        shape = component;\n      }\n    } else {\n      final GeoCompositePolygon poly = new GeoCompositePolygon();\n      for (final Polygon p : polygons) {\n        final GeoPolygon component = fromPolygon(p);\n        if (component != null) {\n          poly.addShape(component);\n        }\n      }\n      shape = poly;\n    }\n    //System.err.println(\"...done\");\n    return newShapeQuery(field, shape);\n  }\n\n","sourceOld":"  /** \n   * Create a query for matching a polygon.\n   * <p>\n   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.\n   * @param field field name. must not be null.\n   * @param polygons is the list of polygons to use to construct the query; must be at least one.\n   * @return query matching points within this polygon\n   */\n  public static Query newPolygonQuery(final String field, final Polygon... polygons) {\n    //System.err.println(\"Creating polygon...\");\n    if (polygons.length < 1) {\n      throw new IllegalArgumentException(\"need at least one polygon\");\n    }\n    final GeoShape shape;\n    if (polygons.length == 1) {\n      final GeoShape component = fromPolygon(polygons[0]);\n      if (component == null) {\n        // Polygon is degenerate\n        shape = new GeoCompositePolygon();\n      } else {\n        shape = component;\n      }\n    } else {\n      final GeoCompositePolygon poly = new GeoCompositePolygon();\n      for (final Polygon p : polygons) {\n        final GeoPolygon component = fromPolygon(p);\n        if (component != null) {\n          poly.addShape(component);\n        }\n      }\n      shape = poly;\n    }\n    //System.err.println(\"...done\");\n    return newShapeQuery(field, shape);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f32db9456b1759bf570a512581f5cea321f69f73","date":1463520039,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newPolygonQuery(String,Polygon...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newPolygonQuery(String,Polygon...).mjava","sourceNew":"  /** \n   * Create a query for matching a polygon.  The polygon should have a limited number of edges (less than 100) and be well-defined,\n   * with well-separated vertices.\n   * <p>\n   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.\n   * @param field field name. must not be null.\n   * @param polygons is the list of polygons to use to construct the query; must be at least one.\n   * @return query matching points within this polygon\n   */\n  public static Query newPolygonQuery(final String field, final Polygon... polygons) {\n    final GeoShape shape = Geo3DUtil.fromPolygon(polygons);\n    return newShapeQuery(field, shape);\n  }\n\n","sourceOld":"  /** \n   * Create a query for matching a polygon.  The polygon should have a limited number of edges (less than 100) and be well-defined,\n   * with well-separated vertices.\n   * <p>\n   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.\n   * @param field field name. must not be null.\n   * @param polygons is the list of polygons to use to construct the query; must be at least one.\n   * @return query matching points within this polygon\n   */\n  public static Query newPolygonQuery(final String field, final Polygon... polygons) {\n    //System.err.println(\"Creating polygon...\");\n    if (polygons.length < 1) {\n      throw new IllegalArgumentException(\"need at least one polygon\");\n    }\n    final GeoShape shape;\n    if (polygons.length == 1) {\n      final GeoShape component = fromPolygon(polygons[0]);\n      if (component == null) {\n        // Polygon is degenerate\n        shape = new GeoCompositePolygon();\n      } else {\n        shape = component;\n      }\n    } else {\n      final GeoCompositePolygon poly = new GeoCompositePolygon();\n      for (final Polygon p : polygons) {\n        final GeoPolygon component = fromPolygon(p);\n        if (component != null) {\n          poly.addShape(component);\n        }\n      }\n      shape = poly;\n    }\n    //System.err.println(\"...done\");\n    return newShapeQuery(field, shape);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c9819d04ff44d2877a5a19257cd662751284a5f","date":1463541580,"type":3,"author":"David Smiley","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newPolygonQuery(String,Polygon...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newPolygonQuery(String,Polygon...).mjava","sourceNew":"  /** \n   * Create a query for matching a polygon.  The polygon should have a limited number of edges (less than 100) and be well-defined,\n   * with well-separated vertices.\n   * <p>\n   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.\n   * @param field field name. must not be null.\n   * @param polygons is the list of polygons to use to construct the query; must be at least one.\n   * @return query matching points within this polygon\n   */\n  public static Query newPolygonQuery(final String field, final Polygon... polygons) {\n    final GeoShape shape = Geo3DUtil.fromPolygon(polygons);\n    return newShapeQuery(field, shape);\n  }\n\n","sourceOld":"  /** \n   * Create a query for matching a polygon.  The polygon should have a limited number of edges (less than 100) and be well-defined,\n   * with well-separated vertices.\n   * <p>\n   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.\n   * @param field field name. must not be null.\n   * @param polygons is the list of polygons to use to construct the query; must be at least one.\n   * @return query matching points within this polygon\n   */\n  public static Query newPolygonQuery(final String field, final Polygon... polygons) {\n    //System.err.println(\"Creating polygon...\");\n    if (polygons.length < 1) {\n      throw new IllegalArgumentException(\"need at least one polygon\");\n    }\n    final GeoShape shape;\n    if (polygons.length == 1) {\n      final GeoShape component = fromPolygon(polygons[0]);\n      if (component == null) {\n        // Polygon is degenerate\n        shape = new GeoCompositePolygon();\n      } else {\n        shape = component;\n      }\n    } else {\n      final GeoCompositePolygon poly = new GeoCompositePolygon();\n      for (final Polygon p : polygons) {\n        final GeoPolygon component = fromPolygon(p);\n        if (component != null) {\n          poly.addShape(component);\n        }\n      }\n      shape = poly;\n    }\n    //System.err.println(\"...done\");\n    return newShapeQuery(field, shape);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newPolygonQuery(String,Polygon...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newPolygonQuery(String,Polygon...).mjava","sourceNew":"  /** \n   * Create a query for matching a polygon.  The polygon should have a limited number of edges (less than 100) and be well-defined,\n   * with well-separated vertices.\n   * <p>\n   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.\n   * @param field field name. must not be null.\n   * @param polygons is the list of polygons to use to construct the query; must be at least one.\n   * @return query matching points within this polygon\n   */\n  public static Query newPolygonQuery(final String field, final Polygon... polygons) {\n    final GeoShape shape = Geo3DUtil.fromPolygon(polygons);\n    return newShapeQuery(field, shape);\n  }\n\n","sourceOld":"  /** \n   * Create a query for matching a polygon.  The polygon should have a limited number of edges (less than 100) and be well-defined,\n   * with well-separated vertices.\n   * <p>\n   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.\n   * @param field field name. must not be null.\n   * @param polygons is the list of polygons to use to construct the query; must be at least one.\n   * @return query matching points within this polygon\n   */\n  public static Query newPolygonQuery(final String field, final Polygon... polygons) {\n    //System.err.println(\"Creating polygon...\");\n    if (polygons.length < 1) {\n      throw new IllegalArgumentException(\"need at least one polygon\");\n    }\n    final GeoShape shape;\n    if (polygons.length == 1) {\n      final GeoShape component = fromPolygon(polygons[0]);\n      if (component == null) {\n        // Polygon is degenerate\n        shape = new GeoCompositePolygon();\n      } else {\n        shape = component;\n      }\n    } else {\n      final GeoCompositePolygon poly = new GeoCompositePolygon();\n      for (final Polygon p : polygons) {\n        final GeoPolygon component = fromPolygon(p);\n        if (component != null) {\n          poly.addShape(component);\n        }\n      }\n      shape = poly;\n    }\n    //System.err.println(\"...done\");\n    return newShapeQuery(field, shape);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newPolygonQuery(String,Polygon...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newPolygonQuery(String,Polygon...).mjava","sourceNew":"  /** \n   * Create a query for matching a polygon.  The polygon should have a limited number of edges (less than 100) and be well-defined,\n   * with well-separated vertices.\n   * <p>\n   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.\n   * @param field field name. must not be null.\n   * @param polygons is the list of polygons to use to construct the query; must be at least one.\n   * @return query matching points within this polygon\n   */\n  public static Query newPolygonQuery(final String field, final Polygon... polygons) {\n    final GeoShape shape = Geo3DUtil.fromPolygon(polygons);\n    return newShapeQuery(field, shape);\n  }\n\n","sourceOld":"  /** \n   * Create a query for matching a polygon.  The polygon should have a limited number of edges (less than 100) and be well-defined,\n   * with well-separated vertices.\n   * <p>\n   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.\n   * @param field field name. must not be null.\n   * @param polygons is the list of polygons to use to construct the query; must be at least one.\n   * @return query matching points within this polygon\n   */\n  public static Query newPolygonQuery(final String field, final Polygon... polygons) {\n    //System.err.println(\"Creating polygon...\");\n    if (polygons.length < 1) {\n      throw new IllegalArgumentException(\"need at least one polygon\");\n    }\n    final GeoShape shape;\n    if (polygons.length == 1) {\n      final GeoShape component = fromPolygon(polygons[0]);\n      if (component == null) {\n        // Polygon is degenerate\n        shape = new GeoCompositePolygon();\n      } else {\n        shape = component;\n      }\n    } else {\n      final GeoCompositePolygon poly = new GeoCompositePolygon();\n      for (final Polygon p : polygons) {\n        final GeoPolygon component = fromPolygon(p);\n        if (component != null) {\n          poly.addShape(component);\n        }\n      }\n      shape = poly;\n    }\n    //System.err.println(\"...done\");\n    return newShapeQuery(field, shape);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a","date":1583186777,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newPolygonQuery(String,PlanetModel,Polygon...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newPolygonQuery(String,Polygon...).mjava","sourceNew":"  /** \n   * Create a query for matching a polygon.  The polygon should have a limited number of edges (less than 100) and be well-defined,\n   * with well-separated vertices.\n   * <p>\n   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.\n   * @param field field name. must not be null.\n   * @param polygons is the list of polygons to use to construct the query; must be at least one.\n   * @return query matching points within this polygon\n   */\n  public static Query newPolygonQuery(final String field, final PlanetModel planetModel, final Polygon... polygons) {\n    final GeoShape shape = Geo3DUtil.fromPolygon(planetModel, polygons);\n    return newShapeQuery(field, shape);\n  }\n\n","sourceOld":"  /** \n   * Create a query for matching a polygon.  The polygon should have a limited number of edges (less than 100) and be well-defined,\n   * with well-separated vertices.\n   * <p>\n   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.\n   * @param field field name. must not be null.\n   * @param polygons is the list of polygons to use to construct the query; must be at least one.\n   * @return query matching points within this polygon\n   */\n  public static Query newPolygonQuery(final String field, final Polygon... polygons) {\n    final GeoShape shape = Geo3DUtil.fromPolygon(polygons);\n    return newShapeQuery(field, shape);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9c9819d04ff44d2877a5a19257cd662751284a5f":["d96ad5ec0c23d196a0c31b948fc260195a06133a","f32db9456b1759bf570a512581f5cea321f69f73"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["2c4ea54ac6c0e876359818ff9634e6c179769c1e","ba81c43c13d92ea74a6388471cf358eb7068744d"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d96ad5ec0c23d196a0c31b948fc260195a06133a":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"536a864ce38bf14fb3f072a3129a389e95200e20":["7593e6c5cc33e73fa12f7d1b0035d218d3a36309"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["55b50463286869f584cf849d1587a0fcd54d1dfa","d470c8182e92b264680e34081b75e70a9f2b3c89"],"7593e6c5cc33e73fa12f7d1b0035d218d3a36309":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["d96ad5ec0c23d196a0c31b948fc260195a06133a","f32db9456b1759bf570a512581f5cea321f69f73"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","d96ad5ec0c23d196a0c31b948fc260195a06133a"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7593e6c5cc33e73fa12f7d1b0035d218d3a36309"],"2c4ea54ac6c0e876359818ff9634e6c179769c1e":["536a864ce38bf14fb3f072a3129a389e95200e20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f32db9456b1759bf570a512581f5cea321f69f73":["d96ad5ec0c23d196a0c31b948fc260195a06133a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"],"ba81c43c13d92ea74a6388471cf358eb7068744d":["2c4ea54ac6c0e876359818ff9634e6c179769c1e"]},"commit2Childs":{"9c9819d04ff44d2877a5a19257cd662751284a5f":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["d96ad5ec0c23d196a0c31b948fc260195a06133a","55b50463286869f584cf849d1587a0fcd54d1dfa"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d96ad5ec0c23d196a0c31b948fc260195a06133a":["9c9819d04ff44d2877a5a19257cd662751284a5f","d470c8182e92b264680e34081b75e70a9f2b3c89","55b50463286869f584cf849d1587a0fcd54d1dfa","f32db9456b1759bf570a512581f5cea321f69f73"],"536a864ce38bf14fb3f072a3129a389e95200e20":["2c4ea54ac6c0e876359818ff9634e6c179769c1e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7593e6c5cc33e73fa12f7d1b0035d218d3a36309":["536a864ce38bf14fb3f072a3129a389e95200e20","09af2c9610ce53a4b25fd99344299b40318a4a1a"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":[],"2c4ea54ac6c0e876359818ff9634e6c179769c1e":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","ba81c43c13d92ea74a6388471cf358eb7068744d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7593e6c5cc33e73fa12f7d1b0035d218d3a36309","09af2c9610ce53a4b25fd99344299b40318a4a1a"],"f32db9456b1759bf570a512581f5cea321f69f73":["9c9819d04ff44d2877a5a19257cd662751284a5f","d470c8182e92b264680e34081b75e70a9f2b3c89"],"ba81c43c13d92ea74a6388471cf358eb7068744d":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9c9819d04ff44d2877a5a19257cd662751284a5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","09af2c9610ce53a4b25fd99344299b40318a4a1a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}