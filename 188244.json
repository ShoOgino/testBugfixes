{"path":"lucene/core/src/java/org/apache/lucene/search/FieldCacheDocIdSet#iterator().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheDocIdSet#iterator().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheDocIdSet#iterator().mjava","sourceNew":"  @Override\n  public final DocIdSetIterator iterator() throws IOException {\n    if (acceptDocs == null) {\n      // Specialization optimization disregard acceptDocs\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!matchDoc(doc));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n      };\n    } else if (acceptDocs instanceof FixedBitSet || acceptDocs instanceof OpenBitSet) {\n      // special case for FixedBitSet / OpenBitSet: use the iterator and filter it\n      // (used e.g. when Filters are chained by FilteredQuery)\n      return new FilteredDocIdSetIterator(((DocIdSet) acceptDocs).iterator()) {\n        @Override\n        protected boolean match(int doc) {\n          return FieldCacheDocIdSet.this.matchDoc(doc);\n        }\n      };\n    } else {\n      // Stupid consultation of acceptDocs and matchDoc()\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!(matchDoc(doc) && acceptDocs.get(doc)));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc) && acceptDocs.get(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public final DocIdSetIterator iterator() throws IOException {\n    if (acceptDocs == null) {\n      // Specialization optimization disregard acceptDocs\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!matchDoc(doc));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n      };\n    } else if (acceptDocs instanceof FixedBitSet || acceptDocs instanceof OpenBitSet) {\n      // special case for FixedBitSet / OpenBitSet: use the iterator and filter it\n      // (used e.g. when Filters are chained by FilteredQuery)\n      return new FilteredDocIdSetIterator(((DocIdSet) acceptDocs).iterator()) {\n        @Override\n        protected boolean match(int doc) {\n          return FieldCacheDocIdSet.this.matchDoc(doc);\n        }\n      };\n    } else {\n      // Stupid consultation of acceptDocs and matchDoc()\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!(matchDoc(doc) && acceptDocs.get(doc)));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc) && acceptDocs.get(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a","date":1363294103,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheDocIdSet#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheDocIdSet#iterator().mjava","sourceNew":"  @Override\n  public final DocIdSetIterator iterator() throws IOException {\n    if (acceptDocs == null) {\n      // Specialization optimization disregard acceptDocs\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!matchDoc(doc));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    } else if (acceptDocs instanceof FixedBitSet || acceptDocs instanceof OpenBitSet) {\n      // special case for FixedBitSet / OpenBitSet: use the iterator and filter it\n      // (used e.g. when Filters are chained by FilteredQuery)\n      return new FilteredDocIdSetIterator(((DocIdSet) acceptDocs).iterator()) {\n        @Override\n        protected boolean match(int doc) {\n          return FieldCacheDocIdSet.this.matchDoc(doc);\n        }\n      };\n    } else {\n      // Stupid consultation of acceptDocs and matchDoc()\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!(matchDoc(doc) && acceptDocs.get(doc)));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc) && acceptDocs.get(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public final DocIdSetIterator iterator() throws IOException {\n    if (acceptDocs == null) {\n      // Specialization optimization disregard acceptDocs\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!matchDoc(doc));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n      };\n    } else if (acceptDocs instanceof FixedBitSet || acceptDocs instanceof OpenBitSet) {\n      // special case for FixedBitSet / OpenBitSet: use the iterator and filter it\n      // (used e.g. when Filters are chained by FilteredQuery)\n      return new FilteredDocIdSetIterator(((DocIdSet) acceptDocs).iterator()) {\n        @Override\n        protected boolean match(int doc) {\n          return FieldCacheDocIdSet.this.matchDoc(doc);\n        }\n      };\n    } else {\n      // Stupid consultation of acceptDocs and matchDoc()\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!(matchDoc(doc) && acceptDocs.get(doc)));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc) && acceptDocs.get(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9274621789ce990dbfef455dabdf026bb3184821","date":1400046684,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesDocIdSet#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheDocIdSet#iterator().mjava","sourceNew":"  @Override\n  public final DocIdSetIterator iterator() throws IOException {\n    if (acceptDocs == null) {\n      // Specialization optimization disregard acceptDocs\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!matchDoc(doc));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    } else if (acceptDocs instanceof FixedBitSet || acceptDocs instanceof OpenBitSet) {\n      // special case for FixedBitSet / OpenBitSet: use the iterator and filter it\n      // (used e.g. when Filters are chained by FilteredQuery)\n      return new FilteredDocIdSetIterator(((DocIdSet) acceptDocs).iterator()) {\n        @Override\n        protected boolean match(int doc) {\n          return DocValuesDocIdSet.this.matchDoc(doc);\n        }\n      };\n    } else {\n      // Stupid consultation of acceptDocs and matchDoc()\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!(matchDoc(doc) && acceptDocs.get(doc)));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc) && acceptDocs.get(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public final DocIdSetIterator iterator() throws IOException {\n    if (acceptDocs == null) {\n      // Specialization optimization disregard acceptDocs\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!matchDoc(doc));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    } else if (acceptDocs instanceof FixedBitSet || acceptDocs instanceof OpenBitSet) {\n      // special case for FixedBitSet / OpenBitSet: use the iterator and filter it\n      // (used e.g. when Filters are chained by FilteredQuery)\n      return new FilteredDocIdSetIterator(((DocIdSet) acceptDocs).iterator()) {\n        @Override\n        protected boolean match(int doc) {\n          return FieldCacheDocIdSet.this.matchDoc(doc);\n        }\n      };\n    } else {\n      // Stupid consultation of acceptDocs and matchDoc()\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!(matchDoc(doc) && acceptDocs.get(doc)));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc) && acceptDocs.get(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesDocIdSet#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheDocIdSet#iterator().mjava","sourceNew":"  @Override\n  public final DocIdSetIterator iterator() throws IOException {\n    if (acceptDocs == null) {\n      // Specialization optimization disregard acceptDocs\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!matchDoc(doc));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    } else if (acceptDocs instanceof FixedBitSet || acceptDocs instanceof OpenBitSet) {\n      // special case for FixedBitSet / OpenBitSet: use the iterator and filter it\n      // (used e.g. when Filters are chained by FilteredQuery)\n      return new FilteredDocIdSetIterator(((DocIdSet) acceptDocs).iterator()) {\n        @Override\n        protected boolean match(int doc) {\n          return DocValuesDocIdSet.this.matchDoc(doc);\n        }\n      };\n    } else {\n      // Stupid consultation of acceptDocs and matchDoc()\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!(matchDoc(doc) && acceptDocs.get(doc)));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc) && acceptDocs.get(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public final DocIdSetIterator iterator() throws IOException {\n    if (acceptDocs == null) {\n      // Specialization optimization disregard acceptDocs\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!matchDoc(doc));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    } else if (acceptDocs instanceof FixedBitSet || acceptDocs instanceof OpenBitSet) {\n      // special case for FixedBitSet / OpenBitSet: use the iterator and filter it\n      // (used e.g. when Filters are chained by FilteredQuery)\n      return new FilteredDocIdSetIterator(((DocIdSet) acceptDocs).iterator()) {\n        @Override\n        protected boolean match(int doc) {\n          return FieldCacheDocIdSet.this.matchDoc(doc);\n        }\n      };\n    } else {\n      // Stupid consultation of acceptDocs and matchDoc()\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!(matchDoc(doc) && acceptDocs.get(doc)));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc) && acceptDocs.get(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesDocIdSet#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheDocIdSet#iterator().mjava","sourceNew":"  @Override\n  public final DocIdSetIterator iterator() throws IOException {\n    if (acceptDocs == null) {\n      // Specialization optimization disregard acceptDocs\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!matchDoc(doc));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    } else if (acceptDocs instanceof FixedBitSet || acceptDocs instanceof OpenBitSet) {\n      // special case for FixedBitSet / OpenBitSet: use the iterator and filter it\n      // (used e.g. when Filters are chained by FilteredQuery)\n      return new FilteredDocIdSetIterator(((DocIdSet) acceptDocs).iterator()) {\n        @Override\n        protected boolean match(int doc) {\n          return DocValuesDocIdSet.this.matchDoc(doc);\n        }\n      };\n    } else {\n      // Stupid consultation of acceptDocs and matchDoc()\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!(matchDoc(doc) && acceptDocs.get(doc)));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc) && acceptDocs.get(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public final DocIdSetIterator iterator() throws IOException {\n    if (acceptDocs == null) {\n      // Specialization optimization disregard acceptDocs\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!matchDoc(doc));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    } else if (acceptDocs instanceof FixedBitSet || acceptDocs instanceof OpenBitSet) {\n      // special case for FixedBitSet / OpenBitSet: use the iterator and filter it\n      // (used e.g. when Filters are chained by FilteredQuery)\n      return new FilteredDocIdSetIterator(((DocIdSet) acceptDocs).iterator()) {\n        @Override\n        protected boolean match(int doc) {\n          return FieldCacheDocIdSet.this.matchDoc(doc);\n        }\n      };\n    } else {\n      // Stupid consultation of acceptDocs and matchDoc()\n      return new DocIdSetIterator() {\n        private int doc = -1;\n        \n        @Override\n        public int docID() {\n          return doc;\n        }\n      \n        @Override\n        public int nextDoc() {\n          do {\n            doc++;\n            if (doc >= maxDoc) {\n              return doc = NO_MORE_DOCS;\n            }\n          } while (!(matchDoc(doc) && acceptDocs.get(doc)));\n          return doc;\n        }\n      \n        @Override\n        public int advance(int target) {\n          for(doc=target; doc<maxDoc; doc++) {\n            if (matchDoc(doc) && acceptDocs.get(doc)) {\n              return doc;\n            }\n          }\n          return doc = NO_MORE_DOCS;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9274621789ce990dbfef455dabdf026bb3184821":["7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a","9274621789ce990dbfef455dabdf026bb3184821"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"56572ec06f1407c066d6b7399413178b33176cd8":["7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"9274621789ce990dbfef455dabdf026bb3184821":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a":["9274621789ce990dbfef455dabdf026bb3184821","93dd449115a9247533e44bab47e8429e5dccbc6d","56572ec06f1407c066d6b7399413178b33176cd8"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}