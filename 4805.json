{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#doLogic().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#doLogic().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    Document doc = docSize > 0 ? docMaker.makeDocument(docSize) : docMaker.makeDocument();\n\n    Matcher matcher = threadNormalizer.get();\n    if (matcher == null) {\n      matcher = Pattern.compile(\"[\\t\\r\\n]+\").matcher(\"\");\n      threadNormalizer.set(matcher);\n    }\n    \n    StringBuilder sb = threadBuffer.get();\n    if (sb == null) {\n      sb = new StringBuilder();\n      threadBuffer.set(sb);\n    }\n    sb.setLength(0);\n\n    boolean sufficient = !checkSufficientFields;\n    for (int i=0; i<fieldsToWrite.length; i++) {\n      IndexableField f = doc.getField(fieldsToWrite[i]);\n      String text = f == null ? \"\" : matcher.reset(f.stringValue()).replaceAll(\" \").trim();\n      sb.append(text).append(SEP);\n      sufficient |= text.length()>0 && sufficientFields[i];\n    }\n    if (sufficient) {\n      sb.setLength(sb.length()-1); // remove redundant last separator\n      // lineFileOut is a PrintWriter, which synchronizes internally in println.\n      lineFileOut.println(sb.toString());\n    }\n\n    return 1;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    Document doc = docSize > 0 ? docMaker.makeDocument(docSize) : docMaker.makeDocument();\n\n    Matcher matcher = threadNormalizer.get();\n    if (matcher == null) {\n      matcher = Pattern.compile(\"[\\t\\r\\n]+\").matcher(\"\");\n      threadNormalizer.set(matcher);\n    }\n    \n    StringBuilder sb = threadBuffer.get();\n    if (sb == null) {\n      sb = new StringBuilder();\n      threadBuffer.set(sb);\n    }\n    sb.setLength(0);\n\n    boolean sufficient = !checkSufficientFields;\n    for (int i=0; i<fieldsToWrite.length; i++) {\n      IndexableField f = doc.getField(fieldsToWrite[i]);\n      String text = f == null ? \"\" : matcher.reset(f.stringValue()).replaceAll(\" \").trim();\n      sb.append(text).append(SEP);\n      sufficient |= text.length()>0 && sufficientFields[i];\n    }\n    if (sufficient) {\n      sb.setLength(sb.length()-1); // remove redundant last separator\n      // lineFileOut is a PrintWriter, which synchronizes internally in println.\n      lineFileOut.println(sb.toString());\n    }\n\n    return 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"409324b31a1419d7c05a38211168cf317e39be77","date":1344866765,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#doLogic().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    Document doc = docSize > 0 ? docMaker.makeDocument(docSize) : docMaker.makeDocument();\n\n    Matcher matcher = threadNormalizer.get();\n    if (matcher == null) {\n      matcher = Pattern.compile(\"[\\t\\r\\n]+\").matcher(\"\");\n      threadNormalizer.set(matcher);\n    }\n    \n    StringBuilder sb = threadBuffer.get();\n    if (sb == null) {\n      sb = new StringBuilder();\n      threadBuffer.set(sb);\n    }\n    sb.setLength(0);\n\n    boolean sufficient = !checkSufficientFields;\n    for (int i=0; i<fieldsToWrite.length; i++) {\n      StorableField f = doc.getField(fieldsToWrite[i]);\n      String text = f == null ? \"\" : matcher.reset(f.stringValue()).replaceAll(\" \").trim();\n      sb.append(text).append(SEP);\n      sufficient |= text.length()>0 && sufficientFields[i];\n    }\n    if (sufficient) {\n      sb.setLength(sb.length()-1); // remove redundant last separator\n      // lineFileOut is a PrintWriter, which synchronizes internally in println.\n      lineFileOut.println(sb.toString());\n    }\n\n    return 1;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    Document doc = docSize > 0 ? docMaker.makeDocument(docSize) : docMaker.makeDocument();\n\n    Matcher matcher = threadNormalizer.get();\n    if (matcher == null) {\n      matcher = Pattern.compile(\"[\\t\\r\\n]+\").matcher(\"\");\n      threadNormalizer.set(matcher);\n    }\n    \n    StringBuilder sb = threadBuffer.get();\n    if (sb == null) {\n      sb = new StringBuilder();\n      threadBuffer.set(sb);\n    }\n    sb.setLength(0);\n\n    boolean sufficient = !checkSufficientFields;\n    for (int i=0; i<fieldsToWrite.length; i++) {\n      IndexableField f = doc.getField(fieldsToWrite[i]);\n      String text = f == null ? \"\" : matcher.reset(f.stringValue()).replaceAll(\" \").trim();\n      sb.append(text).append(SEP);\n      sufficient |= text.length()>0 && sufficientFields[i];\n    }\n    if (sufficient) {\n      sb.setLength(sb.length()-1); // remove redundant last separator\n      // lineFileOut is a PrintWriter, which synchronizes internally in println.\n      lineFileOut.println(sb.toString());\n    }\n\n    return 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#doLogic().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    Document doc = docSize > 0 ? docMaker.makeDocument(docSize) : docMaker.makeDocument();\n\n    Matcher matcher = threadNormalizer.get();\n    if (matcher == null) {\n      matcher = Pattern.compile(\"[\\t\\r\\n]+\").matcher(\"\");\n      threadNormalizer.set(matcher);\n    }\n    \n    StringBuilder sb = threadBuffer.get();\n    if (sb == null) {\n      sb = new StringBuilder();\n      threadBuffer.set(sb);\n    }\n    sb.setLength(0);\n\n    boolean sufficient = !checkSufficientFields;\n    for (int i=0; i<fieldsToWrite.length; i++) {\n      StorableField f = doc.getField(fieldsToWrite[i]);\n      String text = f == null ? \"\" : matcher.reset(f.stringValue()).replaceAll(\" \").trim();\n      sb.append(text).append(SEP);\n      sufficient |= text.length()>0 && sufficientFields[i];\n    }\n    if (sufficient) {\n      sb.setLength(sb.length()-1); // remove redundant last separator\n      // lineFileOut is a PrintWriter, which synchronizes internally in println.\n      lineFileOut.println(sb.toString());\n    }\n\n    return 1;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    Document doc = docSize > 0 ? docMaker.makeDocument(docSize) : docMaker.makeDocument();\n\n    Matcher matcher = threadNormalizer.get();\n    if (matcher == null) {\n      matcher = Pattern.compile(\"[\\t\\r\\n]+\").matcher(\"\");\n      threadNormalizer.set(matcher);\n    }\n    \n    StringBuilder sb = threadBuffer.get();\n    if (sb == null) {\n      sb = new StringBuilder();\n      threadBuffer.set(sb);\n    }\n    sb.setLength(0);\n\n    boolean sufficient = !checkSufficientFields;\n    for (int i=0; i<fieldsToWrite.length; i++) {\n      IndexableField f = doc.getField(fieldsToWrite[i]);\n      String text = f == null ? \"\" : matcher.reset(f.stringValue()).replaceAll(\" \").trim();\n      sb.append(text).append(SEP);\n      sufficient |= text.length()>0 && sufficientFields[i];\n    }\n    if (sufficient) {\n      sb.setLength(sb.length()-1); // remove redundant last separator\n      // lineFileOut is a PrintWriter, which synchronizes internally in println.\n      lineFileOut.println(sb.toString());\n    }\n\n    return 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f11aff2ac25cc001599c10577012e84297104c48","date":1355045169,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#doLogic().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    Document doc = docSize > 0 ? docMaker.makeDocument(docSize) : docMaker.makeDocument();\n\n    Matcher matcher = threadNormalizer.get();\n    if (matcher == null) {\n      matcher = Pattern.compile(\"[\\t\\r\\n]+\").matcher(\"\");\n      threadNormalizer.set(matcher);\n    }\n    \n    StringBuilder sb = threadBuffer.get();\n    if (sb == null) {\n      sb = new StringBuilder();\n      threadBuffer.set(sb);\n    }\n    sb.setLength(0);\n\n    boolean sufficient = !checkSufficientFields;\n    for (int i=0; i<fieldsToWrite.length; i++) {\n      StorableField f = doc.getField(fieldsToWrite[i]);\n      String text = f == null ? \"\" : matcher.reset(f.stringValue()).replaceAll(\" \").trim();\n      sb.append(text).append(SEP);\n      sufficient |= text.length()>0 && sufficientFields[i];\n    }\n    if (sufficient) {\n      sb.setLength(sb.length()-1); // remove redundant last separator\n      // lineFileOut is a PrintWriter, which synchronizes internally in println.\n      lineFileOut(doc).println(sb.toString());\n    }\n\n    return 1;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    Document doc = docSize > 0 ? docMaker.makeDocument(docSize) : docMaker.makeDocument();\n\n    Matcher matcher = threadNormalizer.get();\n    if (matcher == null) {\n      matcher = Pattern.compile(\"[\\t\\r\\n]+\").matcher(\"\");\n      threadNormalizer.set(matcher);\n    }\n    \n    StringBuilder sb = threadBuffer.get();\n    if (sb == null) {\n      sb = new StringBuilder();\n      threadBuffer.set(sb);\n    }\n    sb.setLength(0);\n\n    boolean sufficient = !checkSufficientFields;\n    for (int i=0; i<fieldsToWrite.length; i++) {\n      StorableField f = doc.getField(fieldsToWrite[i]);\n      String text = f == null ? \"\" : matcher.reset(f.stringValue()).replaceAll(\" \").trim();\n      sb.append(text).append(SEP);\n      sufficient |= text.length()>0 && sufficientFields[i];\n    }\n    if (sufficient) {\n      sb.setLength(sb.length()-1); // remove redundant last separator\n      // lineFileOut is a PrintWriter, which synchronizes internally in println.\n      lineFileOut.println(sb.toString());\n    }\n\n    return 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#doLogic().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    Document doc = docSize > 0 ? docMaker.makeDocument(docSize) : docMaker.makeDocument();\n\n    Matcher matcher = threadNormalizer.get();\n    if (matcher == null) {\n      matcher = Pattern.compile(\"[\\t\\r\\n]+\").matcher(\"\");\n      threadNormalizer.set(matcher);\n    }\n    \n    StringBuilder sb = threadBuffer.get();\n    if (sb == null) {\n      sb = new StringBuilder();\n      threadBuffer.set(sb);\n    }\n    sb.setLength(0);\n\n    boolean sufficient = !checkSufficientFields;\n    for (int i=0; i<fieldsToWrite.length; i++) {\n      StorableField f = doc.getField(fieldsToWrite[i]);\n      String text = f == null ? \"\" : matcher.reset(f.stringValue()).replaceAll(\" \").trim();\n      sb.append(text).append(SEP);\n      sufficient |= text.length()>0 && sufficientFields[i];\n    }\n    if (sufficient) {\n      sb.setLength(sb.length()-1); // remove redundant last separator\n      // lineFileOut is a PrintWriter, which synchronizes internally in println.\n      lineFileOut(doc).println(sb.toString());\n    }\n\n    return 1;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    Document doc = docSize > 0 ? docMaker.makeDocument(docSize) : docMaker.makeDocument();\n\n    Matcher matcher = threadNormalizer.get();\n    if (matcher == null) {\n      matcher = Pattern.compile(\"[\\t\\r\\n]+\").matcher(\"\");\n      threadNormalizer.set(matcher);\n    }\n    \n    StringBuilder sb = threadBuffer.get();\n    if (sb == null) {\n      sb = new StringBuilder();\n      threadBuffer.set(sb);\n    }\n    sb.setLength(0);\n\n    boolean sufficient = !checkSufficientFields;\n    for (int i=0; i<fieldsToWrite.length; i++) {\n      StorableField f = doc.getField(fieldsToWrite[i]);\n      String text = f == null ? \"\" : matcher.reset(f.stringValue()).replaceAll(\" \").trim();\n      sb.append(text).append(SEP);\n      sufficient |= text.length()>0 && sufficientFields[i];\n    }\n    if (sufficient) {\n      sb.setLength(sb.length()-1); // remove redundant last separator\n      // lineFileOut is a PrintWriter, which synchronizes internally in println.\n      lineFileOut.println(sb.toString());\n    }\n\n    return 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#doLogic().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    Document doc = docSize > 0 ? docMaker.makeDocument(docSize) : docMaker.makeDocument();\n\n    Matcher matcher = threadNormalizer.get();\n    if (matcher == null) {\n      matcher = Pattern.compile(\"[\\t\\r\\n]+\").matcher(\"\");\n      threadNormalizer.set(matcher);\n    }\n    \n    StringBuilder sb = threadBuffer.get();\n    if (sb == null) {\n      sb = new StringBuilder();\n      threadBuffer.set(sb);\n    }\n    sb.setLength(0);\n\n    boolean sufficient = !checkSufficientFields;\n    for (int i=0; i<fieldsToWrite.length; i++) {\n      IndexableField f = doc.getField(fieldsToWrite[i]);\n      String text = f == null ? \"\" : matcher.reset(f.stringValue()).replaceAll(\" \").trim();\n      sb.append(text).append(SEP);\n      sufficient |= text.length()>0 && sufficientFields[i];\n    }\n    if (sufficient) {\n      sb.setLength(sb.length()-1); // remove redundant last separator\n      // lineFileOut is a PrintWriter, which synchronizes internally in println.\n      lineFileOut(doc).println(sb.toString());\n    }\n\n    return 1;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    Document doc = docSize > 0 ? docMaker.makeDocument(docSize) : docMaker.makeDocument();\n\n    Matcher matcher = threadNormalizer.get();\n    if (matcher == null) {\n      matcher = Pattern.compile(\"[\\t\\r\\n]+\").matcher(\"\");\n      threadNormalizer.set(matcher);\n    }\n    \n    StringBuilder sb = threadBuffer.get();\n    if (sb == null) {\n      sb = new StringBuilder();\n      threadBuffer.set(sb);\n    }\n    sb.setLength(0);\n\n    boolean sufficient = !checkSufficientFields;\n    for (int i=0; i<fieldsToWrite.length; i++) {\n      StorableField f = doc.getField(fieldsToWrite[i]);\n      String text = f == null ? \"\" : matcher.reset(f.stringValue()).replaceAll(\" \").trim();\n      sb.append(text).append(SEP);\n      sufficient |= text.length()>0 && sufficientFields[i];\n    }\n    if (sufficient) {\n      sb.setLength(sb.length()-1); // remove redundant last separator\n      // lineFileOut is a PrintWriter, which synchronizes internally in println.\n      lineFileOut(doc).println(sb.toString());\n    }\n\n    return 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"409324b31a1419d7c05a38211168cf317e39be77":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d028314cced5858683a1bb4741423d0f934257b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","409324b31a1419d7c05a38211168cf317e39be77"],"f11aff2ac25cc001599c10577012e84297104c48":["1d028314cced5858683a1bb4741423d0f934257b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["1d028314cced5858683a1bb4741423d0f934257b","f11aff2ac25cc001599c10577012e84297104c48"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["f11aff2ac25cc001599c10577012e84297104c48"]},"commit2Childs":{"409324b31a1419d7c05a38211168cf317e39be77":["1d028314cced5858683a1bb4741423d0f934257b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["409324b31a1419d7c05a38211168cf317e39be77","1d028314cced5858683a1bb4741423d0f934257b"],"1d028314cced5858683a1bb4741423d0f934257b":["f11aff2ac25cc001599c10577012e84297104c48","407687e67faf6e1f02a211ca078d8e3eed631027"],"f11aff2ac25cc001599c10577012e84297104c48":["407687e67faf6e1f02a211ca078d8e3eed631027","6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}