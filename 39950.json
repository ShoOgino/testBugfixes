{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.DeleteReplica#getParams().mjava","commits":[{"id":"d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d","date":1419896224,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.DeleteReplica#getParams().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.set(ZkStateReader.REPLICA_PROP, this.replica);\n      \n      if(onlyIfDown != null) {\n        params.set(\"onlyIfDown\", this.onlyIfDown);\n      }\n      return params;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bbb741690cdafda7f1f7549c26351c912917a69","date":1453203134,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.DeleteReplica#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.DeleteReplica#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.set(ZkStateReader.REPLICA_PROP, this.replica);\n      \n      if (onlyIfDown != null) {\n        params.set(\"onlyIfDown\", onlyIfDown);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.set(ZkStateReader.REPLICA_PROP, this.replica);\n      \n      if(onlyIfDown != null) {\n        params.set(\"onlyIfDown\", this.onlyIfDown);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1421546162ccd500af737a45b37a074ef6c06db","date":1455152032,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.DeleteReplica#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.DeleteReplica#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.set(ZkStateReader.REPLICA_PROP, this.replica);\n\n      if (onlyIfDown != null) {\n        params.set(\"onlyIfDown\", onlyIfDown);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.set(ZkStateReader.REPLICA_PROP, this.replica);\n      \n      if (onlyIfDown != null) {\n        params.set(\"onlyIfDown\", onlyIfDown);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34127d6b305c3e200d697bfcb58e639d65250c6f","date":1457034866,"type":3,"author":"anshum","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.DeleteReplica#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.DeleteReplica#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.set(ZkStateReader.REPLICA_PROP, this.replica);\n\n      if (onlyIfDown != null) {\n        params.set(\"onlyIfDown\", onlyIfDown);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteIndexDir != null) {\n        params.set(CoreAdminParams.DELETE_INDEX, deleteIndexDir);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.set(ZkStateReader.REPLICA_PROP, this.replica);\n\n      if (onlyIfDown != null) {\n        params.set(\"onlyIfDown\", onlyIfDown);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.DeleteReplica#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.DeleteReplica#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.set(ZkStateReader.REPLICA_PROP, this.replica);\n\n      if (onlyIfDown != null) {\n        params.set(\"onlyIfDown\", onlyIfDown);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteIndexDir != null) {\n        params.set(CoreAdminParams.DELETE_INDEX, deleteIndexDir);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.set(ZkStateReader.REPLICA_PROP, this.replica);\n\n      if (onlyIfDown != null) {\n        params.set(\"onlyIfDown\", onlyIfDown);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"073a74201a21520f4fc543c9f6d1d87c19a467b2","date":1472788663,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.DeleteReplica#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.DeleteReplica#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.set(ZkStateReader.REPLICA_PROP, this.replica);\n\n      if (onlyIfDown != null) {\n        params.set(\"onlyIfDown\", onlyIfDown);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteIndexDir != null) {\n        params.set(CoreAdminParams.DELETE_INDEX, deleteIndexDir);\n      }\n      if (count != null) {\n        params.set(COUNT_PROP, deleteIndexDir);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.set(ZkStateReader.REPLICA_PROP, this.replica);\n\n      if (onlyIfDown != null) {\n        params.set(\"onlyIfDown\", onlyIfDown);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteIndexDir != null) {\n        params.set(CoreAdminParams.DELETE_INDEX, deleteIndexDir);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.DeleteReplica#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.DeleteReplica#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.set(ZkStateReader.REPLICA_PROP, this.replica);\n\n      if (onlyIfDown != null) {\n        params.set(\"onlyIfDown\", onlyIfDown);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteIndexDir != null) {\n        params.set(CoreAdminParams.DELETE_INDEX, deleteIndexDir);\n      }\n      if (count != null) {\n        params.set(COUNT_PROP, deleteIndexDir);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.set(ZkStateReader.REPLICA_PROP, this.replica);\n\n      if (onlyIfDown != null) {\n        params.set(\"onlyIfDown\", onlyIfDown);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteIndexDir != null) {\n        params.set(CoreAdminParams.DELETE_INDEX, deleteIndexDir);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"609b19bb8de96c4e5e338d1d4a0349957522b601","date":1474892114,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.DeleteReplica#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.DeleteReplica#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n\n      // AsyncCollectionSpecificAdminRequest uses 'name' rather than 'collection'\n      // TODO - deal with this inconsistency\n      params.remove(CoreAdminParams.NAME);\n      if (this.collection == null)\n        throw new IllegalArgumentException(\"You must set a collection name for this request\");\n      params.set(ZkStateReader.COLLECTION_PROP, this.collection);\n\n      if (this.replica != null)\n        params.set(ZkStateReader.REPLICA_PROP, this.replica);\n      if (this.shard != null)\n        params.set(ZkStateReader.SHARD_ID_PROP, this.shard);\n\n      if (onlyIfDown != null) {\n        params.set(\"onlyIfDown\", onlyIfDown);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteIndexDir != null) {\n        params.set(CoreAdminParams.DELETE_INDEX, deleteIndexDir);\n      }\n      if (count != null) {\n        params.set(COUNT_PROP, count);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.set(ZkStateReader.REPLICA_PROP, this.replica);\n\n      if (onlyIfDown != null) {\n        params.set(\"onlyIfDown\", onlyIfDown);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteIndexDir != null) {\n        params.set(CoreAdminParams.DELETE_INDEX, deleteIndexDir);\n      }\n      if (count != null) {\n        params.set(COUNT_PROP, deleteIndexDir);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.DeleteReplica#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.DeleteReplica#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n\n      // AsyncCollectionSpecificAdminRequest uses 'name' rather than 'collection'\n      // TODO - deal with this inconsistency\n      params.remove(CoreAdminParams.NAME);\n      if (this.collection == null)\n        throw new IllegalArgumentException(\"You must set a collection name for this request\");\n      params.set(ZkStateReader.COLLECTION_PROP, this.collection);\n\n      if (this.replica != null)\n        params.set(ZkStateReader.REPLICA_PROP, this.replica);\n      if (this.shard != null)\n        params.set(ZkStateReader.SHARD_ID_PROP, this.shard);\n\n      if (onlyIfDown != null) {\n        params.set(\"onlyIfDown\", onlyIfDown);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteIndexDir != null) {\n        params.set(CoreAdminParams.DELETE_INDEX, deleteIndexDir);\n      }\n      if (count != null) {\n        params.set(COUNT_PROP, count);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.set(ZkStateReader.REPLICA_PROP, this.replica);\n\n      if (onlyIfDown != null) {\n        params.set(\"onlyIfDown\", onlyIfDown);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteIndexDir != null) {\n        params.set(CoreAdminParams.DELETE_INDEX, deleteIndexDir);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.DeleteReplica#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.DeleteReplica#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n\n      // AsyncCollectionSpecificAdminRequest uses 'name' rather than 'collection'\n      // TODO - deal with this inconsistency\n      params.remove(CoreAdminParams.NAME);\n      if (this.collection == null)\n        throw new IllegalArgumentException(\"You must set a collection name for this request\");\n      params.set(ZkStateReader.COLLECTION_PROP, this.collection);\n\n      if (this.replica != null)\n        params.set(ZkStateReader.REPLICA_PROP, this.replica);\n      if (this.shard != null)\n        params.set(ZkStateReader.SHARD_ID_PROP, this.shard);\n\n      if (onlyIfDown != null) {\n        params.set(\"onlyIfDown\", onlyIfDown);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteIndexDir != null) {\n        params.set(CoreAdminParams.DELETE_INDEX, deleteIndexDir);\n      }\n      if (count != null) {\n        params.set(COUNT_PROP, count);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n      params.set(ZkStateReader.REPLICA_PROP, this.replica);\n\n      if (onlyIfDown != null) {\n        params.set(\"onlyIfDown\", onlyIfDown);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteIndexDir != null) {\n        params.set(CoreAdminParams.DELETE_INDEX, deleteIndexDir);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac97ea104d893f16aab430d9904473bc1f233f3c","date":1496249396,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.DeleteReplica#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.DeleteReplica#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n\n      // AsyncCollectionSpecificAdminRequest uses 'name' rather than 'collection'\n      // TODO - deal with this inconsistency\n      params.remove(CoreAdminParams.NAME);\n      params.set(ZkStateReader.COLLECTION_PROP, this.collection);\n\n      if (this.replica != null)\n        params.set(ZkStateReader.REPLICA_PROP, this.replica);\n      if (this.shard != null)\n        params.set(ZkStateReader.SHARD_ID_PROP, this.shard);\n\n      if (onlyIfDown != null) {\n        params.set(\"onlyIfDown\", onlyIfDown);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteIndexDir != null) {\n        params.set(CoreAdminParams.DELETE_INDEX, deleteIndexDir);\n      }\n      if (count != null) {\n        params.set(COUNT_PROP, count);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n\n      // AsyncCollectionSpecificAdminRequest uses 'name' rather than 'collection'\n      // TODO - deal with this inconsistency\n      params.remove(CoreAdminParams.NAME);\n      if (this.collection == null)\n        throw new IllegalArgumentException(\"You must set a collection name for this request\");\n      params.set(ZkStateReader.COLLECTION_PROP, this.collection);\n\n      if (this.replica != null)\n        params.set(ZkStateReader.REPLICA_PROP, this.replica);\n      if (this.shard != null)\n        params.set(ZkStateReader.SHARD_ID_PROP, this.shard);\n\n      if (onlyIfDown != null) {\n        params.set(\"onlyIfDown\", onlyIfDown);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteIndexDir != null) {\n        params.set(CoreAdminParams.DELETE_INDEX, deleteIndexDir);\n      }\n      if (count != null) {\n        params.set(COUNT_PROP, count);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3217321f3e1d7922898c6c633d17acfa840d6875","date":1496257480,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.DeleteReplica#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.DeleteReplica#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n\n      // AsyncCollectionSpecificAdminRequest uses 'name' rather than 'collection'\n      // TODO - deal with this inconsistency\n      params.remove(CoreAdminParams.NAME);\n      params.set(ZkStateReader.COLLECTION_PROP, this.collection);\n\n      if (this.replica != null)\n        params.set(ZkStateReader.REPLICA_PROP, this.replica);\n      if (this.shard != null)\n        params.set(ZkStateReader.SHARD_ID_PROP, this.shard);\n\n      if (onlyIfDown != null) {\n        params.set(\"onlyIfDown\", onlyIfDown);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteIndexDir != null) {\n        params.set(CoreAdminParams.DELETE_INDEX, deleteIndexDir);\n      }\n      if (count != null) {\n        params.set(COUNT_PROP, count);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n\n      // AsyncCollectionSpecificAdminRequest uses 'name' rather than 'collection'\n      // TODO - deal with this inconsistency\n      params.remove(CoreAdminParams.NAME);\n      if (this.collection == null)\n        throw new IllegalArgumentException(\"You must set a collection name for this request\");\n      params.set(ZkStateReader.COLLECTION_PROP, this.collection);\n\n      if (this.replica != null)\n        params.set(ZkStateReader.REPLICA_PROP, this.replica);\n      if (this.shard != null)\n        params.set(ZkStateReader.SHARD_ID_PROP, this.shard);\n\n      if (onlyIfDown != null) {\n        params.set(\"onlyIfDown\", onlyIfDown);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteIndexDir != null) {\n        params.set(CoreAdminParams.DELETE_INDEX, deleteIndexDir);\n      }\n      if (count != null) {\n        params.set(COUNT_PROP, count);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","date":1496281877,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.DeleteReplica#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.DeleteReplica#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n\n      // AsyncCollectionSpecificAdminRequest uses 'name' rather than 'collection'\n      // TODO - deal with this inconsistency\n      params.remove(CoreAdminParams.NAME);\n      params.set(ZkStateReader.COLLECTION_PROP, this.collection);\n\n      if (this.replica != null)\n        params.set(ZkStateReader.REPLICA_PROP, this.replica);\n      if (this.shard != null)\n        params.set(ZkStateReader.SHARD_ID_PROP, this.shard);\n\n      if (onlyIfDown != null) {\n        params.set(\"onlyIfDown\", onlyIfDown);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteIndexDir != null) {\n        params.set(CoreAdminParams.DELETE_INDEX, deleteIndexDir);\n      }\n      if (count != null) {\n        params.set(COUNT_PROP, count);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n\n      // AsyncCollectionSpecificAdminRequest uses 'name' rather than 'collection'\n      // TODO - deal with this inconsistency\n      params.remove(CoreAdminParams.NAME);\n      if (this.collection == null)\n        throw new IllegalArgumentException(\"You must set a collection name for this request\");\n      params.set(ZkStateReader.COLLECTION_PROP, this.collection);\n\n      if (this.replica != null)\n        params.set(ZkStateReader.REPLICA_PROP, this.replica);\n      if (this.shard != null)\n        params.set(ZkStateReader.SHARD_ID_PROP, this.shard);\n\n      if (onlyIfDown != null) {\n        params.set(\"onlyIfDown\", onlyIfDown);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteIndexDir != null) {\n        params.set(CoreAdminParams.DELETE_INDEX, deleteIndexDir);\n      }\n      if (count != null) {\n        params.set(COUNT_PROP, count);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.DeleteReplica#getParams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.DeleteReplica#getParams().mjava","sourceNew":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n\n      // AsyncCollectionSpecificAdminRequest uses 'name' rather than 'collection'\n      // TODO - deal with this inconsistency\n      params.remove(CoreAdminParams.NAME);\n      params.set(ZkStateReader.COLLECTION_PROP, this.collection);\n\n      if (this.replica != null)\n        params.set(ZkStateReader.REPLICA_PROP, this.replica);\n      if (this.shard != null)\n        params.set(ZkStateReader.SHARD_ID_PROP, this.shard);\n\n      if (onlyIfDown != null) {\n        params.set(\"onlyIfDown\", onlyIfDown);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteIndexDir != null) {\n        params.set(CoreAdminParams.DELETE_INDEX, deleteIndexDir);\n      }\n      if (count != null) {\n        params.set(COUNT_PROP, count);\n      }\n      return params;\n    }\n\n","sourceOld":"    @Override\n    public SolrParams getParams() {\n      ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n\n      // AsyncCollectionSpecificAdminRequest uses 'name' rather than 'collection'\n      // TODO - deal with this inconsistency\n      params.remove(CoreAdminParams.NAME);\n      if (this.collection == null)\n        throw new IllegalArgumentException(\"You must set a collection name for this request\");\n      params.set(ZkStateReader.COLLECTION_PROP, this.collection);\n\n      if (this.replica != null)\n        params.set(ZkStateReader.REPLICA_PROP, this.replica);\n      if (this.shard != null)\n        params.set(ZkStateReader.SHARD_ID_PROP, this.shard);\n\n      if (onlyIfDown != null) {\n        params.set(\"onlyIfDown\", onlyIfDown);\n      }\n      if (deleteDataDir != null) {\n        params.set(CoreAdminParams.DELETE_DATA_DIR, deleteDataDir);\n      }\n      if (deleteInstanceDir != null) {\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, deleteInstanceDir);\n      }\n      if (deleteIndexDir != null) {\n        params.set(CoreAdminParams.DELETE_INDEX, deleteIndexDir);\n      }\n      if (count != null) {\n        params.set(COUNT_PROP, count);\n      }\n      return params;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"073a74201a21520f4fc543c9f6d1d87c19a467b2":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"3bbb741690cdafda7f1f7549c26351c912917a69":["d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d"],"b1421546162ccd500af737a45b37a074ef6c06db":["3bbb741690cdafda7f1f7549c26351c912917a69"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"34127d6b305c3e200d697bfcb58e639d65250c6f":["b1421546162ccd500af737a45b37a074ef6c06db"],"3217321f3e1d7922898c6c633d17acfa840d6875":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","ac97ea104d893f16aab430d9904473bc1f233f3c"],"d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bc8f206328a706450934717bec7ccc22ad166fc0":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","073a74201a21520f4fc543c9f6d1d87c19a467b2"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","3217321f3e1d7922898c6c633d17acfa840d6875"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","609b19bb8de96c4e5e338d1d4a0349957522b601"],"609b19bb8de96c4e5e338d1d4a0349957522b601":["073a74201a21520f4fc543c9f6d1d87c19a467b2"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["b1421546162ccd500af737a45b37a074ef6c06db","34127d6b305c3e200d697bfcb58e639d65250c6f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3217321f3e1d7922898c6c633d17acfa840d6875"]},"commit2Childs":{"073a74201a21520f4fc543c9f6d1d87c19a467b2":["bc8f206328a706450934717bec7ccc22ad166fc0","609b19bb8de96c4e5e338d1d4a0349957522b601"],"3bbb741690cdafda7f1f7549c26351c912917a69":["b1421546162ccd500af737a45b37a074ef6c06db"],"b1421546162ccd500af737a45b37a074ef6c06db":["34127d6b305c3e200d697bfcb58e639d65250c6f","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["3217321f3e1d7922898c6c633d17acfa840d6875"],"34127d6b305c3e200d697bfcb58e639d65250c6f":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"3217321f3e1d7922898c6c633d17acfa840d6875":["42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d":["3bbb741690cdafda7f1f7549c26351c912917a69"],"bc8f206328a706450934717bec7ccc22ad166fc0":[],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["ac97ea104d893f16aab430d9904473bc1f233f3c","3217321f3e1d7922898c6c633d17acfa840d6875","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d"],"609b19bb8de96c4e5e338d1d4a0349957522b601":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["073a74201a21520f4fc543c9f6d1d87c19a467b2","bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}