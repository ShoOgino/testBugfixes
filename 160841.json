{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ar/TestArabicFilters#testStemmer().mjava","commits":[{"id":"3149c447232aff105275cf92bb495567e96b0c87","date":1343102374,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ar/TestArabicFilters#testStemmer().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestArabicFilters#testStemmer().mjava","sourceNew":"  /**\n   * Test ArabicStemFilterFactory\n   */\n  public void testStemmer() throws Exception {\n    Reader reader = new StringReader(\"الذين مَلكت أيمانكم\");\n    StandardTokenizerFactory factory = new StandardTokenizerFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    ArabicNormalizationFilterFactory normFactory = new ArabicNormalizationFilterFactory();\n    normFactory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    ArabicStemFilterFactory stemFactory = new ArabicStemFilterFactory();\n    Map<String, String> args = Collections.emptyMap();\n    factory.init(args);\n    normFactory.init(args);\n    Tokenizer tokenizer = factory.create(reader);\n    TokenStream stream = normFactory.create(tokenizer);\n    stream = stemFactory.create(stream);\n    assertTokenStreamContents(stream, new String[] {\"ذين\", \"ملكت\", \"ايمانكم\"});\n  }\n\n","sourceOld":"  /**\n   * Test ArabicStemFilterFactory\n   */\n  public void testStemmer() throws Exception {\n    Reader reader = new StringReader(\"الذين مَلكت أيمانكم\");\n    StandardTokenizerFactory factory = new StandardTokenizerFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    ArabicNormalizationFilterFactory normFactory = new ArabicNormalizationFilterFactory();\n    normFactory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    ArabicStemFilterFactory stemFactory = new ArabicStemFilterFactory();\n    Map<String, String> args = Collections.emptyMap();\n    factory.init(args);\n    normFactory.init(args);\n    Tokenizer tokenizer = factory.create(reader);\n    TokenStream stream = normFactory.create(tokenizer);\n    stream = stemFactory.create(stream);\n    assertTokenStreamContents(stream, new String[] {\"ذين\", \"ملكت\", \"ايمانكم\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ar/TestArabicFilters#testStemmer().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestArabicFilters#testStemmer().mjava","sourceNew":"  /**\n   * Test ArabicStemFilterFactory\n   */\n  public void testStemmer() throws Exception {\n    Reader reader = new StringReader(\"الذين مَلكت أيمانكم\");\n    StandardTokenizerFactory factory = new StandardTokenizerFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    ArabicNormalizationFilterFactory normFactory = new ArabicNormalizationFilterFactory();\n    normFactory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    ArabicStemFilterFactory stemFactory = new ArabicStemFilterFactory();\n    Map<String, String> args = Collections.emptyMap();\n    factory.init(args);\n    normFactory.init(args);\n    Tokenizer tokenizer = factory.create(reader);\n    TokenStream stream = normFactory.create(tokenizer);\n    stream = stemFactory.create(stream);\n    assertTokenStreamContents(stream, new String[] {\"ذين\", \"ملكت\", \"ايمانكم\"});\n  }\n\n","sourceOld":"  /**\n   * Test ArabicStemFilterFactory\n   */\n  public void testStemmer() throws Exception {\n    Reader reader = new StringReader(\"الذين مَلكت أيمانكم\");\n    StandardTokenizerFactory factory = new StandardTokenizerFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    ArabicNormalizationFilterFactory normFactory = new ArabicNormalizationFilterFactory();\n    normFactory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    ArabicStemFilterFactory stemFactory = new ArabicStemFilterFactory();\n    Map<String, String> args = Collections.emptyMap();\n    factory.init(args);\n    normFactory.init(args);\n    Tokenizer tokenizer = factory.create(reader);\n    TokenStream stream = normFactory.create(tokenizer);\n    stream = stemFactory.create(stream);\n    assertTokenStreamContents(stream, new String[] {\"ذين\", \"ملكت\", \"ايمانكم\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ar/TestArabicFilters#testStemmer().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestArabicFilters#testStemmer().mjava","sourceNew":"  /**\n   * Test ArabicStemFilterFactory\n   */\n  public void testStemmer() throws Exception {\n    Reader reader = new StringReader(\"الذين مَلكت أيمانكم\");\n    StandardTokenizerFactory factory = new StandardTokenizerFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    ArabicNormalizationFilterFactory normFactory = new ArabicNormalizationFilterFactory();\n    normFactory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    ArabicStemFilterFactory stemFactory = new ArabicStemFilterFactory();\n    Map<String, String> args = Collections.emptyMap();\n    factory.init(args);\n    normFactory.init(args);\n    Tokenizer tokenizer = factory.create(reader);\n    TokenStream stream = normFactory.create(tokenizer);\n    stream = stemFactory.create(stream);\n    assertTokenStreamContents(stream, new String[] {\"ذين\", \"ملكت\", \"ايمانكم\"});\n  }\n\n","sourceOld":"  /**\n   * Test ArabicStemFilterFactory\n   */\n  public void testStemmer() throws Exception {\n    Reader reader = new StringReader(\"الذين مَلكت أيمانكم\");\n    StandardTokenizerFactory factory = new StandardTokenizerFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    ArabicNormalizationFilterFactory normFactory = new ArabicNormalizationFilterFactory();\n    normFactory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    ArabicStemFilterFactory stemFactory = new ArabicStemFilterFactory();\n    Map<String, String> args = Collections.emptyMap();\n    factory.init(args);\n    normFactory.init(args);\n    Tokenizer tokenizer = factory.create(reader);\n    TokenStream stream = normFactory.create(tokenizer);\n    stream = stemFactory.create(stream);\n    assertTokenStreamContents(stream, new String[] {\"ذين\", \"ملكت\", \"ايمانكم\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ar/TestArabicFilters#testStemmer().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestArabicFilters#testStemmer().mjava","sourceNew":"  /**\n   * Test ArabicStemFilterFactory\n   */\n  public void testStemmer() throws Exception {\n    Reader reader = new StringReader(\"الذين مَلكت أيمانكم\");\n    StandardTokenizerFactory factory = new StandardTokenizerFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    ArabicNormalizationFilterFactory normFactory = new ArabicNormalizationFilterFactory();\n    normFactory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    ArabicStemFilterFactory stemFactory = new ArabicStemFilterFactory();\n    Map<String, String> args = Collections.emptyMap();\n    factory.init(args);\n    normFactory.init(args);\n    Tokenizer tokenizer = factory.create(reader);\n    TokenStream stream = normFactory.create(tokenizer);\n    stream = stemFactory.create(stream);\n    assertTokenStreamContents(stream, new String[] {\"ذين\", \"ملكت\", \"ايمانكم\"});\n  }\n\n","sourceOld":"  /**\n   * Test ArabicStemFilterFactory\n   */\n  public void testStemmer() throws Exception {\n    Reader reader = new StringReader(\"الذين مَلكت أيمانكم\");\n    StandardTokenizerFactory factory = new StandardTokenizerFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    ArabicNormalizationFilterFactory normFactory = new ArabicNormalizationFilterFactory();\n    normFactory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    ArabicStemFilterFactory stemFactory = new ArabicStemFilterFactory();\n    Map<String, String> args = Collections.emptyMap();\n    factory.init(args);\n    normFactory.init(args);\n    Tokenizer tokenizer = factory.create(reader);\n    TokenStream stream = normFactory.create(tokenizer);\n    stream = stemFactory.create(stream);\n    assertTokenStreamContents(stream, new String[] {\"ذين\", \"ملكت\", \"ايمانكم\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ar/TestArabicFilters#testStemmer().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ar/TestArabicFilters#testStemmer().mjava","sourceNew":"  /**\n   * Test ArabicStemFilterFactory\n   */\n  public void testStemmer() throws Exception {\n    Reader reader = new StringReader(\"الذين مَلكت أيمانكم\");\n    Tokenizer tokenizer = tokenizerFactory(\"Standard\").create(reader);\n    TokenStream stream = tokenFilterFactory(\"ArabicNormalization\").create(tokenizer);\n    stream = tokenFilterFactory(\"ArabicStem\").create(stream);\n    assertTokenStreamContents(stream, new String[] {\"ذين\", \"ملكت\", \"ايمانكم\"});\n  }\n\n","sourceOld":"  /**\n   * Test ArabicStemFilterFactory\n   */\n  public void testStemmer() throws Exception {\n    Reader reader = new StringReader(\"الذين مَلكت أيمانكم\");\n    StandardTokenizerFactory factory = new StandardTokenizerFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    ArabicNormalizationFilterFactory normFactory = new ArabicNormalizationFilterFactory();\n    normFactory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    ArabicStemFilterFactory stemFactory = new ArabicStemFilterFactory();\n    Map<String, String> args = Collections.emptyMap();\n    factory.init(args);\n    normFactory.init(args);\n    Tokenizer tokenizer = factory.create(reader);\n    TokenStream stream = normFactory.create(tokenizer);\n    stream = stemFactory.create(stream);\n    assertTokenStreamContents(stream, new String[] {\"ذين\", \"ملكت\", \"ايمانكم\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ar/TestArabicFilters#testStemmer().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ar/TestArabicFilters#testStemmer().mjava","sourceNew":"  /**\n   * Test ArabicStemFilterFactory\n   */\n  public void testStemmer() throws Exception {\n    Reader reader = new StringReader(\"الذين مَلكت أيمانكم\");\n    Tokenizer tokenizer = tokenizerFactory(\"Standard\").create();\n    tokenizer.setReader(reader);\n    TokenStream stream = tokenFilterFactory(\"ArabicNormalization\").create(tokenizer);\n    stream = tokenFilterFactory(\"ArabicStem\").create(stream);\n    assertTokenStreamContents(stream, new String[] {\"ذين\", \"ملكت\", \"ايمانكم\"});\n  }\n\n","sourceOld":"  /**\n   * Test ArabicStemFilterFactory\n   */\n  public void testStemmer() throws Exception {\n    Reader reader = new StringReader(\"الذين مَلكت أيمانكم\");\n    Tokenizer tokenizer = tokenizerFactory(\"Standard\").create(reader);\n    TokenStream stream = tokenFilterFactory(\"ArabicNormalization\").create(tokenizer);\n    stream = tokenFilterFactory(\"ArabicStem\").create(stream);\n    assertTokenStreamContents(stream, new String[] {\"ذين\", \"ملكت\", \"ايمانكم\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75","date":1399205975,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ar/TestArabicFilters#testStemmer().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ar/TestArabicFilters#testStemmer().mjava","sourceNew":"  /**\n   * Test ArabicStemFilterFactory\n   */\n  public void testStemmer() throws Exception {\n    Reader reader = new StringReader(\"الذين مَلكت أيمانكم\");\n    Tokenizer tokenizer = whitespaceMockTokenizer(reader);\n    TokenStream stream = tokenFilterFactory(\"ArabicNormalization\").create(tokenizer);\n    stream = tokenFilterFactory(\"ArabicStem\").create(stream);\n    assertTokenStreamContents(stream, new String[] {\"ذين\", \"ملكت\", \"ايمانكم\"});\n  }\n\n","sourceOld":"  /**\n   * Test ArabicStemFilterFactory\n   */\n  public void testStemmer() throws Exception {\n    Reader reader = new StringReader(\"الذين مَلكت أيمانكم\");\n    Tokenizer tokenizer = tokenizerFactory(\"Standard\").create();\n    tokenizer.setReader(reader);\n    TokenStream stream = tokenFilterFactory(\"ArabicNormalization\").create(tokenizer);\n    stream = tokenFilterFactory(\"ArabicStem\").create(stream);\n    assertTokenStreamContents(stream, new String[] {\"ذين\", \"ملكت\", \"ايمانكم\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3149c447232aff105275cf92bb495567e96b0c87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3149c447232aff105275cf92bb495567e96b0c87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["923f36bb0db6f793cf62dbb68723ae3bfbaf1d75"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["923f36bb0db6f793cf62dbb68723ae3bfbaf1d75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","3149c447232aff105275cf92bb495567e96b0c87","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5a1a22b1ad88b436661458df567f3fdb446392a4"],"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3149c447232aff105275cf92bb495567e96b0c87":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}