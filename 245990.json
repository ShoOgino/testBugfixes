{"path":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\");\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ENGLISH) ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ENGLISH) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n  \n      rsp.add( RawResponseWriter.CONTENT, content );\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\");\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ENGLISH) ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ENGLISH) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n  \n      rsp.add( RawResponseWriter.CONTENT, content );\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\");\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ENGLISH) ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ENGLISH) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n  \n      rsp.add( RawResponseWriter.CONTENT, content );\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\");\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ENGLISH) ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ENGLISH) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n  \n      rsp.add( RawResponseWriter.CONTENT, content );\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\");\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ENGLISH) ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ENGLISH) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n  \n      rsp.add( RawResponseWriter.CONTENT, content );\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\");\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ENGLISH) ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ENGLISH) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n  \n      rsp.add( RawResponseWriter.CONTENT, content );\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"488ddee53b8f555fe7c97322cdf3f356d5e49503","date":1310649459,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\");\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ENGLISH) ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ENGLISH) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      //The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams( req.getParams() );\n      params.set( CommonParams.WT, \"raw\" );\n      req.setParams(params);\n\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n\n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\");\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ENGLISH) ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ENGLISH) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n  \n      rsp.add( RawResponseWriter.CONTENT, content );\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":["5b8221ac2ec1b88c56e0df2282a0d75e7568ae70"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException, KeeperException, InterruptedException \n  {\n    CoreContainer coreContainer = req.getCore().getCoreDescriptor().getCoreContainer();\n    if (coreContainer.isZooKeeperAware()) {\n      showFromZooKeeper(req, rsp, coreContainer);\n    } else {\n      showFromFileSystem(req, rsp);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\");\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ENGLISH) ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ENGLISH) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      //The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams( req.getParams() );\n      params.set( CommonParams.WT, \"raw\" );\n      req.setParams(params);\n\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n\n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException, KeeperException, InterruptedException \n  {\n    CoreContainer coreContainer = req.getCore().getCoreDescriptor().getCoreContainer();\n    if (coreContainer.isZooKeeperAware()) {\n      showFromZooKeeper(req, rsp, coreContainer);\n    } else {\n      showFromFileSystem(req, rsp);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\");\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ENGLISH) ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ENGLISH) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      //The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams( req.getParams() );\n      params.set( CommonParams.WT, \"raw\" );\n      req.setParams(params);\n\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n\n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException, KeeperException, InterruptedException \n  {\n    CoreContainer coreContainer = req.getCore().getCoreDescriptor().getCoreContainer();\n    if (coreContainer.isZooKeeperAware()) {\n      showFromZooKeeper(req, rsp, coreContainer);\n    } else {\n      showFromFileSystem(req, rsp);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\");\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ENGLISH) ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase(Locale.ENGLISH) ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      //The file logic depends on RawResponseWriter, so force its use.\n      ModifiableSolrParams params = new ModifiableSolrParams( req.getParams() );\n      params.set( CommonParams.WT, \"raw\" );\n      req.setParams(params);\n\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n\n      rsp.add(RawResponseWriter.CONTENT, content);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94df854a0d36420ddbf7a4a21330bd00c2354017","date":1384538000,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n      throws InterruptedException, KeeperException, IOException {\n\n    CoreContainer coreContainer = req.getCore().getCoreDescriptor().getCoreContainer();\n    String op = req.getParams().get(\"op\");\n    if (op == null) {\n      if (coreContainer.isZooKeeperAware()) {\n        showFromZooKeeper(req, rsp, coreContainer);\n      } else {\n        showFromFileSystem(req, rsp);\n      }\n    } else if (\"write\".equalsIgnoreCase(op)) {\n      String fname = req.getParams().get(\"file\", null);\n      if (fname == null) {\n        rsp.setException(new SolrException(ErrorCode.BAD_REQUEST, \"No file name specified for write operation.\"));\n      } else {\n        if (coreContainer.isZooKeeperAware()) {\n          if (isHiddenFile(rsp, fname) == false) {\n            writeToZooKeeper(req, rsp, coreContainer);\n          }\n        } else {\n          fname = fname.replace('\\\\', '/'); // normalize slashes. Should be done above too?\n          if (isHiddenFile(rsp, fname) == false) {\n            writeToFileSystem(req, rsp);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException, KeeperException, InterruptedException \n  {\n    CoreContainer coreContainer = req.getCore().getCoreDescriptor().getCoreContainer();\n    if (coreContainer.isZooKeeperAware()) {\n      showFromZooKeeper(req, rsp, coreContainer);\n    } else {\n      showFromFileSystem(req, rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11bf766bfc5fc48f7099fd6d555b16d5ad4478f9","date":1384729182,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n      throws InterruptedException, KeeperException, IOException {\n\n    CoreContainer coreContainer = req.getCore().getCoreDescriptor().getCoreContainer();\n    String op = req.getParams().get(\"op\");\n    if (op == null) {\n      if (coreContainer.isZooKeeperAware()) {\n        showFromZooKeeper(req, rsp, coreContainer);\n      } else {\n        showFromFileSystem(req, rsp);\n      }\n    } else if (\"write\".equalsIgnoreCase(op)) {\n      String fname = req.getParams().get(\"file\", null);\n      if (fname == null) {\n        rsp.setException(new SolrException(ErrorCode.BAD_REQUEST, \"No file name specified for write operation.\"));\n      } else {\n        fname = fname.replace('\\\\', '/');\n        if (isHiddenFile(req, rsp, fname, true) == false) {\n          if (coreContainer.isZooKeeperAware()) {\n            writeToZooKeeper(req, rsp, coreContainer);\n          } else {\n            writeToFileSystem(req, rsp);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n      throws InterruptedException, KeeperException, IOException {\n\n    CoreContainer coreContainer = req.getCore().getCoreDescriptor().getCoreContainer();\n    String op = req.getParams().get(\"op\");\n    if (op == null) {\n      if (coreContainer.isZooKeeperAware()) {\n        showFromZooKeeper(req, rsp, coreContainer);\n      } else {\n        showFromFileSystem(req, rsp);\n      }\n    } else if (\"write\".equalsIgnoreCase(op)) {\n      String fname = req.getParams().get(\"file\", null);\n      if (fname == null) {\n        rsp.setException(new SolrException(ErrorCode.BAD_REQUEST, \"No file name specified for write operation.\"));\n      } else {\n        if (coreContainer.isZooKeeperAware()) {\n          if (isHiddenFile(rsp, fname) == false) {\n            writeToZooKeeper(req, rsp, coreContainer);\n          }\n        } else {\n          fname = fname.replace('\\\\', '/'); // normalize slashes. Should be done above too?\n          if (isHiddenFile(rsp, fname) == false) {\n            writeToFileSystem(req, rsp);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b51e04dc58a1002908e3caba8f5eb8ef59abe00","date":1384906513,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n      throws InterruptedException, KeeperException, IOException {\n\n    CoreContainer coreContainer = req.getCore().getCoreDescriptor().getCoreContainer();\n    String op = req.getParams().get(OP_PARAM);\n    if (op == null) {\n      if (coreContainer.isZooKeeperAware()) {\n        showFromZooKeeper(req, rsp, coreContainer);\n      } else {\n        showFromFileSystem(req, rsp);\n      }\n    } else if (OP_WRITE.equalsIgnoreCase(op) || OP_TEST.equalsIgnoreCase(op)) {\n      String fname = req.getParams().get(\"file\", null);\n      if (fname == null) {\n        rsp.setException(new SolrException(ErrorCode.BAD_REQUEST, \"No file name specified for write operation.\"));\n      } else {\n        fname = fname.replace('\\\\', '/');\n        if (isHiddenFile(req, rsp, fname, true) == false) {\n          if (coreContainer.isZooKeeperAware()) {\n            writeToZooKeeper(req, rsp);\n          } else {\n            writeToFileSystem(req, rsp);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n      throws InterruptedException, KeeperException, IOException {\n\n    CoreContainer coreContainer = req.getCore().getCoreDescriptor().getCoreContainer();\n    String op = req.getParams().get(\"op\");\n    if (op == null) {\n      if (coreContainer.isZooKeeperAware()) {\n        showFromZooKeeper(req, rsp, coreContainer);\n      } else {\n        showFromFileSystem(req, rsp);\n      }\n    } else if (\"write\".equalsIgnoreCase(op)) {\n      String fname = req.getParams().get(\"file\", null);\n      if (fname == null) {\n        rsp.setException(new SolrException(ErrorCode.BAD_REQUEST, \"No file name specified for write operation.\"));\n      } else {\n        fname = fname.replace('\\\\', '/');\n        if (isHiddenFile(req, rsp, fname, true) == false) {\n          if (coreContainer.isZooKeeperAware()) {\n            writeToZooKeeper(req, rsp, coreContainer);\n          } else {\n            writeToFileSystem(req, rsp);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7455ee5c847b2ee7e44656e4218141f62dacb572","date":1386032125,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n      throws InterruptedException, KeeperException, IOException {\n\n    CoreContainer coreContainer = req.getCore().getCoreDescriptor().getCoreContainer();\n    if (coreContainer.isZooKeeperAware()) {\n      showFromZooKeeper(req, rsp, coreContainer);\n    } else {\n      showFromFileSystem(req, rsp);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n      throws InterruptedException, KeeperException, IOException {\n\n    CoreContainer coreContainer = req.getCore().getCoreDescriptor().getCoreContainer();\n    String op = req.getParams().get(OP_PARAM);\n    if (op == null) {\n      if (coreContainer.isZooKeeperAware()) {\n        showFromZooKeeper(req, rsp, coreContainer);\n      } else {\n        showFromFileSystem(req, rsp);\n      }\n    } else if (OP_WRITE.equalsIgnoreCase(op) || OP_TEST.equalsIgnoreCase(op)) {\n      String fname = req.getParams().get(\"file\", null);\n      if (fname == null) {\n        rsp.setException(new SolrException(ErrorCode.BAD_REQUEST, \"No file name specified for write operation.\"));\n      } else {\n        fname = fname.replace('\\\\', '/');\n        if (isHiddenFile(req, rsp, fname, true) == false) {\n          if (coreContainer.isZooKeeperAware()) {\n            writeToZooKeeper(req, rsp);\n          } else {\n            writeToFileSystem(req, rsp);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n      throws InterruptedException, KeeperException, IOException {\n\n    CoreContainer coreContainer = req.getCore().getCoreDescriptor().getCoreContainer();\n    if (coreContainer.isZooKeeperAware()) {\n      showFromZooKeeper(req, rsp, coreContainer);\n    } else {\n      showFromFileSystem(req, rsp);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException, KeeperException, InterruptedException \n  {\n    CoreContainer coreContainer = req.getCore().getCoreDescriptor().getCoreContainer();\n    if (coreContainer.isZooKeeperAware()) {\n      showFromZooKeeper(req, rsp, coreContainer);\n    } else {\n      showFromFileSystem(req, rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n      throws InterruptedException, KeeperException, IOException {\n\n    CoreContainer coreContainer = req.getCore().getCoreContainer();\n    if (coreContainer.isZooKeeperAware()) {\n      showFromZooKeeper(req, rsp, coreContainer);\n    } else {\n      showFromFileSystem(req, rsp);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n      throws InterruptedException, KeeperException, IOException {\n\n    CoreContainer coreContainer = req.getCore().getCoreDescriptor().getCoreContainer();\n    if (coreContainer.isZooKeeperAware()) {\n      showFromZooKeeper(req, rsp, coreContainer);\n    } else {\n      showFromFileSystem(req, rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n      throws InterruptedException, KeeperException, IOException {\n\n    CoreContainer coreContainer = req.getCore().getCoreContainer();\n    if (coreContainer.isZooKeeperAware()) {\n      showFromZooKeeper(req, rsp, coreContainer);\n    } else {\n      showFromFileSystem(req, rsp);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp)\n      throws InterruptedException, KeeperException, IOException {\n\n    CoreContainer coreContainer = req.getCore().getCoreDescriptor().getCoreContainer();\n    if (coreContainer.isZooKeeperAware()) {\n      showFromZooKeeper(req, rsp, coreContainer);\n    } else {\n      showFromFileSystem(req, rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["7455ee5c847b2ee7e44656e4218141f62dacb572"],"94df854a0d36420ddbf7a4a21330bd00c2354017":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["488ddee53b8f555fe7c97322cdf3f356d5e49503","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"7455ee5c847b2ee7e44656e4218141f62dacb572":["8b51e04dc58a1002908e3caba8f5eb8ef59abe00"],"488ddee53b8f555fe7c97322cdf3f356d5e49503":["c26f00b574427b55127e869b935845554afde1fa"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["7455ee5c847b2ee7e44656e4218141f62dacb572"],"11bf766bfc5fc48f7099fd6d555b16d5ad4478f9":["94df854a0d36420ddbf7a4a21330bd00c2354017"],"8b51e04dc58a1002908e3caba8f5eb8ef59abe00":["11bf766bfc5fc48f7099fd6d555b16d5ad4478f9"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["488ddee53b8f555fe7c97322cdf3f356d5e49503","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["488ddee53b8f555fe7c97322cdf3f356d5e49503"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","7455ee5c847b2ee7e44656e4218141f62dacb572"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"94df854a0d36420ddbf7a4a21330bd00c2354017":["11bf766bfc5fc48f7099fd6d555b16d5ad4478f9"],"c26f00b574427b55127e869b935845554afde1fa":["488ddee53b8f555fe7c97322cdf3f356d5e49503"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"7455ee5c847b2ee7e44656e4218141f62dacb572":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"488ddee53b8f555fe7c97322cdf3f356d5e49503":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"11bf766bfc5fc48f7099fd6d555b16d5ad4478f9":["8b51e04dc58a1002908e3caba8f5eb8ef59abe00"],"8b51e04dc58a1002908e3caba8f5eb8ef59abe00":["7455ee5c847b2ee7e44656e4218141f62dacb572"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["94df854a0d36420ddbf7a4a21330bd00c2354017","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","74f45af4339b0daf7a95c820ab88c1aea74fbce0","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}