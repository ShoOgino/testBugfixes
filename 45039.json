{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestInetAddressPoint#testPrefixQuery().mjava","commits":[{"id":"3f3b56c78dfadd81142dd9b9563806ed95a89fde","date":1461158000,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestInetAddressPoint#testPrefixQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testPrefixQuery() throws Exception {\n    assertEquals(\n        InetAddressPoint.newRangeQuery(\"a\", InetAddress.getByName(\"1.2.3.0\"), InetAddress.getByName(\"1.2.3.255\")),\n        InetAddressPoint.newPrefixQuery(\"a\", InetAddress.getByName(\"1.2.3.127\"), 24));\n    assertEquals(\n        InetAddressPoint.newRangeQuery(\"a\", InetAddress.getByName(\"1.2.3.128\"), InetAddress.getByName(\"1.2.3.255\")),\n        InetAddressPoint.newPrefixQuery(\"a\", InetAddress.getByName(\"1.2.3.213\"), 25));\n    assertEquals(\n        InetAddressPoint.newRangeQuery(\"a\", InetAddress.getByName(\"2001::a000:0\"), InetAddress.getByName(\"2001::afff:ffff\")),\n        InetAddressPoint.newPrefixQuery(\"a\", InetAddress.getByName(\"2001::a6bd:fc80\"), 100));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b701e0fcef214f86bab1daf107adce0b0131212","date":1461241874,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestInetAddressPoint#testPrefixQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testPrefixQuery() throws Exception {\n    assertEquals(\n        InetAddressPoint.newRangeQuery(\"a\", InetAddress.getByName(\"1.2.3.0\"), InetAddress.getByName(\"1.2.3.255\")),\n        InetAddressPoint.newPrefixQuery(\"a\", InetAddress.getByName(\"1.2.3.127\"), 24));\n    assertEquals(\n        InetAddressPoint.newRangeQuery(\"a\", InetAddress.getByName(\"1.2.3.128\"), InetAddress.getByName(\"1.2.3.255\")),\n        InetAddressPoint.newPrefixQuery(\"a\", InetAddress.getByName(\"1.2.3.213\"), 25));\n    assertEquals(\n        InetAddressPoint.newRangeQuery(\"a\", InetAddress.getByName(\"2001::a000:0\"), InetAddress.getByName(\"2001::afff:ffff\")),\n        InetAddressPoint.newPrefixQuery(\"a\", InetAddress.getByName(\"2001::a6bd:fc80\"), 100));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a52b01a73cacbd2d360240e72d64c0ba353618f","date":1489389749,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/document/TestInetAddressPoint#testPrefixQuery().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestInetAddressPoint#testPrefixQuery().mjava","sourceNew":"  public void testPrefixQuery() throws Exception {\n    assertEquals(\n        InetAddressPoint.newRangeQuery(\"a\", InetAddress.getByName(\"1.2.3.0\"), InetAddress.getByName(\"1.2.3.255\")),\n        InetAddressPoint.newPrefixQuery(\"a\", InetAddress.getByName(\"1.2.3.127\"), 24));\n    assertEquals(\n        InetAddressPoint.newRangeQuery(\"a\", InetAddress.getByName(\"1.2.3.128\"), InetAddress.getByName(\"1.2.3.255\")),\n        InetAddressPoint.newPrefixQuery(\"a\", InetAddress.getByName(\"1.2.3.213\"), 25));\n    assertEquals(\n        InetAddressPoint.newRangeQuery(\"a\", InetAddress.getByName(\"2001::a000:0\"), InetAddress.getByName(\"2001::afff:ffff\")),\n        InetAddressPoint.newPrefixQuery(\"a\", InetAddress.getByName(\"2001::a6bd:fc80\"), 100));\n  }\n\n","sourceOld":"  public void testPrefixQuery() throws Exception {\n    assertEquals(\n        InetAddressPoint.newRangeQuery(\"a\", InetAddress.getByName(\"1.2.3.0\"), InetAddress.getByName(\"1.2.3.255\")),\n        InetAddressPoint.newPrefixQuery(\"a\", InetAddress.getByName(\"1.2.3.127\"), 24));\n    assertEquals(\n        InetAddressPoint.newRangeQuery(\"a\", InetAddress.getByName(\"1.2.3.128\"), InetAddress.getByName(\"1.2.3.255\")),\n        InetAddressPoint.newPrefixQuery(\"a\", InetAddress.getByName(\"1.2.3.213\"), 25));\n    assertEquals(\n        InetAddressPoint.newRangeQuery(\"a\", InetAddress.getByName(\"2001::a000:0\"), InetAddress.getByName(\"2001::afff:ffff\")),\n        InetAddressPoint.newPrefixQuery(\"a\", InetAddress.getByName(\"2001::a6bd:fc80\"), 100));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9b701e0fcef214f86bab1daf107adce0b0131212":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f3b56c78dfadd81142dd9b9563806ed95a89fde"],"3f3b56c78dfadd81142dd9b9563806ed95a89fde":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4a52b01a73cacbd2d360240e72d64c0ba353618f":["9b701e0fcef214f86bab1daf107adce0b0131212"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4a52b01a73cacbd2d360240e72d64c0ba353618f"]},"commit2Childs":{"9b701e0fcef214f86bab1daf107adce0b0131212":["4a52b01a73cacbd2d360240e72d64c0ba353618f"],"3f3b56c78dfadd81142dd9b9563806ed95a89fde":["9b701e0fcef214f86bab1daf107adce0b0131212"],"4a52b01a73cacbd2d360240e72d64c0ba353618f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9b701e0fcef214f86bab1daf107adce0b0131212","3f3b56c78dfadd81142dd9b9563806ed95a89fde"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}