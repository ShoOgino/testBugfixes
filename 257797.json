{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testMultilingualInput().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testMultilingualInput().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testMultilingualInput().mjava","sourceNew":"  public void testMultilingualInput() throws Exception {\n    List<TermFreq> input = LookupBenchmarkTest.readTop50KWiki();\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqArrayIterator(input));\n    for (TermFreq tf : input) {\n      assertNotNull(\"Not found: \" + tf.term.toString(), lookup.get(_TestUtil.bytesToCharSequence(tf.term, random())));\n      assertEquals(tf.term.utf8ToString(), lookup.lookup(_TestUtil.bytesToCharSequence(tf.term, random()), true, 1).get(0).key.toString());\n    }\n\n    List<LookupResult> result = lookup.lookup(stringToCharSequence(\"wit\"), true, 5);\n    assertEquals(5, result.size());\n    assertTrue(result.get(0).key.toString().equals(\"wit\"));  // exact match.\n    assertTrue(result.get(1).key.toString().equals(\"with\")); // highest count.\n  }\n\n","sourceOld":"  public void testMultilingualInput() throws Exception {\n    List<TermFreq> input = LookupBenchmarkTest.readTop50KWiki();\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqArrayIterator(input));\n    for (TermFreq tf : input) {\n      assertNotNull(\"Not found: \" + tf.term.toString(), lookup.get(_TestUtil.bytesToCharSequence(tf.term, random())));\n      assertEquals(tf.term.utf8ToString(), lookup.lookup(_TestUtil.bytesToCharSequence(tf.term, random()), true, 1).get(0).key.toString());\n    }\n\n    List<LookupResult> result = lookup.lookup(stringToCharSequence(\"wit\"), true, 5);\n    assertEquals(5, result.size());\n    assertTrue(result.get(0).key.toString().equals(\"wit\"));  // exact match.\n    assertTrue(result.get(1).key.toString().equals(\"with\")); // highest count.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ada2f7352a7f964fe49bccd13227c4ec38563d39","date":1381659982,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testMultilingualInput().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testMultilingualInput().mjava","sourceNew":"  public void testMultilingualInput() throws Exception {\n    List<TermFreqPayload> input = LookupBenchmarkTest.readTop50KWiki();\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqPayloadArrayIterator(input));\n    for (TermFreqPayload tf : input) {\n      assertNotNull(\"Not found: \" + tf.term.toString(), lookup.get(_TestUtil.bytesToCharSequence(tf.term, random())));\n      assertEquals(tf.term.utf8ToString(), lookup.lookup(_TestUtil.bytesToCharSequence(tf.term, random()), true, 1).get(0).key.toString());\n    }\n\n    List<LookupResult> result = lookup.lookup(stringToCharSequence(\"wit\"), true, 5);\n    assertEquals(5, result.size());\n    assertTrue(result.get(0).key.toString().equals(\"wit\"));  // exact match.\n    assertTrue(result.get(1).key.toString().equals(\"with\")); // highest count.\n  }\n\n","sourceOld":"  public void testMultilingualInput() throws Exception {\n    List<TermFreq> input = LookupBenchmarkTest.readTop50KWiki();\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqArrayIterator(input));\n    for (TermFreq tf : input) {\n      assertNotNull(\"Not found: \" + tf.term.toString(), lookup.get(_TestUtil.bytesToCharSequence(tf.term, random())));\n      assertEquals(tf.term.utf8ToString(), lookup.lookup(_TestUtil.bytesToCharSequence(tf.term, random()), true, 1).get(0).key.toString());\n    }\n\n    List<LookupResult> result = lookup.lookup(stringToCharSequence(\"wit\"), true, 5);\n    assertEquals(5, result.size());\n    assertTrue(result.get(0).key.toString().equals(\"wit\"));  // exact match.\n    assertTrue(result.get(1).key.toString().equals(\"with\")); // highest count.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41aee74b5f91a096e3fd950f4a336bc763f0e7a7","date":1381772070,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testMultilingualInput().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testMultilingualInput().mjava","sourceNew":"  public void testMultilingualInput() throws Exception {\n    List<Input> input = LookupBenchmarkTest.readTop50KWiki();\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new InputArrayIterator(input));\n    for (Input tf : input) {\n      assertNotNull(\"Not found: \" + tf.term.toString(), lookup.get(_TestUtil.bytesToCharSequence(tf.term, random())));\n      assertEquals(tf.term.utf8ToString(), lookup.lookup(_TestUtil.bytesToCharSequence(tf.term, random()), true, 1).get(0).key.toString());\n    }\n\n    List<LookupResult> result = lookup.lookup(stringToCharSequence(\"wit\"), true, 5);\n    assertEquals(5, result.size());\n    assertTrue(result.get(0).key.toString().equals(\"wit\"));  // exact match.\n    assertTrue(result.get(1).key.toString().equals(\"with\")); // highest count.\n  }\n\n","sourceOld":"  public void testMultilingualInput() throws Exception {\n    List<TermFreqPayload> input = LookupBenchmarkTest.readTop50KWiki();\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new TermFreqPayloadArrayIterator(input));\n    for (TermFreqPayload tf : input) {\n      assertNotNull(\"Not found: \" + tf.term.toString(), lookup.get(_TestUtil.bytesToCharSequence(tf.term, random())));\n      assertEquals(tf.term.utf8ToString(), lookup.lookup(_TestUtil.bytesToCharSequence(tf.term, random()), true, 1).get(0).key.toString());\n    }\n\n    List<LookupResult> result = lookup.lookup(stringToCharSequence(\"wit\"), true, 5);\n    assertEquals(5, result.size());\n    assertTrue(result.get(0).key.toString().equals(\"wit\"));  // exact match.\n    assertTrue(result.get(1).key.toString().equals(\"with\")); // highest count.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a645276cbaf5dc96a42fd473b9019bde352996c8","date":1391806699,"type":3,"author":"Areek Zillur","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testMultilingualInput().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testMultilingualInput().mjava","sourceNew":"  public void testMultilingualInput() throws Exception {\n    List<Input> input = LookupBenchmarkTest.readTop50KWiki();\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new InputArrayIterator(input));\n    assertEquals(input.size(), lookup.getCount());\n    for (Input tf : input) {\n      assertNotNull(\"Not found: \" + tf.term.toString(), lookup.get(_TestUtil.bytesToCharSequence(tf.term, random())));\n      assertEquals(tf.term.utf8ToString(), lookup.lookup(_TestUtil.bytesToCharSequence(tf.term, random()), true, 1).get(0).key.toString());\n    }\n\n    List<LookupResult> result = lookup.lookup(stringToCharSequence(\"wit\"), true, 5);\n    assertEquals(5, result.size());\n    assertTrue(result.get(0).key.toString().equals(\"wit\"));  // exact match.\n    assertTrue(result.get(1).key.toString().equals(\"with\")); // highest count.\n  }\n\n","sourceOld":"  public void testMultilingualInput() throws Exception {\n    List<Input> input = LookupBenchmarkTest.readTop50KWiki();\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new InputArrayIterator(input));\n    for (Input tf : input) {\n      assertNotNull(\"Not found: \" + tf.term.toString(), lookup.get(_TestUtil.bytesToCharSequence(tf.term, random())));\n      assertEquals(tf.term.utf8ToString(), lookup.lookup(_TestUtil.bytesToCharSequence(tf.term, random()), true, 1).get(0).key.toString());\n    }\n\n    List<LookupResult> result = lookup.lookup(stringToCharSequence(\"wit\"), true, 5);\n    assertEquals(5, result.size());\n    assertTrue(result.get(0).key.toString().equals(\"wit\"));  // exact match.\n    assertTrue(result.get(1).key.toString().equals(\"with\")); // highest count.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testMultilingualInput().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testMultilingualInput().mjava","sourceNew":"  public void testMultilingualInput() throws Exception {\n    List<Input> input = LookupBenchmarkTest.readTop50KWiki();\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new InputArrayIterator(input));\n    assertEquals(input.size(), lookup.getCount());\n    for (Input tf : input) {\n      assertNotNull(\"Not found: \" + tf.term.toString(), lookup.get(TestUtil.bytesToCharSequence(tf.term, random())));\n      assertEquals(tf.term.utf8ToString(), lookup.lookup(TestUtil.bytesToCharSequence(tf.term, random()), true, 1).get(0).key.toString());\n    }\n\n    List<LookupResult> result = lookup.lookup(stringToCharSequence(\"wit\"), true, 5);\n    assertEquals(5, result.size());\n    assertTrue(result.get(0).key.toString().equals(\"wit\"));  // exact match.\n    assertTrue(result.get(1).key.toString().equals(\"with\")); // highest count.\n  }\n\n","sourceOld":"  public void testMultilingualInput() throws Exception {\n    List<Input> input = LookupBenchmarkTest.readTop50KWiki();\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new InputArrayIterator(input));\n    assertEquals(input.size(), lookup.getCount());\n    for (Input tf : input) {\n      assertNotNull(\"Not found: \" + tf.term.toString(), lookup.get(_TestUtil.bytesToCharSequence(tf.term, random())));\n      assertEquals(tf.term.utf8ToString(), lookup.lookup(_TestUtil.bytesToCharSequence(tf.term, random()), true, 1).get(0).key.toString());\n    }\n\n    List<LookupResult> result = lookup.lookup(stringToCharSequence(\"wit\"), true, 5);\n    assertEquals(5, result.size());\n    assertTrue(result.get(0).key.toString().equals(\"wit\"));  // exact match.\n    assertTrue(result.get(1).key.toString().equals(\"with\")); // highest count.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testMultilingualInput().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testMultilingualInput().mjava","sourceNew":"  public void testMultilingualInput() throws Exception {\n    List<Input> input = LookupBenchmarkTest.readTop50KWiki();\n\n    Directory tempDir = getDirectory();\n    FSTCompletionLookup lookup = new FSTCompletionLookup(tempDir, \"fst\");\n    lookup.build(new InputArrayIterator(input));\n    assertEquals(input.size(), lookup.getCount());\n    for (Input tf : input) {\n      assertNotNull(\"Not found: \" + tf.term.toString(), lookup.get(TestUtil.bytesToCharSequence(tf.term, random())));\n      assertEquals(tf.term.utf8ToString(), lookup.lookup(TestUtil.bytesToCharSequence(tf.term, random()), true, 1).get(0).key.toString());\n    }\n\n    List<LookupResult> result = lookup.lookup(stringToCharSequence(\"wit\"), true, 5);\n    assertEquals(5, result.size());\n    assertTrue(result.get(0).key.toString().equals(\"wit\"));  // exact match.\n    assertTrue(result.get(1).key.toString().equals(\"with\")); // highest count.\n    tempDir.close();\n  }\n\n","sourceOld":"  public void testMultilingualInput() throws Exception {\n    List<Input> input = LookupBenchmarkTest.readTop50KWiki();\n\n    FSTCompletionLookup lookup = new FSTCompletionLookup();\n    lookup.build(new InputArrayIterator(input));\n    assertEquals(input.size(), lookup.getCount());\n    for (Input tf : input) {\n      assertNotNull(\"Not found: \" + tf.term.toString(), lookup.get(TestUtil.bytesToCharSequence(tf.term, random())));\n      assertEquals(tf.term.utf8ToString(), lookup.lookup(TestUtil.bytesToCharSequence(tf.term, random()), true, 1).get(0).key.toString());\n    }\n\n    List<LookupResult> result = lookup.lookup(stringToCharSequence(\"wit\"), true, 5);\n    assertEquals(5, result.size());\n    assertTrue(result.get(0).key.toString().equals(\"wit\"));  // exact match.\n    assertTrue(result.get(1).key.toString().equals(\"with\")); // highest count.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","date":1579652839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testMultilingualInput().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testMultilingualInput().mjava","sourceNew":"  @Slow\n  public void testMultilingualInput() throws Exception {\n    List<Input> input = LookupBenchmarkTest.readTop50KWiki();\n\n    Directory tempDir = getDirectory();\n    FSTCompletionLookup lookup = new FSTCompletionLookup(tempDir, \"fst\");\n    lookup.build(new InputArrayIterator(input));\n    assertEquals(input.size(), lookup.getCount());\n    for (Input tf : input) {\n      assertNotNull(\"Not found: \" + tf.term.toString(), lookup.get(TestUtil.bytesToCharSequence(tf.term, random())));\n      assertEquals(tf.term.utf8ToString(), lookup.lookup(TestUtil.bytesToCharSequence(tf.term, random()), true, 1).get(0).key.toString());\n    }\n\n    List<LookupResult> result = lookup.lookup(stringToCharSequence(\"wit\"), true, 5);\n    assertEquals(5, result.size());\n    assertTrue(result.get(0).key.toString().equals(\"wit\"));  // exact match.\n    assertTrue(result.get(1).key.toString().equals(\"with\")); // highest count.\n    tempDir.close();\n  }\n\n","sourceOld":"  public void testMultilingualInput() throws Exception {\n    List<Input> input = LookupBenchmarkTest.readTop50KWiki();\n\n    Directory tempDir = getDirectory();\n    FSTCompletionLookup lookup = new FSTCompletionLookup(tempDir, \"fst\");\n    lookup.build(new InputArrayIterator(input));\n    assertEquals(input.size(), lookup.getCount());\n    for (Input tf : input) {\n      assertNotNull(\"Not found: \" + tf.term.toString(), lookup.get(TestUtil.bytesToCharSequence(tf.term, random())));\n      assertEquals(tf.term.utf8ToString(), lookup.lookup(TestUtil.bytesToCharSequence(tf.term, random()), true, 1).get(0).key.toString());\n    }\n\n    List<LookupResult> result = lookup.lookup(stringToCharSequence(\"wit\"), true, 5);\n    assertEquals(5, result.size());\n    assertTrue(result.get(0).key.toString().equals(\"wit\"));  // exact match.\n    assertTrue(result.get(1).key.toString().equals(\"with\")); // highest count.\n    tempDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"6613659748fe4411a7dcf85266e55db1f95f7315":["a645276cbaf5dc96a42fd473b9019bde352996c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a645276cbaf5dc96a42fd473b9019bde352996c8":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["a645276cbaf5dc96a42fd473b9019bde352996c8"],"6613659748fe4411a7dcf85266e55db1f95f7315":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a645276cbaf5dc96a42fd473b9019bde352996c8":["6613659748fe4411a7dcf85266e55db1f95f7315"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}