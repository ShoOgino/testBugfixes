{"path":"lucene/core/src/test/org/apache/lucene/index/TestDocIDMerger#testNoSort().mjava","commits":[{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocIDMerger#testNoSort().mjava","pathOld":"/dev/null","sourceNew":"  public void testNoSort() throws Exception {\n\n    int subCount = TestUtil.nextInt(random(), 1, 20);\n    List<TestSubUnsorted> subs = new ArrayList<>();\n    int valueStart = 0;\n    for(int i=0;i<subCount;i++) {\n      int maxDoc = TestUtil.nextInt(random(), 1, 1000);\n      final int docBase = valueStart;\n      subs.add(new TestSubUnsorted(new MergeState.DocMap() {\n          @Override\n          public int get(int docID) {\n            return docBase + docID;\n          }\n        }, null, maxDoc, valueStart));\n      valueStart += maxDoc;\n    }\n\n    DocIDMerger<TestSubUnsorted> merger = new DocIDMerger<>(subs, false);\n\n    int count = 0;\n    while (true) {\n      TestSubUnsorted sub = merger.next();\n      if (sub == null) {\n        break;\n      }\n      assertEquals(count, sub.mappedDocID);\n      assertEquals(count, sub.getValue());\n      count++;\n    }\n\n    assertEquals(valueStart, count);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d8200beeffd3fa5155855f4cb8a8a5e38aeff14","date":1462698019,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocIDMerger#testNoSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocIDMerger#testNoSort().mjava","sourceNew":"  public void testNoSort() throws Exception {\n\n    int subCount = TestUtil.nextInt(random(), 1, 20);\n    List<TestSubUnsorted> subs = new ArrayList<>();\n    int valueStart = 0;\n    for(int i=0;i<subCount;i++) {\n      int maxDoc = TestUtil.nextInt(random(), 1, 1000);\n      final int docBase = valueStart;\n      subs.add(new TestSubUnsorted(new MergeState.DocMap() {\n          @Override\n          public int get(int docID) {\n            return docBase + docID;\n          }\n        }, maxDoc, valueStart));\n      valueStart += maxDoc;\n    }\n\n    DocIDMerger<TestSubUnsorted> merger = new DocIDMerger<>(subs, false);\n\n    int count = 0;\n    while (true) {\n      TestSubUnsorted sub = merger.next();\n      if (sub == null) {\n        break;\n      }\n      assertEquals(count, sub.mappedDocID);\n      assertEquals(count, sub.getValue());\n      count++;\n    }\n\n    assertEquals(valueStart, count);\n  }\n\n","sourceOld":"  public void testNoSort() throws Exception {\n\n    int subCount = TestUtil.nextInt(random(), 1, 20);\n    List<TestSubUnsorted> subs = new ArrayList<>();\n    int valueStart = 0;\n    for(int i=0;i<subCount;i++) {\n      int maxDoc = TestUtil.nextInt(random(), 1, 1000);\n      final int docBase = valueStart;\n      subs.add(new TestSubUnsorted(new MergeState.DocMap() {\n          @Override\n          public int get(int docID) {\n            return docBase + docID;\n          }\n        }, null, maxDoc, valueStart));\n      valueStart += maxDoc;\n    }\n\n    DocIDMerger<TestSubUnsorted> merger = new DocIDMerger<>(subs, false);\n\n    int count = 0;\n    while (true) {\n      TestSubUnsorted sub = merger.next();\n      if (sub == null) {\n        break;\n      }\n      assertEquals(count, sub.mappedDocID);\n      assertEquals(count, sub.getValue());\n      count++;\n    }\n\n    assertEquals(valueStart, count);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocIDMerger#testNoSort().mjava","pathOld":"/dev/null","sourceNew":"  public void testNoSort() throws Exception {\n\n    int subCount = TestUtil.nextInt(random(), 1, 20);\n    List<TestSubUnsorted> subs = new ArrayList<>();\n    int valueStart = 0;\n    for(int i=0;i<subCount;i++) {\n      int maxDoc = TestUtil.nextInt(random(), 1, 1000);\n      final int docBase = valueStart;\n      subs.add(new TestSubUnsorted(new MergeState.DocMap() {\n          @Override\n          public int get(int docID) {\n            return docBase + docID;\n          }\n        }, maxDoc, valueStart));\n      valueStart += maxDoc;\n    }\n\n    DocIDMerger<TestSubUnsorted> merger = new DocIDMerger<>(subs, false);\n\n    int count = 0;\n    while (true) {\n      TestSubUnsorted sub = merger.next();\n      if (sub == null) {\n        break;\n      }\n      assertEquals(count, sub.mappedDocID);\n      assertEquals(count, sub.getValue());\n      count++;\n    }\n\n    assertEquals(valueStart, count);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocIDMerger#testNoSort().mjava","pathOld":"/dev/null","sourceNew":"  public void testNoSort() throws Exception {\n\n    int subCount = TestUtil.nextInt(random(), 1, 20);\n    List<TestSubUnsorted> subs = new ArrayList<>();\n    int valueStart = 0;\n    for(int i=0;i<subCount;i++) {\n      int maxDoc = TestUtil.nextInt(random(), 1, 1000);\n      final int docBase = valueStart;\n      subs.add(new TestSubUnsorted(new MergeState.DocMap() {\n          @Override\n          public int get(int docID) {\n            return docBase + docID;\n          }\n        }, maxDoc, valueStart));\n      valueStart += maxDoc;\n    }\n\n    DocIDMerger<TestSubUnsorted> merger = new DocIDMerger<>(subs, false);\n\n    int count = 0;\n    while (true) {\n      TestSubUnsorted sub = merger.next();\n      if (sub == null) {\n        break;\n      }\n      assertEquals(count, sub.mappedDocID);\n      assertEquals(count, sub.getValue());\n      count++;\n    }\n\n    assertEquals(valueStart, count);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocIDMerger#testNoSort().mjava","pathOld":"/dev/null","sourceNew":"  public void testNoSort() throws Exception {\n\n    int subCount = TestUtil.nextInt(random(), 1, 20);\n    List<TestSubUnsorted> subs = new ArrayList<>();\n    int valueStart = 0;\n    for(int i=0;i<subCount;i++) {\n      int maxDoc = TestUtil.nextInt(random(), 1, 1000);\n      final int docBase = valueStart;\n      subs.add(new TestSubUnsorted(new MergeState.DocMap() {\n          @Override\n          public int get(int docID) {\n            return docBase + docID;\n          }\n        }, maxDoc, valueStart));\n      valueStart += maxDoc;\n    }\n\n    DocIDMerger<TestSubUnsorted> merger = new DocIDMerger<>(subs, false);\n\n    int count = 0;\n    while (true) {\n      TestSubUnsorted sub = merger.next();\n      if (sub == null) {\n        break;\n      }\n      assertEquals(count, sub.mappedDocID);\n      assertEquals(count, sub.getValue());\n      count++;\n    }\n\n    assertEquals(valueStart, count);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocIDMerger#testNoSort().mjava","pathOld":"/dev/null","sourceNew":"  public void testNoSort() throws Exception {\n\n    int subCount = TestUtil.nextInt(random(), 1, 20);\n    List<TestSubUnsorted> subs = new ArrayList<>();\n    int valueStart = 0;\n    for(int i=0;i<subCount;i++) {\n      int maxDoc = TestUtil.nextInt(random(), 1, 1000);\n      final int docBase = valueStart;\n      subs.add(new TestSubUnsorted(new MergeState.DocMap() {\n          @Override\n          public int get(int docID) {\n            return docBase + docID;\n          }\n        }, maxDoc, valueStart));\n      valueStart += maxDoc;\n    }\n\n    DocIDMerger<TestSubUnsorted> merger = new DocIDMerger<>(subs, false);\n\n    int count = 0;\n    while (true) {\n      TestSubUnsorted sub = merger.next();\n      if (sub == null) {\n        break;\n      }\n      assertEquals(count, sub.mappedDocID);\n      assertEquals(count, sub.getValue());\n      count++;\n    }\n\n    assertEquals(valueStart, count);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d85b6e22926e7564c040d2a864f4887f6c59fa92","date":1482349496,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocIDMerger#testNoSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocIDMerger#testNoSort().mjava","sourceNew":"  public void testNoSort() throws Exception {\n\n    int subCount = TestUtil.nextInt(random(), 1, 20);\n    List<TestSubUnsorted> subs = new ArrayList<>();\n    int valueStart = 0;\n    for(int i=0;i<subCount;i++) {\n      int maxDoc = TestUtil.nextInt(random(), 1, 1000);\n      final int docBase = valueStart;\n      subs.add(new TestSubUnsorted(new MergeState.DocMap() {\n          @Override\n          public int get(int docID) {\n            return docBase + docID;\n          }\n        }, maxDoc, valueStart));\n      valueStart += maxDoc;\n    }\n\n    DocIDMerger<TestSubUnsorted> merger = DocIDMerger.of(subs, false);\n\n    int count = 0;\n    while (true) {\n      TestSubUnsorted sub = merger.next();\n      if (sub == null) {\n        break;\n      }\n      assertEquals(count, sub.mappedDocID);\n      assertEquals(count, sub.getValue());\n      count++;\n    }\n\n    assertEquals(valueStart, count);\n  }\n\n","sourceOld":"  public void testNoSort() throws Exception {\n\n    int subCount = TestUtil.nextInt(random(), 1, 20);\n    List<TestSubUnsorted> subs = new ArrayList<>();\n    int valueStart = 0;\n    for(int i=0;i<subCount;i++) {\n      int maxDoc = TestUtil.nextInt(random(), 1, 1000);\n      final int docBase = valueStart;\n      subs.add(new TestSubUnsorted(new MergeState.DocMap() {\n          @Override\n          public int get(int docID) {\n            return docBase + docID;\n          }\n        }, maxDoc, valueStart));\n      valueStart += maxDoc;\n    }\n\n    DocIDMerger<TestSubUnsorted> merger = new DocIDMerger<>(subs, false);\n\n    int count = 0;\n    while (true) {\n      TestSubUnsorted sub = merger.next();\n      if (sub == null) {\n        break;\n      }\n      assertEquals(count, sub.mappedDocID);\n      assertEquals(count, sub.getValue());\n      count++;\n    }\n\n    assertEquals(valueStart, count);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocIDMerger#testNoSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocIDMerger#testNoSort().mjava","sourceNew":"  public void testNoSort() throws Exception {\n\n    int subCount = TestUtil.nextInt(random(), 1, 20);\n    List<TestSubUnsorted> subs = new ArrayList<>();\n    int valueStart = 0;\n    for(int i=0;i<subCount;i++) {\n      int maxDoc = TestUtil.nextInt(random(), 1, 1000);\n      final int docBase = valueStart;\n      subs.add(new TestSubUnsorted(new MergeState.DocMap() {\n          @Override\n          public int get(int docID) {\n            return docBase + docID;\n          }\n        }, maxDoc, valueStart));\n      valueStart += maxDoc;\n    }\n\n    DocIDMerger<TestSubUnsorted> merger = DocIDMerger.of(subs, false);\n\n    int count = 0;\n    while (true) {\n      TestSubUnsorted sub = merger.next();\n      if (sub == null) {\n        break;\n      }\n      assertEquals(count, sub.mappedDocID);\n      assertEquals(count, sub.getValue());\n      count++;\n    }\n\n    assertEquals(valueStart, count);\n  }\n\n","sourceOld":"  public void testNoSort() throws Exception {\n\n    int subCount = TestUtil.nextInt(random(), 1, 20);\n    List<TestSubUnsorted> subs = new ArrayList<>();\n    int valueStart = 0;\n    for(int i=0;i<subCount;i++) {\n      int maxDoc = TestUtil.nextInt(random(), 1, 1000);\n      final int docBase = valueStart;\n      subs.add(new TestSubUnsorted(new MergeState.DocMap() {\n          @Override\n          public int get(int docID) {\n            return docBase + docID;\n          }\n        }, maxDoc, valueStart));\n      valueStart += maxDoc;\n    }\n\n    DocIDMerger<TestSubUnsorted> merger = new DocIDMerger<>(subs, false);\n\n    int count = 0;\n    while (true) {\n      TestSubUnsorted sub = merger.next();\n      if (sub == null) {\n        break;\n      }\n      assertEquals(count, sub.mappedDocID);\n      assertEquals(count, sub.getValue());\n      count++;\n    }\n\n    assertEquals(valueStart, count);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d85b6e22926e7564c040d2a864f4887f6c59fa92":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"6d8200beeffd3fa5155855f4cb8a8a5e38aeff14":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d33e731a93d4b57e662ff094f64f94a745422d4"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6d8200beeffd3fa5155855f4cb8a8a5e38aeff14"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d85b6e22926e7564c040d2a864f4887f6c59fa92"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ad30c6a479e764150a3316e57263319775f1df2"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d85b6e22926e7564c040d2a864f4887f6c59fa92"]},"commit2Childs":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["6d8200beeffd3fa5155855f4cb8a8a5e38aeff14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70","0ad30c6a479e764150a3316e57263319775f1df2","3d33e731a93d4b57e662ff094f64f94a745422d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d85b6e22926e7564c040d2a864f4887f6c59fa92":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"6d8200beeffd3fa5155855f4cb8a8a5e38aeff14":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["d85b6e22926e7564c040d2a864f4887f6c59fa92","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}