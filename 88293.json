{"path":"lucene/src/java/org/apache/lucene/codecs/lucene3x/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd,boolean).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene3x/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene3x/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd,boolean).mjava","sourceNew":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd, boolean useCache) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n  && ((enumerator.prev() != null && compareAsUTF16(term, enumerator.prev())> 0)\n      || compareAsUTF16(term, enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexLength == enumOffset    // but before end of block\n    || index.compareTo(term, enumOffset) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && compareAsUTF16(term, enumerator.term()) == 0) {\n          ti = enumerator.termInfo;\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              if (useCache) {\n                termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n              }\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = (int) (tiOrd.termOrd / totalIndexInterval);\n    } else {\n      // Must do binary search:\n      indexPos = index.getIndexOffset(term);\n    }\n\n    index.seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && compareAsUTF16(term, enumerator.term()) == 0) {\n      ti = enumerator.termInfo;\n      if (tiOrd == null) {\n        if (useCache) {\n          termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n        }\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","sourceOld":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd, boolean useCache) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n  && ((enumerator.prev() != null && compareAsUTF16(term, enumerator.prev())> 0)\n      || compareAsUTF16(term, enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexLength == enumOffset    // but before end of block\n    || index.compareTo(term, enumOffset) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && compareAsUTF16(term, enumerator.term()) == 0) {\n          ti = enumerator.termInfo;\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              if (useCache) {\n                termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n              }\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = (int) (tiOrd.termOrd / totalIndexInterval);\n    } else {\n      // Must do binary search:\n      indexPos = index.getIndexOffset(term);\n    }\n\n    index.seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && compareAsUTF16(term, enumerator.term()) == 0) {\n      ti = enumerator.termInfo;\n      if (tiOrd == null) {\n        if (useCache) {\n          termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n        }\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene3x/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene3x/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd,boolean).mjava","sourceNew":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd, boolean useCache) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n  && ((enumerator.prev() != null && compareAsUTF16(term, enumerator.prev())> 0)\n      || compareAsUTF16(term, enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexLength == enumOffset    // but before end of block\n    || index.compareTo(term, enumOffset) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && compareAsUTF16(term, enumerator.term()) == 0) {\n          ti = enumerator.termInfo;\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              if (useCache) {\n                termsCache.put(new CloneableTerm(term.deepCopyOf()),\n                               new TermInfoAndOrd(ti, enumerator.position));\n              }\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = (int) (tiOrd.termOrd / totalIndexInterval);\n    } else {\n      // Must do binary search:\n      indexPos = index.getIndexOffset(term);\n    }\n\n    index.seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && compareAsUTF16(term, enumerator.term()) == 0) {\n      ti = enumerator.termInfo;\n      if (tiOrd == null) {\n        if (useCache) {\n          termsCache.put(new CloneableTerm(term.deepCopyOf()),\n                         new TermInfoAndOrd(ti, enumerator.position));\n        }\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","sourceOld":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd, boolean useCache) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n  && ((enumerator.prev() != null && compareAsUTF16(term, enumerator.prev())> 0)\n      || compareAsUTF16(term, enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexLength == enumOffset    // but before end of block\n    || index.compareTo(term, enumOffset) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && compareAsUTF16(term, enumerator.term()) == 0) {\n          ti = enumerator.termInfo;\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              if (useCache) {\n                termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n              }\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = (int) (tiOrd.termOrd / totalIndexInterval);\n    } else {\n      // Must do binary search:\n      indexPos = index.getIndexOffset(term);\n    }\n\n    index.seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && compareAsUTF16(term, enumerator.term()) == 0) {\n      ti = enumerator.termInfo;\n      if (tiOrd == null) {\n        if (useCache) {\n          termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n        }\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene3x/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd,boolean).mjava","sourceNew":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd, boolean useCache) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n  && ((enumerator.prev() != null && compareAsUTF16(term, enumerator.prev())> 0)\n      || compareAsUTF16(term, enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexLength == enumOffset    // but before end of block\n    || index.compareTo(term, enumOffset) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && compareAsUTF16(term, enumerator.term()) == 0) {\n          ti = enumerator.termInfo;\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              if (useCache) {\n                termsCache.put(new CloneableTerm(term.deepCopyOf()),\n                               new TermInfoAndOrd(ti, enumerator.position));\n              }\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = (int) (tiOrd.termOrd / totalIndexInterval);\n    } else {\n      // Must do binary search:\n      indexPos = index.getIndexOffset(term);\n    }\n\n    index.seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && compareAsUTF16(term, enumerator.term()) == 0) {\n      ti = enumerator.termInfo;\n      if (tiOrd == null) {\n        if (useCache) {\n          termsCache.put(new CloneableTerm(term.deepCopyOf()),\n                         new TermInfoAndOrd(ti, enumerator.position));\n        }\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","sourceOld":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd, boolean useCache) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n  && ((enumerator.prev() != null && compareAsUTF16(term, enumerator.prev())> 0)\n      || compareAsUTF16(term, enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexLength == enumOffset    // but before end of block\n    || index.compareTo(term, enumOffset) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && compareAsUTF16(term, enumerator.term()) == 0) {\n          ti = enumerator.termInfo;\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              if (useCache) {\n                termsCache.put(new CloneableTerm(term.deepCopyOf()),\n                               new TermInfoAndOrd(ti, enumerator.position));\n              }\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = (int) (tiOrd.termOrd / totalIndexInterval);\n    } else {\n      // Must do binary search:\n      indexPos = index.getIndexOffset(term);\n    }\n\n    index.seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && compareAsUTF16(term, enumerator.term()) == 0) {\n      ti = enumerator.termInfo;\n      if (tiOrd == null) {\n        if (useCache) {\n          termsCache.put(new CloneableTerm(term.deepCopyOf()),\n                         new TermInfoAndOrd(ti, enumerator.position));\n        }\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}