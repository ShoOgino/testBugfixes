{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/TimeRoutedAlias#parseCollections(Aliases).mjava","commits":[{"id":"b627755385655c7cd3fb296f17593658805cf4d5","date":1552455143,"type":1,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/TimeRoutedAlias#parseCollections(Aliases).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/TimeRoutedAlias#parseCollections(Aliases,Supplier[SolrException]).mjava","sourceNew":"  /**\n   * Parses the elements of the collection list. Result is returned them in sorted order (most recent 1st)\n   */\n  List<Map.Entry<Instant,String>> parseCollections(Aliases aliases) {\n    final List<String> collections = aliases.getCollectionAliasListMap().get(aliasName);\n    if (collections == null) {\n      throw RoutedAlias.newAliasMustExistException(getAliasName());\n    }\n    // note: I considered TreeMap but didn't like the log(N) just to grab the most recent when we use it later\n    List<Map.Entry<Instant,String>> result = new ArrayList<>(collections.size());\n    for (String collection : collections) {\n      Instant colStartTime = parseInstantFromCollectionName(aliasName, collection);\n      result.add(new AbstractMap.SimpleImmutableEntry<>(colStartTime, collection));\n    }\n    result.sort((e1, e2) -> e2.getKey().compareTo(e1.getKey())); // reverse sort by key\n    return result;\n  }\n\n","sourceOld":"  /** Parses the timestamp from the collection list and returns them in reverse sorted order (most recent 1st) */\n  public List<Map.Entry<Instant,String>> parseCollections(Aliases aliases, Supplier<SolrException> aliasNotExist) {\n    final List<String> collections = aliases.getCollectionAliasListMap().get(aliasName);\n    if (collections == null) {\n      throw aliasNotExist.get();\n    }\n    // note: I considered TreeMap but didn't like the log(N) just to grab the most recent when we use it later\n    List<Map.Entry<Instant,String>> result = new ArrayList<>(collections.size());\n    for (String collection : collections) {\n      Instant colStartTime = parseInstantFromCollectionName(aliasName, collection);\n      result.add(new AbstractMap.SimpleImmutableEntry<>(colStartTime, collection));\n    }\n    result.sort((e1, e2) -> e2.getKey().compareTo(e1.getKey())); // reverse sort by key\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eebf1b080530bdd7572c4927fb2bb52334b7a86","date":1563199033,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/TimeRoutedAlias#parseCollections(Aliases).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/TimeRoutedAlias#parseCollections(Aliases).mjava","sourceNew":"  /**\n   * Parses the elements of the collection list. Result is returned them in sorted order (most recent 1st)\n   */\n  private List<Map.Entry<Instant, String>> parseCollections(Aliases aliases) {\n    final List<String> collections = getCollectionList(aliases);\n    if (collections == null) {\n      throw RoutedAlias.newAliasMustExistException(getAliasName());\n    }\n    // note: I considered TreeMap but didn't like the log(N) just to grab the most recent when we use it later\n    List<Map.Entry<Instant, String>> result = new ArrayList<>(collections.size());\n    for (String collection : collections) {\n      Instant colStartTime = parseInstantFromCollectionName(aliasName, collection);\n      result.add(new AbstractMap.SimpleImmutableEntry<>(colStartTime, collection));\n    }\n    result.sort((e1, e2) -> e2.getKey().compareTo(e1.getKey())); // reverse sort by key\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Parses the elements of the collection list. Result is returned them in sorted order (most recent 1st)\n   */\n  List<Map.Entry<Instant,String>> parseCollections(Aliases aliases) {\n    final List<String> collections = aliases.getCollectionAliasListMap().get(aliasName);\n    if (collections == null) {\n      throw RoutedAlias.newAliasMustExistException(getAliasName());\n    }\n    // note: I considered TreeMap but didn't like the log(N) just to grab the most recent when we use it later\n    List<Map.Entry<Instant,String>> result = new ArrayList<>(collections.size());\n    for (String collection : collections) {\n      Instant colStartTime = parseInstantFromCollectionName(aliasName, collection);\n      result.add(new AbstractMap.SimpleImmutableEntry<>(colStartTime, collection));\n    }\n    result.sort((e1, e2) -> e2.getKey().compareTo(e1.getKey())); // reverse sort by key\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b627755385655c7cd3fb296f17593658805cf4d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["b627755385655c7cd3fb296f17593658805cf4d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b627755385655c7cd3fb296f17593658805cf4d5"],"b627755385655c7cd3fb296f17593658805cf4d5":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}