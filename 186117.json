{"path":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testDocument().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDirectoryReader#testDocument().mjava","sourceNew":"  public void testDocument() throws IOException {\n    sis.read(dir);\n    IndexReader reader = openReader();\n    assertTrue(reader != null);\n    Document newDoc1 = reader.document(0);\n    assertTrue(newDoc1 != null);\n    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - DocHelper.unstored.size());\n    Document newDoc2 = reader.document(1);\n    assertTrue(newDoc2 != null);\n    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - DocHelper.unstored.size());\n    Terms vector = reader.getTermVectors(0).terms(DocHelper.TEXT_FIELD_2_KEY);\n    assertNotNull(vector);\n    // TODO: pretty sure this check makes zero sense TestSegmentReader.checkNorms(reader);\n    reader.close();\n  }\n\n","sourceOld":"  public void testDocument() throws IOException {\n    sis.read(dir);\n    IndexReader reader = openReader();\n    assertTrue(reader != null);\n    Document newDoc1 = reader.document(0);\n    assertTrue(newDoc1 != null);\n    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - DocHelper.unstored.size());\n    Document newDoc2 = reader.document(1);\n    assertTrue(newDoc2 != null);\n    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - DocHelper.unstored.size());\n    Terms vector = reader.getTermVectors(0).terms(DocHelper.TEXT_FIELD_2_KEY);\n    assertNotNull(vector);\n    // TODO: pretty sure this check makes zero sense TestSegmentReader.checkNorms(reader);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87","date":1328967626,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testDocument().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testDocument().mjava","sourceNew":"  public void testDocument() throws IOException {\n    SegmentReader [] readers = new SegmentReader[2];\n    Directory dir = newDirectory();\n    Document doc1 = new Document();\n    Document doc2 = new Document();\n    DocHelper.setupDoc(doc1);\n    DocHelper.setupDoc(doc2);\n    DocHelper.writeDoc(random, dir, doc1);\n    DocHelper.writeDoc(random, dir, doc2);\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertTrue(reader != null);\n    assertTrue(reader instanceof StandardDirectoryReader);\n    \n    Document newDoc1 = reader.document(0);\n    assertTrue(newDoc1 != null);\n    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - DocHelper.unstored.size());\n    Document newDoc2 = reader.document(1);\n    assertTrue(newDoc2 != null);\n    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - DocHelper.unstored.size());\n    Terms vector = reader.getTermVectors(0).terms(DocHelper.TEXT_FIELD_2_KEY);\n    assertNotNull(vector);\n\n    reader.close();\n    if (readers[0] != null) readers[0].close();\n    if (readers[1] != null) readers[1].close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocument() throws IOException {\n    sis.read(dir);\n    IndexReader reader = openReader();\n    assertTrue(reader != null);\n    Document newDoc1 = reader.document(0);\n    assertTrue(newDoc1 != null);\n    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - DocHelper.unstored.size());\n    Document newDoc2 = reader.document(1);\n    assertTrue(newDoc2 != null);\n    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - DocHelper.unstored.size());\n    Terms vector = reader.getTermVectors(0).terms(DocHelper.TEXT_FIELD_2_KEY);\n    assertNotNull(vector);\n    // TODO: pretty sure this check makes zero sense TestSegmentReader.checkNorms(reader);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testDocument().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testDocument().mjava","sourceNew":"  public void testDocument() throws IOException {\n    SegmentReader [] readers = new SegmentReader[2];\n    Directory dir = newDirectory();\n    Document doc1 = new Document();\n    Document doc2 = new Document();\n    DocHelper.setupDoc(doc1);\n    DocHelper.setupDoc(doc2);\n    DocHelper.writeDoc(random(), dir, doc1);\n    DocHelper.writeDoc(random(), dir, doc2);\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertTrue(reader != null);\n    assertTrue(reader instanceof StandardDirectoryReader);\n    \n    Document newDoc1 = reader.document(0);\n    assertTrue(newDoc1 != null);\n    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - DocHelper.unstored.size());\n    Document newDoc2 = reader.document(1);\n    assertTrue(newDoc2 != null);\n    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - DocHelper.unstored.size());\n    Terms vector = reader.getTermVectors(0).terms(DocHelper.TEXT_FIELD_2_KEY);\n    assertNotNull(vector);\n\n    reader.close();\n    if (readers[0] != null) readers[0].close();\n    if (readers[1] != null) readers[1].close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocument() throws IOException {\n    SegmentReader [] readers = new SegmentReader[2];\n    Directory dir = newDirectory();\n    Document doc1 = new Document();\n    Document doc2 = new Document();\n    DocHelper.setupDoc(doc1);\n    DocHelper.setupDoc(doc2);\n    DocHelper.writeDoc(random, dir, doc1);\n    DocHelper.writeDoc(random, dir, doc2);\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertTrue(reader != null);\n    assertTrue(reader instanceof StandardDirectoryReader);\n    \n    Document newDoc1 = reader.document(0);\n    assertTrue(newDoc1 != null);\n    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - DocHelper.unstored.size());\n    Document newDoc2 = reader.document(1);\n    assertTrue(newDoc2 != null);\n    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - DocHelper.unstored.size());\n    Terms vector = reader.getTermVectors(0).terms(DocHelper.TEXT_FIELD_2_KEY);\n    assertNotNull(vector);\n\n    reader.close();\n    if (readers[0] != null) readers[0].close();\n    if (readers[1] != null) readers[1].close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","date":1341839195,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testDocument().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testDocument().mjava","sourceNew":"  public void testDocument() throws IOException {\n    SegmentReader [] readers = new SegmentReader[2];\n    Directory dir = newDirectory();\n    Document doc1 = new Document();\n    Document doc2 = new Document();\n    DocHelper.setupDoc(doc1);\n    DocHelper.setupDoc(doc2);\n    DocHelper.writeDoc(random(), dir, doc1);\n    DocHelper.writeDoc(random(), dir, doc2);\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertTrue(reader != null);\n    assertTrue(reader instanceof StandardDirectoryReader);\n    \n    StoredDocument newDoc1 = reader.document(0);\n    assertTrue(newDoc1 != null);\n    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - DocHelper.unstored.size());\n    StoredDocument newDoc2 = reader.document(1);\n    assertTrue(newDoc2 != null);\n    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - DocHelper.unstored.size());\n    Terms vector = reader.getTermVectors(0).terms(DocHelper.TEXT_FIELD_2_KEY);\n    assertNotNull(vector);\n\n    reader.close();\n    if (readers[0] != null) readers[0].close();\n    if (readers[1] != null) readers[1].close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocument() throws IOException {\n    SegmentReader [] readers = new SegmentReader[2];\n    Directory dir = newDirectory();\n    Document doc1 = new Document();\n    Document doc2 = new Document();\n    DocHelper.setupDoc(doc1);\n    DocHelper.setupDoc(doc2);\n    DocHelper.writeDoc(random(), dir, doc1);\n    DocHelper.writeDoc(random(), dir, doc2);\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertTrue(reader != null);\n    assertTrue(reader instanceof StandardDirectoryReader);\n    \n    Document newDoc1 = reader.document(0);\n    assertTrue(newDoc1 != null);\n    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - DocHelper.unstored.size());\n    Document newDoc2 = reader.document(1);\n    assertTrue(newDoc2 != null);\n    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - DocHelper.unstored.size());\n    Terms vector = reader.getTermVectors(0).terms(DocHelper.TEXT_FIELD_2_KEY);\n    assertNotNull(vector);\n\n    reader.close();\n    if (readers[0] != null) readers[0].close();\n    if (readers[1] != null) readers[1].close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testDocument().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testDocument().mjava","sourceNew":"  public void testDocument() throws IOException {\n    SegmentReader [] readers = new SegmentReader[2];\n    Directory dir = newDirectory();\n    Document doc1 = new Document();\n    Document doc2 = new Document();\n    DocHelper.setupDoc(doc1);\n    DocHelper.setupDoc(doc2);\n    DocHelper.writeDoc(random(), dir, doc1);\n    DocHelper.writeDoc(random(), dir, doc2);\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertTrue(reader != null);\n    assertTrue(reader instanceof StandardDirectoryReader);\n    \n    StoredDocument newDoc1 = reader.document(0);\n    assertTrue(newDoc1 != null);\n    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - DocHelper.unstored.size());\n    StoredDocument newDoc2 = reader.document(1);\n    assertTrue(newDoc2 != null);\n    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - DocHelper.unstored.size());\n    Terms vector = reader.getTermVectors(0).terms(DocHelper.TEXT_FIELD_2_KEY);\n    assertNotNull(vector);\n\n    reader.close();\n    if (readers[0] != null) readers[0].close();\n    if (readers[1] != null) readers[1].close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocument() throws IOException {\n    SegmentReader [] readers = new SegmentReader[2];\n    Directory dir = newDirectory();\n    Document doc1 = new Document();\n    Document doc2 = new Document();\n    DocHelper.setupDoc(doc1);\n    DocHelper.setupDoc(doc2);\n    DocHelper.writeDoc(random(), dir, doc1);\n    DocHelper.writeDoc(random(), dir, doc2);\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertTrue(reader != null);\n    assertTrue(reader instanceof StandardDirectoryReader);\n    \n    Document newDoc1 = reader.document(0);\n    assertTrue(newDoc1 != null);\n    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - DocHelper.unstored.size());\n    Document newDoc2 = reader.document(1);\n    assertTrue(newDoc2 != null);\n    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - DocHelper.unstored.size());\n    Terms vector = reader.getTermVectors(0).terms(DocHelper.TEXT_FIELD_2_KEY);\n    assertNotNull(vector);\n\n    reader.close();\n    if (readers[0] != null) readers[0].close();\n    if (readers[1] != null) readers[1].close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testDocument().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testDocument().mjava","sourceNew":"  public void testDocument() throws IOException {\n    SegmentReader [] readers = new SegmentReader[2];\n    Directory dir = newDirectory();\n    Document doc1 = new Document();\n    Document doc2 = new Document();\n    DocHelper.setupDoc(doc1);\n    DocHelper.setupDoc(doc2);\n    DocHelper.writeDoc(random(), dir, doc1);\n    DocHelper.writeDoc(random(), dir, doc2);\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertTrue(reader != null);\n    assertTrue(reader instanceof StandardDirectoryReader);\n    \n    Document newDoc1 = reader.document(0);\n    assertTrue(newDoc1 != null);\n    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - DocHelper.unstored.size());\n    Document newDoc2 = reader.document(1);\n    assertTrue(newDoc2 != null);\n    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - DocHelper.unstored.size());\n    Terms vector = reader.getTermVectors(0).terms(DocHelper.TEXT_FIELD_2_KEY);\n    assertNotNull(vector);\n\n    reader.close();\n    if (readers[0] != null) readers[0].close();\n    if (readers[1] != null) readers[1].close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocument() throws IOException {\n    SegmentReader [] readers = new SegmentReader[2];\n    Directory dir = newDirectory();\n    Document doc1 = new Document();\n    Document doc2 = new Document();\n    DocHelper.setupDoc(doc1);\n    DocHelper.setupDoc(doc2);\n    DocHelper.writeDoc(random(), dir, doc1);\n    DocHelper.writeDoc(random(), dir, doc2);\n    DirectoryReader reader = DirectoryReader.open(dir);\n    assertTrue(reader != null);\n    assertTrue(reader instanceof StandardDirectoryReader);\n    \n    StoredDocument newDoc1 = reader.document(0);\n    assertTrue(newDoc1 != null);\n    assertTrue(DocHelper.numFields(newDoc1) == DocHelper.numFields(doc1) - DocHelper.unstored.size());\n    StoredDocument newDoc2 = reader.document(1);\n    assertTrue(newDoc2 != null);\n    assertTrue(DocHelper.numFields(newDoc2) == DocHelper.numFields(doc2) - DocHelper.unstored.size());\n    Terms vector = reader.getTermVectors(0).terms(DocHelper.TEXT_FIELD_2_KEY);\n    assertNotNull(vector);\n\n    reader.close();\n    if (readers[0] != null) readers[0].close();\n    if (readers[1] != null) readers[1].close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"1d028314cced5858683a1bb4741423d0f934257b":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4"],"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["1d028314cced5858683a1bb4741423d0f934257b"]},"commit2Childs":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["1d028314cced5858683a1bb4741423d0f934257b"],"1d028314cced5858683a1bb4741423d0f934257b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","1d028314cced5858683a1bb4741423d0f934257b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}