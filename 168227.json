{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testToAndFromSolrDocument().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testToAndFromSolrDocument().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testToAndFromSolrDocument().mjava","sourceNew":"  public void testToAndFromSolrDocument()\n  {\n    Item item = new Item();\n    item.id = \"one\";\n    item.inStock = false;\n    item.categories =  new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    item.features = Arrays.asList( item.categories );\n    List<String> supA =  Arrays.asList(  new String[] { \"supA1\", \"supA2\", \"supA3\" } );\n    List<String> supB =  Arrays.asList(  new String[] { \"supB1\", \"supB2\", \"supB3\"});\n    item.supplier = new HashMap<String, List<String>>();\n    item.supplier.put(\"supplier_supA\", supA);\n    item.supplier.put(\"supplier_supB\", supB);\n    \n    item.supplier_simple = new HashMap<String, String>();\n    item.supplier_simple.put(\"sup_simple_supA\", \"supA_val\");\n    item.supplier_simple.put(\"sup_simple_supB\", \"supB_val\");\n    \n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    SolrInputDocument doc = binder.toSolrInputDocument( item );\n    SolrDocumentList docs = new SolrDocumentList();\n    docs.add( ClientUtils.toSolrDocument(doc) );\n    Item out = binder.getBeans( Item.class, docs ).get( 0 );\n    Item singleOut = binder.getBean(Item.class, ClientUtils.toSolrDocument(doc));\n    \n    // make sure it came out the same\n    Assert.assertEquals( item.id, out.id );\n    Assert.assertEquals( item.inStock, out.inStock );\n    Assert.assertEquals( item.categories.length, out.categories.length );\n    Assert.assertEquals( item.features, out.features );\n    Assert.assertEquals( supA,out.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, out.supplier.get(\"supplier_supB\"));\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n    Assert.assertEquals( item.id, singleOut.id );\n    Assert.assertEquals( item.inStock, singleOut.inStock );\n    Assert.assertEquals( item.categories.length, singleOut.categories.length );\n    Assert.assertEquals( item.features, singleOut.features );\n    Assert.assertEquals( supA, singleOut.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, singleOut.supplier.get(\"supplier_supB\"));\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n//    put back \"out\" as Bean, to see if both ways work as you would expect\n//    but the Field that \"allSuppliers\" need to be cleared, as it is just for \n//    retrieving data, not to post data\n    out.allSuppliers = null;\n    SolrInputDocument doc1 = binder.toSolrInputDocument( out );\n    \n    SolrDocumentList docs1 = new SolrDocumentList();\n    docs1.add( ClientUtils.toSolrDocument(doc1) );\n    Item out1 = binder.getBeans( Item.class, docs1 ).get( 0 );\n    \n    Assert.assertEquals( item.id, out1.id );\n    Assert.assertEquals( item.inStock, out1.inStock );\n    Assert.assertEquals( item.categories.length, out1.categories.length );\n    Assert.assertEquals( item.features, out1.features );\n\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out1.supplier_simple.get(\"sup_simple_supB\"));\n    \n    Assert.assertEquals( supA,out1.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, out1.supplier.get(\"supplier_supB\"));\n    \n  }\n\n","sourceOld":"  public void testToAndFromSolrDocument()\n  {\n    Item item = new Item();\n    item.id = \"one\";\n    item.inStock = false;\n    item.categories =  new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    item.features = Arrays.asList( item.categories );\n    List<String> supA =  Arrays.asList(  new String[] { \"supA1\", \"supA2\", \"supA3\" } );\n    List<String> supB =  Arrays.asList(  new String[] { \"supB1\", \"supB2\", \"supB3\"});\n    item.supplier = new HashMap<String, List<String>>();\n    item.supplier.put(\"supplier_supA\", supA);\n    item.supplier.put(\"supplier_supB\", supB);\n    \n    item.supplier_simple = new HashMap<String, String>();\n    item.supplier_simple.put(\"sup_simple_supA\", \"supA_val\");\n    item.supplier_simple.put(\"sup_simple_supB\", \"supB_val\");\n    \n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    SolrInputDocument doc = binder.toSolrInputDocument( item );\n    SolrDocumentList docs = new SolrDocumentList();\n    docs.add( ClientUtils.toSolrDocument(doc) );\n    Item out = binder.getBeans( Item.class, docs ).get( 0 );\n    Item singleOut = binder.getBean(Item.class, ClientUtils.toSolrDocument(doc));\n    \n    // make sure it came out the same\n    Assert.assertEquals( item.id, out.id );\n    Assert.assertEquals( item.inStock, out.inStock );\n    Assert.assertEquals( item.categories.length, out.categories.length );\n    Assert.assertEquals( item.features, out.features );\n    Assert.assertEquals( supA,out.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, out.supplier.get(\"supplier_supB\"));\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n    Assert.assertEquals( item.id, singleOut.id );\n    Assert.assertEquals( item.inStock, singleOut.inStock );\n    Assert.assertEquals( item.categories.length, singleOut.categories.length );\n    Assert.assertEquals( item.features, singleOut.features );\n    Assert.assertEquals( supA, singleOut.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, singleOut.supplier.get(\"supplier_supB\"));\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n//    put back \"out\" as Bean, to see if both ways work as you would expect\n//    but the Field that \"allSuppliers\" need to be cleared, as it is just for \n//    retrieving data, not to post data\n    out.allSuppliers = null;\n    SolrInputDocument doc1 = binder.toSolrInputDocument( out );\n    \n    SolrDocumentList docs1 = new SolrDocumentList();\n    docs1.add( ClientUtils.toSolrDocument(doc1) );\n    Item out1 = binder.getBeans( Item.class, docs1 ).get( 0 );\n    \n    Assert.assertEquals( item.id, out1.id );\n    Assert.assertEquals( item.inStock, out1.inStock );\n    Assert.assertEquals( item.categories.length, out1.categories.length );\n    Assert.assertEquals( item.features, out1.features );\n\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out1.supplier_simple.get(\"sup_simple_supB\"));\n    \n    Assert.assertEquals( supA,out1.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, out1.supplier.get(\"supplier_supB\"));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testToAndFromSolrDocument().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testToAndFromSolrDocument().mjava","sourceNew":"  public void testToAndFromSolrDocument()\n  {\n    Item item = new Item();\n    item.id = \"one\";\n    item.inStock = false;\n    item.categories =  new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    item.features = Arrays.asList( item.categories );\n    List<String> supA =  Arrays.asList(  new String[] { \"supA1\", \"supA2\", \"supA3\" } );\n    List<String> supB =  Arrays.asList(  new String[] { \"supB1\", \"supB2\", \"supB3\"});\n    item.supplier = new HashMap<String, List<String>>();\n    item.supplier.put(\"supplier_supA\", supA);\n    item.supplier.put(\"supplier_supB\", supB);\n    \n    item.supplier_simple = new HashMap<String, String>();\n    item.supplier_simple.put(\"sup_simple_supA\", \"supA_val\");\n    item.supplier_simple.put(\"sup_simple_supB\", \"supB_val\");\n    \n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    SolrInputDocument doc = binder.toSolrInputDocument( item );\n    SolrDocumentList docs = new SolrDocumentList();\n    docs.add( ClientUtils.toSolrDocument(doc) );\n    Item out = binder.getBeans( Item.class, docs ).get( 0 );\n    Item singleOut = binder.getBean(Item.class, ClientUtils.toSolrDocument(doc));\n    \n    // make sure it came out the same\n    Assert.assertEquals( item.id, out.id );\n    Assert.assertEquals( item.inStock, out.inStock );\n    Assert.assertEquals( item.categories.length, out.categories.length );\n    Assert.assertEquals( item.features, out.features );\n    Assert.assertEquals( supA,out.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, out.supplier.get(\"supplier_supB\"));\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n    Assert.assertEquals( item.id, singleOut.id );\n    Assert.assertEquals( item.inStock, singleOut.inStock );\n    Assert.assertEquals( item.categories.length, singleOut.categories.length );\n    Assert.assertEquals( item.features, singleOut.features );\n    Assert.assertEquals( supA, singleOut.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, singleOut.supplier.get(\"supplier_supB\"));\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n//    put back \"out\" as Bean, to see if both ways work as you would expect\n//    but the Field that \"allSuppliers\" need to be cleared, as it is just for \n//    retrieving data, not to post data\n    out.allSuppliers = null;\n    SolrInputDocument doc1 = binder.toSolrInputDocument( out );\n    \n    SolrDocumentList docs1 = new SolrDocumentList();\n    docs1.add( ClientUtils.toSolrDocument(doc1) );\n    Item out1 = binder.getBeans( Item.class, docs1 ).get( 0 );\n    \n    Assert.assertEquals( item.id, out1.id );\n    Assert.assertEquals( item.inStock, out1.inStock );\n    Assert.assertEquals( item.categories.length, out1.categories.length );\n    Assert.assertEquals( item.features, out1.features );\n\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out1.supplier_simple.get(\"sup_simple_supB\"));\n    \n    Assert.assertEquals( supA,out1.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, out1.supplier.get(\"supplier_supB\"));\n    \n  }\n\n","sourceOld":"  public void testToAndFromSolrDocument()\n  {\n    Item item = new Item();\n    item.id = \"one\";\n    item.inStock = false;\n    item.categories =  new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    item.features = Arrays.asList( item.categories );\n    List<String> supA =  Arrays.asList(  new String[] { \"supA1\", \"supA2\", \"supA3\" } );\n    List<String> supB =  Arrays.asList(  new String[] { \"supB1\", \"supB2\", \"supB3\"});\n    item.supplier = new HashMap<String, List<String>>();\n    item.supplier.put(\"supplier_supA\", supA);\n    item.supplier.put(\"supplier_supB\", supB);\n    \n    item.supplier_simple = new HashMap<String, String>();\n    item.supplier_simple.put(\"sup_simple_supA\", \"supA_val\");\n    item.supplier_simple.put(\"sup_simple_supB\", \"supB_val\");\n    \n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    SolrInputDocument doc = binder.toSolrInputDocument( item );\n    SolrDocumentList docs = new SolrDocumentList();\n    docs.add( ClientUtils.toSolrDocument(doc) );\n    Item out = binder.getBeans( Item.class, docs ).get( 0 );\n    Item singleOut = binder.getBean(Item.class, ClientUtils.toSolrDocument(doc));\n    \n    // make sure it came out the same\n    Assert.assertEquals( item.id, out.id );\n    Assert.assertEquals( item.inStock, out.inStock );\n    Assert.assertEquals( item.categories.length, out.categories.length );\n    Assert.assertEquals( item.features, out.features );\n    Assert.assertEquals( supA,out.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, out.supplier.get(\"supplier_supB\"));\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n    Assert.assertEquals( item.id, singleOut.id );\n    Assert.assertEquals( item.inStock, singleOut.inStock );\n    Assert.assertEquals( item.categories.length, singleOut.categories.length );\n    Assert.assertEquals( item.features, singleOut.features );\n    Assert.assertEquals( supA, singleOut.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, singleOut.supplier.get(\"supplier_supB\"));\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n//    put back \"out\" as Bean, to see if both ways work as you would expect\n//    but the Field that \"allSuppliers\" need to be cleared, as it is just for \n//    retrieving data, not to post data\n    out.allSuppliers = null;\n    SolrInputDocument doc1 = binder.toSolrInputDocument( out );\n    \n    SolrDocumentList docs1 = new SolrDocumentList();\n    docs1.add( ClientUtils.toSolrDocument(doc1) );\n    Item out1 = binder.getBeans( Item.class, docs1 ).get( 0 );\n    \n    Assert.assertEquals( item.id, out1.id );\n    Assert.assertEquals( item.inStock, out1.inStock );\n    Assert.assertEquals( item.categories.length, out1.categories.length );\n    Assert.assertEquals( item.features, out1.features );\n\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out1.supplier_simple.get(\"sup_simple_supB\"));\n    \n    Assert.assertEquals( supA,out1.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, out1.supplier.get(\"supplier_supB\"));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testToAndFromSolrDocument().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testToAndFromSolrDocument().mjava","sourceNew":"  public void testToAndFromSolrDocument()\n  {\n    Item item = new Item();\n    item.id = \"one\";\n    item.inStock = false;\n    item.categories =  new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    item.features = Arrays.asList( item.categories );\n    List<String> supA =  Arrays.asList(  new String[] { \"supA1\", \"supA2\", \"supA3\" } );\n    List<String> supB =  Arrays.asList(  new String[] { \"supB1\", \"supB2\", \"supB3\"});\n    item.supplier = new HashMap<String, List<String>>();\n    item.supplier.put(\"supplier_supA\", supA);\n    item.supplier.put(\"supplier_supB\", supB);\n    \n    item.supplier_simple = new HashMap<String, String>();\n    item.supplier_simple.put(\"sup_simple_supA\", \"supA_val\");\n    item.supplier_simple.put(\"sup_simple_supB\", \"supB_val\");\n    \n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    SolrInputDocument doc = binder.toSolrInputDocument( item );\n    SolrDocumentList docs = new SolrDocumentList();\n    docs.add( ClientUtils.toSolrDocument(doc) );\n    Item out = binder.getBeans( Item.class, docs ).get( 0 );\n    Item singleOut = binder.getBean(Item.class, ClientUtils.toSolrDocument(doc));\n    \n    // make sure it came out the same\n    Assert.assertEquals( item.id, out.id );\n    Assert.assertEquals( item.inStock, out.inStock );\n    Assert.assertEquals( item.categories.length, out.categories.length );\n    Assert.assertEquals( item.features, out.features );\n    Assert.assertEquals( supA,out.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, out.supplier.get(\"supplier_supB\"));\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n    Assert.assertEquals( item.id, singleOut.id );\n    Assert.assertEquals( item.inStock, singleOut.inStock );\n    Assert.assertEquals( item.categories.length, singleOut.categories.length );\n    Assert.assertEquals( item.features, singleOut.features );\n    Assert.assertEquals( supA, singleOut.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, singleOut.supplier.get(\"supplier_supB\"));\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n//    put back \"out\" as Bean, to see if both ways work as you would expect\n//    but the Field that \"allSuppliers\" need to be cleared, as it is just for \n//    retrieving data, not to post data\n    out.allSuppliers = null;\n    SolrInputDocument doc1 = binder.toSolrInputDocument( out );\n    \n    SolrDocumentList docs1 = new SolrDocumentList();\n    docs1.add( ClientUtils.toSolrDocument(doc1) );\n    Item out1 = binder.getBeans( Item.class, docs1 ).get( 0 );\n    \n    Assert.assertEquals( item.id, out1.id );\n    Assert.assertEquals( item.inStock, out1.inStock );\n    Assert.assertEquals( item.categories.length, out1.categories.length );\n    Assert.assertEquals( item.features, out1.features );\n\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out1.supplier_simple.get(\"sup_simple_supB\"));\n    \n    Assert.assertEquals( supA,out1.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, out1.supplier.get(\"supplier_supB\"));\n    \n  }\n\n","sourceOld":"  public void testToAndFromSolrDocument()\n  {\n    Item item = new Item();\n    item.id = \"one\";\n    item.inStock = false;\n    item.categories =  new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    item.features = Arrays.asList( item.categories );\n    List<String> supA =  Arrays.asList(  new String[] { \"supA1\", \"supA2\", \"supA3\" } );\n    List<String> supB =  Arrays.asList(  new String[] { \"supB1\", \"supB2\", \"supB3\"});\n    item.supplier = new HashMap<String, List<String>>();\n    item.supplier.put(\"supplier_supA\", supA);\n    item.supplier.put(\"supplier_supB\", supB);\n    \n    item.supplier_simple = new HashMap<String, String>();\n    item.supplier_simple.put(\"sup_simple_supA\", \"supA_val\");\n    item.supplier_simple.put(\"sup_simple_supB\", \"supB_val\");\n    \n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    SolrInputDocument doc = binder.toSolrInputDocument( item );\n    SolrDocumentList docs = new SolrDocumentList();\n    docs.add( ClientUtils.toSolrDocument(doc) );\n    Item out = binder.getBeans( Item.class, docs ).get( 0 );\n    Item singleOut = binder.getBean(Item.class, ClientUtils.toSolrDocument(doc));\n    \n    // make sure it came out the same\n    Assert.assertEquals( item.id, out.id );\n    Assert.assertEquals( item.inStock, out.inStock );\n    Assert.assertEquals( item.categories.length, out.categories.length );\n    Assert.assertEquals( item.features, out.features );\n    Assert.assertEquals( supA,out.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, out.supplier.get(\"supplier_supB\"));\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n    Assert.assertEquals( item.id, singleOut.id );\n    Assert.assertEquals( item.inStock, singleOut.inStock );\n    Assert.assertEquals( item.categories.length, singleOut.categories.length );\n    Assert.assertEquals( item.features, singleOut.features );\n    Assert.assertEquals( supA, singleOut.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, singleOut.supplier.get(\"supplier_supB\"));\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n//    put back \"out\" as Bean, to see if both ways work as you would expect\n//    but the Field that \"allSuppliers\" need to be cleared, as it is just for \n//    retrieving data, not to post data\n    out.allSuppliers = null;\n    SolrInputDocument doc1 = binder.toSolrInputDocument( out );\n    \n    SolrDocumentList docs1 = new SolrDocumentList();\n    docs1.add( ClientUtils.toSolrDocument(doc1) );\n    Item out1 = binder.getBeans( Item.class, docs1 ).get( 0 );\n    \n    Assert.assertEquals( item.id, out1.id );\n    Assert.assertEquals( item.inStock, out1.inStock );\n    Assert.assertEquals( item.categories.length, out1.categories.length );\n    Assert.assertEquals( item.features, out1.features );\n\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out1.supplier_simple.get(\"sup_simple_supB\"));\n    \n    Assert.assertEquals( supA,out1.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, out1.supplier.get(\"supplier_supB\"));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35b292579499b440bb87b86a6b832d91a6f6dc2e","date":1313656166,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testToAndFromSolrDocument().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testToAndFromSolrDocument().mjava","sourceNew":"  public void testToAndFromSolrDocument() {\n    Item item = new Item();\n    item.id = \"one\";\n    item.inStock = false;\n    item.categories = new String[] {\"aaa\", \"bbb\", \"ccc\"};\n    item.features = Arrays.asList(item.categories);\n    List<String> supA = Arrays.asList(\"supA1\", \"supA2\", \"supA3\");\n    List<String> supB = Arrays.asList(\"supB1\", \"supB2\", \"supB3\");\n    item.supplier = new HashMap<String, List<String>>();\n    item.supplier.put(\"supplier_supA\", supA);\n    item.supplier.put(\"supplier_supB\", supB);\n    \n    item.supplier_simple = new HashMap<String, String>();\n    item.supplier_simple.put(\"sup_simple_supA\", \"supA_val\");\n    item.supplier_simple.put(\"sup_simple_supB\", \"supB_val\");\n    \n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    SolrInputDocument doc = binder.toSolrInputDocument(item);\n    SolrDocumentList docs = new SolrDocumentList();\n    docs.add(ClientUtils.toSolrDocument(doc));\n    Item out = binder.getBeans(Item.class, docs).get(0);\n    Item singleOut = binder.getBean(Item.class, ClientUtils.toSolrDocument(doc));\n    \n    // make sure it came out the same\n    assertEquals(item.id, out.id);\n    assertEquals(item.inStock, out.inStock);\n    assertEquals(item.categories.length, out.categories.length);\n    assertEquals(item.features, out.features);\n    assertEquals(supA, out.supplier.get(\"supplier_supA\"));\n    assertEquals(supB, out.supplier.get(\"supplier_supB\"));\n    assertEquals(item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n\n    assertEquals(item.id, singleOut.id);\n    assertEquals(item.inStock, singleOut.inStock);\n    assertEquals(item.categories.length, singleOut.categories.length);\n    assertEquals(item.features, singleOut.features);\n    assertEquals(supA, singleOut.supplier.get(\"supplier_supA\"));\n    assertEquals(supB, singleOut.supplier.get(\"supplier_supB\"));\n    assertEquals(item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n//    put back \"out\" as Bean, to see if both ways work as you would expect\n//    but the Field that \"allSuppliers\" need to be cleared, as it is just for \n//    retrieving data, not to post data\n    out.allSuppliers = null;\n    SolrInputDocument doc1 = binder.toSolrInputDocument(out);\n    \n    SolrDocumentList docs1 = new SolrDocumentList();\n    docs1.add(ClientUtils.toSolrDocument(doc1));\n    Item out1 = binder.getBeans(Item.class, docs1).get(0);\n\n    assertEquals(item.id, out1.id);\n    assertEquals(item.inStock, out1.inStock);\n    assertEquals(item.categories.length, out1.categories.length);\n    assertEquals(item.features, out1.features);\n\n    assertEquals(item.supplier_simple.get(\"sup_simple_supB\"), out1.supplier_simple.get(\"sup_simple_supB\"));\n\n    assertEquals(supA, out1.supplier.get(\"supplier_supA\"));\n    assertEquals(supB, out1.supplier.get(\"supplier_supB\"));\n  }\n\n","sourceOld":"  public void testToAndFromSolrDocument()\n  {\n    Item item = new Item();\n    item.id = \"one\";\n    item.inStock = false;\n    item.categories =  new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    item.features = Arrays.asList( item.categories );\n    List<String> supA =  Arrays.asList(  new String[] { \"supA1\", \"supA2\", \"supA3\" } );\n    List<String> supB =  Arrays.asList(  new String[] { \"supB1\", \"supB2\", \"supB3\"});\n    item.supplier = new HashMap<String, List<String>>();\n    item.supplier.put(\"supplier_supA\", supA);\n    item.supplier.put(\"supplier_supB\", supB);\n    \n    item.supplier_simple = new HashMap<String, String>();\n    item.supplier_simple.put(\"sup_simple_supA\", \"supA_val\");\n    item.supplier_simple.put(\"sup_simple_supB\", \"supB_val\");\n    \n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    SolrInputDocument doc = binder.toSolrInputDocument( item );\n    SolrDocumentList docs = new SolrDocumentList();\n    docs.add( ClientUtils.toSolrDocument(doc) );\n    Item out = binder.getBeans( Item.class, docs ).get( 0 );\n    Item singleOut = binder.getBean(Item.class, ClientUtils.toSolrDocument(doc));\n    \n    // make sure it came out the same\n    Assert.assertEquals( item.id, out.id );\n    Assert.assertEquals( item.inStock, out.inStock );\n    Assert.assertEquals( item.categories.length, out.categories.length );\n    Assert.assertEquals( item.features, out.features );\n    Assert.assertEquals( supA,out.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, out.supplier.get(\"supplier_supB\"));\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n    Assert.assertEquals( item.id, singleOut.id );\n    Assert.assertEquals( item.inStock, singleOut.inStock );\n    Assert.assertEquals( item.categories.length, singleOut.categories.length );\n    Assert.assertEquals( item.features, singleOut.features );\n    Assert.assertEquals( supA, singleOut.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, singleOut.supplier.get(\"supplier_supB\"));\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n//    put back \"out\" as Bean, to see if both ways work as you would expect\n//    but the Field that \"allSuppliers\" need to be cleared, as it is just for \n//    retrieving data, not to post data\n    out.allSuppliers = null;\n    SolrInputDocument doc1 = binder.toSolrInputDocument( out );\n    \n    SolrDocumentList docs1 = new SolrDocumentList();\n    docs1.add( ClientUtils.toSolrDocument(doc1) );\n    Item out1 = binder.getBeans( Item.class, docs1 ).get( 0 );\n    \n    Assert.assertEquals( item.id, out1.id );\n    Assert.assertEquals( item.inStock, out1.inStock );\n    Assert.assertEquals( item.categories.length, out1.categories.length );\n    Assert.assertEquals( item.features, out1.features );\n\n    Assert.assertEquals( item.supplier_simple.get(\"sup_simple_supB\"), out1.supplier_simple.get(\"sup_simple_supB\"));\n    \n    Assert.assertEquals( supA,out1.supplier.get(\"supplier_supA\"));\n    Assert.assertEquals( supB, out1.supplier.get(\"supplier_supB\"));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testToAndFromSolrDocument().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testToAndFromSolrDocument().mjava","sourceNew":"  public void testToAndFromSolrDocument() {\n    Item item = new Item();\n    item.id = \"one\";\n    item.inStock = false;\n    item.categories = new String[] {\"aaa\", \"bbb\", \"ccc\"};\n    item.features = Arrays.asList(item.categories);\n    List<String> supA = Arrays.asList(\"supA1\", \"supA2\", \"supA3\");\n    List<String> supB = Arrays.asList(\"supB1\", \"supB2\", \"supB3\");\n    item.supplier = new HashMap<>();\n    item.supplier.put(\"supplier_supA\", supA);\n    item.supplier.put(\"supplier_supB\", supB);\n    \n    item.supplier_simple = new HashMap<>();\n    item.supplier_simple.put(\"sup_simple_supA\", \"supA_val\");\n    item.supplier_simple.put(\"sup_simple_supB\", \"supB_val\");\n    \n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    SolrInputDocument doc = binder.toSolrInputDocument(item);\n    SolrDocumentList docs = new SolrDocumentList();\n    docs.add(ClientUtils.toSolrDocument(doc));\n    Item out = binder.getBeans(Item.class, docs).get(0);\n    Item singleOut = binder.getBean(Item.class, ClientUtils.toSolrDocument(doc));\n    \n    // make sure it came out the same\n    assertEquals(item.id, out.id);\n    assertEquals(item.inStock, out.inStock);\n    assertEquals(item.categories.length, out.categories.length);\n    assertEquals(item.features, out.features);\n    assertEquals(supA, out.supplier.get(\"supplier_supA\"));\n    assertEquals(supB, out.supplier.get(\"supplier_supB\"));\n    assertEquals(item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n\n    assertEquals(item.id, singleOut.id);\n    assertEquals(item.inStock, singleOut.inStock);\n    assertEquals(item.categories.length, singleOut.categories.length);\n    assertEquals(item.features, singleOut.features);\n    assertEquals(supA, singleOut.supplier.get(\"supplier_supA\"));\n    assertEquals(supB, singleOut.supplier.get(\"supplier_supB\"));\n    assertEquals(item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n//    put back \"out\" as Bean, to see if both ways work as you would expect\n//    but the Field that \"allSuppliers\" need to be cleared, as it is just for \n//    retrieving data, not to post data\n    out.allSuppliers = null;\n    SolrInputDocument doc1 = binder.toSolrInputDocument(out);\n    \n    SolrDocumentList docs1 = new SolrDocumentList();\n    docs1.add(ClientUtils.toSolrDocument(doc1));\n    Item out1 = binder.getBeans(Item.class, docs1).get(0);\n\n    assertEquals(item.id, out1.id);\n    assertEquals(item.inStock, out1.inStock);\n    assertEquals(item.categories.length, out1.categories.length);\n    assertEquals(item.features, out1.features);\n\n    assertEquals(item.supplier_simple.get(\"sup_simple_supB\"), out1.supplier_simple.get(\"sup_simple_supB\"));\n\n    assertEquals(supA, out1.supplier.get(\"supplier_supA\"));\n    assertEquals(supB, out1.supplier.get(\"supplier_supB\"));\n  }\n\n","sourceOld":"  public void testToAndFromSolrDocument() {\n    Item item = new Item();\n    item.id = \"one\";\n    item.inStock = false;\n    item.categories = new String[] {\"aaa\", \"bbb\", \"ccc\"};\n    item.features = Arrays.asList(item.categories);\n    List<String> supA = Arrays.asList(\"supA1\", \"supA2\", \"supA3\");\n    List<String> supB = Arrays.asList(\"supB1\", \"supB2\", \"supB3\");\n    item.supplier = new HashMap<String, List<String>>();\n    item.supplier.put(\"supplier_supA\", supA);\n    item.supplier.put(\"supplier_supB\", supB);\n    \n    item.supplier_simple = new HashMap<String, String>();\n    item.supplier_simple.put(\"sup_simple_supA\", \"supA_val\");\n    item.supplier_simple.put(\"sup_simple_supB\", \"supB_val\");\n    \n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    SolrInputDocument doc = binder.toSolrInputDocument(item);\n    SolrDocumentList docs = new SolrDocumentList();\n    docs.add(ClientUtils.toSolrDocument(doc));\n    Item out = binder.getBeans(Item.class, docs).get(0);\n    Item singleOut = binder.getBean(Item.class, ClientUtils.toSolrDocument(doc));\n    \n    // make sure it came out the same\n    assertEquals(item.id, out.id);\n    assertEquals(item.inStock, out.inStock);\n    assertEquals(item.categories.length, out.categories.length);\n    assertEquals(item.features, out.features);\n    assertEquals(supA, out.supplier.get(\"supplier_supA\"));\n    assertEquals(supB, out.supplier.get(\"supplier_supB\"));\n    assertEquals(item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n\n    assertEquals(item.id, singleOut.id);\n    assertEquals(item.inStock, singleOut.inStock);\n    assertEquals(item.categories.length, singleOut.categories.length);\n    assertEquals(item.features, singleOut.features);\n    assertEquals(supA, singleOut.supplier.get(\"supplier_supA\"));\n    assertEquals(supB, singleOut.supplier.get(\"supplier_supB\"));\n    assertEquals(item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n//    put back \"out\" as Bean, to see if both ways work as you would expect\n//    but the Field that \"allSuppliers\" need to be cleared, as it is just for \n//    retrieving data, not to post data\n    out.allSuppliers = null;\n    SolrInputDocument doc1 = binder.toSolrInputDocument(out);\n    \n    SolrDocumentList docs1 = new SolrDocumentList();\n    docs1.add(ClientUtils.toSolrDocument(doc1));\n    Item out1 = binder.getBeans(Item.class, docs1).get(0);\n\n    assertEquals(item.id, out1.id);\n    assertEquals(item.inStock, out1.inStock);\n    assertEquals(item.categories.length, out1.categories.length);\n    assertEquals(item.features, out1.features);\n\n    assertEquals(item.supplier_simple.get(\"sup_simple_supB\"), out1.supplier_simple.get(\"sup_simple_supB\"));\n\n    assertEquals(supA, out1.supplier.get(\"supplier_supA\"));\n    assertEquals(supB, out1.supplier.get(\"supplier_supB\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"733eaf468f18297b1bcc51031353bdfdd1913bdf","date":1456928540,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testToAndFromSolrDocument().mjava","sourceNew":null,"sourceOld":"  public void testToAndFromSolrDocument() {\n    Item item = new Item();\n    item.id = \"one\";\n    item.inStock = false;\n    item.categories = new String[] {\"aaa\", \"bbb\", \"ccc\"};\n    item.features = Arrays.asList(item.categories);\n    List<String> supA = Arrays.asList(\"supA1\", \"supA2\", \"supA3\");\n    List<String> supB = Arrays.asList(\"supB1\", \"supB2\", \"supB3\");\n    item.supplier = new HashMap<>();\n    item.supplier.put(\"supplier_supA\", supA);\n    item.supplier.put(\"supplier_supB\", supB);\n    \n    item.supplier_simple = new HashMap<>();\n    item.supplier_simple.put(\"sup_simple_supA\", \"supA_val\");\n    item.supplier_simple.put(\"sup_simple_supB\", \"supB_val\");\n    \n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    SolrInputDocument doc = binder.toSolrInputDocument(item);\n    SolrDocumentList docs = new SolrDocumentList();\n    docs.add(ClientUtils.toSolrDocument(doc));\n    Item out = binder.getBeans(Item.class, docs).get(0);\n    Item singleOut = binder.getBean(Item.class, ClientUtils.toSolrDocument(doc));\n    \n    // make sure it came out the same\n    assertEquals(item.id, out.id);\n    assertEquals(item.inStock, out.inStock);\n    assertEquals(item.categories.length, out.categories.length);\n    assertEquals(item.features, out.features);\n    assertEquals(supA, out.supplier.get(\"supplier_supA\"));\n    assertEquals(supB, out.supplier.get(\"supplier_supB\"));\n    assertEquals(item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n\n    assertEquals(item.id, singleOut.id);\n    assertEquals(item.inStock, singleOut.inStock);\n    assertEquals(item.categories.length, singleOut.categories.length);\n    assertEquals(item.features, singleOut.features);\n    assertEquals(supA, singleOut.supplier.get(\"supplier_supA\"));\n    assertEquals(supB, singleOut.supplier.get(\"supplier_supB\"));\n    assertEquals(item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n//    put back \"out\" as Bean, to see if both ways work as you would expect\n//    but the Field that \"allSuppliers\" need to be cleared, as it is just for \n//    retrieving data, not to post data\n    out.allSuppliers = null;\n    SolrInputDocument doc1 = binder.toSolrInputDocument(out);\n    \n    SolrDocumentList docs1 = new SolrDocumentList();\n    docs1.add(ClientUtils.toSolrDocument(doc1));\n    Item out1 = binder.getBeans(Item.class, docs1).get(0);\n\n    assertEquals(item.id, out1.id);\n    assertEquals(item.inStock, out1.inStock);\n    assertEquals(item.categories.length, out1.categories.length);\n    assertEquals(item.features, out1.features);\n\n    assertEquals(item.supplier_simple.get(\"sup_simple_supB\"), out1.supplier_simple.get(\"sup_simple_supB\"));\n\n    assertEquals(supA, out1.supplier.get(\"supplier_supA\"));\n    assertEquals(supB, out1.supplier.get(\"supplier_supB\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testToAndFromSolrDocument().mjava","sourceNew":null,"sourceOld":"  public void testToAndFromSolrDocument() {\n    Item item = new Item();\n    item.id = \"one\";\n    item.inStock = false;\n    item.categories = new String[] {\"aaa\", \"bbb\", \"ccc\"};\n    item.features = Arrays.asList(item.categories);\n    List<String> supA = Arrays.asList(\"supA1\", \"supA2\", \"supA3\");\n    List<String> supB = Arrays.asList(\"supB1\", \"supB2\", \"supB3\");\n    item.supplier = new HashMap<>();\n    item.supplier.put(\"supplier_supA\", supA);\n    item.supplier.put(\"supplier_supB\", supB);\n    \n    item.supplier_simple = new HashMap<>();\n    item.supplier_simple.put(\"sup_simple_supA\", \"supA_val\");\n    item.supplier_simple.put(\"sup_simple_supB\", \"supB_val\");\n    \n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    SolrInputDocument doc = binder.toSolrInputDocument(item);\n    SolrDocumentList docs = new SolrDocumentList();\n    docs.add(ClientUtils.toSolrDocument(doc));\n    Item out = binder.getBeans(Item.class, docs).get(0);\n    Item singleOut = binder.getBean(Item.class, ClientUtils.toSolrDocument(doc));\n    \n    // make sure it came out the same\n    assertEquals(item.id, out.id);\n    assertEquals(item.inStock, out.inStock);\n    assertEquals(item.categories.length, out.categories.length);\n    assertEquals(item.features, out.features);\n    assertEquals(supA, out.supplier.get(\"supplier_supA\"));\n    assertEquals(supB, out.supplier.get(\"supplier_supB\"));\n    assertEquals(item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n\n    assertEquals(item.id, singleOut.id);\n    assertEquals(item.inStock, singleOut.inStock);\n    assertEquals(item.categories.length, singleOut.categories.length);\n    assertEquals(item.features, singleOut.features);\n    assertEquals(supA, singleOut.supplier.get(\"supplier_supA\"));\n    assertEquals(supB, singleOut.supplier.get(\"supplier_supB\"));\n    assertEquals(item.supplier_simple.get(\"sup_simple_supB\"), out.supplier_simple.get(\"sup_simple_supB\"));\n    \n//    put back \"out\" as Bean, to see if both ways work as you would expect\n//    but the Field that \"allSuppliers\" need to be cleared, as it is just for \n//    retrieving data, not to post data\n    out.allSuppliers = null;\n    SolrInputDocument doc1 = binder.toSolrInputDocument(out);\n    \n    SolrDocumentList docs1 = new SolrDocumentList();\n    docs1.add(ClientUtils.toSolrDocument(doc1));\n    Item out1 = binder.getBeans(Item.class, docs1).get(0);\n\n    assertEquals(item.id, out1.id);\n    assertEquals(item.inStock, out1.inStock);\n    assertEquals(item.categories.length, out1.categories.length);\n    assertEquals(item.features, out1.features);\n\n    assertEquals(item.supplier_simple.get(\"sup_simple_supB\"), out1.supplier_simple.get(\"sup_simple_supB\"));\n\n    assertEquals(supA, out1.supplier.get(\"supplier_supA\"));\n    assertEquals(supB, out1.supplier.get(\"supplier_supB\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["35b292579499b440bb87b86a6b832d91a6f6dc2e"],"35b292579499b440bb87b86a6b832d91a6f6dc2e":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","733eaf468f18297b1bcc51031353bdfdd1913bdf"],"733eaf468f18297b1bcc51031353bdfdd1913bdf":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","733eaf468f18297b1bcc51031353bdfdd1913bdf"],"35b292579499b440bb87b86a6b832d91a6f6dc2e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["35b292579499b440bb87b86a6b832d91a6f6dc2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"733eaf468f18297b1bcc51031353bdfdd1913bdf":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}