{"path":"solr/core/src/java/org/apache/solr/search/QueryParsing#parseLocalParams(String,int,ModifiableSolrParams,SolrParams,String,char).mjava","commits":[{"id":"3a2e3a7d2549a34fb7ec9be55424e41388025336","date":1452801298,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#parseLocalParams(String,int,ModifiableSolrParams,SolrParams,String,char).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param txt Text to parse\n   * @param start Index into text for start of parsing\n   * @param target Object to inject with parsed settings\n   * @param params Additional existing parameters\n   * @param startString String that indicates the start of a localParams section\n   * @param endChar Character that indicates the end of a localParams section\n   */\n  public static int parseLocalParams(String txt, int start, ModifiableSolrParams target, SolrParams params, String startString, char endChar) throws SyntaxError {\n    int off = start;\n    if (!txt.startsWith(startString, off)) return start;\n    StrParser p = new StrParser(txt, start, txt.length());\n    p.pos += startString.length(); // skip over \"{!\"\n\n    for (; ;) {\n      /*\n      if (p.pos>=txt.length()) {\n        throw new SyntaxError(\"Missing '}' parsing local params '\" + txt + '\"');\n      }\n      */\n      char ch = p.peek();\n      if (ch == endChar) {\n        return p.pos + 1;\n      }\n\n      String id = p.getId();\n      if (id.length() == 0) {\n        throw new SyntaxError(\"Expected ending character '\" + endChar + \"' parsing local params '\" + txt + '\"');\n\n      }\n      String val = null;\n\n      ch = p.peek();\n      if (ch != '=') {\n        // single word... treat {!func} as type=func for easy lookup\n        val = id;\n        id = TYPE;\n      } else {\n        // saw equals, so read value\n        p.pos++;\n        ch = p.peek();\n        boolean deref = false;\n        if (ch == '$') {\n          p.pos++;\n          ch = p.peek();\n          deref = true;  // dereference whatever value is read by treating it as a variable name\n        }\n\n        if (ch == '\\\"' || ch == '\\'') {\n          val = p.getQuotedString();\n        } else {\n          // read unquoted literal ended by whitespace or endChar (normally '}')\n          // there is no escaping.\n          int valStart = p.pos;\n          for (; ;) {\n            if (p.pos >= p.end) {\n              throw new SyntaxError(\"Missing end to unquoted value starting at \" + valStart + \" str='\" + txt + \"'\");\n            }\n            char c = p.val.charAt(p.pos);\n            if (c == endChar || Character.isWhitespace(c)) {\n              val = p.val.substring(valStart, p.pos);\n              break;\n            }\n            p.pos++;\n          }\n        }\n\n        if (deref) {  // dereference parameter\n          if (params != null) {\n            val = params.get(val);\n          }\n        }\n      }\n      if (target != null) target.add(id, val);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f7c69c29432074b666568db5e84001acd540dee","date":1520745905,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryParsing#parseLocalParams(String,int,ModifiableSolrParams,SolrParams,String,char).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryParsing#parseLocalParams(String,int,ModifiableSolrParams,SolrParams,String,char).mjava","sourceNew":"  /**\n   * @param txt Text to parse\n   * @param start Index into text for start of parsing\n   * @param target Object to inject with parsed settings\n   * @param params Additional existing parameters\n   * @param startString String that indicates the start of a localParams section\n   * @param endChar Character that indicates the end of a localParams section\n   */\n  public static int parseLocalParams(String txt, int start, ModifiableSolrParams target, SolrParams params, String startString, char endChar) throws SyntaxError {\n    int off = start;\n    if (!txt.startsWith(startString, off)) return start;\n    StrParser p = new StrParser(txt, start, txt.length());\n    p.pos += startString.length(); // skip over \"{!\"\n\n    for (; ;) {\n      /*\n      if (p.pos>=txt.length()) {\n        throw new SyntaxError(\"Missing '}' parsing local params '\" + txt + '\"');\n      }\n      */\n      char ch = p.peek();\n      if (ch == endChar) {\n        return p.pos + 1;\n      }\n\n      String id = p.getId();\n      if (id.length() == 0) {\n        throw new SyntaxError(\"Expected ending character '\" + endChar + \"' parsing local params '\" + txt + '\"');\n\n      }\n      String[] val = new String[1];\n\n      ch = p.peek();\n      if (ch != '=') {\n        // single word... treat {!func} as type=func for easy lookup\n        val[0] = id;\n        id = TYPE;\n      } else {\n        // saw equals, so read value\n        p.pos++;\n        ch = p.peek();\n        boolean deref = false;\n        if (ch == '$') {\n          p.pos++;\n          ch = p.peek();\n          deref = true;  // dereference whatever value is read by treating it as a variable name\n        }\n\n        if (ch == '\\\"' || ch == '\\'') {\n          val[0] = p.getQuotedString();\n        } else {\n          // read unquoted literal ended by whitespace or endChar (normally '}')\n          // there is no escaping.\n          int valStart = p.pos;\n          for (; ;) {\n            if (p.pos >= p.end) {\n              throw new SyntaxError(\"Missing end to unquoted value starting at \" + valStart + \" str='\" + txt + \"'\");\n            }\n            char c = p.val.charAt(p.pos);\n            if (c == endChar || Character.isWhitespace(c)) {\n              val[0] = p.val.substring(valStart, p.pos);\n              break;\n            }\n            p.pos++;\n          }\n        }\n\n        if (deref) {  // dereference parameter\n          if (params != null) {\n            val = params.getParams(val[0]);\n          }\n        }\n      }\n      if (target != null) target.add(id, val);\n    }\n  }\n\n","sourceOld":"  /**\n   * @param txt Text to parse\n   * @param start Index into text for start of parsing\n   * @param target Object to inject with parsed settings\n   * @param params Additional existing parameters\n   * @param startString String that indicates the start of a localParams section\n   * @param endChar Character that indicates the end of a localParams section\n   */\n  public static int parseLocalParams(String txt, int start, ModifiableSolrParams target, SolrParams params, String startString, char endChar) throws SyntaxError {\n    int off = start;\n    if (!txt.startsWith(startString, off)) return start;\n    StrParser p = new StrParser(txt, start, txt.length());\n    p.pos += startString.length(); // skip over \"{!\"\n\n    for (; ;) {\n      /*\n      if (p.pos>=txt.length()) {\n        throw new SyntaxError(\"Missing '}' parsing local params '\" + txt + '\"');\n      }\n      */\n      char ch = p.peek();\n      if (ch == endChar) {\n        return p.pos + 1;\n      }\n\n      String id = p.getId();\n      if (id.length() == 0) {\n        throw new SyntaxError(\"Expected ending character '\" + endChar + \"' parsing local params '\" + txt + '\"');\n\n      }\n      String val = null;\n\n      ch = p.peek();\n      if (ch != '=') {\n        // single word... treat {!func} as type=func for easy lookup\n        val = id;\n        id = TYPE;\n      } else {\n        // saw equals, so read value\n        p.pos++;\n        ch = p.peek();\n        boolean deref = false;\n        if (ch == '$') {\n          p.pos++;\n          ch = p.peek();\n          deref = true;  // dereference whatever value is read by treating it as a variable name\n        }\n\n        if (ch == '\\\"' || ch == '\\'') {\n          val = p.getQuotedString();\n        } else {\n          // read unquoted literal ended by whitespace or endChar (normally '}')\n          // there is no escaping.\n          int valStart = p.pos;\n          for (; ;) {\n            if (p.pos >= p.end) {\n              throw new SyntaxError(\"Missing end to unquoted value starting at \" + valStart + \" str='\" + txt + \"'\");\n            }\n            char c = p.val.charAt(p.pos);\n            if (c == endChar || Character.isWhitespace(c)) {\n              val = p.val.substring(valStart, p.pos);\n              break;\n            }\n            p.pos++;\n          }\n        }\n\n        if (deref) {  // dereference parameter\n          if (params != null) {\n            val = params.get(val);\n          }\n        }\n      }\n      if (target != null) target.add(id, val);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a2e3a7d2549a34fb7ec9be55424e41388025336":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f7c69c29432074b666568db5e84001acd540dee":["3a2e3a7d2549a34fb7ec9be55424e41388025336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f7c69c29432074b666568db5e84001acd540dee"]},"commit2Childs":{"3a2e3a7d2549a34fb7ec9be55424e41388025336":["5f7c69c29432074b666568db5e84001acd540dee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a2e3a7d2549a34fb7ec9be55424e41388025336"],"5f7c69c29432074b666568db5e84001acd540dee":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}