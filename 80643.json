{"path":"src/java/org/apache/lucene/index/SegmentsTermEnum[SegmentsReader]#SegmentsTermEnum(SegmentReader[],int[],Term).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentsTermEnum[SegmentsReader]#SegmentsTermEnum(SegmentReader[],int[],Term).mjava","pathOld":"/dev/null","sourceNew":"  SegmentsTermEnum(SegmentReader[] readers, int[] starts, Term t)\n       throws IOException {\n    queue = new SegmentMergeQueue(readers.length);\n    for (int i = 0; i < readers.length; i++) {\n      SegmentReader reader = readers[i];\n      SegmentTermEnum termEnum;\n\n      if (t != null) {\n\ttermEnum = (SegmentTermEnum)reader.terms(t);\n      } else\n\ttermEnum = (SegmentTermEnum)reader.terms();\n      \n      SegmentMergeInfo smi = new SegmentMergeInfo(starts[i], termEnum, reader);\n      if (t == null ? smi.next() : termEnum.term() != null)\n\tqueue.put(smi);\t\t\t\t  // initialize queue\n      else\n\tsmi.close();\n    }\n\n    if (t != null && queue.size() > 0) {\n      SegmentMergeInfo top = (SegmentMergeInfo)queue.top();\n      term = top.termEnum.term();\n      docFreq = top.termEnum.docFreq();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6473e45cde7e2f73ee961148e3272fb52d93a25e","date":1032413465,"type":4,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/SegmentsTermEnum[SegmentsReader]#SegmentsTermEnum(SegmentReader[],int[],Term).mjava","sourceNew":null,"sourceOld":"  SegmentsTermEnum(SegmentReader[] readers, int[] starts, Term t)\n       throws IOException {\n    queue = new SegmentMergeQueue(readers.length);\n    for (int i = 0; i < readers.length; i++) {\n      SegmentReader reader = readers[i];\n      SegmentTermEnum termEnum;\n\n      if (t != null) {\n\ttermEnum = (SegmentTermEnum)reader.terms(t);\n      } else\n\ttermEnum = (SegmentTermEnum)reader.terms();\n      \n      SegmentMergeInfo smi = new SegmentMergeInfo(starts[i], termEnum, reader);\n      if (t == null ? smi.next() : termEnum.term() != null)\n\tqueue.put(smi);\t\t\t\t  // initialize queue\n      else\n\tsmi.close();\n    }\n\n    if (t != null && queue.size() > 0) {\n      SegmentMergeInfo top = (SegmentMergeInfo)queue.top();\n      term = top.termEnum.term();\n      docFreq = top.termEnum.docFreq();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7087f8343d1904252decbbea451a5324aaf83f00","date":1032414664,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentsTermEnum[SegmentsReader]#SegmentsTermEnum(SegmentReader[],int[],Term).mjava","pathOld":"/dev/null","sourceNew":"  SegmentsTermEnum(SegmentReader[] readers, int[] starts, Term t)\n       throws IOException {\n    queue = new SegmentMergeQueue(readers.length);\n    for (int i = 0; i < readers.length; i++) {\n      SegmentReader reader = readers[i];\n      SegmentTermEnum termEnum;\n\n      if (t != null) {\n\ttermEnum = (SegmentTermEnum)reader.terms(t);\n      } else\n\ttermEnum = (SegmentTermEnum)reader.terms();\n\n      SegmentMergeInfo smi = new SegmentMergeInfo(starts[i], termEnum, reader);\n      if (t == null ? smi.next() : termEnum.term() != null)\n\tqueue.put(smi);\t\t\t\t  // initialize queue\n      else\n\tsmi.close();\n    }\n\n    if (t != null && queue.size() > 0) {\n      SegmentMergeInfo top = (SegmentMergeInfo)queue.top();\n      term = top.termEnum.term();\n      docFreq = top.termEnum.docFreq();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c246c4425fb94d9e4f103425198816f560558fd","date":1063204057,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentsTermEnum[SegmentsReader]#SegmentsTermEnum(SegmentReader[],int[],Term).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentsTermEnum[SegmentsReader]#SegmentsTermEnum(SegmentReader[],int[],Term).mjava","sourceNew":"  SegmentsTermEnum(SegmentReader[] readers, int[] starts, Term t)\n       throws IOException {\n    queue = new SegmentMergeQueue(readers.length);\n    for (int i = 0; i < readers.length; i++) {\n      SegmentReader reader = readers[i];\n      SegmentTermEnum termEnum;\n\n      if (t != null) {\n\ttermEnum = (SegmentTermEnum)reader.terms(t);\n      } else\n\ttermEnum = (SegmentTermEnum)reader.terms();\n\n      SegmentMergeInfo smi = new SegmentMergeInfo(starts[i], termEnum, reader);\n      if (t == null ? smi.next() : termEnum.term() != null)\n\tqueue.put(smi);\t\t\t\t  // initialize queue\n      else\n\tsmi.close();\n    }\n\n    if (t != null && queue.size() > 0) {\n      next();\n    }\n  }\n\n","sourceOld":"  SegmentsTermEnum(SegmentReader[] readers, int[] starts, Term t)\n       throws IOException {\n    queue = new SegmentMergeQueue(readers.length);\n    for (int i = 0; i < readers.length; i++) {\n      SegmentReader reader = readers[i];\n      SegmentTermEnum termEnum;\n\n      if (t != null) {\n\ttermEnum = (SegmentTermEnum)reader.terms(t);\n      } else\n\ttermEnum = (SegmentTermEnum)reader.terms();\n\n      SegmentMergeInfo smi = new SegmentMergeInfo(starts[i], termEnum, reader);\n      if (t == null ? smi.next() : termEnum.term() != null)\n\tqueue.put(smi);\t\t\t\t  // initialize queue\n      else\n\tsmi.close();\n    }\n\n    if (t != null && queue.size() > 0) {\n      SegmentMergeInfo top = (SegmentMergeInfo)queue.top();\n      term = top.termEnum.term();\n      docFreq = top.termEnum.docFreq();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ad07cf326135fbb108f766a0798c8ee00b17dcb","date":1077215339,"type":5,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiTermEnum[MultiReader]#MultiTermEnum(IndexReader[],int[],Term).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentsTermEnum[SegmentsReader]#SegmentsTermEnum(SegmentReader[],int[],Term).mjava","sourceNew":"  public MultiTermEnum(IndexReader[] readers, int[] starts, Term t)\n    throws IOException {\n    queue = new SegmentMergeQueue(readers.length);\n    for (int i = 0; i < readers.length; i++) {\n      IndexReader reader = readers[i];\n      SegmentTermEnum termEnum;\n\n      if (t != null) {\n\ttermEnum = (SegmentTermEnum)reader.terms(t);\n      } else\n\ttermEnum = (SegmentTermEnum)reader.terms();\n\n      SegmentMergeInfo smi = new SegmentMergeInfo(starts[i], termEnum, reader);\n      if (t == null ? smi.next() : termEnum.term() != null)\n\tqueue.put(smi);\t\t\t\t  // initialize queue\n      else\n\tsmi.close();\n    }\n\n    if (t != null && queue.size() > 0) {\n      next();\n    }\n  }\n\n","sourceOld":"  SegmentsTermEnum(SegmentReader[] readers, int[] starts, Term t)\n       throws IOException {\n    queue = new SegmentMergeQueue(readers.length);\n    for (int i = 0; i < readers.length; i++) {\n      SegmentReader reader = readers[i];\n      SegmentTermEnum termEnum;\n\n      if (t != null) {\n\ttermEnum = (SegmentTermEnum)reader.terms(t);\n      } else\n\ttermEnum = (SegmentTermEnum)reader.terms();\n\n      SegmentMergeInfo smi = new SegmentMergeInfo(starts[i], termEnum, reader);\n      if (t == null ? smi.next() : termEnum.term() != null)\n\tqueue.put(smi);\t\t\t\t  // initialize queue\n      else\n\tsmi.close();\n    }\n\n    if (t != null && queue.size() > 0) {\n      next();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1c246c4425fb94d9e4f103425198816f560558fd":["7087f8343d1904252decbbea451a5324aaf83f00"],"9ad07cf326135fbb108f766a0798c8ee00b17dcb":["1c246c4425fb94d9e4f103425198816f560558fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ad07cf326135fbb108f766a0798c8ee00b17dcb"],"7087f8343d1904252decbbea451a5324aaf83f00":["6473e45cde7e2f73ee961148e3272fb52d93a25e"],"6473e45cde7e2f73ee961148e3272fb52d93a25e":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"]},"commit2Childs":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["6473e45cde7e2f73ee961148e3272fb52d93a25e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"1c246c4425fb94d9e4f103425198816f560558fd":["9ad07cf326135fbb108f766a0798c8ee00b17dcb"],"9ad07cf326135fbb108f766a0798c8ee00b17dcb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7087f8343d1904252decbbea451a5324aaf83f00":["1c246c4425fb94d9e4f103425198816f560558fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6473e45cde7e2f73ee961148e3272fb52d93a25e":["7087f8343d1904252decbbea451a5324aaf83f00"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}