{"path":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesDistrib#assertDocIdsAndValuesInResults(String,SolrDocumentList,List[Integer],List[Float]).mjava","commits":[{"id":"415bbbe7da8065dd3c477bdc3c703c6425622998","date":1485393793,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesDistrib#assertDocIdsAndValuesInResults(String,SolrDocumentList,List[Integer],List[Float]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a result list sorted by \"id\", asserts that the \"[docid] and \"inplace_updatable_float\" values \n   * for each document match in order.\n   *\n   * @param msgPre used as a prefix for assertion messages\n   * @param results the sorted results of some query, such that all matches are included (ie: rows = numFound)\n   * @param luceneDocids a list of \"[docid]\" values to be tested against each doc in results (in order)\n   * @param valuesList a list of \"inplace_updatable_float\" values to be tested against each doc in results (in order)\n   */\n  private void assertDocIdsAndValuesInResults(final String msgPre,\n                                              final SolrDocumentList results,\n                                              final List<Integer> luceneDocids,\n                                              final List<Float> valuesList) {\n\n    assert luceneDocids.size() == valuesList.size();\n    assertEquals(msgPre + \": rows param wasn't big enough, we need to compare all results matching the query\",\n                 results.getNumFound(), results.size());\n    assertEquals(msgPre + \": didn't get a result for every known docid\",\n                 luceneDocids.size(), results.size());\n    \n    for (SolrDocument doc : results) {\n      final int id = Integer.parseInt(doc.get(\"id\").toString());\n      final Object val = doc.get(\"inplace_updatable_float\");\n      final Object docid = doc.get(\"[docid]\");\n      assertEquals(msgPre + \" wrong val for \" + doc.toString(), valuesList.get(id), val);\n      assertEquals(msgPre + \" wrong [docid] for \" + doc.toString(), luceneDocids.get(id), docid);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesDistrib#assertDocIdsAndValuesInResults(String,SolrDocumentList,List[Integer],List[Float]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a result list sorted by \"id\", asserts that the \"[docid] and \"inplace_updatable_float\" values \n   * for each document match in order.\n   *\n   * @param msgPre used as a prefix for assertion messages\n   * @param results the sorted results of some query, such that all matches are included (ie: rows = numFound)\n   * @param luceneDocids a list of \"[docid]\" values to be tested against each doc in results (in order)\n   * @param valuesList a list of \"inplace_updatable_float\" values to be tested against each doc in results (in order)\n   */\n  private void assertDocIdsAndValuesInResults(final String msgPre,\n                                              final SolrDocumentList results,\n                                              final List<Integer> luceneDocids,\n                                              final List<Float> valuesList) {\n\n    assert luceneDocids.size() == valuesList.size();\n    assertEquals(msgPre + \": rows param wasn't big enough, we need to compare all results matching the query\",\n                 results.getNumFound(), results.size());\n    assertEquals(msgPre + \": didn't get a result for every known docid\",\n                 luceneDocids.size(), results.size());\n    \n    for (SolrDocument doc : results) {\n      final int id = Integer.parseInt(doc.get(\"id\").toString());\n      final Object val = doc.get(\"inplace_updatable_float\");\n      final Object docid = doc.get(\"[docid]\");\n      assertEquals(msgPre + \" wrong val for \" + doc.toString(), valuesList.get(id), val);\n      assertEquals(msgPre + \" wrong [docid] for \" + doc.toString(), luceneDocids.get(id), docid);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c14208216474e190dcec6327766fd749b8aa965","date":1563380115,"type":5,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesDistrib#assertDocIdsAndValuesInResults(String,SolrDocumentList,List[Integer],String,List[Number]).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesDistrib#assertDocIdsAndValuesInResults(String,SolrDocumentList,List[Integer],List[Float]).mjava","sourceNew":"  /**\n   * Given a result list sorted by \"id\", asserts that the \"[docid] and \"inplace_updatable_float\" values \n   * for each document match in order.\n   *\n   * @param msgPre used as a prefix for assertion messages\n   * @param results the sorted results of some query, such that all matches are included (ie: rows = numFound)\n   * @param luceneDocids a list of \"[docid]\" values to be tested against each doc in results (in order)\n   * @param fieldName used to get value from the doc to validate with valuesList\n   * @param valuesList a list of given fieldName values to be tested against each doc in results (in order)\n   */\n  private void assertDocIdsAndValuesInResults(final String msgPre,\n                                              final SolrDocumentList results,\n                                              final List<Integer> luceneDocids,\n                                              final String fieldName,\n                                              final List<Number> valuesList) {\n\n    assert luceneDocids.size() == valuesList.size();\n    assertEquals(msgPre + \": rows param wasn't big enough, we need to compare all results matching the query\",\n                 results.getNumFound(), results.size());\n    assertEquals(msgPre + \": didn't get a result for every known docid\",\n                 luceneDocids.size(), results.size());\n    \n    for (SolrDocument doc : results) {\n      final int id = Integer.parseInt(doc.get(\"id\").toString());\n      final Object val = doc.get(fieldName);\n      final Object docid = doc.get(\"[docid]\");\n      assertEquals(msgPre + \" wrong val for \" + doc.toString(), valuesList.get(id), val);\n      assertEquals(msgPre + \" wrong [docid] for \" + doc.toString(), luceneDocids.get(id), docid);\n    }\n  }\n\n","sourceOld":"  /**\n   * Given a result list sorted by \"id\", asserts that the \"[docid] and \"inplace_updatable_float\" values \n   * for each document match in order.\n   *\n   * @param msgPre used as a prefix for assertion messages\n   * @param results the sorted results of some query, such that all matches are included (ie: rows = numFound)\n   * @param luceneDocids a list of \"[docid]\" values to be tested against each doc in results (in order)\n   * @param valuesList a list of \"inplace_updatable_float\" values to be tested against each doc in results (in order)\n   */\n  private void assertDocIdsAndValuesInResults(final String msgPre,\n                                              final SolrDocumentList results,\n                                              final List<Integer> luceneDocids,\n                                              final List<Float> valuesList) {\n\n    assert luceneDocids.size() == valuesList.size();\n    assertEquals(msgPre + \": rows param wasn't big enough, we need to compare all results matching the query\",\n                 results.getNumFound(), results.size());\n    assertEquals(msgPre + \": didn't get a result for every known docid\",\n                 luceneDocids.size(), results.size());\n    \n    for (SolrDocument doc : results) {\n      final int id = Integer.parseInt(doc.get(\"id\").toString());\n      final Object val = doc.get(\"inplace_updatable_float\");\n      final Object docid = doc.get(\"[docid]\");\n      assertEquals(msgPre + \" wrong val for \" + doc.toString(), valuesList.get(id), val);\n      assertEquals(msgPre + \" wrong [docid] for \" + doc.toString(), luceneDocids.get(id), docid);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","415bbbe7da8065dd3c477bdc3c703c6425622998"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9c14208216474e190dcec6327766fd749b8aa965":["415bbbe7da8065dd3c477bdc3c703c6425622998"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9c14208216474e190dcec6327766fd749b8aa965"]},"commit2Childs":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["598b5d23aa7c9732bf473c21a9cd309c44599394","9c14208216474e190dcec6327766fd749b8aa965"],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["415bbbe7da8065dd3c477bdc3c703c6425622998","598b5d23aa7c9732bf473c21a9cd309c44599394"],"9c14208216474e190dcec6327766fd749b8aa965":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}