{"path":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#addProhibitedScorers(Scorer).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#addProhibitedScorers(Scorer).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#addProhibitedScorers(Scorer).mjava","sourceNew":"  /** Returns the scorer to be used for match counting and score summing.\n   * Uses the given required scorer and the prohibitedScorers.\n   * @param requiredCountingSumScorer A required scorer already built.\n   */\n  private Scorer addProhibitedScorers(Scorer requiredCountingSumScorer) throws IOException\n  {\n    return (prohibitedScorers.size() == 0)\n          ? requiredCountingSumScorer // no prohibited\n          : new ReqExclScorer(requiredCountingSumScorer,\n                              ((prohibitedScorers.size() == 1)\n                                ? prohibitedScorers.get(0)\n                                : new DisjunctionSumScorer(prohibitedScorers)));\n  }\n\n","sourceOld":"  /** Returns the scorer to be used for match counting and score summing.\n   * Uses the given required scorer and the prohibitedScorers.\n   * @param requiredCountingSumScorer A required scorer already built.\n   */\n  private Scorer addProhibitedScorers(Scorer requiredCountingSumScorer) throws IOException\n  {\n    return (prohibitedScorers.size() == 0)\n          ? requiredCountingSumScorer // no prohibited\n          : new ReqExclScorer(requiredCountingSumScorer,\n                              ((prohibitedScorers.size() == 1)\n                                ? prohibitedScorers.get(0)\n                                : new DisjunctionSumScorer(prohibitedScorers)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5e679b9c5f68f1f331de920ae8366af75b44060","date":1295555804,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#addProhibitedScorers(Scorer).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#addProhibitedScorers(Scorer).mjava","sourceNew":"  /** Returns the scorer to be used for match counting and score summing.\n   * Uses the given required scorer and the prohibitedScorers.\n   * @param requiredCountingSumScorer A required scorer already built.\n   */\n  private Scorer addProhibitedScorers(Scorer requiredCountingSumScorer) throws IOException\n  {\n    return (prohibitedScorers.size() == 0)\n          ? requiredCountingSumScorer // no prohibited\n          : new ReqExclScorer(requiredCountingSumScorer,\n                              ((prohibitedScorers.size() == 1)\n                                ? prohibitedScorers.get(0)\n                                : new DisjunctionSumScorer(weight, prohibitedScorers)));\n  }\n\n","sourceOld":"  /** Returns the scorer to be used for match counting and score summing.\n   * Uses the given required scorer and the prohibitedScorers.\n   * @param requiredCountingSumScorer A required scorer already built.\n   */\n  private Scorer addProhibitedScorers(Scorer requiredCountingSumScorer) throws IOException\n  {\n    return (prohibitedScorers.size() == 0)\n          ? requiredCountingSumScorer // no prohibited\n          : new ReqExclScorer(requiredCountingSumScorer,\n                              ((prohibitedScorers.size() == 1)\n                                ? prohibitedScorers.get(0)\n                                : new DisjunctionSumScorer(prohibitedScorers)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#addProhibitedScorers(Scorer).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#addProhibitedScorers(Scorer).mjava","sourceNew":"  /** Returns the scorer to be used for match counting and score summing.\n   * Uses the given required scorer and the prohibitedScorers.\n   * @param requiredCountingSumScorer A required scorer already built.\n   */\n  private Scorer addProhibitedScorers(Scorer requiredCountingSumScorer) throws IOException\n  {\n    return (prohibitedScorers.size() == 0)\n          ? requiredCountingSumScorer // no prohibited\n          : new ReqExclScorer(requiredCountingSumScorer,\n                              ((prohibitedScorers.size() == 1)\n                                ? prohibitedScorers.get(0)\n                                : new DisjunctionSumScorer(weight, prohibitedScorers)));\n  }\n\n","sourceOld":"  /** Returns the scorer to be used for match counting and score summing.\n   * Uses the given required scorer and the prohibitedScorers.\n   * @param requiredCountingSumScorer A required scorer already built.\n   */\n  private Scorer addProhibitedScorers(Scorer requiredCountingSumScorer) throws IOException\n  {\n    return (prohibitedScorers.size() == 0)\n          ? requiredCountingSumScorer // no prohibited\n          : new ReqExclScorer(requiredCountingSumScorer,\n                              ((prohibitedScorers.size() == 1)\n                                ? prohibitedScorers.get(0)\n                                : new DisjunctionSumScorer(prohibitedScorers)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#addProhibitedScorers(Scorer).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#addProhibitedScorers(Scorer).mjava","sourceNew":"  /** Returns the scorer to be used for match counting and score summing.\n   * Uses the given required scorer and the prohibitedScorers.\n   * @param requiredCountingSumScorer A required scorer already built.\n   */\n  private Scorer addProhibitedScorers(Scorer requiredCountingSumScorer) throws IOException\n  {\n    return (prohibitedScorers.size() == 0)\n          ? requiredCountingSumScorer // no prohibited\n          : new ReqExclScorer(requiredCountingSumScorer,\n                              ((prohibitedScorers.size() == 1)\n                                ? prohibitedScorers.get(0)\n                                : new DisjunctionSumScorer(weight, prohibitedScorers)));\n  }\n\n","sourceOld":"  /** Returns the scorer to be used for match counting and score summing.\n   * Uses the given required scorer and the prohibitedScorers.\n   * @param requiredCountingSumScorer A required scorer already built.\n   */\n  private Scorer addProhibitedScorers(Scorer requiredCountingSumScorer) throws IOException\n  {\n    return (prohibitedScorers.size() == 0)\n          ? requiredCountingSumScorer // no prohibited\n          : new ReqExclScorer(requiredCountingSumScorer,\n                              ((prohibitedScorers.size() == 1)\n                                ? prohibitedScorers.get(0)\n                                : new DisjunctionSumScorer(prohibitedScorers)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#addProhibitedScorers(Scorer).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#addProhibitedScorers(Scorer).mjava","sourceNew":"  /** Returns the scorer to be used for match counting and score summing.\n   * Uses the given required scorer and the prohibitedScorers.\n   * @param requiredCountingSumScorer A required scorer already built.\n   */\n  private Scorer addProhibitedScorers(Scorer requiredCountingSumScorer) throws IOException\n  {\n    return (prohibitedScorers.size() == 0)\n          ? requiredCountingSumScorer // no prohibited\n          : new ReqExclScorer(requiredCountingSumScorer,\n                              ((prohibitedScorers.size() == 1)\n                                ? prohibitedScorers.get(0)\n                                : new DisjunctionSumScorer(weight, prohibitedScorers)));\n  }\n\n","sourceOld":"  /** Returns the scorer to be used for match counting and score summing.\n   * Uses the given required scorer and the prohibitedScorers.\n   * @param requiredCountingSumScorer A required scorer already built.\n   */\n  private Scorer addProhibitedScorers(Scorer requiredCountingSumScorer) throws IOException\n  {\n    return (prohibitedScorers.size() == 0)\n          ? requiredCountingSumScorer // no prohibited\n          : new ReqExclScorer(requiredCountingSumScorer,\n                              ((prohibitedScorers.size() == 1)\n                                ? prohibitedScorers.get(0)\n                                : new DisjunctionSumScorer(weight, prohibitedScorers)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e5e679b9c5f68f1f331de920ae8366af75b44060"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9454a6510e2db155fb01faa5c049b06ece95fab9","e5e679b9c5f68f1f331de920ae8366af75b44060"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e5e679b9c5f68f1f331de920ae8366af75b44060":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["9454a6510e2db155fb01faa5c049b06ece95fab9","e5e679b9c5f68f1f331de920ae8366af75b44060"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e5e679b9c5f68f1f331de920ae8366af75b44060":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["29ef99d61cda9641b6250bf9567329a6e65f901d","e5e679b9c5f68f1f331de920ae8366af75b44060","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}