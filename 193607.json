{"path":"lucene/sandbox/src/java/org/apache/lucene/search/DocValuesRangeQuery#createWeight(IndexSearcher,boolean).mjava","commits":[{"id":"9fb0efe75e5c6021561f115dfe334b74786364ba","date":1434366074,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/DocValuesRangeQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocValuesRangeQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    if (lowerVal == null && upperVal == null) {\n      throw new IllegalStateException(\"Both min and max values cannot be null, call rewrite first\");\n    }\n    return new RandomAccessWeight(DocValuesRangeQuery.this) {\n      \n      @Override\n      protected Bits getMatchingDocs(LeafReaderContext context) throws IOException {\n        if (lowerVal instanceof Long || upperVal instanceof Long) {\n\n          final SortedNumericDocValues values = DocValues.getSortedNumeric(context.reader(), field);\n\n          final long min;\n          if (lowerVal == null) {\n            min = Long.MIN_VALUE;\n          } else if (includeLower) {\n            min = (long) lowerVal;\n          } else {\n            min = 1 + (long) lowerVal;\n          }\n\n          final long max;\n          if (upperVal == null) {\n            max = Long.MAX_VALUE;\n          } else if (includeUpper) {\n            max = (long) upperVal;\n          } else {\n            max = -1 + (long) upperVal;\n          }\n\n          if (min > max) {\n            return null;\n          }\n\n          return new Bits() {\n\n            @Override\n            public boolean get(int doc) {\n              values.setDocument(doc);\n              final int count = values.count();\n              for (int i = 0; i < count; ++i) {\n                final long value = values.valueAt(i);\n                if (value >= min && value <= max) {\n                  return true;\n                }\n              }\n              return false;\n            }\n\n            @Override\n            public int length() {\n              return context.reader().maxDoc();\n            }\n\n          };\n\n        } else if (lowerVal instanceof BytesRef || upperVal instanceof BytesRef) {\n\n          final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n\n          final long minOrd;\n          if (lowerVal == null) {\n            minOrd = 0;\n          } else {\n            final long ord = values.lookupTerm((BytesRef) lowerVal);\n            if (ord < 0) {\n              minOrd = -1 - ord;\n            } else if (includeLower) {\n              minOrd = ord;\n            } else {\n              minOrd = ord + 1;\n            }\n          }\n\n          final long maxOrd;\n          if (upperVal == null) {\n            maxOrd = values.getValueCount() - 1;\n          } else {\n            final long ord = values.lookupTerm((BytesRef) upperVal);\n            if (ord < 0) {\n              maxOrd = -2 - ord;\n            } else if (includeUpper) {\n              maxOrd = ord;\n            } else {\n              maxOrd = ord - 1;\n            }\n          }\n\n          if (minOrd > maxOrd) {\n            return null;\n          }\n\n          return new Bits() {\n\n            @Override\n            public boolean get(int doc) {\n              values.setDocument(doc);\n              for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n                if (ord >= minOrd && ord <= maxOrd) {\n                  return true;\n                }\n              }\n              return false;\n            }\n\n            @Override\n            public int length() {\n              return context.reader().maxDoc();\n            }\n\n          };\n\n        } else {\n          throw new AssertionError();\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    if (lowerVal == null && upperVal == null) {\n      throw new IllegalStateException(\"Both min and max values cannot be null, call rewrite first\");\n    }\n    return new RandomAccessWeight(DocValuesRangeQuery.this) {\n      \n      @Override\n      protected Bits getMatchingDocs(LeafReaderContext context) throws IOException {\n        if (lowerVal instanceof Long || upperVal instanceof Long) {\n\n          final SortedNumericDocValues values = DocValues.getSortedNumeric(context.reader(), field);\n\n          final long min;\n          if (lowerVal == null) {\n            min = Long.MIN_VALUE;\n          } else if (includeLower) {\n            min = (long) lowerVal;\n          } else {\n            min = 1 + (long) lowerVal;\n          }\n\n          final long max;\n          if (upperVal == null) {\n            max = Long.MAX_VALUE;\n          } else if (includeUpper) {\n            max = (long) upperVal;\n          } else {\n            max = -1 + (long) upperVal;\n          }\n\n          if (min > max) {\n            return null;\n          }\n\n          return new Bits() {\n\n            @Override\n            public boolean get(int doc) {\n              values.setDocument(doc);\n              final int count = values.count();\n              for (int i = 0; i < count; ++i) {\n                final long value = values.valueAt(i);\n                if (value >= min && value <= max) {\n                  return true;\n                }\n              }\n              return false;\n            }\n\n            @Override\n            public int length() {\n              return context.reader().maxDoc();\n            }\n\n          };\n\n        } else if (lowerVal instanceof BytesRef || upperVal instanceof BytesRef) {\n\n          final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n\n          final long minOrd;\n          if (lowerVal == null) {\n            minOrd = 0;\n          } else {\n            final long ord = values.lookupTerm((BytesRef) lowerVal);\n            if (ord < 0) {\n              minOrd = -1 - ord;\n            } else if (includeLower) {\n              minOrd = ord;\n            } else {\n              minOrd = ord + 1;\n            }\n          }\n\n          final long maxOrd;\n          if (upperVal == null) {\n            maxOrd = values.getValueCount() - 1;\n          } else {\n            final long ord = values.lookupTerm((BytesRef) upperVal);\n            if (ord < 0) {\n              maxOrd = -2 - ord;\n            } else if (includeUpper) {\n              maxOrd = ord;\n            } else {\n              maxOrd = ord - 1;\n            }\n          }\n\n          if (minOrd > maxOrd) {\n            return null;\n          }\n\n          return new Bits() {\n\n            @Override\n            public boolean get(int doc) {\n              values.setDocument(doc);\n              for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n                if (ord >= minOrd && ord <= maxOrd) {\n                  return true;\n                }\n              }\n              return false;\n            }\n\n            @Override\n            public int length() {\n              return context.reader().maxDoc();\n            }\n\n          };\n\n        } else {\n          throw new AssertionError();\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db2dc9b7c664daeaf09a17ed2aee2d45d7dfdad8","date":1458565183,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/DocValuesRangeQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/DocValuesRangeQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    if (lowerVal == null && upperVal == null) {\n      throw new IllegalStateException(\"Both min and max values cannot be null, call rewrite first\");\n    }\n    return new RandomAccessWeight(DocValuesRangeQuery.this) {\n      \n      @Override\n      protected Bits getMatchingDocs(LeafReaderContext context) throws IOException {\n        if (lowerVal instanceof Long || upperVal instanceof Long) {\n\n          final SortedNumericDocValues values = DocValues.getSortedNumeric(context.reader(), field);\n\n          final long min;\n          if (lowerVal == null) {\n            min = Long.MIN_VALUE;\n          } else if (includeLower) {\n            min = (long) lowerVal;\n          } else {\n            if ((long) lowerVal == Long.MAX_VALUE) {\n              return null;\n            }\n            min = 1 + (long) lowerVal;\n          }\n\n          final long max;\n          if (upperVal == null) {\n            max = Long.MAX_VALUE;\n          } else if (includeUpper) {\n            max = (long) upperVal;\n          } else {\n            if ((long) upperVal == Long.MIN_VALUE) {\n              return null;\n            }\n            max = -1 + (long) upperVal;\n          }\n\n          if (min > max) {\n            return null;\n          }\n\n          return new Bits() {\n\n            @Override\n            public boolean get(int doc) {\n              values.setDocument(doc);\n              final int count = values.count();\n              for (int i = 0; i < count; ++i) {\n                final long value = values.valueAt(i);\n                if (value >= min && value <= max) {\n                  return true;\n                }\n              }\n              return false;\n            }\n\n            @Override\n            public int length() {\n              return context.reader().maxDoc();\n            }\n\n          };\n\n        } else if (lowerVal instanceof BytesRef || upperVal instanceof BytesRef) {\n\n          final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n\n          final long minOrd;\n          if (lowerVal == null) {\n            minOrd = 0;\n          } else {\n            final long ord = values.lookupTerm((BytesRef) lowerVal);\n            if (ord < 0) {\n              minOrd = -1 - ord;\n            } else if (includeLower) {\n              minOrd = ord;\n            } else {\n              minOrd = ord + 1;\n            }\n          }\n\n          final long maxOrd;\n          if (upperVal == null) {\n            maxOrd = values.getValueCount() - 1;\n          } else {\n            final long ord = values.lookupTerm((BytesRef) upperVal);\n            if (ord < 0) {\n              maxOrd = -2 - ord;\n            } else if (includeUpper) {\n              maxOrd = ord;\n            } else {\n              maxOrd = ord - 1;\n            }\n          }\n\n          if (minOrd > maxOrd) {\n            return null;\n          }\n\n          return new Bits() {\n\n            @Override\n            public boolean get(int doc) {\n              values.setDocument(doc);\n              for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n                if (ord >= minOrd && ord <= maxOrd) {\n                  return true;\n                }\n              }\n              return false;\n            }\n\n            @Override\n            public int length() {\n              return context.reader().maxDoc();\n            }\n\n          };\n\n        } else {\n          throw new AssertionError();\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    if (lowerVal == null && upperVal == null) {\n      throw new IllegalStateException(\"Both min and max values cannot be null, call rewrite first\");\n    }\n    return new RandomAccessWeight(DocValuesRangeQuery.this) {\n      \n      @Override\n      protected Bits getMatchingDocs(LeafReaderContext context) throws IOException {\n        if (lowerVal instanceof Long || upperVal instanceof Long) {\n\n          final SortedNumericDocValues values = DocValues.getSortedNumeric(context.reader(), field);\n\n          final long min;\n          if (lowerVal == null) {\n            min = Long.MIN_VALUE;\n          } else if (includeLower) {\n            min = (long) lowerVal;\n          } else {\n            min = 1 + (long) lowerVal;\n          }\n\n          final long max;\n          if (upperVal == null) {\n            max = Long.MAX_VALUE;\n          } else if (includeUpper) {\n            max = (long) upperVal;\n          } else {\n            max = -1 + (long) upperVal;\n          }\n\n          if (min > max) {\n            return null;\n          }\n\n          return new Bits() {\n\n            @Override\n            public boolean get(int doc) {\n              values.setDocument(doc);\n              final int count = values.count();\n              for (int i = 0; i < count; ++i) {\n                final long value = values.valueAt(i);\n                if (value >= min && value <= max) {\n                  return true;\n                }\n              }\n              return false;\n            }\n\n            @Override\n            public int length() {\n              return context.reader().maxDoc();\n            }\n\n          };\n\n        } else if (lowerVal instanceof BytesRef || upperVal instanceof BytesRef) {\n\n          final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n\n          final long minOrd;\n          if (lowerVal == null) {\n            minOrd = 0;\n          } else {\n            final long ord = values.lookupTerm((BytesRef) lowerVal);\n            if (ord < 0) {\n              minOrd = -1 - ord;\n            } else if (includeLower) {\n              minOrd = ord;\n            } else {\n              minOrd = ord + 1;\n            }\n          }\n\n          final long maxOrd;\n          if (upperVal == null) {\n            maxOrd = values.getValueCount() - 1;\n          } else {\n            final long ord = values.lookupTerm((BytesRef) upperVal);\n            if (ord < 0) {\n              maxOrd = -2 - ord;\n            } else if (includeUpper) {\n              maxOrd = ord;\n            } else {\n              maxOrd = ord - 1;\n            }\n          }\n\n          if (minOrd > maxOrd) {\n            return null;\n          }\n\n          return new Bits() {\n\n            @Override\n            public boolean get(int doc) {\n              values.setDocument(doc);\n              for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n                if (ord >= minOrd && ord <= maxOrd) {\n                  return true;\n                }\n              }\n              return false;\n            }\n\n            @Override\n            public int length() {\n              return context.reader().maxDoc();\n            }\n\n          };\n\n        } else {\n          throw new AssertionError();\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad0d09e969f4763b0df4230f8e3f74357872a4e4","date":1459188769,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/DocValuesRangeQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/DocValuesRangeQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    if (lowerVal == null && upperVal == null) {\n      throw new IllegalStateException(\"Both min and max values must not be null, call rewrite first\");\n    }\n    return new RandomAccessWeight(DocValuesRangeQuery.this) {\n      \n      @Override\n      protected Bits getMatchingDocs(LeafReaderContext context) throws IOException {\n        if (lowerVal instanceof Long || upperVal instanceof Long) {\n\n          final SortedNumericDocValues values = DocValues.getSortedNumeric(context.reader(), field);\n\n          final long min;\n          if (lowerVal == null) {\n            min = Long.MIN_VALUE;\n          } else if (includeLower) {\n            min = (long) lowerVal;\n          } else {\n            if ((long) lowerVal == Long.MAX_VALUE) {\n              return null;\n            }\n            min = 1 + (long) lowerVal;\n          }\n\n          final long max;\n          if (upperVal == null) {\n            max = Long.MAX_VALUE;\n          } else if (includeUpper) {\n            max = (long) upperVal;\n          } else {\n            if ((long) upperVal == Long.MIN_VALUE) {\n              return null;\n            }\n            max = -1 + (long) upperVal;\n          }\n\n          if (min > max) {\n            return null;\n          }\n\n          return new Bits() {\n\n            @Override\n            public boolean get(int doc) {\n              values.setDocument(doc);\n              final int count = values.count();\n              for (int i = 0; i < count; ++i) {\n                final long value = values.valueAt(i);\n                if (value >= min && value <= max) {\n                  return true;\n                }\n              }\n              return false;\n            }\n\n            @Override\n            public int length() {\n              return context.reader().maxDoc();\n            }\n\n          };\n\n        } else if (lowerVal instanceof BytesRef || upperVal instanceof BytesRef) {\n\n          final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n\n          final long minOrd;\n          if (lowerVal == null) {\n            minOrd = 0;\n          } else {\n            final long ord = values.lookupTerm((BytesRef) lowerVal);\n            if (ord < 0) {\n              minOrd = -1 - ord;\n            } else if (includeLower) {\n              minOrd = ord;\n            } else {\n              minOrd = ord + 1;\n            }\n          }\n\n          final long maxOrd;\n          if (upperVal == null) {\n            maxOrd = values.getValueCount() - 1;\n          } else {\n            final long ord = values.lookupTerm((BytesRef) upperVal);\n            if (ord < 0) {\n              maxOrd = -2 - ord;\n            } else if (includeUpper) {\n              maxOrd = ord;\n            } else {\n              maxOrd = ord - 1;\n            }\n          }\n\n          if (minOrd > maxOrd) {\n            return null;\n          }\n\n          return new Bits() {\n\n            @Override\n            public boolean get(int doc) {\n              values.setDocument(doc);\n              for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n                if (ord >= minOrd && ord <= maxOrd) {\n                  return true;\n                }\n              }\n              return false;\n            }\n\n            @Override\n            public int length() {\n              return context.reader().maxDoc();\n            }\n\n          };\n\n        } else {\n          throw new AssertionError();\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    if (lowerVal == null && upperVal == null) {\n      throw new IllegalStateException(\"Both min and max values cannot be null, call rewrite first\");\n    }\n    return new RandomAccessWeight(DocValuesRangeQuery.this) {\n      \n      @Override\n      protected Bits getMatchingDocs(LeafReaderContext context) throws IOException {\n        if (lowerVal instanceof Long || upperVal instanceof Long) {\n\n          final SortedNumericDocValues values = DocValues.getSortedNumeric(context.reader(), field);\n\n          final long min;\n          if (lowerVal == null) {\n            min = Long.MIN_VALUE;\n          } else if (includeLower) {\n            min = (long) lowerVal;\n          } else {\n            if ((long) lowerVal == Long.MAX_VALUE) {\n              return null;\n            }\n            min = 1 + (long) lowerVal;\n          }\n\n          final long max;\n          if (upperVal == null) {\n            max = Long.MAX_VALUE;\n          } else if (includeUpper) {\n            max = (long) upperVal;\n          } else {\n            if ((long) upperVal == Long.MIN_VALUE) {\n              return null;\n            }\n            max = -1 + (long) upperVal;\n          }\n\n          if (min > max) {\n            return null;\n          }\n\n          return new Bits() {\n\n            @Override\n            public boolean get(int doc) {\n              values.setDocument(doc);\n              final int count = values.count();\n              for (int i = 0; i < count; ++i) {\n                final long value = values.valueAt(i);\n                if (value >= min && value <= max) {\n                  return true;\n                }\n              }\n              return false;\n            }\n\n            @Override\n            public int length() {\n              return context.reader().maxDoc();\n            }\n\n          };\n\n        } else if (lowerVal instanceof BytesRef || upperVal instanceof BytesRef) {\n\n          final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n\n          final long minOrd;\n          if (lowerVal == null) {\n            minOrd = 0;\n          } else {\n            final long ord = values.lookupTerm((BytesRef) lowerVal);\n            if (ord < 0) {\n              minOrd = -1 - ord;\n            } else if (includeLower) {\n              minOrd = ord;\n            } else {\n              minOrd = ord + 1;\n            }\n          }\n\n          final long maxOrd;\n          if (upperVal == null) {\n            maxOrd = values.getValueCount() - 1;\n          } else {\n            final long ord = values.lookupTerm((BytesRef) upperVal);\n            if (ord < 0) {\n              maxOrd = -2 - ord;\n            } else if (includeUpper) {\n              maxOrd = ord;\n            } else {\n              maxOrd = ord - 1;\n            }\n          }\n\n          if (minOrd > maxOrd) {\n            return null;\n          }\n\n          return new Bits() {\n\n            @Override\n            public boolean get(int doc) {\n              values.setDocument(doc);\n              for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n                if (ord >= minOrd && ord <= maxOrd) {\n                  return true;\n                }\n              }\n              return false;\n            }\n\n            @Override\n            public int length() {\n              return context.reader().maxDoc();\n            }\n\n          };\n\n        } else {\n          throw new AssertionError();\n        }\n      }\n    };\n  }\n\n","bugFix":["484e80062d7ab2729bc82f0311d6a97dd913961a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/DocValuesRangeQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/DocValuesRangeQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    if (lowerVal == null && upperVal == null) {\n      throw new IllegalStateException(\"Both min and max values must not be null, call rewrite first\");\n    }\n    return new RandomAccessWeight(DocValuesRangeQuery.this, boost) {\n      \n      @Override\n      protected Bits getMatchingDocs(LeafReaderContext context) throws IOException {\n        if (lowerVal instanceof Long || upperVal instanceof Long) {\n\n          final SortedNumericDocValues values = DocValues.getSortedNumeric(context.reader(), field);\n\n          final long min;\n          if (lowerVal == null) {\n            min = Long.MIN_VALUE;\n          } else if (includeLower) {\n            min = (long) lowerVal;\n          } else {\n            if ((long) lowerVal == Long.MAX_VALUE) {\n              return null;\n            }\n            min = 1 + (long) lowerVal;\n          }\n\n          final long max;\n          if (upperVal == null) {\n            max = Long.MAX_VALUE;\n          } else if (includeUpper) {\n            max = (long) upperVal;\n          } else {\n            if ((long) upperVal == Long.MIN_VALUE) {\n              return null;\n            }\n            max = -1 + (long) upperVal;\n          }\n\n          if (min > max) {\n            return null;\n          }\n\n          return new Bits() {\n\n            @Override\n            public boolean get(int doc) {\n              values.setDocument(doc);\n              final int count = values.count();\n              for (int i = 0; i < count; ++i) {\n                final long value = values.valueAt(i);\n                if (value >= min && value <= max) {\n                  return true;\n                }\n              }\n              return false;\n            }\n\n            @Override\n            public int length() {\n              return context.reader().maxDoc();\n            }\n\n          };\n\n        } else if (lowerVal instanceof BytesRef || upperVal instanceof BytesRef) {\n\n          final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n\n          final long minOrd;\n          if (lowerVal == null) {\n            minOrd = 0;\n          } else {\n            final long ord = values.lookupTerm((BytesRef) lowerVal);\n            if (ord < 0) {\n              minOrd = -1 - ord;\n            } else if (includeLower) {\n              minOrd = ord;\n            } else {\n              minOrd = ord + 1;\n            }\n          }\n\n          final long maxOrd;\n          if (upperVal == null) {\n            maxOrd = values.getValueCount() - 1;\n          } else {\n            final long ord = values.lookupTerm((BytesRef) upperVal);\n            if (ord < 0) {\n              maxOrd = -2 - ord;\n            } else if (includeUpper) {\n              maxOrd = ord;\n            } else {\n              maxOrd = ord - 1;\n            }\n          }\n\n          if (minOrd > maxOrd) {\n            return null;\n          }\n\n          return new Bits() {\n\n            @Override\n            public boolean get(int doc) {\n              values.setDocument(doc);\n              for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n                if (ord >= minOrd && ord <= maxOrd) {\n                  return true;\n                }\n              }\n              return false;\n            }\n\n            @Override\n            public int length() {\n              return context.reader().maxDoc();\n            }\n\n          };\n\n        } else {\n          throw new AssertionError();\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    if (lowerVal == null && upperVal == null) {\n      throw new IllegalStateException(\"Both min and max values must not be null, call rewrite first\");\n    }\n    return new RandomAccessWeight(DocValuesRangeQuery.this) {\n      \n      @Override\n      protected Bits getMatchingDocs(LeafReaderContext context) throws IOException {\n        if (lowerVal instanceof Long || upperVal instanceof Long) {\n\n          final SortedNumericDocValues values = DocValues.getSortedNumeric(context.reader(), field);\n\n          final long min;\n          if (lowerVal == null) {\n            min = Long.MIN_VALUE;\n          } else if (includeLower) {\n            min = (long) lowerVal;\n          } else {\n            if ((long) lowerVal == Long.MAX_VALUE) {\n              return null;\n            }\n            min = 1 + (long) lowerVal;\n          }\n\n          final long max;\n          if (upperVal == null) {\n            max = Long.MAX_VALUE;\n          } else if (includeUpper) {\n            max = (long) upperVal;\n          } else {\n            if ((long) upperVal == Long.MIN_VALUE) {\n              return null;\n            }\n            max = -1 + (long) upperVal;\n          }\n\n          if (min > max) {\n            return null;\n          }\n\n          return new Bits() {\n\n            @Override\n            public boolean get(int doc) {\n              values.setDocument(doc);\n              final int count = values.count();\n              for (int i = 0; i < count; ++i) {\n                final long value = values.valueAt(i);\n                if (value >= min && value <= max) {\n                  return true;\n                }\n              }\n              return false;\n            }\n\n            @Override\n            public int length() {\n              return context.reader().maxDoc();\n            }\n\n          };\n\n        } else if (lowerVal instanceof BytesRef || upperVal instanceof BytesRef) {\n\n          final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n\n          final long minOrd;\n          if (lowerVal == null) {\n            minOrd = 0;\n          } else {\n            final long ord = values.lookupTerm((BytesRef) lowerVal);\n            if (ord < 0) {\n              minOrd = -1 - ord;\n            } else if (includeLower) {\n              minOrd = ord;\n            } else {\n              minOrd = ord + 1;\n            }\n          }\n\n          final long maxOrd;\n          if (upperVal == null) {\n            maxOrd = values.getValueCount() - 1;\n          } else {\n            final long ord = values.lookupTerm((BytesRef) upperVal);\n            if (ord < 0) {\n              maxOrd = -2 - ord;\n            } else if (includeUpper) {\n              maxOrd = ord;\n            } else {\n              maxOrd = ord - 1;\n            }\n          }\n\n          if (minOrd > maxOrd) {\n            return null;\n          }\n\n          return new Bits() {\n\n            @Override\n            public boolean get(int doc) {\n              values.setDocument(doc);\n              for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n                if (ord >= minOrd && ord <= maxOrd) {\n                  return true;\n                }\n              }\n              return false;\n            }\n\n            @Override\n            public int length() {\n              return context.reader().maxDoc();\n            }\n\n          };\n\n        } else {\n          throw new AssertionError();\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/DocValuesRangeQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    if (lowerVal == null && upperVal == null) {\n      throw new IllegalStateException(\"Both min and max values must not be null, call rewrite first\");\n    }\n    return new RandomAccessWeight(DocValuesRangeQuery.this) {\n      \n      @Override\n      protected Bits getMatchingDocs(LeafReaderContext context) throws IOException {\n        if (lowerVal instanceof Long || upperVal instanceof Long) {\n\n          final SortedNumericDocValues values = DocValues.getSortedNumeric(context.reader(), field);\n\n          final long min;\n          if (lowerVal == null) {\n            min = Long.MIN_VALUE;\n          } else if (includeLower) {\n            min = (long) lowerVal;\n          } else {\n            if ((long) lowerVal == Long.MAX_VALUE) {\n              return null;\n            }\n            min = 1 + (long) lowerVal;\n          }\n\n          final long max;\n          if (upperVal == null) {\n            max = Long.MAX_VALUE;\n          } else if (includeUpper) {\n            max = (long) upperVal;\n          } else {\n            if ((long) upperVal == Long.MIN_VALUE) {\n              return null;\n            }\n            max = -1 + (long) upperVal;\n          }\n\n          if (min > max) {\n            return null;\n          }\n\n          return new Bits() {\n\n            @Override\n            public boolean get(int doc) {\n              values.setDocument(doc);\n              final int count = values.count();\n              for (int i = 0; i < count; ++i) {\n                final long value = values.valueAt(i);\n                if (value >= min && value <= max) {\n                  return true;\n                }\n              }\n              return false;\n            }\n\n            @Override\n            public int length() {\n              return context.reader().maxDoc();\n            }\n\n          };\n\n        } else if (lowerVal instanceof BytesRef || upperVal instanceof BytesRef) {\n\n          final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n\n          final long minOrd;\n          if (lowerVal == null) {\n            minOrd = 0;\n          } else {\n            final long ord = values.lookupTerm((BytesRef) lowerVal);\n            if (ord < 0) {\n              minOrd = -1 - ord;\n            } else if (includeLower) {\n              minOrd = ord;\n            } else {\n              minOrd = ord + 1;\n            }\n          }\n\n          final long maxOrd;\n          if (upperVal == null) {\n            maxOrd = values.getValueCount() - 1;\n          } else {\n            final long ord = values.lookupTerm((BytesRef) upperVal);\n            if (ord < 0) {\n              maxOrd = -2 - ord;\n            } else if (includeUpper) {\n              maxOrd = ord;\n            } else {\n              maxOrd = ord - 1;\n            }\n          }\n\n          if (minOrd > maxOrd) {\n            return null;\n          }\n\n          return new Bits() {\n\n            @Override\n            public boolean get(int doc) {\n              values.setDocument(doc);\n              for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n                if (ord >= minOrd && ord <= maxOrd) {\n                  return true;\n                }\n              }\n              return false;\n            }\n\n            @Override\n            public int length() {\n              return context.reader().maxDoc();\n            }\n\n          };\n\n        } else {\n          throw new AssertionError();\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["db2dc9b7c664daeaf09a17ed2aee2d45d7dfdad8"],"9fb0efe75e5c6021561f115dfe334b74786364ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"db2dc9b7c664daeaf09a17ed2aee2d45d7dfdad8":["9fb0efe75e5c6021561f115dfe334b74786364ba"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["ad0d09e969f4763b0df4230f8e3f74357872a4e4","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fb0efe75e5c6021561f115dfe334b74786364ba"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9fb0efe75e5c6021561f115dfe334b74786364ba":["db2dc9b7c664daeaf09a17ed2aee2d45d7dfdad8"],"db2dc9b7c664daeaf09a17ed2aee2d45d7dfdad8":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}