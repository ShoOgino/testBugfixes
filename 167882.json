{"path":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/PrimaryNode#commit().mjava","commits":[{"id":"0d49a158012a8ff48f328a4558e4bfcffbaed16f","date":1453677440,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/PrimaryNode#commit().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void commit() throws IOException {\n    Map<String,String> commitData = new HashMap<>();\n    commitData.put(PRIMARY_GEN_KEY, Long.toString(primaryGen));\n    // TODO (opto): it's a bit wasteful that we put \"last refresh\" version here, not the actual version we are committing, because it means\n    // on xlog replay we are replaying more ops than necessary.\n    commitData.put(VERSION_KEY, Long.toString(copyState.version));\n    message(\"top: commit commitData=\" + commitData);\n    // nocommit this is now an NRT-visible change!  make test where nothing is indexing and confirm we don't do silly commit + refresh loop forever!\n    writer.setCommitData(commitData, false);\n    writer.commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["71e1a70f18d64b93db3ef618e606d6df5062f747"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1baa9aa50ea2e3bb6e5c03f150789720fbcedbc9","date":1453892412,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/PrimaryNode#commit().mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/PrimaryNode#commit().mjava","sourceNew":"  @Override\n  public void commit() throws IOException {\n    Map<String,String> commitData = new HashMap<>();\n    commitData.put(PRIMARY_GEN_KEY, Long.toString(primaryGen));\n    // TODO (opto): it's a bit wasteful that we put \"last refresh\" version here, not the actual version we are committing, because it means\n    // on xlog replay we are replaying more ops than necessary.\n    commitData.put(VERSION_KEY, Long.toString(copyState.version));\n    message(\"top: commit commitData=\" + commitData);\n    writer.setCommitData(commitData, false);\n    writer.commit();\n  }\n\n","sourceOld":"  @Override\n  public void commit() throws IOException {\n    Map<String,String> commitData = new HashMap<>();\n    commitData.put(PRIMARY_GEN_KEY, Long.toString(primaryGen));\n    // TODO (opto): it's a bit wasteful that we put \"last refresh\" version here, not the actual version we are committing, because it means\n    // on xlog replay we are replaying more ops than necessary.\n    commitData.put(VERSION_KEY, Long.toString(copyState.version));\n    message(\"top: commit commitData=\" + commitData);\n    // nocommit this is now an NRT-visible change!  make test where nothing is indexing and confirm we don't do silly commit + refresh loop forever!\n    writer.setCommitData(commitData, false);\n    writer.commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"68496c2200e559fb7802f7575427b7a482659afb","date":1455207618,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/PrimaryNode#commit().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void commit() throws IOException {\n    Map<String,String> commitData = new HashMap<>();\n    commitData.put(PRIMARY_GEN_KEY, Long.toString(primaryGen));\n    // TODO (opto): it's a bit wasteful that we put \"last refresh\" version here, not the actual version we are committing, because it means\n    // on xlog replay we are replaying more ops than necessary.\n    commitData.put(VERSION_KEY, Long.toString(copyState.version));\n    message(\"top: commit commitData=\" + commitData);\n    writer.setCommitData(commitData, false);\n    writer.commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"71e1a70f18d64b93db3ef618e606d6df5062f747","date":1466156390,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/PrimaryNode#commit().mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/PrimaryNode#commit().mjava","sourceNew":"  @Override\n  public void commit() throws IOException {\n    Map<String,String> commitData = new HashMap<>();\n    commitData.put(PRIMARY_GEN_KEY, Long.toString(primaryGen));\n    // TODO (opto): it's a bit wasteful that we put \"last refresh\" version here, not the actual version we are committing, because it means\n    // on xlog replay we are replaying more ops than necessary.\n    commitData.put(VERSION_KEY, Long.toString(copyState.version));\n    message(\"top: commit commitData=\" + commitData);\n    writer.setLiveCommitData(commitData.entrySet(), false);\n    writer.commit();\n  }\n\n","sourceOld":"  @Override\n  public void commit() throws IOException {\n    Map<String,String> commitData = new HashMap<>();\n    commitData.put(PRIMARY_GEN_KEY, Long.toString(primaryGen));\n    // TODO (opto): it's a bit wasteful that we put \"last refresh\" version here, not the actual version we are committing, because it means\n    // on xlog replay we are replaying more ops than necessary.\n    commitData.put(VERSION_KEY, Long.toString(copyState.version));\n    message(\"top: commit commitData=\" + commitData);\n    writer.setCommitData(commitData, false);\n    writer.commit();\n  }\n\n","bugFix":["0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/PrimaryNode#commit().mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/PrimaryNode#commit().mjava","sourceNew":"  @Override\n  public void commit() throws IOException {\n    Map<String,String> commitData = new HashMap<>();\n    commitData.put(PRIMARY_GEN_KEY, Long.toString(primaryGen));\n    // TODO (opto): it's a bit wasteful that we put \"last refresh\" version here, not the actual version we are committing, because it means\n    // on xlog replay we are replaying more ops than necessary.\n    commitData.put(VERSION_KEY, Long.toString(copyState.version));\n    message(\"top: commit commitData=\" + commitData);\n    writer.setLiveCommitData(commitData.entrySet(), false);\n    writer.commit();\n  }\n\n","sourceOld":"  @Override\n  public void commit() throws IOException {\n    Map<String,String> commitData = new HashMap<>();\n    commitData.put(PRIMARY_GEN_KEY, Long.toString(primaryGen));\n    // TODO (opto): it's a bit wasteful that we put \"last refresh\" version here, not the actual version we are committing, because it means\n    // on xlog replay we are replaying more ops than necessary.\n    commitData.put(VERSION_KEY, Long.toString(copyState.version));\n    message(\"top: commit commitData=\" + commitData);\n    writer.setCommitData(commitData, false);\n    writer.commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"71e1a70f18d64b93db3ef618e606d6df5062f747":["68496c2200e559fb7802f7575427b7a482659afb"],"1baa9aa50ea2e3bb6e5c03f150789720fbcedbc9":["0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68496c2200e559fb7802f7575427b7a482659afb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1baa9aa50ea2e3bb6e5c03f150789720fbcedbc9"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["68496c2200e559fb7802f7575427b7a482659afb","71e1a70f18d64b93db3ef618e606d6df5062f747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71e1a70f18d64b93db3ef618e606d6df5062f747"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"71e1a70f18d64b93db3ef618e606d6df5062f747":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1baa9aa50ea2e3bb6e5c03f150789720fbcedbc9":["68496c2200e559fb7802f7575427b7a482659afb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["68496c2200e559fb7802f7575427b7a482659afb","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"68496c2200e559fb7802f7575427b7a482659afb":["71e1a70f18d64b93db3ef618e606d6df5062f747","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["1baa9aa50ea2e3bb6e5c03f150789720fbcedbc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}