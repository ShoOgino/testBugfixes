{"path":"lucene/core/src/java/org/apache/lucene/index/BytesDVWriter#flush(SegmentWriteState,SimpleDVConsumer).mjava","commits":[{"id":"127981e5a1e1d1425c5fdc816ceacf753ca70ee4","date":1354205321,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BytesDVWriter#flush(SegmentWriteState,SimpleDVConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BytesDVWriter#flush(FieldInfo,SegmentWriteState,BinaryDocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, SimpleDVConsumer dvConsumer) throws IOException {\n    BinaryDocValuesConsumer consumer = dvConsumer.addBinaryField(fieldInfo,\n                                                                 fixedLength >= 0,\n                                                                 maxLength);\n    final int bufferedDocCount = addedValues;\n    BytesRef value = new BytesRef();\n    for(int docID=0;docID<bufferedDocCount;docID++) {\n      bytesRefArray.get(value, docID);\n      consumer.add(value);\n    }\n    final int maxDoc = state.segmentInfo.getDocCount();\n    value.length = 0;\n    for(int docID=bufferedDocCount;docID<maxDoc;docID++) {\n      consumer.add(value);\n    }\n    consumer.finish();\n    reset();\n    //System.out.println(\"FLUSH\");\n  }\n\n","sourceOld":"  public void flush(FieldInfo fieldInfo, SegmentWriteState state, BinaryDocValuesConsumer consumer) throws IOException {\n    final int bufferedDocCount = addedValues;\n    BytesRef value = new BytesRef();\n    for(int docID=0;docID<bufferedDocCount;docID++) {\n      bytesRefArray.get(value, docID);\n      consumer.add(value);\n    }\n    final int maxDoc = state.segmentInfo.getDocCount();\n    value.length = 0;\n    for(int docID=bufferedDocCount;docID<maxDoc;docID++) {\n      consumer.add(value);\n    }\n    consumer.finish();\n    reset();\n    //System.out.println(\"FLUSH\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"746e3645169db50c8f53252b30d6bc9ac21dea7c","date":1357597773,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BytesDVWriter#flush(SegmentWriteState,SimpleDVConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BytesDVWriter#flush(SegmentWriteState,SimpleDVConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, SimpleDVConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n\n    dvConsumer.addBinaryField(fieldInfo,\n                              new Iterable<BytesRef>() {\n\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                   return new Iterator<BytesRef>() {\n                                     BytesRef value = new BytesRef();\n                                     int upto;\n\n                                     @Override\n                                     public boolean hasNext() {\n                                       return upto < maxDoc;\n                                     }\n\n                                     @Override\n                                     public void remove() {\n                                       throw new UnsupportedOperationException();\n                                     }\n\n                                     @Override\n                                     public BytesRef next() {\n                                       // nocommit make\n                                       // mutable Number:\n                                       if (upto < bytesRefArray.size()) {\n                                         bytesRefArray.get(value, upto);\n                                       } else {\n                                         value.length = 0;\n                                       }\n                                       upto++;\n                                       return value;\n                                     }\n                                   };\n                                 }\n                               });\n\n    reset();\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, SimpleDVConsumer dvConsumer) throws IOException {\n    BinaryDocValuesConsumer consumer = dvConsumer.addBinaryField(fieldInfo,\n                                                                 fixedLength >= 0,\n                                                                 maxLength);\n    final int bufferedDocCount = addedValues;\n    BytesRef value = new BytesRef();\n    for(int docID=0;docID<bufferedDocCount;docID++) {\n      bytesRefArray.get(value, docID);\n      consumer.add(value);\n    }\n    final int maxDoc = state.segmentInfo.getDocCount();\n    value.length = 0;\n    for(int docID=bufferedDocCount;docID<maxDoc;docID++) {\n      consumer.add(value);\n    }\n    consumer.finish();\n    reset();\n    //System.out.println(\"FLUSH\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","date":1358521790,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BytesDVWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BytesDVWriter#flush(SegmentWriteState,SimpleDVConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n\n    dvConsumer.addBinaryField(fieldInfo,\n                              new Iterable<BytesRef>() {\n\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                   return new Iterator<BytesRef>() {\n                                     BytesRef value = new BytesRef();\n                                     int upto;\n\n                                     @Override\n                                     public boolean hasNext() {\n                                       return upto < maxDoc;\n                                     }\n\n                                     @Override\n                                     public void remove() {\n                                       throw new UnsupportedOperationException();\n                                     }\n\n                                     @Override\n                                     public BytesRef next() {\n                                       // nocommit make\n                                       // mutable Number:\n                                       if (upto < bytesRefArray.size()) {\n                                         bytesRefArray.get(value, upto);\n                                       } else {\n                                         value.length = 0;\n                                       }\n                                       upto++;\n                                       return value;\n                                     }\n                                   };\n                                 }\n                               });\n\n    reset();\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, SimpleDVConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n\n    dvConsumer.addBinaryField(fieldInfo,\n                              new Iterable<BytesRef>() {\n\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                   return new Iterator<BytesRef>() {\n                                     BytesRef value = new BytesRef();\n                                     int upto;\n\n                                     @Override\n                                     public boolean hasNext() {\n                                       return upto < maxDoc;\n                                     }\n\n                                     @Override\n                                     public void remove() {\n                                       throw new UnsupportedOperationException();\n                                     }\n\n                                     @Override\n                                     public BytesRef next() {\n                                       // nocommit make\n                                       // mutable Number:\n                                       if (upto < bytesRefArray.size()) {\n                                         bytesRefArray.get(value, upto);\n                                       } else {\n                                         value.length = 0;\n                                       }\n                                       upto++;\n                                       return value;\n                                     }\n                                   };\n                                 }\n                               });\n\n    reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["746e3645169db50c8f53252b30d6bc9ac21dea7c"],"746e3645169db50c8f53252b30d6bc9ac21dea7c":["127981e5a1e1d1425c5fdc816ceacf753ca70ee4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"127981e5a1e1d1425c5fdc816ceacf753ca70ee4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":[],"746e3645169db50c8f53252b30d6bc9ac21dea7c":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"127981e5a1e1d1425c5fdc816ceacf753ca70ee4":["746e3645169db50c8f53252b30d6bc9ac21dea7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["127981e5a1e1d1425c5fdc816ceacf753ca70ee4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}