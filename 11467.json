{"path":"lucene/core/src/java/org/apache/lucene/util/WAH8DocIdSet.Iterator#binarySearch(int).mjava","commits":[{"id":"794214a4691ccb0a156a9ea0dfd8663ab9f05bb4","date":1373484264,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/WAH8DocIdSet.Iterator#binarySearch(int).mjava","pathOld":"/dev/null","sourceNew":"    int binarySearch(int targetWordNum) {\n      int lo = 0, hi = positions.size() - 1;\n      while (lo <= hi) {\n        final int mid = (lo + hi) >>> 1;\n        final int midWordNum = (int) wordNums.get(mid);\n        if (midWordNum <= targetWordNum) {\n          lo = mid + 1;\n        } else {\n          hi = mid - 1;\n        }\n      }\n      assert wordNums.get(hi) <= targetWordNum;\n      assert hi+1 == wordNums.size() || wordNums.get(hi + 1) > targetWordNum;\n      return hi;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6713d909dc80e8c53878ff98bb5376dc1af95956","date":1373964521,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/WAH8DocIdSet.Iterator#forwardBinarySearch(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/WAH8DocIdSet.Iterator#binarySearch(int).mjava","sourceNew":"    int forwardBinarySearch(int targetWordNum) {\n      // advance forward and double the window at each step\n      final int indexSize = (int) wordNums.size();\n      int lo = sequenceNum / indexInterval, hi = lo + 1;\n      assert sequenceNum == -1 || wordNums.get(lo) <= wordNum;\n      assert lo + 1 == wordNums.size() || wordNums.get(lo + 1) > wordNum;\n      while (true) {\n        if (hi >= indexSize) {\n          hi = indexSize - 1;\n          break;\n        } else if (wordNums.get(hi) >= targetWordNum) {\n          break;\n        }\n        final int newLo = hi;\n        hi += (hi - lo) << 1;\n        lo = newLo;\n      }\n\n      // we found a window containing our target, let's binary search now\n      while (lo <= hi) {\n        final int mid = (lo + hi) >>> 1;\n        final int midWordNum = (int) wordNums.get(mid);\n        if (midWordNum <= targetWordNum) {\n          lo = mid + 1;\n        } else {\n          hi = mid - 1;\n        }\n      }\n      assert wordNums.get(hi) <= targetWordNum;\n      assert hi+1 == wordNums.size() || wordNums.get(hi + 1) > targetWordNum;\n      return hi;\n    }\n\n","sourceOld":"    int binarySearch(int targetWordNum) {\n      int lo = 0, hi = positions.size() - 1;\n      while (lo <= hi) {\n        final int mid = (lo + hi) >>> 1;\n        final int midWordNum = (int) wordNums.get(mid);\n        if (midWordNum <= targetWordNum) {\n          lo = mid + 1;\n        } else {\n          hi = mid - 1;\n        }\n      }\n      assert wordNums.get(hi) <= targetWordNum;\n      assert hi+1 == wordNums.size() || wordNums.get(hi + 1) > targetWordNum;\n      return hi;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"794214a4691ccb0a156a9ea0dfd8663ab9f05bb4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6713d909dc80e8c53878ff98bb5376dc1af95956":["794214a4691ccb0a156a9ea0dfd8663ab9f05bb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6713d909dc80e8c53878ff98bb5376dc1af95956"]},"commit2Childs":{"794214a4691ccb0a156a9ea0dfd8663ab9f05bb4":["6713d909dc80e8c53878ff98bb5376dc1af95956"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["794214a4691ccb0a156a9ea0dfd8663ab9f05bb4"],"6713d909dc80e8c53878ff98bb5376dc1af95956":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}