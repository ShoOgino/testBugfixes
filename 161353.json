{"path":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider#reload().mjava","commits":[{"id":"f107636c2cc82350a2607d774c092da5b73152e5","date":1498227268,"type":1,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider#reload().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider[CurrencyField]#reload().mjava","sourceNew":"  @Override\n  public boolean reload() throws SolrException {\n    InputStream is = null;\n    Map<String, Map<String, Double>> tmpRates = new HashMap<>();\n    try {\n      log.debug(\"Reloading exchange rates from file \"+this.currencyConfigFile);\n\n      is = loader.openResource(currencyConfigFile);\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch (UnsupportedOperationException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"XML parser doesn't support XInclude option\", e);\n      }\n      \n      try {\n        Document doc = dbf.newDocumentBuilder().parse(is);\n        XPathFactory xpathFactory = XPathFactory.newInstance();\n        XPath xpath = xpathFactory.newXPath();\n        \n        // Parse exchange rates.\n        NodeList nodes = (NodeList) xpath.evaluate(\"/currencyConfig/rates/rate\", doc, XPathConstants.NODESET);\n        \n        for (int i = 0; i < nodes.getLength(); i++) {\n          Node rateNode = nodes.item(i);\n          NamedNodeMap attributes = rateNode.getAttributes();\n          Node from = attributes.getNamedItem(\"from\");\n          Node to = attributes.getNamedItem(\"to\");\n          Node rate = attributes.getNamedItem(\"rate\");\n          \n          if (from == null || to == null || rate == null) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exchange rate missing attributes (required: from, to, rate) \" + rateNode);\n          }\n          \n          String fromCurrency = from.getNodeValue();\n          String toCurrency = to.getNodeValue();\n          Double exchangeRate;\n          \n          if (null == CurrencyFieldType.getCurrency(fromCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'from' currency not supported in this JVM: \" + fromCurrency);\n          }\n          if (null == CurrencyFieldType.getCurrency(toCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'to' currency not supported in this JVM: \" + toCurrency);\n          }\n          \n          try {\n            exchangeRate = Double.parseDouble(rate.getNodeValue());\n          } catch (NumberFormatException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not parse exchange rate: \" + rateNode, e);\n          }\n          \n          addRate(tmpRates, fromCurrency, toCurrency, exchangeRate);\n        }\n      } catch (SAXException | XPathExpressionException | ParserConfigurationException | IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing currency config.\", e);\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error while opening Currency configuration file \"+currencyConfigFile, e);\n    } finally {\n      try {\n        if (is != null) {\n          is.close();\n        }\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n    // Atomically swap in the new rates map, if it loaded successfully\n    this.rates = tmpRates;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean reload() throws SolrException {\n    InputStream is = null;\n    Map<String, Map<String, Double>> tmpRates = new HashMap<>();\n    try {\n      log.debug(\"Reloading exchange rates from file \"+this.currencyConfigFile);\n\n      is = loader.openResource(currencyConfigFile);\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch (UnsupportedOperationException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"XML parser doesn't support XInclude option\", e);\n      }\n      \n      try {\n        Document doc = dbf.newDocumentBuilder().parse(is);\n        XPathFactory xpathFactory = XPathFactory.newInstance();\n        XPath xpath = xpathFactory.newXPath();\n        \n        // Parse exchange rates.\n        NodeList nodes = (NodeList) xpath.evaluate(\"/currencyConfig/rates/rate\", doc, XPathConstants.NODESET);\n        \n        for (int i = 0; i < nodes.getLength(); i++) {\n          Node rateNode = nodes.item(i);\n          NamedNodeMap attributes = rateNode.getAttributes();\n          Node from = attributes.getNamedItem(\"from\");\n          Node to = attributes.getNamedItem(\"to\");\n          Node rate = attributes.getNamedItem(\"rate\");\n          \n          if (from == null || to == null || rate == null) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exchange rate missing attributes (required: from, to, rate) \" + rateNode);\n          }\n          \n          String fromCurrency = from.getNodeValue();\n          String toCurrency = to.getNodeValue();\n          Double exchangeRate;\n          \n          if (null == CurrencyField.getCurrency(fromCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'from' currency not supported in this JVM: \" + fromCurrency);\n          }\n          if (null == CurrencyField.getCurrency(toCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'to' currency not supported in this JVM: \" + toCurrency);\n          }\n          \n          try {\n            exchangeRate = Double.parseDouble(rate.getNodeValue());\n          } catch (NumberFormatException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not parse exchange rate: \" + rateNode, e);\n          }\n          \n          addRate(tmpRates, fromCurrency, toCurrency, exchangeRate);\n        }\n      } catch (SAXException | XPathExpressionException | ParserConfigurationException | IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing currency config.\", e);\n      }\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error while opening Currency configuration file \"+currencyConfigFile, e);\n    } finally {\n      try {\n        if (is != null) {\n          is.close();\n        }\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n    // Atomically swap in the new rates map, if it loaded successfully\n    this.rates = tmpRates;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider#reload().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider[CurrencyField]#reload().mjava","sourceNew":"  @Override\n  public boolean reload() throws SolrException {\n    InputStream is = null;\n    Map<String, Map<String, Double>> tmpRates = new HashMap<>();\n    try {\n      log.debug(\"Reloading exchange rates from file \"+this.currencyConfigFile);\n\n      is = loader.openResource(currencyConfigFile);\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch (UnsupportedOperationException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"XML parser doesn't support XInclude option\", e);\n      }\n      \n      try {\n        Document doc = dbf.newDocumentBuilder().parse(is);\n        XPathFactory xpathFactory = XPathFactory.newInstance();\n        XPath xpath = xpathFactory.newXPath();\n        \n        // Parse exchange rates.\n        NodeList nodes = (NodeList) xpath.evaluate(\"/currencyConfig/rates/rate\", doc, XPathConstants.NODESET);\n        \n        for (int i = 0; i < nodes.getLength(); i++) {\n          Node rateNode = nodes.item(i);\n          NamedNodeMap attributes = rateNode.getAttributes();\n          Node from = attributes.getNamedItem(\"from\");\n          Node to = attributes.getNamedItem(\"to\");\n          Node rate = attributes.getNamedItem(\"rate\");\n          \n          if (from == null || to == null || rate == null) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exchange rate missing attributes (required: from, to, rate) \" + rateNode);\n          }\n          \n          String fromCurrency = from.getNodeValue();\n          String toCurrency = to.getNodeValue();\n          Double exchangeRate;\n          \n          if (null == CurrencyFieldType.getCurrency(fromCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'from' currency not supported in this JVM: \" + fromCurrency);\n          }\n          if (null == CurrencyFieldType.getCurrency(toCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'to' currency not supported in this JVM: \" + toCurrency);\n          }\n          \n          try {\n            exchangeRate = Double.parseDouble(rate.getNodeValue());\n          } catch (NumberFormatException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not parse exchange rate: \" + rateNode, e);\n          }\n          \n          addRate(tmpRates, fromCurrency, toCurrency, exchangeRate);\n        }\n      } catch (SAXException | XPathExpressionException | ParserConfigurationException | IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing currency config.\", e);\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error while opening Currency configuration file \"+currencyConfigFile, e);\n    } finally {\n      try {\n        if (is != null) {\n          is.close();\n        }\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n    // Atomically swap in the new rates map, if it loaded successfully\n    this.rates = tmpRates;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean reload() throws SolrException {\n    InputStream is = null;\n    Map<String, Map<String, Double>> tmpRates = new HashMap<>();\n    try {\n      log.debug(\"Reloading exchange rates from file \"+this.currencyConfigFile);\n\n      is = loader.openResource(currencyConfigFile);\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch (UnsupportedOperationException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"XML parser doesn't support XInclude option\", e);\n      }\n      \n      try {\n        Document doc = dbf.newDocumentBuilder().parse(is);\n        XPathFactory xpathFactory = XPathFactory.newInstance();\n        XPath xpath = xpathFactory.newXPath();\n        \n        // Parse exchange rates.\n        NodeList nodes = (NodeList) xpath.evaluate(\"/currencyConfig/rates/rate\", doc, XPathConstants.NODESET);\n        \n        for (int i = 0; i < nodes.getLength(); i++) {\n          Node rateNode = nodes.item(i);\n          NamedNodeMap attributes = rateNode.getAttributes();\n          Node from = attributes.getNamedItem(\"from\");\n          Node to = attributes.getNamedItem(\"to\");\n          Node rate = attributes.getNamedItem(\"rate\");\n          \n          if (from == null || to == null || rate == null) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exchange rate missing attributes (required: from, to, rate) \" + rateNode);\n          }\n          \n          String fromCurrency = from.getNodeValue();\n          String toCurrency = to.getNodeValue();\n          Double exchangeRate;\n          \n          if (null == CurrencyField.getCurrency(fromCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'from' currency not supported in this JVM: \" + fromCurrency);\n          }\n          if (null == CurrencyField.getCurrency(toCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'to' currency not supported in this JVM: \" + toCurrency);\n          }\n          \n          try {\n            exchangeRate = Double.parseDouble(rate.getNodeValue());\n          } catch (NumberFormatException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not parse exchange rate: \" + rateNode, e);\n          }\n          \n          addRate(tmpRates, fromCurrency, toCurrency, exchangeRate);\n        }\n      } catch (SAXException | XPathExpressionException | ParserConfigurationException | IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing currency config.\", e);\n      }\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error while opening Currency configuration file \"+currencyConfigFile, e);\n    } finally {\n      try {\n        if (is != null) {\n          is.close();\n        }\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n    // Atomically swap in the new rates map, if it loaded successfully\n    this.rates = tmpRates;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider#reload().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean reload() throws SolrException {\n    InputStream is = null;\n    Map<String, Map<String, Double>> tmpRates = new HashMap<>();\n    try {\n      log.debug(\"Reloading exchange rates from file \"+this.currencyConfigFile);\n\n      is = loader.openResource(currencyConfigFile);\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch (UnsupportedOperationException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"XML parser doesn't support XInclude option\", e);\n      }\n      \n      try {\n        Document doc = dbf.newDocumentBuilder().parse(is);\n        XPathFactory xpathFactory = XPathFactory.newInstance();\n        XPath xpath = xpathFactory.newXPath();\n        \n        // Parse exchange rates.\n        NodeList nodes = (NodeList) xpath.evaluate(\"/currencyConfig/rates/rate\", doc, XPathConstants.NODESET);\n        \n        for (int i = 0; i < nodes.getLength(); i++) {\n          Node rateNode = nodes.item(i);\n          NamedNodeMap attributes = rateNode.getAttributes();\n          Node from = attributes.getNamedItem(\"from\");\n          Node to = attributes.getNamedItem(\"to\");\n          Node rate = attributes.getNamedItem(\"rate\");\n          \n          if (from == null || to == null || rate == null) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exchange rate missing attributes (required: from, to, rate) \" + rateNode);\n          }\n          \n          String fromCurrency = from.getNodeValue();\n          String toCurrency = to.getNodeValue();\n          Double exchangeRate;\n          \n          if (null == CurrencyFieldType.getCurrency(fromCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'from' currency not supported in this JVM: \" + fromCurrency);\n          }\n          if (null == CurrencyFieldType.getCurrency(toCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'to' currency not supported in this JVM: \" + toCurrency);\n          }\n          \n          try {\n            exchangeRate = Double.parseDouble(rate.getNodeValue());\n          } catch (NumberFormatException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not parse exchange rate: \" + rateNode, e);\n          }\n          \n          addRate(tmpRates, fromCurrency, toCurrency, exchangeRate);\n        }\n      } catch (SAXException | XPathExpressionException | ParserConfigurationException | IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing currency config.\", e);\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error while opening Currency configuration file \"+currencyConfigFile, e);\n    } finally {\n      try {\n        if (is != null) {\n          is.close();\n        }\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n    // Atomically swap in the new rates map, if it loaded successfully\n    this.rates = tmpRates;\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575ba8a7e01f51915a430b8c67d2461f0703feaa","date":1529234129,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider#reload().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider#reload().mjava","sourceNew":"  @Override\n  public boolean reload() throws SolrException {\n    Map<String, Map<String, Double>> tmpRates = new HashMap<>();\n    log.debug(\"Reloading exchange rates from file {}\", currencyConfigFile);\n\n    try {\n      Document doc = SafeXMLParsing.parseConfigXML(log, loader, currencyConfigFile);\n      XPathFactory xpathFactory = XPathFactory.newInstance();\n      XPath xpath = xpathFactory.newXPath();\n      \n      // Parse exchange rates.\n      NodeList nodes = (NodeList) xpath.evaluate(\"/currencyConfig/rates/rate\", doc, XPathConstants.NODESET);\n      \n      for (int i = 0; i < nodes.getLength(); i++) {\n        Node rateNode = nodes.item(i);\n        NamedNodeMap attributes = rateNode.getAttributes();\n        Node from = attributes.getNamedItem(\"from\");\n        Node to = attributes.getNamedItem(\"to\");\n        Node rate = attributes.getNamedItem(\"rate\");\n        \n        if (from == null || to == null || rate == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exchange rate missing attributes (required: from, to, rate) \" + rateNode);\n        }\n        \n        String fromCurrency = from.getNodeValue();\n        String toCurrency = to.getNodeValue();\n        Double exchangeRate;\n        \n        if (null == CurrencyFieldType.getCurrency(fromCurrency)) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'from' currency not supported in this JVM: \" + fromCurrency);\n        }\n        if (null == CurrencyFieldType.getCurrency(toCurrency)) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'to' currency not supported in this JVM: \" + toCurrency);\n        }\n        \n        try {\n          exchangeRate = Double.parseDouble(rate.getNodeValue());\n        } catch (NumberFormatException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not parse exchange rate: \" + rateNode, e);\n        }\n        \n        addRate(tmpRates, fromCurrency, toCurrency, exchangeRate);\n      }\n    } catch (SAXException | IOException | XPathExpressionException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error while parsing currency configuration file \"+currencyConfigFile, e);\n    }\n    // Atomically swap in the new rates map, if it loaded successfully\n    this.rates = tmpRates;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean reload() throws SolrException {\n    InputStream is = null;\n    Map<String, Map<String, Double>> tmpRates = new HashMap<>();\n    try {\n      log.debug(\"Reloading exchange rates from file \"+this.currencyConfigFile);\n\n      is = loader.openResource(currencyConfigFile);\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch (UnsupportedOperationException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"XML parser doesn't support XInclude option\", e);\n      }\n      \n      try {\n        Document doc = dbf.newDocumentBuilder().parse(is);\n        XPathFactory xpathFactory = XPathFactory.newInstance();\n        XPath xpath = xpathFactory.newXPath();\n        \n        // Parse exchange rates.\n        NodeList nodes = (NodeList) xpath.evaluate(\"/currencyConfig/rates/rate\", doc, XPathConstants.NODESET);\n        \n        for (int i = 0; i < nodes.getLength(); i++) {\n          Node rateNode = nodes.item(i);\n          NamedNodeMap attributes = rateNode.getAttributes();\n          Node from = attributes.getNamedItem(\"from\");\n          Node to = attributes.getNamedItem(\"to\");\n          Node rate = attributes.getNamedItem(\"rate\");\n          \n          if (from == null || to == null || rate == null) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exchange rate missing attributes (required: from, to, rate) \" + rateNode);\n          }\n          \n          String fromCurrency = from.getNodeValue();\n          String toCurrency = to.getNodeValue();\n          Double exchangeRate;\n          \n          if (null == CurrencyFieldType.getCurrency(fromCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'from' currency not supported in this JVM: \" + fromCurrency);\n          }\n          if (null == CurrencyFieldType.getCurrency(toCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'to' currency not supported in this JVM: \" + toCurrency);\n          }\n          \n          try {\n            exchangeRate = Double.parseDouble(rate.getNodeValue());\n          } catch (NumberFormatException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not parse exchange rate: \" + rateNode, e);\n          }\n          \n          addRate(tmpRates, fromCurrency, toCurrency, exchangeRate);\n        }\n      } catch (SAXException | XPathExpressionException | ParserConfigurationException | IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing currency config.\", e);\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error while opening Currency configuration file \"+currencyConfigFile, e);\n    } finally {\n      try {\n        if (is != null) {\n          is.close();\n        }\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n    // Atomically swap in the new rates map, if it loaded successfully\n    this.rates = tmpRates;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider#reload().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider#reload().mjava","sourceNew":"  @Override\n  public boolean reload() throws SolrException {\n    Map<String, Map<String, Double>> tmpRates = new HashMap<>();\n    log.debug(\"Reloading exchange rates from file {}\", currencyConfigFile);\n\n    try {\n      Document doc = SafeXMLParsing.parseConfigXML(log, loader, currencyConfigFile);\n      XPathFactory xpathFactory = XPathFactory.newInstance();\n      XPath xpath = xpathFactory.newXPath();\n      \n      // Parse exchange rates.\n      NodeList nodes = (NodeList) xpath.evaluate(\"/currencyConfig/rates/rate\", doc, XPathConstants.NODESET);\n      \n      for (int i = 0; i < nodes.getLength(); i++) {\n        Node rateNode = nodes.item(i);\n        NamedNodeMap attributes = rateNode.getAttributes();\n        Node from = attributes.getNamedItem(\"from\");\n        Node to = attributes.getNamedItem(\"to\");\n        Node rate = attributes.getNamedItem(\"rate\");\n        \n        if (from == null || to == null || rate == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exchange rate missing attributes (required: from, to, rate) \" + rateNode);\n        }\n        \n        String fromCurrency = from.getNodeValue();\n        String toCurrency = to.getNodeValue();\n        Double exchangeRate;\n        \n        if (null == CurrencyFieldType.getCurrency(fromCurrency)) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'from' currency not supported in this JVM: \" + fromCurrency);\n        }\n        if (null == CurrencyFieldType.getCurrency(toCurrency)) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'to' currency not supported in this JVM: \" + toCurrency);\n        }\n        \n        try {\n          exchangeRate = Double.parseDouble(rate.getNodeValue());\n        } catch (NumberFormatException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not parse exchange rate: \" + rateNode, e);\n        }\n        \n        addRate(tmpRates, fromCurrency, toCurrency, exchangeRate);\n      }\n    } catch (SAXException | IOException | XPathExpressionException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error while parsing currency configuration file \"+currencyConfigFile, e);\n    }\n    // Atomically swap in the new rates map, if it loaded successfully\n    this.rates = tmpRates;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean reload() throws SolrException {\n    InputStream is = null;\n    Map<String, Map<String, Double>> tmpRates = new HashMap<>();\n    try {\n      log.debug(\"Reloading exchange rates from file \"+this.currencyConfigFile);\n\n      is = loader.openResource(currencyConfigFile);\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch (UnsupportedOperationException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"XML parser doesn't support XInclude option\", e);\n      }\n      \n      try {\n        Document doc = dbf.newDocumentBuilder().parse(is);\n        XPathFactory xpathFactory = XPathFactory.newInstance();\n        XPath xpath = xpathFactory.newXPath();\n        \n        // Parse exchange rates.\n        NodeList nodes = (NodeList) xpath.evaluate(\"/currencyConfig/rates/rate\", doc, XPathConstants.NODESET);\n        \n        for (int i = 0; i < nodes.getLength(); i++) {\n          Node rateNode = nodes.item(i);\n          NamedNodeMap attributes = rateNode.getAttributes();\n          Node from = attributes.getNamedItem(\"from\");\n          Node to = attributes.getNamedItem(\"to\");\n          Node rate = attributes.getNamedItem(\"rate\");\n          \n          if (from == null || to == null || rate == null) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exchange rate missing attributes (required: from, to, rate) \" + rateNode);\n          }\n          \n          String fromCurrency = from.getNodeValue();\n          String toCurrency = to.getNodeValue();\n          Double exchangeRate;\n          \n          if (null == CurrencyFieldType.getCurrency(fromCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'from' currency not supported in this JVM: \" + fromCurrency);\n          }\n          if (null == CurrencyFieldType.getCurrency(toCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'to' currency not supported in this JVM: \" + toCurrency);\n          }\n          \n          try {\n            exchangeRate = Double.parseDouble(rate.getNodeValue());\n          } catch (NumberFormatException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not parse exchange rate: \" + rateNode, e);\n          }\n          \n          addRate(tmpRates, fromCurrency, toCurrency, exchangeRate);\n        }\n      } catch (SAXException | XPathExpressionException | ParserConfigurationException | IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing currency config.\", e);\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error while opening Currency configuration file \"+currencyConfigFile, e);\n    } finally {\n      try {\n        if (is != null) {\n          is.close();\n        }\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n    // Atomically swap in the new rates map, if it loaded successfully\n    this.rates = tmpRates;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider#reload().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider#reload().mjava","sourceNew":"  @Override\n  public boolean reload() throws SolrException {\n    Map<String, Map<String, Double>> tmpRates = new HashMap<>();\n    log.debug(\"Reloading exchange rates from file {}\", currencyConfigFile);\n\n    try {\n      Document doc = SafeXMLParsing.parseConfigXML(log, loader, currencyConfigFile);\n      XPathFactory xpathFactory = XPathFactory.newInstance();\n      XPath xpath = xpathFactory.newXPath();\n      \n      // Parse exchange rates.\n      NodeList nodes = (NodeList) xpath.evaluate(\"/currencyConfig/rates/rate\", doc, XPathConstants.NODESET);\n      \n      for (int i = 0; i < nodes.getLength(); i++) {\n        Node rateNode = nodes.item(i);\n        NamedNodeMap attributes = rateNode.getAttributes();\n        Node from = attributes.getNamedItem(\"from\");\n        Node to = attributes.getNamedItem(\"to\");\n        Node rate = attributes.getNamedItem(\"rate\");\n        \n        if (from == null || to == null || rate == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exchange rate missing attributes (required: from, to, rate) \" + rateNode);\n        }\n        \n        String fromCurrency = from.getNodeValue();\n        String toCurrency = to.getNodeValue();\n        Double exchangeRate;\n        \n        if (null == CurrencyFieldType.getCurrency(fromCurrency)) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'from' currency not supported in this JVM: \" + fromCurrency);\n        }\n        if (null == CurrencyFieldType.getCurrency(toCurrency)) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'to' currency not supported in this JVM: \" + toCurrency);\n        }\n        \n        try {\n          exchangeRate = Double.parseDouble(rate.getNodeValue());\n        } catch (NumberFormatException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not parse exchange rate: \" + rateNode, e);\n        }\n        \n        addRate(tmpRates, fromCurrency, toCurrency, exchangeRate);\n      }\n    } catch (SAXException | IOException | XPathExpressionException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error while parsing currency configuration file \"+currencyConfigFile, e);\n    }\n    // Atomically swap in the new rates map, if it loaded successfully\n    this.rates = tmpRates;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean reload() throws SolrException {\n    InputStream is = null;\n    Map<String, Map<String, Double>> tmpRates = new HashMap<>();\n    try {\n      log.debug(\"Reloading exchange rates from file \"+this.currencyConfigFile);\n\n      is = loader.openResource(currencyConfigFile);\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch (UnsupportedOperationException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"XML parser doesn't support XInclude option\", e);\n      }\n      \n      try {\n        Document doc = dbf.newDocumentBuilder().parse(is);\n        XPathFactory xpathFactory = XPathFactory.newInstance();\n        XPath xpath = xpathFactory.newXPath();\n        \n        // Parse exchange rates.\n        NodeList nodes = (NodeList) xpath.evaluate(\"/currencyConfig/rates/rate\", doc, XPathConstants.NODESET);\n        \n        for (int i = 0; i < nodes.getLength(); i++) {\n          Node rateNode = nodes.item(i);\n          NamedNodeMap attributes = rateNode.getAttributes();\n          Node from = attributes.getNamedItem(\"from\");\n          Node to = attributes.getNamedItem(\"to\");\n          Node rate = attributes.getNamedItem(\"rate\");\n          \n          if (from == null || to == null || rate == null) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exchange rate missing attributes (required: from, to, rate) \" + rateNode);\n          }\n          \n          String fromCurrency = from.getNodeValue();\n          String toCurrency = to.getNodeValue();\n          Double exchangeRate;\n          \n          if (null == CurrencyFieldType.getCurrency(fromCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'from' currency not supported in this JVM: \" + fromCurrency);\n          }\n          if (null == CurrencyFieldType.getCurrency(toCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'to' currency not supported in this JVM: \" + toCurrency);\n          }\n          \n          try {\n            exchangeRate = Double.parseDouble(rate.getNodeValue());\n          } catch (NumberFormatException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not parse exchange rate: \" + rateNode, e);\n          }\n          \n          addRate(tmpRates, fromCurrency, toCurrency, exchangeRate);\n        }\n      } catch (SAXException | XPathExpressionException | ParserConfigurationException | IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing currency config.\", e);\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error while opening Currency configuration file \"+currencyConfigFile, e);\n    } finally {\n      try {\n        if (is != null) {\n          is.close();\n        }\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n    // Atomically swap in the new rates map, if it loaded successfully\n    this.rates = tmpRates;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["28288370235ed02234a64753cdbf0c6ec096304a","575ba8a7e01f51915a430b8c67d2461f0703feaa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"575ba8a7e01f51915a430b8c67d2461f0703feaa":["28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f107636c2cc82350a2607d774c092da5b73152e5"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f107636c2cc82350a2607d774c092da5b73152e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575ba8a7e01f51915a430b8c67d2461f0703feaa"],"f107636c2cc82350a2607d774c092da5b73152e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["28288370235ed02234a64753cdbf0c6ec096304a","575ba8a7e01f51915a430b8c67d2461f0703feaa"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","f107636c2cc82350a2607d774c092da5b73152e5"],"575ba8a7e01f51915a430b8c67d2461f0703feaa":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","575ba8a7e01f51915a430b8c67d2461f0703feaa","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"f107636c2cc82350a2607d774c092da5b73152e5":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}