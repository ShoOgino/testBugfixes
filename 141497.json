{"path":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingTerms#iterator(TermsEnum).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":1,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingTerms#iterator(TermsEnum).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTerms#iterator(TermsEnum).mjava","sourceNew":"    @Override\n    public TermsEnum iterator(TermsEnum reuse) throws IOException {\n      // TODO: should we give this thing a random to be super-evil,\n      // and randomly *not* unwrap?\n      if (reuse instanceof AssertingTermsEnum) {\n        reuse = ((AssertingTermsEnum) reuse).in;\n      }\n      TermsEnum termsEnum = super.iterator(reuse);\n      assert termsEnum != null;\n      return new AssertingTermsEnum(termsEnum);\n    }\n\n","sourceOld":"    @Override\n    public TermsEnum iterator(TermsEnum reuse) throws IOException {\n      // TODO: should we give this thing a random to be super-evil,\n      // and randomly *not* unwrap?\n      if (reuse instanceof AssertingTermsEnum) {\n        reuse = ((AssertingTermsEnum) reuse).in;\n      }\n      TermsEnum termsEnum = super.iterator(reuse);\n      assert termsEnum != null;\n      return new AssertingTermsEnum(termsEnum);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ebcb21d043bc7d0dba7d6a2999514e4f4af22ab0","date":1424186100,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingTerms#iterator(TermsEnum).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingTerms#iterator(TermsEnum).mjava","sourceNew":"    @Override\n    public TermsEnum iterator(TermsEnum reuse) throws IOException {\n      // reuse, if the codec reused\n      final TermsEnum actualReuse;\n      if (reuse instanceof AssertingTermsEnum) {\n        actualReuse = ((AssertingTermsEnum) reuse).in;\n      } else {\n        actualReuse = null;\n      }\n      TermsEnum termsEnum = super.iterator(actualReuse);\n      assert termsEnum != null;\n      if (termsEnum == actualReuse) {\n        // codec reused, reset asserting state\n        ((AssertingTermsEnum)reuse).reset();\n        return reuse;\n      } else {\n        return new AssertingTermsEnum(termsEnum);\n      }\n    }\n\n","sourceOld":"    @Override\n    public TermsEnum iterator(TermsEnum reuse) throws IOException {\n      // TODO: should we give this thing a random to be super-evil,\n      // and randomly *not* unwrap?\n      if (reuse instanceof AssertingTermsEnum) {\n        reuse = ((AssertingTermsEnum) reuse).in;\n      }\n      TermsEnum termsEnum = super.iterator(reuse);\n      assert termsEnum != null;\n      return new AssertingTermsEnum(termsEnum);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingTerms#iterator(TermsEnum).mjava","sourceNew":null,"sourceOld":"    @Override\n    public TermsEnum iterator(TermsEnum reuse) throws IOException {\n      // reuse, if the codec reused\n      final TermsEnum actualReuse;\n      if (reuse instanceof AssertingTermsEnum) {\n        actualReuse = ((AssertingTermsEnum) reuse).in;\n      } else {\n        actualReuse = null;\n      }\n      TermsEnum termsEnum = super.iterator(actualReuse);\n      assert termsEnum != null;\n      if (termsEnum == actualReuse) {\n        // codec reused, reset asserting state\n        ((AssertingTermsEnum)reuse).reset();\n        return reuse;\n      } else {\n        return new AssertingTermsEnum(termsEnum);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["ebcb21d043bc7d0dba7d6a2999514e4f4af22ab0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"ebcb21d043bc7d0dba7d6a2999514e4f4af22ab0":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["ebcb21d043bc7d0dba7d6a2999514e4f4af22ab0"],"ebcb21d043bc7d0dba7d6a2999514e4f4af22ab0":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}