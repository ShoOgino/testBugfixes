{"path":"solr/core/src/java/org/apache/solr/search/ValueSourceParser#parseTerm(FunctionQParser).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ValueSourceParser#parseTerm(FunctionQParser).mjava","pathOld":"solr/src/java/org/apache/solr/search/ValueSourceParser#parseTerm(FunctionQParser).mjava","sourceNew":"  private static TInfo parseTerm(FunctionQParser fp) throws ParseException {\n    TInfo tinfo = new TInfo();\n\n    tinfo.indexedField = tinfo.field = fp.parseArg();\n    tinfo.val = fp.parseArg();\n    tinfo.indexedBytes = new BytesRef();\n\n    FieldType ft = fp.getReq().getSchema().getFieldTypeNoEx(tinfo.field);\n    if (ft == null) ft = new StrField();\n\n    if (ft instanceof TextField) {\n      // need to do analysis on the term\n      String indexedVal = tinfo.val;\n      Query q = ft.getFieldQuery(fp, fp.getReq().getSchema().getFieldOrNull(tinfo.field), tinfo.val);\n      if (q instanceof TermQuery) {\n        Term term = ((TermQuery)q).getTerm();\n        tinfo.indexedField = term.field();\n        indexedVal = term.text();\n      }\n      UnicodeUtil.UTF16toUTF8(indexedVal, 0, indexedVal.length(), tinfo.indexedBytes);\n    } else {\n      ft.readableToIndexed(tinfo.val, tinfo.indexedBytes);\n    }\n\n    return tinfo;\n  }\n\n","sourceOld":"  private static TInfo parseTerm(FunctionQParser fp) throws ParseException {\n    TInfo tinfo = new TInfo();\n\n    tinfo.indexedField = tinfo.field = fp.parseArg();\n    tinfo.val = fp.parseArg();\n    tinfo.indexedBytes = new BytesRef();\n\n    FieldType ft = fp.getReq().getSchema().getFieldTypeNoEx(tinfo.field);\n    if (ft == null) ft = new StrField();\n\n    if (ft instanceof TextField) {\n      // need to do analysis on the term\n      String indexedVal = tinfo.val;\n      Query q = ft.getFieldQuery(fp, fp.getReq().getSchema().getFieldOrNull(tinfo.field), tinfo.val);\n      if (q instanceof TermQuery) {\n        Term term = ((TermQuery)q).getTerm();\n        tinfo.indexedField = term.field();\n        indexedVal = term.text();\n      }\n      UnicodeUtil.UTF16toUTF8(indexedVal, 0, indexedVal.length(), tinfo.indexedBytes);\n    } else {\n      ft.readableToIndexed(tinfo.val, tinfo.indexedBytes);\n    }\n\n    return tinfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ValueSourceParser#parseTerm(FunctionQParser).mjava","pathOld":"solr/src/java/org/apache/solr/search/ValueSourceParser#parseTerm(FunctionQParser).mjava","sourceNew":"  private static TInfo parseTerm(FunctionQParser fp) throws ParseException {\n    TInfo tinfo = new TInfo();\n\n    tinfo.indexedField = tinfo.field = fp.parseArg();\n    tinfo.val = fp.parseArg();\n    tinfo.indexedBytes = new BytesRef();\n\n    FieldType ft = fp.getReq().getSchema().getFieldTypeNoEx(tinfo.field);\n    if (ft == null) ft = new StrField();\n\n    if (ft instanceof TextField) {\n      // need to do analysis on the term\n      String indexedVal = tinfo.val;\n      Query q = ft.getFieldQuery(fp, fp.getReq().getSchema().getFieldOrNull(tinfo.field), tinfo.val);\n      if (q instanceof TermQuery) {\n        Term term = ((TermQuery)q).getTerm();\n        tinfo.indexedField = term.field();\n        indexedVal = term.text();\n      }\n      UnicodeUtil.UTF16toUTF8(indexedVal, 0, indexedVal.length(), tinfo.indexedBytes);\n    } else {\n      ft.readableToIndexed(tinfo.val, tinfo.indexedBytes);\n    }\n\n    return tinfo;\n  }\n\n","sourceOld":"  private static TInfo parseTerm(FunctionQParser fp) throws ParseException {\n    TInfo tinfo = new TInfo();\n\n    tinfo.indexedField = tinfo.field = fp.parseArg();\n    tinfo.val = fp.parseArg();\n    tinfo.indexedBytes = new BytesRef();\n\n    FieldType ft = fp.getReq().getSchema().getFieldTypeNoEx(tinfo.field);\n    if (ft == null) ft = new StrField();\n\n    if (ft instanceof TextField) {\n      // need to do analysis on the term\n      String indexedVal = tinfo.val;\n      Query q = ft.getFieldQuery(fp, fp.getReq().getSchema().getFieldOrNull(tinfo.field), tinfo.val);\n      if (q instanceof TermQuery) {\n        Term term = ((TermQuery)q).getTerm();\n        tinfo.indexedField = term.field();\n        indexedVal = term.text();\n      }\n      UnicodeUtil.UTF16toUTF8(indexedVal, 0, indexedVal.length(), tinfo.indexedBytes);\n    } else {\n      ft.readableToIndexed(tinfo.val, tinfo.indexedBytes);\n    }\n\n    return tinfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ValueSourceParser#parseTerm(FunctionQParser).mjava","pathOld":"solr/src/java/org/apache/solr/search/ValueSourceParser#parseTerm(FunctionQParser).mjava","sourceNew":"  private static TInfo parseTerm(FunctionQParser fp) throws ParseException {\n    TInfo tinfo = new TInfo();\n\n    tinfo.indexedField = tinfo.field = fp.parseArg();\n    tinfo.val = fp.parseArg();\n    tinfo.indexedBytes = new BytesRef();\n\n    FieldType ft = fp.getReq().getSchema().getFieldTypeNoEx(tinfo.field);\n    if (ft == null) ft = new StrField();\n\n    if (ft instanceof TextField) {\n      // need to do analysis on the term\n      String indexedVal = tinfo.val;\n      Query q = ft.getFieldQuery(fp, fp.getReq().getSchema().getFieldOrNull(tinfo.field), tinfo.val);\n      if (q instanceof TermQuery) {\n        Term term = ((TermQuery)q).getTerm();\n        tinfo.indexedField = term.field();\n        indexedVal = term.text();\n      }\n      UnicodeUtil.UTF16toUTF8(indexedVal, 0, indexedVal.length(), tinfo.indexedBytes);\n    } else {\n      ft.readableToIndexed(tinfo.val, tinfo.indexedBytes);\n    }\n\n    return tinfo;\n  }\n\n","sourceOld":"  private static TInfo parseTerm(FunctionQParser fp) throws ParseException {\n    TInfo tinfo = new TInfo();\n\n    tinfo.indexedField = tinfo.field = fp.parseArg();\n    tinfo.val = fp.parseArg();\n    tinfo.indexedBytes = new BytesRef();\n\n    FieldType ft = fp.getReq().getSchema().getFieldTypeNoEx(tinfo.field);\n    if (ft == null) ft = new StrField();\n\n    if (ft instanceof TextField) {\n      // need to do analysis on the term\n      String indexedVal = tinfo.val;\n      Query q = ft.getFieldQuery(fp, fp.getReq().getSchema().getFieldOrNull(tinfo.field), tinfo.val);\n      if (q instanceof TermQuery) {\n        Term term = ((TermQuery)q).getTerm();\n        tinfo.indexedField = term.field();\n        indexedVal = term.text();\n      }\n      UnicodeUtil.UTF16toUTF8(indexedVal, 0, indexedVal.length(), tinfo.indexedBytes);\n    } else {\n      ft.readableToIndexed(tinfo.val, tinfo.indexedBytes);\n    }\n\n    return tinfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ValueSourceParser#parseTerm(FunctionQParser).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ValueSourceParser#parseTerm(FunctionQParser).mjava","sourceNew":"  private static TInfo parseTerm(FunctionQParser fp) throws SyntaxError {\n    TInfo tinfo = new TInfo();\n\n    tinfo.indexedField = tinfo.field = fp.parseArg();\n    tinfo.val = fp.parseArg();\n    tinfo.indexedBytes = new BytesRef();\n\n    FieldType ft = fp.getReq().getSchema().getFieldTypeNoEx(tinfo.field);\n    if (ft == null) ft = new StrField();\n\n    if (ft instanceof TextField) {\n      // need to do analysis on the term\n      String indexedVal = tinfo.val;\n      Query q = ft.getFieldQuery(fp, fp.getReq().getSchema().getFieldOrNull(tinfo.field), tinfo.val);\n      if (q instanceof TermQuery) {\n        Term term = ((TermQuery)q).getTerm();\n        tinfo.indexedField = term.field();\n        indexedVal = term.text();\n      }\n      UnicodeUtil.UTF16toUTF8(indexedVal, 0, indexedVal.length(), tinfo.indexedBytes);\n    } else {\n      ft.readableToIndexed(tinfo.val, tinfo.indexedBytes);\n    }\n\n    return tinfo;\n  }\n\n","sourceOld":"  private static TInfo parseTerm(FunctionQParser fp) throws ParseException {\n    TInfo tinfo = new TInfo();\n\n    tinfo.indexedField = tinfo.field = fp.parseArg();\n    tinfo.val = fp.parseArg();\n    tinfo.indexedBytes = new BytesRef();\n\n    FieldType ft = fp.getReq().getSchema().getFieldTypeNoEx(tinfo.field);\n    if (ft == null) ft = new StrField();\n\n    if (ft instanceof TextField) {\n      // need to do analysis on the term\n      String indexedVal = tinfo.val;\n      Query q = ft.getFieldQuery(fp, fp.getReq().getSchema().getFieldOrNull(tinfo.field), tinfo.val);\n      if (q instanceof TermQuery) {\n        Term term = ((TermQuery)q).getTerm();\n        tinfo.indexedField = term.field();\n        indexedVal = term.text();\n      }\n      UnicodeUtil.UTF16toUTF8(indexedVal, 0, indexedVal.length(), tinfo.indexedBytes);\n    } else {\n      ft.readableToIndexed(tinfo.val, tinfo.indexedBytes);\n    }\n\n    return tinfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ValueSourceParser#parseTerm(FunctionQParser).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ValueSourceParser#parseTerm(FunctionQParser).mjava","sourceNew":"  private static TInfo parseTerm(FunctionQParser fp) throws SyntaxError {\n    TInfo tinfo = new TInfo();\n\n    tinfo.indexedField = tinfo.field = fp.parseArg();\n    tinfo.val = fp.parseArg();\n    tinfo.indexedBytes = new BytesRef();\n\n    FieldType ft = fp.getReq().getSchema().getFieldTypeNoEx(tinfo.field);\n    if (ft == null) ft = new StrField();\n\n    if (ft instanceof TextField) {\n      // need to do analysis on the term\n      String indexedVal = tinfo.val;\n      Query q = ft.getFieldQuery(fp, fp.getReq().getSchema().getFieldOrNull(tinfo.field), tinfo.val);\n      if (q instanceof TermQuery) {\n        Term term = ((TermQuery)q).getTerm();\n        tinfo.indexedField = term.field();\n        indexedVal = term.text();\n      }\n      UnicodeUtil.UTF16toUTF8(indexedVal, 0, indexedVal.length(), tinfo.indexedBytes);\n    } else {\n      ft.readableToIndexed(tinfo.val, tinfo.indexedBytes);\n    }\n\n    return tinfo;\n  }\n\n","sourceOld":"  private static TInfo parseTerm(FunctionQParser fp) throws ParseException {\n    TInfo tinfo = new TInfo();\n\n    tinfo.indexedField = tinfo.field = fp.parseArg();\n    tinfo.val = fp.parseArg();\n    tinfo.indexedBytes = new BytesRef();\n\n    FieldType ft = fp.getReq().getSchema().getFieldTypeNoEx(tinfo.field);\n    if (ft == null) ft = new StrField();\n\n    if (ft instanceof TextField) {\n      // need to do analysis on the term\n      String indexedVal = tinfo.val;\n      Query q = ft.getFieldQuery(fp, fp.getReq().getSchema().getFieldOrNull(tinfo.field), tinfo.val);\n      if (q instanceof TermQuery) {\n        Term term = ((TermQuery)q).getTerm();\n        tinfo.indexedField = term.field();\n        indexedVal = term.text();\n      }\n      UnicodeUtil.UTF16toUTF8(indexedVal, 0, indexedVal.length(), tinfo.indexedBytes);\n    } else {\n      ft.readableToIndexed(tinfo.val, tinfo.indexedBytes);\n    }\n\n    return tinfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ValueSourceParser#parseTerm(FunctionQParser).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ValueSourceParser#parseTerm(FunctionQParser).mjava","sourceNew":"  private static TInfo parseTerm(FunctionQParser fp) throws SyntaxError {\n    TInfo tinfo = new TInfo();\n\n    tinfo.indexedField = tinfo.field = fp.parseArg();\n    tinfo.val = fp.parseArg();\n    tinfo.indexedBytes = new BytesRef();\n\n    FieldType ft = fp.getReq().getSchema().getFieldTypeNoEx(tinfo.field);\n    if (ft == null) ft = new StrField();\n\n    if (ft instanceof TextField) {\n      // need to do analysis on the term\n      String indexedVal = tinfo.val;\n      Query q = ft.getFieldQuery(fp, fp.getReq().getSchema().getFieldOrNull(tinfo.field), tinfo.val);\n      if (q instanceof TermQuery) {\n        Term term = ((TermQuery)q).getTerm();\n        tinfo.indexedField = term.field();\n        indexedVal = term.text();\n      }\n      UnicodeUtil.UTF16toUTF8(indexedVal, 0, indexedVal.length(), tinfo.indexedBytes);\n    } else {\n      ft.readableToIndexed(tinfo.val, tinfo.indexedBytes);\n    }\n\n    return tinfo;\n  }\n\n","sourceOld":"  private static TInfo parseTerm(FunctionQParser fp) throws SyntaxError {\n    TInfo tinfo = new TInfo();\n\n    tinfo.indexedField = tinfo.field = fp.parseArg();\n    tinfo.val = fp.parseArg();\n    tinfo.indexedBytes = new BytesRef();\n\n    FieldType ft = fp.getReq().getSchema().getFieldTypeNoEx(tinfo.field);\n    if (ft == null) ft = new StrField();\n\n    if (ft instanceof TextField) {\n      // need to do analysis on the term\n      String indexedVal = tinfo.val;\n      Query q = ft.getFieldQuery(fp, fp.getReq().getSchema().getFieldOrNull(tinfo.field), tinfo.val);\n      if (q instanceof TermQuery) {\n        Term term = ((TermQuery)q).getTerm();\n        tinfo.indexedField = term.field();\n        indexedVal = term.text();\n      }\n      UnicodeUtil.UTF16toUTF8(indexedVal, 0, indexedVal.length(), tinfo.indexedBytes);\n    } else {\n      ft.readableToIndexed(tinfo.val, tinfo.indexedBytes);\n    }\n\n    return tinfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ValueSourceParser#parseTerm(FunctionQParser).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ValueSourceParser#parseTerm(FunctionQParser).mjava","sourceNew":"  private static TInfo parseTerm(FunctionQParser fp) throws SyntaxError {\n    TInfo tinfo = new TInfo();\n\n    tinfo.indexedField = tinfo.field = fp.parseArg();\n    tinfo.val = fp.parseArg();\n    tinfo.indexedBytes = new BytesRef();\n\n    FieldType ft = fp.getReq().getSchema().getFieldTypeNoEx(tinfo.field);\n    if (ft == null) ft = new StrField();\n\n    if (ft instanceof TextField) {\n      // need to do analysis on the term\n      String indexedVal = tinfo.val;\n      Query q = ft.getFieldQuery(fp, fp.getReq().getSchema().getFieldOrNull(tinfo.field), tinfo.val);\n      if (q instanceof TermQuery) {\n        Term term = ((TermQuery)q).getTerm();\n        tinfo.indexedField = term.field();\n        indexedVal = term.text();\n      }\n      UnicodeUtil.UTF16toUTF8(indexedVal, 0, indexedVal.length(), tinfo.indexedBytes);\n    } else {\n      ft.readableToIndexed(tinfo.val, tinfo.indexedBytes);\n    }\n\n    return tinfo;\n  }\n\n","sourceOld":"  private static TInfo parseTerm(FunctionQParser fp) throws SyntaxError {\n    TInfo tinfo = new TInfo();\n\n    tinfo.indexedField = tinfo.field = fp.parseArg();\n    tinfo.val = fp.parseArg();\n    tinfo.indexedBytes = new BytesRef();\n\n    FieldType ft = fp.getReq().getSchema().getFieldTypeNoEx(tinfo.field);\n    if (ft == null) ft = new StrField();\n\n    if (ft instanceof TextField) {\n      // need to do analysis on the term\n      String indexedVal = tinfo.val;\n      Query q = ft.getFieldQuery(fp, fp.getReq().getSchema().getFieldOrNull(tinfo.field), tinfo.val);\n      if (q instanceof TermQuery) {\n        Term term = ((TermQuery)q).getTerm();\n        tinfo.indexedField = term.field();\n        indexedVal = term.text();\n      }\n      UnicodeUtil.UTF16toUTF8(indexedVal, 0, indexedVal.length(), tinfo.indexedBytes);\n    } else {\n      ft.readableToIndexed(tinfo.val, tinfo.indexedBytes);\n    }\n\n    return tinfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ValueSourceParser#parseTerm(FunctionQParser).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ValueSourceParser#parseTerm(FunctionQParser).mjava","sourceNew":"  private static TInfo parseTerm(FunctionQParser fp) throws SyntaxError {\n    TInfo tinfo = new TInfo();\n\n    tinfo.indexedField = tinfo.field = fp.parseArg();\n    tinfo.val = fp.parseArg();\n    tinfo.indexedBytes = new BytesRefBuilder();\n\n    FieldType ft = fp.getReq().getSchema().getFieldTypeNoEx(tinfo.field);\n    if (ft == null) ft = new StrField();\n\n    if (ft instanceof TextField) {\n      // need to do analysis on the term\n      String indexedVal = tinfo.val;\n      Query q = ft.getFieldQuery(fp, fp.getReq().getSchema().getFieldOrNull(tinfo.field), tinfo.val);\n      if (q instanceof TermQuery) {\n        Term term = ((TermQuery)q).getTerm();\n        tinfo.indexedField = term.field();\n        indexedVal = term.text();\n      }\n      tinfo.indexedBytes.copyChars(indexedVal);\n    } else {\n      ft.readableToIndexed(tinfo.val, tinfo.indexedBytes);\n    }\n\n    return tinfo;\n  }\n\n","sourceOld":"  private static TInfo parseTerm(FunctionQParser fp) throws SyntaxError {\n    TInfo tinfo = new TInfo();\n\n    tinfo.indexedField = tinfo.field = fp.parseArg();\n    tinfo.val = fp.parseArg();\n    tinfo.indexedBytes = new BytesRef();\n\n    FieldType ft = fp.getReq().getSchema().getFieldTypeNoEx(tinfo.field);\n    if (ft == null) ft = new StrField();\n\n    if (ft instanceof TextField) {\n      // need to do analysis on the term\n      String indexedVal = tinfo.val;\n      Query q = ft.getFieldQuery(fp, fp.getReq().getSchema().getFieldOrNull(tinfo.field), tinfo.val);\n      if (q instanceof TermQuery) {\n        Term term = ((TermQuery)q).getTerm();\n        tinfo.indexedField = term.field();\n        indexedVal = term.text();\n      }\n      UnicodeUtil.UTF16toUTF8(indexedVal, 0, indexedVal.length(), tinfo.indexedBytes);\n    } else {\n      ft.readableToIndexed(tinfo.val, tinfo.indexedBytes);\n    }\n\n    return tinfo;\n  }\n\n","bugFix":["15345a5c40a4fa937f1b1b8462ddd6677135378a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["3cdb67100dc016748799a77218aa409478372d79","19275ba31e621f6da1b83bf13af75233876fd3d4"],"3cdb67100dc016748799a77218aa409478372d79":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["c26f00b574427b55127e869b935845554afde1fa","3cdb67100dc016748799a77218aa409478372d79"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["3cdb67100dc016748799a77218aa409478372d79"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"3cdb67100dc016748799a77218aa409478372d79":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","407687e67faf6e1f02a211ca078d8e3eed631027","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","407687e67faf6e1f02a211ca078d8e3eed631027","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}