{"path":"solr/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig#testLegacy().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig#testLegacy().mjava","pathOld":"/dev/null","sourceNew":"  public void testLegacy() throws Exception {\r\n    IndexWriter writer = new ExposeWriterHandler().getWriter();\r\n    assertTrue(writer.getMergePolicy().getClass().getName().equals(LogDocMergePolicy.class.getName()));\r\n    assertTrue(writer.getMergeScheduler().getClass().getName().equals(SerialMergeScheduler.class.getName()));\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig#testLegacy().mjava","sourceNew":null,"sourceOld":"  public void testLegacy() throws Exception {\r\n    IndexWriter writer = new ExposeWriterHandler().getWriter();\r\n    assertTrue(writer.getMergePolicy().getClass().getName().equals(LogDocMergePolicy.class.getName()));\r\n    assertTrue(writer.getMergeScheduler().getClass().getName().equals(SerialMergeScheduler.class.getName()));\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig#testLegacy().mjava","pathOld":"src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig#testLegacy().mjava","sourceNew":"  public void testLegacy() throws Exception {\r\n    IndexWriter writer = new ExposeWriterHandler().getWriter();\r\n    assertTrue(writer.getMergePolicy().getClass().getName().equals(LogDocMergePolicy.class.getName()));\r\n    assertTrue(writer.getMergeScheduler().getClass().getName().equals(SerialMergeScheduler.class.getName()));\r\n  }\r\n\n","sourceOld":"  public void testLegacy() throws Exception {\r\n    IndexWriter writer = new ExposeWriterHandler().getWriter();\r\n    assertTrue(writer.getMergePolicy().getClass().getName().equals(LogDocMergePolicy.class.getName()));\r\n    assertTrue(writer.getMergeScheduler().getClass().getName().equals(SerialMergeScheduler.class.getName()));\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig#testLegacy().mjava","pathOld":"/dev/null","sourceNew":"  public void testLegacy() throws Exception {\r\n    IndexWriter writer = new ExposeWriterHandler().getWriter();\r\n    assertTrue(writer.getMergePolicy().getClass().getName().equals(LogDocMergePolicy.class.getName()));\r\n    assertTrue(writer.getMergeScheduler().getClass().getName().equals(SerialMergeScheduler.class.getName()));\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dff3adc4fd8094e3973a5ecbbe8968ae45a86a55","date":1270182973,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig#testLegacy().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig#testLegacy().mjava","sourceNew":"  public void testLegacy() throws Exception {\n    IndexWriter writer = new ExposeWriterHandler().getWriter();\n    assertTrue(writer.getMergePolicy().getClass().getName().equals(LogDocMergePolicy.class.getName()));\n    assertTrue(writer.getMergeScheduler().getClass().getName().equals(SerialMergeScheduler.class.getName()));\n  }\n\n","sourceOld":"  public void testLegacy() throws Exception {\r\n    IndexWriter writer = new ExposeWriterHandler().getWriter();\r\n    assertTrue(writer.getMergePolicy().getClass().getName().equals(LogDocMergePolicy.class.getName()));\r\n    assertTrue(writer.getMergeScheduler().getClass().getName().equals(SerialMergeScheduler.class.getName()));\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9cf57819cbb539e98d64e410a033789b0b57cb0","date":1287503752,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig#testLegacy().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig#testLegacy().mjava","sourceNew":"  @Test\n  public void testLegacy() throws Exception {\n    IndexWriter writer = new ExposeWriterHandler().getWriter();\n    assertTrue(writer.getMergePolicy().getClass().getName().equals(LogDocMergePolicy.class.getName()));\n    assertTrue(writer.getMergeScheduler().getClass().getName().equals(SerialMergeScheduler.class.getName()));\n  }\n\n","sourceOld":"  public void testLegacy() throws Exception {\n    IndexWriter writer = new ExposeWriterHandler().getWriter();\n    assertTrue(writer.getMergePolicy().getClass().getName().equals(LogDocMergePolicy.class.getName()));\n    assertTrue(writer.getMergeScheduler().getClass().getName().equals(SerialMergeScheduler.class.getName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig#testLegacy().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig#testLegacy().mjava","sourceNew":"  @Test\n  public void testLegacy() throws Exception {\n    IndexWriter writer = new ExposeWriterHandler().getWriter();\n    assertTrue(writer.getMergePolicy().getClass().getName().equals(LogDocMergePolicy.class.getName()));\n    assertTrue(writer.getMergeScheduler().getClass().getName().equals(SerialMergeScheduler.class.getName()));\n  }\n\n","sourceOld":"  public void testLegacy() throws Exception {\n    IndexWriter writer = new ExposeWriterHandler().getWriter();\n    assertTrue(writer.getMergePolicy().getClass().getName().equals(LogDocMergePolicy.class.getName()));\n    assertTrue(writer.getMergeScheduler().getClass().getName().equals(SerialMergeScheduler.class.getName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"725fea934ce47b55df40b00f5447f1c279d05242","date":1287836481,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig#testLegacy().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig#testLegacy().mjava","sourceNew":"  @Test\n  public void testLegacy() throws Exception {\n    ExposeWriterHandler duh = new ExposeWriterHandler();\n    IndexWriter writer = duh.getWriter();\n    assertTrue(writer.getMergePolicy().getClass().getName().equals(LogDocMergePolicy.class.getName()));\n    assertTrue(writer.getMergeScheduler().getClass().getName().equals(SerialMergeScheduler.class.getName()));\n    duh.close();\n  }\n\n","sourceOld":"  @Test\n  public void testLegacy() throws Exception {\n    IndexWriter writer = new ExposeWriterHandler().getWriter();\n    assertTrue(writer.getMergePolicy().getClass().getName().equals(LogDocMergePolicy.class.getName()));\n    assertTrue(writer.getMergeScheduler().getClass().getName().equals(SerialMergeScheduler.class.getName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig#testLegacy().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig#testLegacy().mjava","sourceNew":"  @Test\n  public void testLegacy() throws Exception {\n    ExposeWriterHandler duh = new ExposeWriterHandler();\n    IndexWriter writer = duh.getWriter();\n    assertTrue(writer.getMergePolicy().getClass().getName().equals(LogDocMergePolicy.class.getName()));\n    assertTrue(writer.getMergeScheduler().getClass().getName().equals(SerialMergeScheduler.class.getName()));\n    duh.close();\n  }\n\n","sourceOld":"  @Test\n  public void testLegacy() throws Exception {\n    IndexWriter writer = new ExposeWriterHandler().getWriter();\n    assertTrue(writer.getMergePolicy().getClass().getName().equals(LogDocMergePolicy.class.getName()));\n    assertTrue(writer.getMergeScheduler().getClass().getName().equals(SerialMergeScheduler.class.getName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig#testLegacy().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig#testLegacy().mjava","sourceNew":"  @Test\n  public void testLegacy() throws Exception {\n    ExposeWriterHandler duh = new ExposeWriterHandler();\n    IndexWriter writer = duh.getWriter();\n    assertTrue(writer.getConfig().getMergePolicy().getClass().getName().equals(LogDocMergePolicy.class.getName()));\n    assertTrue(writer.getConfig().getMergeScheduler().getClass().getName().equals(SerialMergeScheduler.class.getName()));\n    duh.close();\n  }\n\n","sourceOld":"  @Test\n  public void testLegacy() throws Exception {\n    ExposeWriterHandler duh = new ExposeWriterHandler();\n    IndexWriter writer = duh.getWriter();\n    assertTrue(writer.getMergePolicy().getClass().getName().equals(LogDocMergePolicy.class.getName()));\n    assertTrue(writer.getMergeScheduler().getClass().getName().equals(SerialMergeScheduler.class.getName()));\n    duh.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig#testLegacy().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig#testLegacy().mjava","sourceNew":"  @Test\n  public void testLegacy() throws Exception {\n    ExposeWriterHandler duh = new ExposeWriterHandler();\n    IndexWriter writer = duh.getWriter();\n    assertTrue(writer.getConfig().getMergePolicy().getClass().getName().equals(LogDocMergePolicy.class.getName()));\n    assertTrue(writer.getConfig().getMergeScheduler().getClass().getName().equals(SerialMergeScheduler.class.getName()));\n    duh.close();\n  }\n\n","sourceOld":"  @Test\n  public void testLegacy() throws Exception {\n    ExposeWriterHandler duh = new ExposeWriterHandler();\n    IndexWriter writer = duh.getWriter();\n    assertTrue(writer.getMergePolicy().getClass().getName().equals(LogDocMergePolicy.class.getName()));\n    assertTrue(writer.getMergeScheduler().getClass().getName().equals(SerialMergeScheduler.class.getName()));\n    duh.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig#testLegacy().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig#testLegacy().mjava","sourceNew":"  @Test\n  public void testLegacy() throws Exception {\n    ExposeWriterHandler duh = new ExposeWriterHandler();\n    IndexWriter writer = duh.getWriter();\n    assertTrue(writer.getConfig().getMergePolicy().getClass().getName().equals(LogDocMergePolicy.class.getName()));\n    assertTrue(writer.getConfig().getMergeScheduler().getClass().getName().equals(SerialMergeScheduler.class.getName()));\n    duh.close();\n  }\n\n","sourceOld":"  public void testLegacy() throws Exception {\n    IndexWriter writer = new ExposeWriterHandler().getWriter();\n    assertTrue(writer.getMergePolicy().getClass().getName().equals(LogDocMergePolicy.class.getName()));\n    assertTrue(writer.getMergeScheduler().getClass().getName().equals(SerialMergeScheduler.class.getName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a71a0b2d4be2299a163f60626729852d81a8e02","date":1309442399,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig#testLegacy().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig#testLegacy().mjava","sourceNew":"  @Test\n  public void testLegacy() throws Exception {\n    IndexWriter writer = ((DirectUpdateHandler2)h.getCore().getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n    assertTrue(writer.getConfig().getMergePolicy().getClass().getName().equals(LogDocMergePolicy.class.getName()));\n    assertTrue(writer.getConfig().getMergeScheduler().getClass().getName().equals(SerialMergeScheduler.class.getName()));\n  }\n\n","sourceOld":"  @Test\n  public void testLegacy() throws Exception {\n    ExposeWriterHandler duh = new ExposeWriterHandler();\n    IndexWriter writer = duh.getWriter();\n    assertTrue(writer.getConfig().getMergePolicy().getClass().getName().equals(LogDocMergePolicy.class.getName()));\n    assertTrue(writer.getConfig().getMergeScheduler().getClass().getName().equals(SerialMergeScheduler.class.getName()));\n    duh.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig#testLegacy().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig#testLegacy().mjava","sourceNew":"  @Test\n  public void testLegacy() throws Exception {\n    IndexWriter writer = ((DirectUpdateHandler2)h.getCore().getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n    assertTrue(writer.getConfig().getMergePolicy().getClass().getName().equals(LogDocMergePolicy.class.getName()));\n    assertTrue(writer.getConfig().getMergeScheduler().getClass().getName().equals(SerialMergeScheduler.class.getName()));\n  }\n\n","sourceOld":"  @Test\n  public void testLegacy() throws Exception {\n    ExposeWriterHandler duh = new ExposeWriterHandler();\n    IndexWriter writer = duh.getWriter();\n    assertTrue(writer.getConfig().getMergePolicy().getClass().getName().equals(LogDocMergePolicy.class.getName()));\n    assertTrue(writer.getConfig().getMergeScheduler().getClass().getName().equals(SerialMergeScheduler.class.getName()));\n    duh.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig#testLegacy().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig#testLegacy().mjava","sourceNew":"  @Test\n  public void testLegacy() throws Exception {\n    IndexWriter writer = ((DirectUpdateHandler2)h.getCore().getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n    assertTrue(writer.getConfig().getMergePolicy().getClass().getName().equals(LogDocMergePolicy.class.getName()));\n    assertTrue(writer.getConfig().getMergeScheduler().getClass().getName().equals(SerialMergeScheduler.class.getName()));\n  }\n\n","sourceOld":"  @Test\n  public void testLegacy() throws Exception {\n    ExposeWriterHandler duh = new ExposeWriterHandler();\n    IndexWriter writer = duh.getWriter();\n    assertTrue(writer.getConfig().getMergePolicy().getClass().getName().equals(LogDocMergePolicy.class.getName()));\n    assertTrue(writer.getConfig().getMergeScheduler().getClass().getName().equals(SerialMergeScheduler.class.getName()));\n    duh.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig#testLegacy().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig#testLegacy().mjava","sourceNew":"  @Test\n  public void testLegacy() throws Exception {\n    IndexWriter writer = ((DirectUpdateHandler2)h.getCore().getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n    assertTrue(writer.getConfig().getMergePolicy().getClass().getName().equals(LogDocMergePolicy.class.getName()));\n    assertTrue(writer.getConfig().getMergeScheduler().getClass().getName().equals(SerialMergeScheduler.class.getName()));\n  }\n\n","sourceOld":"  @Test\n  public void testLegacy() throws Exception {\n    IndexWriter writer = ((DirectUpdateHandler2)h.getCore().getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n    assertTrue(writer.getConfig().getMergePolicy().getClass().getName().equals(LogDocMergePolicy.class.getName()));\n    assertTrue(writer.getConfig().getMergeScheduler().getClass().getName().equals(SerialMergeScheduler.class.getName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig#testLegacy().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig#testLegacy().mjava","sourceNew":"  @Test\n  public void testLegacy() throws Exception {\n    IndexWriter writer = ((DirectUpdateHandler2)h.getCore().getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n    assertTrue(writer.getConfig().getMergePolicy().getClass().getName().equals(LogDocMergePolicy.class.getName()));\n    assertTrue(writer.getConfig().getMergeScheduler().getClass().getName().equals(SerialMergeScheduler.class.getName()));\n  }\n\n","sourceOld":"  @Test\n  public void testLegacy() throws Exception {\n    IndexWriter writer = ((DirectUpdateHandler2)h.getCore().getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n    assertTrue(writer.getConfig().getMergePolicy().getClass().getName().equals(LogDocMergePolicy.class.getName()));\n    assertTrue(writer.getConfig().getMergeScheduler().getClass().getName().equals(SerialMergeScheduler.class.getName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig#testLegacy().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestLegacyMergeSchedulerPolicyConfig#testLegacy().mjava","sourceNew":"  @Test\n  public void testLegacy() throws Exception {\n    IndexWriter writer = ((DirectUpdateHandler2)h.getCore().getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n    assertTrue(writer.getConfig().getMergePolicy().getClass().getName().equals(LogDocMergePolicy.class.getName()));\n    assertTrue(writer.getConfig().getMergeScheduler().getClass().getName().equals(SerialMergeScheduler.class.getName()));\n  }\n\n","sourceOld":"  @Test\n  public void testLegacy() throws Exception {\n    IndexWriter writer = ((DirectUpdateHandler2)h.getCore().getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n    assertTrue(writer.getConfig().getMergePolicy().getClass().getName().equals(LogDocMergePolicy.class.getName()));\n    assertTrue(writer.getConfig().getMergeScheduler().getClass().getName().equals(SerialMergeScheduler.class.getName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"e9cf57819cbb539e98d64e410a033789b0b57cb0":["dff3adc4fd8094e3973a5ecbbe8968ae45a86a55"],"c26f00b574427b55127e869b935845554afde1fa":["7a71a0b2d4be2299a163f60626729852d81a8e02","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","725fea934ce47b55df40b00f5447f1c279d05242"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["dff3adc4fd8094e3973a5ecbbe8968ae45a86a55","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["4e8cc373c801e54cec75daf9f52792cb4b17f536","7a71a0b2d4be2299a163f60626729852d81a8e02"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["4e8cc373c801e54cec75daf9f52792cb4b17f536","7a71a0b2d4be2299a163f60626729852d81a8e02"],"7a71a0b2d4be2299a163f60626729852d81a8e02":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"dff3adc4fd8094e3973a5ecbbe8968ae45a86a55":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"725fea934ce47b55df40b00f5447f1c279d05242":["e9cf57819cbb539e98d64e410a033789b0b57cb0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["7a71a0b2d4be2299a163f60626729852d81a8e02"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["dff3adc4fd8094e3973a5ecbbe8968ae45a86a55","e9cf57819cbb539e98d64e410a033789b0b57cb0"],"3bb13258feba31ab676502787ab2e1779f129b7a":["b12d3e81e0f95a4527b5703953c503f71120ffcc","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["725fea934ce47b55df40b00f5447f1c279d05242"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"e9cf57819cbb539e98d64e410a033789b0b57cb0":["725fea934ce47b55df40b00f5447f1c279d05242","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["3bb13258feba31ab676502787ab2e1779f129b7a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"7a71a0b2d4be2299a163f60626729852d81a8e02":["c26f00b574427b55127e869b935845554afde1fa","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","a258fbb26824fd104ed795e5d9033d2d040049ee"],"1da8d55113b689b06716246649de6f62430f15c0":["dff3adc4fd8094e3973a5ecbbe8968ae45a86a55"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"dff3adc4fd8094e3973a5ecbbe8968ae45a86a55":["e9cf57819cbb539e98d64e410a033789b0b57cb0","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"725fea934ce47b55df40b00f5447f1c279d05242":["b12d3e81e0f95a4527b5703953c503f71120ffcc","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["b12d3e81e0f95a4527b5703953c503f71120ffcc"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","7a71a0b2d4be2299a163f60626729852d81a8e02","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","a258fbb26824fd104ed795e5d9033d2d040049ee","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}