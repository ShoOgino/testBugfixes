{"path":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","commits":[{"id":"bd0ef6574805f3cb9880e0983b7548a6aa933508","date":1315345052,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  public abstract void deleteByQuery(DeleteUpdateCommand cmd);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  public void deleteByQuery(DeleteUpdateCommand cmd) {\n    synchronized (this) {\n      long pos = -1;\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.writeDeleteByQuery(cmd);\n      }\n\n      // only change our caches if we are not buffering\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n        // given that we just did a delete-by-query, we don't know what documents were\n        // affected and hence we must purge our caches.\n        map.clear();\n\n        // oldDeletes.clear();\n\n        // We must cause a new IndexReader to be opened before anything looks at these caches again\n        // so that a cache miss will read fresh data.\n        //\n        // TODO: FUTURE: open a new searcher lazily for better throughput with delete-by-query commands\n        try {\n          RefCounted<SolrIndexSearcher> holder = uhandler.core.openNewSearcher(true, true);\n          holder.decref();\n        } catch (Throwable e) {\n          SolrException.log(log, \"Error opening realtime searcher for deleteByQuery\", e);\n        }\n\n      }\n\n      LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n\n      if (debug) {\n        log.debug(\"TLOG: added deleteByQuery \" + cmd.query + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n      }\n    }\n  }\n\n","sourceOld":"  public abstract void deleteByQuery(DeleteUpdateCommand cmd);\n\n","bugFix":null,"bugIntro":["e99829242bceda4cf974ec0eb5d82d713615b3da","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  public void deleteByQuery(DeleteUpdateCommand cmd) {\n    synchronized (this) {\n      long pos = -1;\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.writeDeleteByQuery(cmd);\n      }\n\n      // only change our caches if we are not buffering\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n        // given that we just did a delete-by-query, we don't know what documents were\n        // affected and hence we must purge our caches.\n        map.clear();\n\n        // oldDeletes.clear();\n\n        // We must cause a new IndexReader to be opened before anything looks at these caches again\n        // so that a cache miss will read fresh data.\n        //\n        // TODO: FUTURE: open a new searcher lazily for better throughput with delete-by-query commands\n        try {\n          RefCounted<SolrIndexSearcher> holder = uhandler.core.openNewSearcher(true, true);\n          holder.decref();\n        } catch (Throwable e) {\n          SolrException.log(log, \"Error opening realtime searcher for deleteByQuery\", e);\n        }\n\n      }\n\n      LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n\n      if (debug) {\n        log.debug(\"TLOG: added deleteByQuery \" + cmd.query + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n      }\n    }\n  }\n\n","sourceOld":"  public abstract void deleteByQuery(DeleteUpdateCommand cmd);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  public void deleteByQuery(DeleteUpdateCommand cmd) {\n    synchronized (this) {\n      long pos = -1;\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.writeDeleteByQuery(cmd);\n      }\n\n      // only change our caches if we are not buffering\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n        // given that we just did a delete-by-query, we don't know what documents were\n        // affected and hence we must purge our caches.\n        map.clear();\n\n        // oldDeletes.clear();\n\n        // We must cause a new IndexReader to be opened before anything looks at these caches again\n        // so that a cache miss will read fresh data.\n        //\n        // TODO: FUTURE: open a new searcher lazily for better throughput with delete-by-query commands\n        try {\n          RefCounted<SolrIndexSearcher> holder = uhandler.core.openNewSearcher(true, true);\n          holder.decref();\n        } catch (Throwable e) {\n          SolrException.log(log, \"Error opening realtime searcher for deleteByQuery\", e);\n        }\n\n      }\n\n      LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n\n      if (debug) {\n        log.debug(\"TLOG: added deleteByQuery \" + cmd.query + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n      }\n    }\n  }\n\n","sourceOld":"  public abstract void deleteByQuery(DeleteUpdateCommand cmd);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4404c73eb4b69219f283c2f08a34a08bfdb6327f","date":1327615748,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  public void deleteByQuery(DeleteUpdateCommand cmd) {\n    synchronized (this) {\n      long pos = -1;\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.writeDeleteByQuery(cmd);\n      }\n\n      // only change our caches if we are not buffering\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n        // given that we just did a delete-by-query, we don't know what documents were\n        // affected and hence we must purge our caches.\n        map.clear();\n\n        // oldDeletes.clear();\n\n        // We must cause a new IndexReader to be opened before anything looks at these caches again\n        // so that a cache miss will read fresh data.\n        //\n        // TODO: FUTURE: open a new searcher lazily for better throughput with delete-by-query commands\n        try {\n          RefCounted<SolrIndexSearcher> holder = uhandler.core.openNewSearcher(true, true);\n          holder.decref();\n        } catch (Throwable e) {\n          SolrException.log(log, \"Error opening realtime searcher for deleteByQuery\", e);\n        }\n\n      }\n\n      LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n\n      if (trace) {\n        log.trace(\"TLOG: added deleteByQuery \" + cmd.query + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n      }\n    }\n  }\n\n","sourceOld":"  public void deleteByQuery(DeleteUpdateCommand cmd) {\n    synchronized (this) {\n      long pos = -1;\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.writeDeleteByQuery(cmd);\n      }\n\n      // only change our caches if we are not buffering\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n        // given that we just did a delete-by-query, we don't know what documents were\n        // affected and hence we must purge our caches.\n        map.clear();\n\n        // oldDeletes.clear();\n\n        // We must cause a new IndexReader to be opened before anything looks at these caches again\n        // so that a cache miss will read fresh data.\n        //\n        // TODO: FUTURE: open a new searcher lazily for better throughput with delete-by-query commands\n        try {\n          RefCounted<SolrIndexSearcher> holder = uhandler.core.openNewSearcher(true, true);\n          holder.decref();\n        } catch (Throwable e) {\n          SolrException.log(log, \"Error opening realtime searcher for deleteByQuery\", e);\n        }\n\n      }\n\n      LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n\n      if (debug) {\n        log.debug(\"TLOG: added deleteByQuery \" + cmd.query + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"78a55f24d9b493c2a1cecf79f1d78279062b545b","date":1327688152,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  public void deleteByQuery(DeleteUpdateCommand cmd) {\n    synchronized (this) {\n      long pos = -1;\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.writeDeleteByQuery(cmd);\n      }\n\n      // only change our caches if we are not buffering\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n        // given that we just did a delete-by-query, we don't know what documents were\n        // affected and hence we must purge our caches.\n        map.clear();\n\n        // oldDeletes.clear();\n\n        // We must cause a new IndexReader to be opened before anything looks at these caches again\n        // so that a cache miss will read fresh data.\n        //\n        // TODO: FUTURE: open a new searcher lazily for better throughput with delete-by-query commands\n        try {\n          RefCounted<SolrIndexSearcher> holder = uhandler.core.openNewSearcher(true, true);\n          holder.decref();\n        } catch (Throwable e) {\n          SolrException.log(log, \"Error opening realtime searcher for deleteByQuery\", e);\n        }\n\n      }\n\n      LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n\n      if (trace) {\n        log.trace(\"TLOG: added deleteByQuery \" + cmd.query + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n      }\n    }\n  }\n\n","sourceOld":"  public void deleteByQuery(DeleteUpdateCommand cmd) {\n    synchronized (this) {\n      long pos = -1;\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.writeDeleteByQuery(cmd);\n      }\n\n      // only change our caches if we are not buffering\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n        // given that we just did a delete-by-query, we don't know what documents were\n        // affected and hence we must purge our caches.\n        map.clear();\n\n        // oldDeletes.clear();\n\n        // We must cause a new IndexReader to be opened before anything looks at these caches again\n        // so that a cache miss will read fresh data.\n        //\n        // TODO: FUTURE: open a new searcher lazily for better throughput with delete-by-query commands\n        try {\n          RefCounted<SolrIndexSearcher> holder = uhandler.core.openNewSearcher(true, true);\n          holder.decref();\n        } catch (Throwable e) {\n          SolrException.log(log, \"Error opening realtime searcher for deleteByQuery\", e);\n        }\n\n      }\n\n      LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n\n      if (debug) {\n        log.debug(\"TLOG: added deleteByQuery \" + cmd.query + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  public void deleteByQuery(DeleteUpdateCommand cmd) {\n    synchronized (this) {\n      long pos = -1;\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.writeDeleteByQuery(cmd);\n      }\n\n      // only change our caches if we are not buffering\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n        // given that we just did a delete-by-query, we don't know what documents were\n        // affected and hence we must purge our caches.\n        map.clear();\n\n        // oldDeletes.clear();\n\n        // We must cause a new IndexReader to be opened before anything looks at these caches again\n        // so that a cache miss will read fresh data.\n        //\n        // TODO: FUTURE: open a new searcher lazily for better throughput with delete-by-query commands\n        try {\n          RefCounted<SolrIndexSearcher> holder = uhandler.core.openNewSearcher(true, true);\n          holder.decref();\n        } catch (Throwable e) {\n          SolrException.log(log, \"Error opening realtime searcher for deleteByQuery\", e);\n        }\n\n      }\n\n      LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n\n      if (trace) {\n        log.trace(\"TLOG: added deleteByQuery \" + cmd.query + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n      }\n    }\n  }\n\n","sourceOld":"  public void deleteByQuery(DeleteUpdateCommand cmd) {\n    synchronized (this) {\n      long pos = -1;\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.writeDeleteByQuery(cmd);\n      }\n\n      // only change our caches if we are not buffering\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n        // given that we just did a delete-by-query, we don't know what documents were\n        // affected and hence we must purge our caches.\n        map.clear();\n\n        // oldDeletes.clear();\n\n        // We must cause a new IndexReader to be opened before anything looks at these caches again\n        // so that a cache miss will read fresh data.\n        //\n        // TODO: FUTURE: open a new searcher lazily for better throughput with delete-by-query commands\n        try {\n          RefCounted<SolrIndexSearcher> holder = uhandler.core.openNewSearcher(true, true);\n          holder.decref();\n        } catch (Throwable e) {\n          SolrException.log(log, \"Error opening realtime searcher for deleteByQuery\", e);\n        }\n\n      }\n\n      LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n\n      if (debug) {\n        log.debug(\"TLOG: added deleteByQuery \" + cmd.query + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e99829242bceda4cf974ec0eb5d82d713615b3da","date":1337646971,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  public void deleteByQuery(DeleteUpdateCommand cmd) {\n    synchronized (this) {\n      long pos = -1;\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.writeDeleteByQuery(cmd, operationFlags);\n      }\n\n      // only change our caches if we are not buffering\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n        // given that we just did a delete-by-query, we don't know what documents were\n        // affected and hence we must purge our caches.\n        map.clear();\n\n        // oldDeletes.clear();\n\n        // We must cause a new IndexReader to be opened before anything looks at these caches again\n        // so that a cache miss will read fresh data.\n        //\n        // TODO: FUTURE: open a new searcher lazily for better throughput with delete-by-query commands\n        try {\n          RefCounted<SolrIndexSearcher> holder = uhandler.core.openNewSearcher(true, true);\n          holder.decref();\n        } catch (Throwable e) {\n          SolrException.log(log, \"Error opening realtime searcher for deleteByQuery\", e);\n        }\n\n      }\n\n      LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n\n      if (trace) {\n        log.trace(\"TLOG: added deleteByQuery \" + cmd.query + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n      }\n    }\n  }\n\n","sourceOld":"  public void deleteByQuery(DeleteUpdateCommand cmd) {\n    synchronized (this) {\n      long pos = -1;\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.writeDeleteByQuery(cmd);\n      }\n\n      // only change our caches if we are not buffering\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n        // given that we just did a delete-by-query, we don't know what documents were\n        // affected and hence we must purge our caches.\n        map.clear();\n\n        // oldDeletes.clear();\n\n        // We must cause a new IndexReader to be opened before anything looks at these caches again\n        // so that a cache miss will read fresh data.\n        //\n        // TODO: FUTURE: open a new searcher lazily for better throughput with delete-by-query commands\n        try {\n          RefCounted<SolrIndexSearcher> holder = uhandler.core.openNewSearcher(true, true);\n          holder.decref();\n        } catch (Throwable e) {\n          SolrException.log(log, \"Error opening realtime searcher for deleteByQuery\", e);\n        }\n\n      }\n\n      LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n\n      if (trace) {\n        log.trace(\"TLOG: added deleteByQuery \" + cmd.query + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n      }\n    }\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3599646b4d4c346cf74d334813488b8b337b5bf5","date":1337790261,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  public void deleteByQuery(DeleteUpdateCommand cmd) {\n    synchronized (this) {\n      long pos = -1;\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.writeDeleteByQuery(cmd, operationFlags);\n      }\n\n      // only change our caches if we are not buffering\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n        // given that we just did a delete-by-query, we don't know what documents were\n        // affected and hence we must purge our caches.\n        map.clear();\n\n        // oldDeletes.clear();\n\n        // We must cause a new IndexReader to be opened before anything looks at these caches again\n        // so that a cache miss will read fresh data.\n        //\n        // TODO: FUTURE: open a new searcher lazily for better throughput with delete-by-query commands\n        try {\n          RefCounted<SolrIndexSearcher> holder = uhandler.core.openNewSearcher(true, true);\n          holder.decref();\n        } catch (Throwable e) {\n          SolrException.log(log, \"Error opening realtime searcher for deleteByQuery\", e);\n        }\n\n      }\n\n      LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n\n      if (trace) {\n        log.trace(\"TLOG: added deleteByQuery \" + cmd.query + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n      }\n    }\n  }\n\n","sourceOld":"  public void deleteByQuery(DeleteUpdateCommand cmd) {\n    synchronized (this) {\n      long pos = -1;\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.writeDeleteByQuery(cmd);\n      }\n\n      // only change our caches if we are not buffering\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n        // given that we just did a delete-by-query, we don't know what documents were\n        // affected and hence we must purge our caches.\n        map.clear();\n\n        // oldDeletes.clear();\n\n        // We must cause a new IndexReader to be opened before anything looks at these caches again\n        // so that a cache miss will read fresh data.\n        //\n        // TODO: FUTURE: open a new searcher lazily for better throughput with delete-by-query commands\n        try {\n          RefCounted<SolrIndexSearcher> holder = uhandler.core.openNewSearcher(true, true);\n          holder.decref();\n        } catch (Throwable e) {\n          SolrException.log(log, \"Error opening realtime searcher for deleteByQuery\", e);\n        }\n\n      }\n\n      LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n\n      if (trace) {\n        log.trace(\"TLOG: added deleteByQuery \" + cmd.query + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb999ed3fc6e419b9104de9ebfe62ace27f31d5f","date":1341327930,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  public void deleteByQuery(DeleteUpdateCommand cmd) {\n    synchronized (this) {\n      long pos = -1;\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.writeDeleteByQuery(cmd, operationFlags);\n      }\n\n      // only change our caches if we are not buffering\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n        // given that we just did a delete-by-query, we don't know what documents were\n        // affected and hence we must purge our caches.\n        map.clear();\n\n        trackDeleteByQuery(cmd.getQuery(), cmd.getVersion());\n\n        // oldDeletes.clear();\n\n        // We must cause a new IndexReader to be opened before anything looks at these caches again\n        // so that a cache miss will read fresh data.\n        //\n        // TODO: FUTURE: open a new searcher lazily for better throughput with delete-by-query commands\n        try {\n          RefCounted<SolrIndexSearcher> holder = uhandler.core.openNewSearcher(true, true);\n          holder.decref();\n        } catch (Throwable e) {\n          SolrException.log(log, \"Error opening realtime searcher for deleteByQuery\", e);\n        }\n\n      }\n\n      LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n\n      if (trace) {\n        log.trace(\"TLOG: added deleteByQuery \" + cmd.query + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n      }\n    }\n  }\n\n","sourceOld":"  public void deleteByQuery(DeleteUpdateCommand cmd) {\n    synchronized (this) {\n      long pos = -1;\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.writeDeleteByQuery(cmd, operationFlags);\n      }\n\n      // only change our caches if we are not buffering\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n        // given that we just did a delete-by-query, we don't know what documents were\n        // affected and hence we must purge our caches.\n        map.clear();\n\n        // oldDeletes.clear();\n\n        // We must cause a new IndexReader to be opened before anything looks at these caches again\n        // so that a cache miss will read fresh data.\n        //\n        // TODO: FUTURE: open a new searcher lazily for better throughput with delete-by-query commands\n        try {\n          RefCounted<SolrIndexSearcher> holder = uhandler.core.openNewSearcher(true, true);\n          holder.decref();\n        } catch (Throwable e) {\n          SolrException.log(log, \"Error opening realtime searcher for deleteByQuery\", e);\n        }\n\n      }\n\n      LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n\n      if (trace) {\n        log.trace(\"TLOG: added deleteByQuery \" + cmd.query + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"546049537cdccd28f8500e45543da67235f8e51b","date":1341426072,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  public void deleteByQuery(DeleteUpdateCommand cmd) {\n    synchronized (this) {\n      long pos = -1;\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.writeDeleteByQuery(cmd, operationFlags);\n      }\n\n      // only change our caches if we are not buffering\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n        // given that we just did a delete-by-query, we don't know what documents were\n        // affected and hence we must purge our caches.\n        if (map != null) map.clear();\n        if (prevMap != null) prevMap.clear();\n        if (prevMap2 != null) prevMap2.clear();\n\n        trackDeleteByQuery(cmd.getQuery(), cmd.getVersion());\n\n        // oldDeletes.clear();\n\n        // We must cause a new IndexReader to be opened before anything looks at these caches again\n        // so that a cache miss will read fresh data.\n        //\n        // TODO: FUTURE: open a new searcher lazily for better throughput with delete-by-query commands\n        try {\n          RefCounted<SolrIndexSearcher> holder = uhandler.core.openNewSearcher(true, true);\n          holder.decref();\n        } catch (Throwable e) {\n          SolrException.log(log, \"Error opening realtime searcher for deleteByQuery\", e);\n        }\n\n      }\n\n      LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n\n      if (trace) {\n        log.trace(\"TLOG: added deleteByQuery \" + cmd.query + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n      }\n    }\n  }\n\n","sourceOld":"  public void deleteByQuery(DeleteUpdateCommand cmd) {\n    synchronized (this) {\n      long pos = -1;\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.writeDeleteByQuery(cmd, operationFlags);\n      }\n\n      // only change our caches if we are not buffering\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n        // given that we just did a delete-by-query, we don't know what documents were\n        // affected and hence we must purge our caches.\n        map.clear();\n\n        trackDeleteByQuery(cmd.getQuery(), cmd.getVersion());\n\n        // oldDeletes.clear();\n\n        // We must cause a new IndexReader to be opened before anything looks at these caches again\n        // so that a cache miss will read fresh data.\n        //\n        // TODO: FUTURE: open a new searcher lazily for better throughput with delete-by-query commands\n        try {\n          RefCounted<SolrIndexSearcher> holder = uhandler.core.openNewSearcher(true, true);\n          holder.decref();\n        } catch (Throwable e) {\n          SolrException.log(log, \"Error opening realtime searcher for deleteByQuery\", e);\n        }\n\n      }\n\n      LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n\n      if (trace) {\n        log.trace(\"TLOG: added deleteByQuery \" + cmd.query + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  public void deleteByQuery(DeleteUpdateCommand cmd) {\n    synchronized (this) {\n      long pos = -1;\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.writeDeleteByQuery(cmd, operationFlags);\n      }\n\n      // only change our caches if we are not buffering\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n        // given that we just did a delete-by-query, we don't know what documents were\n        // affected and hence we must purge our caches.\n        if (map != null) map.clear();\n        if (prevMap != null) prevMap.clear();\n        if (prevMap2 != null) prevMap2.clear();\n\n        trackDeleteByQuery(cmd.getQuery(), cmd.getVersion());\n\n        // oldDeletes.clear();\n\n        // We must cause a new IndexReader to be opened before anything looks at these caches again\n        // so that a cache miss will read fresh data.\n        //\n        // TODO: FUTURE: open a new searcher lazily for better throughput with delete-by-query commands\n        try {\n          RefCounted<SolrIndexSearcher> holder = uhandler.core.openNewSearcher(true, true);\n          holder.decref();\n        } catch (Throwable e) {\n          SolrException.log(log, \"Error opening realtime searcher for deleteByQuery\", e);\n        }\n\n      }\n\n      LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n\n      if (trace) {\n        log.trace(\"TLOG: added deleteByQuery \" + cmd.query + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n      }\n    }\n  }\n\n","sourceOld":"  public void deleteByQuery(DeleteUpdateCommand cmd) {\n    synchronized (this) {\n      long pos = -1;\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.writeDeleteByQuery(cmd, operationFlags);\n      }\n\n      // only change our caches if we are not buffering\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n        // given that we just did a delete-by-query, we don't know what documents were\n        // affected and hence we must purge our caches.\n        map.clear();\n\n        // oldDeletes.clear();\n\n        // We must cause a new IndexReader to be opened before anything looks at these caches again\n        // so that a cache miss will read fresh data.\n        //\n        // TODO: FUTURE: open a new searcher lazily for better throughput with delete-by-query commands\n        try {\n          RefCounted<SolrIndexSearcher> holder = uhandler.core.openNewSearcher(true, true);\n          holder.decref();\n        } catch (Throwable e) {\n          SolrException.log(log, \"Error opening realtime searcher for deleteByQuery\", e);\n        }\n\n      }\n\n      LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n\n      if (trace) {\n        log.trace(\"TLOG: added deleteByQuery \" + cmd.query + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","date":1389633998,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  public void deleteByQuery(DeleteUpdateCommand cmd) {\n    synchronized (this) {\n      long pos = -1;\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.writeDeleteByQuery(cmd, operationFlags);\n      }\n\n      // only change our caches if we are not buffering\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n        // given that we just did a delete-by-query, we don't know what documents were\n        // affected and hence we must purge our caches.\n        if (map != null) map.clear();\n        if (prevMap != null) prevMap.clear();\n        if (prevMap2 != null) prevMap2.clear();\n\n        trackDeleteByQuery(cmd.getQuery(), cmd.getVersion());\n\n        // oldDeletes.clear();\n\n        // We must cause a new IndexReader to be opened before anything looks at these caches again\n        // so that a cache miss will read fresh data.\n        //\n        // TODO: FUTURE: open a new searcher lazily for better throughput with delete-by-query commands\n        try {\n          RefCounted<SolrIndexSearcher> holder = uhandler.core.openNewSearcher(true, true);\n          holder.decref();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error opening realtime searcher for deleteByQuery\", e);\n        }\n\n      }\n\n      LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n\n      if (trace) {\n        log.trace(\"TLOG: added deleteByQuery \" + cmd.query + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n      }\n    }\n  }\n\n","sourceOld":"  public void deleteByQuery(DeleteUpdateCommand cmd) {\n    synchronized (this) {\n      long pos = -1;\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.writeDeleteByQuery(cmd, operationFlags);\n      }\n\n      // only change our caches if we are not buffering\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n        // given that we just did a delete-by-query, we don't know what documents were\n        // affected and hence we must purge our caches.\n        if (map != null) map.clear();\n        if (prevMap != null) prevMap.clear();\n        if (prevMap2 != null) prevMap2.clear();\n\n        trackDeleteByQuery(cmd.getQuery(), cmd.getVersion());\n\n        // oldDeletes.clear();\n\n        // We must cause a new IndexReader to be opened before anything looks at these caches again\n        // so that a cache miss will read fresh data.\n        //\n        // TODO: FUTURE: open a new searcher lazily for better throughput with delete-by-query commands\n        try {\n          RefCounted<SolrIndexSearcher> holder = uhandler.core.openNewSearcher(true, true);\n          holder.decref();\n        } catch (Throwable e) {\n          SolrException.log(log, \"Error opening realtime searcher for deleteByQuery\", e);\n        }\n\n      }\n\n      LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n\n      if (trace) {\n        log.trace(\"TLOG: added deleteByQuery \" + cmd.query + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n      }\n    }\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b0085a9ec29ebc27be992a3712f4bd5d65d2106","date":1450912573,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  public void deleteByQuery(DeleteUpdateCommand cmd) {\n    synchronized (this) {\n      long pos = -1;\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.writeDeleteByQuery(cmd, operationFlags);\n      }\n\n      // only change our caches if we are not buffering\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n        // given that we just did a delete-by-query, we don't know what documents were\n        // affected and hence we must purge our caches.\n        openRealtimeSearcher();\n        trackDeleteByQuery(cmd.getQuery(), cmd.getVersion());\n\n        if (trace) {\n          LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n          log.trace(\"TLOG: added deleteByQuery \" + cmd.query + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void deleteByQuery(DeleteUpdateCommand cmd) {\n    synchronized (this) {\n      long pos = -1;\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.writeDeleteByQuery(cmd, operationFlags);\n      }\n\n      // only change our caches if we are not buffering\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n        // given that we just did a delete-by-query, we don't know what documents were\n        // affected and hence we must purge our caches.\n        if (map != null) map.clear();\n        if (prevMap != null) prevMap.clear();\n        if (prevMap2 != null) prevMap2.clear();\n\n        trackDeleteByQuery(cmd.getQuery(), cmd.getVersion());\n\n        // oldDeletes.clear();\n\n        // We must cause a new IndexReader to be opened before anything looks at these caches again\n        // so that a cache miss will read fresh data.\n        //\n        // TODO: FUTURE: open a new searcher lazily for better throughput with delete-by-query commands\n        try {\n          RefCounted<SolrIndexSearcher> holder = uhandler.core.openNewSearcher(true, true);\n          holder.decref();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error opening realtime searcher for deleteByQuery\", e);\n        }\n\n      }\n\n      LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n\n      if (trace) {\n        log.trace(\"TLOG: added deleteByQuery \" + cmd.query + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be320990bdc77e643388fa801e75017f19289c42","date":1489477067,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  public void deleteByQuery(DeleteUpdateCommand cmd) {\n    synchronized (this) {\n      long pos = -1;\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.writeDeleteByQuery(cmd, operationFlags);\n      }\n\n      // only change our caches if we are not buffering\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0 && (cmd.getFlags() & UpdateCommand.IGNORE_INDEXWRITER) == 0) {\n        // given that we just did a delete-by-query, we don't know what documents were\n        // affected and hence we must purge our caches.\n        openRealtimeSearcher();\n        trackDeleteByQuery(cmd.getQuery(), cmd.getVersion());\n\n        if (trace) {\n          LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n          log.trace(\"TLOG: added deleteByQuery \" + cmd.query + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void deleteByQuery(DeleteUpdateCommand cmd) {\n    synchronized (this) {\n      long pos = -1;\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.writeDeleteByQuery(cmd, operationFlags);\n      }\n\n      // only change our caches if we are not buffering\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n        // given that we just did a delete-by-query, we don't know what documents were\n        // affected and hence we must purge our caches.\n        openRealtimeSearcher();\n        trackDeleteByQuery(cmd.getQuery(), cmd.getVersion());\n\n        if (trace) {\n          LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n          log.trace(\"TLOG: added deleteByQuery \" + cmd.query + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f996f8177b9204bdc92f7164460c6cefad9ac99a","date":1489482690,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  public void deleteByQuery(DeleteUpdateCommand cmd) {\n    synchronized (this) {\n      long pos = -1;\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.writeDeleteByQuery(cmd, operationFlags);\n      }\n\n      // only change our caches if we are not buffering\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0 && (cmd.getFlags() & UpdateCommand.IGNORE_INDEXWRITER) == 0) {\n        // given that we just did a delete-by-query, we don't know what documents were\n        // affected and hence we must purge our caches.\n        openRealtimeSearcher();\n        trackDeleteByQuery(cmd.getQuery(), cmd.getVersion());\n\n        if (trace) {\n          LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n          log.trace(\"TLOG: added deleteByQuery \" + cmd.query + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void deleteByQuery(DeleteUpdateCommand cmd) {\n    synchronized (this) {\n      long pos = -1;\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.writeDeleteByQuery(cmd, operationFlags);\n      }\n\n      // only change our caches if we are not buffering\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n        // given that we just did a delete-by-query, we don't know what documents were\n        // affected and hence we must purge our caches.\n        openRealtimeSearcher();\n        trackDeleteByQuery(cmd.getQuery(), cmd.getVersion());\n\n        if (trace) {\n          LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n          log.trace(\"TLOG: added deleteByQuery \" + cmd.query + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  public void deleteByQuery(DeleteUpdateCommand cmd) {\n    synchronized (this) {\n      long pos = -1;\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.writeDeleteByQuery(cmd, operationFlags);\n      }\n\n      // only change our caches if we are not buffering\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0 && (cmd.getFlags() & UpdateCommand.IGNORE_INDEXWRITER) == 0) {\n        // given that we just did a delete-by-query, we don't know what documents were\n        // affected and hence we must purge our caches.\n        openRealtimeSearcher();\n        trackDeleteByQuery(cmd.getQuery(), cmd.getVersion());\n\n        if (trace) {\n          LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n          log.trace(\"TLOG: added deleteByQuery \" + cmd.query + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void deleteByQuery(DeleteUpdateCommand cmd) {\n    synchronized (this) {\n      long pos = -1;\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.writeDeleteByQuery(cmd, operationFlags);\n      }\n\n      // only change our caches if we are not buffering\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n        // given that we just did a delete-by-query, we don't know what documents were\n        // affected and hence we must purge our caches.\n        openRealtimeSearcher();\n        trackDeleteByQuery(cmd.getQuery(), cmd.getVersion());\n\n        if (trace) {\n          LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n          log.trace(\"TLOG: added deleteByQuery \" + cmd.query + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1455c941cc4ce652efc776fc23471b0e499246f6","date":1528086751,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  public void deleteByQuery(DeleteUpdateCommand cmd) {\n    synchronized (this) {\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) != 0) {\n        ensureBufferTlog();\n        bufferTlog.writeDeleteByQuery(cmd);\n        return;\n      }\n\n      long pos = -1;\n      if (!updateFromOldTlogs(cmd)) {\n        ensureLog();\n        pos = tlog.writeDeleteByQuery(cmd);\n      }\n\n      // skip purge our caches in case of tlog replica\n      if ((cmd.getFlags() & UpdateCommand.IGNORE_INDEXWRITER) == 0) {\n        // given that we just did a delete-by-query, we don't know what documents were\n        // affected and hence we must purge our caches.\n        openRealtimeSearcher();\n        trackDeleteByQuery(cmd.getQuery(), cmd.getVersion());\n\n        if (trace) {\n          LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n          log.trace(\"TLOG: added deleteByQuery \" + cmd.query + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void deleteByQuery(DeleteUpdateCommand cmd) {\n    synchronized (this) {\n      long pos = -1;\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.writeDeleteByQuery(cmd, operationFlags);\n      }\n\n      // only change our caches if we are not buffering\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0 && (cmd.getFlags() & UpdateCommand.IGNORE_INDEXWRITER) == 0) {\n        // given that we just did a delete-by-query, we don't know what documents were\n        // affected and hence we must purge our caches.\n        openRealtimeSearcher();\n        trackDeleteByQuery(cmd.getQuery(), cmd.getVersion());\n\n        if (trace) {\n          LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n          log.trace(\"TLOG: added deleteByQuery \" + cmd.query + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  public void deleteByQuery(DeleteUpdateCommand cmd) {\n    synchronized (this) {\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) != 0) {\n        ensureBufferTlog();\n        bufferTlog.writeDeleteByQuery(cmd);\n        return;\n      }\n\n      long pos = -1;\n      if (!updateFromOldTlogs(cmd)) {\n        ensureLog();\n        pos = tlog.writeDeleteByQuery(cmd);\n      }\n\n      // skip purge our caches in case of tlog replica\n      if ((cmd.getFlags() & UpdateCommand.IGNORE_INDEXWRITER) == 0) {\n        // given that we just did a delete-by-query, we don't know what documents were\n        // affected and hence we must purge our caches.\n        openRealtimeSearcher();\n        trackDeleteByQuery(cmd.getQuery(), cmd.getVersion());\n\n        if (trace) {\n          LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n          log.trace(\"TLOG: added deleteByQuery \" + cmd.query + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void deleteByQuery(DeleteUpdateCommand cmd) {\n    synchronized (this) {\n      long pos = -1;\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.writeDeleteByQuery(cmd, operationFlags);\n      }\n\n      // only change our caches if we are not buffering\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0 && (cmd.getFlags() & UpdateCommand.IGNORE_INDEXWRITER) == 0) {\n        // given that we just did a delete-by-query, we don't know what documents were\n        // affected and hence we must purge our caches.\n        openRealtimeSearcher();\n        trackDeleteByQuery(cmd.getQuery(), cmd.getVersion());\n\n        if (trace) {\n          LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n          log.trace(\"TLOG: added deleteByQuery \" + cmd.query + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  public void deleteByQuery(DeleteUpdateCommand cmd) {\n    synchronized (this) {\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) != 0) {\n        ensureBufferTlog();\n        bufferTlog.writeDeleteByQuery(cmd);\n        return;\n      }\n\n      long pos = -1;\n      if (!updateFromOldTlogs(cmd)) {\n        ensureLog();\n        pos = tlog.writeDeleteByQuery(cmd);\n      }\n\n      // skip purge our caches in case of tlog replica\n      if ((cmd.getFlags() & UpdateCommand.IGNORE_INDEXWRITER) == 0) {\n        // given that we just did a delete-by-query, we don't know what documents were\n        // affected and hence we must purge our caches.\n        openRealtimeSearcher();\n        trackDeleteByQuery(cmd.getQuery(), cmd.getVersion());\n\n        if (trace) {\n          LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n          log.trace(\"TLOG: added deleteByQuery \" + cmd.query + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void deleteByQuery(DeleteUpdateCommand cmd) {\n    synchronized (this) {\n      long pos = -1;\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.writeDeleteByQuery(cmd, operationFlags);\n      }\n\n      // only change our caches if we are not buffering\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0 && (cmd.getFlags() & UpdateCommand.IGNORE_INDEXWRITER) == 0) {\n        // given that we just did a delete-by-query, we don't know what documents were\n        // affected and hence we must purge our caches.\n        openRealtimeSearcher();\n        trackDeleteByQuery(cmd.getQuery(), cmd.getVersion());\n\n        if (trace) {\n          LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n          log.trace(\"TLOG: added deleteByQuery \" + cmd.query + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740d649f013f07efbeb73ca854f106c60166e7c0","date":1587431295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  public void deleteByQuery(DeleteUpdateCommand cmd) {\n    synchronized (this) {\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) != 0) {\n        ensureBufferTlog();\n        bufferTlog.writeDeleteByQuery(cmd);\n        return;\n      }\n\n      long pos = -1;\n      if (!updateFromOldTlogs(cmd)) {\n        ensureLog();\n        pos = tlog.writeDeleteByQuery(cmd);\n      }\n\n      // skip purge our caches in case of tlog replica\n      if ((cmd.getFlags() & UpdateCommand.IGNORE_INDEXWRITER) == 0) {\n        // given that we just did a delete-by-query, we don't know what documents were\n        // affected and hence we must purge our caches.\n        openRealtimeSearcher();\n        trackDeleteByQuery(cmd.getQuery(), cmd.getVersion());\n\n        if (trace) {\n          LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n          int hash = System.identityHashCode(map);\n          log.trace(\"TLOG: added deleteByQuery {} to {} {} map = {}.\", cmd.query, tlog, ptr, hash);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void deleteByQuery(DeleteUpdateCommand cmd) {\n    synchronized (this) {\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) != 0) {\n        ensureBufferTlog();\n        bufferTlog.writeDeleteByQuery(cmd);\n        return;\n      }\n\n      long pos = -1;\n      if (!updateFromOldTlogs(cmd)) {\n        ensureLog();\n        pos = tlog.writeDeleteByQuery(cmd);\n      }\n\n      // skip purge our caches in case of tlog replica\n      if ((cmd.getFlags() & UpdateCommand.IGNORE_INDEXWRITER) == 0) {\n        // given that we just did a delete-by-query, we don't know what documents were\n        // affected and hence we must purge our caches.\n        openRealtimeSearcher();\n        trackDeleteByQuery(cmd.getQuery(), cmd.getVersion());\n\n        if (trace) {\n          LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n          log.trace(\"TLOG: added deleteByQuery \" + cmd.query + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb999ed3fc6e419b9104de9ebfe62ace27f31d5f":["e99829242bceda4cf974ec0eb5d82d713615b3da"],"78a55f24d9b493c2a1cecf79f1d78279062b545b":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","4404c73eb4b69219f283c2f08a34a08bfdb6327f"],"740d649f013f07efbeb73ca854f106c60166e7c0":["1455c941cc4ce652efc776fc23471b0e499246f6"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["0d22ac6a4146774c1bc8400160fc0b6150294e92","4404c73eb4b69219f283c2f08a34a08bfdb6327f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["bd0ef6574805f3cb9880e0983b7548a6aa933508","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2b0085a9ec29ebc27be992a3712f4bd5d65d2106":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"4404c73eb4b69219f283c2f08a34a08bfdb6327f":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"1455c941cc4ce652efc776fc23471b0e499246f6":["be320990bdc77e643388fa801e75017f19289c42"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["bd0ef6574805f3cb9880e0983b7548a6aa933508","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f996f8177b9204bdc92f7164460c6cefad9ac99a":["2b0085a9ec29ebc27be992a3712f4bd5d65d2106"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["e99829242bceda4cf974ec0eb5d82d713615b3da","546049537cdccd28f8500e45543da67235f8e51b"],"546049537cdccd28f8500e45543da67235f8e51b":["fb999ed3fc6e419b9104de9ebfe62ace27f31d5f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["be320990bdc77e643388fa801e75017f19289c42","1455c941cc4ce652efc776fc23471b0e499246f6"],"3599646b4d4c346cf74d334813488b8b337b5bf5":["4404c73eb4b69219f283c2f08a34a08bfdb6327f","e99829242bceda4cf974ec0eb5d82d713615b3da"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"be320990bdc77e643388fa801e75017f19289c42":["2b0085a9ec29ebc27be992a3712f4bd5d65d2106"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["546049537cdccd28f8500e45543da67235f8e51b"],"e99829242bceda4cf974ec0eb5d82d713615b3da":["4404c73eb4b69219f283c2f08a34a08bfdb6327f"],"f592209545c71895260367152601e9200399776d":["be320990bdc77e643388fa801e75017f19289c42","1455c941cc4ce652efc776fc23471b0e499246f6"],"ab68488225b6a6c357dda72ed11dedca9914a192":["2b0085a9ec29ebc27be992a3712f4bd5d65d2106","f996f8177b9204bdc92f7164460c6cefad9ac99a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["740d649f013f07efbeb73ca854f106c60166e7c0"]},"commit2Childs":{"fb999ed3fc6e419b9104de9ebfe62ace27f31d5f":["546049537cdccd28f8500e45543da67235f8e51b"],"78a55f24d9b493c2a1cecf79f1d78279062b545b":[],"740d649f013f07efbeb73ca854f106c60166e7c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["78a55f24d9b493c2a1cecf79f1d78279062b545b"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"4404c73eb4b69219f283c2f08a34a08bfdb6327f":["78a55f24d9b493c2a1cecf79f1d78279062b545b","fd92b8bcc88e969302510acf77bd6970da3994c4","3599646b4d4c346cf74d334813488b8b337b5bf5","e99829242bceda4cf974ec0eb5d82d713615b3da"],"2b0085a9ec29ebc27be992a3712f4bd5d65d2106":["f996f8177b9204bdc92f7164460c6cefad9ac99a","be320990bdc77e643388fa801e75017f19289c42","ab68488225b6a6c357dda72ed11dedca9914a192"],"1455c941cc4ce652efc776fc23471b0e499246f6":["740d649f013f07efbeb73ca854f106c60166e7c0","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["fd92b8bcc88e969302510acf77bd6970da3994c4"],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"f996f8177b9204bdc92f7164460c6cefad9ac99a":["ab68488225b6a6c357dda72ed11dedca9914a192"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"546049537cdccd28f8500e45543da67235f8e51b":["fe33227f6805edab2036cbb80645cc4e2d1fa424","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"3599646b4d4c346cf74d334813488b8b337b5bf5":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","4404c73eb4b69219f283c2f08a34a08bfdb6327f","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"e99829242bceda4cf974ec0eb5d82d713615b3da":["fb999ed3fc6e419b9104de9ebfe62ace27f31d5f","fe33227f6805edab2036cbb80645cc4e2d1fa424","3599646b4d4c346cf74d334813488b8b337b5bf5"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["2b0085a9ec29ebc27be992a3712f4bd5d65d2106"],"be320990bdc77e643388fa801e75017f19289c42":["1455c941cc4ce652efc776fc23471b0e499246f6","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"f592209545c71895260367152601e9200399776d":[],"ab68488225b6a6c357dda72ed11dedca9914a192":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["78a55f24d9b493c2a1cecf79f1d78279062b545b","fd92b8bcc88e969302510acf77bd6970da3994c4","fe33227f6805edab2036cbb80645cc4e2d1fa424","b70042a8a492f7054d480ccdd2be9796510d4327","3599646b4d4c346cf74d334813488b8b337b5bf5","f592209545c71895260367152601e9200399776d","ab68488225b6a6c357dda72ed11dedca9914a192","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}