{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerms(Term...).mjava","commits":[{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerms(Term...).mjava","pathOld":"/dev/null","sourceNew":"  boolean deleteTerms(Term... terms) {\n    final boolean doFlush = flushControl.waitUpdate(0, terms.length);\n    synchronized(this) {\n      for (Term term : terms) {\n        pendingDeletes.addTerm(term, numDocsInRAM);\n      }\n    }\n    return doFlush;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","date":1292695408,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerms(Term...).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerms(Term...).mjava","sourceNew":"  boolean deleteTerms(Term... terms) {\n    final boolean doFlush = flushControl.waitUpdate(0, terms.length);\n    synchronized(this) {\n      for (Term term : terms) {\n        pendingDeletes.addTerm(term, numDocs);\n      }\n    }\n    return doFlush;\n  }\n\n","sourceOld":"  boolean deleteTerms(Term... terms) {\n    final boolean doFlush = flushControl.waitUpdate(0, terms.length);\n    synchronized(this) {\n      for (Term term : terms) {\n        pendingDeletes.addTerm(term, numDocsInRAM);\n      }\n    }\n    return doFlush;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerms(Term...).mjava","pathOld":"/dev/null","sourceNew":"  boolean deleteTerms(Term... terms) {\n    final boolean doFlush = flushControl.waitUpdate(0, terms.length);\n    synchronized(this) {\n      for (Term term : terms) {\n        pendingDeletes.addTerm(term, numDocs);\n      }\n    }\n    return doFlush;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerms(Term...).mjava","pathOld":"/dev/null","sourceNew":"  boolean deleteTerms(Term... terms) {\n    final boolean doFlush = flushControl.waitUpdate(0, terms.length);\n    Iterator<DocumentsWriterPerThread> it = threadPool.getPerThreadIterator();\n    while (it.hasNext()) {\n      it.next().deleteTerms(terms);\n    }\n    return doFlush;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff78505662c0b741e2663a9f38a4889c12a32c9f","date":1294908561,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerms(Term...).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerms(Term...).mjava","sourceNew":"  boolean deleteTerms(final Term... terms) throws IOException {\n    Iterator<ThreadState> threadsIterator = perThreadPool.getActivePerThreadsIterator();\n\n    boolean added = false;\n    while (threadsIterator.hasNext()) {\n      threadsIterator.next().perThread.deleteTerms(terms);\n      added = true;\n    }\n\n    if (!added) {\n      synchronized(this) {\n        for (Term term : terms) {\n          pendingDeletes.addTerm(term, SegmentDeletes.MAX_INT);\n        }\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  boolean deleteTerms(Term... terms) {\n    final boolean doFlush = flushControl.waitUpdate(0, terms.length);\n    Iterator<DocumentsWriterPerThread> it = threadPool.getPerThreadIterator();\n    while (it.hasNext()) {\n      it.next().deleteTerms(terms);\n    }\n    return doFlush;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14975dba6846360ff627c6797726fa4899a3413d","date":1295174738,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerms(Term...).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerms(Term...).mjava","sourceNew":"  boolean deleteTerms(final Term... terms) throws IOException {\n    Iterator<ThreadState> threadsIterator = perThreadPool.getActivePerThreadsIterator();\n\n    boolean deleted = false;\n    while (threadsIterator.hasNext()) {\n      ThreadState state = threadsIterator.next();\n      deleted = true;\n      state.lock();\n      try {\n        state.perThread.deleteTerms(terms);\n      } finally {\n        state.unlock();\n      }\n    }\n\n    if (!deleted) {\n      synchronized(this) {\n        for (Term term : terms) {\n          pendingDeletes.addTerm(term, SegmentDeletes.MAX_INT);\n        }\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  boolean deleteTerms(final Term... terms) throws IOException {\n    Iterator<ThreadState> threadsIterator = perThreadPool.getActivePerThreadsIterator();\n\n    boolean added = false;\n    while (threadsIterator.hasNext()) {\n      threadsIterator.next().perThread.deleteTerms(terms);\n      added = true;\n    }\n\n    if (!added) {\n      synchronized(this) {\n        for (Term term : terms) {\n          pendingDeletes.addTerm(term, SegmentDeletes.MAX_INT);\n        }\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerms(Term...).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerms(Term...).mjava","sourceNew":"  boolean deleteTerms(final Term... terms) throws IOException {\n    Iterator<ThreadState> threadsIterator = perThreadPool.getActivePerThreadsIterator();\n\n    boolean deleted = false;\n    while (threadsIterator.hasNext()) {\n      ThreadState state = threadsIterator.next();\n      deleted = true;\n      state.lock();\n      try {\n        state.perThread.deleteTerms(terms);\n      } finally {\n        state.unlock();\n      }\n    }\n\n    if (!deleted) {\n      synchronized(this) {\n        for (Term term : terms) {\n          pendingDeletes.addTerm(term, BufferedDeletes.MAX_INT);\n        }\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  boolean deleteTerms(final Term... terms) throws IOException {\n    Iterator<ThreadState> threadsIterator = perThreadPool.getActivePerThreadsIterator();\n\n    boolean deleted = false;\n    while (threadsIterator.hasNext()) {\n      ThreadState state = threadsIterator.next();\n      deleted = true;\n      state.lock();\n      try {\n        state.perThread.deleteTerms(terms);\n      } finally {\n        state.unlock();\n      }\n    }\n\n    if (!deleted) {\n      synchronized(this) {\n        for (Term term : terms) {\n          pendingDeletes.addTerm(term, SegmentDeletes.MAX_INT);\n        }\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfaa69f5e3b29a90ec41762bfbfa166a9e52eccf","date":1298618128,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerms(Term...).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerms(Term...).mjava","sourceNew":"  boolean deleteTerms(final Term... terms) throws IOException {\n    synchronized(this) {\n      for (Term term : terms) {\n        pendingDeletes.addTerm(term, BufferedDeletes.MAX_INT);\n      }\n    }\n\n    Iterator<ThreadState> threadsIterator = perThreadPool.getActivePerThreadsIterator();\n\n    while (threadsIterator.hasNext()) {\n      ThreadState state = threadsIterator.next();\n      state.lock();\n      try {\n        state.perThread.deleteTerms(terms);\n      } finally {\n        state.unlock();\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  boolean deleteTerms(final Term... terms) throws IOException {\n    Iterator<ThreadState> threadsIterator = perThreadPool.getActivePerThreadsIterator();\n\n    boolean deleted = false;\n    while (threadsIterator.hasNext()) {\n      ThreadState state = threadsIterator.next();\n      deleted = true;\n      state.lock();\n      try {\n        state.perThread.deleteTerms(terms);\n      } finally {\n        state.unlock();\n      }\n    }\n\n    if (!deleted) {\n      synchronized(this) {\n        for (Term term : terms) {\n          pendingDeletes.addTerm(term, BufferedDeletes.MAX_INT);\n        }\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2ed1b9b7b46829fe3199afe9a8bc203f201b175","date":1301491807,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerms(Term...).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerms(Term...).mjava","sourceNew":"  boolean deleteTerms(final Term... terms) throws IOException {\n    synchronized(this) {\n      for (Term term : terms) {\n        pendingDeletes.addTerm(term, BufferedDeletes.MAX_INT);\n      }\n    }\n\n    Iterator<ThreadState> threadsIterator = perThreadPool.getActivePerThreadsIterator();\n\n    while (threadsIterator.hasNext()) {\n      ThreadState state = threadsIterator.next();\n      state.lock();\n      try {\n        if (state.isActive()) {\n          state.perThread.deleteTerms(terms);\n          flushControl.doOnDelete(state);\n        }\n      } finally {\n        state.unlock();\n      }\n    }\n    if (flushControl.flushDeletes.getAndSet(false)) {\n      flushDeletes();\n    }\n    return false;\n  }\n\n","sourceOld":"  boolean deleteTerms(final Term... terms) throws IOException {\n    synchronized(this) {\n      for (Term term : terms) {\n        pendingDeletes.addTerm(term, BufferedDeletes.MAX_INT);\n      }\n    }\n\n    Iterator<ThreadState> threadsIterator = perThreadPool.getActivePerThreadsIterator();\n\n    while (threadsIterator.hasNext()) {\n      ThreadState state = threadsIterator.next();\n      state.lock();\n      try {\n        state.perThread.deleteTerms(terms);\n      } finally {\n        state.unlock();\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"327863a2fd61e831028b6c56c8fef6b00a44eb0b","date":1302686439,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerms(Term...).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerms(Term...).mjava","sourceNew":"  synchronized boolean deleteTerms(final Term... terms) throws IOException {\n    final DocumentsWriterDeleteQueue deleteQueue = this.deleteQueue;\n    deleteQueue.addDelete(terms);\n    flushControl.doOnDelete();\n    if (flushControl.flushDeletes.getAndSet(false)) {\n      flushDeletes(deleteQueue);\n    }\n    return false;\n  }\n\n","sourceOld":"  boolean deleteTerms(final Term... terms) throws IOException {\n    synchronized(this) {\n      for (Term term : terms) {\n        pendingDeletes.addTerm(term, BufferedDeletes.MAX_INT);\n      }\n    }\n\n    Iterator<ThreadState> threadsIterator = perThreadPool.getActivePerThreadsIterator();\n\n    while (threadsIterator.hasNext()) {\n      ThreadState state = threadsIterator.next();\n      state.lock();\n      try {\n        if (state.isActive()) {\n          state.perThread.deleteTerms(terms);\n          flushControl.doOnDelete(state);\n        }\n      } finally {\n        state.unlock();\n      }\n    }\n    if (flushControl.flushDeletes.getAndSet(false)) {\n      flushDeletes();\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6f4cae61e16730201371ab7e9912721c19324e7","date":1303199575,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerms(Term...).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerms(Term...).mjava","sourceNew":"  synchronized boolean deleteTerms(final Term... terms) throws IOException {\n    final DocumentsWriterDeleteQueue deleteQueue = this.deleteQueue;\n    deleteQueue.addDelete(terms);\n    flushControl.doOnDelete();\n    if (flushControl.doApplyAllDeletes()) {\n      applyAllDeletes(deleteQueue);\n    }\n    // nocommit shouldn't this consult flush policy?  or\n    // should this return void now?\n    return false;\n  }\n\n","sourceOld":"  synchronized boolean deleteTerms(final Term... terms) throws IOException {\n    final DocumentsWriterDeleteQueue deleteQueue = this.deleteQueue;\n    deleteQueue.addDelete(terms);\n    flushControl.doOnDelete();\n    if (flushControl.flushDeletes.getAndSet(false)) {\n      flushDeletes(deleteQueue);\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4","date":1303818069,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerms(Term...).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerms(Term...).mjava","sourceNew":"  // TODO: we could check w/ FreqProxTermsWriter: if the\n  // term doesn't exist, don't bother buffering into the\n  // per-DWPT map (but still must go into the global map)\n  synchronized void deleteTerms(final Term... terms) throws IOException {\n    final DocumentsWriterDeleteQueue deleteQueue = this.deleteQueue;\n    deleteQueue.addDelete(terms);\n    flushControl.doOnDelete();\n    if (flushControl.doApplyAllDeletes()) {\n      applyAllDeletes(deleteQueue);\n    }\n  }\n\n","sourceOld":"  synchronized boolean deleteTerms(final Term... terms) throws IOException {\n    final DocumentsWriterDeleteQueue deleteQueue = this.deleteQueue;\n    deleteQueue.addDelete(terms);\n    flushControl.doOnDelete();\n    if (flushControl.doApplyAllDeletes()) {\n      applyAllDeletes(deleteQueue);\n    }\n    // nocommit shouldn't this consult flush policy?  or\n    // should this return void now?\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerms(Term...).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerms(Term...).mjava","sourceNew":"  // TODO: we could check w/ FreqProxTermsWriter: if the\n  // term doesn't exist, don't bother buffering into the\n  // per-DWPT map (but still must go into the global map)\n  synchronized void deleteTerms(final Term... terms) throws IOException {\n    final DocumentsWriterDeleteQueue deleteQueue = this.deleteQueue;\n    deleteQueue.addDelete(terms);\n    flushControl.doOnDelete();\n    if (flushControl.doApplyAllDeletes()) {\n      applyAllDeletes(deleteQueue);\n    }\n  }\n\n","sourceOld":"  boolean deleteTerms(Term... terms) {\n    final boolean doFlush = flushControl.waitUpdate(0, terms.length);\n    synchronized(this) {\n      for (Term term : terms) {\n        pendingDeletes.addTerm(term, numDocs);\n      }\n    }\n    return doFlush;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerms(Term...).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerms(Term...).mjava","sourceNew":"  // TODO: we could check w/ FreqProxTermsWriter: if the\n  // term doesn't exist, don't bother buffering into the\n  // per-DWPT map (but still must go into the global map)\n  synchronized void deleteTerms(final Term... terms) throws IOException {\n    final DocumentsWriterDeleteQueue deleteQueue = this.deleteQueue;\n    deleteQueue.addDelete(terms);\n    flushControl.doOnDelete();\n    if (flushControl.doApplyAllDeletes()) {\n      applyAllDeletes(deleteQueue);\n    }\n  }\n\n","sourceOld":"  boolean deleteTerms(Term... terms) {\n    final boolean doFlush = flushControl.waitUpdate(0, terms.length);\n    synchronized(this) {\n      for (Term term : terms) {\n        pendingDeletes.addTerm(term, numDocs);\n      }\n    }\n    return doFlush;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerms(Term...).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerms(Term...).mjava","sourceNew":"  // TODO: we could check w/ FreqProxTermsWriter: if the\n  // term doesn't exist, don't bother buffering into the\n  // per-DWPT map (but still must go into the global map)\n  synchronized void deleteTerms(final Term... terms) throws IOException {\n    final DocumentsWriterDeleteQueue deleteQueue = this.deleteQueue;\n    deleteQueue.addDelete(terms);\n    flushControl.doOnDelete();\n    if (flushControl.doApplyAllDeletes()) {\n      applyAllDeletes(deleteQueue);\n    }\n  }\n\n","sourceOld":"  boolean deleteTerms(Term... terms) {\n    final boolean doFlush = flushControl.waitUpdate(0, terms.length);\n    synchronized(this) {\n      for (Term term : terms) {\n        pendingDeletes.addTerm(term, numDocs);\n      }\n    }\n    return doFlush;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerms(Term...).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerms(Term...).mjava","sourceNew":"  // TODO: we could check w/ FreqProxTermsWriter: if the\n  // term doesn't exist, don't bother buffering into the\n  // per-DWPT map (but still must go into the global map)\n  synchronized void deleteTerms(final Term... terms) throws IOException {\n    final DocumentsWriterDeleteQueue deleteQueue = this.deleteQueue;\n    deleteQueue.addDelete(terms);\n    flushControl.doOnDelete();\n    if (flushControl.doApplyAllDeletes()) {\n      applyAllDeletes(deleteQueue);\n    }\n  }\n\n","sourceOld":"  // TODO: we could check w/ FreqProxTermsWriter: if the\n  // term doesn't exist, don't bother buffering into the\n  // per-DWPT map (but still must go into the global map)\n  synchronized void deleteTerms(final Term... terms) throws IOException {\n    final DocumentsWriterDeleteQueue deleteQueue = this.deleteQueue;\n    deleteQueue.addDelete(terms);\n    flushControl.doOnDelete();\n    if (flushControl.doApplyAllDeletes()) {\n      applyAllDeletes(deleteQueue);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff78505662c0b741e2663a9f38a4889c12a32c9f":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4":["f6f4cae61e16730201371ab7e9912721c19324e7"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"f6f4cae61e16730201371ab7e9912721c19324e7":["327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["bfaa69f5e3b29a90ec41762bfbfa166a9e52eccf"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bfaa69f5e3b29a90ec41762bfbfa166a9e52eccf":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"14975dba6846360ff627c6797726fa4899a3413d":["ff78505662c0b741e2663a9f38a4889c12a32c9f"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["14975dba6846360ff627c6797726fa4899a3413d","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ff78505662c0b741e2663a9f38a4889c12a32c9f":["14975dba6846360ff627c6797726fa4899a3413d"],"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["ff78505662c0b741e2663a9f38a4889c12a32c9f"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["f6f4cae61e16730201371ab7e9912721c19324e7"],"f6f4cae61e16730201371ab7e9912721c19324e7":["761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4"],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"bfaa69f5e3b29a90ec41762bfbfa166a9e52eccf":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"14975dba6846360ff627c6797726fa4899a3413d":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a3776dccca01c11e7046323cfad46a3b4a471233","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["bfaa69f5e3b29a90ec41762bfbfa166a9e52eccf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}