{"path":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toNamedList(MetricRegistry,List[MetricFilter],MetricFilter,boolean,boolean,boolean).mjava","commits":[{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toNamedList(MetricRegistry,List[MetricFilter],MetricFilter,boolean,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toNamedList(MetricRegistry,List[MetricFilter],MetricFilter,boolean,boolean,boolean,Map[String,Object]).mjava","sourceNew":"  /**\n   * Returns a NamedList representation of the given metric registry. Only those metrics\n   * are converted to NamedList which match at least one of the given MetricFilter instances.\n   *\n   * @param registry      the {@link MetricRegistry} to be converted to NamedList\n   * @param shouldMatchFilters a list of {@link MetricFilter} instances.\n   *                           A metric must match <em>any one</em> of the filters from this list to be\n   *                           included in the output\n   * @param mustMatchFilter a {@link MetricFilter}.\n   *                        A metric <em>must</em> match this filter to be included in the output.\n   * @param skipHistograms discard any {@link Histogram}-s and histogram parts of {@link Timer}-s.\n   * @param compact use compact representation for counters and gauges.\n   * @return a {@link NamedList}\n   */\n  public static NamedList toNamedList(MetricRegistry registry, List<MetricFilter> shouldMatchFilters,\n                                      MetricFilter mustMatchFilter, boolean skipHistograms,\n                                      boolean skipAggregateValues, boolean compact) {\n    NamedList result = new SimpleOrderedMap();\n    toMaps(registry, shouldMatchFilters, mustMatchFilter, skipHistograms, skipAggregateValues, compact, false, (k, v) -> {\n      result.add(k, v);\n    });\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns a NamedList representation of the given metric registry. Only those metrics\n   * are converted to NamedList which match at least one of the given MetricFilter instances.\n   *\n   * @param registry      the {@link MetricRegistry} to be converted to NamedList\n   * @param shouldMatchFilters a list of {@link MetricFilter} instances.\n   *                           A metric must match <em>any one</em> of the filters from this list to be\n   *                           included in the output\n   * @param mustMatchFilter a {@link MetricFilter}.\n   *                        A metric <em>must</em> match this filter to be included in the output.\n   * @param skipHistograms discard any {@link Histogram}-s and histogram parts of {@link Timer}-s.\n   * @param compact use compact representation for counters and gauges.\n   * @param metadata optional metadata. If not null and not empty then this map will be added under a\n   *                 {@code _metadata_} key.\n   * @return a {@link NamedList}\n   */\n  public static NamedList toNamedList(MetricRegistry registry, List<MetricFilter> shouldMatchFilters,\n                                      MetricFilter mustMatchFilter, boolean skipHistograms,\n                                      boolean skipAggregateValues, boolean compact,\n                                      Map<String, Object> metadata) {\n    NamedList result = new SimpleOrderedMap();\n    toMaps(registry, shouldMatchFilters, mustMatchFilter, skipHistograms, skipAggregateValues, compact, (k, v) -> {\n      result.add(k, v);\n    });\n    if (metadata != null && !metadata.isEmpty()) {\n      result.add(\"_metadata_\", metadata);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d6879a535f14bc53be7c86de58142558c4f9eee","date":1492512399,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toNamedList(MetricRegistry,List[MetricFilter],MetricFilter,boolean,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a NamedList representation of the given metric registry. Only those metrics\n   * are converted to NamedList which match at least one of the given MetricFilter instances.\n   *\n   * @param registry      the {@link MetricRegistry} to be converted to NamedList\n   * @param shouldMatchFilters a list of {@link MetricFilter} instances.\n   *                           A metric must match <em>any one</em> of the filters from this list to be\n   *                           included in the output\n   * @param mustMatchFilter a {@link MetricFilter}.\n   *                        A metric <em>must</em> match this filter to be included in the output.\n   * @param skipHistograms discard any {@link Histogram}-s and histogram parts of {@link Timer}-s.\n   * @param compact use compact representation for counters and gauges.\n   * @return a {@link NamedList}\n   */\n  public static NamedList toNamedList(MetricRegistry registry, List<MetricFilter> shouldMatchFilters,\n                                      MetricFilter mustMatchFilter, boolean skipHistograms,\n                                      boolean skipAggregateValues, boolean compact) {\n    NamedList result = new SimpleOrderedMap();\n    toMaps(registry, shouldMatchFilters, mustMatchFilter, skipHistograms, skipAggregateValues, compact, false, (k, v) -> {\n      result.add(k, v);\n    });\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d6879a535f14bc53be7c86de58142558c4f9eee"],"0d6879a535f14bc53be7c86de58142558c4f9eee":["816521ebaad5add9cb96bb88c577394e2938c40b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["0d6879a535f14bc53be7c86de58142558c4f9eee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0d6879a535f14bc53be7c86de58142558c4f9eee":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}