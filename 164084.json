{"path":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testJSONSolrDocument().mjava","commits":[{"id":"fe874d5dba38e8313b2090a3d7335f4a39269336","date":1474455035,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testJSONSolrDocument().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testJSONSolrDocument() throws IOException {\n    SolrQueryRequest req = req(CommonParams.WT,\"json\",\n                               CommonParams.FL,\"id,score\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    ReturnFields returnFields = new SolrReturnFields(req);\n    rsp.setReturnFields(returnFields);\n\n    StringWriter buf = new StringWriter();\n\n    SolrDocument solrDoc = new SolrDocument();\n    solrDoc.addField(\"id\", \"1\");\n    solrDoc.addField(\"subject\", \"hello2\");\n    solrDoc.addField(\"title\", \"hello3\");\n    solrDoc.addField(\"score\", \"0.7\");\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(1);\n    list.setStart(0);\n    list.setMaxScore(0.7f);\n    list.add(solrDoc);\n\n    rsp.addResponse(list);\n\n    w.write(buf, req, rsp);\n    String result = buf.toString();\n    assertFalse(\"response contains unexpected fields: \" + result, \n                result.contains(\"hello\") || \n                result.contains(\"\\\"subject\\\"\") || \n                result.contains(\"\\\"title\\\"\"));\n    assertTrue(\"response doesn't contain expected fields: \" + result, \n               result.contains(\"\\\"id\\\"\") &&\n               result.contains(\"\\\"score\\\"\"));\n\n\n    req.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testJSONSolrDocument().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testJSONSolrDocument().mjava","sourceNew":"  @Test\n  public void testJSONSolrDocument() throws IOException {\n    SolrQueryRequest req = req(CommonParams.WT,\"json\",\n                               CommonParams.FL,\"id,score\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    ReturnFields returnFields = new SolrReturnFields(req);\n    rsp.setReturnFields(returnFields);\n\n    StringWriter buf = new StringWriter();\n\n    SolrDocument solrDoc = new SolrDocument();\n    solrDoc.addField(\"id\", \"1\");\n    solrDoc.addField(\"subject\", \"hello2\");\n    solrDoc.addField(\"title\", \"hello3\");\n    solrDoc.addField(\"score\", \"0.7\");\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(1);\n    list.setStart(0);\n    list.setMaxScore(0.7f);\n    list.add(solrDoc);\n\n    rsp.addResponse(list);\n\n    w.write(buf, req, rsp);\n    String result = buf.toString();\n    assertFalse(\"response contains unexpected fields: \" + result, \n                result.contains(\"hello\") || \n                result.contains(\"\\\"subject\\\"\") || \n                result.contains(\"\\\"title\\\"\"));\n    assertTrue(\"response doesn't contain expected fields: \" + result, \n               result.contains(\"\\\"id\\\"\") &&\n               result.contains(\"\\\"score\\\"\"));\n\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testJSONSolrDocument() throws IOException {\n    SolrQueryRequest req = req(CommonParams.WT,\"json\",\n                               CommonParams.FL,\"id,score\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    ReturnFields returnFields = new SolrReturnFields(req);\n    rsp.setReturnFields(returnFields);\n\n    StringWriter buf = new StringWriter();\n\n    SolrDocument solrDoc = new SolrDocument();\n    solrDoc.addField(\"id\", \"1\");\n    solrDoc.addField(\"subject\", \"hello2\");\n    solrDoc.addField(\"title\", \"hello3\");\n    solrDoc.addField(\"score\", \"0.7\");\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(1);\n    list.setStart(0);\n    list.setMaxScore(0.7f);\n    list.add(solrDoc);\n\n    rsp.addResponse(list);\n\n    w.write(buf, req, rsp);\n    String result = buf.toString();\n    assertFalse(\"response contains unexpected fields: \" + result, \n                result.contains(\"hello\") || \n                result.contains(\"\\\"subject\\\"\") || \n                result.contains(\"\\\"title\\\"\"));\n    assertTrue(\"response doesn't contain expected fields: \" + result, \n               result.contains(\"\\\"id\\\"\") &&\n               result.contains(\"\\\"score\\\"\"));\n\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testJSONSolrDocument().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testJSONSolrDocument().mjava","sourceNew":"  @Test\n  public void testJSONSolrDocument() throws IOException {\n    SolrQueryRequest req = req(CommonParams.WT,\"json\",\n                               CommonParams.FL,\"id,score\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    ReturnFields returnFields = new SolrReturnFields(req);\n    rsp.setReturnFields(returnFields);\n\n    StringWriter buf = new StringWriter();\n\n    SolrDocument solrDoc = new SolrDocument();\n    solrDoc.addField(\"id\", \"1\");\n    solrDoc.addField(\"subject\", \"hello2\");\n    solrDoc.addField(\"title\", \"hello3\");\n    solrDoc.addField(\"score\", \"0.7\");\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(1);\n    list.setStart(0);\n    list.setMaxScore(0.7f);\n    list.add(solrDoc);\n\n    rsp.addResponse(list);\n\n    w.write(buf, req, rsp);\n    String result = buf.toString();\n    assertFalse(\"response contains unexpected fields: \" + result, \n                result.contains(\"hello\") || \n                result.contains(\"\\\"subject\\\"\") || \n                result.contains(\"\\\"title\\\"\"));\n    assertTrue(\"response doesn't contain expected fields: \" + result, \n               result.contains(\"\\\"id\\\"\") &&\n               result.contains(\"\\\"score\\\"\"));\n\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testJSONSolrDocument() throws IOException {\n    SolrQueryRequest req = req(CommonParams.WT,\"json\",\n                               CommonParams.FL,\"id,score\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    ReturnFields returnFields = new SolrReturnFields(req);\n    rsp.setReturnFields(returnFields);\n\n    StringWriter buf = new StringWriter();\n\n    SolrDocument solrDoc = new SolrDocument();\n    solrDoc.addField(\"id\", \"1\");\n    solrDoc.addField(\"subject\", \"hello2\");\n    solrDoc.addField(\"title\", \"hello3\");\n    solrDoc.addField(\"score\", \"0.7\");\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(1);\n    list.setStart(0);\n    list.setMaxScore(0.7f);\n    list.add(solrDoc);\n\n    rsp.addResponse(list);\n\n    w.write(buf, req, rsp);\n    String result = buf.toString();\n    assertFalse(\"response contains unexpected fields: \" + result, \n                result.contains(\"hello\") || \n                result.contains(\"\\\"subject\\\"\") || \n                result.contains(\"\\\"title\\\"\"));\n    assertTrue(\"response doesn't contain expected fields: \" + result, \n               result.contains(\"\\\"id\\\"\") &&\n               result.contains(\"\\\"score\\\"\"));\n\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0acd5cf26e179fa6c0650a6348a8913718fc98a7","date":1523271967,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testJSONSolrDocument().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testJSONSolrDocument().mjava","sourceNew":"  @Test\n  public void testJSONSolrDocument() throws Exception {\n    SolrQueryRequest req = req(CommonParams.WT,\"json\",\n                               CommonParams.FL,\"id,score,_children_,path\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    ReturnFields returnFields = new SolrReturnFields(req);\n    rsp.setReturnFields(returnFields);\n\n    StringWriter buf = new StringWriter();\n\n    SolrDocument childDoc = new SolrDocument();\n    childDoc.addField(\"id\", \"2\");\n    childDoc.addField(\"score\", \"0.4\");\n    childDoc.addField(\"path\", Arrays.asList(\"a>b\", \"a>b>c\"));\n\n    SolrDocumentList childList = new SolrDocumentList();\n    childList.setNumFound(1);\n    childList.setStart(0);\n    childList.add(childDoc);\n\n    SolrDocument solrDoc = new SolrDocument();\n    solrDoc.addField(\"id\", \"1\");\n    solrDoc.addField(\"subject\", \"hello2\");\n    solrDoc.addField(\"title\", \"hello3\");\n    solrDoc.addField(\"score\", \"0.7\");\n    solrDoc.setField(\"_children_\", childList);\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(1);\n    list.setStart(0);\n    list.setMaxScore(0.7f);\n    list.add(solrDoc);\n\n    rsp.addResponse(list);\n\n    w.write(buf, req, rsp);\n    String result = buf.toString();\n    assertFalse(\"response contains unexpected fields: \" + result, \n                result.contains(\"hello\") || \n                result.contains(\"\\\"subject\\\"\") || \n                result.contains(\"\\\"title\\\"\"));\n    assertTrue(\"response doesn't contain expected fields: \" + result, \n               result.contains(\"\\\"id\\\"\") &&\n               result.contains(\"\\\"score\\\"\") && result.contains(\"_children_\"));\n\n    String expectedResult = \"{'response':{'numFound':1,'start':0,'maxScore':0.7,'docs':[{'id':'1', 'score':'0.7',\" +\n        \" '_children_':{'numFound':1,'start':0,'docs':[{'id':'2', 'score':'0.4', 'path':['a>b', 'a>b>c']}] }}] }}\";\n    String error = JSONTestUtil.match(result, \"==\"+expectedResult);\n    assertNull(\"response validation failed with error: \" + error, error);\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testJSONSolrDocument() throws IOException {\n    SolrQueryRequest req = req(CommonParams.WT,\"json\",\n                               CommonParams.FL,\"id,score\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    ReturnFields returnFields = new SolrReturnFields(req);\n    rsp.setReturnFields(returnFields);\n\n    StringWriter buf = new StringWriter();\n\n    SolrDocument solrDoc = new SolrDocument();\n    solrDoc.addField(\"id\", \"1\");\n    solrDoc.addField(\"subject\", \"hello2\");\n    solrDoc.addField(\"title\", \"hello3\");\n    solrDoc.addField(\"score\", \"0.7\");\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(1);\n    list.setStart(0);\n    list.setMaxScore(0.7f);\n    list.add(solrDoc);\n\n    rsp.addResponse(list);\n\n    w.write(buf, req, rsp);\n    String result = buf.toString();\n    assertFalse(\"response contains unexpected fields: \" + result, \n                result.contains(\"hello\") || \n                result.contains(\"\\\"subject\\\"\") || \n                result.contains(\"\\\"title\\\"\"));\n    assertTrue(\"response doesn't contain expected fields: \" + result, \n               result.contains(\"\\\"id\\\"\") &&\n               result.contains(\"\\\"score\\\"\"));\n\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testJSONSolrDocument().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testJSONSolrDocument().mjava","sourceNew":"  @Test\n  public void testJSONSolrDocument() throws Exception {\n    SolrQueryRequest req = req(CommonParams.WT,\"json\",\n                               CommonParams.FL,\"id,score,_children_,path\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    ReturnFields returnFields = new SolrReturnFields(req);\n    rsp.setReturnFields(returnFields);\n\n    StringWriter buf = new StringWriter();\n\n    SolrDocument childDoc = new SolrDocument();\n    childDoc.addField(\"id\", \"2\");\n    childDoc.addField(\"score\", \"0.4\");\n    childDoc.addField(\"path\", Arrays.asList(\"a>b\", \"a>b>c\"));\n\n    SolrDocumentList childList = new SolrDocumentList();\n    childList.setNumFound(1);\n    childList.setStart(0);\n    childList.add(childDoc);\n\n    SolrDocument solrDoc = new SolrDocument();\n    solrDoc.addField(\"id\", \"1\");\n    solrDoc.addField(\"subject\", \"hello2\");\n    solrDoc.addField(\"title\", \"hello3\");\n    solrDoc.addField(\"score\", \"0.7\");\n    solrDoc.setField(\"_children_\", childList);\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(1);\n    list.setStart(0);\n    list.setMaxScore(0.7f);\n    list.add(solrDoc);\n\n    rsp.addResponse(list);\n\n    w.write(buf, req, rsp);\n    String result = buf.toString();\n    assertFalse(\"response contains unexpected fields: \" + result, \n                result.contains(\"hello\") || \n                result.contains(\"\\\"subject\\\"\") || \n                result.contains(\"\\\"title\\\"\"));\n    assertTrue(\"response doesn't contain expected fields: \" + result, \n               result.contains(\"\\\"id\\\"\") &&\n               result.contains(\"\\\"score\\\"\") && result.contains(\"_children_\"));\n\n    String expectedResult = \"{'response':{'numFound':1,'start':0,'maxScore':0.7,'docs':[{'id':'1', 'score':'0.7',\" +\n        \" '_children_':{'numFound':1,'start':0,'docs':[{'id':'2', 'score':'0.4', 'path':['a>b', 'a>b>c']}] }}] }}\";\n    String error = JSONTestUtil.match(result, \"==\"+expectedResult);\n    assertNull(\"response validation failed with error: \" + error, error);\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testJSONSolrDocument() throws IOException {\n    SolrQueryRequest req = req(CommonParams.WT,\"json\",\n                               CommonParams.FL,\"id,score\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    ReturnFields returnFields = new SolrReturnFields(req);\n    rsp.setReturnFields(returnFields);\n\n    StringWriter buf = new StringWriter();\n\n    SolrDocument solrDoc = new SolrDocument();\n    solrDoc.addField(\"id\", \"1\");\n    solrDoc.addField(\"subject\", \"hello2\");\n    solrDoc.addField(\"title\", \"hello3\");\n    solrDoc.addField(\"score\", \"0.7\");\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(1);\n    list.setStart(0);\n    list.setMaxScore(0.7f);\n    list.add(solrDoc);\n\n    rsp.addResponse(list);\n\n    w.write(buf, req, rsp);\n    String result = buf.toString();\n    assertFalse(\"response contains unexpected fields: \" + result, \n                result.contains(\"hello\") || \n                result.contains(\"\\\"subject\\\"\") || \n                result.contains(\"\\\"title\\\"\"));\n    assertTrue(\"response doesn't contain expected fields: \" + result, \n               result.contains(\"\\\"id\\\"\") &&\n               result.contains(\"\\\"score\\\"\"));\n\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"640ded7811e1b7d29236a5e2934ec3cd266a8199","date":1588973147,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testJSONSolrDocument().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testJSONSolrDocument().mjava","sourceNew":"  @Test\n  public void testJSONSolrDocument() throws Exception {\n    SolrQueryRequest req = req(CommonParams.WT,\"json\",\n                               CommonParams.FL,\"id,score,_children_,path\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    ReturnFields returnFields = new SolrReturnFields(req);\n    rsp.setReturnFields(returnFields);\n\n    StringWriter buf = new StringWriter();\n\n    SolrDocument childDoc = new SolrDocument();\n    childDoc.addField(\"id\", \"2\");\n    childDoc.addField(\"score\", \"0.4\");\n    childDoc.addField(\"path\", Arrays.asList(\"a>b\", \"a>b>c\"));\n\n    SolrDocumentList childList = new SolrDocumentList();\n    childList.setNumFound(1);\n    childList.setStart(0);\n    childList.add(childDoc);\n\n    SolrDocument solrDoc = new SolrDocument();\n    solrDoc.addField(\"id\", \"1\");\n    solrDoc.addField(\"subject\", \"hello2\");\n    solrDoc.addField(\"title\", \"hello3\");\n    solrDoc.addField(\"score\", \"0.7\");\n    solrDoc.setField(\"_children_\", childList);\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(1);\n    list.setStart(0);\n    list.setMaxScore(0.7f);\n    list.add(solrDoc);\n\n    rsp.addResponse(list);\n\n    w.write(buf, req, rsp);\n    String result = buf.toString();\n    assertFalse(\"response contains unexpected fields: \" + result, \n                result.contains(\"hello\") || \n                result.contains(\"\\\"subject\\\"\") || \n                result.contains(\"\\\"title\\\"\"));\n    assertTrue(\"response doesn't contain expected fields: \" + result, \n               result.contains(\"\\\"id\\\"\") &&\n               result.contains(\"\\\"score\\\"\") && result.contains(\"_children_\"));\n\n    String expectedResult = \"{'response':{'numFound':1,'start':0,'maxScore':0.7, 'numFoundExact':true,'docs':[{'id':'1', 'score':'0.7',\" +\n        \" '_children_':{'numFound':1,'start':0,'numFoundExact':true,'docs':[{'id':'2', 'score':'0.4', 'path':['a>b', 'a>b>c']}] }}] }}\";\n    String error = JSONTestUtil.match(result, \"==\"+expectedResult);\n    assertNull(\"response validation failed with error: \" + error, error);\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testJSONSolrDocument() throws Exception {\n    SolrQueryRequest req = req(CommonParams.WT,\"json\",\n                               CommonParams.FL,\"id,score,_children_,path\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    ReturnFields returnFields = new SolrReturnFields(req);\n    rsp.setReturnFields(returnFields);\n\n    StringWriter buf = new StringWriter();\n\n    SolrDocument childDoc = new SolrDocument();\n    childDoc.addField(\"id\", \"2\");\n    childDoc.addField(\"score\", \"0.4\");\n    childDoc.addField(\"path\", Arrays.asList(\"a>b\", \"a>b>c\"));\n\n    SolrDocumentList childList = new SolrDocumentList();\n    childList.setNumFound(1);\n    childList.setStart(0);\n    childList.add(childDoc);\n\n    SolrDocument solrDoc = new SolrDocument();\n    solrDoc.addField(\"id\", \"1\");\n    solrDoc.addField(\"subject\", \"hello2\");\n    solrDoc.addField(\"title\", \"hello3\");\n    solrDoc.addField(\"score\", \"0.7\");\n    solrDoc.setField(\"_children_\", childList);\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(1);\n    list.setStart(0);\n    list.setMaxScore(0.7f);\n    list.add(solrDoc);\n\n    rsp.addResponse(list);\n\n    w.write(buf, req, rsp);\n    String result = buf.toString();\n    assertFalse(\"response contains unexpected fields: \" + result, \n                result.contains(\"hello\") || \n                result.contains(\"\\\"subject\\\"\") || \n                result.contains(\"\\\"title\\\"\"));\n    assertTrue(\"response doesn't contain expected fields: \" + result, \n               result.contains(\"\\\"id\\\"\") &&\n               result.contains(\"\\\"score\\\"\") && result.contains(\"_children_\"));\n\n    String expectedResult = \"{'response':{'numFound':1,'start':0,'maxScore':0.7,'docs':[{'id':'1', 'score':'0.7',\" +\n        \" '_children_':{'numFound':1,'start':0,'docs':[{'id':'2', 'score':'0.4', 'path':['a>b', 'a>b>c']}] }}] }}\";\n    String error = JSONTestUtil.match(result, \"==\"+expectedResult);\n    assertNull(\"response validation failed with error: \" + error, error);\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","0acd5cf26e179fa6c0650a6348a8913718fc98a7"],"640ded7811e1b7d29236a5e2934ec3cd266a8199":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"fe874d5dba38e8313b2090a3d7335f4a39269336":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fe874d5dba38e8313b2090a3d7335f4a39269336"],"0acd5cf26e179fa6c0650a6348a8913718fc98a7":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["640ded7811e1b7d29236a5e2934ec3cd266a8199"]},"commit2Childs":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["640ded7811e1b7d29236a5e2934ec3cd266a8199"],"640ded7811e1b7d29236a5e2934ec3cd266a8199":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe874d5dba38e8313b2090a3d7335f4a39269336":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d58e44159788900f4a2113b84463dc3fbbf80f20","0acd5cf26e179fa6c0650a6348a8913718fc98a7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe874d5dba38e8313b2090a3d7335f4a39269336","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"0acd5cf26e179fa6c0650a6348a8913718fc98a7":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}