{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#softUpdateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]],Field...).mjava","commits":[{"id":"110125c995236a7f61057dd04b039ed2d267f3a1","date":1521014987,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#softUpdateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]],Field...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert:\n   * Atomically updates documents matching the provided\n   * term with the given doc-values fields\n   * and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * One use of this API is to retain older versions of\n   * documents instead of replacing them. The existing\n   * documents can be updated to reflect they are no\n   * longer current while atomically adding new documents\n   * at the same time.\n   *\n   * In contrast to {@link #updateDocuments(Term, Iterable)}\n   * this method will not delete documents in the index\n   * matching the given term but instead update them with\n   * the given doc-values fields which can be used as a\n   * soft-delete mechanism.\n   *\n   * See {@link #addDocuments(Iterable)}\n   * and {@link #updateDocuments(Term, Iterable)}.\n   *\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * for this operation\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public long softUpdateDocuments(Term term, Iterable<? extends Iterable<? extends IndexableField>> docs, Field... softDeletes) throws IOException {\n    if (term == null) {\n      throw new IllegalArgumentException(\"term must not be null\");\n    }\n    if (softDeletes == null || softDeletes.length == 0) {\n      throw new IllegalArgumentException(\"at least one soft delete must be present\");\n    }\n    return updateDocuments(DocumentsWriterDeleteQueue.newNode(buildDocValuesUpdate(term, softDeletes, false)), docs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36d13f271b6649357e07f71f7e46559479f69b5b","date":1523888226,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#softUpdateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]],Field...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#softUpdateDocuments(Term,Iterable[#-extends-Iterable[#-extends-IndexableField]],Field...).mjava","sourceNew":"  /**\n   * Expert:\n   * Atomically updates documents matching the provided\n   * term with the given doc-values fields\n   * and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * One use of this API is to retain older versions of\n   * documents instead of replacing them. The existing\n   * documents can be updated to reflect they are no\n   * longer current while atomically adding new documents\n   * at the same time.\n   *\n   * In contrast to {@link #updateDocuments(Term, Iterable)}\n   * this method will not delete documents in the index\n   * matching the given term but instead update them with\n   * the given doc-values fields which can be used as a\n   * soft-delete mechanism.\n   *\n   * See {@link #addDocuments(Iterable)}\n   * and {@link #updateDocuments(Term, Iterable)}.\n   *\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * for this operation\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public long softUpdateDocuments(Term term, Iterable<? extends Iterable<? extends IndexableField>> docs, Field... softDeletes) throws IOException {\n    if (term == null) {\n      throw new IllegalArgumentException(\"term must not be null\");\n    }\n    if (softDeletes == null || softDeletes.length == 0) {\n      throw new IllegalArgumentException(\"at least one soft delete must be present\");\n    }\n    return updateDocuments(DocumentsWriterDeleteQueue.newNode(buildDocValuesUpdate(term, softDeletes)), docs);\n  }\n\n","sourceOld":"  /**\n   * Expert:\n   * Atomically updates documents matching the provided\n   * term with the given doc-values fields\n   * and adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * One use of this API is to retain older versions of\n   * documents instead of replacing them. The existing\n   * documents can be updated to reflect they are no\n   * longer current while atomically adding new documents\n   * at the same time.\n   *\n   * In contrast to {@link #updateDocuments(Term, Iterable)}\n   * this method will not delete documents in the index\n   * matching the given term but instead update them with\n   * the given doc-values fields which can be used as a\n   * soft-delete mechanism.\n   *\n   * See {@link #addDocuments(Iterable)}\n   * and {@link #updateDocuments(Term, Iterable)}.\n   *\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * for this operation\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public long softUpdateDocuments(Term term, Iterable<? extends Iterable<? extends IndexableField>> docs, Field... softDeletes) throws IOException {\n    if (term == null) {\n      throw new IllegalArgumentException(\"term must not be null\");\n    }\n    if (softDeletes == null || softDeletes.length == 0) {\n      throw new IllegalArgumentException(\"at least one soft delete must be present\");\n    }\n    return updateDocuments(DocumentsWriterDeleteQueue.newNode(buildDocValuesUpdate(term, softDeletes, false)), docs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"36d13f271b6649357e07f71f7e46559479f69b5b":["110125c995236a7f61057dd04b039ed2d267f3a1"],"110125c995236a7f61057dd04b039ed2d267f3a1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["36d13f271b6649357e07f71f7e46559479f69b5b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["110125c995236a7f61057dd04b039ed2d267f3a1"],"36d13f271b6649357e07f71f7e46559479f69b5b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"110125c995236a7f61057dd04b039ed2d267f3a1":["36d13f271b6649357e07f71f7e46559479f69b5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}