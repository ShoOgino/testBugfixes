{"path":"lucene/src/java/org/apache/lucene/store/FileSwitchDirectory#listAll().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/FileSwitchDirectory#listAll().mjava","pathOld":"src/java/org/apache/lucene/store/FileSwitchDirectory#listAll().mjava","sourceNew":"  @Override\n  public String[] listAll() throws IOException {\n    String[] primaryFiles = primaryDir.listAll();\n    String[] secondaryFiles = secondaryDir.listAll();\n    String[] files = new String[primaryFiles.length + secondaryFiles.length];\n    System.arraycopy(primaryFiles, 0, files, 0, primaryFiles.length);\n    System.arraycopy(secondaryFiles, 0, files, primaryFiles.length, secondaryFiles.length);\n    return files;\n  }\n\n","sourceOld":"  @Override\n  public String[] listAll() throws IOException {\n    String[] primaryFiles = primaryDir.listAll();\n    String[] secondaryFiles = secondaryDir.listAll();\n    String[] files = new String[primaryFiles.length + secondaryFiles.length];\n    System.arraycopy(primaryFiles, 0, files, 0, primaryFiles.length);\n    System.arraycopy(secondaryFiles, 0, files, primaryFiles.length, secondaryFiles.length);\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9dc4c374d2882cdd692535622362cd9897cab69","date":1278955714,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/FileSwitchDirectory#listAll().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/FileSwitchDirectory#listAll().mjava","sourceNew":"  @Override\n  public String[] listAll() throws IOException {\n    Set<String> files = new HashSet<String>();\n    for(String f : primaryDir.listAll()) {\n      files.add(f);\n    }\n    for(String f : secondaryDir.listAll()) {\n      files.add(f);\n    }\n    return files.toArray(new String[files.size()]);\n  }\n\n","sourceOld":"  @Override\n  public String[] listAll() throws IOException {\n    String[] primaryFiles = primaryDir.listAll();\n    String[] secondaryFiles = secondaryDir.listAll();\n    String[] files = new String[primaryFiles.length + secondaryFiles.length];\n    System.arraycopy(primaryFiles, 0, files, 0, primaryFiles.length);\n    System.arraycopy(secondaryFiles, 0, files, primaryFiles.length, secondaryFiles.length);\n    return files;\n  }\n\n","bugFix":["6d5aed7cf6eb7fbd262fbe5de36d9025e37601e2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/FileSwitchDirectory#listAll().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/FileSwitchDirectory#listAll().mjava","sourceNew":"  @Override\n  public String[] listAll() throws IOException {\n    Set<String> files = new HashSet<String>();\n    for(String f : primaryDir.listAll()) {\n      files.add(f);\n    }\n    for(String f : secondaryDir.listAll()) {\n      files.add(f);\n    }\n    return files.toArray(new String[files.size()]);\n  }\n\n","sourceOld":"  @Override\n  public String[] listAll() throws IOException {\n    String[] primaryFiles = primaryDir.listAll();\n    String[] secondaryFiles = secondaryDir.listAll();\n    String[] files = new String[primaryFiles.length + secondaryFiles.length];\n    System.arraycopy(primaryFiles, 0, files, 0, primaryFiles.length);\n    System.arraycopy(secondaryFiles, 0, files, primaryFiles.length, secondaryFiles.length);\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"820a861d967afb6996fae98baa3c535f7cb7c3fc","date":1313760019,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/FileSwitchDirectory#listAll().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/FileSwitchDirectory#listAll().mjava","sourceNew":"  @Override\n  public String[] listAll() throws IOException {\n    Set<String> files = new HashSet<String>();\n    // LUCENE-3380: either or both of our dirs could be FSDirs,\n    // but if one underlying delegate is an FSDir and mkdirs() has not\n    // yet been called, because so far everything is written to the other,\n    // in this case, we don't want to throw a NoSuchDirectoryException\n    NoSuchDirectoryException exc = null;\n    try {\n      for(String f : primaryDir.listAll()) {\n        files.add(f);\n      }\n    } catch (NoSuchDirectoryException e) {\n      exc = e;\n    }\n    try {\n      for(String f : secondaryDir.listAll()) {\n        files.add(f);\n      }\n    } catch (NoSuchDirectoryException e) {\n      // we got NoSuchDirectoryException from both dirs\n      // rethrow the first.\n      if (exc != null) {\n        throw exc;\n      }\n      // we got NoSuchDirectoryException from the secondary,\n      // and the primary is empty.\n      if (files.isEmpty()) {\n        throw e;\n      }\n    }\n    // we got NoSuchDirectoryException from the primary,\n    // and the secondary is empty.\n    if (exc != null && files.isEmpty()) {\n      throw exc;\n    }\n    return files.toArray(new String[files.size()]);\n  }\n\n","sourceOld":"  @Override\n  public String[] listAll() throws IOException {\n    Set<String> files = new HashSet<String>();\n    for(String f : primaryDir.listAll()) {\n      files.add(f);\n    }\n    for(String f : secondaryDir.listAll()) {\n      files.add(f);\n    }\n    return files.toArray(new String[files.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FileSwitchDirectory#listAll().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/FileSwitchDirectory#listAll().mjava","sourceNew":"  @Override\n  public String[] listAll() throws IOException {\n    Set<String> files = new HashSet<String>();\n    // LUCENE-3380: either or both of our dirs could be FSDirs,\n    // but if one underlying delegate is an FSDir and mkdirs() has not\n    // yet been called, because so far everything is written to the other,\n    // in this case, we don't want to throw a NoSuchDirectoryException\n    NoSuchDirectoryException exc = null;\n    try {\n      for(String f : primaryDir.listAll()) {\n        files.add(f);\n      }\n    } catch (NoSuchDirectoryException e) {\n      exc = e;\n    }\n    try {\n      for(String f : secondaryDir.listAll()) {\n        files.add(f);\n      }\n    } catch (NoSuchDirectoryException e) {\n      // we got NoSuchDirectoryException from both dirs\n      // rethrow the first.\n      if (exc != null) {\n        throw exc;\n      }\n      // we got NoSuchDirectoryException from the secondary,\n      // and the primary is empty.\n      if (files.isEmpty()) {\n        throw e;\n      }\n    }\n    // we got NoSuchDirectoryException from the primary,\n    // and the secondary is empty.\n    if (exc != null && files.isEmpty()) {\n      throw exc;\n    }\n    return files.toArray(new String[files.size()]);\n  }\n\n","sourceOld":"  @Override\n  public String[] listAll() throws IOException {\n    Set<String> files = new HashSet<String>();\n    // LUCENE-3380: either or both of our dirs could be FSDirs,\n    // but if one underlying delegate is an FSDir and mkdirs() has not\n    // yet been called, because so far everything is written to the other,\n    // in this case, we don't want to throw a NoSuchDirectoryException\n    NoSuchDirectoryException exc = null;\n    try {\n      for(String f : primaryDir.listAll()) {\n        files.add(f);\n      }\n    } catch (NoSuchDirectoryException e) {\n      exc = e;\n    }\n    try {\n      for(String f : secondaryDir.listAll()) {\n        files.add(f);\n      }\n    } catch (NoSuchDirectoryException e) {\n      // we got NoSuchDirectoryException from both dirs\n      // rethrow the first.\n      if (exc != null) {\n        throw exc;\n      }\n      // we got NoSuchDirectoryException from the secondary,\n      // and the primary is empty.\n      if (files.isEmpty()) {\n        throw e;\n      }\n    }\n    // we got NoSuchDirectoryException from the primary,\n    // and the secondary is empty.\n    if (exc != null && files.isEmpty()) {\n      throw exc;\n    }\n    return files.toArray(new String[files.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["820a861d967afb6996fae98baa3c535f7cb7c3fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","d9dc4c374d2882cdd692535622362cd9897cab69"],"820a861d967afb6996fae98baa3c535f7cb7c3fc":["d9dc4c374d2882cdd692535622362cd9897cab69"],"d9dc4c374d2882cdd692535622362cd9897cab69":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":[],"820a861d967afb6996fae98baa3c535f7cb7c3fc":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d9dc4c374d2882cdd692535622362cd9897cab69":["5f4e87790277826a2aea119328600dfb07761f32","820a861d967afb6996fae98baa3c535f7cb7c3fc"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5f4e87790277826a2aea119328600dfb07761f32","d9dc4c374d2882cdd692535622362cd9897cab69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}