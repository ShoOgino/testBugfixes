{"path":"src/java/org/apache/lucene/index/DefaultSkipListWriter#writeSkipData(int,IndexOutput).mjava","commits":[{"id":"08d1ee9808e270c86ce5c9be08b8bd7a19d0a709","date":1180597733,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DefaultSkipListWriter#writeSkipData(int,IndexOutput).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#bufferSkip(int,boolean,int).mjava","sourceNew":"  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\r\n    // To efficiently store payloads in the posting lists we do not store the length of\r\n    // every payload. Instead we omit the length for a payload if the previous payload had\r\n    // the same length.\r\n    // However, in order to support skipping the payload length at every skip point must be known.\r\n    // So we use the same length encoding that we use for the posting lists for the skip data as well:\r\n    // Case 1: current field does not store payloads\r\n    //           SkipDatum                 --> DocSkip, FreqSkip, ProxSkip\r\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\r\n    //           DocSkip records the document number before every SkipInterval th  document in TermFreqs. \r\n    //           Document numbers are represented as differences from the previous value in the sequence.\r\n    // Case 2: current field stores payloads\r\n    //           SkipDatum                 --> DocSkip, PayloadLength?, FreqSkip,ProxSkip\r\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\r\n    //           PayloadLength             --> VInt    \r\n    //         In this case DocSkip/2 is the difference between\r\n    //         the current and the previous value. If DocSkip\r\n    //         is odd, then a PayloadLength encoded as VInt follows,\r\n    //         if DocSkip is even, then it is assumed that the\r\n    //         current payload length equals the length at the previous\r\n    //         skip point\r\n    if (curStorePayloads) {\r\n      int delta = curDoc - lastSkipDoc[level];\r\n      if (curPayloadLength == lastSkipPayloadLength[level]) {\r\n        // the current payload length equals the length at the previous skip point,\r\n        // so we don't store the length again\r\n        skipBuffer.writeVInt(delta * 2);\r\n      } else {\r\n        // the payload length is different from the previous one. We shift the DocSkip, \r\n        // set the lowest bit and store the current payload length as VInt.\r\n        skipBuffer.writeVInt(delta * 2 + 1);\r\n        skipBuffer.writeVInt(curPayloadLength);\r\n        lastSkipPayloadLength[level] = curPayloadLength;\r\n      }\r\n    } else {\r\n      // current field does not store payloads\r\n      skipBuffer.writeVInt(curDoc - lastSkipDoc[level]);\r\n    }\r\n    skipBuffer.writeVInt((int) (curFreqPointer - lastSkipFreqPointer[level]));\r\n    skipBuffer.writeVInt((int) (curProxPointer - lastSkipProxPointer[level]));\r\n\r\n    lastSkipDoc[level] = curDoc;\r\n    //System.out.println(\"write doc at level \" + level + \": \" + curDoc);\r\n    \r\n    lastSkipFreqPointer[level] = curFreqPointer;\r\n    lastSkipProxPointer[level] = curProxPointer;\r\n  }\r\n\n","sourceOld":"  private void bufferSkip(int doc, boolean storePayloads, int payloadLength) throws IOException {\n    long freqPointer = freqOutput.getFilePointer();\n    long proxPointer = proxOutput.getFilePointer();\n\n    // To efficiently store payloads in the posting lists we do not store the length of\n    // every payload. Instead we omit the length for a payload if the previous payload had\n    // the same length.\n    // However, in order to support skipping the payload length at every skip point must be known.\n    // So we use the same length encoding that we use for the posting lists for the skip data as well:\n    // Case 1: current field does not store payloads\n    //           SkipDatum                 --> DocSkip, FreqSkip, ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           DocSkip records the document number before every SkipInterval th  document in TermFreqs. \n    //           Document numbers are represented as differences from the previous value in the sequence.\n    // Case 2: current field stores payloads\n    //           SkipDatum                 --> DocSkip, PayloadLength?, FreqSkip,ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           PayloadLength             --> VInt    \n    //         In this case DocSkip/2 is the difference between\n    //         the current and the previous value. If DocSkip\n    //         is odd, then a PayloadLength encoded as VInt follows,\n    //         if DocSkip is even, then it is assumed that the\n    //         current payload length equals the length at the previous\n    //         skip point\n    if (storePayloads) {\n      int delta = doc - lastSkipDoc;\n      if (payloadLength == lastSkipPayloadLength) {\n        // the current payload length equals the length at the previous skip point,\n        // so we don't store the length again\n        skipBuffer.writeVInt(delta * 2);\n      } else {\n        // the payload length is different from the previous one. We shift the DocSkip, \n        // set the lowest bit and store the current payload length as VInt.\n        skipBuffer.writeVInt(delta * 2 + 1);\n        skipBuffer.writeVInt(payloadLength);\n        lastSkipPayloadLength = payloadLength;\n      }\n    } else {\n      // current field does not store payloads\n      skipBuffer.writeVInt(doc - lastSkipDoc);\n    }\n    skipBuffer.writeVInt((int) (freqPointer - lastSkipFreqPointer));\n    skipBuffer.writeVInt((int) (proxPointer - lastSkipProxPointer));\n\n    lastSkipDoc = doc;\n    lastSkipFreqPointer = freqPointer;\n    lastSkipProxPointer = proxPointer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2123bddbd65dea198cac380540636ce43a880403","date":1211269254,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DefaultSkipListWriter#writeSkipData(int,IndexOutput).mjava","pathOld":"src/java/org/apache/lucene/index/DefaultSkipListWriter#writeSkipData(int,IndexOutput).mjava","sourceNew":"  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\n    // To efficiently store payloads in the posting lists we do not store the length of\n    // every payload. Instead we omit the length for a payload if the previous payload had\n    // the same length.\n    // However, in order to support skipping the payload length at every skip point must be known.\n    // So we use the same length encoding that we use for the posting lists for the skip data as well:\n    // Case 1: current field does not store payloads\n    //           SkipDatum                 --> DocSkip, FreqSkip, ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           DocSkip records the document number before every SkipInterval th  document in TermFreqs. \n    //           Document numbers are represented as differences from the previous value in the sequence.\n    // Case 2: current field stores payloads\n    //           SkipDatum                 --> DocSkip, PayloadLength?, FreqSkip,ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           PayloadLength             --> VInt    \n    //         In this case DocSkip/2 is the difference between\n    //         the current and the previous value. If DocSkip\n    //         is odd, then a PayloadLength encoded as VInt follows,\n    //         if DocSkip is even, then it is assumed that the\n    //         current payload length equals the length at the previous\n    //         skip point\n    if (curStorePayloads) {\n      int delta = curDoc - lastSkipDoc[level];\n      if (curPayloadLength == lastSkipPayloadLength[level]) {\n        // the current payload length equals the length at the previous skip point,\n        // so we don't store the length again\n        skipBuffer.writeVInt(delta * 2);\n      } else {\n        // the payload length is different from the previous one. We shift the DocSkip, \n        // set the lowest bit and store the current payload length as VInt.\n        skipBuffer.writeVInt(delta * 2 + 1);\n        skipBuffer.writeVInt(curPayloadLength);\n        lastSkipPayloadLength[level] = curPayloadLength;\n      }\n    } else {\n      // current field does not store payloads\n      skipBuffer.writeVInt(curDoc - lastSkipDoc[level]);\n    }\n    skipBuffer.writeVInt((int) (curFreqPointer - lastSkipFreqPointer[level]));\n    skipBuffer.writeVInt((int) (curProxPointer - lastSkipProxPointer[level]));\n\n    lastSkipDoc[level] = curDoc;\n    //System.out.println(\"write doc at level \" + level + \": \" + curDoc);\n    \n    lastSkipFreqPointer[level] = curFreqPointer;\n    lastSkipProxPointer[level] = curProxPointer;\n  }\n\n","sourceOld":"  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\r\n    // To efficiently store payloads in the posting lists we do not store the length of\r\n    // every payload. Instead we omit the length for a payload if the previous payload had\r\n    // the same length.\r\n    // However, in order to support skipping the payload length at every skip point must be known.\r\n    // So we use the same length encoding that we use for the posting lists for the skip data as well:\r\n    // Case 1: current field does not store payloads\r\n    //           SkipDatum                 --> DocSkip, FreqSkip, ProxSkip\r\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\r\n    //           DocSkip records the document number before every SkipInterval th  document in TermFreqs. \r\n    //           Document numbers are represented as differences from the previous value in the sequence.\r\n    // Case 2: current field stores payloads\r\n    //           SkipDatum                 --> DocSkip, PayloadLength?, FreqSkip,ProxSkip\r\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\r\n    //           PayloadLength             --> VInt    \r\n    //         In this case DocSkip/2 is the difference between\r\n    //         the current and the previous value. If DocSkip\r\n    //         is odd, then a PayloadLength encoded as VInt follows,\r\n    //         if DocSkip is even, then it is assumed that the\r\n    //         current payload length equals the length at the previous\r\n    //         skip point\r\n    if (curStorePayloads) {\r\n      int delta = curDoc - lastSkipDoc[level];\r\n      if (curPayloadLength == lastSkipPayloadLength[level]) {\r\n        // the current payload length equals the length at the previous skip point,\r\n        // so we don't store the length again\r\n        skipBuffer.writeVInt(delta * 2);\r\n      } else {\r\n        // the payload length is different from the previous one. We shift the DocSkip, \r\n        // set the lowest bit and store the current payload length as VInt.\r\n        skipBuffer.writeVInt(delta * 2 + 1);\r\n        skipBuffer.writeVInt(curPayloadLength);\r\n        lastSkipPayloadLength[level] = curPayloadLength;\r\n      }\r\n    } else {\r\n      // current field does not store payloads\r\n      skipBuffer.writeVInt(curDoc - lastSkipDoc[level]);\r\n    }\r\n    skipBuffer.writeVInt((int) (curFreqPointer - lastSkipFreqPointer[level]));\r\n    skipBuffer.writeVInt((int) (curProxPointer - lastSkipProxPointer[level]));\r\n\r\n    lastSkipDoc[level] = curDoc;\r\n    //System.out.println(\"write doc at level \" + level + \": \" + curDoc);\r\n    \r\n    lastSkipFreqPointer[level] = curFreqPointer;\r\n    lastSkipProxPointer[level] = curProxPointer;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DefaultSkipListWriter#writeSkipData(int,IndexOutput).mjava","pathOld":"src/java/org/apache/lucene/index/DefaultSkipListWriter#writeSkipData(int,IndexOutput).mjava","sourceNew":"  @Override\n  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\n    // To efficiently store payloads in the posting lists we do not store the length of\n    // every payload. Instead we omit the length for a payload if the previous payload had\n    // the same length.\n    // However, in order to support skipping the payload length at every skip point must be known.\n    // So we use the same length encoding that we use for the posting lists for the skip data as well:\n    // Case 1: current field does not store payloads\n    //           SkipDatum                 --> DocSkip, FreqSkip, ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           DocSkip records the document number before every SkipInterval th  document in TermFreqs. \n    //           Document numbers are represented as differences from the previous value in the sequence.\n    // Case 2: current field stores payloads\n    //           SkipDatum                 --> DocSkip, PayloadLength?, FreqSkip,ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           PayloadLength             --> VInt    \n    //         In this case DocSkip/2 is the difference between\n    //         the current and the previous value. If DocSkip\n    //         is odd, then a PayloadLength encoded as VInt follows,\n    //         if DocSkip is even, then it is assumed that the\n    //         current payload length equals the length at the previous\n    //         skip point\n    if (curStorePayloads) {\n      int delta = curDoc - lastSkipDoc[level];\n      if (curPayloadLength == lastSkipPayloadLength[level]) {\n        // the current payload length equals the length at the previous skip point,\n        // so we don't store the length again\n        skipBuffer.writeVInt(delta * 2);\n      } else {\n        // the payload length is different from the previous one. We shift the DocSkip, \n        // set the lowest bit and store the current payload length as VInt.\n        skipBuffer.writeVInt(delta * 2 + 1);\n        skipBuffer.writeVInt(curPayloadLength);\n        lastSkipPayloadLength[level] = curPayloadLength;\n      }\n    } else {\n      // current field does not store payloads\n      skipBuffer.writeVInt(curDoc - lastSkipDoc[level]);\n    }\n    skipBuffer.writeVInt((int) (curFreqPointer - lastSkipFreqPointer[level]));\n    skipBuffer.writeVInt((int) (curProxPointer - lastSkipProxPointer[level]));\n\n    lastSkipDoc[level] = curDoc;\n    //System.out.println(\"write doc at level \" + level + \": \" + curDoc);\n    \n    lastSkipFreqPointer[level] = curFreqPointer;\n    lastSkipProxPointer[level] = curProxPointer;\n  }\n\n","sourceOld":"  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\n    // To efficiently store payloads in the posting lists we do not store the length of\n    // every payload. Instead we omit the length for a payload if the previous payload had\n    // the same length.\n    // However, in order to support skipping the payload length at every skip point must be known.\n    // So we use the same length encoding that we use for the posting lists for the skip data as well:\n    // Case 1: current field does not store payloads\n    //           SkipDatum                 --> DocSkip, FreqSkip, ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           DocSkip records the document number before every SkipInterval th  document in TermFreqs. \n    //           Document numbers are represented as differences from the previous value in the sequence.\n    // Case 2: current field stores payloads\n    //           SkipDatum                 --> DocSkip, PayloadLength?, FreqSkip,ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           PayloadLength             --> VInt    \n    //         In this case DocSkip/2 is the difference between\n    //         the current and the previous value. If DocSkip\n    //         is odd, then a PayloadLength encoded as VInt follows,\n    //         if DocSkip is even, then it is assumed that the\n    //         current payload length equals the length at the previous\n    //         skip point\n    if (curStorePayloads) {\n      int delta = curDoc - lastSkipDoc[level];\n      if (curPayloadLength == lastSkipPayloadLength[level]) {\n        // the current payload length equals the length at the previous skip point,\n        // so we don't store the length again\n        skipBuffer.writeVInt(delta * 2);\n      } else {\n        // the payload length is different from the previous one. We shift the DocSkip, \n        // set the lowest bit and store the current payload length as VInt.\n        skipBuffer.writeVInt(delta * 2 + 1);\n        skipBuffer.writeVInt(curPayloadLength);\n        lastSkipPayloadLength[level] = curPayloadLength;\n      }\n    } else {\n      // current field does not store payloads\n      skipBuffer.writeVInt(curDoc - lastSkipDoc[level]);\n    }\n    skipBuffer.writeVInt((int) (curFreqPointer - lastSkipFreqPointer[level]));\n    skipBuffer.writeVInt((int) (curProxPointer - lastSkipProxPointer[level]));\n\n    lastSkipDoc[level] = curDoc;\n    //System.out.println(\"write doc at level \" + level + \": \" + curDoc);\n    \n    lastSkipFreqPointer[level] = curFreqPointer;\n    lastSkipProxPointer[level] = curProxPointer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DefaultSkipListWriter#writeSkipData(int,IndexOutput).mjava","pathOld":"src/java/org/apache/lucene/index/DefaultSkipListWriter#writeSkipData(int,IndexOutput).mjava","sourceNew":"  @Override\n  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\n    // To efficiently store payloads in the posting lists we do not store the length of\n    // every payload. Instead we omit the length for a payload if the previous payload had\n    // the same length.\n    // However, in order to support skipping the payload length at every skip point must be known.\n    // So we use the same length encoding that we use for the posting lists for the skip data as well:\n    // Case 1: current field does not store payloads\n    //           SkipDatum                 --> DocSkip, FreqSkip, ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           DocSkip records the document number before every SkipInterval th  document in TermFreqs. \n    //           Document numbers are represented as differences from the previous value in the sequence.\n    // Case 2: current field stores payloads\n    //           SkipDatum                 --> DocSkip, PayloadLength?, FreqSkip,ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           PayloadLength             --> VInt    \n    //         In this case DocSkip/2 is the difference between\n    //         the current and the previous value. If DocSkip\n    //         is odd, then a PayloadLength encoded as VInt follows,\n    //         if DocSkip is even, then it is assumed that the\n    //         current payload length equals the length at the previous\n    //         skip point\n    if (curStorePayloads) {\n      int delta = curDoc - lastSkipDoc[level];\n      if (curPayloadLength == lastSkipPayloadLength[level]) {\n        // the current payload length equals the length at the previous skip point,\n        // so we don't store the length again\n        skipBuffer.writeVInt(delta * 2);\n      } else {\n        // the payload length is different from the previous one. We shift the DocSkip, \n        // set the lowest bit and store the current payload length as VInt.\n        skipBuffer.writeVInt(delta * 2 + 1);\n        skipBuffer.writeVInt(curPayloadLength);\n        lastSkipPayloadLength[level] = curPayloadLength;\n      }\n    } else {\n      // current field does not store payloads\n      skipBuffer.writeVInt(curDoc - lastSkipDoc[level]);\n    }\n    skipBuffer.writeVInt((int) (curFreqPointer - lastSkipFreqPointer[level]));\n    skipBuffer.writeVInt((int) (curProxPointer - lastSkipProxPointer[level]));\n\n    lastSkipDoc[level] = curDoc;\n    //System.out.println(\"write doc at level \" + level + \": \" + curDoc);\n    \n    lastSkipFreqPointer[level] = curFreqPointer;\n    lastSkipProxPointer[level] = curProxPointer;\n  }\n\n","sourceOld":"  @Override\n  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\n    // To efficiently store payloads in the posting lists we do not store the length of\n    // every payload. Instead we omit the length for a payload if the previous payload had\n    // the same length.\n    // However, in order to support skipping the payload length at every skip point must be known.\n    // So we use the same length encoding that we use for the posting lists for the skip data as well:\n    // Case 1: current field does not store payloads\n    //           SkipDatum                 --> DocSkip, FreqSkip, ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           DocSkip records the document number before every SkipInterval th  document in TermFreqs. \n    //           Document numbers are represented as differences from the previous value in the sequence.\n    // Case 2: current field stores payloads\n    //           SkipDatum                 --> DocSkip, PayloadLength?, FreqSkip,ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           PayloadLength             --> VInt    \n    //         In this case DocSkip/2 is the difference between\n    //         the current and the previous value. If DocSkip\n    //         is odd, then a PayloadLength encoded as VInt follows,\n    //         if DocSkip is even, then it is assumed that the\n    //         current payload length equals the length at the previous\n    //         skip point\n    if (curStorePayloads) {\n      int delta = curDoc - lastSkipDoc[level];\n      if (curPayloadLength == lastSkipPayloadLength[level]) {\n        // the current payload length equals the length at the previous skip point,\n        // so we don't store the length again\n        skipBuffer.writeVInt(delta * 2);\n      } else {\n        // the payload length is different from the previous one. We shift the DocSkip, \n        // set the lowest bit and store the current payload length as VInt.\n        skipBuffer.writeVInt(delta * 2 + 1);\n        skipBuffer.writeVInt(curPayloadLength);\n        lastSkipPayloadLength[level] = curPayloadLength;\n      }\n    } else {\n      // current field does not store payloads\n      skipBuffer.writeVInt(curDoc - lastSkipDoc[level]);\n    }\n    skipBuffer.writeVInt((int) (curFreqPointer - lastSkipFreqPointer[level]));\n    skipBuffer.writeVInt((int) (curProxPointer - lastSkipProxPointer[level]));\n\n    lastSkipDoc[level] = curDoc;\n    //System.out.println(\"write doc at level \" + level + \": \" + curDoc);\n    \n    lastSkipFreqPointer[level] = curFreqPointer;\n    lastSkipProxPointer[level] = curProxPointer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a9e385641d717e641408d8fbbc62be8fc766357":["2123bddbd65dea198cac380540636ce43a880403"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2123bddbd65dea198cac380540636ce43a880403":["08d1ee9808e270c86ce5c9be08b8bd7a19d0a709"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"],"08d1ee9808e270c86ce5c9be08b8bd7a19d0a709":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08d1ee9808e270c86ce5c9be08b8bd7a19d0a709"],"2123bddbd65dea198cac380540636ce43a880403":["8a9e385641d717e641408d8fbbc62be8fc766357"],"08d1ee9808e270c86ce5c9be08b8bd7a19d0a709":["2123bddbd65dea198cac380540636ce43a880403"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}