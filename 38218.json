{"path":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#sort(Comparator[BytesRef],IntBinaryOperator).mjava","commits":[{"id":"fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8","date":1582222690,"type":1,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#sort(Comparator[BytesRef],IntBinaryOperator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#sort(Comparator[BytesRef]).mjava","sourceNew":"  /**\n   * Returns a {@link SortState} representing the order of elements in this array. This is a non-destructive operation.\n   */\n  public SortState sort(final Comparator<BytesRef> comp, final IntBinaryOperator tieComparator) {\n    final int[] orderedEntries = new int[size()];\n    for (int i = 0; i < orderedEntries.length; i++) {\n      orderedEntries[i] = i;\n    }\n    new IntroSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderedEntries[i];\n        orderedEntries[i] = orderedEntries[j];\n        orderedEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int idx1 = orderedEntries[i], idx2 = orderedEntries[j];\n        setBytesRef(scratch1, scratchBytes1, idx1);\n        setBytesRef(scratch2, scratchBytes2, idx2);\n        return compare(idx1, scratchBytes1, idx2, scratchBytes2);\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        pivotIndex = orderedEntries[i];\n        setBytesRef(pivotBuilder, pivot, pivotIndex);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int index = orderedEntries[j];\n        setBytesRef(scratch2, scratchBytes2, index);\n        return compare(pivotIndex, pivot, index, scratchBytes2);\n      }\n\n      private int compare(int i1, BytesRef b1, int i2, BytesRef b2) {\n        int res = comp.compare(b1, b2);\n        return res == 0 ? tieComparator.applyAsInt(i1, i2) : res;\n      }\n\n      private int pivotIndex;\n      private final BytesRef pivot = new BytesRef();\n      private final BytesRef scratchBytes1 = new BytesRef();\n      private final BytesRef scratchBytes2 = new BytesRef();\n      private final BytesRefBuilder pivotBuilder = new BytesRefBuilder();\n      private final BytesRefBuilder scratch1 = new BytesRefBuilder();\n      private final BytesRefBuilder scratch2 = new BytesRefBuilder();\n    }.sort(0, size());\n    return new SortState(orderedEntries);\n  }\n\n","sourceOld":"  private int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderedEntries = new int[size()];\n    for (int i = 0; i < orderedEntries.length; i++) {\n      orderedEntries[i] = i;\n    }\n    new IntroSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderedEntries[i];\n        orderedEntries[i] = orderedEntries[j];\n        orderedEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int idx1 = orderedEntries[i], idx2 = orderedEntries[j];\n        setBytesRef(scratch1, scratchBytes1, idx1);\n        setBytesRef(scratch2, scratchBytes2, idx2);\n        return comp.compare(scratchBytes1, scratchBytes2);\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        final int index = orderedEntries[i];\n        setBytesRef(pivotBuilder, pivot, index);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int index = orderedEntries[j];\n        setBytesRef(scratch2, scratchBytes2, index);\n        return comp.compare(pivot, scratchBytes2);\n      }\n\n      private final BytesRef pivot = new BytesRef();\n      private final BytesRef scratchBytes1 = new BytesRef();\n      private final BytesRef scratchBytes2 = new BytesRef();\n      private final BytesRefBuilder pivotBuilder = new BytesRefBuilder();\n      private final BytesRefBuilder scratch1 = new BytesRefBuilder();\n      private final BytesRefBuilder scratch2 = new BytesRefBuilder();\n    }.sort(0, size());\n    return orderedEntries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8"]},"commit2Childs":{"fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}