{"path":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#getRandomRange(int,String).mjava","commits":[{"id":"dfa8ee8a03218e801f864cf0ef8171a2fdd06f35","date":1501089160,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#getRandomRange(int,String).mjava","pathOld":"/dev/null","sourceNew":"  private String[] getRandomRange(int max, String fieldName) {\n    Number[] values = new Number[2];\n    FieldType ft = h.getCore().getLatestSchema().getField(\"field_\" + fieldName).getType();\n    if (ft.getNumberType() == null) {\n      assert ft instanceof StrField;\n      values[0] = randomInt(max);\n      values[1] = randomInt(max);\n      Arrays.sort(values, (o1, o2) -> String.valueOf(o1).compareTo(String.valueOf(o2)));\n    } else {\n      switch (ft.getNumberType()) {\n        case DOUBLE:\n          values[0] = randomDouble(max);\n          values[1] = randomDouble(max);\n          break;\n        case FLOAT:\n          values[0] = randomFloat(max);\n          values[1] = randomFloat(max);\n          break;\n        case INTEGER:\n          values[0] = randomInt(max);\n          values[1] = randomInt(max);\n          break;\n        case LONG:\n          values[0] = randomLong(max);\n          values[1] = randomLong(max);\n          break;\n        case DATE:\n          values[0] = randomMs(max);\n          values[1] = randomMs(max);\n          break;\n        default:\n          throw new AssertionError(\"Unexpected number type\");\n\n      }\n      if (random().nextInt(100) >= 1) {// sometimes don't sort the values. Should result in 0 hits\n        Arrays.sort(values);\n      }\n    }\n    String[] stringValues = new String[2];\n    if (rarely()) {\n      stringValues[0] = \"*\";\n    } else {\n      if (ft.getNumberType() == NumberType.DATE) {\n        stringValues[0] = dateFormat.format(values[0]);\n      } else {\n        stringValues[0] = String.valueOf(values[0]);\n      }\n    }\n    if (rarely()) {\n      stringValues[1] = \"*\";\n    } else {\n      if (ft.getNumberType() == NumberType.DATE) {\n        stringValues[1] = dateFormat.format(values[1]);\n      } else {\n        stringValues[1] = String.valueOf(values[1]);\n      }\n    }\n    return stringValues;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRangeQuery#getRandomRange(int,String).mjava","pathOld":"/dev/null","sourceNew":"  private String[] getRandomRange(int max, String fieldName) {\n    Number[] values = new Number[2];\n    FieldType ft = h.getCore().getLatestSchema().getField(\"field_\" + fieldName).getType();\n    if (ft.getNumberType() == null) {\n      assert ft instanceof StrField;\n      values[0] = randomInt(max);\n      values[1] = randomInt(max);\n      Arrays.sort(values, (o1, o2) -> String.valueOf(o1).compareTo(String.valueOf(o2)));\n    } else {\n      switch (ft.getNumberType()) {\n        case DOUBLE:\n          values[0] = randomDouble(max);\n          values[1] = randomDouble(max);\n          break;\n        case FLOAT:\n          values[0] = randomFloat(max);\n          values[1] = randomFloat(max);\n          break;\n        case INTEGER:\n          values[0] = randomInt(max);\n          values[1] = randomInt(max);\n          break;\n        case LONG:\n          values[0] = randomLong(max);\n          values[1] = randomLong(max);\n          break;\n        case DATE:\n          values[0] = randomMs(max);\n          values[1] = randomMs(max);\n          break;\n        default:\n          throw new AssertionError(\"Unexpected number type\");\n\n      }\n      if (random().nextInt(100) >= 1) {// sometimes don't sort the values. Should result in 0 hits\n        Arrays.sort(values);\n      }\n    }\n    String[] stringValues = new String[2];\n    if (rarely()) {\n      stringValues[0] = \"*\";\n    } else {\n      if (ft.getNumberType() == NumberType.DATE) {\n        stringValues[0] = dateFormat.format(values[0]);\n      } else {\n        stringValues[0] = String.valueOf(values[0]);\n      }\n    }\n    if (rarely()) {\n      stringValues[1] = \"*\";\n    } else {\n      if (ft.getNumberType() == NumberType.DATE) {\n        stringValues[1] = dateFormat.format(values[1]);\n      } else {\n        stringValues[1] = String.valueOf(values[1]);\n      }\n    }\n    return stringValues;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dfa8ee8a03218e801f864cf0ef8171a2fdd06f35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dfa8ee8a03218e801f864cf0ef8171a2fdd06f35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dfa8ee8a03218e801f864cf0ef8171a2fdd06f35"]},"commit2Childs":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","dfa8ee8a03218e801f864cf0ef8171a2fdd06f35"],"dfa8ee8a03218e801f864cf0ef8171a2fdd06f35":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}