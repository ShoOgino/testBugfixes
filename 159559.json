{"path":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testSortOneDocumentWithScores().mjava","commits":[{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testSortOneDocumentWithScores().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testSortOneDocumentWithScores().mjava","sourceNew":"  /** Tests sorting a single document with scores */\n  public void testSortOneDocumentWithScores() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(),\n                     Collections.singletonMap(\"value\", Type.SORTED));\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    assertEquals(1, expected.totalHits);\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort, true, true);\n    \n    assertEquals(expected.totalHits, actual.totalHits);\n    assertEquals(expected.scoreDocs[0].score, actual.scoreDocs[0].score, 0F);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting a single document with scores */\n  public void testSortOneDocumentWithScores() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(),\n                     Collections.singletonMap(\"value\", Type.SORTED));\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    assertEquals(1, expected.totalHits);\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort, true, true);\n    \n    assertEquals(expected.totalHits, actual.totalHits);\n    assertEquals(expected.scoreDocs[0].score, actual.scoreDocs[0].score, 0F);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testSortOneDocumentWithScores().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testSortOneDocumentWithScores().mjava","sourceNew":"  /** Tests sorting a single document with scores */\n  public void testSortOneDocumentWithScores() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(),\n                     Collections.singletonMap(\"value\", Type.SORTED));\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    assertEquals(1, expected.totalHits);\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort, true, true);\n    \n    assertEquals(expected.totalHits, actual.totalHits);\n    assertEquals(expected.scoreDocs[0].score, actual.scoreDocs[0].score, 0F);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting a single document with scores */\n  public void testSortOneDocumentWithScores() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(),\n                     Collections.singletonMap(\"value\", Type.SORTED));\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    assertEquals(1, expected.totalHits);\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort, true, true);\n    \n    assertEquals(expected.totalHits, actual.totalHits);\n    assertEquals(expected.scoreDocs[0].score, actual.scoreDocs[0].score, 0F);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testSortOneDocumentWithScores().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testSortOneDocumentWithScores().mjava","sourceNew":"  /** Tests sorting a single document with scores */\n  public void testSortOneDocumentWithScores() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(),\n                     Collections.singletonMap(\"value\", Type.SORTED));\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    assertEquals(1, expected.totalHits);\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort, true, true);\n    \n    assertEquals(expected.totalHits, actual.totalHits);\n    assertEquals(expected.scoreDocs[0].score, actual.scoreDocs[0].score, 0F);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting a single document with scores */\n  public void testSortOneDocumentWithScores() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(),\n                     Collections.singletonMap(\"value\", Type.SORTED));\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    assertEquals(1, expected.totalHits);\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort, true, true);\n    \n    assertEquals(expected.totalHits, actual.totalHits);\n    assertEquals(expected.scoreDocs[0].score, actual.scoreDocs[0].score, 0F);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testSortOneDocumentWithScores().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testSortOneDocumentWithScores().mjava","sourceNew":"  /** Tests sorting a single document with scores */\n  public void testSortOneDocumentWithScores() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(),\n                     Collections.singletonMap(\"value\", Type.SORTED));\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    assertEquals(1, expected.totalHits);\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort, true, true);\n    \n    assertEquals(expected.totalHits, actual.totalHits);\n    assertEquals(expected.scoreDocs[0].score, actual.scoreDocs[0].score, 0F);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting a single document with scores */\n  public void testSortOneDocumentWithScores() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(),\n                     Collections.singletonMap(\"value\", Type.SORTED));\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    assertEquals(1, expected.totalHits);\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort, true, true);\n    \n    assertEquals(expected.totalHits, actual.totalHits);\n    assertEquals(expected.scoreDocs[0].score, actual.scoreDocs[0].score, 0F);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testSortOneDocumentWithScores().mjava","pathOld":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testSortOneDocumentWithScores().mjava","sourceNew":"  /** Tests sorting a single document with scores */\n  public void testSortOneDocumentWithScores() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(),\n                     Collections.singletonMap(\"value\", Type.SORTED));\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    assertEquals(1, expected.totalHits);\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort, true);\n    \n    assertEquals(expected.totalHits, actual.totalHits);\n    assertEquals(expected.scoreDocs[0].score, actual.scoreDocs[0].score, 0F);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting a single document with scores */\n  public void testSortOneDocumentWithScores() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(),\n                     Collections.singletonMap(\"value\", Type.SORTED));\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    assertEquals(1, expected.totalHits);\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort, true, true);\n    \n    assertEquals(expected.totalHits, actual.totalHits);\n    assertEquals(expected.scoreDocs[0].score, actual.scoreDocs[0].score, 0F);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testSortOneDocumentWithScores().mjava","pathOld":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testSortOneDocumentWithScores().mjava","sourceNew":"  /** Tests sorting a single document with scores */\n  public void testSortOneDocumentWithScores() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(),\n                     Collections.singletonMap(\"value\", Type.SORTED));\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    assertEquals(1, expected.totalHits);\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort, true);\n    \n    assertEquals(expected.totalHits, actual.totalHits);\n    assertEquals(expected.scoreDocs[0].score, actual.scoreDocs[0].score, 0F);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting a single document with scores */\n  public void testSortOneDocumentWithScores() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(),\n                     Collections.singletonMap(\"value\", Type.SORTED));\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    assertEquals(1, expected.totalHits);\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort, true, true);\n    \n    assertEquals(expected.totalHits, actual.totalHits);\n    assertEquals(expected.scoreDocs[0].score, actual.scoreDocs[0].score, 0F);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testSortOneDocumentWithScores().mjava","pathOld":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testSortOneDocumentWithScores().mjava","sourceNew":"  /** Tests sorting a single document with scores */\n  public void testSortOneDocumentWithScores() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(),\n                     Collections.singletonMap(\"value\", Type.SORTED));\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    assertEquals(1, expected.totalHits.value);\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort, true);\n    \n    assertEquals(expected.totalHits.value, actual.totalHits.value);\n    assertEquals(expected.scoreDocs[0].score, actual.scoreDocs[0].score, 0F);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting a single document with scores */\n  public void testSortOneDocumentWithScores() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = UninvertingReader.wrap(writer.getReader(),\n                     Collections.singletonMap(\"value\", Type.SORTED));\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.STRING));\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    assertEquals(1, expected.totalHits);\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort, true);\n    \n    assertEquals(expected.totalHits, actual.totalHits);\n    assertEquals(expected.scoreDocs[0].score, actual.scoreDocs[0].score, 0F);\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["0e121d43b5a10f2df530f406f935102656e9c4e8","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"83870855d82aba6819217abeff5a40779dbb28b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"0e121d43b5a10f2df530f406f935102656e9c4e8":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81fff83bdb893c1471efd78f6a9a3ce4f98120b9","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","83788ad129a5154d5c6562c4e8ce3db48793aada"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}