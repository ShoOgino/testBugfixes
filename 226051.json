{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#getPointWriter(long,String).mjava","commits":[{"id":"a69ebf290ab26d026cc224e517e0d93d931ac87b","date":1549869083,"type":1,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#getPointWriter(long,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#getPointWriter(long,String).mjava","sourceNew":"  PointWriter getPointWriter(long count, String desc) throws IOException {\n    //As we recurse, we hold two on-heap point writers at any point. Therefore the\n    //max size for these objects is half of the total points we can have on-heap.\n    if (count <= maxPointsSortInHeap / 2) {\n      int size = Math.toIntExact(count);\n      return new HeapPointWriter(size, size, packedBytesLength);\n    } else {\n      return new OfflinePointWriter(tempDir, tempFileNamePrefix, packedBytesLength, desc, count);\n    }\n  }\n\n","sourceOld":"  PointWriter getPointWriter(long count, String desc) throws IOException {\n    if (count <= maxPointsSortInHeap) {\n      int size = Math.toIntExact(count);\n      return new HeapPointWriter(size, size, packedBytesLength);\n    } else {\n      return new OfflinePointWriter(tempDir, tempFileNamePrefix, packedBytesLength, desc, count);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2344a1c769566d8c85cffcacc5e55153fa54b86","date":1550661298,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#getPointWriter(long,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#getPointWriter(long,String).mjava","sourceNew":"  PointWriter getPointWriter(long count, String desc) throws IOException {\n    //As we recurse, we hold two on-heap point writers at any point. Therefore the\n    //max size for these objects is half of the total points we can have on-heap.\n    if (count <= maxPointsSortInHeap / 2) {\n      int size = Math.toIntExact(count);\n      return new HeapPointWriter(size, packedBytesLength);\n    } else {\n      return new OfflinePointWriter(tempDir, tempFileNamePrefix, packedBytesLength, desc, count);\n    }\n  }\n\n","sourceOld":"  PointWriter getPointWriter(long count, String desc) throws IOException {\n    //As we recurse, we hold two on-heap point writers at any point. Therefore the\n    //max size for these objects is half of the total points we can have on-heap.\n    if (count <= maxPointsSortInHeap / 2) {\n      int size = Math.toIntExact(count);\n      return new HeapPointWriter(size, size, packedBytesLength);\n    } else {\n      return new OfflinePointWriter(tempDir, tempFileNamePrefix, packedBytesLength, desc, count);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#getPointWriter(long,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#getPointWriter(long,String).mjava","sourceNew":"  PointWriter getPointWriter(long count, String desc) throws IOException {\n    // As we recurse, we hold two on-heap point writers at any point. Therefore the\n    // max size for these objects is half of the total points we can have on-heap.\n    if (count <= maxPointsSortInHeap / 2) {\n      int size = Math.toIntExact(count);\n      return new HeapPointWriter(config, size);\n    } else {\n      return new OfflinePointWriter(config, tempDir, tempFileNamePrefix, desc, count);\n    }\n  }\n\n","sourceOld":"  PointWriter getPointWriter(long count, String desc) throws IOException {\n    //As we recurse, we hold two on-heap point writers at any point. Therefore the\n    //max size for these objects is half of the total points we can have on-heap.\n    if (count <= maxPointsSortInHeap / 2) {\n      int size = Math.toIntExact(count);\n      return new HeapPointWriter(size, packedBytesLength);\n    } else {\n      return new OfflinePointWriter(tempDir, tempFileNamePrefix, packedBytesLength, desc, count);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["c2344a1c769566d8c85cffcacc5e55153fa54b86"],"c2344a1c769566d8c85cffcacc5e55153fa54b86":["a69ebf290ab26d026cc224e517e0d93d931ac87b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a69ebf290ab26d026cc224e517e0d93d931ac87b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c2344a1c769566d8c85cffcacc5e55153fa54b86":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a69ebf290ab26d026cc224e517e0d93d931ac87b"],"a69ebf290ab26d026cc224e517e0d93d931ac87b":["c2344a1c769566d8c85cffcacc5e55153fa54b86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}