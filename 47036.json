{"path":"src/test/org/apache/solr/BasicFunctionalityTest#testCompressableFieldType().mjava","commits":[{"id":"b51f7d9bf6817181cc522f0b19fd3b515a6fc689","date":1157569889,"type":0,"author":"Mike Klaas","isMerge":false,"pathNew":"src/test/org/apache/solr/BasicFunctionalityTest#testCompressableFieldType().mjava","pathOld":"/dev/null","sourceNew":"  public void testCompressableFieldType() {\n    \n    IndexSchema ischema = new IndexSchema(getSchemaFile());\n    SchemaField f; // Solr field type\n    Field luf; // Lucene field\n\n    f = ischema.getField(\"test_hlt\");\n    luf = f.createField(\"test\", 0f);\n    assertFalse(luf.isCompressed());\n    assertTrue(luf.isStored());\n\n    f = ischema.getField(\"test_hlt\");\n    luf = f.createField(mkstr(345), 0f);\n    assertTrue(luf.isCompressed());\n    assertTrue(luf.isStored());\n\n    f = ischema.getField(\"test_hlt_off\");\n    luf = f.createField(mkstr(400), 0f);\n    assertFalse(luf.isCompressed());\n    assertTrue(luf.isStored());\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/BasicFunctionalityTest#testCompressableFieldType().mjava","pathOld":"src/test/org/apache/solr/BasicFunctionalityTest#testCompressableFieldType().mjava","sourceNew":"  public void testCompressableFieldType() {\n    \n    IndexSchema ischema = new IndexSchema(solrConfig, getSchemaFile());\n    SchemaField f; // Solr field type\n    Field luf; // Lucene field\n\n    f = ischema.getField(\"test_hlt\");\n    luf = f.createField(\"test\", 0f);\n    assertFalse(luf.isCompressed());\n    assertTrue(luf.isStored());\n\n    f = ischema.getField(\"test_hlt\");\n    luf = f.createField(mkstr(345), 0f);\n    assertTrue(luf.isCompressed());\n    assertTrue(luf.isStored());\n\n    f = ischema.getField(\"test_hlt_off\");\n    luf = f.createField(mkstr(400), 0f);\n    assertFalse(luf.isCompressed());\n    assertTrue(luf.isStored());\n    \n  }\n\n","sourceOld":"  public void testCompressableFieldType() {\n    \n    IndexSchema ischema = new IndexSchema(getSchemaFile());\n    SchemaField f; // Solr field type\n    Field luf; // Lucene field\n\n    f = ischema.getField(\"test_hlt\");\n    luf = f.createField(\"test\", 0f);\n    assertFalse(luf.isCompressed());\n    assertTrue(luf.isStored());\n\n    f = ischema.getField(\"test_hlt\");\n    luf = f.createField(mkstr(345), 0f);\n    assertTrue(luf.isCompressed());\n    assertTrue(luf.isStored());\n\n    f = ischema.getField(\"test_hlt_off\");\n    luf = f.createField(mkstr(400), 0f);\n    assertFalse(luf.isCompressed());\n    assertTrue(luf.isStored());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c90f01e1c0f11ee52212ab38c6d4393b3be8a646","date":1223059437,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/BasicFunctionalityTest#testCompressableFieldType().mjava","pathOld":"src/test/org/apache/solr/BasicFunctionalityTest#testCompressableFieldType().mjava","sourceNew":"  public void testCompressableFieldType() {\n    \n    IndexSchema ischema = new IndexSchema(solrConfig, getSchemaFile(), null);\n    SchemaField f; // Solr field type\n    Field luf; // Lucene field\n\n    f = ischema.getField(\"test_hlt\");\n    luf = f.createField(\"test\", 0f);\n    assertFalse(luf.isCompressed());\n    assertTrue(luf.isStored());\n\n    f = ischema.getField(\"test_hlt\");\n    luf = f.createField(mkstr(345), 0f);\n    assertTrue(luf.isCompressed());\n    assertTrue(luf.isStored());\n\n    f = ischema.getField(\"test_hlt_off\");\n    luf = f.createField(mkstr(400), 0f);\n    assertFalse(luf.isCompressed());\n    assertTrue(luf.isStored());\n    \n  }\n\n","sourceOld":"  public void testCompressableFieldType() {\n    \n    IndexSchema ischema = new IndexSchema(solrConfig, getSchemaFile());\n    SchemaField f; // Solr field type\n    Field luf; // Lucene field\n\n    f = ischema.getField(\"test_hlt\");\n    luf = f.createField(\"test\", 0f);\n    assertFalse(luf.isCompressed());\n    assertTrue(luf.isStored());\n\n    f = ischema.getField(\"test_hlt\");\n    luf = f.createField(mkstr(345), 0f);\n    assertTrue(luf.isCompressed());\n    assertTrue(luf.isStored());\n\n    f = ischema.getField(\"test_hlt_off\");\n    luf = f.createField(mkstr(400), 0f);\n    assertFalse(luf.isCompressed());\n    assertTrue(luf.isStored());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef28ac95f5f85bbf872801277448c0924b0a6827","date":1268600312,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/solr/BasicFunctionalityTest#testCompressableFieldType().mjava","pathOld":"src/test/org/apache/solr/BasicFunctionalityTest#testCompressableFieldType().mjava","sourceNew":"  public void testCompressableFieldType() {\n    \n    IndexSchema ischema = new IndexSchema(solrConfig, getSchemaFile(), null);\n    SchemaField f; // Solr field type\n    Field luf; // Lucene field\n\n//    f = ischema.getField(\"test_hlt\");\n//    luf = f.createField(\"test\", 0f);\n//    assertFalse(luf.isCompressed());\n//    assertTrue(luf.isStored());\n//\n//    f = ischema.getField(\"test_hlt\");\n//    luf = f.createField(mkstr(345), 0f);\n//    assertTrue(luf.isCompressed());\n//    assertTrue(luf.isStored());\n//\n//    f = ischema.getField(\"test_hlt_off\");\n//    luf = f.createField(mkstr(400), 0f);\n//    assertFalse(luf.isCompressed());\n//    assertTrue(luf.isStored());\n//    \n  }\n\n","sourceOld":"  public void testCompressableFieldType() {\n    \n    IndexSchema ischema = new IndexSchema(solrConfig, getSchemaFile(), null);\n    SchemaField f; // Solr field type\n    Field luf; // Lucene field\n\n    f = ischema.getField(\"test_hlt\");\n    luf = f.createField(\"test\", 0f);\n    assertFalse(luf.isCompressed());\n    assertTrue(luf.isStored());\n\n    f = ischema.getField(\"test_hlt\");\n    luf = f.createField(mkstr(345), 0f);\n    assertTrue(luf.isCompressed());\n    assertTrue(luf.isStored());\n\n    f = ischema.getField(\"test_hlt_off\");\n    luf = f.createField(mkstr(400), 0f);\n    assertFalse(luf.isCompressed());\n    assertTrue(luf.isStored());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testCompressableFieldType().mjava","pathOld":"src/test/org/apache/solr/BasicFunctionalityTest#testCompressableFieldType().mjava","sourceNew":"  public void testCompressableFieldType() {\n    \n    IndexSchema ischema = new IndexSchema(solrConfig, getSchemaFile(), null);\n    SchemaField f; // Solr field type\n    Field luf; // Lucene field\n\n//    f = ischema.getField(\"test_hlt\");\n//    luf = f.createField(\"test\", 0f);\n//    assertFalse(luf.isCompressed());\n//    assertTrue(luf.isStored());\n//\n//    f = ischema.getField(\"test_hlt\");\n//    luf = f.createField(mkstr(345), 0f);\n//    assertTrue(luf.isCompressed());\n//    assertTrue(luf.isStored());\n//\n//    f = ischema.getField(\"test_hlt_off\");\n//    luf = f.createField(mkstr(400), 0f);\n//    assertFalse(luf.isCompressed());\n//    assertTrue(luf.isStored());\n//    \n  }\n\n","sourceOld":"  public void testCompressableFieldType() {\n    \n    IndexSchema ischema = new IndexSchema(solrConfig, getSchemaFile(), null);\n    SchemaField f; // Solr field type\n    Field luf; // Lucene field\n\n//    f = ischema.getField(\"test_hlt\");\n//    luf = f.createField(\"test\", 0f);\n//    assertFalse(luf.isCompressed());\n//    assertTrue(luf.isStored());\n//\n//    f = ischema.getField(\"test_hlt\");\n//    luf = f.createField(mkstr(345), 0f);\n//    assertTrue(luf.isCompressed());\n//    assertTrue(luf.isStored());\n//\n//    f = ischema.getField(\"test_hlt_off\");\n//    luf = f.createField(mkstr(400), 0f);\n//    assertFalse(luf.isCompressed());\n//    assertTrue(luf.isStored());\n//    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b51f7d9bf6817181cc522f0b19fd3b515a6fc689":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"c90f01e1c0f11ee52212ab38c6d4393b3be8a646":["6d6338c87060be5f66757a94945975f3bbd377a9"],"6d6338c87060be5f66757a94945975f3bbd377a9":["b51f7d9bf6817181cc522f0b19fd3b515a6fc689"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ef28ac95f5f85bbf872801277448c0924b0a6827":["c90f01e1c0f11ee52212ab38c6d4393b3be8a646"],"ad94625fb8d088209f46650c8097196fec67f00c":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b51f7d9bf6817181cc522f0b19fd3b515a6fc689":["6d6338c87060be5f66757a94945975f3bbd377a9"],"c90f01e1c0f11ee52212ab38c6d4393b3be8a646":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"6d6338c87060be5f66757a94945975f3bbd377a9":["c90f01e1c0f11ee52212ab38c6d4393b3be8a646"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["b51f7d9bf6817181cc522f0b19fd3b515a6fc689"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef28ac95f5f85bbf872801277448c0924b0a6827":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}