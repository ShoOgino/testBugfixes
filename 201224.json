{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","commits":[{"id":"9f71b6d873161f41cef30256f162ac6fa8f88858","date":1494576240,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':'#ANY'}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'cpu','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cpu','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':'#ANY'}\" +\n        \"    ]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09d06843c166c033fc611df4ce71e33731bc1ad1","date":1495531684,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","sourceNew":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':'#ANY'}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':'#ANY'}\" +\n        \"    ]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","sourceOld":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':'#ANY'}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'cpu','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cpu','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':'#ANY'}\" +\n        \"    ]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acb26533c8d0113ceff75cc811f4d3d93cfb99e6","date":1495778582,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","sourceNew":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","sourceOld":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':'#ANY'}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':'#ANY'}\" +\n        \"    ]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a80c0cde330092676c81467a3ea0c9660b3d773b","date":1495778967,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","sourceNew":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","sourceOld":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':'#ANY'}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':'#ANY'}\" +\n        \"    ]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d913bcce36d9d659d239969d07e20d245a5690d9","date":1496064789,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","sourceNew":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    NamedList<Object> response = null;\n    try {\n      response = solrClient.request(req);\n      fail(\"Adding a policy with 'cores' attribute should not have succeeded.\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(e.getMessage().contains(\"cores is only allowed in 'cluster-policy'\"));\n    } catch (Exception e) {\n      throw e;\n    }\n\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","sourceOld":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    NamedList<Object> response = null;\n    try {\n      response = solrClient.request(req);\n      fail(\"Adding a policy with 'cores' attribute should not have succeeded.\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(e.getMessage().contains(\"cores is only allowed in 'cluster-policy'\"));\n    } catch (Exception e) {\n      throw e;\n    }\n\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fecc6e667bf47b3ea3930cef5b040cf3d4d07504","308086b64d9bf02efe7c70ebb695aa52ff0c2572"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"45e9da76e46799ff0ceed70defb6f8e482d524d2","date":1496149439,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","sourceNew":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    NamedList<Object> response = null;\n    try {\n      response = solrClient.request(req);\n      fail(\"Adding a policy with 'cores' attribute should not have succeeded.\");\n    } catch (SolrServerException e) {\n      // todo one of these catch blocks should not be needed after SOLR-10768\n      if (e.getRootCause() instanceof HttpSolrClient.RemoteSolrException) {\n        HttpSolrClient.RemoteSolrException rootCause = (HttpSolrClient.RemoteSolrException) e.getRootCause();\n        // expected\n        assertTrue(rootCause.getMessage().contains(\"cores is only allowed in 'cluster-policy'\"));\n      } else  {\n        throw e;\n      }\n    } catch (HttpSolrClient.RemoteSolrException e)  {\n      // expected\n      assertTrue(e.getMessage().contains(\"cores is only allowed in 'cluster-policy'\"));\n    } catch (Exception e) {\n      throw e;\n    }\n\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","sourceOld":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    NamedList<Object> response = null;\n    try {\n      response = solrClient.request(req);\n      fail(\"Adding a policy with 'cores' attribute should not have succeeded.\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(e.getMessage().contains(\"cores is only allowed in 'cluster-policy'\"));\n    } catch (Exception e) {\n      throw e;\n    }\n\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","bugFix":null,"bugIntro":["fecc6e667bf47b3ea3930cef5b040cf3d4d07504"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    NamedList<Object> response = null;\n    try {\n      response = solrClient.request(req);\n      fail(\"Adding a policy with 'cores' attribute should not have succeeded.\");\n    } catch (SolrServerException e) {\n      // todo one of these catch blocks should not be needed after SOLR-10768\n      if (e.getRootCause() instanceof HttpSolrClient.RemoteSolrException) {\n        HttpSolrClient.RemoteSolrException rootCause = (HttpSolrClient.RemoteSolrException) e.getRootCause();\n        // expected\n        assertTrue(rootCause.getMessage().contains(\"cores is only allowed in 'cluster-policy'\"));\n      } else  {\n        throw e;\n      }\n    } catch (HttpSolrClient.RemoteSolrException e)  {\n      // expected\n      assertTrue(e.getMessage().contains(\"cores is only allowed in 'cluster-policy'\"));\n    } catch (Exception e) {\n      throw e;\n    }\n\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","sourceNew":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    NamedList<Object> response = null;\n    try {\n      response = solrClient.request(req);\n      fail(\"Adding a policy with 'cores' attribute should not have succeeded.\");\n    } catch (SolrServerException e) {\n      // todo one of these catch blocks should not be needed after SOLR-10768\n      if (e.getRootCause() instanceof HttpSolrClient.RemoteSolrException) {\n        HttpSolrClient.RemoteSolrException rootCause = (HttpSolrClient.RemoteSolrException) e.getRootCause();\n        // expected\n        assertTrue(rootCause.getMessage().contains(\"cores is only allowed in 'cluster-policy'\"));\n      } else  {\n        throw e;\n      }\n    } catch (HttpSolrClient.RemoteSolrException e)  {\n      // expected\n      assertTrue(e.getMessage().contains(\"cores is only allowed in 'cluster-policy'\"));\n    } catch (Exception e) {\n      throw e;\n    }\n\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","sourceOld":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    NamedList<Object> response = null;\n    try {\n      response = solrClient.request(req);\n      fail(\"Adding a policy with 'cores' attribute should not have succeeded.\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n      assertTrue(e.getMessage().contains(\"cores is only allowed in 'cluster-policy'\"));\n    } catch (Exception e) {\n      throw e;\n    }\n\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4a9a892a743a560d17851cd4ce6cb0aaa2d8712","date":1498109521,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","sourceNew":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    NamedList<Object> response = null;\n    try {\n      solrClient.request(req);\n      fail(\"Adding a policy with 'cores' attribute should not have succeeded.\");\n    } catch (SolrServerException e) {\n      // todo one of these catch blocks should not be needed after SOLR-10768\n      if (e.getRootCause() instanceof HttpSolrClient.RemoteSolrException) {\n        HttpSolrClient.RemoteSolrException rootCause = (HttpSolrClient.RemoteSolrException) e.getRootCause();\n        // expected\n        assertTrue(rootCause.getMessage().contains(\"cores is only allowed in 'cluster-policy'\"));\n      } else  {\n        throw e;\n      }\n    } catch (HttpSolrClient.RemoteSolrException e)  {\n      // expected\n      assertTrue(e.getMessage().contains(\"cores is only allowed in 'cluster-policy'\"));\n    } catch (Exception e) {\n      throw e;\n    }\n\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","sourceOld":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    NamedList<Object> response = null;\n    try {\n      response = solrClient.request(req);\n      String errorMsg = (String) ((NamedList)response.get(\"error\")).get(\"msg\");\n      assertTrue(errorMsg.contains(\"cores is only allowed in 'cluster-policy'\"));\n    } catch (SolrServerException e) {\n      // todo one of these catch blocks should not be needed after SOLR-10768\n      if (e.getRootCause() instanceof HttpSolrClient.RemoteSolrException) {\n        HttpSolrClient.RemoteSolrException rootCause = (HttpSolrClient.RemoteSolrException) e.getRootCause();\n        // expected\n        assertTrue(rootCause.getMessage().contains(\"cores is only allowed in 'cluster-policy'\"));\n      } else  {\n        throw e;\n      }\n    } catch (HttpSolrClient.RemoteSolrException e)  {\n      // expected\n      assertTrue(e.getMessage().contains(\"cores is only allowed in 'cluster-policy'\"));\n    } catch (Exception e) {\n      throw e;\n    }\n\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"308086b64d9bf02efe7c70ebb695aa52ff0c2572","date":1498013603,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","sourceNew":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    NamedList<Object> response = null;\n    try {\n      response = solrClient.request(req);\n      String errorMsg = (String) ((NamedList)response.get(\"error\")).get(\"msg\");\n      assertTrue(errorMsg.contains(\"cores is only allowed in 'cluster-policy'\"));\n    } catch (SolrServerException e) {\n      // todo one of these catch blocks should not be needed after SOLR-10768\n      if (e.getRootCause() instanceof HttpSolrClient.RemoteSolrException) {\n        HttpSolrClient.RemoteSolrException rootCause = (HttpSolrClient.RemoteSolrException) e.getRootCause();\n        // expected\n        assertTrue(rootCause.getMessage().contains(\"cores is only allowed in 'cluster-policy'\"));\n      } else  {\n        throw e;\n      }\n    } catch (HttpSolrClient.RemoteSolrException e)  {\n      // expected\n      assertTrue(e.getMessage().contains(\"cores is only allowed in 'cluster-policy'\"));\n    } catch (Exception e) {\n      throw e;\n    }\n\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","sourceOld":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    NamedList<Object> response = null;\n    try {\n      response = solrClient.request(req);\n      fail(\"Adding a policy with 'cores' attribute should not have succeeded.\");\n    } catch (SolrServerException e) {\n      // todo one of these catch blocks should not be needed after SOLR-10768\n      if (e.getRootCause() instanceof HttpSolrClient.RemoteSolrException) {\n        HttpSolrClient.RemoteSolrException rootCause = (HttpSolrClient.RemoteSolrException) e.getRootCause();\n        // expected\n        assertTrue(rootCause.getMessage().contains(\"cores is only allowed in 'cluster-policy'\"));\n      } else  {\n        throw e;\n      }\n    } catch (HttpSolrClient.RemoteSolrException e)  {\n      // expected\n      assertTrue(e.getMessage().contains(\"cores is only allowed in 'cluster-policy'\"));\n    } catch (Exception e) {\n      throw e;\n    }\n\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","bugFix":["a513b6a92751e54c76fb5447948c9e7d437163a7"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","sourceNew":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    NamedList<Object> response = null;\n    try {\n      response = solrClient.request(req);\n      String errorMsg = (String) ((NamedList)response.get(\"error\")).get(\"msg\");\n      assertTrue(errorMsg.contains(\"cores is only allowed in 'cluster-policy'\"));\n    } catch (SolrServerException e) {\n      // todo one of these catch blocks should not be needed after SOLR-10768\n      if (e.getRootCause() instanceof HttpSolrClient.RemoteSolrException) {\n        HttpSolrClient.RemoteSolrException rootCause = (HttpSolrClient.RemoteSolrException) e.getRootCause();\n        // expected\n        assertTrue(rootCause.getMessage().contains(\"cores is only allowed in 'cluster-policy'\"));\n      } else  {\n        throw e;\n      }\n    } catch (HttpSolrClient.RemoteSolrException e)  {\n      // expected\n      assertTrue(e.getMessage().contains(\"cores is only allowed in 'cluster-policy'\"));\n    } catch (Exception e) {\n      throw e;\n    }\n\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","sourceOld":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    NamedList<Object> response = null;\n    try {\n      response = solrClient.request(req);\n      fail(\"Adding a policy with 'cores' attribute should not have succeeded.\");\n    } catch (SolrServerException e) {\n      // todo one of these catch blocks should not be needed after SOLR-10768\n      if (e.getRootCause() instanceof HttpSolrClient.RemoteSolrException) {\n        HttpSolrClient.RemoteSolrException rootCause = (HttpSolrClient.RemoteSolrException) e.getRootCause();\n        // expected\n        assertTrue(rootCause.getMessage().contains(\"cores is only allowed in 'cluster-policy'\"));\n      } else  {\n        throw e;\n      }\n    } catch (HttpSolrClient.RemoteSolrException e)  {\n      // expected\n      assertTrue(e.getMessage().contains(\"cores is only allowed in 'cluster-policy'\"));\n    } catch (Exception e) {\n      throw e;\n    }\n\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","sourceNew":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    NamedList<Object> response = null;\n    try {\n      solrClient.request(req);\n      fail(\"Adding a policy with 'cores' attribute should not have succeeded.\");\n    } catch (SolrServerException e) {\n      // todo one of these catch blocks should not be needed after SOLR-10768\n      if (e.getRootCause() instanceof HttpSolrClient.RemoteSolrException) {\n        HttpSolrClient.RemoteSolrException rootCause = (HttpSolrClient.RemoteSolrException) e.getRootCause();\n        // expected\n        assertTrue(rootCause.getMessage().contains(\"cores is only allowed in 'cluster-policy'\"));\n      } else  {\n        throw e;\n      }\n    } catch (HttpSolrClient.RemoteSolrException e)  {\n      // expected\n      assertTrue(e.getMessage().contains(\"cores is only allowed in 'cluster-policy'\"));\n    } catch (Exception e) {\n      throw e;\n    }\n\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","sourceOld":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    NamedList<Object> response = null;\n    try {\n      response = solrClient.request(req);\n      String errorMsg = (String) ((NamedList)response.get(\"error\")).get(\"msg\");\n      assertTrue(errorMsg.contains(\"cores is only allowed in 'cluster-policy'\"));\n    } catch (SolrServerException e) {\n      // todo one of these catch blocks should not be needed after SOLR-10768\n      if (e.getRootCause() instanceof HttpSolrClient.RemoteSolrException) {\n        HttpSolrClient.RemoteSolrException rootCause = (HttpSolrClient.RemoteSolrException) e.getRootCause();\n        // expected\n        assertTrue(rootCause.getMessage().contains(\"cores is only allowed in 'cluster-policy'\"));\n      } else  {\n        throw e;\n      }\n    } catch (HttpSolrClient.RemoteSolrException e)  {\n      // expected\n      assertTrue(e.getMessage().contains(\"cores is only allowed in 'cluster-policy'\"));\n    } catch (Exception e) {\n      throw e;\n    }\n\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fecc6e667bf47b3ea3930cef5b040cf3d4d07504","date":1498538384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","sourceNew":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    NamedList<Object> response = null;\n    try {\n      solrClient.request(req);\n      fail(\"Adding a policy with 'cores' attribute should not have succeeded.\");\n    } catch (HttpSolrClient.RemoteSolrException e)  {\n      // expected\n      assertTrue(e.getMessage().contains(\"cores is only allowed in 'cluster-policy'\"));\n    }\n\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","sourceOld":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    NamedList<Object> response = null;\n    try {\n      solrClient.request(req);\n      fail(\"Adding a policy with 'cores' attribute should not have succeeded.\");\n    } catch (SolrServerException e) {\n      // todo one of these catch blocks should not be needed after SOLR-10768\n      if (e.getRootCause() instanceof HttpSolrClient.RemoteSolrException) {\n        HttpSolrClient.RemoteSolrException rootCause = (HttpSolrClient.RemoteSolrException) e.getRootCause();\n        // expected\n        assertTrue(rootCause.getMessage().contains(\"cores is only allowed in 'cluster-policy'\"));\n      } else  {\n        throw e;\n      }\n    } catch (HttpSolrClient.RemoteSolrException e)  {\n      // expected\n      assertTrue(e.getMessage().contains(\"cores is only allowed in 'cluster-policy'\"));\n    } catch (Exception e) {\n      throw e;\n    }\n\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","bugFix":["45e9da76e46799ff0ceed70defb6f8e482d524d2","a513b6a92751e54c76fb5447948c9e7d437163a7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","sourceNew":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    NamedList<Object> response = null;\n    try {\n      solrClient.request(req);\n      fail(\"Adding a policy with 'cores' attribute should not have succeeded.\");\n    } catch (HttpSolrClient.RemoteSolrException e)  {\n      // expected\n      assertTrue(e.getMessage().contains(\"cores is only allowed in 'cluster-policy'\"));\n    }\n\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","sourceOld":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    NamedList<Object> response = null;\n    try {\n      solrClient.request(req);\n      fail(\"Adding a policy with 'cores' attribute should not have succeeded.\");\n    } catch (SolrServerException e) {\n      // todo one of these catch blocks should not be needed after SOLR-10768\n      if (e.getRootCause() instanceof HttpSolrClient.RemoteSolrException) {\n        HttpSolrClient.RemoteSolrException rootCause = (HttpSolrClient.RemoteSolrException) e.getRootCause();\n        // expected\n        assertTrue(rootCause.getMessage().contains(\"cores is only allowed in 'cluster-policy'\"));\n      } else  {\n        throw e;\n      }\n    } catch (HttpSolrClient.RemoteSolrException e)  {\n      // expected\n      assertTrue(e.getMessage().contains(\"cores is only allowed in 'cluster-policy'\"));\n    } catch (Exception e) {\n      throw e;\n    }\n\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    NamedList<Object> response = null;\n    try {\n      solrClient.request(req);\n      fail(\"Adding a policy with 'cores' attribute should not have succeeded.\");\n    } catch (HttpSolrClient.RemoteSolrException e)  {\n      // expected\n      assertTrue(e.getMessage().contains(\"cores is only allowed in 'cluster-policy'\"));\n    }\n\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c8cb19f78af5bca202b4a4cfce35d2fc0ac9e4c","date":1501832890,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","sourceNew":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    NamedList<Object> response = null;\n    try {\n      solrClient.request(req);\n      fail(\"Adding a policy with 'cores' attribute should not have succeeded.\");\n    } catch (HttpSolrClient.RemoteSolrException e)  {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"cores is only allowed in 'cluster-policy'\"));\n    }\n\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","sourceOld":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    NamedList<Object> response = null;\n    try {\n      solrClient.request(req);\n      fail(\"Adding a policy with 'cores' attribute should not have succeeded.\");\n    } catch (HttpSolrClient.RemoteSolrException e)  {\n      // expected\n      assertTrue(e.getMessage().contains(\"cores is only allowed in 'cluster-policy'\"));\n    }\n\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afde616cab4149eba221511fd7ff21d460cded7c","date":1501855890,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","sourceNew":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    NamedList<Object> response = null;\n    try {\n      solrClient.request(req);\n      fail(\"Adding a policy with 'cores' attribute should not have succeeded.\");\n    } catch (HttpSolrClient.RemoteExecutionException e)  {\n      String message = String.valueOf(Utils.getObjectByPath(e.getMetaData(), true, \"error/details[0]/errorMessages[0]\"));\n\n      // expected\n      assertTrue(message.contains(\"cores is only allowed in 'cluster-policy'\"));\n    }\n\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","sourceOld":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    NamedList<Object> response = null;\n    try {\n      solrClient.request(req);\n      fail(\"Adding a policy with 'cores' attribute should not have succeeded.\");\n    } catch (HttpSolrClient.RemoteSolrException e)  {\n      // expected\n      assertTrue(e.getMessage().contains(\"cores is only allowed in 'cluster-policy'\"));\n    }\n\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","sourceNew":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    NamedList<Object> response = null;\n    try {\n      solrClient.request(req);\n      fail(\"Adding a policy with 'cores' attribute should not have succeeded.\");\n    } catch (HttpSolrClient.RemoteExecutionException e)  {\n      String message = String.valueOf(Utils.getObjectByPath(e.getMetaData(), true, \"error/details[0]/errorMessages[0]\"));\n\n      // expected\n      assertTrue(message.contains(\"cores is only allowed in 'cluster-policy'\"));\n    }\n\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","sourceOld":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    NamedList<Object> response = null;\n    try {\n      solrClient.request(req);\n      fail(\"Adding a policy with 'cores' attribute should not have succeeded.\");\n    } catch (HttpSolrClient.RemoteSolrException e)  {\n      // expected\n      assertTrue(String.valueOf(getObjectByPath(((HttpSolrClient.RemoteExecutionException) e).getMetaData(),\n          false, \"error/details[0]/errorMessages[0]\")).contains(\"cores is only allowed in 'cluster-policy'\"));\n    }\n\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","sourceNew":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    NamedList<Object> response = null;\n    try {\n      solrClient.request(req);\n      fail(\"Adding a policy with 'cores' attribute should not have succeeded.\");\n    } catch (HttpSolrClient.RemoteExecutionException e)  {\n      String message = String.valueOf(Utils.getObjectByPath(e.getMetaData(), true, \"error/details[0]/errorMessages[0]\"));\n\n      // expected\n      assertTrue(message.contains(\"cores is only allowed in 'cluster-policy'\"));\n    }\n\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","sourceOld":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    NamedList<Object> response = null;\n    try {\n      solrClient.request(req);\n      fail(\"Adding a policy with 'cores' attribute should not have succeeded.\");\n    } catch (HttpSolrClient.RemoteExecutionException e)  {\n      String message = String.valueOf(Utils.getObjectByPath(e.getMetaData(), true, \"error/details[0]/errorMessages[0]\"));\n\n      // expected\n      assertTrue(message.contains(\"cores is only allowed in 'cluster-policy'\"));\n    }\n\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d3a1cba0d84384334e5c75e77d139a3a9e480fa","date":1557955868,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","sourceNew":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    NamedList<Object> response = null;\n    try {\n      solrClient.request(req);\n      fail(\"Adding a policy with 'cores' attribute should not have succeeded.\");\n    } catch (HttpSolrClient.RemoteExecutionException e)  {\n      String message = e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\",null);\n\n      // expected\n      assertTrue(message.contains(\"cores is only allowed in 'cluster-policy'\"));\n    }\n\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","sourceOld":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    NamedList<Object> response = null;\n    try {\n      solrClient.request(req);\n      fail(\"Adding a policy with 'cores' attribute should not have succeeded.\");\n    } catch (HttpSolrClient.RemoteExecutionException e)  {\n      String message = String.valueOf(Utils.getObjectByPath(e.getMetaData(), true, \"error/details[0]/errorMessages[0]\"));\n\n      // expected\n      assertTrue(message.contains(\"cores is only allowed in 'cluster-policy'\"));\n    }\n\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"081849c2756a6c9b9883ab9e332f3f3fcf2f05fa","date":1559549598,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","sourceNew":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    NamedList<Object> response = null;\n    try {\n      solrClient.request(req);\n      fail(\"Adding a policy with 'cores' attribute should not have succeeded.\");\n    } catch (HttpSolrClient.RemoteExecutionException e)  {\n      String message = e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\",null);\n\n      // expected\n      assertTrue(message.contains(\"cores is only allowed in 'cluster-policy'\"));\n    }\n\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'replica':0, put : on-each, nodeset:{'nodeRole':'overseer'} }\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","sourceOld":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    NamedList<Object> response = null;\n    try {\n      solrClient.request(req);\n      fail(\"Adding a policy with 'cores' attribute should not have succeeded.\");\n    } catch (HttpSolrClient.RemoteExecutionException e)  {\n      String message = e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\",null);\n\n      // expected\n      assertTrue(message.contains(\"cores is only allowed in 'cluster-policy'\"));\n    }\n\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7194afdfe9b45ca331c1cd5001cd9766688688b","date":1560867417,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","sourceNew":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    NamedList<Object> response = null;\n    try {\n      solrClient.request(req);\n      fail(\"Adding a policy with 'cores' attribute should not have succeeded.\");\n    } catch (HttpSolrClient.RemoteExecutionException e)  {\n      String message = e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\",null);\n\n      // expected\n      assertTrue(message.contains(\"cores is only allowed in 'cluster-policy'\"));\n    }\n\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'replica':0, put : on-each-node, nodeset:{'nodeRole':'overseer'} }\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","sourceOld":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    NamedList<Object> response = null;\n    try {\n      solrClient.request(req);\n      fail(\"Adding a policy with 'cores' attribute should not have succeeded.\");\n    } catch (HttpSolrClient.RemoteExecutionException e)  {\n      String message = e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\",null);\n\n      // expected\n      assertTrue(message.contains(\"cores is only allowed in 'cluster-policy'\"));\n    }\n\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'replica':0, put : on-each, nodeset:{'nodeRole':'overseer'} }\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db96734b79e26d948b59f68bd4564c4836a71acf","date":1585375566,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","sourceNew":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    NamedList<Object> response = null;\n    try {\n      solrClient.request(req);\n      fail(\"Adding a policy with 'cores' attribute should not have succeeded.\");\n    } catch (BaseHttpSolrClient.RemoteExecutionException e)  {\n      String message = e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\",null);\n\n      // expected\n      assertTrue(message.contains(\"cores is only allowed in 'cluster-policy'\"));\n    }\n\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'replica':0, put : on-each-node, nodeset:{'nodeRole':'overseer'} }\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","sourceOld":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    NamedList<Object> response = null;\n    try {\n      solrClient.request(req);\n      fail(\"Adding a policy with 'cores' attribute should not have succeeded.\");\n    } catch (HttpSolrClient.RemoteExecutionException e)  {\n      String message = e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\",null);\n\n      // expected\n      assertTrue(message.contains(\"cores is only allowed in 'cluster-policy'\"));\n    }\n\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'replica':0, put : on-each-node, nodeset:{'nodeRole':'overseer'} }\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    NamedList<Object> response = null;\n    try {\n      solrClient.request(req);\n      fail(\"Adding a policy with 'cores' attribute should not have succeeded.\");\n    } catch (BaseHttpSolrClient.RemoteExecutionException e)  {\n      String message = e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\",null);\n\n      // expected\n      assertTrue(message.contains(\"cores is only allowed in 'cluster-policy'\"));\n    }\n\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    @SuppressWarnings({\"rawtypes\"})\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    @SuppressWarnings({\"rawtypes\"})\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    @SuppressWarnings({\"rawtypes\"})\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'replica':0, put : on-each-node, nodeset:{'nodeRole':'overseer'} }\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","sourceOld":"  @Test\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    NamedList<Object> response = null;\n    try {\n      solrClient.request(req);\n      fail(\"Adding a policy with 'cores' attribute should not have succeeded.\");\n    } catch (BaseHttpSolrClient.RemoteExecutionException e)  {\n      String message = e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\",null);\n\n      // expected\n      assertTrue(message.contains(\"cores is only allowed in 'cluster-policy'\"));\n    }\n\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'replica':0, put : on-each-node, nodeset:{'nodeRole':'overseer'} }\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testPolicyAndPreferences().mjava","sourceNew":null,"sourceOld":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testPolicyAndPreferences() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // add multiple policies\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    NamedList<Object> response = null;\n    try {\n      solrClient.request(req);\n      fail(\"Adding a policy with 'cores' attribute should not have succeeded.\");\n    } catch (BaseHttpSolrClient.RemoteExecutionException e)  {\n      String message = e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\",null);\n\n      // expected\n      assertTrue(message.contains(\"cores is only allowed in 'cluster-policy'\"));\n    }\n\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    byte[] data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNotNull(policies);\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    // update default policy\n    setPolicyCommand = \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    @SuppressWarnings({\"rawtypes\"})\n    List conditions = (List) policies.get(\"xyz\");\n    assertEquals(1, conditions.size());\n\n    // remove policy\n    String removePolicyCommand = \"{remove-policy : policy1}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removePolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    policies = (Map<String, Object>) loaded.get(\"policies\");\n    assertNull(policies.get(\"policy1\"));\n\n    // set preferences\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    @SuppressWarnings({\"rawtypes\"})\n    List preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(3, preferences.size());\n\n    // set preferences\n    setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    preferences = (List) loaded.get(\"cluster-preferences\");\n    assertEquals(1, preferences.size());\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    @SuppressWarnings({\"rawtypes\"})\n    List clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'replica':0, put : on-each-node, nodeset:{'nodeRole':'overseer'} }\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    data = zkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, null, true);\n    loaded = ZkNodeProps.load(data);\n    clusterPolicy = (List) loaded.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a7194afdfe9b45ca331c1cd5001cd9766688688b":["081849c2756a6c9b9883ab9e332f3f3fcf2f05fa"],"d4a9a892a743a560d17851cd4ce6cb0aaa2d8712":["308086b64d9bf02efe7c70ebb695aa52ff0c2572"],"0d3a1cba0d84384334e5c75e77d139a3a9e480fa":["89948af0461fead48f44ba8fb7866f107ce83f22"],"d913bcce36d9d659d239969d07e20d245a5690d9":["a80c0cde330092676c81467a3ea0c9660b3d773b"],"308086b64d9bf02efe7c70ebb695aa52ff0c2572":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"afde616cab4149eba221511fd7ff21d460cded7c":["28288370235ed02234a64753cdbf0c6ec096304a"],"081849c2756a6c9b9883ab9e332f3f3fcf2f05fa":["0d3a1cba0d84384334e5c75e77d139a3a9e480fa"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["d913bcce36d9d659d239969d07e20d245a5690d9","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["db96734b79e26d948b59f68bd4564c4836a71acf"],"a80c0cde330092676c81467a3ea0c9660b3d773b":["09d06843c166c033fc611df4ce71e33731bc1ad1","acb26533c8d0113ceff75cc811f4d3d93cfb99e6"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","45e9da76e46799ff0ceed70defb6f8e482d524d2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5c8cb19f78af5bca202b4a4cfce35d2fc0ac9e4c":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","fecc6e667bf47b3ea3930cef5b040cf3d4d07504"],"89948af0461fead48f44ba8fb7866f107ce83f22":["afde616cab4149eba221511fd7ff21d460cded7c"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"45e9da76e46799ff0ceed70defb6f8e482d524d2":["a513b6a92751e54c76fb5447948c9e7d437163a7"],"fecc6e667bf47b3ea3930cef5b040cf3d4d07504":["d4a9a892a743a560d17851cd4ce6cb0aaa2d8712"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","d4a9a892a743a560d17851cd4ce6cb0aaa2d8712"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fecc6e667bf47b3ea3930cef5b040cf3d4d07504"],"09d06843c166c033fc611df4ce71e33731bc1ad1":["9f71b6d873161f41cef30256f162ac6fa8f88858"],"9f71b6d873161f41cef30256f162ac6fa8f88858":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["5c8cb19f78af5bca202b4a4cfce35d2fc0ac9e4c","afde616cab4149eba221511fd7ff21d460cded7c"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"db96734b79e26d948b59f68bd4564c4836a71acf":["a7194afdfe9b45ca331c1cd5001cd9766688688b"],"acb26533c8d0113ceff75cc811f4d3d93cfb99e6":["09d06843c166c033fc611df4ce71e33731bc1ad1"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e9017cf144952056066919f1ebc7897ff9bd71b1","308086b64d9bf02efe7c70ebb695aa52ff0c2572"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"a7194afdfe9b45ca331c1cd5001cd9766688688b":["db96734b79e26d948b59f68bd4564c4836a71acf"],"d4a9a892a743a560d17851cd4ce6cb0aaa2d8712":["fecc6e667bf47b3ea3930cef5b040cf3d4d07504","b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"0d3a1cba0d84384334e5c75e77d139a3a9e480fa":["081849c2756a6c9b9883ab9e332f3f3fcf2f05fa"],"d913bcce36d9d659d239969d07e20d245a5690d9":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"308086b64d9bf02efe7c70ebb695aa52ff0c2572":["d4a9a892a743a560d17851cd4ce6cb0aaa2d8712","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"afde616cab4149eba221511fd7ff21d460cded7c":["89948af0461fead48f44ba8fb7866f107ce83f22","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"081849c2756a6c9b9883ab9e332f3f3fcf2f05fa":["a7194afdfe9b45ca331c1cd5001cd9766688688b"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"a80c0cde330092676c81467a3ea0c9660b3d773b":["d913bcce36d9d659d239969d07e20d245a5690d9"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["308086b64d9bf02efe7c70ebb695aa52ff0c2572","e9017cf144952056066919f1ebc7897ff9bd71b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74aea047dff7f7c38a2d766827bd20d356f98c6a","28288370235ed02234a64753cdbf0c6ec096304a","9f71b6d873161f41cef30256f162ac6fa8f88858","a513b6a92751e54c76fb5447948c9e7d437163a7"],"5c8cb19f78af5bca202b4a4cfce35d2fc0ac9e4c":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["5c8cb19f78af5bca202b4a4cfce35d2fc0ac9e4c"],"89948af0461fead48f44ba8fb7866f107ce83f22":["0d3a1cba0d84384334e5c75e77d139a3a9e480fa"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"45e9da76e46799ff0ceed70defb6f8e482d524d2":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"fecc6e667bf47b3ea3930cef5b040cf3d4d07504":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"28288370235ed02234a64753cdbf0c6ec096304a":["afde616cab4149eba221511fd7ff21d460cded7c"],"09d06843c166c033fc611df4ce71e33731bc1ad1":["a80c0cde330092676c81467a3ea0c9660b3d773b","acb26533c8d0113ceff75cc811f4d3d93cfb99e6"],"9f71b6d873161f41cef30256f162ac6fa8f88858":["09d06843c166c033fc611df4ce71e33731bc1ad1"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"a513b6a92751e54c76fb5447948c9e7d437163a7":["45e9da76e46799ff0ceed70defb6f8e482d524d2"],"db96734b79e26d948b59f68bd4564c4836a71acf":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"acb26533c8d0113ceff75cc811f4d3d93cfb99e6":["a80c0cde330092676c81467a3ea0c9660b3d773b"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}