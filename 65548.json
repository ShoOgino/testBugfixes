{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.CutoffSingleCircleSegmentEndpoint#CutoffSingleCircleSegmentEndpoint(GeoPoint,SidedPlane,SidedPlane,GeoPoint,GeoPoint).mjava","commits":[{"id":"8c27ce32f195c27953d9bfdc5eae3b2d212f3186","date":1551188777,"type":1,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.CutoffSingleCircleSegmentEndpoint#CutoffSingleCircleSegmentEndpoint(GeoPoint,SidedPlane,SidedPlane,GeoPoint,GeoPoint).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.SegmentEndpoint#SegmentEndpoint(GeoPoint,SidedPlane,SidedPlane,GeoPoint,GeoPoint).mjava","sourceNew":"    /** Constructor for case (2.5).\n     * Generate an endpoint, given two cutoff planes plus upper and lower edge points.\n     *@param point is the center.\n     *@param cutoffPlane1 is one adjoining path segment cutoff plane.\n     *@param cutoffPlane2 is another adjoining path segment cutoff plane.\n     *@param topEdgePoint is a point on the cutoffPlane that should be also on the circle plane.\n     *@param bottomEdgePoint is another point on the cutoffPlane that should be also on the circle plane.\n     */\n    public CutoffSingleCircleSegmentEndpoint(final GeoPoint point,\n      final SidedPlane cutoffPlane1, final SidedPlane cutoffPlane2, final GeoPoint topEdgePoint, final GeoPoint bottomEdgePoint) {\n      super(point, cutoffPlane1, topEdgePoint, bottomEdgePoint);\n      this.cutoffPlanes = new Membership[]{new SidedPlane(cutoffPlane1), new SidedPlane(cutoffPlane2)};\n      this.notablePoints = new GeoPoint[]{topEdgePoint, bottomEdgePoint};\n    }\n\n","sourceOld":"    /** Constructor for case (2.5).\n     * Generate an endpoint, given two cutoff planes plus upper and lower edge points.\n     *@param point is the center.\n     *@param cutoffPlane1 is one adjoining path segment cutoff plane.\n     *@param cutoffPlane2 is another adjoining path segment cutoff plane.\n     *@param topEdgePoint is a point on the cutoffPlane that should be also on the circle plane.\n     *@param bottomEdgePoint is another point on the cutoffPlane that should be also on the circle plane.\n     */\n    public SegmentEndpoint(final GeoPoint point,\n      final SidedPlane cutoffPlane1, final SidedPlane cutoffPlane2, final GeoPoint topEdgePoint, final GeoPoint bottomEdgePoint) {\n      this.point = point;\n      this.cutoffPlanes = new Membership[]{new SidedPlane(cutoffPlane1), new SidedPlane(cutoffPlane2)};\n      this.notablePoints = new GeoPoint[]{topEdgePoint, bottomEdgePoint};\n      // To construct the plane, we now just need D, which is simply the negative of the evaluation of the circle normal vector at one of the points.\n      this.circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(point, cutoffPlane1, topEdgePoint, bottomEdgePoint);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8c27ce32f195c27953d9bfdc5eae3b2d212f3186":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8c27ce32f195c27953d9bfdc5eae3b2d212f3186"]},"commit2Childs":{"8c27ce32f195c27953d9bfdc5eae3b2d212f3186":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c27ce32f195c27953d9bfdc5eae3b2d212f3186"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}