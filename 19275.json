{"path":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#createTempZipFile(String).mjava","commits":[{"id":"917e62f3497c83634a13edd833e8e21dd6cc6496","date":1490728467,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#createTempZipFile(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a zip file (in the temp directory) containing all the files within the specified directory\n   * and return the path for the zip file.\n   */\n  private String createTempZipFile(String directoryPath) {\n    File zipFile = new File(solrCluster.getBaseDir().toFile().getAbsolutePath() +\n        File.separator + TestUtil.randomSimpleString(random(), 6, 8) + \".zip\");\n\n    File directory = TestDynamicLoading.getFile(directoryPath);\n    log.info(\"Directory: \"+directory.getAbsolutePath());\n    try {\n      zip (directory, zipFile);\n      log.info(\"Zipfile: \"+zipFile.getAbsolutePath());\n      return zipFile.getAbsolutePath();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3732e34f27916e98704736cc6924a34fffca249a","date":1490873946,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#createTempZipFile(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a zip file (in the temp directory) containing all the files within the specified directory\n   * and return the path for the zip file.\n   */\n  private String createTempZipFile(String directoryPath) {\n    File zipFile = new File(solrCluster.getBaseDir().toFile().getAbsolutePath() +\n        File.separator + TestUtil.randomSimpleString(random(), 6, 8) + \".zip\");\n\n    File directory = TestDynamicLoading.getFile(directoryPath);\n    log.info(\"Directory: \"+directory.getAbsolutePath());\n    try {\n      zip (directory, zipFile);\n      log.info(\"Zipfile: \"+zipFile.getAbsolutePath());\n      return zipFile.getAbsolutePath();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#createTempZipFile(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#createTempZipFile(String).mjava","sourceNew":"  /**\n   * Create a zip file (in the temp directory) containing all the files within the specified directory\n   * and return the path for the zip file.\n   */\n  private String createTempZipFile(String directoryPath) {\n    File zipFile = new File(solrCluster.getBaseDir().toFile().getAbsolutePath() +\n        File.separator + TestUtil.randomSimpleString(random(), 6, 8) + \".zip\");\n\n    File directory = TestDynamicLoading.getFile(directoryPath);\n    if (log.isInfoEnabled()) {\n      log.info(\"Directory: {}\", directory.getAbsolutePath());\n    }\n    try {\n      zip (directory, zipFile);\n      if (log.isInfoEnabled()) {\n        log.info(\"Zipfile: {}\", zipFile.getAbsolutePath());\n      }\n      return zipFile.getAbsolutePath();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a zip file (in the temp directory) containing all the files within the specified directory\n   * and return the path for the zip file.\n   */\n  private String createTempZipFile(String directoryPath) {\n    File zipFile = new File(solrCluster.getBaseDir().toFile().getAbsolutePath() +\n        File.separator + TestUtil.randomSimpleString(random(), 6, 8) + \".zip\");\n\n    File directory = TestDynamicLoading.getFile(directoryPath);\n    log.info(\"Directory: \"+directory.getAbsolutePath());\n    try {\n      zip (directory, zipFile);\n      log.info(\"Zipfile: \"+zipFile.getAbsolutePath());\n      return zipFile.getAbsolutePath();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d16198391f70a4ee52a8c8792c91eb87a30f1d6","date":1596695552,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#createTempZipFile(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#createTempZipFile(String).mjava","sourceNew":"  /**\n   * Create a zip file (in the temp directory) containing all the files within the specified directory\n   * and return the path for the zip file.\n   */\n  private String createTempZipFile(String directoryPath) {\n    File zipFile = new File(solrCluster.getBaseDir().toFile().getAbsolutePath() +\n        File.separator + TestUtil.randomSimpleString(random(), 6, 8) + \".zip\");\n\n    File directory = SolrTestCaseJ4.getFile(directoryPath);\n    if (log.isInfoEnabled()) {\n      log.info(\"Directory: {}\", directory.getAbsolutePath());\n    }\n    try {\n      zip (directory, zipFile);\n      if (log.isInfoEnabled()) {\n        log.info(\"Zipfile: {}\", zipFile.getAbsolutePath());\n      }\n      return zipFile.getAbsolutePath();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a zip file (in the temp directory) containing all the files within the specified directory\n   * and return the path for the zip file.\n   */\n  private String createTempZipFile(String directoryPath) {\n    File zipFile = new File(solrCluster.getBaseDir().toFile().getAbsolutePath() +\n        File.separator + TestUtil.randomSimpleString(random(), 6, 8) + \".zip\");\n\n    File directory = TestDynamicLoading.getFile(directoryPath);\n    if (log.isInfoEnabled()) {\n      log.info(\"Directory: {}\", directory.getAbsolutePath());\n    }\n    try {\n      zip (directory, zipFile);\n      if (log.isInfoEnabled()) {\n        log.info(\"Zipfile: {}\", zipFile.getAbsolutePath());\n      }\n      return zipFile.getAbsolutePath();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7612891097d4751617c396cdd7a092833799147","date":1600707827,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#createTempZipFile(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#createTempZipFile(String).mjava","sourceNew":"  /**\n   * Create a zip file (in the temp directory) containing all the files within the specified directory\n   * and return the path for the zip file.\n   */\n  private String createTempZipFile(String directoryPath) {\n    File zipFile = new File(cluster.getBaseDir().toFile().getAbsolutePath() +\n        File.separator + TestUtil.randomSimpleString(random(), 6, 8) + \".zip\");\n\n    File directory = SolrTestCaseJ4.getFile(directoryPath);\n    if (log.isInfoEnabled()) {\n      log.info(\"Directory: {}\", directory.getAbsolutePath());\n    }\n    try {\n      zip (directory, zipFile);\n      if (log.isInfoEnabled()) {\n        log.info(\"Zipfile: {}\", zipFile.getAbsolutePath());\n      }\n      return zipFile.getAbsolutePath();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a zip file (in the temp directory) containing all the files within the specified directory\n   * and return the path for the zip file.\n   */\n  private String createTempZipFile(String directoryPath) {\n    File zipFile = new File(solrCluster.getBaseDir().toFile().getAbsolutePath() +\n        File.separator + TestUtil.randomSimpleString(random(), 6, 8) + \".zip\");\n\n    File directory = SolrTestCaseJ4.getFile(directoryPath);\n    if (log.isInfoEnabled()) {\n      log.info(\"Directory: {}\", directory.getAbsolutePath());\n    }\n    try {\n      zip (directory, zipFile);\n      if (log.isInfoEnabled()) {\n        log.info(\"Zipfile: {}\", zipFile.getAbsolutePath());\n      }\n      return zipFile.getAbsolutePath();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7612891097d4751617c396cdd7a092833799147":["0d16198391f70a4ee52a8c8792c91eb87a30f1d6"],"917e62f3497c83634a13edd833e8e21dd6cc6496":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d16198391f70a4ee52a8c8792c91eb87a30f1d6":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"3732e34f27916e98704736cc6924a34fffca249a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["917e62f3497c83634a13edd833e8e21dd6cc6496"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7612891097d4751617c396cdd7a092833799147"]},"commit2Childs":{"c7612891097d4751617c396cdd7a092833799147":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"917e62f3497c83634a13edd833e8e21dd6cc6496":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["917e62f3497c83634a13edd833e8e21dd6cc6496","3732e34f27916e98704736cc6924a34fffca249a"],"0d16198391f70a4ee52a8c8792c91eb87a30f1d6":["c7612891097d4751617c396cdd7a092833799147"],"3732e34f27916e98704736cc6924a34fffca249a":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["0d16198391f70a4ee52a8c8792c91eb87a30f1d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3732e34f27916e98704736cc6924a34fffca249a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}