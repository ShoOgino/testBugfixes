{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IntFieldSource#getValues(Map[Object,Object],LeafReaderContext).mjava","commits":[{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":1,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IntFieldSource#getValues(Map[Object,Object],LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IntFieldSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map<Object, Object> context, LeafReaderContext readerContext) throws IOException {\n    \n    final NumericDocValues arr = getNumericDocValues(context, readerContext);\n\n    return new IntDocValues(this) {\n      int lastDocID;\n\n      private int getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new IllegalArgumentException(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs docID=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = arr.docID();\n        if (doc > curDocID) {\n          curDocID = arr.advance(doc);\n        }\n        if (doc == curDocID) {\n          return (int) arr.longValue();\n        } else {\n          return 0;\n        }\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        return Integer.toString(intVal(doc));\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return arr.docID() == doc;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getValueForDoc(doc);\n            mval.exists = arr.docID() == doc;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    \n    final NumericDocValues arr = getNumericDocValues(context, readerContext);\n\n    return new IntDocValues(this) {\n      int lastDocID;\n\n      private int getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new IllegalArgumentException(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs docID=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = arr.docID();\n        if (doc > curDocID) {\n          curDocID = arr.advance(doc);\n        }\n        if (doc == curDocID) {\n          return (int) arr.longValue();\n        } else {\n          return 0;\n        }\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        return Integer.toString(intVal(doc));\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return arr.docID() == doc;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getValueForDoc(doc);\n            mval.exists = arr.docID() == doc;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}