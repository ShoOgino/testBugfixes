{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#FacetLabel(String...).mjava","commits":[{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#FacetLabel(String...).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(String...).mjava","sourceNew":"  /** Construct from the given path components. */\n  public FacetLabel(final String... components) {\n    assert components.length > 0 : \"use CategoryPath.EMPTY to create an empty path\";\n    long len = 0;\n    for (String comp : components) {\n      if (comp == null || comp.isEmpty()) {\n        throw new IllegalArgumentException(\"empty or null components not allowed: \" + Arrays.toString(components));\n      }\n      len += comp.length();\n    }\n    len += components.length - 1; // add separators\n    if (len > MAX_CATEGORY_PATH_LENGTH) {\n      throw new IllegalArgumentException(\"category path exceeds maximum allowed path length: max=\"\n          + MAX_CATEGORY_PATH_LENGTH + \" len=\" + len\n          + \" path=\" + Arrays.toString(components).substring(0, 30) + \"...\");\n    }\n    this.components = components;\n    length = components.length;\n  }\n\n","sourceOld":"  /** Construct from the given path components. */\n  public CategoryPath(final String... components) {\n    assert components.length > 0 : \"use CategoryPath.EMPTY to create an empty path\";\n    long len = 0;\n    for (String comp : components) {\n      if (comp == null || comp.isEmpty()) {\n        throw new IllegalArgumentException(\"empty or null components not allowed: \" + Arrays.toString(components));\n      }\n      len += comp.length();\n    }\n    len += components.length - 1; // add separators\n    if (len > MAX_CATEGORY_PATH_LENGTH) {\n      throw new IllegalArgumentException(\"category path exceeds maximum allowed path length: max=\"\n          + MAX_CATEGORY_PATH_LENGTH + \" len=\" + len\n          + \" path=\" + Arrays.toString(components).substring(0, 30) + \"...\");\n    }\n    this.components = components;\n    length = components.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbe9946d3cd818d329255e4c325597ac3480503e","date":1385580921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#FacetLabel(String...).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#FacetLabel(String...).mjava","sourceNew":"  /** Construct from the given path components. */\n  public FacetLabel(final String... components) {\n    // nocommit why so anal?\n    // assert components.length > 0 : \"use CategoryPath.EMPTY to create an empty path\";\n    long len = 0;\n    for (String comp : components) {\n      if (comp == null || comp.isEmpty()) {\n        throw new IllegalArgumentException(\"empty or null components not allowed: \" + Arrays.toString(components));\n      }\n      len += comp.length();\n    }\n    len += components.length - 1; // add separators\n    if (len > MAX_CATEGORY_PATH_LENGTH) {\n      throw new IllegalArgumentException(\"category path exceeds maximum allowed path length: max=\"\n          + MAX_CATEGORY_PATH_LENGTH + \" len=\" + len\n          + \" path=\" + Arrays.toString(components).substring(0, 30) + \"...\");\n    }\n    this.components = components;\n    length = components.length;\n  }\n\n","sourceOld":"  /** Construct from the given path components. */\n  public FacetLabel(final String... components) {\n    assert components.length > 0 : \"use CategoryPath.EMPTY to create an empty path\";\n    long len = 0;\n    for (String comp : components) {\n      if (comp == null || comp.isEmpty()) {\n        throw new IllegalArgumentException(\"empty or null components not allowed: \" + Arrays.toString(components));\n      }\n      len += comp.length();\n    }\n    len += components.length - 1; // add separators\n    if (len > MAX_CATEGORY_PATH_LENGTH) {\n      throw new IllegalArgumentException(\"category path exceeds maximum allowed path length: max=\"\n          + MAX_CATEGORY_PATH_LENGTH + \" len=\" + len\n          + \" path=\" + Arrays.toString(components).substring(0, 30) + \"...\");\n    }\n    this.components = components;\n    length = components.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd83550e4b0bdd36e7d9dca9273264100782440b","date":1385761753,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#FacetLabel(String...).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#FacetLabel(String...).mjava","sourceNew":"  /** Construct from the given path components. */\n  public FacetLabel(final String... components) {\n    this.components = components;\n    length = components.length;\n    checkComponents();\n  }\n\n","sourceOld":"  /** Construct from the given path components. */\n  public FacetLabel(final String... components) {\n    // nocommit why so anal?\n    // assert components.length > 0 : \"use CategoryPath.EMPTY to create an empty path\";\n    long len = 0;\n    for (String comp : components) {\n      if (comp == null || comp.isEmpty()) {\n        throw new IllegalArgumentException(\"empty or null components not allowed: \" + Arrays.toString(components));\n      }\n      len += comp.length();\n    }\n    len += components.length - 1; // add separators\n    if (len > MAX_CATEGORY_PATH_LENGTH) {\n      throw new IllegalArgumentException(\"category path exceeds maximum allowed path length: max=\"\n          + MAX_CATEGORY_PATH_LENGTH + \" len=\" + len\n          + \" path=\" + Arrays.toString(components).substring(0, 30) + \"...\");\n    }\n    this.components = components;\n    length = components.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#FacetLabel(String...).mjava","pathOld":"/dev/null","sourceNew":"  /** Construct from the given path components. */\n  public FacetLabel(final String... components) {\n    this.components = components;\n    length = components.length;\n    checkComponents();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd83550e4b0bdd36e7d9dca9273264100782440b":["bbe9946d3cd818d329255e4c325597ac3480503e"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd83550e4b0bdd36e7d9dca9273264100782440b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"bbe9946d3cd818d329255e4c325597ac3480503e":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"fd83550e4b0bdd36e7d9dca9273264100782440b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bbe9946d3cd818d329255e4c325597ac3480503e":["fd83550e4b0bdd36e7d9dca9273264100782440b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["bbe9946d3cd818d329255e4c325597ac3480503e"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}