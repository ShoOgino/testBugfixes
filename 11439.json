{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#addPosition(int,int,int,BytesRef).mjava","commits":[{"id":"0935c850ea562932997b72c69d93e345f21d7f45","date":1344711506,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#addPosition(int,int,int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#addPosition(int,int,int).mjava","sourceNew":"  @Override\n  public void addPosition(int position, int startOffset, int endOffset, BytesRef payload) throws IOException {\n    if (positions && (offsets || payloads)) {\n      // write position delta\n      writePosition(position - lastPosition, payload);\n      lastPosition = position;\n      \n      // buffer offsets\n      if (offsets) {\n        offsetStartBuffer[bufferedIndex] = startOffset;\n        offsetEndBuffer[bufferedIndex] = endOffset;\n      }\n      \n      bufferedIndex++;\n      \n      // dump buffer if we are done\n      if (bufferedIndex == bufferedFreq) {\n        if (payloads) {\n          tvf.writeBytes(payloadData.bytes, payloadData.offset, payloadData.length);\n        }\n        for (int i = 0; i < bufferedIndex; i++) {\n          if (offsets) {\n            tvf.writeVInt(offsetStartBuffer[i] - lastOffset);\n            tvf.writeVInt(offsetEndBuffer[i] - offsetStartBuffer[i]);\n            lastOffset = offsetEndBuffer[i];\n          }\n        }\n      }\n    } else if (positions) {\n      // write position delta\n      writePosition(position - lastPosition, payload);\n      lastPosition = position;\n    } else if (offsets) {\n      // write offset deltas\n      tvf.writeVInt(startOffset - lastOffset);\n      tvf.writeVInt(endOffset - startOffset);\n      lastOffset = endOffset;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addPosition(int position, int startOffset, int endOffset) throws IOException {\n    if (positions && offsets) {\n      // write position delta\n      tvf.writeVInt(position - lastPosition);\n      lastPosition = position;\n      \n      // buffer offsets\n      offsetStartBuffer[offsetIndex] = startOffset;\n      offsetEndBuffer[offsetIndex] = endOffset;\n      offsetIndex++;\n      \n      // dump buffer if we are done\n      if (offsetIndex == offsetFreq) {\n        for (int i = 0; i < offsetIndex; i++) {\n          tvf.writeVInt(offsetStartBuffer[i] - lastOffset);\n          tvf.writeVInt(offsetEndBuffer[i] - offsetStartBuffer[i]);\n          lastOffset = offsetEndBuffer[i];\n        }\n      }\n    } else if (positions) {\n      // write position delta\n      tvf.writeVInt(position - lastPosition);\n      lastPosition = position;\n    } else if (offsets) {\n      // write offset deltas\n      tvf.writeVInt(startOffset - lastOffset);\n      tvf.writeVInt(endOffset - startOffset);\n      lastOffset = endOffset;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#addPosition(int,int,int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#addPosition(int,int,int).mjava","sourceNew":"  @Override\n  public void addPosition(int position, int startOffset, int endOffset, BytesRef payload) throws IOException {\n    if (positions && (offsets || payloads)) {\n      // write position delta\n      writePosition(position - lastPosition, payload);\n      lastPosition = position;\n      \n      // buffer offsets\n      if (offsets) {\n        offsetStartBuffer[bufferedIndex] = startOffset;\n        offsetEndBuffer[bufferedIndex] = endOffset;\n      }\n      \n      bufferedIndex++;\n      \n      // dump buffer if we are done\n      if (bufferedIndex == bufferedFreq) {\n        if (payloads) {\n          tvf.writeBytes(payloadData.bytes, payloadData.offset, payloadData.length);\n        }\n        for (int i = 0; i < bufferedIndex; i++) {\n          if (offsets) {\n            tvf.writeVInt(offsetStartBuffer[i] - lastOffset);\n            tvf.writeVInt(offsetEndBuffer[i] - offsetStartBuffer[i]);\n            lastOffset = offsetEndBuffer[i];\n          }\n        }\n      }\n    } else if (positions) {\n      // write position delta\n      writePosition(position - lastPosition, payload);\n      lastPosition = position;\n    } else if (offsets) {\n      // write offset deltas\n      tvf.writeVInt(startOffset - lastOffset);\n      tvf.writeVInt(endOffset - startOffset);\n      lastOffset = endOffset;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addPosition(int position, int startOffset, int endOffset) throws IOException {\n    if (positions && offsets) {\n      // write position delta\n      tvf.writeVInt(position - lastPosition);\n      lastPosition = position;\n      \n      // buffer offsets\n      offsetStartBuffer[offsetIndex] = startOffset;\n      offsetEndBuffer[offsetIndex] = endOffset;\n      offsetIndex++;\n      \n      // dump buffer if we are done\n      if (offsetIndex == offsetFreq) {\n        for (int i = 0; i < offsetIndex; i++) {\n          tvf.writeVInt(offsetStartBuffer[i] - lastOffset);\n          tvf.writeVInt(offsetEndBuffer[i] - offsetStartBuffer[i]);\n          lastOffset = offsetEndBuffer[i];\n        }\n      }\n    } else if (positions) {\n      // write position delta\n      tvf.writeVInt(position - lastPosition);\n      lastPosition = position;\n    } else if (offsets) {\n      // write offset deltas\n      tvf.writeVInt(startOffset - lastOffset);\n      tvf.writeVInt(endOffset - startOffset);\n      lastOffset = endOffset;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#addPosition(int,int,int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#addPosition(int,int,int).mjava","sourceNew":"  @Override\n  public void addPosition(int position, int startOffset, int endOffset, BytesRef payload) throws IOException {\n    if (positions && (offsets || payloads)) {\n      // write position delta\n      writePosition(position - lastPosition, payload);\n      lastPosition = position;\n      \n      // buffer offsets\n      if (offsets) {\n        offsetStartBuffer[bufferedIndex] = startOffset;\n        offsetEndBuffer[bufferedIndex] = endOffset;\n      }\n      \n      bufferedIndex++;\n      \n      // dump buffer if we are done\n      if (bufferedIndex == bufferedFreq) {\n        if (payloads) {\n          tvf.writeBytes(payloadData.bytes, payloadData.offset, payloadData.length);\n        }\n        for (int i = 0; i < bufferedIndex; i++) {\n          if (offsets) {\n            tvf.writeVInt(offsetStartBuffer[i] - lastOffset);\n            tvf.writeVInt(offsetEndBuffer[i] - offsetStartBuffer[i]);\n            lastOffset = offsetEndBuffer[i];\n          }\n        }\n      }\n    } else if (positions) {\n      // write position delta\n      writePosition(position - lastPosition, payload);\n      lastPosition = position;\n    } else if (offsets) {\n      // write offset deltas\n      tvf.writeVInt(startOffset - lastOffset);\n      tvf.writeVInt(endOffset - startOffset);\n      lastOffset = endOffset;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addPosition(int position, int startOffset, int endOffset) throws IOException {\n    if (positions && offsets) {\n      // write position delta\n      tvf.writeVInt(position - lastPosition);\n      lastPosition = position;\n      \n      // buffer offsets\n      offsetStartBuffer[offsetIndex] = startOffset;\n      offsetEndBuffer[offsetIndex] = endOffset;\n      offsetIndex++;\n      \n      // dump buffer if we are done\n      if (offsetIndex == offsetFreq) {\n        for (int i = 0; i < offsetIndex; i++) {\n          tvf.writeVInt(offsetStartBuffer[i] - lastOffset);\n          tvf.writeVInt(offsetEndBuffer[i] - offsetStartBuffer[i]);\n          lastOffset = offsetEndBuffer[i];\n        }\n      }\n    } else if (positions) {\n      // write position delta\n      tvf.writeVInt(position - lastPosition);\n      lastPosition = position;\n    } else if (offsets) {\n      // write offset deltas\n      tvf.writeVInt(startOffset - lastOffset);\n      tvf.writeVInt(endOffset - startOffset);\n      lastOffset = endOffset;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc7a7bb1aa79cf53564793bb5ffa270250c679da","date":1357817084,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#addPosition(int,int,int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#addPosition(int,int,int,BytesRef).mjava","sourceNew":"  @Override\n  public void addPosition(int position, int startOffset, int endOffset, BytesRef payload) throws IOException {\n    if (positions && (offsets || payloads)) {\n      // write position delta\n      writePosition(position - lastPosition, payload);\n      lastPosition = position;\n      \n      // buffer offsets\n      if (offsets) {\n        offsetStartBuffer[bufferedIndex] = startOffset;\n        offsetEndBuffer[bufferedIndex] = endOffset;\n      }\n      \n      bufferedIndex++;\n    } else if (positions) {\n      // write position delta\n      writePosition(position - lastPosition, payload);\n      lastPosition = position;\n    } else if (offsets) {\n      // write offset deltas\n      tvf.writeVInt(startOffset - lastOffset);\n      tvf.writeVInt(endOffset - startOffset);\n      lastOffset = endOffset;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addPosition(int position, int startOffset, int endOffset, BytesRef payload) throws IOException {\n    if (positions && (offsets || payloads)) {\n      // write position delta\n      writePosition(position - lastPosition, payload);\n      lastPosition = position;\n      \n      // buffer offsets\n      if (offsets) {\n        offsetStartBuffer[bufferedIndex] = startOffset;\n        offsetEndBuffer[bufferedIndex] = endOffset;\n      }\n      \n      bufferedIndex++;\n      \n      // dump buffer if we are done\n      if (bufferedIndex == bufferedFreq) {\n        if (payloads) {\n          tvf.writeBytes(payloadData.bytes, payloadData.offset, payloadData.length);\n        }\n        for (int i = 0; i < bufferedIndex; i++) {\n          if (offsets) {\n            tvf.writeVInt(offsetStartBuffer[i] - lastOffset);\n            tvf.writeVInt(offsetEndBuffer[i] - offsetStartBuffer[i]);\n            lastOffset = offsetEndBuffer[i];\n          }\n        }\n      }\n    } else if (positions) {\n      // write position delta\n      writePosition(position - lastPosition, payload);\n      lastPosition = position;\n    } else if (offsets) {\n      // write offset deltas\n      tvf.writeVInt(startOffset - lastOffset);\n      tvf.writeVInt(endOffset - startOffset);\n      lastOffset = endOffset;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#addPosition(int,int,int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#addPosition(int,int,int,BytesRef).mjava","sourceNew":"  @Override\n  public void addPosition(int position, int startOffset, int endOffset, BytesRef payload) throws IOException {\n    if (positions && (offsets || payloads)) {\n      // write position delta\n      writePosition(position - lastPosition, payload);\n      lastPosition = position;\n      \n      // buffer offsets\n      if (offsets) {\n        offsetStartBuffer[bufferedIndex] = startOffset;\n        offsetEndBuffer[bufferedIndex] = endOffset;\n      }\n      \n      bufferedIndex++;\n    } else if (positions) {\n      // write position delta\n      writePosition(position - lastPosition, payload);\n      lastPosition = position;\n    } else if (offsets) {\n      // write offset deltas\n      tvf.writeVInt(startOffset - lastOffset);\n      tvf.writeVInt(endOffset - startOffset);\n      lastOffset = endOffset;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addPosition(int position, int startOffset, int endOffset, BytesRef payload) throws IOException {\n    if (positions && (offsets || payloads)) {\n      // write position delta\n      writePosition(position - lastPosition, payload);\n      lastPosition = position;\n      \n      // buffer offsets\n      if (offsets) {\n        offsetStartBuffer[bufferedIndex] = startOffset;\n        offsetEndBuffer[bufferedIndex] = endOffset;\n      }\n      \n      bufferedIndex++;\n      \n      // dump buffer if we are done\n      if (bufferedIndex == bufferedFreq) {\n        if (payloads) {\n          tvf.writeBytes(payloadData.bytes, payloadData.offset, payloadData.length);\n        }\n        for (int i = 0; i < bufferedIndex; i++) {\n          if (offsets) {\n            tvf.writeVInt(offsetStartBuffer[i] - lastOffset);\n            tvf.writeVInt(offsetEndBuffer[i] - offsetStartBuffer[i]);\n            lastOffset = offsetEndBuffer[i];\n          }\n        }\n      }\n    } else if (positions) {\n      // write position delta\n      writePosition(position - lastPosition, payload);\n      lastPosition = position;\n    } else if (offsets) {\n      // write offset deltas\n      tvf.writeVInt(startOffset - lastOffset);\n      tvf.writeVInt(endOffset - startOffset);\n      lastOffset = endOffset;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22a2e66dfda83847e80095b8693c660742ab3e9c","date":1408628796,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#addPosition(int,int,int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#addPosition(int,int,int,BytesRef).mjava","sourceNew":"  @Override\n  public void addPosition(int position, int startOffset, int endOffset, BytesRef payload) throws IOException {\n    if (positions && (offsets || payloads)) {\n      // write position delta\n      writePosition(position - lastPosition, payload);\n      lastPosition = position;\n      \n      // buffer offsets\n      if (offsets) {\n        offsetStartBuffer[bufferedIndex] = startOffset;\n        offsetEndBuffer[bufferedIndex] = endOffset;\n      }\n      \n      bufferedIndex++;\n    } else if (positions) {\n      // write position delta\n      writePosition(position - lastPosition, payload);\n      lastPosition = position;\n    } else if (offsets) {\n      // write offset deltas\n      tvf.writeVInt(startOffset - lastOffset);\n      tvf.writeVInt(endOffset - startOffset);\n      lastOffset = endOffset;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addPosition(int position, int startOffset, int endOffset, BytesRef payload) throws IOException {\n    if (positions && (offsets || payloads)) {\n      // write position delta\n      writePosition(position - lastPosition, payload);\n      lastPosition = position;\n      \n      // buffer offsets\n      if (offsets) {\n        offsetStartBuffer[bufferedIndex] = startOffset;\n        offsetEndBuffer[bufferedIndex] = endOffset;\n      }\n      \n      bufferedIndex++;\n    } else if (positions) {\n      // write position delta\n      writePosition(position - lastPosition, payload);\n      lastPosition = position;\n    } else if (offsets) {\n      // write offset deltas\n      tvf.writeVInt(startOffset - lastOffset);\n      tvf.writeVInt(endOffset - startOffset);\n      lastOffset = endOffset;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0935c850ea562932997b72c69d93e345f21d7f45"],"fc7a7bb1aa79cf53564793bb5ffa270250c679da":["0935c850ea562932997b72c69d93e345f21d7f45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22a2e66dfda83847e80095b8693c660742ab3e9c":["fc7a7bb1aa79cf53564793bb5ffa270250c679da"],"0935c850ea562932997b72c69d93e345f21d7f45":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["0935c850ea562932997b72c69d93e345f21d7f45","fc7a7bb1aa79cf53564793bb5ffa270250c679da"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0935c850ea562932997b72c69d93e345f21d7f45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22a2e66dfda83847e80095b8693c660742ab3e9c"]},"commit2Childs":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","0935c850ea562932997b72c69d93e345f21d7f45","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"fc7a7bb1aa79cf53564793bb5ffa270250c679da":["22a2e66dfda83847e80095b8693c660742ab3e9c","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0935c850ea562932997b72c69d93e345f21d7f45":["c7869f64c874ebf7f317d22c00baf2b6857797a6","fc7a7bb1aa79cf53564793bb5ffa270250c679da","4e6354dd7c71fe122926fc53d7d29f715b1283db","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","4e6354dd7c71fe122926fc53d7d29f715b1283db","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}