{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testCreateAndDeleteShard().mjava","commits":[{"id":"cd01cddc46c498fba02505e77f225300f83242db","date":1419298241,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testCreateAndDeleteShard().mjava","pathOld":"/dev/null","sourceNew":"  protected void testCreateAndDeleteShard() throws IOException, SolrServerException {\n    // Create an implicit collection\n    String collectionName = \"solrj_implicit\";\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(collectionName);\n    createCollectionRequest.setShards(\"shardA,shardB\");\n    createCollectionRequest.setConfigName(\"conf1\");\n    createCollectionRequest.setRouterName(\"implicit\");\n    CollectionAdminResponse response = createCollectionRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(2, coresStatus.size());\n\n    cloudClient.setDefaultCollection(collectionName);\n    // Add a shard to the implicit collection\n    CollectionAdminRequest.CreateShard createShardRequest = new CollectionAdminRequest\n        .CreateShard();\n    createShardRequest.setCollectionName(collectionName);\n    createShardRequest.setShardName(\"shardC\");\n    response = createShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shardC_replica1\").get(\"status\"));\n\n    CollectionAdminRequest.DeleteShard deleteShardRequest = new CollectionAdminRequest\n        .DeleteShard();\n    deleteShardRequest.setCollectionName(collectionName);\n    deleteShardRequest.setShardName(\"shardC\");\n    response = deleteShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"182acd29cf4cb1644a02b8517f3a5b867c0d7cce","date":1432665213,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testCreateAndDeleteShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testCreateAndDeleteShard().mjava","sourceNew":"  protected void testCreateAndDeleteShard() throws IOException, SolrServerException {\n    // Create an implicit collection\n    String collectionName = \"solrj_implicit\";\n    CollectionAdminResponse response = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setShards(\"shardA,shardB\")\n            .setConfigName(\"conf1\")\n            .setRouterName(\"implicit\").process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(2, coresStatus.size());\n\n    cloudClient.setDefaultCollection(collectionName);\n    // Add a shard to the implicit collection\n    response = new CollectionAdminRequest\n        .CreateShard()\n            .setCollectionName(collectionName)\n            .setShardName(\"shardC\").process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shardC_replica1\").get(\"status\"));\n\n    CollectionAdminRequest.DeleteShard deleteShardRequest = new CollectionAdminRequest\n        .DeleteShard()\n            .setCollectionName(collectionName)\n            .setShardName(\"shardC\");\n    response = deleteShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n  }\n\n","sourceOld":"  protected void testCreateAndDeleteShard() throws IOException, SolrServerException {\n    // Create an implicit collection\n    String collectionName = \"solrj_implicit\";\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(collectionName);\n    createCollectionRequest.setShards(\"shardA,shardB\");\n    createCollectionRequest.setConfigName(\"conf1\");\n    createCollectionRequest.setRouterName(\"implicit\");\n    CollectionAdminResponse response = createCollectionRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(2, coresStatus.size());\n\n    cloudClient.setDefaultCollection(collectionName);\n    // Add a shard to the implicit collection\n    CollectionAdminRequest.CreateShard createShardRequest = new CollectionAdminRequest\n        .CreateShard();\n    createShardRequest.setCollectionName(collectionName);\n    createShardRequest.setShardName(\"shardC\");\n    response = createShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shardC_replica1\").get(\"status\"));\n\n    CollectionAdminRequest.DeleteShard deleteShardRequest = new CollectionAdminRequest\n        .DeleteShard();\n    deleteShardRequest.setCollectionName(collectionName);\n    deleteShardRequest.setShardName(\"shardC\");\n    response = deleteShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30f9ea0e61a3df8b29a67bce1ea06c83201ad871","date":1457138084,"type":5,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testCreateAndDeleteShard().mjava","sourceNew":"  protected void testCreateAndDeleteShard() throws IOException, SolrServerException {\n    // Create an implicit collection\n    String collectionName = \"solrj_implicit\";\n    CollectionAdminResponse response = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setShards(\"shardA,shardB\")\n            .setConfigName(\"conf1\")\n            .setRouterName(\"implicit\").process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(2, coresStatus.size());\n\n    cloudClient.setDefaultCollection(collectionName);\n    // Add a shard to the implicit collection\n    response = new CollectionAdminRequest\n        .CreateShard()\n            .setCollectionName(collectionName)\n            .setShardName(\"shardC\").process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shardC_replica1\").get(\"status\"));\n\n    CollectionAdminRequest.DeleteShard deleteShardRequest = new CollectionAdminRequest\n        .DeleteShard()\n            .setCollectionName(collectionName)\n            .setShardName(\"shardC\");\n    response = deleteShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n  }\n\n","sourceOld":"  protected void testCreateAndDeleteShard() throws IOException, SolrServerException {\n    // Create an implicit collection\n    String collectionName = \"solrj_implicit\";\n    CollectionAdminResponse response = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setShards(\"shardA,shardB\")\n            .setConfigName(\"conf1\")\n            .setRouterName(\"implicit\").process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(2, coresStatus.size());\n\n    cloudClient.setDefaultCollection(collectionName);\n    // Add a shard to the implicit collection\n    response = new CollectionAdminRequest\n        .CreateShard()\n            .setCollectionName(collectionName)\n            .setShardName(\"shardC\").process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shardC_replica1\").get(\"status\"));\n\n    CollectionAdminRequest.DeleteShard deleteShardRequest = new CollectionAdminRequest\n        .DeleteShard()\n            .setCollectionName(collectionName)\n            .setShardName(\"shardC\");\n    response = deleteShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"922ddd897402a6df25c766ea8300443be5e82b3d","date":1457157606,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testCreateAndDeleteShard().mjava","sourceNew":"  protected void testCreateAndDeleteShard() throws IOException, SolrServerException {\n    // Create an implicit collection\n    String collectionName = \"solrj_implicit\";\n    CollectionAdminResponse response = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setShards(\"shardA,shardB\")\n            .setConfigName(\"conf1\")\n            .setRouterName(\"implicit\").process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(2, coresStatus.size());\n\n    cloudClient.setDefaultCollection(collectionName);\n    // Add a shard to the implicit collection\n    response = new CollectionAdminRequest\n        .CreateShard()\n            .setCollectionName(collectionName)\n            .setShardName(\"shardC\").process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shardC_replica1\").get(\"status\"));\n\n    CollectionAdminRequest.DeleteShard deleteShardRequest = new CollectionAdminRequest\n        .DeleteShard()\n            .setCollectionName(collectionName)\n            .setShardName(\"shardC\");\n    response = deleteShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n  }\n\n","sourceOld":"  protected void testCreateAndDeleteShard() throws IOException, SolrServerException {\n    // Create an implicit collection\n    String collectionName = \"solrj_implicit\";\n    CollectionAdminResponse response = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setShards(\"shardA,shardB\")\n            .setConfigName(\"conf1\")\n            .setRouterName(\"implicit\").process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(2, coresStatus.size());\n\n    cloudClient.setDefaultCollection(collectionName);\n    // Add a shard to the implicit collection\n    response = new CollectionAdminRequest\n        .CreateShard()\n            .setCollectionName(collectionName)\n            .setShardName(\"shardC\").process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n    assertEquals(0, (int) coresStatus.get(collectionName + \"_shardC_replica1\").get(\"status\"));\n\n    CollectionAdminRequest.DeleteShard deleteShardRequest = new CollectionAdminRequest\n        .DeleteShard()\n            .setCollectionName(collectionName)\n            .setShardName(\"shardC\");\n    response = deleteShardRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertEquals(1, nodesStatus.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cd01cddc46c498fba02505e77f225300f83242db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"922ddd897402a6df25c766ea8300443be5e82b3d":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce","30f9ea0e61a3df8b29a67bce1ea06c83201ad871"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30f9ea0e61a3df8b29a67bce1ea06c83201ad871":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce"],"182acd29cf4cb1644a02b8517f3a5b867c0d7cce":["cd01cddc46c498fba02505e77f225300f83242db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["922ddd897402a6df25c766ea8300443be5e82b3d"]},"commit2Childs":{"cd01cddc46c498fba02505e77f225300f83242db":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce"],"922ddd897402a6df25c766ea8300443be5e82b3d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd01cddc46c498fba02505e77f225300f83242db"],"30f9ea0e61a3df8b29a67bce1ea06c83201ad871":["922ddd897402a6df25c766ea8300443be5e82b3d"],"182acd29cf4cb1644a02b8517f3a5b867c0d7cce":["922ddd897402a6df25c766ea8300443be5e82b3d","30f9ea0e61a3df8b29a67bce1ea06c83201ad871"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}