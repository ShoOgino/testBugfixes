{"path":"lucene/core/src/java/org/apache/lucene/search/Weight#bulkScorer(LeafReaderContext,Bits,boolean).mjava","commits":[{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Weight#bulkScorer(LeafReaderContext,Bits,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Weight#bulkScorer(LeafReaderContext,Bits).mjava","sourceNew":"  /**\n   * Optional method, to return a {@link BulkScorer} to\n   * score the query and send hits to a {@link Collector}.\n   * Only queries that have a different top-level approach\n   * need to override this; the default implementation\n   * pulls a normal {@link Scorer} and iterates and\n   * collects the resulting hits.\n   *\n   * @param context\n   *          the {@link org.apache.lucene.index.LeafReaderContext} for which to return the {@link Scorer}.\n   * @param acceptDocs\n   *          Bits that represent the allowable docs to match (typically deleted docs\n   *          but possibly filtering other documents)\n   * @param needsScores\n   *          True if document scores are needed.\n   *\n   * @return a {@link BulkScorer} which scores documents and\n   * passes them to a collector.\n   * @throws IOException if there is a low-level I/O error\n   */\n  public BulkScorer bulkScorer(LeafReaderContext context, Bits acceptDocs, boolean needsScores) throws IOException {\n\n    Scorer scorer = scorer(context, acceptDocs, needsScores);\n    if (scorer == null) {\n      // No docs match\n      return null;\n    }\n\n    // This impl always scores docs in order, so we can\n    // ignore scoreDocsInOrder:\n    return new DefaultBulkScorer(scorer);\n  }\n\n","sourceOld":"  /**\n   * Optional method, to return a {@link BulkScorer} to\n   * score the query and send hits to a {@link Collector}.\n   * Only queries that have a different top-level approach\n   * need to override this; the default implementation\n   * pulls a normal {@link Scorer} and iterates and\n   * collects the resulting hits.\n   *\n   * @param context\n   *          the {@link org.apache.lucene.index.LeafReaderContext} for which to return the {@link Scorer}.\n   * @param acceptDocs\n   *          Bits that represent the allowable docs to match (typically deleted docs\n   *          but possibly filtering other documents)\n   *\n   * @return a {@link BulkScorer} which scores documents and\n   * passes them to a collector.\n   * @throws IOException if there is a low-level I/O error\n   */\n  public BulkScorer bulkScorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n    Scorer scorer = scorer(context, acceptDocs);\n    if (scorer == null) {\n      // No docs match\n      return null;\n    }\n\n    // This impl always scores docs in order, so we can\n    // ignore scoreDocsInOrder:\n    return new DefaultBulkScorer(scorer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Weight#bulkScorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Weight#bulkScorer(LeafReaderContext,Bits,boolean).mjava","sourceNew":"  /**\n   * Optional method, to return a {@link BulkScorer} to\n   * score the query and send hits to a {@link Collector}.\n   * Only queries that have a different top-level approach\n   * need to override this; the default implementation\n   * pulls a normal {@link Scorer} and iterates and\n   * collects the resulting hits.\n   *\n   * @param context\n   *          the {@link org.apache.lucene.index.LeafReaderContext} for which to return the {@link Scorer}.\n   * @param acceptDocs\n   *          Bits that represent the allowable docs to match (typically deleted docs\n   *          but possibly filtering other documents)\n   *\n   * @return a {@link BulkScorer} which scores documents and\n   * passes them to a collector.\n   * @throws IOException if there is a low-level I/O error\n   */\n  public BulkScorer bulkScorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n    Scorer scorer = scorer(context, acceptDocs);\n    if (scorer == null) {\n      // No docs match\n      return null;\n    }\n\n    // This impl always scores docs in order, so we can\n    // ignore scoreDocsInOrder:\n    return new DefaultBulkScorer(scorer);\n  }\n\n","sourceOld":"  /**\n   * Optional method, to return a {@link BulkScorer} to\n   * score the query and send hits to a {@link Collector}.\n   * Only queries that have a different top-level approach\n   * need to override this; the default implementation\n   * pulls a normal {@link Scorer} and iterates and\n   * collects the resulting hits.\n   *\n   * @param context\n   *          the {@link org.apache.lucene.index.LeafReaderContext} for which to return the {@link Scorer}.\n   * @param acceptDocs\n   *          Bits that represent the allowable docs to match (typically deleted docs\n   *          but possibly filtering other documents)\n   * @param needsScores\n   *          True if document scores are needed.\n   *\n   * @return a {@link BulkScorer} which scores documents and\n   * passes them to a collector.\n   * @throws IOException if there is a low-level I/O error\n   */\n  public BulkScorer bulkScorer(LeafReaderContext context, Bits acceptDocs, boolean needsScores) throws IOException {\n\n    Scorer scorer = scorer(context, acceptDocs, needsScores);\n    if (scorer == null) {\n      // No docs match\n      return null;\n    }\n\n    // This impl always scores docs in order, so we can\n    // ignore scoreDocsInOrder:\n    return new DefaultBulkScorer(scorer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb17639909a369c1e64866842e5c213440acc17e":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb17639909a369c1e64866842e5c213440acc17e"]},"commit2Childs":{"fb17639909a369c1e64866842e5c213440acc17e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["fb17639909a369c1e64866842e5c213440acc17e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}