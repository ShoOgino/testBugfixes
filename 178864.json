{"path":"backwards/src/java/org/apache/lucene/util/BitVector#readDgaps(IndexInput).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/util/BitVector#readDgaps(IndexInput).mjava","pathOld":"/dev/null","sourceNew":"  /** read as a d-gaps list */ \n  private void readDgaps(IndexInput input) throws IOException {\n    size = input.readInt();       // (re)read size\n    count = input.readInt();        // read count\n    bits = new byte[(size >> 3) + 1];     // allocate bits\n    int last=0;\n    int n = count();\n    while (n>0) {\n      last += input.readVInt();\n      bits[last] = input.readByte();\n      n -= BYTE_COUNTS[bits[last] & 0xFF];\n    }          \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/util/BitVector#readDgaps(IndexInput).mjava","pathOld":"backwards/src/java/org/apache/lucene/util/BitVector#readDgaps(IndexInput).mjava","sourceNew":"  /** read as a d-gaps list */ \n  private void readDgaps(IndexInput input) throws IOException {\n    size = input.readInt();       // (re)read size\n    count = input.readInt();        // read count\n    bits = new byte[(size >> 3) + 1];     // allocate bits\n    int last=0;\n    int n = count();\n    while (n>0) {\n      last += input.readVInt();\n      bits[last] = input.readByte();\n      n -= BYTE_COUNTS[bits[last] & 0xFF];\n    }          \n  }\n\n","sourceOld":"  /** read as a d-gaps list */ \n  private void readDgaps(IndexInput input) throws IOException {\n    size = input.readInt();       // (re)read size\n    count = input.readInt();        // read count\n    bits = new byte[(size >> 3) + 1];     // allocate bits\n    int last=0;\n    int n = count();\n    while (n>0) {\n      last += input.readVInt();\n      bits[last] = input.readByte();\n      n -= BYTE_COUNTS[bits[last] & 0xFF];\n    }          \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}