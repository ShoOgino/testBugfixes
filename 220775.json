{"path":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocValuesIntegration().mjava","commits":[{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocValuesIntegration().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocValuesIntegration().mjava","sourceNew":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    if (defaultCodecSupportsSortedSet()) {\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    }\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    BytesRef scratch = new BytesRef();\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    binary.get(0, scratch);\n    assertEquals(\"binary value\", scratch.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    binary.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    sorted.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\");\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    if (defaultCodecSupportsSortedSet()) {\n      try {\n        FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n      \n      try {\n        new DocTermOrds(ar, null, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\");\n      sortedSet.setDocument(0);\n      assertEquals(0, sortedSet.nextOrd());\n      assertEquals(1, sortedSet.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n      assertEquals(2, sortedSet.getValueCount());\n    \n      bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n      assertTrue(bits.get(0));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    if (defaultCodecSupportsSortedSet()) {\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    }\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    BytesRef scratch = new BytesRef();\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"binary\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    binary.get(0, scratch);\n    assertEquals(\"binary value\", scratch.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"sorted\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    binary.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    sorted.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\");\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    Ints numeric = FieldCache.DEFAULT.getInts(ar, \"numeric\", false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    if (defaultCodecSupportsSortedSet()) {\n      try {\n        FieldCache.DEFAULT.getInts(ar, \"sortedset\", false);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n      \n      try {\n        new DocTermOrds(ar, null, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\");\n      sortedSet.setDocument(0);\n      assertEquals(0, sortedSet.nextOrd());\n      assertEquals(1, sortedSet.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n      assertEquals(2, sortedSet.getValueCount());\n    \n      bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n      assertTrue(bits.get(0));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36a4a25c2f02edc0c96bc51a298c45b1764e662d","date":1399923529,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocValuesIntegration().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocValuesIntegration().mjava","sourceNew":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    if (defaultCodecSupportsSortedSet()) {\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    }\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    BytesRef scratch = new BytesRef();\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    binary.get(0, scratch);\n    assertEquals(\"binary value\", scratch.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    binary.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    sorted.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    if (defaultCodecSupportsSortedSet()) {\n      try {\n        FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n      \n      try {\n        new DocTermOrds(ar, null, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n      sortedSet.setDocument(0);\n      assertEquals(0, sortedSet.nextOrd());\n      assertEquals(1, sortedSet.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n      assertEquals(2, sortedSet.getValueCount());\n    \n      bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n      assertTrue(bits.get(0));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    if (defaultCodecSupportsSortedSet()) {\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    }\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    BytesRef scratch = new BytesRef();\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    binary.get(0, scratch);\n    assertEquals(\"binary value\", scratch.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    binary.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    sorted.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\");\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    if (defaultCodecSupportsSortedSet()) {\n      try {\n        FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n      \n      try {\n        new DocTermOrds(ar, null, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\");\n      sortedSet.setDocument(0);\n      assertEquals(0, sortedSet.nextOrd());\n      assertEquals(1, sortedSet.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n      assertEquals(2, sortedSet.getValueCount());\n    \n      bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n      assertTrue(bits.get(0));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocValuesIntegration().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocValuesIntegration().mjava","sourceNew":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    if (defaultCodecSupportsSortedSet()) {\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    }\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    BytesRef scratch = new BytesRef();\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    binary.get(0, scratch);\n    assertEquals(\"binary value\", scratch.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    binary.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    sorted.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    if (defaultCodecSupportsSortedSet()) {\n      try {\n        FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n      \n      try {\n        new DocTermOrds(ar, null, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n      sortedSet.setDocument(0);\n      assertEquals(0, sortedSet.nextOrd());\n      assertEquals(1, sortedSet.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n      assertEquals(2, sortedSet.getValueCount());\n    \n      bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n      assertTrue(bits.get(0));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    if (defaultCodecSupportsSortedSet()) {\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    }\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    BytesRef scratch = new BytesRef();\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"binary\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    binary.get(0, scratch);\n    assertEquals(\"binary value\", scratch.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"sorted\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    binary.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    sorted.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\");\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    Ints numeric = FieldCache.DEFAULT.getInts(ar, \"numeric\", false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    if (defaultCodecSupportsSortedSet()) {\n      try {\n        FieldCache.DEFAULT.getInts(ar, \"sortedset\", false);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n      \n      try {\n        new DocTermOrds(ar, null, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\");\n      sortedSet.setDocument(0);\n      assertEquals(0, sortedSet.nextOrd());\n      assertEquals(1, sortedSet.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n      assertEquals(2, sortedSet.getValueCount());\n    \n      bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n      assertTrue(bits.get(0));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocValuesIntegration().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocValuesIntegration().mjava","sourceNew":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    if (defaultCodecSupportsSortedSet()) {\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    }\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    BytesRef scratch = new BytesRef();\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    binary.get(0, scratch);\n    assertEquals(\"binary value\", scratch.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    binary.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    sorted.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    if (defaultCodecSupportsSortedSet()) {\n      try {\n        FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n      \n      try {\n        new DocTermOrds(ar, null, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n      sortedSet.setDocument(0);\n      assertEquals(0, sortedSet.nextOrd());\n      assertEquals(1, sortedSet.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n      assertEquals(2, sortedSet.getValueCount());\n    \n      bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n      assertTrue(bits.get(0));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    if (defaultCodecSupportsSortedSet()) {\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    }\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    BytesRef scratch = new BytesRef();\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"binary\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    binary.get(0, scratch);\n    assertEquals(\"binary value\", scratch.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"sorted\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    binary.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    sorted.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\");\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    Ints numeric = FieldCache.DEFAULT.getInts(ar, \"numeric\", false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    if (defaultCodecSupportsSortedSet()) {\n      try {\n        FieldCache.DEFAULT.getInts(ar, \"sortedset\", false);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n      \n      try {\n        new DocTermOrds(ar, null, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\");\n      sortedSet.setDocument(0);\n      assertEquals(0, sortedSet.nextOrd());\n      assertEquals(1, sortedSet.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n      assertEquals(2, sortedSet.getValueCount());\n    \n      bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n      assertTrue(bits.get(0));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocValuesIntegration().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocValuesIntegration().mjava","sourceNew":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    if (defaultCodecSupportsSortedSet()) {\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    }\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    final BytesRef term = binary.get(0);\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    BytesRef scratch = binary.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    if (defaultCodecSupportsSortedSet()) {\n      try {\n        FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n      \n      try {\n        new DocTermOrds(ar, null, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n      sortedSet.setDocument(0);\n      assertEquals(0, sortedSet.nextOrd());\n      assertEquals(1, sortedSet.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n      assertEquals(2, sortedSet.getValueCount());\n    \n      bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n      assertTrue(bits.get(0));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    if (defaultCodecSupportsSortedSet()) {\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    }\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    BytesRef scratch = new BytesRef();\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    binary.get(0, scratch);\n    assertEquals(\"binary value\", scratch.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    binary.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    sorted.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    if (defaultCodecSupportsSortedSet()) {\n      try {\n        FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n      \n      try {\n        new DocTermOrds(ar, null, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n      sortedSet.setDocument(0);\n      assertEquals(0, sortedSet.nextOrd());\n      assertEquals(1, sortedSet.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n      assertEquals(2, sortedSet.getValueCount());\n    \n      bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n      assertTrue(bits.get(0));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocValuesIntegration().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocValuesIntegration().mjava","sourceNew":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    if (defaultCodecSupportsSortedSet()) {\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    }\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    final BytesRef term = binary.get(0);\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    BytesRef scratch = binary.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    if (defaultCodecSupportsSortedSet()) {\n      try {\n        FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n      \n      try {\n        new DocTermOrds(ar, null, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n      sortedSet.setDocument(0);\n      assertEquals(0, sortedSet.nextOrd());\n      assertEquals(1, sortedSet.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n      assertEquals(2, sortedSet.getValueCount());\n    \n      bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n      assertTrue(bits.get(0));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    if (defaultCodecSupportsSortedSet()) {\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    }\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    final BytesRef term = binary.get(0);\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    BytesRef scratch = binary.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    if (defaultCodecSupportsSortedSet()) {\n      try {\n        FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n      \n      try {\n        new DocTermOrds(ar, null, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n      sortedSet.setDocument(0);\n      assertEquals(0, sortedSet.nextOrd());\n      assertEquals(1, sortedSet.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n      assertEquals(2, sortedSet.getValueCount());\n    \n      bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n      assertTrue(bits.get(0));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocValuesIntegration().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocValuesIntegration().mjava","sourceNew":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    if (defaultCodecSupportsSortedSet()) {\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    }\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    final BytesRef term = binary.get(0);\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    BytesRef scratch = binary.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    if (defaultCodecSupportsSortedSet()) {\n      try {\n        FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n      \n      try {\n        new DocTermOrds(ar, null, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n      sortedSet.setDocument(0);\n      assertEquals(0, sortedSet.nextOrd());\n      assertEquals(1, sortedSet.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n      assertEquals(2, sortedSet.getValueCount());\n    \n      bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n      assertTrue(bits.get(0));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    if (defaultCodecSupportsSortedSet()) {\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    }\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    final BytesRef term = binary.get(0);\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    BytesRef scratch = binary.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    if (defaultCodecSupportsSortedSet()) {\n      try {\n        FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n      \n      try {\n        new DocTermOrds(ar, null, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n      sortedSet.setDocument(0);\n      assertEquals(0, sortedSet.nextOrd());\n      assertEquals(1, sortedSet.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n      assertEquals(2, sortedSet.getValueCount());\n    \n      bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n      assertTrue(bits.get(0));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad2a673349939e48652bf304cccf673c3412198f","date":1409585169,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocValuesIntegration().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocValuesIntegration().mjava","sourceNew":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    final BytesRef term = binary.get(0);\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    BytesRef scratch = binary.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sortedset\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n    assertTrue(bits.get(0));\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    if (defaultCodecSupportsSortedSet()) {\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    }\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    final BytesRef term = binary.get(0);\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    BytesRef scratch = binary.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    if (defaultCodecSupportsSortedSet()) {\n      try {\n        FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n      \n      try {\n        new DocTermOrds(ar, null, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n      sortedSet.setDocument(0);\n      assertEquals(0, sortedSet.nextOrd());\n      assertEquals(1, sortedSet.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n      assertEquals(2, sortedSet.getValueCount());\n    \n      bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n      assertTrue(bits.get(0));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0","8c146731a64debc22c115bbf11ee1a060aa7ea02"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocValuesIntegration().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocValuesIntegration().mjava","sourceNew":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    final BytesRef term = binary.get(0);\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    BytesRef scratch = binary.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sortedset\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n    assertTrue(bits.get(0));\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    if (defaultCodecSupportsSortedSet()) {\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    }\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    final BytesRef term = binary.get(0);\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    BytesRef scratch = binary.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    if (defaultCodecSupportsSortedSet()) {\n      try {\n        FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n      \n      try {\n        new DocTermOrds(ar, null, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n      sortedSet.setDocument(0);\n      assertEquals(0, sortedSet.nextOrd());\n      assertEquals(1, sortedSet.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n      assertEquals(2, sortedSet.getValueCount());\n    \n      bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n      assertTrue(bits.get(0));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":["eaa9cc5fd5ad1b5f7be93da05bdbd3ccf4be4bb3","36a4a25c2f02edc0c96bc51a298c45b1764e662d","9faa42f41b6adb98daf009cf99a4ee239189e469","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","87d6f9603307ae2ad642fb01deedf031320fd0c3","60daad1187870cb8dea2344dcd50c29136546f18"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocValuesIntegration().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocValuesIntegration().mjava","sourceNew":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    LeafReader ar = getOnlySegmentReader(ir);\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    final BytesRef term = binary.get(0);\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    BytesRef scratch = binary.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sortedset\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n    assertTrue(bits.get(0));\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    final BytesRef term = binary.get(0);\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    BytesRef scratch = binary.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sortedset\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n    assertTrue(bits.get(0));\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocValuesIntegration().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocValuesIntegration().mjava","sourceNew":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    LeafReader ar = getOnlySegmentReader(ir);\n    \n    // Binary type: can be retrieved via getTerms()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    });\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    final BytesRef term = binary.get(0);\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"binary\");\n    });\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sorted\");\n    });\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    BytesRef scratch = binary.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"numeric\");\n    });\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sortedset\");\n    });\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n    assertTrue(bits.get(0));\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    LeafReader ar = getOnlySegmentReader(ir);\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    final BytesRef term = binary.get(0);\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    BytesRef scratch = binary.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sortedset\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n    assertTrue(bits.get(0));\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":["eaa9cc5fd5ad1b5f7be93da05bdbd3ccf4be4bb3","fd4c0978a282e44867032b4d99f280a07fa16321","ad2a673349939e48652bf304cccf673c3412198f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8c146731a64debc22c115bbf11ee1a060aa7ea02","date":1457616596,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocValuesIntegration().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocValuesIntegration().mjava","sourceNew":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    LeafReader ar = getOnlySegmentReader(ir);\n    \n    // Binary type: can be retrieved via getTerms()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    final BytesRef term = binary.get(0);\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"binary\");\n    });\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\", null);\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sorted\");\n    });\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    BytesRef scratch = binary.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\", null);\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.INT_POINT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"numeric\");\n    });\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\", null);\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sortedset\");\n    });\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\", null);\n    assertTrue(bits.get(0));\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    LeafReader ar = getOnlySegmentReader(ir);\n    \n    // Binary type: can be retrieved via getTerms()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    });\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    final BytesRef term = binary.get(0);\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"binary\");\n    });\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sorted\");\n    });\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    BytesRef scratch = binary.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"numeric\");\n    });\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sortedset\");\n    });\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n    assertTrue(bits.get(0));\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","fd4c0978a282e44867032b4d99f280a07fa16321","ad2a673349939e48652bf304cccf673c3412198f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocValuesIntegration().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocValuesIntegration().mjava","sourceNew":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    // Binary type: can be retrieved via getTerms()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    final BytesRef term = binary.get(0);\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"binary\");\n    });\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\", null);\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sorted\");\n    });\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    BytesRef scratch = binary.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\", null);\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.INT_POINT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"numeric\");\n    });\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\", null);\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sortedset\");\n    });\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\", null);\n    assertTrue(bits.get(0));\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    LeafReader ar = getOnlySegmentReader(ir);\n    \n    // Binary type: can be retrieved via getTerms()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    final BytesRef term = binary.get(0);\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"binary\");\n    });\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\", null);\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sorted\");\n    });\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    BytesRef scratch = binary.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\", null);\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.INT_POINT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"numeric\");\n    });\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\", null);\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sortedset\");\n    });\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\", null);\n    assertTrue(bits.get(0));\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCache#testDocValuesIntegration().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocValuesIntegration().mjava","sourceNew":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    // Binary type: can be retrieved via getTerms()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    final BytesRef term = binary.get(0);\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"binary\");\n    });\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\", null);\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sorted\");\n    });\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    BytesRef scratch = binary.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\", null);\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.INT_POINT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"numeric\");\n    });\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\", null);\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sortedset\");\n    });\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\", null);\n    assertTrue(bits.get(0));\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    // Binary type: can be retrieved via getTerms()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    final BytesRef term = binary.get(0);\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"binary\");\n    });\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\", null);\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sorted\");\n    });\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    BytesRef scratch = binary.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\", null);\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.INT_POINT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"numeric\");\n    });\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\", null);\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sortedset\");\n    });\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\", null);\n    assertTrue(bits.get(0));\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCache#testDocValuesIntegration().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocValuesIntegration().mjava","sourceNew":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    // Binary type: can be retrieved via getTerms()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    final BytesRef term = binary.get(0);\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"binary\");\n    });\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\", null);\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sorted\");\n    });\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    BytesRef scratch = binary.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\", null);\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.INT_POINT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"numeric\");\n    });\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\", null);\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sortedset\");\n    });\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\", null);\n    assertTrue(bits.get(0));\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    // Binary type: can be retrieved via getTerms()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    final BytesRef term = binary.get(0);\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"binary\");\n    });\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\", null);\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sorted\");\n    });\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    BytesRef scratch = binary.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\", null);\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.INT_POINT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"numeric\");\n    });\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\", null);\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sortedset\");\n    });\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\", null);\n    assertTrue(bits.get(0));\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCache#testDocValuesIntegration().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocValuesIntegration().mjava","sourceNew":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    // Binary type: can be retrieved via getTerms()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    final BytesRef term = binary.get(0);\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"binary\");\n    });\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\", null);\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sorted\");\n    });\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    BytesRef scratch = binary.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\", null);\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.INT_POINT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"numeric\");\n    });\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\", null);\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sortedset\");\n    });\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\", null);\n    assertTrue(bits.get(0));\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    // Binary type: can be retrieved via getTerms()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    final BytesRef term = binary.get(0);\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"binary\");\n    });\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\", null);\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sorted\");\n    });\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    BytesRef scratch = binary.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\", null);\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.INT_POINT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"numeric\");\n    });\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\", null);\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sortedset\");\n    });\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\", null);\n    assertTrue(bits.get(0));\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocValuesIntegration().mjava","sourceNew":null,"sourceOld":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    // Binary type: can be retrieved via getTerms()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    final BytesRef term = binary.get(0);\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"binary\");\n    });\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\", null);\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sorted\");\n    });\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    BytesRef scratch = binary.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\", null);\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.INT_POINT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"numeric\");\n    });\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\", null);\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sortedset\");\n    });\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\", null);\n    assertTrue(bits.get(0));\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"05fe562aa248790944d43cdd478f512572835ba0":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83870855d82aba6819217abeff5a40779dbb28b4":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","0e121d43b5a10f2df530f406f935102656e9c4e8"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","0e121d43b5a10f2df530f406f935102656e9c4e8"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["d0ef034a4f10871667ae75181537775ddcf8ade4","ad2a673349939e48652bf304cccf673c3412198f"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"36a4a25c2f02edc0c96bc51a298c45b1764e662d":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","36a4a25c2f02edc0c96bc51a298c45b1764e662d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ad2a673349939e48652bf304cccf673c3412198f":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"8c146731a64debc22c115bbf11ee1a060aa7ea02":["05fe562aa248790944d43cdd478f512572835ba0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"05fe562aa248790944d43cdd478f512572835ba0":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["36a4a25c2f02edc0c96bc51a298c45b1764e662d"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"56572ec06f1407c066d6b7399413178b33176cd8":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["05fe562aa248790944d43cdd478f512572835ba0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"36a4a25c2f02edc0c96bc51a298c45b1764e662d":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["402ad3ddc9da7b70da1b167667a60ece6a1381fb","ad2a673349939e48652bf304cccf673c3412198f"],"ad2a673349939e48652bf304cccf673c3412198f":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"8c146731a64debc22c115bbf11ee1a060aa7ea02":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","56572ec06f1407c066d6b7399413178b33176cd8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}