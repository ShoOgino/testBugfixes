{"path":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2)\n        .setSimilarity(new SimpleSimilarity()));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n        \n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertTrue(15 == CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2)\n        .setSimilarity(new SimpleSimilarity()));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n        \n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertTrue(15 == CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2)\n        .setSimilarity(new SimpleSimilarity()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertTrue(15 == CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2)\n        .setSimilarity(new SimpleSimilarity()));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n        \n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertTrue(15 == CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2)\n        .setSimilarity(new SimpleSimilarity()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2)\n        .setSimilarity(new SimpleSimilarity()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertTrue(15 == CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2)\n        .setSimilarity(new SimpleSimilarity()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2)\n        .setSimilarity(new SimpleSimilarity()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(newRandom(),\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2)\n        .setSimilarity(new SimpleSimilarity()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2)\n        .setSimilarity(new SimpleSimilarity()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory(random);  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2)\n        .setSimilarity(new SimpleSimilarity()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(newRandom(),\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2)\n        .setSimilarity(new SimpleSimilarity()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2)\n        .setSimilarity(new SimpleSimilarity()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory(random);  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2)\n        .setSimilarity(new SimpleSimilarity()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2)\n        .setSimilarity(new SimpleSimilarity()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2)\n        .setSimilarity(new SimpleSimilarity()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarity(new SimpleSimilarity()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2)\n        .setSimilarity(new SimpleSimilarity()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarity(new SimpleSimilarity()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2)\n        .setSimilarity(new SimpleSimilarity()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarity(new SimpleSimilarity()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(2)\n        .setSimilarity(new SimpleSimilarity()));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarity(new SimpleSimilarity()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarity(new SimpleSimilarity()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarity(new SimpleSimilarity()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarity(new SimpleSimilarity()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarity(new SimpleSimilarity()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarity(new SimpleSimilarity()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9325c7ff9928fabe81c28553b41fc7aa57dfab","date":1295896411,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarity()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarity(new SimpleSimilarity()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarity()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarity(new SimpleSimilarity()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarity()).\n            setMergePolicy(newInOrderLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarity()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarity()).\n            setMergePolicy(newInOrderLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarity(new SimpleSimilarity()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarity()).\n            setMergePolicy(newInOrderLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarity()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"160d004a0e8f5361a446f9d01456aee1c1af20dc","date":1301061642,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarityProvider()).\n            setMergePolicy(newInOrderLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarity()).\n            setMergePolicy(newInOrderLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarityProvider()).\n            setMergePolicy(newInOrderLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarity()).\n            setMergePolicy(newInOrderLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarityProvider()).\n            setMergePolicy(newInOrderLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarity()).\n            setMergePolicy(newInOrderLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarityProvider()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarityProvider()).\n            setMergePolicy(newInOrderLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarityProvider()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarityProvider()).\n            setMergePolicy(newInOrderLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarityProvider()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarityProvider()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarityProvider()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarityProvider()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarityProvider()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarityProvider()).\n            setMergePolicy(newInOrderLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarityProvider()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer();\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarityProvider()).\n            setMergePolicy(newInOrderLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarityProvider()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarityProvider()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarityProvider()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarityProvider()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarityProvider()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarityProvider()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarityProvider()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setIndexOptions(IndexOptions.DOCS_ONLY);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarityProvider()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarityProvider()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), omitType);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), normalType);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarityProvider()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setIndexOptions(IndexOptions.DOCS_ONLY);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarityProvider()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), omitType);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), normalType);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarityProvider()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    writer.setInfoStream(VERBOSE ? System.out : null);\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), omitType);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), normalType);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarityProvider()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), omitType);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), normalType);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarityProvider()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), omitType);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), normalType);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarityProvider()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), omitType);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), normalType);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    /*\n     * Verify the index\n     */         \n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close(); \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarityProvider()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), omitType);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), normalType);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    /*\n     * Verify the index\n     */         \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarityProvider()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), omitType);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), normalType);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    /*\n     * Verify the index\n     */         \n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n         \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarityProvider()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), omitType);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), normalType);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    /*\n     * Verify the index\n     */         \n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close(); \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarityProvider()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), omitType);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), normalType);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    /*\n     * Verify the index\n     */         \n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n         \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarityProvider()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), omitType);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), normalType);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    /*\n     * Verify the index\n     */         \n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n        \n    searcher.close(); \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","date":1328532481,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarity(new SimpleSimilarity()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), omitType);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), normalType);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    /*\n     * Verify the index\n     */         \n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n         \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarityProvider(new SimpleSimilarityProvider()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), omitType);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), normalType);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    /*\n     * Verify the index\n     */         \n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarityProvider(new SimpleSimilarityProvider());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n         \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarity(new SimpleSimilarity()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), omitType);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), normalType);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    /*\n     * Verify the index\n     */         \n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n         \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = newDirectory();  \n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(2).\n            setSimilarity(new SimpleSimilarity()).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = newField(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), omitType);\n      d.add(noTf);\n          \n      Field tf = newField(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), normalType);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    /*\n     * Verify the index\n     */         \n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(a);\n    pq.add(c);\n    try {\n      searcher.search(pq, 10);\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertEquals(1.0f+doc, score, 0.00001f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertEquals(15, CountingHitCollector.getCount());\n         \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["06584e6e98d592b34e1329b384182f368d2025e8"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"c19f985e36a65cc969e8e564fe337a0d41512075":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["868da859b43505d9d2a023bfeae6dd0c795f5295","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["160d004a0e8f5361a446f9d01456aee1c1af20dc"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","160d004a0e8f5361a446f9d01456aee1c1af20dc"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a3776dccca01c11e7046323cfad46a3b4a471233","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","c19f985e36a65cc969e8e564fe337a0d41512075"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","c19f985e36a65cc969e8e564fe337a0d41512075"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"70ad682703b8585f5d0a637efec044d57ec05efb":["3bb13258feba31ab676502787ab2e1779f129b7a","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"06584e6e98d592b34e1329b384182f368d2025e8":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"962d04139994fce5193143ef35615499a9a96d78":["45669a651c970812a680841b97a77cce06af559f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"160d004a0e8f5361a446f9d01456aee1c1af20dc":["c19f985e36a65cc969e8e564fe337a0d41512075"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","160d004a0e8f5361a446f9d01456aee1c1af20dc"],"a3776dccca01c11e7046323cfad46a3b4a471233":["160d004a0e8f5361a446f9d01456aee1c1af20dc","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"45669a651c970812a680841b97a77cce06af559f":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","01e5948db9a07144112d2f08f28ca2e3cd880348"],"3bb13258feba31ab676502787ab2e1779f129b7a":["132903c28af3aa6f67284b78de91c0f0a99488c2","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["132903c28af3aa6f67284b78de91c0f0a99488c2"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["d572389229127c297dd1fa5ce4758e1cec41e799"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"c19f985e36a65cc969e8e564fe337a0d41512075":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","160d004a0e8f5361a446f9d01456aee1c1af20dc"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["f2c5f0cb44df114db4228c8f77861714b5cabaea","45669a651c970812a680841b97a77cce06af559f"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["c19f985e36a65cc969e8e564fe337a0d41512075","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["45669a651c970812a680841b97a77cce06af559f"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["06584e6e98d592b34e1329b384182f368d2025e8"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"06584e6e98d592b34e1329b384182f368d2025e8":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"962d04139994fce5193143ef35615499a9a96d78":[],"160d004a0e8f5361a446f9d01456aee1c1af20dc":["01e5948db9a07144112d2f08f28ca2e3cd880348","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab","70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["79c2cb24929f2649a8875fb629086171f914d5ce"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"45669a651c970812a680841b97a77cce06af559f":["962d04139994fce5193143ef35615499a9a96d78"],"3bb13258feba31ab676502787ab2e1779f129b7a":["70ad682703b8585f5d0a637efec044d57ec05efb"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","79c2cb24929f2649a8875fb629086171f914d5ce","962d04139994fce5193143ef35615499a9a96d78","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}