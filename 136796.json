{"path":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TestTermInfosReaderIndex#findTermThatWouldBeAtIndex(SegmentTermEnum,int).mjava","commits":[{"id":"39509e0276e70b38a5e76aa9d2c468955a1c7855","date":1319748553,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TestTermInfosReaderIndex#findTermThatWouldBeAtIndex(SegmentTermEnum,int).mjava","pathOld":"/dev/null","sourceNew":"  private Term findTermThatWouldBeAtIndex(SegmentTermEnum termEnum, int index) throws IOException {\n    int termPosition = index * termIndexInterval * indexDivisor;\n    for (int i = 0; i < termPosition; i++) {\n      if (!termEnum.next()) {\n        fail(\"Should not have run out of terms.\");\n      }\n    }\n    return termEnum.term();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b6ef1ac57615594df99b4d227449fa09de6c255f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/lucene3x/TestTermInfosReaderIndex#findTermThatWouldBeAtIndex(SegmentTermEnum,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TestTermInfosReaderIndex#findTermThatWouldBeAtIndex(SegmentTermEnum,int).mjava","sourceNew":"  private Term findTermThatWouldBeAtIndex(SegmentTermEnum termEnum, int index) throws IOException {\n    int termPosition = index * termIndexInterval * indexDivisor;\n    for (int i = 0; i < termPosition; i++) {\n      if (!termEnum.next()) {\n        fail(\"Should not have run out of terms.\");\n      }\n    }\n    return termEnum.term();\n  }\n\n","sourceOld":"  private Term findTermThatWouldBeAtIndex(SegmentTermEnum termEnum, int index) throws IOException {\n    int termPosition = index * termIndexInterval * indexDivisor;\n    for (int i = 0; i < termPosition; i++) {\n      if (!termEnum.next()) {\n        fail(\"Should not have run out of terms.\");\n      }\n    }\n    return termEnum.term();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["39509e0276e70b38a5e76aa9d2c468955a1c7855"],"39509e0276e70b38a5e76aa9d2c468955a1c7855":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"39509e0276e70b38a5e76aa9d2c468955a1c7855":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["39509e0276e70b38a5e76aa9d2c468955a1c7855"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}