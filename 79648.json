{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/comp/MultiComp#toExpression(StreamFactory).mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/comp/MultiComp#toExpression(StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    StringBuilder sb = new StringBuilder();\n    for(Comparator<Tuple> comp : comps){\n      if(comp instanceof ExpressibleComparator){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(((ExpressibleComparator)comp).toExpression(factory));\n      }\n      else{\n        throw new IOException(\"This MultiComp contains a non-expressible comparator - it cannot be converted to an expression\");\n      }\n    }\n    \n    return new StreamExpressionValue(sb.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e431b0806b8db369da896b66a74e304a49953c7b","date":1434740037,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/comp/MultiComp#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/comp/MultiComp#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    StringBuilder sb = new StringBuilder();\n    for(Comparator<Tuple> comp : comps){\n      if(comp instanceof Expressible){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(((Expressible)comp).toExpression(factory));\n      }\n      else{\n        throw new IOException(\"This MultiComp contains a non-expressible comparator - it cannot be converted to an expression\");\n      }\n    }\n    \n    return new StreamExpressionValue(sb.toString());\n  }\n\n","sourceOld":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    StringBuilder sb = new StringBuilder();\n    for(Comparator<Tuple> comp : comps){\n      if(comp instanceof ExpressibleComparator){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(((ExpressibleComparator)comp).toExpression(factory));\n      }\n      else{\n        throw new IOException(\"This MultiComp contains a non-expressible comparator - it cannot be converted to an expression\");\n      }\n    }\n    \n    return new StreamExpressionValue(sb.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0891a6931fc352fc7e61f2752ef9add758d3fb89","date":1435151229,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/comp/MultipleFieldComparator#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/comp/MultiComp#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    StringBuilder sb = new StringBuilder();\n    for(StreamComparator comp : comps){\n      if(comp instanceof Expressible){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(((Expressible)comp).toExpression(factory));\n      }\n      else{\n        throw new IOException(\"This MultiComp contains a non-expressible comparator - it cannot be converted to an expression\");\n      }\n    }\n    \n    return new StreamExpressionValue(sb.toString());\n  }\n\n","sourceOld":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    StringBuilder sb = new StringBuilder();\n    for(Comparator<Tuple> comp : comps){\n      if(comp instanceof Expressible){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(((Expressible)comp).toExpression(factory));\n      }\n      else{\n        throw new IOException(\"This MultiComp contains a non-expressible comparator - it cannot be converted to an expression\");\n      }\n    }\n    \n    return new StreamExpressionValue(sb.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0891a6931fc352fc7e61f2752ef9add758d3fb89":["e431b0806b8db369da896b66a74e304a49953c7b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e431b0806b8db369da896b66a74e304a49953c7b":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0891a6931fc352fc7e61f2752ef9add758d3fb89"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["e431b0806b8db369da896b66a74e304a49953c7b"],"0891a6931fc352fc7e61f2752ef9add758d3fb89":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"e431b0806b8db369da896b66a74e304a49953c7b":["0891a6931fc352fc7e61f2752ef9add758d3fb89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}