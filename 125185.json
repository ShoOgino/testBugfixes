{"path":"lucene/src/java/org/apache/lucene/document/DateTools#round(long,Resolution).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":2,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/DateTools#round(long,Resolution).mjava","pathOld":"backwards/src/java/org/apache/lucene/document/DateTools#round(long,Resolution).mjava","sourceNew":"  /**\n   * Limit a date's resolution. For example, the date <code>1095767411000</code>\n   * (which represents 2004-09-21 13:50:11) will be changed to \n   * <code>1093989600000</code> (2004-09-01 00:00:00) when using\n   * <code>Resolution.MONTH</code>.\n   * \n   * @param resolution The desired resolution of the date to be returned\n   * @return the date with all values more precise than <code>resolution</code>\n   *  set to 0 or 1, expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   */\n  public static synchronized long round(long time, Resolution resolution) {\n    calInstance.setTimeInMillis(time);\n    \n    if (resolution == Resolution.YEAR) {\n      calInstance.set(Calendar.MONTH, 0);\n      calInstance.set(Calendar.DAY_OF_MONTH, 1);\n      calInstance.set(Calendar.HOUR_OF_DAY, 0);\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MONTH) {\n      calInstance.set(Calendar.DAY_OF_MONTH, 1);\n      calInstance.set(Calendar.HOUR_OF_DAY, 0);\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.DAY) {\n      calInstance.set(Calendar.HOUR_OF_DAY, 0);\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.HOUR) {\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MINUTE) {\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.SECOND) {\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MILLISECOND) {\n      // don't cut off anything\n    } else {\n      throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    return calInstance.getTimeInMillis();\n  }\n\n","sourceOld":"  /**\n   * Limit a date's resolution. For example, the date <code>1095767411000</code>\n   * (which represents 2004-09-21 13:50:11) will be changed to \n   * <code>1093989600000</code> (2004-09-01 00:00:00) when using\n   * <code>Resolution.MONTH</code>.\n   * \n   * @param resolution The desired resolution of the date to be returned\n   * @return the date with all values more precise than <code>resolution</code>\n   *  set to 0 or 1, expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   */\n  public static synchronized long round(long time, Resolution resolution) {\n    calInstance.setTimeInMillis(time);\n    \n    if (resolution == Resolution.YEAR) {\n      calInstance.set(Calendar.MONTH, 0);\n      calInstance.set(Calendar.DAY_OF_MONTH, 1);\n      calInstance.set(Calendar.HOUR_OF_DAY, 0);\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MONTH) {\n      calInstance.set(Calendar.DAY_OF_MONTH, 1);\n      calInstance.set(Calendar.HOUR_OF_DAY, 0);\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.DAY) {\n      calInstance.set(Calendar.HOUR_OF_DAY, 0);\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.HOUR) {\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MINUTE) {\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.SECOND) {\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MILLISECOND) {\n      // don't cut off anything\n    } else {\n      throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    return calInstance.getTimeInMillis();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"556156c44f3392896fb44dc22a6bafbad421bcff","date":1295994419,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/DateTools#round(long,Resolution).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/DateTools#round(long,Resolution).mjava","sourceNew":"  /**\n   * Limit a date's resolution. For example, the date <code>1095767411000</code>\n   * (which represents 2004-09-21 13:50:11) will be changed to \n   * <code>1093989600000</code> (2004-09-01 00:00:00) when using\n   * <code>Resolution.MONTH</code>.\n   * \n   * @param resolution The desired resolution of the date to be returned\n   * @return the date with all values more precise than <code>resolution</code>\n   *  set to 0 or 1, expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   */\n  public static long round(long time, Resolution resolution) {\n    final Calendar calInstance = FORMATS.get().calInstance;\n    calInstance.setTimeInMillis(time);\n    \n    switch (resolution) {\n      case YEAR:\n        calInstance.set(Calendar.MONTH, 0);\n        calInstance.set(Calendar.DAY_OF_MONTH, 1);\n        calInstance.set(Calendar.HOUR_OF_DAY, 0);\n        calInstance.set(Calendar.MINUTE, 0);\n        calInstance.set(Calendar.SECOND, 0);\n        calInstance.set(Calendar.MILLISECOND, 0);\n        break;\n      case MONTH:\n        calInstance.set(Calendar.DAY_OF_MONTH, 1);\n        calInstance.set(Calendar.HOUR_OF_DAY, 0);\n        calInstance.set(Calendar.MINUTE, 0);\n        calInstance.set(Calendar.SECOND, 0);\n        calInstance.set(Calendar.MILLISECOND, 0);\n        break;\n      case DAY:\n        calInstance.set(Calendar.HOUR_OF_DAY, 0);\n        calInstance.set(Calendar.MINUTE, 0);\n        calInstance.set(Calendar.SECOND, 0);\n        calInstance.set(Calendar.MILLISECOND, 0);\n        break;\n      case HOUR:\n        calInstance.set(Calendar.MINUTE, 0);\n        calInstance.set(Calendar.SECOND, 0);\n        calInstance.set(Calendar.MILLISECOND, 0);\n        break;\n      case MINUTE:\n        calInstance.set(Calendar.SECOND, 0);\n        calInstance.set(Calendar.MILLISECOND, 0);\n        break;\n      case SECOND:\n        calInstance.set(Calendar.MILLISECOND, 0);\n        break;\n      case MILLISECOND:\n        // don't cut off anything\n        break;\n      default:\n        throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    return calInstance.getTimeInMillis();\n  }\n\n","sourceOld":"  /**\n   * Limit a date's resolution. For example, the date <code>1095767411000</code>\n   * (which represents 2004-09-21 13:50:11) will be changed to \n   * <code>1093989600000</code> (2004-09-01 00:00:00) when using\n   * <code>Resolution.MONTH</code>.\n   * \n   * @param resolution The desired resolution of the date to be returned\n   * @return the date with all values more precise than <code>resolution</code>\n   *  set to 0 or 1, expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   */\n  public static synchronized long round(long time, Resolution resolution) {\n    calInstance.setTimeInMillis(time);\n    \n    if (resolution == Resolution.YEAR) {\n      calInstance.set(Calendar.MONTH, 0);\n      calInstance.set(Calendar.DAY_OF_MONTH, 1);\n      calInstance.set(Calendar.HOUR_OF_DAY, 0);\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MONTH) {\n      calInstance.set(Calendar.DAY_OF_MONTH, 1);\n      calInstance.set(Calendar.HOUR_OF_DAY, 0);\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.DAY) {\n      calInstance.set(Calendar.HOUR_OF_DAY, 0);\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.HOUR) {\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MINUTE) {\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.SECOND) {\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MILLISECOND) {\n      // don't cut off anything\n    } else {\n      throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    return calInstance.getTimeInMillis();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/document/DateTools#round(long,Resolution).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/DateTools#round(long,Resolution).mjava","sourceNew":"  /**\n   * Limit a date's resolution. For example, the date <code>1095767411000</code>\n   * (which represents 2004-09-21 13:50:11) will be changed to \n   * <code>1093989600000</code> (2004-09-01 00:00:00) when using\n   * <code>Resolution.MONTH</code>.\n   * \n   * @param resolution The desired resolution of the date to be returned\n   * @return the date with all values more precise than <code>resolution</code>\n   *  set to 0 or 1, expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   */\n  public static long round(long time, Resolution resolution) {\n    final Calendar calInstance = FORMATS.get().calInstance;\n    calInstance.setTimeInMillis(time);\n    \n    switch (resolution) {\n      case YEAR:\n        calInstance.set(Calendar.MONTH, 0);\n        calInstance.set(Calendar.DAY_OF_MONTH, 1);\n        calInstance.set(Calendar.HOUR_OF_DAY, 0);\n        calInstance.set(Calendar.MINUTE, 0);\n        calInstance.set(Calendar.SECOND, 0);\n        calInstance.set(Calendar.MILLISECOND, 0);\n        break;\n      case MONTH:\n        calInstance.set(Calendar.DAY_OF_MONTH, 1);\n        calInstance.set(Calendar.HOUR_OF_DAY, 0);\n        calInstance.set(Calendar.MINUTE, 0);\n        calInstance.set(Calendar.SECOND, 0);\n        calInstance.set(Calendar.MILLISECOND, 0);\n        break;\n      case DAY:\n        calInstance.set(Calendar.HOUR_OF_DAY, 0);\n        calInstance.set(Calendar.MINUTE, 0);\n        calInstance.set(Calendar.SECOND, 0);\n        calInstance.set(Calendar.MILLISECOND, 0);\n        break;\n      case HOUR:\n        calInstance.set(Calendar.MINUTE, 0);\n        calInstance.set(Calendar.SECOND, 0);\n        calInstance.set(Calendar.MILLISECOND, 0);\n        break;\n      case MINUTE:\n        calInstance.set(Calendar.SECOND, 0);\n        calInstance.set(Calendar.MILLISECOND, 0);\n        break;\n      case SECOND:\n        calInstance.set(Calendar.MILLISECOND, 0);\n        break;\n      case MILLISECOND:\n        // don't cut off anything\n        break;\n      default:\n        throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    return calInstance.getTimeInMillis();\n  }\n\n","sourceOld":"  /**\n   * Limit a date's resolution. For example, the date <code>1095767411000</code>\n   * (which represents 2004-09-21 13:50:11) will be changed to \n   * <code>1093989600000</code> (2004-09-01 00:00:00) when using\n   * <code>Resolution.MONTH</code>.\n   * \n   * @param resolution The desired resolution of the date to be returned\n   * @return the date with all values more precise than <code>resolution</code>\n   *  set to 0 or 1, expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   */\n  public static synchronized long round(long time, Resolution resolution) {\n    calInstance.setTimeInMillis(time);\n    \n    if (resolution == Resolution.YEAR) {\n      calInstance.set(Calendar.MONTH, 0);\n      calInstance.set(Calendar.DAY_OF_MONTH, 1);\n      calInstance.set(Calendar.HOUR_OF_DAY, 0);\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MONTH) {\n      calInstance.set(Calendar.DAY_OF_MONTH, 1);\n      calInstance.set(Calendar.HOUR_OF_DAY, 0);\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.DAY) {\n      calInstance.set(Calendar.HOUR_OF_DAY, 0);\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.HOUR) {\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MINUTE) {\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.SECOND) {\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MILLISECOND) {\n      // don't cut off anything\n    } else {\n      throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    return calInstance.getTimeInMillis();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/document/DateTools#round(long,Resolution).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/DateTools#round(long,Resolution).mjava","sourceNew":"  /**\n   * Limit a date's resolution. For example, the date <code>1095767411000</code>\n   * (which represents 2004-09-21 13:50:11) will be changed to \n   * <code>1093989600000</code> (2004-09-01 00:00:00) when using\n   * <code>Resolution.MONTH</code>.\n   * \n   * @param resolution The desired resolution of the date to be returned\n   * @return the date with all values more precise than <code>resolution</code>\n   *  set to 0 or 1, expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   */\n  public static long round(long time, Resolution resolution) {\n    final Calendar calInstance = FORMATS.get().calInstance;\n    calInstance.setTimeInMillis(time);\n    \n    switch (resolution) {\n      case YEAR:\n        calInstance.set(Calendar.MONTH, 0);\n        calInstance.set(Calendar.DAY_OF_MONTH, 1);\n        calInstance.set(Calendar.HOUR_OF_DAY, 0);\n        calInstance.set(Calendar.MINUTE, 0);\n        calInstance.set(Calendar.SECOND, 0);\n        calInstance.set(Calendar.MILLISECOND, 0);\n        break;\n      case MONTH:\n        calInstance.set(Calendar.DAY_OF_MONTH, 1);\n        calInstance.set(Calendar.HOUR_OF_DAY, 0);\n        calInstance.set(Calendar.MINUTE, 0);\n        calInstance.set(Calendar.SECOND, 0);\n        calInstance.set(Calendar.MILLISECOND, 0);\n        break;\n      case DAY:\n        calInstance.set(Calendar.HOUR_OF_DAY, 0);\n        calInstance.set(Calendar.MINUTE, 0);\n        calInstance.set(Calendar.SECOND, 0);\n        calInstance.set(Calendar.MILLISECOND, 0);\n        break;\n      case HOUR:\n        calInstance.set(Calendar.MINUTE, 0);\n        calInstance.set(Calendar.SECOND, 0);\n        calInstance.set(Calendar.MILLISECOND, 0);\n        break;\n      case MINUTE:\n        calInstance.set(Calendar.SECOND, 0);\n        calInstance.set(Calendar.MILLISECOND, 0);\n        break;\n      case SECOND:\n        calInstance.set(Calendar.MILLISECOND, 0);\n        break;\n      case MILLISECOND:\n        // don't cut off anything\n        break;\n      default:\n        throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    return calInstance.getTimeInMillis();\n  }\n\n","sourceOld":"  /**\n   * Limit a date's resolution. For example, the date <code>1095767411000</code>\n   * (which represents 2004-09-21 13:50:11) will be changed to \n   * <code>1093989600000</code> (2004-09-01 00:00:00) when using\n   * <code>Resolution.MONTH</code>.\n   * \n   * @param resolution The desired resolution of the date to be returned\n   * @return the date with all values more precise than <code>resolution</code>\n   *  set to 0 or 1, expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   */\n  public static synchronized long round(long time, Resolution resolution) {\n    calInstance.setTimeInMillis(time);\n    \n    if (resolution == Resolution.YEAR) {\n      calInstance.set(Calendar.MONTH, 0);\n      calInstance.set(Calendar.DAY_OF_MONTH, 1);\n      calInstance.set(Calendar.HOUR_OF_DAY, 0);\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MONTH) {\n      calInstance.set(Calendar.DAY_OF_MONTH, 1);\n      calInstance.set(Calendar.HOUR_OF_DAY, 0);\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.DAY) {\n      calInstance.set(Calendar.HOUR_OF_DAY, 0);\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.HOUR) {\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MINUTE) {\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.SECOND) {\n      calInstance.set(Calendar.MILLISECOND, 0);\n    } else if (resolution == Resolution.MILLISECOND) {\n      // don't cut off anything\n    } else {\n      throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    return calInstance.getTimeInMillis();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16f4f823cee2ff8354ee757848347b5e83e9335c","date":1307398887,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/DateTools#round(long,Resolution).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/DateTools#round(long,Resolution).mjava","sourceNew":"  /**\n   * Limit a date's resolution. For example, the date <code>1095767411000</code>\n   * (which represents 2004-09-21 13:50:11) will be changed to \n   * <code>1093989600000</code> (2004-09-01 00:00:00) when using\n   * <code>Resolution.MONTH</code>.\n   * \n   * @param resolution The desired resolution of the date to be returned\n   * @return the date with all values more precise than <code>resolution</code>\n   *  set to 0 or 1, expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   */\n  public static long round(long time, Resolution resolution) {\n    final Calendar calInstance = TL_CAL.get();\n    calInstance.setTimeInMillis(time);\n    \n    switch (resolution) {\n      //NOTE: switch statement fall-through is deliberate\n      case YEAR:\n        calInstance.set(Calendar.MONTH, 0);\n      case MONTH:\n        calInstance.set(Calendar.DAY_OF_MONTH, 1);\n      case DAY:\n        calInstance.set(Calendar.HOUR_OF_DAY, 0);\n      case HOUR:\n        calInstance.set(Calendar.MINUTE, 0);\n      case MINUTE:\n        calInstance.set(Calendar.SECOND, 0);\n      case SECOND:\n        calInstance.set(Calendar.MILLISECOND, 0);\n      case MILLISECOND:\n        // don't cut off anything\n        break;\n      default:\n        throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    return calInstance.getTimeInMillis();\n  }\n\n","sourceOld":"  /**\n   * Limit a date's resolution. For example, the date <code>1095767411000</code>\n   * (which represents 2004-09-21 13:50:11) will be changed to \n   * <code>1093989600000</code> (2004-09-01 00:00:00) when using\n   * <code>Resolution.MONTH</code>.\n   * \n   * @param resolution The desired resolution of the date to be returned\n   * @return the date with all values more precise than <code>resolution</code>\n   *  set to 0 or 1, expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   */\n  public static long round(long time, Resolution resolution) {\n    final Calendar calInstance = FORMATS.get().calInstance;\n    calInstance.setTimeInMillis(time);\n    \n    switch (resolution) {\n      case YEAR:\n        calInstance.set(Calendar.MONTH, 0);\n        calInstance.set(Calendar.DAY_OF_MONTH, 1);\n        calInstance.set(Calendar.HOUR_OF_DAY, 0);\n        calInstance.set(Calendar.MINUTE, 0);\n        calInstance.set(Calendar.SECOND, 0);\n        calInstance.set(Calendar.MILLISECOND, 0);\n        break;\n      case MONTH:\n        calInstance.set(Calendar.DAY_OF_MONTH, 1);\n        calInstance.set(Calendar.HOUR_OF_DAY, 0);\n        calInstance.set(Calendar.MINUTE, 0);\n        calInstance.set(Calendar.SECOND, 0);\n        calInstance.set(Calendar.MILLISECOND, 0);\n        break;\n      case DAY:\n        calInstance.set(Calendar.HOUR_OF_DAY, 0);\n        calInstance.set(Calendar.MINUTE, 0);\n        calInstance.set(Calendar.SECOND, 0);\n        calInstance.set(Calendar.MILLISECOND, 0);\n        break;\n      case HOUR:\n        calInstance.set(Calendar.MINUTE, 0);\n        calInstance.set(Calendar.SECOND, 0);\n        calInstance.set(Calendar.MILLISECOND, 0);\n        break;\n      case MINUTE:\n        calInstance.set(Calendar.SECOND, 0);\n        calInstance.set(Calendar.MILLISECOND, 0);\n        break;\n      case SECOND:\n        calInstance.set(Calendar.MILLISECOND, 0);\n        break;\n      case MILLISECOND:\n        // don't cut off anything\n        break;\n      default:\n        throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    return calInstance.getTimeInMillis();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c01bbd35cc1a9d4a064f979dac87e459dd0ec48","date":1307454917,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/DateTools#round(long,Resolution).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/DateTools#round(long,Resolution).mjava","sourceNew":"  /**\n   * Limit a date's resolution. For example, the date <code>1095767411000</code>\n   * (which represents 2004-09-21 13:50:11) will be changed to \n   * <code>1093989600000</code> (2004-09-01 00:00:00) when using\n   * <code>Resolution.MONTH</code>.\n   * \n   * @param resolution The desired resolution of the date to be returned\n   * @return the date with all values more precise than <code>resolution</code>\n   *  set to 0 or 1, expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   */\n  @SuppressWarnings(\"fallthrough\")\n  public static long round(long time, Resolution resolution) {\n    final Calendar calInstance = TL_CAL.get();\n    calInstance.setTimeInMillis(time);\n    \n    switch (resolution) {\n      //NOTE: switch statement fall-through is deliberate\n      case YEAR:\n        calInstance.set(Calendar.MONTH, 0);\n      case MONTH:\n        calInstance.set(Calendar.DAY_OF_MONTH, 1);\n      case DAY:\n        calInstance.set(Calendar.HOUR_OF_DAY, 0);\n      case HOUR:\n        calInstance.set(Calendar.MINUTE, 0);\n      case MINUTE:\n        calInstance.set(Calendar.SECOND, 0);\n      case SECOND:\n        calInstance.set(Calendar.MILLISECOND, 0);\n      case MILLISECOND:\n        // don't cut off anything\n        break;\n      default:\n        throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    return calInstance.getTimeInMillis();\n  }\n\n","sourceOld":"  /**\n   * Limit a date's resolution. For example, the date <code>1095767411000</code>\n   * (which represents 2004-09-21 13:50:11) will be changed to \n   * <code>1093989600000</code> (2004-09-01 00:00:00) when using\n   * <code>Resolution.MONTH</code>.\n   * \n   * @param resolution The desired resolution of the date to be returned\n   * @return the date with all values more precise than <code>resolution</code>\n   *  set to 0 or 1, expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   */\n  public static long round(long time, Resolution resolution) {\n    final Calendar calInstance = TL_CAL.get();\n    calInstance.setTimeInMillis(time);\n    \n    switch (resolution) {\n      //NOTE: switch statement fall-through is deliberate\n      case YEAR:\n        calInstance.set(Calendar.MONTH, 0);\n      case MONTH:\n        calInstance.set(Calendar.DAY_OF_MONTH, 1);\n      case DAY:\n        calInstance.set(Calendar.HOUR_OF_DAY, 0);\n      case HOUR:\n        calInstance.set(Calendar.MINUTE, 0);\n      case MINUTE:\n        calInstance.set(Calendar.SECOND, 0);\n      case SECOND:\n        calInstance.set(Calendar.MILLISECOND, 0);\n      case MILLISECOND:\n        // don't cut off anything\n        break;\n      default:\n        throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    return calInstance.getTimeInMillis();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/document/DateTools#round(long,Resolution).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/DateTools#round(long,Resolution).mjava","sourceNew":"  /**\n   * Limit a date's resolution. For example, the date <code>1095767411000</code>\n   * (which represents 2004-09-21 13:50:11) will be changed to \n   * <code>1093989600000</code> (2004-09-01 00:00:00) when using\n   * <code>Resolution.MONTH</code>.\n   * \n   * @param resolution The desired resolution of the date to be returned\n   * @return the date with all values more precise than <code>resolution</code>\n   *  set to 0 or 1, expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   */\n  @SuppressWarnings(\"fallthrough\")\n  public static long round(long time, Resolution resolution) {\n    final Calendar calInstance = TL_CAL.get();\n    calInstance.setTimeInMillis(time);\n    \n    switch (resolution) {\n      //NOTE: switch statement fall-through is deliberate\n      case YEAR:\n        calInstance.set(Calendar.MONTH, 0);\n      case MONTH:\n        calInstance.set(Calendar.DAY_OF_MONTH, 1);\n      case DAY:\n        calInstance.set(Calendar.HOUR_OF_DAY, 0);\n      case HOUR:\n        calInstance.set(Calendar.MINUTE, 0);\n      case MINUTE:\n        calInstance.set(Calendar.SECOND, 0);\n      case SECOND:\n        calInstance.set(Calendar.MILLISECOND, 0);\n      case MILLISECOND:\n        // don't cut off anything\n        break;\n      default:\n        throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    return calInstance.getTimeInMillis();\n  }\n\n","sourceOld":"  /**\n   * Limit a date's resolution. For example, the date <code>1095767411000</code>\n   * (which represents 2004-09-21 13:50:11) will be changed to \n   * <code>1093989600000</code> (2004-09-01 00:00:00) when using\n   * <code>Resolution.MONTH</code>.\n   * \n   * @param resolution The desired resolution of the date to be returned\n   * @return the date with all values more precise than <code>resolution</code>\n   *  set to 0 or 1, expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   */\n  public static long round(long time, Resolution resolution) {\n    final Calendar calInstance = FORMATS.get().calInstance;\n    calInstance.setTimeInMillis(time);\n    \n    switch (resolution) {\n      case YEAR:\n        calInstance.set(Calendar.MONTH, 0);\n        calInstance.set(Calendar.DAY_OF_MONTH, 1);\n        calInstance.set(Calendar.HOUR_OF_DAY, 0);\n        calInstance.set(Calendar.MINUTE, 0);\n        calInstance.set(Calendar.SECOND, 0);\n        calInstance.set(Calendar.MILLISECOND, 0);\n        break;\n      case MONTH:\n        calInstance.set(Calendar.DAY_OF_MONTH, 1);\n        calInstance.set(Calendar.HOUR_OF_DAY, 0);\n        calInstance.set(Calendar.MINUTE, 0);\n        calInstance.set(Calendar.SECOND, 0);\n        calInstance.set(Calendar.MILLISECOND, 0);\n        break;\n      case DAY:\n        calInstance.set(Calendar.HOUR_OF_DAY, 0);\n        calInstance.set(Calendar.MINUTE, 0);\n        calInstance.set(Calendar.SECOND, 0);\n        calInstance.set(Calendar.MILLISECOND, 0);\n        break;\n      case HOUR:\n        calInstance.set(Calendar.MINUTE, 0);\n        calInstance.set(Calendar.SECOND, 0);\n        calInstance.set(Calendar.MILLISECOND, 0);\n        break;\n      case MINUTE:\n        calInstance.set(Calendar.SECOND, 0);\n        calInstance.set(Calendar.MILLISECOND, 0);\n        break;\n      case SECOND:\n        calInstance.set(Calendar.MILLISECOND, 0);\n        break;\n      case MILLISECOND:\n        // don't cut off anything\n        break;\n      default:\n        throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    return calInstance.getTimeInMillis();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/document/DateTools#round(long,Resolution).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/DateTools#round(long,Resolution).mjava","sourceNew":"  /**\n   * Limit a date's resolution. For example, the date <code>1095767411000</code>\n   * (which represents 2004-09-21 13:50:11) will be changed to \n   * <code>1093989600000</code> (2004-09-01 00:00:00) when using\n   * <code>Resolution.MONTH</code>.\n   * \n   * @param resolution The desired resolution of the date to be returned\n   * @return the date with all values more precise than <code>resolution</code>\n   *  set to 0 or 1, expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   */\n  @SuppressWarnings(\"fallthrough\")\n  public static long round(long time, Resolution resolution) {\n    final Calendar calInstance = TL_CAL.get();\n    calInstance.setTimeInMillis(time);\n    \n    switch (resolution) {\n      //NOTE: switch statement fall-through is deliberate\n      case YEAR:\n        calInstance.set(Calendar.MONTH, 0);\n      case MONTH:\n        calInstance.set(Calendar.DAY_OF_MONTH, 1);\n      case DAY:\n        calInstance.set(Calendar.HOUR_OF_DAY, 0);\n      case HOUR:\n        calInstance.set(Calendar.MINUTE, 0);\n      case MINUTE:\n        calInstance.set(Calendar.SECOND, 0);\n      case SECOND:\n        calInstance.set(Calendar.MILLISECOND, 0);\n      case MILLISECOND:\n        // don't cut off anything\n        break;\n      default:\n        throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    return calInstance.getTimeInMillis();\n  }\n\n","sourceOld":"  /**\n   * Limit a date's resolution. For example, the date <code>1095767411000</code>\n   * (which represents 2004-09-21 13:50:11) will be changed to \n   * <code>1093989600000</code> (2004-09-01 00:00:00) when using\n   * <code>Resolution.MONTH</code>.\n   * \n   * @param resolution The desired resolution of the date to be returned\n   * @return the date with all values more precise than <code>resolution</code>\n   *  set to 0 or 1, expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   */\n  public static long round(long time, Resolution resolution) {\n    final Calendar calInstance = FORMATS.get().calInstance;\n    calInstance.setTimeInMillis(time);\n    \n    switch (resolution) {\n      case YEAR:\n        calInstance.set(Calendar.MONTH, 0);\n        calInstance.set(Calendar.DAY_OF_MONTH, 1);\n        calInstance.set(Calendar.HOUR_OF_DAY, 0);\n        calInstance.set(Calendar.MINUTE, 0);\n        calInstance.set(Calendar.SECOND, 0);\n        calInstance.set(Calendar.MILLISECOND, 0);\n        break;\n      case MONTH:\n        calInstance.set(Calendar.DAY_OF_MONTH, 1);\n        calInstance.set(Calendar.HOUR_OF_DAY, 0);\n        calInstance.set(Calendar.MINUTE, 0);\n        calInstance.set(Calendar.SECOND, 0);\n        calInstance.set(Calendar.MILLISECOND, 0);\n        break;\n      case DAY:\n        calInstance.set(Calendar.HOUR_OF_DAY, 0);\n        calInstance.set(Calendar.MINUTE, 0);\n        calInstance.set(Calendar.SECOND, 0);\n        calInstance.set(Calendar.MILLISECOND, 0);\n        break;\n      case HOUR:\n        calInstance.set(Calendar.MINUTE, 0);\n        calInstance.set(Calendar.SECOND, 0);\n        calInstance.set(Calendar.MILLISECOND, 0);\n        break;\n      case MINUTE:\n        calInstance.set(Calendar.SECOND, 0);\n        calInstance.set(Calendar.MILLISECOND, 0);\n        break;\n      case SECOND:\n        calInstance.set(Calendar.MILLISECOND, 0);\n        break;\n      case MILLISECOND:\n        // don't cut off anything\n        break;\n      default:\n        throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    return calInstance.getTimeInMillis();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/DateTools#round(long,Resolution).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/DateTools#round(long,Resolution).mjava","sourceNew":"  /**\n   * Limit a date's resolution. For example, the date <code>1095767411000</code>\n   * (which represents 2004-09-21 13:50:11) will be changed to \n   * <code>1093989600000</code> (2004-09-01 00:00:00) when using\n   * <code>Resolution.MONTH</code>.\n   * \n   * @param resolution The desired resolution of the date to be returned\n   * @return the date with all values more precise than <code>resolution</code>\n   *  set to 0 or 1, expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   */\n  @SuppressWarnings(\"fallthrough\")\n  public static long round(long time, Resolution resolution) {\n    final Calendar calInstance = TL_CAL.get();\n    calInstance.setTimeInMillis(time);\n    \n    switch (resolution) {\n      //NOTE: switch statement fall-through is deliberate\n      case YEAR:\n        calInstance.set(Calendar.MONTH, 0);\n      case MONTH:\n        calInstance.set(Calendar.DAY_OF_MONTH, 1);\n      case DAY:\n        calInstance.set(Calendar.HOUR_OF_DAY, 0);\n      case HOUR:\n        calInstance.set(Calendar.MINUTE, 0);\n      case MINUTE:\n        calInstance.set(Calendar.SECOND, 0);\n      case SECOND:\n        calInstance.set(Calendar.MILLISECOND, 0);\n      case MILLISECOND:\n        // don't cut off anything\n        break;\n      default:\n        throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    return calInstance.getTimeInMillis();\n  }\n\n","sourceOld":"  /**\n   * Limit a date's resolution. For example, the date <code>1095767411000</code>\n   * (which represents 2004-09-21 13:50:11) will be changed to \n   * <code>1093989600000</code> (2004-09-01 00:00:00) when using\n   * <code>Resolution.MONTH</code>.\n   * \n   * @param resolution The desired resolution of the date to be returned\n   * @return the date with all values more precise than <code>resolution</code>\n   *  set to 0 or 1, expressed as milliseconds since January 1, 1970, 00:00:00 GMT\n   */\n  @SuppressWarnings(\"fallthrough\")\n  public static long round(long time, Resolution resolution) {\n    final Calendar calInstance = TL_CAL.get();\n    calInstance.setTimeInMillis(time);\n    \n    switch (resolution) {\n      //NOTE: switch statement fall-through is deliberate\n      case YEAR:\n        calInstance.set(Calendar.MONTH, 0);\n      case MONTH:\n        calInstance.set(Calendar.DAY_OF_MONTH, 1);\n      case DAY:\n        calInstance.set(Calendar.HOUR_OF_DAY, 0);\n      case HOUR:\n        calInstance.set(Calendar.MINUTE, 0);\n      case MINUTE:\n        calInstance.set(Calendar.SECOND, 0);\n      case SECOND:\n        calInstance.set(Calendar.MILLISECOND, 0);\n      case MILLISECOND:\n        // don't cut off anything\n        break;\n      default:\n        throw new IllegalArgumentException(\"unknown resolution \" + resolution);\n    }\n    return calInstance.getTimeInMillis();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"16f4f823cee2ff8354ee757848347b5e83e9335c":["556156c44f3392896fb44dc22a6bafbad421bcff"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["556156c44f3392896fb44dc22a6bafbad421bcff","6c01bbd35cc1a9d4a064f979dac87e459dd0ec48"],"556156c44f3392896fb44dc22a6bafbad421bcff":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["6c01bbd35cc1a9d4a064f979dac87e459dd0ec48"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9454a6510e2db155fb01faa5c049b06ece95fab9","556156c44f3392896fb44dc22a6bafbad421bcff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["29ef99d61cda9641b6250bf9567329a6e65f901d","6c01bbd35cc1a9d4a064f979dac87e459dd0ec48"],"6c01bbd35cc1a9d4a064f979dac87e459dd0ec48":["16f4f823cee2ff8354ee757848347b5e83e9335c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["9454a6510e2db155fb01faa5c049b06ece95fab9","556156c44f3392896fb44dc22a6bafbad421bcff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"16f4f823cee2ff8354ee757848347b5e83e9335c":["6c01bbd35cc1a9d4a064f979dac87e459dd0ec48"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"556156c44f3392896fb44dc22a6bafbad421bcff":["16f4f823cee2ff8354ee757848347b5e83e9335c","a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"6c01bbd35cc1a9d4a064f979dac87e459dd0ec48":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3a119bbc8703c10faa329ec201c654b3a35a1e3e","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["556156c44f3392896fb44dc22a6bafbad421bcff","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}