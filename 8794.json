{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCountingMultiReader().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCountingMultiReader().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCountingMultiReader().mjava","sourceNew":"  public void testReferenceCountingMultiReader() throws IOException {\n    for (int mode = 0; mode <=1; mode++) {\n      Directory dir1 = new MockRAMDirectory();\n      createIndex(dir1, false);\n      Directory dir2 = new MockRAMDirectory();\n      createIndex(dir2, true);\n      \n      IndexReader reader1 = IndexReader.open(dir1, false);\n      assertRefCountEquals(1, reader1);\n\n      IndexReader initReader2 = IndexReader.open(dir2, false);\n      IndexReader multiReader1 = new MultiReader(new IndexReader[] {reader1, initReader2}, (mode == 0));\n      modifyIndex(0, dir2);\n      assertRefCountEquals(1 + mode, reader1);\n      \n      IndexReader multiReader2 = multiReader1.reopen();\n      // index1 hasn't changed, so multiReader2 should share reader1 now with multiReader1\n      assertRefCountEquals(2 + mode, reader1);\n      \n      modifyIndex(0, dir1);\n      IndexReader reader2 = reader1.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      modifyIndex(1, dir1);\n      IndexReader reader3 = reader2.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n      assertRefCountEquals(1, reader2);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      reader1.close();\n      assertRefCountEquals(1, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, true);\n      dir1.close();\n      dir2.close();\n    }\n\n  }\n\n","sourceOld":"  public void testReferenceCountingMultiReader() throws IOException {\n    for (int mode = 0; mode <=1; mode++) {\n      Directory dir1 = new MockRAMDirectory();\n      createIndex(dir1, false);\n      Directory dir2 = new MockRAMDirectory();\n      createIndex(dir2, true);\n      \n      IndexReader reader1 = IndexReader.open(dir1, false);\n      assertRefCountEquals(1, reader1);\n\n      IndexReader initReader2 = IndexReader.open(dir2, false);\n      IndexReader multiReader1 = new MultiReader(new IndexReader[] {reader1, initReader2}, (mode == 0));\n      modifyIndex(0, dir2);\n      assertRefCountEquals(1 + mode, reader1);\n      \n      IndexReader multiReader2 = multiReader1.reopen();\n      // index1 hasn't changed, so multiReader2 should share reader1 now with multiReader1\n      assertRefCountEquals(2 + mode, reader1);\n      \n      modifyIndex(0, dir1);\n      IndexReader reader2 = reader1.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      modifyIndex(1, dir1);\n      IndexReader reader3 = reader2.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n      assertRefCountEquals(1, reader2);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      reader1.close();\n      assertRefCountEquals(1, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, true);\n      dir1.close();\n      dir2.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCountingMultiReader().mjava","sourceNew":null,"sourceOld":"  public void testReferenceCountingMultiReader() throws IOException {\n    for (int mode = 0; mode <=1; mode++) {\n      Directory dir1 = new MockRAMDirectory();\n      createIndex(dir1, false);\n      Directory dir2 = new MockRAMDirectory();\n      createIndex(dir2, true);\n      \n      IndexReader reader1 = IndexReader.open(dir1, false);\n      assertRefCountEquals(1, reader1);\n\n      IndexReader initReader2 = IndexReader.open(dir2, false);\n      IndexReader multiReader1 = new MultiReader(new IndexReader[] {reader1, initReader2}, (mode == 0));\n      modifyIndex(0, dir2);\n      assertRefCountEquals(1 + mode, reader1);\n      \n      IndexReader multiReader2 = multiReader1.reopen();\n      // index1 hasn't changed, so multiReader2 should share reader1 now with multiReader1\n      assertRefCountEquals(2 + mode, reader1);\n      \n      modifyIndex(0, dir1);\n      IndexReader reader2 = reader1.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      modifyIndex(1, dir1);\n      IndexReader reader3 = reader2.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n      assertRefCountEquals(1, reader2);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      reader1.close();\n      assertRefCountEquals(1, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, true);\n      dir1.close();\n      dir2.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}