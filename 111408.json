{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#startField(FieldInfo,int,boolean,boolean,boolean).mjava","commits":[{"id":"0935c850ea562932997b72c69d93e345f21d7f45","date":1344711506,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#startField(FieldInfo,int,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#startField(FieldInfo,int,boolean,boolean).mjava","sourceNew":"  @Override\n  public void startField(FieldInfo info, int numTerms, boolean positions, boolean offsets, boolean payloads) throws IOException {\n    assert lastFieldName == null || info.name.compareTo(lastFieldName) > 0: \"fieldName=\" + info.name + \" lastFieldName=\" + lastFieldName;\n    lastFieldName = info.name;\n    this.positions = positions;\n    this.offsets = offsets;\n    this.payloads = payloads;\n    lastTerm.length = 0;\n    lastPayloadLength = -1; // force first payload to write its length\n    fps[fieldCount++] = tvf.getFilePointer();\n    tvd.writeVInt(info.number);\n    tvf.writeVInt(numTerms);\n    byte bits = 0x0;\n    if (positions)\n      bits |= Lucene40TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (offsets)\n      bits |= Lucene40TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    if (payloads)\n      bits |= Lucene40TermVectorsReader.STORE_PAYLOAD_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n    \n    assert fieldCount <= numVectorFields;\n    if (fieldCount == numVectorFields) {\n      // last field of the document\n      // this is crazy because the file format is crazy!\n      for (int i = 1; i < fieldCount; i++) {\n        tvd.writeVLong(fps[i] - fps[i-1]);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void startField(FieldInfo info, int numTerms, boolean positions, boolean offsets) throws IOException {\n    assert lastFieldName == null || info.name.compareTo(lastFieldName) > 0: \"fieldName=\" + info.name + \" lastFieldName=\" + lastFieldName;\n    lastFieldName = info.name;\n    this.positions = positions;\n    this.offsets = offsets;\n    lastTerm.length = 0;\n    fps[fieldCount++] = tvf.getFilePointer();\n    tvd.writeVInt(info.number);\n    tvf.writeVInt(numTerms);\n    byte bits = 0x0;\n    if (positions)\n      bits |= Lucene40TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (offsets)\n      bits |= Lucene40TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n    \n    assert fieldCount <= numVectorFields;\n    if (fieldCount == numVectorFields) {\n      // last field of the document\n      // this is crazy because the file format is crazy!\n      for (int i = 1; i < fieldCount; i++) {\n        tvd.writeVLong(fps[i] - fps[i-1]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#startField(FieldInfo,int,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#startField(FieldInfo,int,boolean,boolean).mjava","sourceNew":"  @Override\n  public void startField(FieldInfo info, int numTerms, boolean positions, boolean offsets, boolean payloads) throws IOException {\n    assert lastFieldName == null || info.name.compareTo(lastFieldName) > 0: \"fieldName=\" + info.name + \" lastFieldName=\" + lastFieldName;\n    lastFieldName = info.name;\n    this.positions = positions;\n    this.offsets = offsets;\n    this.payloads = payloads;\n    lastTerm.length = 0;\n    lastPayloadLength = -1; // force first payload to write its length\n    fps[fieldCount++] = tvf.getFilePointer();\n    tvd.writeVInt(info.number);\n    tvf.writeVInt(numTerms);\n    byte bits = 0x0;\n    if (positions)\n      bits |= Lucene40TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (offsets)\n      bits |= Lucene40TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    if (payloads)\n      bits |= Lucene40TermVectorsReader.STORE_PAYLOAD_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n    \n    assert fieldCount <= numVectorFields;\n    if (fieldCount == numVectorFields) {\n      // last field of the document\n      // this is crazy because the file format is crazy!\n      for (int i = 1; i < fieldCount; i++) {\n        tvd.writeVLong(fps[i] - fps[i-1]);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void startField(FieldInfo info, int numTerms, boolean positions, boolean offsets) throws IOException {\n    assert lastFieldName == null || info.name.compareTo(lastFieldName) > 0: \"fieldName=\" + info.name + \" lastFieldName=\" + lastFieldName;\n    lastFieldName = info.name;\n    this.positions = positions;\n    this.offsets = offsets;\n    lastTerm.length = 0;\n    fps[fieldCount++] = tvf.getFilePointer();\n    tvd.writeVInt(info.number);\n    tvf.writeVInt(numTerms);\n    byte bits = 0x0;\n    if (positions)\n      bits |= Lucene40TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (offsets)\n      bits |= Lucene40TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n    \n    assert fieldCount <= numVectorFields;\n    if (fieldCount == numVectorFields) {\n      // last field of the document\n      // this is crazy because the file format is crazy!\n      for (int i = 1; i < fieldCount; i++) {\n        tvd.writeVLong(fps[i] - fps[i-1]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#startField(FieldInfo,int,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#startField(FieldInfo,int,boolean,boolean).mjava","sourceNew":"  @Override\n  public void startField(FieldInfo info, int numTerms, boolean positions, boolean offsets, boolean payloads) throws IOException {\n    assert lastFieldName == null || info.name.compareTo(lastFieldName) > 0: \"fieldName=\" + info.name + \" lastFieldName=\" + lastFieldName;\n    lastFieldName = info.name;\n    this.positions = positions;\n    this.offsets = offsets;\n    this.payloads = payloads;\n    lastTerm.length = 0;\n    lastPayloadLength = -1; // force first payload to write its length\n    fps[fieldCount++] = tvf.getFilePointer();\n    tvd.writeVInt(info.number);\n    tvf.writeVInt(numTerms);\n    byte bits = 0x0;\n    if (positions)\n      bits |= Lucene40TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (offsets)\n      bits |= Lucene40TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    if (payloads)\n      bits |= Lucene40TermVectorsReader.STORE_PAYLOAD_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n    \n    assert fieldCount <= numVectorFields;\n    if (fieldCount == numVectorFields) {\n      // last field of the document\n      // this is crazy because the file format is crazy!\n      for (int i = 1; i < fieldCount; i++) {\n        tvd.writeVLong(fps[i] - fps[i-1]);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void startField(FieldInfo info, int numTerms, boolean positions, boolean offsets) throws IOException {\n    assert lastFieldName == null || info.name.compareTo(lastFieldName) > 0: \"fieldName=\" + info.name + \" lastFieldName=\" + lastFieldName;\n    lastFieldName = info.name;\n    this.positions = positions;\n    this.offsets = offsets;\n    lastTerm.length = 0;\n    fps[fieldCount++] = tvf.getFilePointer();\n    tvd.writeVInt(info.number);\n    tvf.writeVInt(numTerms);\n    byte bits = 0x0;\n    if (positions)\n      bits |= Lucene40TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (offsets)\n      bits |= Lucene40TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n    \n    assert fieldCount <= numVectorFields;\n    if (fieldCount == numVectorFields) {\n      // last field of the document\n      // this is crazy because the file format is crazy!\n      for (int i = 1; i < fieldCount; i++) {\n        tvd.writeVLong(fps[i] - fps[i-1]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc7a7bb1aa79cf53564793bb5ffa270250c679da","date":1357817084,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#startField(FieldInfo,int,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#startField(FieldInfo,int,boolean,boolean,boolean).mjava","sourceNew":"  @Override\n  public void startField(FieldInfo info, int numTerms, boolean positions, boolean offsets, boolean payloads) throws IOException {\n    assert lastFieldName == null || info.name.compareTo(lastFieldName) > 0: \"fieldName=\" + info.name + \" lastFieldName=\" + lastFieldName;\n    lastFieldName = info.name;\n    this.positions = positions;\n    this.offsets = offsets;\n    this.payloads = payloads;\n    lastTerm.length = 0;\n    lastPayloadLength = -1; // force first payload to write its length\n    fps[fieldCount++] = tvf.getFilePointer();\n    tvd.writeVInt(info.number);\n    tvf.writeVInt(numTerms);\n    byte bits = 0x0;\n    if (positions)\n      bits |= Lucene40TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (offsets)\n      bits |= Lucene40TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    if (payloads)\n      bits |= Lucene40TermVectorsReader.STORE_PAYLOAD_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n  }\n\n","sourceOld":"  @Override\n  public void startField(FieldInfo info, int numTerms, boolean positions, boolean offsets, boolean payloads) throws IOException {\n    assert lastFieldName == null || info.name.compareTo(lastFieldName) > 0: \"fieldName=\" + info.name + \" lastFieldName=\" + lastFieldName;\n    lastFieldName = info.name;\n    this.positions = positions;\n    this.offsets = offsets;\n    this.payloads = payloads;\n    lastTerm.length = 0;\n    lastPayloadLength = -1; // force first payload to write its length\n    fps[fieldCount++] = tvf.getFilePointer();\n    tvd.writeVInt(info.number);\n    tvf.writeVInt(numTerms);\n    byte bits = 0x0;\n    if (positions)\n      bits |= Lucene40TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (offsets)\n      bits |= Lucene40TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    if (payloads)\n      bits |= Lucene40TermVectorsReader.STORE_PAYLOAD_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n    \n    assert fieldCount <= numVectorFields;\n    if (fieldCount == numVectorFields) {\n      // last field of the document\n      // this is crazy because the file format is crazy!\n      for (int i = 1; i < fieldCount; i++) {\n        tvd.writeVLong(fps[i] - fps[i-1]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#startField(FieldInfo,int,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#startField(FieldInfo,int,boolean,boolean,boolean).mjava","sourceNew":"  @Override\n  public void startField(FieldInfo info, int numTerms, boolean positions, boolean offsets, boolean payloads) throws IOException {\n    assert lastFieldName == null || info.name.compareTo(lastFieldName) > 0: \"fieldName=\" + info.name + \" lastFieldName=\" + lastFieldName;\n    lastFieldName = info.name;\n    this.positions = positions;\n    this.offsets = offsets;\n    this.payloads = payloads;\n    lastTerm.length = 0;\n    lastPayloadLength = -1; // force first payload to write its length\n    fps[fieldCount++] = tvf.getFilePointer();\n    tvd.writeVInt(info.number);\n    tvf.writeVInt(numTerms);\n    byte bits = 0x0;\n    if (positions)\n      bits |= Lucene40TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (offsets)\n      bits |= Lucene40TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    if (payloads)\n      bits |= Lucene40TermVectorsReader.STORE_PAYLOAD_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n  }\n\n","sourceOld":"  @Override\n  public void startField(FieldInfo info, int numTerms, boolean positions, boolean offsets, boolean payloads) throws IOException {\n    assert lastFieldName == null || info.name.compareTo(lastFieldName) > 0: \"fieldName=\" + info.name + \" lastFieldName=\" + lastFieldName;\n    lastFieldName = info.name;\n    this.positions = positions;\n    this.offsets = offsets;\n    this.payloads = payloads;\n    lastTerm.length = 0;\n    lastPayloadLength = -1; // force first payload to write its length\n    fps[fieldCount++] = tvf.getFilePointer();\n    tvd.writeVInt(info.number);\n    tvf.writeVInt(numTerms);\n    byte bits = 0x0;\n    if (positions)\n      bits |= Lucene40TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (offsets)\n      bits |= Lucene40TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    if (payloads)\n      bits |= Lucene40TermVectorsReader.STORE_PAYLOAD_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n    \n    assert fieldCount <= numVectorFields;\n    if (fieldCount == numVectorFields) {\n      // last field of the document\n      // this is crazy because the file format is crazy!\n      for (int i = 1; i < fieldCount; i++) {\n        tvd.writeVLong(fps[i] - fps[i-1]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#startField(FieldInfo,int,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#startField(FieldInfo,int,boolean,boolean,boolean).mjava","sourceNew":"  @Override\n  public void startField(FieldInfo info, int numTerms, boolean positions, boolean offsets, boolean payloads) throws IOException {\n    assert lastFieldName == null || info.name.compareTo(lastFieldName) > 0: \"fieldName=\" + info.name + \" lastFieldName=\" + lastFieldName;\n    lastFieldName = info.name;\n    this.positions = positions;\n    this.offsets = offsets;\n    this.payloads = payloads;\n    lastTerm.clear();\n    lastPayloadLength = -1; // force first payload to write its length\n    fps[fieldCount++] = tvf.getFilePointer();\n    tvd.writeVInt(info.number);\n    tvf.writeVInt(numTerms);\n    byte bits = 0x0;\n    if (positions)\n      bits |= Lucene40TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (offsets)\n      bits |= Lucene40TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    if (payloads)\n      bits |= Lucene40TermVectorsReader.STORE_PAYLOAD_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n  }\n\n","sourceOld":"  @Override\n  public void startField(FieldInfo info, int numTerms, boolean positions, boolean offsets, boolean payloads) throws IOException {\n    assert lastFieldName == null || info.name.compareTo(lastFieldName) > 0: \"fieldName=\" + info.name + \" lastFieldName=\" + lastFieldName;\n    lastFieldName = info.name;\n    this.positions = positions;\n    this.offsets = offsets;\n    this.payloads = payloads;\n    lastTerm.length = 0;\n    lastPayloadLength = -1; // force first payload to write its length\n    fps[fieldCount++] = tvf.getFilePointer();\n    tvd.writeVInt(info.number);\n    tvf.writeVInt(numTerms);\n    byte bits = 0x0;\n    if (positions)\n      bits |= Lucene40TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (offsets)\n      bits |= Lucene40TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    if (payloads)\n      bits |= Lucene40TermVectorsReader.STORE_PAYLOAD_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n  }\n\n","bugFix":["3cc749c053615f5871f3b95715fe292f34e70a53"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22a2e66dfda83847e80095b8693c660742ab3e9c","date":1408628796,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#startField(FieldInfo,int,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#startField(FieldInfo,int,boolean,boolean,boolean).mjava","sourceNew":"  @Override\n  public void startField(FieldInfo info, int numTerms, boolean positions, boolean offsets, boolean payloads) throws IOException {\n    assert lastFieldName == null || info.name.compareTo(lastFieldName) > 0: \"fieldName=\" + info.name + \" lastFieldName=\" + lastFieldName;\n    lastFieldName = info.name;\n    this.positions = positions;\n    this.offsets = offsets;\n    this.payloads = payloads;\n    lastTerm.clear();\n    lastPayloadLength = -1; // force first payload to write its length\n    fps[fieldCount++] = tvf.getFilePointer();\n    tvd.writeVInt(info.number);\n    tvf.writeVInt(numTerms);\n    byte bits = 0x0;\n    if (positions)\n      bits |= Lucene40TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (offsets)\n      bits |= Lucene40TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    if (payloads)\n      bits |= Lucene40TermVectorsReader.STORE_PAYLOAD_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n  }\n\n","sourceOld":"  @Override\n  public void startField(FieldInfo info, int numTerms, boolean positions, boolean offsets, boolean payloads) throws IOException {\n    assert lastFieldName == null || info.name.compareTo(lastFieldName) > 0: \"fieldName=\" + info.name + \" lastFieldName=\" + lastFieldName;\n    lastFieldName = info.name;\n    this.positions = positions;\n    this.offsets = offsets;\n    this.payloads = payloads;\n    lastTerm.clear();\n    lastPayloadLength = -1; // force first payload to write its length\n    fps[fieldCount++] = tvf.getFilePointer();\n    tvd.writeVInt(info.number);\n    tvf.writeVInt(numTerms);\n    byte bits = 0x0;\n    if (positions)\n      bits |= Lucene40TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (offsets)\n      bits |= Lucene40TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    if (payloads)\n      bits |= Lucene40TermVectorsReader.STORE_PAYLOAD_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0935c850ea562932997b72c69d93e345f21d7f45"],"fc7a7bb1aa79cf53564793bb5ffa270250c679da":["0935c850ea562932997b72c69d93e345f21d7f45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22a2e66dfda83847e80095b8693c660742ab3e9c":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["fc7a7bb1aa79cf53564793bb5ffa270250c679da"],"0935c850ea562932997b72c69d93e345f21d7f45":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["0935c850ea562932997b72c69d93e345f21d7f45","fc7a7bb1aa79cf53564793bb5ffa270250c679da"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0935c850ea562932997b72c69d93e345f21d7f45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22a2e66dfda83847e80095b8693c660742ab3e9c"]},"commit2Childs":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","0935c850ea562932997b72c69d93e345f21d7f45","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"fc7a7bb1aa79cf53564793bb5ffa270250c679da":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"0935c850ea562932997b72c69d93e345f21d7f45":["c7869f64c874ebf7f317d22c00baf2b6857797a6","fc7a7bb1aa79cf53564793bb5ffa270250c679da","4e6354dd7c71fe122926fc53d7d29f715b1283db","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","4e6354dd7c71fe122926fc53d7d29f715b1283db","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}