{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testRetainMockAttribute().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testRetainMockAttribute().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testRetainMockAttribute().mjava","sourceNew":"  public void testRetainMockAttribute() throws Exception {\n    CharArraySet dict = makeDictionary(\"abc\", \"d\", \"efg\");\n    Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT,\n        new StringReader(\"abcdefg\"));\n    TokenStream stream = new MockRetainAttributeFilter(tokenizer);\n    stream = new DictionaryCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT, stream, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    MockRetainAttribute retAtt = stream.addAttribute(MockRetainAttribute.class);\n    while (stream.incrementToken()) {\n      assertTrue(\"Custom attribute value was lost\", retAtt.getRetain());\n    }\n\n  }\n\n","sourceOld":"  public void testRetainMockAttribute() throws Exception {\n    CharArraySet dict = makeDictionary(\"abc\", \"d\", \"efg\");\n    Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT,\n        new StringReader(\"abcdefg\"));\n    TokenStream stream = new MockRetainAttributeFilter(tokenizer);\n    stream = new DictionaryCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT, stream, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    MockRetainAttribute retAtt = stream.addAttribute(MockRetainAttribute.class);\n    while (stream.incrementToken()) {\n      assertTrue(\"Custom attribute value was lost\", retAtt.getRetain());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c1b87b155748a27fbed84a0ffb3f8799177451e","date":1346349018,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testRetainMockAttribute().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testRetainMockAttribute().mjava","sourceNew":"  public void testRetainMockAttribute() throws Exception {\n    CharArraySet dict = makeDictionary(\"abc\", \"d\", \"efg\");\n    Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT,\n        new StringReader(\"abcdefg\"));\n    TokenStream stream = new MockRetainAttributeFilter(tokenizer);\n    stream = new DictionaryCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT, stream, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    MockRetainAttribute retAtt = stream.addAttribute(MockRetainAttribute.class);\n    stream.reset();\n    while (stream.incrementToken()) {\n      assertTrue(\"Custom attribute value was lost\", retAtt.getRetain());\n    }\n\n  }\n\n","sourceOld":"  public void testRetainMockAttribute() throws Exception {\n    CharArraySet dict = makeDictionary(\"abc\", \"d\", \"efg\");\n    Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT,\n        new StringReader(\"abcdefg\"));\n    TokenStream stream = new MockRetainAttributeFilter(tokenizer);\n    stream = new DictionaryCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT, stream, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    MockRetainAttribute retAtt = stream.addAttribute(MockRetainAttribute.class);\n    while (stream.incrementToken()) {\n      assertTrue(\"Custom attribute value was lost\", retAtt.getRetain());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testRetainMockAttribute().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testRetainMockAttribute().mjava","sourceNew":"  public void testRetainMockAttribute() throws Exception {\n    CharArraySet dict = makeDictionary(\"abc\", \"d\", \"efg\");\n    Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT,\n        new StringReader(\"abcdefg\"));\n    TokenStream stream = new MockRetainAttributeFilter(tokenizer);\n    stream = new DictionaryCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT, stream, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    MockRetainAttribute retAtt = stream.addAttribute(MockRetainAttribute.class);\n    stream.reset();\n    while (stream.incrementToken()) {\n      assertTrue(\"Custom attribute value was lost\", retAtt.getRetain());\n    }\n\n  }\n\n","sourceOld":"  public void testRetainMockAttribute() throws Exception {\n    CharArraySet dict = makeDictionary(\"abc\", \"d\", \"efg\");\n    Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT,\n        new StringReader(\"abcdefg\"));\n    TokenStream stream = new MockRetainAttributeFilter(tokenizer);\n    stream = new DictionaryCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT, stream, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    MockRetainAttribute retAtt = stream.addAttribute(MockRetainAttribute.class);\n    while (stream.incrementToken()) {\n      assertTrue(\"Custom attribute value was lost\", retAtt.getRetain());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testRetainMockAttribute().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testRetainMockAttribute().mjava","sourceNew":"  public void testRetainMockAttribute() throws Exception {\n    CharArraySet dict = makeDictionary(\"abc\", \"d\", \"efg\");\n    Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT);\n    tokenizer.setReader(new StringReader(\"abcdefg\"));\n    TokenStream stream = new MockRetainAttributeFilter(tokenizer);\n    stream = new DictionaryCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT, stream, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    MockRetainAttribute retAtt = stream.addAttribute(MockRetainAttribute.class);\n    stream.reset();\n    while (stream.incrementToken()) {\n      assertTrue(\"Custom attribute value was lost\", retAtt.getRetain());\n    }\n\n  }\n\n","sourceOld":"  public void testRetainMockAttribute() throws Exception {\n    CharArraySet dict = makeDictionary(\"abc\", \"d\", \"efg\");\n    Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT,\n        new StringReader(\"abcdefg\"));\n    TokenStream stream = new MockRetainAttributeFilter(tokenizer);\n    stream = new DictionaryCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT, stream, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    MockRetainAttribute retAtt = stream.addAttribute(MockRetainAttribute.class);\n    stream.reset();\n    while (stream.incrementToken()) {\n      assertTrue(\"Custom attribute value was lost\", retAtt.getRetain());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75","date":1399205975,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testRetainMockAttribute().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testRetainMockAttribute().mjava","sourceNew":"  public void testRetainMockAttribute() throws Exception {\n    CharArraySet dict = makeDictionary(\"abc\", \"d\", \"efg\");\n    Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    tokenizer.setReader(new StringReader(\"abcdefg\"));\n    TokenStream stream = new MockRetainAttributeFilter(tokenizer);\n    stream = new DictionaryCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT, stream, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    MockRetainAttribute retAtt = stream.addAttribute(MockRetainAttribute.class);\n    stream.reset();\n    while (stream.incrementToken()) {\n      assertTrue(\"Custom attribute value was lost\", retAtt.getRetain());\n    }\n\n  }\n\n","sourceOld":"  public void testRetainMockAttribute() throws Exception {\n    CharArraySet dict = makeDictionary(\"abc\", \"d\", \"efg\");\n    Tokenizer tokenizer = new WhitespaceTokenizer(TEST_VERSION_CURRENT);\n    tokenizer.setReader(new StringReader(\"abcdefg\"));\n    TokenStream stream = new MockRetainAttributeFilter(tokenizer);\n    stream = new DictionaryCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT, stream, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    MockRetainAttribute retAtt = stream.addAttribute(MockRetainAttribute.class);\n    stream.reset();\n    while (stream.incrementToken()) {\n      assertTrue(\"Custom attribute value was lost\", retAtt.getRetain());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testRetainMockAttribute().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testRetainMockAttribute().mjava","sourceNew":"  public void testRetainMockAttribute() throws Exception {\n    CharArraySet dict = makeDictionary(\"abc\", \"d\", \"efg\");\n    Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    tokenizer.setReader(new StringReader(\"abcdefg\"));\n    TokenStream stream = new MockRetainAttributeFilter(tokenizer);\n    stream = new DictionaryCompoundWordTokenFilter(\n        stream, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    MockRetainAttribute retAtt = stream.addAttribute(MockRetainAttribute.class);\n    stream.reset();\n    while (stream.incrementToken()) {\n      assertTrue(\"Custom attribute value was lost\", retAtt.getRetain());\n    }\n\n  }\n\n","sourceOld":"  public void testRetainMockAttribute() throws Exception {\n    CharArraySet dict = makeDictionary(\"abc\", \"d\", \"efg\");\n    Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    tokenizer.setReader(new StringReader(\"abcdefg\"));\n    TokenStream stream = new MockRetainAttributeFilter(tokenizer);\n    stream = new DictionaryCompoundWordTokenFilter(\n        TEST_VERSION_CURRENT, stream, dict,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MIN_SUBWORD_SIZE,\n        CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false);\n    MockRetainAttribute retAtt = stream.addAttribute(MockRetainAttribute.class);\n    stream.reset();\n    while (stream.incrementToken()) {\n      assertTrue(\"Custom attribute value was lost\", retAtt.getRetain());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c1b87b155748a27fbed84a0ffb3f8799177451e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["4c1b87b155748a27fbed84a0ffb3f8799177451e"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["923f36bb0db6f793cf62dbb68723ae3bfbaf1d75"],"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05a14b2611ead08655a2b2bdc61632eb31316e57":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4c1b87b155748a27fbed84a0ffb3f8799177451e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["379db3ad24c4f0214f30a122265a6d6be003a99d"]},"commit2Childs":{"4c1b87b155748a27fbed84a0ffb3f8799177451e":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","05a14b2611ead08655a2b2bdc61632eb31316e57"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4c1b87b155748a27fbed84a0ffb3f8799177451e","05a14b2611ead08655a2b2bdc61632eb31316e57"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["923f36bb0db6f793cf62dbb68723ae3bfbaf1d75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}