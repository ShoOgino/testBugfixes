{"path":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPNoScore#createJoinMap(Map[Comparable,Doc],String,String).mjava","commits":[{"id":"6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd","date":1438089844,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPNoScore#createJoinMap(Map[Comparable,Doc],String,String).mjava","pathOld":"/dev/null","sourceNew":"  Map<Comparable, Set<Comparable>> createJoinMap(Map<Comparable, Doc> model, String fromField, String toField) {\n    Map<Comparable, Set<Comparable>> id_to_id = new HashMap<Comparable, Set<Comparable>>();\n\n    Map<Comparable, List<Comparable>> value_to_id = invertField(model, toField);\n\n    for (Comparable fromId : model.keySet()) {\n      Doc doc = model.get(fromId);\n      List<Comparable> vals = doc.getValues(fromField);\n      if (vals == null) continue;\n      for (Comparable val : vals) {\n        List<Comparable> toIds = value_to_id.get(val);\n        if (toIds == null) continue;\n        Set<Comparable> ids = id_to_id.get(fromId);\n        if (ids == null) {\n          ids = new HashSet<Comparable>();\n          id_to_id.put(fromId, ids);\n        }\n        for (Comparable toId : toIds)\n          ids.add(toId);\n      }\n    }\n\n    return id_to_id;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00a778ad8ad6c2c04607538d2f36fee001239eef","date":1576657013,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPNoScore#createJoinMap(Map[Comparable,Doc],String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPNoScore#createJoinMap(Map[Comparable,Doc],String,String).mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  Map<Comparable, Set<Comparable>> createJoinMap(Map<Comparable, Doc> model, String fromField, String toField) {\n    Map<Comparable, Set<Comparable>> id_to_id = new HashMap<Comparable, Set<Comparable>>();\n\n    Map<Comparable, List<Comparable>> value_to_id = invertField(model, toField);\n\n    for (Comparable fromId : model.keySet()) {\n      Doc doc = model.get(fromId);\n      List<Comparable> vals = doc.getValues(fromField);\n      if (vals == null) continue;\n      for (Comparable val : vals) {\n        List<Comparable> toIds = value_to_id.get(val);\n        if (toIds == null) continue;\n        Set<Comparable> ids = id_to_id.get(fromId);\n        if (ids == null) {\n          ids = new HashSet<Comparable>();\n          id_to_id.put(fromId, ids);\n        }\n        for (Comparable toId : toIds)\n          ids.add(toId);\n      }\n    }\n\n    return id_to_id;\n  }\n\n","sourceOld":"  Map<Comparable, Set<Comparable>> createJoinMap(Map<Comparable, Doc> model, String fromField, String toField) {\n    Map<Comparable, Set<Comparable>> id_to_id = new HashMap<Comparable, Set<Comparable>>();\n\n    Map<Comparable, List<Comparable>> value_to_id = invertField(model, toField);\n\n    for (Comparable fromId : model.keySet()) {\n      Doc doc = model.get(fromId);\n      List<Comparable> vals = doc.getValues(fromField);\n      if (vals == null) continue;\n      for (Comparable val : vals) {\n        List<Comparable> toIds = value_to_id.get(val);\n        if (toIds == null) continue;\n        Set<Comparable> ids = id_to_id.get(fromId);\n        if (ids == null) {\n          ids = new HashSet<Comparable>();\n          id_to_id.put(fromId, ids);\n        }\n        for (Comparable toId : toIds)\n          ids.add(toId);\n      }\n    }\n\n    return id_to_id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"246314af59d76a47fccc31e9494eefee01ec9c00","date":1576657955,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPNoScore#createJoinMap(Map[Comparable,Doc],String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPNoScore#createJoinMap(Map[Comparable,Doc],String,String).mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  Map<Comparable, Set<Comparable>> createJoinMap(Map<Comparable, Doc> model, String fromField, String toField) {\n    Map<Comparable, Set<Comparable>> id_to_id = new HashMap<Comparable, Set<Comparable>>();\n\n    Map<Comparable, List<Comparable>> value_to_id = invertField(model, toField);\n\n    for (Comparable fromId : model.keySet()) {\n      Doc doc = model.get(fromId);\n      List<Comparable> vals = doc.getValues(fromField);\n      if (vals == null) continue;\n      for (Comparable val : vals) {\n        List<Comparable> toIds = value_to_id.get(val);\n        if (toIds == null) continue;\n        Set<Comparable> ids = id_to_id.get(fromId);\n        if (ids == null) {\n          ids = new HashSet<Comparable>();\n          id_to_id.put(fromId, ids);\n        }\n        for (Comparable toId : toIds)\n          ids.add(toId);\n      }\n    }\n\n    return id_to_id;\n  }\n\n","sourceOld":"  Map<Comparable, Set<Comparable>> createJoinMap(Map<Comparable, Doc> model, String fromField, String toField) {\n    Map<Comparable, Set<Comparable>> id_to_id = new HashMap<Comparable, Set<Comparable>>();\n\n    Map<Comparable, List<Comparable>> value_to_id = invertField(model, toField);\n\n    for (Comparable fromId : model.keySet()) {\n      Doc doc = model.get(fromId);\n      List<Comparable> vals = doc.getValues(fromField);\n      if (vals == null) continue;\n      for (Comparable val : vals) {\n        List<Comparable> toIds = value_to_id.get(val);\n        if (toIds == null) continue;\n        Set<Comparable> ids = id_to_id.get(fromId);\n        if (ids == null) {\n          ids = new HashSet<Comparable>();\n          id_to_id.put(fromId, ids);\n        }\n        for (Comparable toId : toIds)\n          ids.add(toId);\n      }\n    }\n\n    return id_to_id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"246314af59d76a47fccc31e9494eefee01ec9c00":["6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd","00a778ad8ad6c2c04607538d2f36fee001239eef"],"6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"00a778ad8ad6c2c04607538d2f36fee001239eef":["6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["00a778ad8ad6c2c04607538d2f36fee001239eef"]},"commit2Childs":{"246314af59d76a47fccc31e9494eefee01ec9c00":[],"6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd":["246314af59d76a47fccc31e9494eefee01ec9c00","00a778ad8ad6c2c04607538d2f36fee001239eef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd"],"00a778ad8ad6c2c04607538d2f36fee001239eef":["246314af59d76a47fccc31e9494eefee01ec9c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["246314af59d76a47fccc31e9494eefee01ec9c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}