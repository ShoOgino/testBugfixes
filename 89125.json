{"path":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#json(String).mjava","commits":[{"id":"d3e6b016ec9c0f86928264457cd5a4e62864858b","date":1373471675,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#json(String).mjava","pathOld":"/dev/null","sourceNew":"  /** Converts \"test JSON\" and returns standard JSON.\n   *  Currently this only consists of changing unescaped single quotes to double quotes,\n   *  and escaped single quotes to single quotes.\n   *\n   * The primary purpose is to be able to easily embed JSON strings in a JAVA string\n   * with the best readability.\n   *\n   * This transformation is automatically applied to JSON test srings (like assertJQ).\n   */\n  public static String json(String testJSON) {\n    testJSON = nonEscapedSingleQuotePattern.matcher(testJSON).replaceAll(\"\\\"\");\n    testJSON = escapedSingleQuotePattern.matcher(testJSON).replaceAll(\"'\");\n    return testJSON;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#json(String).mjava","pathOld":"/dev/null","sourceNew":"  /** Converts \"test JSON\" and returns standard JSON.\n   *  Currently this only consists of changing unescaped single quotes to double quotes,\n   *  and escaped single quotes to single quotes.\n   *\n   * The primary purpose is to be able to easily embed JSON strings in a JAVA string\n   * with the best readability.\n   *\n   * This transformation is automatically applied to JSON test srings (like assertJQ).\n   */\n  public static String json(String testJSON) {\n    testJSON = nonEscapedSingleQuotePattern.matcher(testJSON).replaceAll(\"\\\"\");\n    testJSON = escapedSingleQuotePattern.matcher(testJSON).replaceAll(\"'\");\n    return testJSON;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#json(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#json(String).mjava","sourceNew":"  /** Converts \"test JSON\" and returns standard JSON.\n   *  Currently this only consists of changing unescaped single quotes to double quotes,\n   *  and escaped single quotes to single quotes.\n   *\n   * The primary purpose is to be able to easily embed JSON strings in a JAVA string\n   * with the best readability.\n   *\n   * This transformation is automatically applied to JSON test srings (like assertJQ).\n   */\n  public static String json(String testJSON) {\n    testJSON = nonEscapedSingleQuotePattern.matcher(testJSON).replaceAll(\"\\\"\");\n    testJSON = escapedSingleQuotePattern.matcher(testJSON).replaceAll(\"'\");\n    return testJSON;\n  }\n\n","sourceOld":"  /** Converts \"test JSON\" and returns standard JSON.\n   *  Currently this only consists of changing unescaped single quotes to double quotes,\n   *  and escaped single quotes to single quotes.\n   *\n   * The primary purpose is to be able to easily embed JSON strings in a JAVA string\n   * with the best readability.\n   *\n   * This transformation is automatically applied to JSON test srings (like assertJQ).\n   */\n  public static String json(String testJSON) {\n    testJSON = nonEscapedSingleQuotePattern.matcher(testJSON).replaceAll(\"\\\"\");\n    testJSON = escapedSingleQuotePattern.matcher(testJSON).replaceAll(\"'\");\n    return testJSON;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#json(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#json(String).mjava","sourceNew":"  /** Converts \"test JSON\" and returns standard JSON.\n   *  Currently this only consists of changing unescaped single quotes to double quotes,\n   *  and escaped single quotes to single quotes.\n   *\n   * The primary purpose is to be able to easily embed JSON strings in a JAVA string\n   * with the best readability.\n   *\n   * This transformation is automatically applied to JSON test srings (like assertJQ).\n   */\n  public static String json(String testJSON) {\n    testJSON = nonEscapedSingleQuotePattern.matcher(testJSON).replaceAll(\"\\\"\");\n    testJSON = escapedSingleQuotePattern.matcher(testJSON).replaceAll(\"'\");\n    return testJSON;\n  }\n\n","sourceOld":"  /** Converts \"test JSON\" and returns standard JSON.\n   *  Currently this only consists of changing unescaped single quotes to double quotes,\n   *  and escaped single quotes to single quotes.\n   *\n   * The primary purpose is to be able to easily embed JSON strings in a JAVA string\n   * with the best readability.\n   *\n   * This transformation is automatically applied to JSON test srings (like assertJQ).\n   */\n  public static String json(String testJSON) {\n    testJSON = nonEscapedSingleQuotePattern.matcher(testJSON).replaceAll(\"\\\"\");\n    testJSON = escapedSingleQuotePattern.matcher(testJSON).replaceAll(\"'\");\n    return testJSON;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0127d456461e4d0abe73bede6f4920d9b9dcbe85","date":1426164450,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#json(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#json(String).mjava","sourceNew":"  /** Converts \"test JSON\" strings into JSON parseable by our JSON parser.\n   *  For example, this method changed single quoted strings into double quoted strings before\n   *  the parser could natively handle them.\n   *\n   * This transformation is automatically applied to JSON test srings (like assertJQ).\n   */\n  public static String json(String testJSON) {\n    return testJSON;\n  }\n\n","sourceOld":"  /** Converts \"test JSON\" and returns standard JSON.\n   *  Currently this only consists of changing unescaped single quotes to double quotes,\n   *  and escaped single quotes to single quotes.\n   *\n   * The primary purpose is to be able to easily embed JSON strings in a JAVA string\n   * with the best readability.\n   *\n   * This transformation is automatically applied to JSON test srings (like assertJQ).\n   */\n  public static String json(String testJSON) {\n    testJSON = nonEscapedSingleQuotePattern.matcher(testJSON).replaceAll(\"\\\"\");\n    testJSON = escapedSingleQuotePattern.matcher(testJSON).replaceAll(\"'\");\n    return testJSON;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#json(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#json(String).mjava","sourceNew":"  /** Converts \"test JSON\" strings into JSON parseable by our JSON parser.\n   *  For example, this method changed single quoted strings into double quoted strings before\n   *  the parser could natively handle them.\n   *\n   * This transformation is automatically applied to JSON test srings (like assertJQ).\n   */\n  public static String json(String testJSON) {\n    return testJSON;\n  }\n\n","sourceOld":"  /** Converts \"test JSON\" and returns standard JSON.\n   *  Currently this only consists of changing unescaped single quotes to double quotes,\n   *  and escaped single quotes to single quotes.\n   *\n   * The primary purpose is to be able to easily embed JSON strings in a JAVA string\n   * with the best readability.\n   *\n   * This transformation is automatically applied to JSON test srings (like assertJQ).\n   */\n  public static String json(String testJSON) {\n    testJSON = nonEscapedSingleQuotePattern.matcher(testJSON).replaceAll(\"\\\"\");\n    testJSON = escapedSingleQuotePattern.matcher(testJSON).replaceAll(\"'\");\n    return testJSON;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8998ebc47a334c61dfed58318c481a7d84e3eaeb","date":1560839882,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#json(String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#json(String).mjava","sourceNew":"  /** Converts \"test JSON\" strings into JSON parseable by our JSON parser.\n   *  For example, this method changed single quoted strings into double quoted strings before\n   *  the parser could natively handle them.\n   *\n   * This transformation is automatically applied to JSON test strings (like assertJQ).\n   */\n  public static String json(String testJSON) {\n    return testJSON;\n  }\n\n","sourceOld":"  /** Converts \"test JSON\" strings into JSON parseable by our JSON parser.\n   *  For example, this method changed single quoted strings into double quoted strings before\n   *  the parser could natively handle them.\n   *\n   * This transformation is automatically applied to JSON test srings (like assertJQ).\n   */\n  public static String json(String testJSON) {\n    return testJSON;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["19275ba31e621f6da1b83bf13af75233876fd3d4","0127d456461e4d0abe73bede6f4920d9b9dcbe85"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["37a0f60745e53927c4c876cfe5b5a58170f0646c","19275ba31e621f6da1b83bf13af75233876fd3d4"],"d3e6b016ec9c0f86928264457cd5a4e62864858b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d3e6b016ec9c0f86928264457cd5a4e62864858b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8998ebc47a334c61dfed58318c481a7d84e3eaeb":["0127d456461e4d0abe73bede6f4920d9b9dcbe85"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["d3e6b016ec9c0f86928264457cd5a4e62864858b"],"0127d456461e4d0abe73bede6f4920d9b9dcbe85":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8998ebc47a334c61dfed58318c481a7d84e3eaeb"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"d3e6b016ec9c0f86928264457cd5a4e62864858b":["37a0f60745e53927c4c876cfe5b5a58170f0646c","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3e6b016ec9c0f86928264457cd5a4e62864858b","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","0127d456461e4d0abe73bede6f4920d9b9dcbe85"],"8998ebc47a334c61dfed58318c481a7d84e3eaeb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0127d456461e4d0abe73bede6f4920d9b9dcbe85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","8998ebc47a334c61dfed58318c481a7d84e3eaeb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}