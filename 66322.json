{"path":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#verifyUnPruned(int,FST[T]).mjava","commits":[{"id":"d4769bdea5a853f1841c485bc1fd9d79cb7022fc","date":1292168168,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#verifyUnPruned(int,FST[T]).mjava","pathOld":"/dev/null","sourceNew":"    // FST is complete\n    private void verifyUnPruned(int inputMode, FST<T> fst) throws IOException {\n\n      if (pairs.size() == 0) {\n        assertNull(fst);\n        return;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: now verify \" + pairs.size() + \" terms\");\n        for(InputOutput<T> pair : pairs) {\n          assertNotNull(pair);\n          assertNotNull(pair.input);\n          assertNotNull(pair.output);\n          System.out.println(\"  \" + inputToString(inputMode, pair.input) + \": \" + outputs.outputToString(pair.output));\n        }\n      }\n\n      assertNotNull(fst);\n\n      // make sure all words are accepted\n      {\n        IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n        for(InputOutput<T> pair : pairs) {\n          IntsRef term = pair.input;\n          Object output = run(fst, term, null);\n\n          assertNotNull(\"term \" + inputToString(inputMode, term) + \" is not accepted\", output);\n          assertEquals(output, pair.output);\n\n          // verify enum's next\n          IntsRefFSTEnum.InputOutput<T> t = fstEnum.next();\n\n          assertEquals(term, t.input);\n          assertEquals(pair.output, t.output);\n        }\n        assertNull(fstEnum.next());\n      }\n\n      final Map<IntsRef,T> termsMap = new HashMap<IntsRef,T>();\n      for(InputOutput<T> pair : pairs) {\n        termsMap.put(pair.input, pair.output);\n      }\n\n      // find random matching word and make sure it's valid\n      final IntsRef scratch = new IntsRef(10);\n      for(int iter=0;iter<500*RANDOM_MULTIPLIER;iter++) {\n        T output = randomAcceptedWord(fst, scratch);\n        assertTrue(\"accepted word \" + inputToString(inputMode, scratch) + \" is not valid\", termsMap.containsKey(scratch));\n        assertEquals(termsMap.get(scratch), output);\n      }\n    \n      // test single IntsRefFSTEnum.advance:\n      //System.out.println(\"TEST: verify advance\");\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        final IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n        if (random.nextBoolean()) {\n          // seek to term that doesn't exist:\n          while(true) {\n            final IntsRef term = toIntsRef(getRandomString(), inputMode);\n            int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n            if (pos < 0) {\n              pos = -(pos+1);\n              // ok doesn't exist\n              //System.out.println(\"  seek \" + inputToString(inputMode, term));\n              final IntsRefFSTEnum.InputOutput<T> seekResult = fstEnum.advance(term);\n              if (pos < pairs.size()) {\n                //System.out.println(\"    got \" + inputToString(inputMode,seekResult.input) + \" output=\" + fst.outputs.outputToString(seekResult.output));\n                assertEquals(pairs.get(pos).input, seekResult.input);\n                assertEquals(pairs.get(pos).output, seekResult.output);\n              } else {\n                // seeked beyond end\n                //System.out.println(\"seek=\" + seekTerm);\n                assertNull(\"expected null but got \" + (seekResult==null ? \"null\" : inputToString(inputMode, seekResult.input)), seekResult);\n              }\n\n              break;\n            }\n          }\n        } else {\n          // seek to term that does exist:\n          InputOutput pair = pairs.get(random.nextInt(pairs.size()));\n          //System.out.println(\"  seek \" + inputToString(inputMode, pair.input));\n          final IntsRefFSTEnum.InputOutput<T> seekResult = fstEnum.advance(pair.input);\n          assertEquals(pair.input, seekResult.input);\n          assertEquals(pair.output, seekResult.output);\n        }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: mixed next/advance\");\n      }\n\n      // test mixed next/advance\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter \" + iter);\n        }\n        final IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n        int upto = -1;\n        while(true) {\n          boolean isDone = false;\n          if (upto == pairs.size()-1 || random.nextBoolean()) {\n            // next\n            upto++;\n            if (VERBOSE) {\n              System.out.println(\"  do next\");\n            }\n            isDone = fstEnum.next() == null;\n          } else if (upto != -1 && upto < 0.75 * pairs.size() && random.nextBoolean()) {\n            int attempt = 0;\n            for(;attempt<10;attempt++) {\n              IntsRef term = toIntsRef(getRandomString(), inputMode);\n              if (!termsMap.containsKey(term) && term.compareTo(pairs.get(upto).input) > 0) {\n                if (VERBOSE) {\n                  System.out.println(\"  do non-exist advance(\" + inputToString(inputMode, term) + \"]\");\n                }\n                int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n                assert pos < 0;\n                upto = -(pos+1);\n                isDone = fstEnum.advance(term) == null;\n                break;\n              }\n            }\n            if (attempt == 10) {\n              continue;\n            }\n            \n          } else {\n            final int inc = random.nextInt(pairs.size() - upto - 1);\n            upto += inc;\n            if (upto == -1) {\n              upto = 0;\n            }\n\n            if (VERBOSE) {\n              System.out.println(\"  do advance(\" + inputToString(inputMode, pairs.get(upto).input) + \"]\");\n            }\n            isDone = fstEnum.advance(pairs.get(upto).input) == null;\n          }\n          if (VERBOSE) {\n            if (!isDone) {\n              System.out.println(\"    got \" + inputToString(inputMode, fstEnum.current().input));\n            } else {\n              System.out.println(\"    got null\");\n            }\n          }\n\n          if (upto == pairs.size()) {\n            assertTrue(isDone);\n            break;\n          } else {\n            assertFalse(isDone);\n            assertEquals(pairs.get(upto).input, fstEnum.current().input);\n            assertEquals(pairs.get(upto).output, fstEnum.current().output);\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#verifyUnPruned(int,FST[T]).mjava","pathOld":"/dev/null","sourceNew":"    // FST is complete\n    private void verifyUnPruned(int inputMode, FST<T> fst) throws IOException {\n\n      if (pairs.size() == 0) {\n        assertNull(fst);\n        return;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: now verify \" + pairs.size() + \" terms\");\n        for(InputOutput<T> pair : pairs) {\n          assertNotNull(pair);\n          assertNotNull(pair.input);\n          assertNotNull(pair.output);\n          System.out.println(\"  \" + inputToString(inputMode, pair.input) + \": \" + outputs.outputToString(pair.output));\n        }\n      }\n\n      assertNotNull(fst);\n\n      // make sure all words are accepted\n      {\n        IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n        for(InputOutput<T> pair : pairs) {\n          IntsRef term = pair.input;\n          Object output = run(fst, term, null);\n\n          assertNotNull(\"term \" + inputToString(inputMode, term) + \" is not accepted\", output);\n          assertEquals(output, pair.output);\n\n          // verify enum's next\n          IntsRefFSTEnum.InputOutput<T> t = fstEnum.next();\n\n          assertEquals(term, t.input);\n          assertEquals(pair.output, t.output);\n        }\n        assertNull(fstEnum.next());\n      }\n\n      final Map<IntsRef,T> termsMap = new HashMap<IntsRef,T>();\n      for(InputOutput<T> pair : pairs) {\n        termsMap.put(pair.input, pair.output);\n      }\n\n      // find random matching word and make sure it's valid\n      final IntsRef scratch = new IntsRef(10);\n      for(int iter=0;iter<500*RANDOM_MULTIPLIER;iter++) {\n        T output = randomAcceptedWord(fst, scratch);\n        assertTrue(\"accepted word \" + inputToString(inputMode, scratch) + \" is not valid\", termsMap.containsKey(scratch));\n        assertEquals(termsMap.get(scratch), output);\n      }\n    \n      // test single IntsRefFSTEnum.advance:\n      //System.out.println(\"TEST: verify advance\");\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        final IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n        if (random.nextBoolean()) {\n          // seek to term that doesn't exist:\n          while(true) {\n            final IntsRef term = toIntsRef(getRandomString(), inputMode);\n            int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n            if (pos < 0) {\n              pos = -(pos+1);\n              // ok doesn't exist\n              //System.out.println(\"  seek \" + inputToString(inputMode, term));\n              final IntsRefFSTEnum.InputOutput<T> seekResult = fstEnum.advance(term);\n              if (pos < pairs.size()) {\n                //System.out.println(\"    got \" + inputToString(inputMode,seekResult.input) + \" output=\" + fst.outputs.outputToString(seekResult.output));\n                assertEquals(pairs.get(pos).input, seekResult.input);\n                assertEquals(pairs.get(pos).output, seekResult.output);\n              } else {\n                // seeked beyond end\n                //System.out.println(\"seek=\" + seekTerm);\n                assertNull(\"expected null but got \" + (seekResult==null ? \"null\" : inputToString(inputMode, seekResult.input)), seekResult);\n              }\n\n              break;\n            }\n          }\n        } else {\n          // seek to term that does exist:\n          InputOutput pair = pairs.get(random.nextInt(pairs.size()));\n          //System.out.println(\"  seek \" + inputToString(inputMode, pair.input));\n          final IntsRefFSTEnum.InputOutput<T> seekResult = fstEnum.advance(pair.input);\n          assertEquals(pair.input, seekResult.input);\n          assertEquals(pair.output, seekResult.output);\n        }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: mixed next/advance\");\n      }\n\n      // test mixed next/advance\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter \" + iter);\n        }\n        final IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n        int upto = -1;\n        while(true) {\n          boolean isDone = false;\n          if (upto == pairs.size()-1 || random.nextBoolean()) {\n            // next\n            upto++;\n            if (VERBOSE) {\n              System.out.println(\"  do next\");\n            }\n            isDone = fstEnum.next() == null;\n          } else if (upto != -1 && upto < 0.75 * pairs.size() && random.nextBoolean()) {\n            int attempt = 0;\n            for(;attempt<10;attempt++) {\n              IntsRef term = toIntsRef(getRandomString(), inputMode);\n              if (!termsMap.containsKey(term) && term.compareTo(pairs.get(upto).input) > 0) {\n                if (VERBOSE) {\n                  System.out.println(\"  do non-exist advance(\" + inputToString(inputMode, term) + \"]\");\n                }\n                int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n                assert pos < 0;\n                upto = -(pos+1);\n                isDone = fstEnum.advance(term) == null;\n                break;\n              }\n            }\n            if (attempt == 10) {\n              continue;\n            }\n            \n          } else {\n            final int inc = random.nextInt(pairs.size() - upto - 1);\n            upto += inc;\n            if (upto == -1) {\n              upto = 0;\n            }\n\n            if (VERBOSE) {\n              System.out.println(\"  do advance(\" + inputToString(inputMode, pairs.get(upto).input) + \"]\");\n            }\n            isDone = fstEnum.advance(pairs.get(upto).input) == null;\n          }\n          if (VERBOSE) {\n            if (!isDone) {\n              System.out.println(\"    got \" + inputToString(inputMode, fstEnum.current().input));\n            } else {\n              System.out.println(\"    got null\");\n            }\n          }\n\n          if (upto == pairs.size()) {\n            assertTrue(isDone);\n            break;\n          } else {\n            assertFalse(isDone);\n            assertEquals(pairs.get(upto).input, fstEnum.current().input);\n            assertEquals(pairs.get(upto).output, fstEnum.current().output);\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#verifyUnPruned(int,FST[T]).mjava","pathOld":"/dev/null","sourceNew":"    // FST is complete\n    private void verifyUnPruned(int inputMode, FST<T> fst) throws IOException {\n\n      if (pairs.size() == 0) {\n        assertNull(fst);\n        return;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: now verify \" + pairs.size() + \" terms\");\n        for(InputOutput<T> pair : pairs) {\n          assertNotNull(pair);\n          assertNotNull(pair.input);\n          assertNotNull(pair.output);\n          System.out.println(\"  \" + inputToString(inputMode, pair.input) + \": \" + outputs.outputToString(pair.output));\n        }\n      }\n\n      assertNotNull(fst);\n\n      // make sure all words are accepted\n      {\n        IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n        for(InputOutput<T> pair : pairs) {\n          IntsRef term = pair.input;\n          Object output = run(fst, term, null);\n\n          assertNotNull(\"term \" + inputToString(inputMode, term) + \" is not accepted\", output);\n          assertEquals(output, pair.output);\n\n          // verify enum's next\n          IntsRefFSTEnum.InputOutput<T> t = fstEnum.next();\n\n          assertEquals(term, t.input);\n          assertEquals(pair.output, t.output);\n        }\n        assertNull(fstEnum.next());\n      }\n\n      final Map<IntsRef,T> termsMap = new HashMap<IntsRef,T>();\n      for(InputOutput<T> pair : pairs) {\n        termsMap.put(pair.input, pair.output);\n      }\n\n      // find random matching word and make sure it's valid\n      final IntsRef scratch = new IntsRef(10);\n      for(int iter=0;iter<500*RANDOM_MULTIPLIER;iter++) {\n        T output = randomAcceptedWord(fst, scratch);\n        assertTrue(\"accepted word \" + inputToString(inputMode, scratch) + \" is not valid\", termsMap.containsKey(scratch));\n        assertEquals(termsMap.get(scratch), output);\n      }\n    \n      // test single IntsRefFSTEnum.advance:\n      //System.out.println(\"TEST: verify advance\");\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        final IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n        if (random.nextBoolean()) {\n          // seek to term that doesn't exist:\n          while(true) {\n            final IntsRef term = toIntsRef(getRandomString(), inputMode);\n            int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n            if (pos < 0) {\n              pos = -(pos+1);\n              // ok doesn't exist\n              //System.out.println(\"  seek \" + inputToString(inputMode, term));\n              final IntsRefFSTEnum.InputOutput<T> seekResult = fstEnum.advance(term);\n              if (pos < pairs.size()) {\n                //System.out.println(\"    got \" + inputToString(inputMode,seekResult.input) + \" output=\" + fst.outputs.outputToString(seekResult.output));\n                assertEquals(pairs.get(pos).input, seekResult.input);\n                assertEquals(pairs.get(pos).output, seekResult.output);\n              } else {\n                // seeked beyond end\n                //System.out.println(\"seek=\" + seekTerm);\n                assertNull(\"expected null but got \" + (seekResult==null ? \"null\" : inputToString(inputMode, seekResult.input)), seekResult);\n              }\n\n              break;\n            }\n          }\n        } else {\n          // seek to term that does exist:\n          InputOutput pair = pairs.get(random.nextInt(pairs.size()));\n          //System.out.println(\"  seek \" + inputToString(inputMode, pair.input));\n          final IntsRefFSTEnum.InputOutput<T> seekResult = fstEnum.advance(pair.input);\n          assertEquals(pair.input, seekResult.input);\n          assertEquals(pair.output, seekResult.output);\n        }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: mixed next/advance\");\n      }\n\n      // test mixed next/advance\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter \" + iter);\n        }\n        final IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n        int upto = -1;\n        while(true) {\n          boolean isDone = false;\n          if (upto == pairs.size()-1 || random.nextBoolean()) {\n            // next\n            upto++;\n            if (VERBOSE) {\n              System.out.println(\"  do next\");\n            }\n            isDone = fstEnum.next() == null;\n          } else if (upto != -1 && upto < 0.75 * pairs.size() && random.nextBoolean()) {\n            int attempt = 0;\n            for(;attempt<10;attempt++) {\n              IntsRef term = toIntsRef(getRandomString(), inputMode);\n              if (!termsMap.containsKey(term) && term.compareTo(pairs.get(upto).input) > 0) {\n                if (VERBOSE) {\n                  System.out.println(\"  do non-exist advance(\" + inputToString(inputMode, term) + \"]\");\n                }\n                int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n                assert pos < 0;\n                upto = -(pos+1);\n                isDone = fstEnum.advance(term) == null;\n                break;\n              }\n            }\n            if (attempt == 10) {\n              continue;\n            }\n            \n          } else {\n            final int inc = random.nextInt(pairs.size() - upto - 1);\n            upto += inc;\n            if (upto == -1) {\n              upto = 0;\n            }\n\n            if (VERBOSE) {\n              System.out.println(\"  do advance(\" + inputToString(inputMode, pairs.get(upto).input) + \"]\");\n            }\n            isDone = fstEnum.advance(pairs.get(upto).input) == null;\n          }\n          if (VERBOSE) {\n            if (!isDone) {\n              System.out.println(\"    got \" + inputToString(inputMode, fstEnum.current().input));\n            } else {\n              System.out.println(\"    got null\");\n            }\n          }\n\n          if (upto == pairs.size()) {\n            assertTrue(isDone);\n            break;\n          } else {\n            assertFalse(isDone);\n            assertEquals(pairs.get(upto).input, fstEnum.current().input);\n            assertEquals(pairs.get(upto).output, fstEnum.current().output);\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#verifyUnPruned(int,FST[T]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#verifyUnPruned(int,FST[T]).mjava","sourceNew":"    // FST is complete\n    private void verifyUnPruned(int inputMode, FST<T> fst) throws IOException {\n\n      if (pairs.size() == 0) {\n        assertNull(fst);\n        return;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: now verify \" + pairs.size() + \" terms\");\n        for(InputOutput<T> pair : pairs) {\n          assertNotNull(pair);\n          assertNotNull(pair.input);\n          assertNotNull(pair.output);\n          System.out.println(\"  \" + inputToString(inputMode, pair.input) + \": \" + outputs.outputToString(pair.output));\n        }\n      }\n\n      assertNotNull(fst);\n\n      // visit valid paris in order -- make sure all words\n      // are accepted, and FSTEnum's next() steps through\n      // them correctly\n      if (VERBOSE) {\n        System.out.println(\"TEST: check valid terms/next()\");\n      }\n      {\n        IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n        for(InputOutput<T> pair : pairs) {\n          IntsRef term = pair.input;\n          if (VERBOSE) {\n            System.out.println(\"TEST: check term=\" + inputToString(inputMode, term) + \" output=\" + fst.outputs.outputToString(pair.output));\n          }\n          Object output = run(fst, term, null);\n\n          assertNotNull(\"term \" + inputToString(inputMode, term) + \" is not accepted\", output);\n          assertEquals(output, pair.output);\n\n          // verify enum's next\n          IntsRefFSTEnum.InputOutput<T> t = fstEnum.next();\n          assertNotNull(t);\n          assertEquals(\"expected input=\" + inputToString(inputMode, term) + \" but fstEnum returned \" + inputToString(inputMode, t.input), term, t.input);\n          assertEquals(pair.output, t.output);\n        }\n        assertNull(fstEnum.next());\n      }\n\n      final Map<IntsRef,T> termsMap = new HashMap<IntsRef,T>();\n      for(InputOutput<T> pair : pairs) {\n        termsMap.put(pair.input, pair.output);\n      }\n\n      // find random matching word and make sure it's valid\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify random accepted terms\");\n      }\n      final IntsRef scratch = new IntsRef(10);\n      for(int iter=0;iter<500*RANDOM_MULTIPLIER;iter++) {\n        T output = randomAcceptedWord(fst, scratch);\n        assertTrue(\"accepted word \" + inputToString(inputMode, scratch) + \" is not valid\", termsMap.containsKey(scratch));\n        assertEquals(termsMap.get(scratch), output);\n      }\n    \n      // test IntsRefFSTEnum.seek:\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify seek\");\n      }\n      IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        if (random.nextBoolean()) {\n          // seek to term that doesn't exist:\n          while(true) {\n            final IntsRef term = toIntsRef(getRandomString(), inputMode);\n            int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n            if (pos < 0) {\n              pos = -(pos+1);\n              // ok doesn't exist\n              //System.out.println(\"  seek \" + inputToString(inputMode, term));\n              final IntsRefFSTEnum.InputOutput<T> seekResult;\n              if (random.nextBoolean()) {\n                if (VERBOSE) {\n                  System.out.println(\"  do non-exist seekFloor term=\" + inputToString(inputMode, term));\n                }\n                seekResult = fstEnum.seekFloor(term);\n                pos--;\n              } else {\n                if (VERBOSE) {\n                  System.out.println(\"  do non-exist seekCeil term=\" + inputToString(inputMode, term));\n                }\n                seekResult = fstEnum.seekCeil(term);\n              }\n\n              if (pos != -1 && pos < pairs.size()) {\n                //System.out.println(\"    got \" + inputToString(inputMode,seekResult.input) + \" output=\" + fst.outputs.outputToString(seekResult.output));\n                assertNotNull(\"got null but expected term=\" + inputToString(inputMode, pairs.get(pos).input), seekResult);\n                if (VERBOSE) {\n                  System.out.println(\"    got \" + inputToString(inputMode, seekResult.input));\n                }\n                assertEquals(\"expected \" + inputToString(inputMode, pairs.get(pos).input) + \" but got \" + inputToString(inputMode, seekResult.input), pairs.get(pos).input, seekResult.input);\n                assertEquals(pairs.get(pos).output, seekResult.output);\n              } else {\n                // seeked before start or beyond end\n                //System.out.println(\"seek=\" + seekTerm);\n                assertNull(\"expected null but got \" + (seekResult==null ? \"null\" : inputToString(inputMode, seekResult.input)), seekResult);\n                if (VERBOSE) {\n                  System.out.println(\"    got null\");\n                }\n              }\n\n              break;\n            }\n          }\n        } else {\n          // seek to term that does exist:\n          InputOutput<T> pair = pairs.get(random.nextInt(pairs.size()));\n          final IntsRefFSTEnum.InputOutput<T> seekResult;\n          if (random.nextBoolean()) {\n            if (VERBOSE) {\n              System.out.println(\"  do exists seekFloor \" + inputToString(inputMode, pair.input));\n            }\n            seekResult = fstEnum.seekFloor(pair.input);\n          } else {\n            if (VERBOSE) {\n              System.out.println(\"  do exists seekCeil \" + inputToString(inputMode, pair.input));\n            }\n            seekResult = fstEnum.seekCeil(pair.input);\n          }\n          assertNotNull(seekResult);\n          assertEquals(\"got \" + inputToString(inputMode, seekResult.input) + \" but expected \" + inputToString(inputMode, pair.input), pair.input, seekResult.input);\n          assertEquals(pair.output, seekResult.output);\n        }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: mixed next/seek\");\n      }\n\n      // test mixed next/seek\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter \" + iter);\n        }\n        // reset:\n        fstEnum = new IntsRefFSTEnum<T>(fst);\n        int upto = -1;\n        while(true) {\n          boolean isDone = false;\n          if (upto == pairs.size()-1 || random.nextBoolean()) {\n            // next\n            upto++;\n            if (VERBOSE) {\n              System.out.println(\"  do next\");\n            }\n            isDone = fstEnum.next() == null;\n          } else if (upto != -1 && upto < 0.75 * pairs.size() && random.nextBoolean()) {\n            int attempt = 0;\n            for(;attempt<10;attempt++) {\n              IntsRef term = toIntsRef(getRandomString(), inputMode);\n              if (!termsMap.containsKey(term) && term.compareTo(pairs.get(upto).input) > 0) {\n                int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n                assert pos < 0;\n                upto = -(pos+1);\n\n                if (random.nextBoolean()) {\n                  upto--;\n                  assertTrue(upto != -1);\n                  if (VERBOSE) {\n                    System.out.println(\"  do non-exist seekFloor(\" + inputToString(inputMode, term) + \")\");\n                  }\n                  isDone = fstEnum.seekFloor(term) == null;\n                } else {\n                  if (VERBOSE) {\n                    System.out.println(\"  do non-exist seekCeil(\" + inputToString(inputMode, term) + \")\");\n                  }\n                  isDone = fstEnum.seekCeil(term) == null;\n                }\n\n                break;\n              }\n            }\n            if (attempt == 10) {\n              continue;\n            }\n            \n          } else {\n            final int inc = random.nextInt(pairs.size() - upto - 1);\n            upto += inc;\n            if (upto == -1) {\n              upto = 0;\n            }\n\n            if (random.nextBoolean()) {\n              if (VERBOSE) {\n                System.out.println(\"  do advanceCeil(\" + inputToString(inputMode, pairs.get(upto).input) + \")\");\n              }\n              isDone = fstEnum.seekCeil(pairs.get(upto).input) == null;\n            } else {\n              if (VERBOSE) {\n                System.out.println(\"  do advanceFloor(\" + inputToString(inputMode, pairs.get(upto).input) + \")\");\n              }\n              isDone = fstEnum.seekFloor(pairs.get(upto).input) == null;\n            }\n          }\n          if (VERBOSE) {\n            if (!isDone) {\n              System.out.println(\"    got \" + inputToString(inputMode, fstEnum.current().input));\n            } else {\n              System.out.println(\"    got null\");\n            }\n          }\n\n          if (upto == pairs.size()) {\n            assertTrue(isDone);\n            break;\n          } else {\n            assertFalse(isDone);\n            assertEquals(pairs.get(upto).input, fstEnum.current().input);\n            assertEquals(pairs.get(upto).output, fstEnum.current().output);\n\n            /*\n            if (upto < pairs.size()-1) {\n              int tryCount = 0;\n              while(tryCount < 10) {\n                final IntsRef t = toIntsRef(getRandomString(), inputMode);\n                if (pairs.get(upto).input.compareTo(t) < 0) {\n                  final boolean expected = t.compareTo(pairs.get(upto+1).input) < 0;\n                  if (VERBOSE) {\n                    System.out.println(\"TEST: call beforeNext(\" + inputToString(inputMode, t) + \"); current=\" + inputToString(inputMode, pairs.get(upto).input) + \" next=\" + inputToString(inputMode, pairs.get(upto+1).input) + \" expected=\" + expected);\n                  }\n                  assertEquals(expected, fstEnum.beforeNext(t));\n                  break;\n                }\n                tryCount++;\n              }\n            }\n            */\n          }\n        }\n      }\n    }\n\n","sourceOld":"    // FST is complete\n    private void verifyUnPruned(int inputMode, FST<T> fst) throws IOException {\n\n      if (pairs.size() == 0) {\n        assertNull(fst);\n        return;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: now verify \" + pairs.size() + \" terms\");\n        for(InputOutput<T> pair : pairs) {\n          assertNotNull(pair);\n          assertNotNull(pair.input);\n          assertNotNull(pair.output);\n          System.out.println(\"  \" + inputToString(inputMode, pair.input) + \": \" + outputs.outputToString(pair.output));\n        }\n      }\n\n      assertNotNull(fst);\n\n      // make sure all words are accepted\n      {\n        IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n        for(InputOutput<T> pair : pairs) {\n          IntsRef term = pair.input;\n          Object output = run(fst, term, null);\n\n          assertNotNull(\"term \" + inputToString(inputMode, term) + \" is not accepted\", output);\n          assertEquals(output, pair.output);\n\n          // verify enum's next\n          IntsRefFSTEnum.InputOutput<T> t = fstEnum.next();\n\n          assertEquals(term, t.input);\n          assertEquals(pair.output, t.output);\n        }\n        assertNull(fstEnum.next());\n      }\n\n      final Map<IntsRef,T> termsMap = new HashMap<IntsRef,T>();\n      for(InputOutput<T> pair : pairs) {\n        termsMap.put(pair.input, pair.output);\n      }\n\n      // find random matching word and make sure it's valid\n      final IntsRef scratch = new IntsRef(10);\n      for(int iter=0;iter<500*RANDOM_MULTIPLIER;iter++) {\n        T output = randomAcceptedWord(fst, scratch);\n        assertTrue(\"accepted word \" + inputToString(inputMode, scratch) + \" is not valid\", termsMap.containsKey(scratch));\n        assertEquals(termsMap.get(scratch), output);\n      }\n    \n      // test single IntsRefFSTEnum.advance:\n      //System.out.println(\"TEST: verify advance\");\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        final IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n        if (random.nextBoolean()) {\n          // seek to term that doesn't exist:\n          while(true) {\n            final IntsRef term = toIntsRef(getRandomString(), inputMode);\n            int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n            if (pos < 0) {\n              pos = -(pos+1);\n              // ok doesn't exist\n              //System.out.println(\"  seek \" + inputToString(inputMode, term));\n              final IntsRefFSTEnum.InputOutput<T> seekResult = fstEnum.advance(term);\n              if (pos < pairs.size()) {\n                //System.out.println(\"    got \" + inputToString(inputMode,seekResult.input) + \" output=\" + fst.outputs.outputToString(seekResult.output));\n                assertEquals(pairs.get(pos).input, seekResult.input);\n                assertEquals(pairs.get(pos).output, seekResult.output);\n              } else {\n                // seeked beyond end\n                //System.out.println(\"seek=\" + seekTerm);\n                assertNull(\"expected null but got \" + (seekResult==null ? \"null\" : inputToString(inputMode, seekResult.input)), seekResult);\n              }\n\n              break;\n            }\n          }\n        } else {\n          // seek to term that does exist:\n          InputOutput pair = pairs.get(random.nextInt(pairs.size()));\n          //System.out.println(\"  seek \" + inputToString(inputMode, pair.input));\n          final IntsRefFSTEnum.InputOutput<T> seekResult = fstEnum.advance(pair.input);\n          assertEquals(pair.input, seekResult.input);\n          assertEquals(pair.output, seekResult.output);\n        }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: mixed next/advance\");\n      }\n\n      // test mixed next/advance\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter \" + iter);\n        }\n        final IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n        int upto = -1;\n        while(true) {\n          boolean isDone = false;\n          if (upto == pairs.size()-1 || random.nextBoolean()) {\n            // next\n            upto++;\n            if (VERBOSE) {\n              System.out.println(\"  do next\");\n            }\n            isDone = fstEnum.next() == null;\n          } else if (upto != -1 && upto < 0.75 * pairs.size() && random.nextBoolean()) {\n            int attempt = 0;\n            for(;attempt<10;attempt++) {\n              IntsRef term = toIntsRef(getRandomString(), inputMode);\n              if (!termsMap.containsKey(term) && term.compareTo(pairs.get(upto).input) > 0) {\n                if (VERBOSE) {\n                  System.out.println(\"  do non-exist advance(\" + inputToString(inputMode, term) + \"]\");\n                }\n                int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n                assert pos < 0;\n                upto = -(pos+1);\n                isDone = fstEnum.advance(term) == null;\n                break;\n              }\n            }\n            if (attempt == 10) {\n              continue;\n            }\n            \n          } else {\n            final int inc = random.nextInt(pairs.size() - upto - 1);\n            upto += inc;\n            if (upto == -1) {\n              upto = 0;\n            }\n\n            if (VERBOSE) {\n              System.out.println(\"  do advance(\" + inputToString(inputMode, pairs.get(upto).input) + \"]\");\n            }\n            isDone = fstEnum.advance(pairs.get(upto).input) == null;\n          }\n          if (VERBOSE) {\n            if (!isDone) {\n              System.out.println(\"    got \" + inputToString(inputMode, fstEnum.current().input));\n            } else {\n              System.out.println(\"    got null\");\n            }\n          }\n\n          if (upto == pairs.size()) {\n            assertTrue(isDone);\n            break;\n          } else {\n            assertFalse(isDone);\n            assertEquals(pairs.get(upto).input, fstEnum.current().input);\n            assertEquals(pairs.get(upto).output, fstEnum.current().output);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":["0dbc7493b4f3e9c8bfa60028d6a4d82e2e9f0b67","0dbc7493b4f3e9c8bfa60028d6a4d82e2e9f0b67","0dbc7493b4f3e9c8bfa60028d6a4d82e2e9f0b67"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#verifyUnPruned(int,FST[T]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#verifyUnPruned(int,FST[T]).mjava","sourceNew":"    // FST is complete\n    private void verifyUnPruned(int inputMode, FST<T> fst) throws IOException {\n\n      if (pairs.size() == 0) {\n        assertNull(fst);\n        return;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: now verify \" + pairs.size() + \" terms\");\n        for(InputOutput<T> pair : pairs) {\n          assertNotNull(pair);\n          assertNotNull(pair.input);\n          assertNotNull(pair.output);\n          System.out.println(\"  \" + inputToString(inputMode, pair.input) + \": \" + outputs.outputToString(pair.output));\n        }\n      }\n\n      assertNotNull(fst);\n\n      // visit valid paris in order -- make sure all words\n      // are accepted, and FSTEnum's next() steps through\n      // them correctly\n      if (VERBOSE) {\n        System.out.println(\"TEST: check valid terms/next()\");\n      }\n      {\n        IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n        for(InputOutput<T> pair : pairs) {\n          IntsRef term = pair.input;\n          if (VERBOSE) {\n            System.out.println(\"TEST: check term=\" + inputToString(inputMode, term) + \" output=\" + fst.outputs.outputToString(pair.output));\n          }\n          Object output = run(fst, term, null);\n\n          assertNotNull(\"term \" + inputToString(inputMode, term) + \" is not accepted\", output);\n          assertEquals(output, pair.output);\n\n          // verify enum's next\n          IntsRefFSTEnum.InputOutput<T> t = fstEnum.next();\n          assertNotNull(t);\n          assertEquals(\"expected input=\" + inputToString(inputMode, term) + \" but fstEnum returned \" + inputToString(inputMode, t.input), term, t.input);\n          assertEquals(pair.output, t.output);\n        }\n        assertNull(fstEnum.next());\n      }\n\n      final Map<IntsRef,T> termsMap = new HashMap<IntsRef,T>();\n      for(InputOutput<T> pair : pairs) {\n        termsMap.put(pair.input, pair.output);\n      }\n\n      // find random matching word and make sure it's valid\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify random accepted terms\");\n      }\n      final IntsRef scratch = new IntsRef(10);\n      for(int iter=0;iter<500*RANDOM_MULTIPLIER;iter++) {\n        T output = randomAcceptedWord(fst, scratch);\n        assertTrue(\"accepted word \" + inputToString(inputMode, scratch) + \" is not valid\", termsMap.containsKey(scratch));\n        assertEquals(termsMap.get(scratch), output);\n      }\n    \n      // test IntsRefFSTEnum.seek:\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify seek\");\n      }\n      IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        if (random.nextBoolean()) {\n          // seek to term that doesn't exist:\n          while(true) {\n            final IntsRef term = toIntsRef(getRandomString(), inputMode);\n            int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n            if (pos < 0) {\n              pos = -(pos+1);\n              // ok doesn't exist\n              //System.out.println(\"  seek \" + inputToString(inputMode, term));\n              final IntsRefFSTEnum.InputOutput<T> seekResult;\n              if (random.nextBoolean()) {\n                if (VERBOSE) {\n                  System.out.println(\"  do non-exist seekFloor term=\" + inputToString(inputMode, term));\n                }\n                seekResult = fstEnum.seekFloor(term);\n                pos--;\n              } else {\n                if (VERBOSE) {\n                  System.out.println(\"  do non-exist seekCeil term=\" + inputToString(inputMode, term));\n                }\n                seekResult = fstEnum.seekCeil(term);\n              }\n\n              if (pos != -1 && pos < pairs.size()) {\n                //System.out.println(\"    got \" + inputToString(inputMode,seekResult.input) + \" output=\" + fst.outputs.outputToString(seekResult.output));\n                assertNotNull(\"got null but expected term=\" + inputToString(inputMode, pairs.get(pos).input), seekResult);\n                if (VERBOSE) {\n                  System.out.println(\"    got \" + inputToString(inputMode, seekResult.input));\n                }\n                assertEquals(\"expected \" + inputToString(inputMode, pairs.get(pos).input) + \" but got \" + inputToString(inputMode, seekResult.input), pairs.get(pos).input, seekResult.input);\n                assertEquals(pairs.get(pos).output, seekResult.output);\n              } else {\n                // seeked before start or beyond end\n                //System.out.println(\"seek=\" + seekTerm);\n                assertNull(\"expected null but got \" + (seekResult==null ? \"null\" : inputToString(inputMode, seekResult.input)), seekResult);\n                if (VERBOSE) {\n                  System.out.println(\"    got null\");\n                }\n              }\n\n              break;\n            }\n          }\n        } else {\n          // seek to term that does exist:\n          InputOutput<T> pair = pairs.get(random.nextInt(pairs.size()));\n          final IntsRefFSTEnum.InputOutput<T> seekResult;\n          if (random.nextBoolean()) {\n            if (VERBOSE) {\n              System.out.println(\"  do exists seekFloor \" + inputToString(inputMode, pair.input));\n            }\n            seekResult = fstEnum.seekFloor(pair.input);\n          } else {\n            if (VERBOSE) {\n              System.out.println(\"  do exists seekCeil \" + inputToString(inputMode, pair.input));\n            }\n            seekResult = fstEnum.seekCeil(pair.input);\n          }\n          assertNotNull(seekResult);\n          assertEquals(\"got \" + inputToString(inputMode, seekResult.input) + \" but expected \" + inputToString(inputMode, pair.input), pair.input, seekResult.input);\n          assertEquals(pair.output, seekResult.output);\n        }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: mixed next/seek\");\n      }\n\n      // test mixed next/seek\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter \" + iter);\n        }\n        // reset:\n        fstEnum = new IntsRefFSTEnum<T>(fst);\n        int upto = -1;\n        while(true) {\n          boolean isDone = false;\n          if (upto == pairs.size()-1 || random.nextBoolean()) {\n            // next\n            upto++;\n            if (VERBOSE) {\n              System.out.println(\"  do next\");\n            }\n            isDone = fstEnum.next() == null;\n          } else if (upto != -1 && upto < 0.75 * pairs.size() && random.nextBoolean()) {\n            int attempt = 0;\n            for(;attempt<10;attempt++) {\n              IntsRef term = toIntsRef(getRandomString(), inputMode);\n              if (!termsMap.containsKey(term) && term.compareTo(pairs.get(upto).input) > 0) {\n                int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n                assert pos < 0;\n                upto = -(pos+1);\n\n                if (random.nextBoolean()) {\n                  upto--;\n                  assertTrue(upto != -1);\n                  if (VERBOSE) {\n                    System.out.println(\"  do non-exist seekFloor(\" + inputToString(inputMode, term) + \")\");\n                  }\n                  isDone = fstEnum.seekFloor(term) == null;\n                } else {\n                  if (VERBOSE) {\n                    System.out.println(\"  do non-exist seekCeil(\" + inputToString(inputMode, term) + \")\");\n                  }\n                  isDone = fstEnum.seekCeil(term) == null;\n                }\n\n                break;\n              }\n            }\n            if (attempt == 10) {\n              continue;\n            }\n            \n          } else {\n            final int inc = random.nextInt(pairs.size() - upto - 1);\n            upto += inc;\n            if (upto == -1) {\n              upto = 0;\n            }\n\n            if (random.nextBoolean()) {\n              if (VERBOSE) {\n                System.out.println(\"  do advanceCeil(\" + inputToString(inputMode, pairs.get(upto).input) + \")\");\n              }\n              isDone = fstEnum.seekCeil(pairs.get(upto).input) == null;\n            } else {\n              if (VERBOSE) {\n                System.out.println(\"  do advanceFloor(\" + inputToString(inputMode, pairs.get(upto).input) + \")\");\n              }\n              isDone = fstEnum.seekFloor(pairs.get(upto).input) == null;\n            }\n          }\n          if (VERBOSE) {\n            if (!isDone) {\n              System.out.println(\"    got \" + inputToString(inputMode, fstEnum.current().input));\n            } else {\n              System.out.println(\"    got null\");\n            }\n          }\n\n          if (upto == pairs.size()) {\n            assertTrue(isDone);\n            break;\n          } else {\n            assertFalse(isDone);\n            assertEquals(pairs.get(upto).input, fstEnum.current().input);\n            assertEquals(pairs.get(upto).output, fstEnum.current().output);\n\n            /*\n            if (upto < pairs.size()-1) {\n              int tryCount = 0;\n              while(tryCount < 10) {\n                final IntsRef t = toIntsRef(getRandomString(), inputMode);\n                if (pairs.get(upto).input.compareTo(t) < 0) {\n                  final boolean expected = t.compareTo(pairs.get(upto+1).input) < 0;\n                  if (VERBOSE) {\n                    System.out.println(\"TEST: call beforeNext(\" + inputToString(inputMode, t) + \"); current=\" + inputToString(inputMode, pairs.get(upto).input) + \" next=\" + inputToString(inputMode, pairs.get(upto+1).input) + \" expected=\" + expected);\n                  }\n                  assertEquals(expected, fstEnum.beforeNext(t));\n                  break;\n                }\n                tryCount++;\n              }\n            }\n            */\n          }\n        }\n      }\n    }\n\n","sourceOld":"    // FST is complete\n    private void verifyUnPruned(int inputMode, FST<T> fst) throws IOException {\n\n      if (pairs.size() == 0) {\n        assertNull(fst);\n        return;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: now verify \" + pairs.size() + \" terms\");\n        for(InputOutput<T> pair : pairs) {\n          assertNotNull(pair);\n          assertNotNull(pair.input);\n          assertNotNull(pair.output);\n          System.out.println(\"  \" + inputToString(inputMode, pair.input) + \": \" + outputs.outputToString(pair.output));\n        }\n      }\n\n      assertNotNull(fst);\n\n      // make sure all words are accepted\n      {\n        IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n        for(InputOutput<T> pair : pairs) {\n          IntsRef term = pair.input;\n          Object output = run(fst, term, null);\n\n          assertNotNull(\"term \" + inputToString(inputMode, term) + \" is not accepted\", output);\n          assertEquals(output, pair.output);\n\n          // verify enum's next\n          IntsRefFSTEnum.InputOutput<T> t = fstEnum.next();\n\n          assertEquals(term, t.input);\n          assertEquals(pair.output, t.output);\n        }\n        assertNull(fstEnum.next());\n      }\n\n      final Map<IntsRef,T> termsMap = new HashMap<IntsRef,T>();\n      for(InputOutput<T> pair : pairs) {\n        termsMap.put(pair.input, pair.output);\n      }\n\n      // find random matching word and make sure it's valid\n      final IntsRef scratch = new IntsRef(10);\n      for(int iter=0;iter<500*RANDOM_MULTIPLIER;iter++) {\n        T output = randomAcceptedWord(fst, scratch);\n        assertTrue(\"accepted word \" + inputToString(inputMode, scratch) + \" is not valid\", termsMap.containsKey(scratch));\n        assertEquals(termsMap.get(scratch), output);\n      }\n    \n      // test single IntsRefFSTEnum.advance:\n      //System.out.println(\"TEST: verify advance\");\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        final IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n        if (random.nextBoolean()) {\n          // seek to term that doesn't exist:\n          while(true) {\n            final IntsRef term = toIntsRef(getRandomString(), inputMode);\n            int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n            if (pos < 0) {\n              pos = -(pos+1);\n              // ok doesn't exist\n              //System.out.println(\"  seek \" + inputToString(inputMode, term));\n              final IntsRefFSTEnum.InputOutput<T> seekResult = fstEnum.advance(term);\n              if (pos < pairs.size()) {\n                //System.out.println(\"    got \" + inputToString(inputMode,seekResult.input) + \" output=\" + fst.outputs.outputToString(seekResult.output));\n                assertEquals(pairs.get(pos).input, seekResult.input);\n                assertEquals(pairs.get(pos).output, seekResult.output);\n              } else {\n                // seeked beyond end\n                //System.out.println(\"seek=\" + seekTerm);\n                assertNull(\"expected null but got \" + (seekResult==null ? \"null\" : inputToString(inputMode, seekResult.input)), seekResult);\n              }\n\n              break;\n            }\n          }\n        } else {\n          // seek to term that does exist:\n          InputOutput pair = pairs.get(random.nextInt(pairs.size()));\n          //System.out.println(\"  seek \" + inputToString(inputMode, pair.input));\n          final IntsRefFSTEnum.InputOutput<T> seekResult = fstEnum.advance(pair.input);\n          assertEquals(pair.input, seekResult.input);\n          assertEquals(pair.output, seekResult.output);\n        }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: mixed next/advance\");\n      }\n\n      // test mixed next/advance\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter \" + iter);\n        }\n        final IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n        int upto = -1;\n        while(true) {\n          boolean isDone = false;\n          if (upto == pairs.size()-1 || random.nextBoolean()) {\n            // next\n            upto++;\n            if (VERBOSE) {\n              System.out.println(\"  do next\");\n            }\n            isDone = fstEnum.next() == null;\n          } else if (upto != -1 && upto < 0.75 * pairs.size() && random.nextBoolean()) {\n            int attempt = 0;\n            for(;attempt<10;attempt++) {\n              IntsRef term = toIntsRef(getRandomString(), inputMode);\n              if (!termsMap.containsKey(term) && term.compareTo(pairs.get(upto).input) > 0) {\n                if (VERBOSE) {\n                  System.out.println(\"  do non-exist advance(\" + inputToString(inputMode, term) + \"]\");\n                }\n                int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n                assert pos < 0;\n                upto = -(pos+1);\n                isDone = fstEnum.advance(term) == null;\n                break;\n              }\n            }\n            if (attempt == 10) {\n              continue;\n            }\n            \n          } else {\n            final int inc = random.nextInt(pairs.size() - upto - 1);\n            upto += inc;\n            if (upto == -1) {\n              upto = 0;\n            }\n\n            if (VERBOSE) {\n              System.out.println(\"  do advance(\" + inputToString(inputMode, pairs.get(upto).input) + \"]\");\n            }\n            isDone = fstEnum.advance(pairs.get(upto).input) == null;\n          }\n          if (VERBOSE) {\n            if (!isDone) {\n              System.out.println(\"    got \" + inputToString(inputMode, fstEnum.current().input));\n            } else {\n              System.out.println(\"    got null\");\n            }\n          }\n\n          if (upto == pairs.size()) {\n            assertTrue(isDone);\n            break;\n          } else {\n            assertFalse(isDone);\n            assertEquals(pairs.get(upto).input, fstEnum.current().input);\n            assertEquals(pairs.get(upto).output, fstEnum.current().output);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#verifyUnPruned(int,FST[T]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#verifyUnPruned(int,FST[T]).mjava","sourceNew":"    // FST is complete\n    private void verifyUnPruned(int inputMode, FST<T> fst) throws IOException {\n\n      if (pairs.size() == 0) {\n        assertNull(fst);\n        return;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: now verify \" + pairs.size() + \" terms\");\n        for(InputOutput<T> pair : pairs) {\n          assertNotNull(pair);\n          assertNotNull(pair.input);\n          assertNotNull(pair.output);\n          System.out.println(\"  \" + inputToString(inputMode, pair.input) + \": \" + outputs.outputToString(pair.output));\n        }\n      }\n\n      assertNotNull(fst);\n\n      // visit valid paris in order -- make sure all words\n      // are accepted, and FSTEnum's next() steps through\n      // them correctly\n      if (VERBOSE) {\n        System.out.println(\"TEST: check valid terms/next()\");\n      }\n      {\n        IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n        for(InputOutput<T> pair : pairs) {\n          IntsRef term = pair.input;\n          if (VERBOSE) {\n            System.out.println(\"TEST: check term=\" + inputToString(inputMode, term) + \" output=\" + fst.outputs.outputToString(pair.output));\n          }\n          Object output = run(fst, term, null);\n\n          assertNotNull(\"term \" + inputToString(inputMode, term) + \" is not accepted\", output);\n          assertEquals(output, pair.output);\n\n          // verify enum's next\n          IntsRefFSTEnum.InputOutput<T> t = fstEnum.next();\n          assertNotNull(t);\n          assertEquals(\"expected input=\" + inputToString(inputMode, term) + \" but fstEnum returned \" + inputToString(inputMode, t.input), term, t.input);\n          assertEquals(pair.output, t.output);\n        }\n        assertNull(fstEnum.next());\n      }\n\n      final Map<IntsRef,T> termsMap = new HashMap<IntsRef,T>();\n      for(InputOutput<T> pair : pairs) {\n        termsMap.put(pair.input, pair.output);\n      }\n\n      // find random matching word and make sure it's valid\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify random accepted terms\");\n      }\n      final IntsRef scratch = new IntsRef(10);\n      for(int iter=0;iter<500*RANDOM_MULTIPLIER;iter++) {\n        T output = randomAcceptedWord(fst, scratch);\n        assertTrue(\"accepted word \" + inputToString(inputMode, scratch) + \" is not valid\", termsMap.containsKey(scratch));\n        assertEquals(termsMap.get(scratch), output);\n      }\n    \n      // test IntsRefFSTEnum.seek:\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify seek\");\n      }\n      IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        if (random.nextBoolean()) {\n          // seek to term that doesn't exist:\n          while(true) {\n            final IntsRef term = toIntsRef(getRandomString(), inputMode);\n            int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n            if (pos < 0) {\n              pos = -(pos+1);\n              // ok doesn't exist\n              //System.out.println(\"  seek \" + inputToString(inputMode, term));\n              final IntsRefFSTEnum.InputOutput<T> seekResult;\n              if (random.nextBoolean()) {\n                if (VERBOSE) {\n                  System.out.println(\"  do non-exist seekFloor term=\" + inputToString(inputMode, term));\n                }\n                seekResult = fstEnum.seekFloor(term);\n                pos--;\n              } else {\n                if (VERBOSE) {\n                  System.out.println(\"  do non-exist seekCeil term=\" + inputToString(inputMode, term));\n                }\n                seekResult = fstEnum.seekCeil(term);\n              }\n\n              if (pos != -1 && pos < pairs.size()) {\n                //System.out.println(\"    got \" + inputToString(inputMode,seekResult.input) + \" output=\" + fst.outputs.outputToString(seekResult.output));\n                assertNotNull(\"got null but expected term=\" + inputToString(inputMode, pairs.get(pos).input), seekResult);\n                if (VERBOSE) {\n                  System.out.println(\"    got \" + inputToString(inputMode, seekResult.input));\n                }\n                assertEquals(\"expected \" + inputToString(inputMode, pairs.get(pos).input) + \" but got \" + inputToString(inputMode, seekResult.input), pairs.get(pos).input, seekResult.input);\n                assertEquals(pairs.get(pos).output, seekResult.output);\n              } else {\n                // seeked before start or beyond end\n                //System.out.println(\"seek=\" + seekTerm);\n                assertNull(\"expected null but got \" + (seekResult==null ? \"null\" : inputToString(inputMode, seekResult.input)), seekResult);\n                if (VERBOSE) {\n                  System.out.println(\"    got null\");\n                }\n              }\n\n              break;\n            }\n          }\n        } else {\n          // seek to term that does exist:\n          InputOutput<T> pair = pairs.get(random.nextInt(pairs.size()));\n          final IntsRefFSTEnum.InputOutput<T> seekResult;\n          if (random.nextBoolean()) {\n            if (VERBOSE) {\n              System.out.println(\"  do exists seekFloor \" + inputToString(inputMode, pair.input));\n            }\n            seekResult = fstEnum.seekFloor(pair.input);\n          } else {\n            if (VERBOSE) {\n              System.out.println(\"  do exists seekCeil \" + inputToString(inputMode, pair.input));\n            }\n            seekResult = fstEnum.seekCeil(pair.input);\n          }\n          assertNotNull(seekResult);\n          assertEquals(\"got \" + inputToString(inputMode, seekResult.input) + \" but expected \" + inputToString(inputMode, pair.input), pair.input, seekResult.input);\n          assertEquals(pair.output, seekResult.output);\n        }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: mixed next/seek\");\n      }\n\n      // test mixed next/seek\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter \" + iter);\n        }\n        // reset:\n        fstEnum = new IntsRefFSTEnum<T>(fst);\n        int upto = -1;\n        while(true) {\n          boolean isDone = false;\n          if (upto == pairs.size()-1 || random.nextBoolean()) {\n            // next\n            upto++;\n            if (VERBOSE) {\n              System.out.println(\"  do next\");\n            }\n            isDone = fstEnum.next() == null;\n          } else if (upto != -1 && upto < 0.75 * pairs.size() && random.nextBoolean()) {\n            int attempt = 0;\n            for(;attempt<10;attempt++) {\n              IntsRef term = toIntsRef(getRandomString(), inputMode);\n              if (!termsMap.containsKey(term) && term.compareTo(pairs.get(upto).input) > 0) {\n                int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n                assert pos < 0;\n                upto = -(pos+1);\n\n                if (random.nextBoolean()) {\n                  upto--;\n                  assertTrue(upto != -1);\n                  if (VERBOSE) {\n                    System.out.println(\"  do non-exist seekFloor(\" + inputToString(inputMode, term) + \")\");\n                  }\n                  isDone = fstEnum.seekFloor(term) == null;\n                } else {\n                  if (VERBOSE) {\n                    System.out.println(\"  do non-exist seekCeil(\" + inputToString(inputMode, term) + \")\");\n                  }\n                  isDone = fstEnum.seekCeil(term) == null;\n                }\n\n                break;\n              }\n            }\n            if (attempt == 10) {\n              continue;\n            }\n            \n          } else {\n            final int inc = random.nextInt(pairs.size() - upto - 1);\n            upto += inc;\n            if (upto == -1) {\n              upto = 0;\n            }\n\n            if (random.nextBoolean()) {\n              if (VERBOSE) {\n                System.out.println(\"  do advanceCeil(\" + inputToString(inputMode, pairs.get(upto).input) + \")\");\n              }\n              isDone = fstEnum.seekCeil(pairs.get(upto).input) == null;\n            } else {\n              if (VERBOSE) {\n                System.out.println(\"  do advanceFloor(\" + inputToString(inputMode, pairs.get(upto).input) + \")\");\n              }\n              isDone = fstEnum.seekFloor(pairs.get(upto).input) == null;\n            }\n          }\n          if (VERBOSE) {\n            if (!isDone) {\n              System.out.println(\"    got \" + inputToString(inputMode, fstEnum.current().input));\n            } else {\n              System.out.println(\"    got null\");\n            }\n          }\n\n          if (upto == pairs.size()) {\n            assertTrue(isDone);\n            break;\n          } else {\n            assertFalse(isDone);\n            assertEquals(pairs.get(upto).input, fstEnum.current().input);\n            assertEquals(pairs.get(upto).output, fstEnum.current().output);\n\n            /*\n            if (upto < pairs.size()-1) {\n              int tryCount = 0;\n              while(tryCount < 10) {\n                final IntsRef t = toIntsRef(getRandomString(), inputMode);\n                if (pairs.get(upto).input.compareTo(t) < 0) {\n                  final boolean expected = t.compareTo(pairs.get(upto+1).input) < 0;\n                  if (VERBOSE) {\n                    System.out.println(\"TEST: call beforeNext(\" + inputToString(inputMode, t) + \"); current=\" + inputToString(inputMode, pairs.get(upto).input) + \" next=\" + inputToString(inputMode, pairs.get(upto+1).input) + \" expected=\" + expected);\n                  }\n                  assertEquals(expected, fstEnum.beforeNext(t));\n                  break;\n                }\n                tryCount++;\n              }\n            }\n            */\n          }\n        }\n      }\n    }\n\n","sourceOld":"    // FST is complete\n    private void verifyUnPruned(int inputMode, FST<T> fst) throws IOException {\n\n      if (pairs.size() == 0) {\n        assertNull(fst);\n        return;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: now verify \" + pairs.size() + \" terms\");\n        for(InputOutput<T> pair : pairs) {\n          assertNotNull(pair);\n          assertNotNull(pair.input);\n          assertNotNull(pair.output);\n          System.out.println(\"  \" + inputToString(inputMode, pair.input) + \": \" + outputs.outputToString(pair.output));\n        }\n      }\n\n      assertNotNull(fst);\n\n      // make sure all words are accepted\n      {\n        IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n        for(InputOutput<T> pair : pairs) {\n          IntsRef term = pair.input;\n          Object output = run(fst, term, null);\n\n          assertNotNull(\"term \" + inputToString(inputMode, term) + \" is not accepted\", output);\n          assertEquals(output, pair.output);\n\n          // verify enum's next\n          IntsRefFSTEnum.InputOutput<T> t = fstEnum.next();\n\n          assertEquals(term, t.input);\n          assertEquals(pair.output, t.output);\n        }\n        assertNull(fstEnum.next());\n      }\n\n      final Map<IntsRef,T> termsMap = new HashMap<IntsRef,T>();\n      for(InputOutput<T> pair : pairs) {\n        termsMap.put(pair.input, pair.output);\n      }\n\n      // find random matching word and make sure it's valid\n      final IntsRef scratch = new IntsRef(10);\n      for(int iter=0;iter<500*RANDOM_MULTIPLIER;iter++) {\n        T output = randomAcceptedWord(fst, scratch);\n        assertTrue(\"accepted word \" + inputToString(inputMode, scratch) + \" is not valid\", termsMap.containsKey(scratch));\n        assertEquals(termsMap.get(scratch), output);\n      }\n    \n      // test single IntsRefFSTEnum.advance:\n      //System.out.println(\"TEST: verify advance\");\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        final IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n        if (random.nextBoolean()) {\n          // seek to term that doesn't exist:\n          while(true) {\n            final IntsRef term = toIntsRef(getRandomString(), inputMode);\n            int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n            if (pos < 0) {\n              pos = -(pos+1);\n              // ok doesn't exist\n              //System.out.println(\"  seek \" + inputToString(inputMode, term));\n              final IntsRefFSTEnum.InputOutput<T> seekResult = fstEnum.advance(term);\n              if (pos < pairs.size()) {\n                //System.out.println(\"    got \" + inputToString(inputMode,seekResult.input) + \" output=\" + fst.outputs.outputToString(seekResult.output));\n                assertEquals(pairs.get(pos).input, seekResult.input);\n                assertEquals(pairs.get(pos).output, seekResult.output);\n              } else {\n                // seeked beyond end\n                //System.out.println(\"seek=\" + seekTerm);\n                assertNull(\"expected null but got \" + (seekResult==null ? \"null\" : inputToString(inputMode, seekResult.input)), seekResult);\n              }\n\n              break;\n            }\n          }\n        } else {\n          // seek to term that does exist:\n          InputOutput pair = pairs.get(random.nextInt(pairs.size()));\n          //System.out.println(\"  seek \" + inputToString(inputMode, pair.input));\n          final IntsRefFSTEnum.InputOutput<T> seekResult = fstEnum.advance(pair.input);\n          assertEquals(pair.input, seekResult.input);\n          assertEquals(pair.output, seekResult.output);\n        }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: mixed next/advance\");\n      }\n\n      // test mixed next/advance\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter \" + iter);\n        }\n        final IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n        int upto = -1;\n        while(true) {\n          boolean isDone = false;\n          if (upto == pairs.size()-1 || random.nextBoolean()) {\n            // next\n            upto++;\n            if (VERBOSE) {\n              System.out.println(\"  do next\");\n            }\n            isDone = fstEnum.next() == null;\n          } else if (upto != -1 && upto < 0.75 * pairs.size() && random.nextBoolean()) {\n            int attempt = 0;\n            for(;attempt<10;attempt++) {\n              IntsRef term = toIntsRef(getRandomString(), inputMode);\n              if (!termsMap.containsKey(term) && term.compareTo(pairs.get(upto).input) > 0) {\n                if (VERBOSE) {\n                  System.out.println(\"  do non-exist advance(\" + inputToString(inputMode, term) + \"]\");\n                }\n                int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n                assert pos < 0;\n                upto = -(pos+1);\n                isDone = fstEnum.advance(term) == null;\n                break;\n              }\n            }\n            if (attempt == 10) {\n              continue;\n            }\n            \n          } else {\n            final int inc = random.nextInt(pairs.size() - upto - 1);\n            upto += inc;\n            if (upto == -1) {\n              upto = 0;\n            }\n\n            if (VERBOSE) {\n              System.out.println(\"  do advance(\" + inputToString(inputMode, pairs.get(upto).input) + \"]\");\n            }\n            isDone = fstEnum.advance(pairs.get(upto).input) == null;\n          }\n          if (VERBOSE) {\n            if (!isDone) {\n              System.out.println(\"    got \" + inputToString(inputMode, fstEnum.current().input));\n            } else {\n              System.out.println(\"    got null\");\n            }\n          }\n\n          if (upto == pairs.size()) {\n            assertTrue(isDone);\n            break;\n          } else {\n            assertFalse(isDone);\n            assertEquals(pairs.get(upto).input, fstEnum.current().input);\n            assertEquals(pairs.get(upto).output, fstEnum.current().output);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7bb4e4e4a6b66f262115066bbc28b9859f54747e","date":1305657437,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#verifyUnPruned(int,FST[T]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#verifyUnPruned(int,FST[T]).mjava","sourceNew":"    // FST is complete\n    private void verifyUnPruned(int inputMode, FST<T> fst) throws IOException {\n\n      if (pairs.size() == 0) {\n        assertNull(fst);\n        return;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: now verify \" + pairs.size() + \" terms\");\n        for(InputOutput<T> pair : pairs) {\n          assertNotNull(pair);\n          assertNotNull(pair.input);\n          assertNotNull(pair.output);\n          System.out.println(\"  \" + inputToString(inputMode, pair.input) + \": \" + outputs.outputToString(pair.output));\n        }\n      }\n\n      assertNotNull(fst);\n\n      // visit valid paris in order -- make sure all words\n      // are accepted, and FSTEnum's next() steps through\n      // them correctly\n      if (VERBOSE) {\n        System.out.println(\"TEST: check valid terms/next()\");\n      }\n      {\n        IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n        for(InputOutput<T> pair : pairs) {\n          IntsRef term = pair.input;\n          if (VERBOSE) {\n            System.out.println(\"TEST: check term=\" + inputToString(inputMode, term) + \" output=\" + fst.outputs.outputToString(pair.output));\n          }\n          Object output = run(fst, term, null);\n\n          assertNotNull(\"term \" + inputToString(inputMode, term) + \" is not accepted\", output);\n          assertEquals(pair.output, output);\n\n          // verify enum's next\n          IntsRefFSTEnum.InputOutput<T> t = fstEnum.next();\n          assertNotNull(t);\n          assertEquals(\"expected input=\" + inputToString(inputMode, term) + \" but fstEnum returned \" + inputToString(inputMode, t.input), term, t.input);\n          assertEquals(pair.output, t.output);\n        }\n        assertNull(fstEnum.next());\n      }\n\n      final Map<IntsRef,T> termsMap = new HashMap<IntsRef,T>();\n      for(InputOutput<T> pair : pairs) {\n        termsMap.put(pair.input, pair.output);\n      }\n\n      // find random matching word and make sure it's valid\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify random accepted terms\");\n      }\n      final IntsRef scratch = new IntsRef(10);\n      for(int iter=0;iter<500*RANDOM_MULTIPLIER;iter++) {\n        T output = randomAcceptedWord(fst, scratch);\n        assertTrue(\"accepted word \" + inputToString(inputMode, scratch) + \" is not valid\", termsMap.containsKey(scratch));\n        assertEquals(termsMap.get(scratch), output);\n      }\n    \n      // test IntsRefFSTEnum.seek:\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify seek\");\n      }\n      IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        if (random.nextBoolean()) {\n          // seek to term that doesn't exist:\n          while(true) {\n            final IntsRef term = toIntsRef(getRandomString(), inputMode);\n            int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n            if (pos < 0) {\n              pos = -(pos+1);\n              // ok doesn't exist\n              //System.out.println(\"  seek \" + inputToString(inputMode, term));\n              final IntsRefFSTEnum.InputOutput<T> seekResult;\n              if (random.nextBoolean()) {\n                if (VERBOSE) {\n                  System.out.println(\"  do non-exist seekFloor term=\" + inputToString(inputMode, term));\n                }\n                seekResult = fstEnum.seekFloor(term);\n                pos--;\n              } else {\n                if (VERBOSE) {\n                  System.out.println(\"  do non-exist seekCeil term=\" + inputToString(inputMode, term));\n                }\n                seekResult = fstEnum.seekCeil(term);\n              }\n\n              if (pos != -1 && pos < pairs.size()) {\n                //System.out.println(\"    got \" + inputToString(inputMode,seekResult.input) + \" output=\" + fst.outputs.outputToString(seekResult.output));\n                assertNotNull(\"got null but expected term=\" + inputToString(inputMode, pairs.get(pos).input), seekResult);\n                if (VERBOSE) {\n                  System.out.println(\"    got \" + inputToString(inputMode, seekResult.input));\n                }\n                assertEquals(\"expected \" + inputToString(inputMode, pairs.get(pos).input) + \" but got \" + inputToString(inputMode, seekResult.input), pairs.get(pos).input, seekResult.input);\n                assertEquals(pairs.get(pos).output, seekResult.output);\n              } else {\n                // seeked before start or beyond end\n                //System.out.println(\"seek=\" + seekTerm);\n                assertNull(\"expected null but got \" + (seekResult==null ? \"null\" : inputToString(inputMode, seekResult.input)), seekResult);\n                if (VERBOSE) {\n                  System.out.println(\"    got null\");\n                }\n              }\n\n              break;\n            }\n          }\n        } else {\n          // seek to term that does exist:\n          InputOutput<T> pair = pairs.get(random.nextInt(pairs.size()));\n          final IntsRefFSTEnum.InputOutput<T> seekResult;\n          if (random.nextBoolean()) {\n            if (VERBOSE) {\n              System.out.println(\"  do exists seekFloor \" + inputToString(inputMode, pair.input));\n            }\n            seekResult = fstEnum.seekFloor(pair.input);\n          } else {\n            if (VERBOSE) {\n              System.out.println(\"  do exists seekCeil \" + inputToString(inputMode, pair.input));\n            }\n            seekResult = fstEnum.seekCeil(pair.input);\n          }\n          assertNotNull(seekResult);\n          assertEquals(\"got \" + inputToString(inputMode, seekResult.input) + \" but expected \" + inputToString(inputMode, pair.input), pair.input, seekResult.input);\n          assertEquals(pair.output, seekResult.output);\n        }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: mixed next/seek\");\n      }\n\n      // test mixed next/seek\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter \" + iter);\n        }\n        // reset:\n        fstEnum = new IntsRefFSTEnum<T>(fst);\n        int upto = -1;\n        while(true) {\n          boolean isDone = false;\n          if (upto == pairs.size()-1 || random.nextBoolean()) {\n            // next\n            upto++;\n            if (VERBOSE) {\n              System.out.println(\"  do next\");\n            }\n            isDone = fstEnum.next() == null;\n          } else if (upto != -1 && upto < 0.75 * pairs.size() && random.nextBoolean()) {\n            int attempt = 0;\n            for(;attempt<10;attempt++) {\n              IntsRef term = toIntsRef(getRandomString(), inputMode);\n              if (!termsMap.containsKey(term) && term.compareTo(pairs.get(upto).input) > 0) {\n                int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n                assert pos < 0;\n                upto = -(pos+1);\n\n                if (random.nextBoolean()) {\n                  upto--;\n                  assertTrue(upto != -1);\n                  if (VERBOSE) {\n                    System.out.println(\"  do non-exist seekFloor(\" + inputToString(inputMode, term) + \")\");\n                  }\n                  isDone = fstEnum.seekFloor(term) == null;\n                } else {\n                  if (VERBOSE) {\n                    System.out.println(\"  do non-exist seekCeil(\" + inputToString(inputMode, term) + \")\");\n                  }\n                  isDone = fstEnum.seekCeil(term) == null;\n                }\n\n                break;\n              }\n            }\n            if (attempt == 10) {\n              continue;\n            }\n            \n          } else {\n            final int inc = random.nextInt(pairs.size() - upto - 1);\n            upto += inc;\n            if (upto == -1) {\n              upto = 0;\n            }\n\n            if (random.nextBoolean()) {\n              if (VERBOSE) {\n                System.out.println(\"  do advanceCeil(\" + inputToString(inputMode, pairs.get(upto).input) + \")\");\n              }\n              isDone = fstEnum.seekCeil(pairs.get(upto).input) == null;\n            } else {\n              if (VERBOSE) {\n                System.out.println(\"  do advanceFloor(\" + inputToString(inputMode, pairs.get(upto).input) + \")\");\n              }\n              isDone = fstEnum.seekFloor(pairs.get(upto).input) == null;\n            }\n          }\n          if (VERBOSE) {\n            if (!isDone) {\n              System.out.println(\"    got \" + inputToString(inputMode, fstEnum.current().input));\n            } else {\n              System.out.println(\"    got null\");\n            }\n          }\n\n          if (upto == pairs.size()) {\n            assertTrue(isDone);\n            break;\n          } else {\n            assertFalse(isDone);\n            assertEquals(pairs.get(upto).input, fstEnum.current().input);\n            assertEquals(pairs.get(upto).output, fstEnum.current().output);\n\n            /*\n            if (upto < pairs.size()-1) {\n              int tryCount = 0;\n              while(tryCount < 10) {\n                final IntsRef t = toIntsRef(getRandomString(), inputMode);\n                if (pairs.get(upto).input.compareTo(t) < 0) {\n                  final boolean expected = t.compareTo(pairs.get(upto+1).input) < 0;\n                  if (VERBOSE) {\n                    System.out.println(\"TEST: call beforeNext(\" + inputToString(inputMode, t) + \"); current=\" + inputToString(inputMode, pairs.get(upto).input) + \" next=\" + inputToString(inputMode, pairs.get(upto+1).input) + \" expected=\" + expected);\n                  }\n                  assertEquals(expected, fstEnum.beforeNext(t));\n                  break;\n                }\n                tryCount++;\n              }\n            }\n            */\n          }\n        }\n      }\n    }\n\n","sourceOld":"    // FST is complete\n    private void verifyUnPruned(int inputMode, FST<T> fst) throws IOException {\n\n      if (pairs.size() == 0) {\n        assertNull(fst);\n        return;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: now verify \" + pairs.size() + \" terms\");\n        for(InputOutput<T> pair : pairs) {\n          assertNotNull(pair);\n          assertNotNull(pair.input);\n          assertNotNull(pair.output);\n          System.out.println(\"  \" + inputToString(inputMode, pair.input) + \": \" + outputs.outputToString(pair.output));\n        }\n      }\n\n      assertNotNull(fst);\n\n      // visit valid paris in order -- make sure all words\n      // are accepted, and FSTEnum's next() steps through\n      // them correctly\n      if (VERBOSE) {\n        System.out.println(\"TEST: check valid terms/next()\");\n      }\n      {\n        IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n        for(InputOutput<T> pair : pairs) {\n          IntsRef term = pair.input;\n          if (VERBOSE) {\n            System.out.println(\"TEST: check term=\" + inputToString(inputMode, term) + \" output=\" + fst.outputs.outputToString(pair.output));\n          }\n          Object output = run(fst, term, null);\n\n          assertNotNull(\"term \" + inputToString(inputMode, term) + \" is not accepted\", output);\n          assertEquals(output, pair.output);\n\n          // verify enum's next\n          IntsRefFSTEnum.InputOutput<T> t = fstEnum.next();\n          assertNotNull(t);\n          assertEquals(\"expected input=\" + inputToString(inputMode, term) + \" but fstEnum returned \" + inputToString(inputMode, t.input), term, t.input);\n          assertEquals(pair.output, t.output);\n        }\n        assertNull(fstEnum.next());\n      }\n\n      final Map<IntsRef,T> termsMap = new HashMap<IntsRef,T>();\n      for(InputOutput<T> pair : pairs) {\n        termsMap.put(pair.input, pair.output);\n      }\n\n      // find random matching word and make sure it's valid\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify random accepted terms\");\n      }\n      final IntsRef scratch = new IntsRef(10);\n      for(int iter=0;iter<500*RANDOM_MULTIPLIER;iter++) {\n        T output = randomAcceptedWord(fst, scratch);\n        assertTrue(\"accepted word \" + inputToString(inputMode, scratch) + \" is not valid\", termsMap.containsKey(scratch));\n        assertEquals(termsMap.get(scratch), output);\n      }\n    \n      // test IntsRefFSTEnum.seek:\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify seek\");\n      }\n      IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        if (random.nextBoolean()) {\n          // seek to term that doesn't exist:\n          while(true) {\n            final IntsRef term = toIntsRef(getRandomString(), inputMode);\n            int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n            if (pos < 0) {\n              pos = -(pos+1);\n              // ok doesn't exist\n              //System.out.println(\"  seek \" + inputToString(inputMode, term));\n              final IntsRefFSTEnum.InputOutput<T> seekResult;\n              if (random.nextBoolean()) {\n                if (VERBOSE) {\n                  System.out.println(\"  do non-exist seekFloor term=\" + inputToString(inputMode, term));\n                }\n                seekResult = fstEnum.seekFloor(term);\n                pos--;\n              } else {\n                if (VERBOSE) {\n                  System.out.println(\"  do non-exist seekCeil term=\" + inputToString(inputMode, term));\n                }\n                seekResult = fstEnum.seekCeil(term);\n              }\n\n              if (pos != -1 && pos < pairs.size()) {\n                //System.out.println(\"    got \" + inputToString(inputMode,seekResult.input) + \" output=\" + fst.outputs.outputToString(seekResult.output));\n                assertNotNull(\"got null but expected term=\" + inputToString(inputMode, pairs.get(pos).input), seekResult);\n                if (VERBOSE) {\n                  System.out.println(\"    got \" + inputToString(inputMode, seekResult.input));\n                }\n                assertEquals(\"expected \" + inputToString(inputMode, pairs.get(pos).input) + \" but got \" + inputToString(inputMode, seekResult.input), pairs.get(pos).input, seekResult.input);\n                assertEquals(pairs.get(pos).output, seekResult.output);\n              } else {\n                // seeked before start or beyond end\n                //System.out.println(\"seek=\" + seekTerm);\n                assertNull(\"expected null but got \" + (seekResult==null ? \"null\" : inputToString(inputMode, seekResult.input)), seekResult);\n                if (VERBOSE) {\n                  System.out.println(\"    got null\");\n                }\n              }\n\n              break;\n            }\n          }\n        } else {\n          // seek to term that does exist:\n          InputOutput<T> pair = pairs.get(random.nextInt(pairs.size()));\n          final IntsRefFSTEnum.InputOutput<T> seekResult;\n          if (random.nextBoolean()) {\n            if (VERBOSE) {\n              System.out.println(\"  do exists seekFloor \" + inputToString(inputMode, pair.input));\n            }\n            seekResult = fstEnum.seekFloor(pair.input);\n          } else {\n            if (VERBOSE) {\n              System.out.println(\"  do exists seekCeil \" + inputToString(inputMode, pair.input));\n            }\n            seekResult = fstEnum.seekCeil(pair.input);\n          }\n          assertNotNull(seekResult);\n          assertEquals(\"got \" + inputToString(inputMode, seekResult.input) + \" but expected \" + inputToString(inputMode, pair.input), pair.input, seekResult.input);\n          assertEquals(pair.output, seekResult.output);\n        }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: mixed next/seek\");\n      }\n\n      // test mixed next/seek\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter \" + iter);\n        }\n        // reset:\n        fstEnum = new IntsRefFSTEnum<T>(fst);\n        int upto = -1;\n        while(true) {\n          boolean isDone = false;\n          if (upto == pairs.size()-1 || random.nextBoolean()) {\n            // next\n            upto++;\n            if (VERBOSE) {\n              System.out.println(\"  do next\");\n            }\n            isDone = fstEnum.next() == null;\n          } else if (upto != -1 && upto < 0.75 * pairs.size() && random.nextBoolean()) {\n            int attempt = 0;\n            for(;attempt<10;attempt++) {\n              IntsRef term = toIntsRef(getRandomString(), inputMode);\n              if (!termsMap.containsKey(term) && term.compareTo(pairs.get(upto).input) > 0) {\n                int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n                assert pos < 0;\n                upto = -(pos+1);\n\n                if (random.nextBoolean()) {\n                  upto--;\n                  assertTrue(upto != -1);\n                  if (VERBOSE) {\n                    System.out.println(\"  do non-exist seekFloor(\" + inputToString(inputMode, term) + \")\");\n                  }\n                  isDone = fstEnum.seekFloor(term) == null;\n                } else {\n                  if (VERBOSE) {\n                    System.out.println(\"  do non-exist seekCeil(\" + inputToString(inputMode, term) + \")\");\n                  }\n                  isDone = fstEnum.seekCeil(term) == null;\n                }\n\n                break;\n              }\n            }\n            if (attempt == 10) {\n              continue;\n            }\n            \n          } else {\n            final int inc = random.nextInt(pairs.size() - upto - 1);\n            upto += inc;\n            if (upto == -1) {\n              upto = 0;\n            }\n\n            if (random.nextBoolean()) {\n              if (VERBOSE) {\n                System.out.println(\"  do advanceCeil(\" + inputToString(inputMode, pairs.get(upto).input) + \")\");\n              }\n              isDone = fstEnum.seekCeil(pairs.get(upto).input) == null;\n            } else {\n              if (VERBOSE) {\n                System.out.println(\"  do advanceFloor(\" + inputToString(inputMode, pairs.get(upto).input) + \")\");\n              }\n              isDone = fstEnum.seekFloor(pairs.get(upto).input) == null;\n            }\n          }\n          if (VERBOSE) {\n            if (!isDone) {\n              System.out.println(\"    got \" + inputToString(inputMode, fstEnum.current().input));\n            } else {\n              System.out.println(\"    got null\");\n            }\n          }\n\n          if (upto == pairs.size()) {\n            assertTrue(isDone);\n            break;\n          } else {\n            assertFalse(isDone);\n            assertEquals(pairs.get(upto).input, fstEnum.current().input);\n            assertEquals(pairs.get(upto).output, fstEnum.current().output);\n\n            /*\n            if (upto < pairs.size()-1) {\n              int tryCount = 0;\n              while(tryCount < 10) {\n                final IntsRef t = toIntsRef(getRandomString(), inputMode);\n                if (pairs.get(upto).input.compareTo(t) < 0) {\n                  final boolean expected = t.compareTo(pairs.get(upto+1).input) < 0;\n                  if (VERBOSE) {\n                    System.out.println(\"TEST: call beforeNext(\" + inputToString(inputMode, t) + \"); current=\" + inputToString(inputMode, pairs.get(upto).input) + \" next=\" + inputToString(inputMode, pairs.get(upto+1).input) + \" expected=\" + expected);\n                  }\n                  assertEquals(expected, fstEnum.beforeNext(t));\n                  break;\n                }\n                tryCount++;\n              }\n            }\n            */\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#verifyUnPruned(int,FST[T]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#verifyUnPruned(int,FST[T]).mjava","sourceNew":"    // FST is complete\n    private void verifyUnPruned(int inputMode, FST<T> fst) throws IOException {\n\n      if (pairs.size() == 0) {\n        assertNull(fst);\n        return;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: now verify \" + pairs.size() + \" terms\");\n        for(InputOutput<T> pair : pairs) {\n          assertNotNull(pair);\n          assertNotNull(pair.input);\n          assertNotNull(pair.output);\n          System.out.println(\"  \" + inputToString(inputMode, pair.input) + \": \" + outputs.outputToString(pair.output));\n        }\n      }\n\n      assertNotNull(fst);\n\n      // visit valid paris in order -- make sure all words\n      // are accepted, and FSTEnum's next() steps through\n      // them correctly\n      if (VERBOSE) {\n        System.out.println(\"TEST: check valid terms/next()\");\n      }\n      {\n        IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n        for(InputOutput<T> pair : pairs) {\n          IntsRef term = pair.input;\n          if (VERBOSE) {\n            System.out.println(\"TEST: check term=\" + inputToString(inputMode, term) + \" output=\" + fst.outputs.outputToString(pair.output));\n          }\n          Object output = run(fst, term, null);\n\n          assertNotNull(\"term \" + inputToString(inputMode, term) + \" is not accepted\", output);\n          assertEquals(pair.output, output);\n\n          // verify enum's next\n          IntsRefFSTEnum.InputOutput<T> t = fstEnum.next();\n          assertNotNull(t);\n          assertEquals(\"expected input=\" + inputToString(inputMode, term) + \" but fstEnum returned \" + inputToString(inputMode, t.input), term, t.input);\n          assertEquals(pair.output, t.output);\n        }\n        assertNull(fstEnum.next());\n      }\n\n      final Map<IntsRef,T> termsMap = new HashMap<IntsRef,T>();\n      for(InputOutput<T> pair : pairs) {\n        termsMap.put(pair.input, pair.output);\n      }\n\n      // find random matching word and make sure it's valid\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify random accepted terms\");\n      }\n      final IntsRef scratch = new IntsRef(10);\n      for(int iter=0;iter<500*RANDOM_MULTIPLIER;iter++) {\n        T output = randomAcceptedWord(fst, scratch);\n        assertTrue(\"accepted word \" + inputToString(inputMode, scratch) + \" is not valid\", termsMap.containsKey(scratch));\n        assertEquals(termsMap.get(scratch), output);\n      }\n    \n      // test IntsRefFSTEnum.seek:\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify seek\");\n      }\n      IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        if (random.nextBoolean()) {\n          // seek to term that doesn't exist:\n          while(true) {\n            final IntsRef term = toIntsRef(getRandomString(), inputMode);\n            int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n            if (pos < 0) {\n              pos = -(pos+1);\n              // ok doesn't exist\n              //System.out.println(\"  seek \" + inputToString(inputMode, term));\n              final IntsRefFSTEnum.InputOutput<T> seekResult;\n              if (random.nextBoolean()) {\n                if (VERBOSE) {\n                  System.out.println(\"  do non-exist seekFloor term=\" + inputToString(inputMode, term));\n                }\n                seekResult = fstEnum.seekFloor(term);\n                pos--;\n              } else {\n                if (VERBOSE) {\n                  System.out.println(\"  do non-exist seekCeil term=\" + inputToString(inputMode, term));\n                }\n                seekResult = fstEnum.seekCeil(term);\n              }\n\n              if (pos != -1 && pos < pairs.size()) {\n                //System.out.println(\"    got \" + inputToString(inputMode,seekResult.input) + \" output=\" + fst.outputs.outputToString(seekResult.output));\n                assertNotNull(\"got null but expected term=\" + inputToString(inputMode, pairs.get(pos).input), seekResult);\n                if (VERBOSE) {\n                  System.out.println(\"    got \" + inputToString(inputMode, seekResult.input));\n                }\n                assertEquals(\"expected \" + inputToString(inputMode, pairs.get(pos).input) + \" but got \" + inputToString(inputMode, seekResult.input), pairs.get(pos).input, seekResult.input);\n                assertEquals(pairs.get(pos).output, seekResult.output);\n              } else {\n                // seeked before start or beyond end\n                //System.out.println(\"seek=\" + seekTerm);\n                assertNull(\"expected null but got \" + (seekResult==null ? \"null\" : inputToString(inputMode, seekResult.input)), seekResult);\n                if (VERBOSE) {\n                  System.out.println(\"    got null\");\n                }\n              }\n\n              break;\n            }\n          }\n        } else {\n          // seek to term that does exist:\n          InputOutput<T> pair = pairs.get(random.nextInt(pairs.size()));\n          final IntsRefFSTEnum.InputOutput<T> seekResult;\n          if (random.nextBoolean()) {\n            if (VERBOSE) {\n              System.out.println(\"  do exists seekFloor \" + inputToString(inputMode, pair.input));\n            }\n            seekResult = fstEnum.seekFloor(pair.input);\n          } else {\n            if (VERBOSE) {\n              System.out.println(\"  do exists seekCeil \" + inputToString(inputMode, pair.input));\n            }\n            seekResult = fstEnum.seekCeil(pair.input);\n          }\n          assertNotNull(seekResult);\n          assertEquals(\"got \" + inputToString(inputMode, seekResult.input) + \" but expected \" + inputToString(inputMode, pair.input), pair.input, seekResult.input);\n          assertEquals(pair.output, seekResult.output);\n        }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: mixed next/seek\");\n      }\n\n      // test mixed next/seek\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter \" + iter);\n        }\n        // reset:\n        fstEnum = new IntsRefFSTEnum<T>(fst);\n        int upto = -1;\n        while(true) {\n          boolean isDone = false;\n          if (upto == pairs.size()-1 || random.nextBoolean()) {\n            // next\n            upto++;\n            if (VERBOSE) {\n              System.out.println(\"  do next\");\n            }\n            isDone = fstEnum.next() == null;\n          } else if (upto != -1 && upto < 0.75 * pairs.size() && random.nextBoolean()) {\n            int attempt = 0;\n            for(;attempt<10;attempt++) {\n              IntsRef term = toIntsRef(getRandomString(), inputMode);\n              if (!termsMap.containsKey(term) && term.compareTo(pairs.get(upto).input) > 0) {\n                int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n                assert pos < 0;\n                upto = -(pos+1);\n\n                if (random.nextBoolean()) {\n                  upto--;\n                  assertTrue(upto != -1);\n                  if (VERBOSE) {\n                    System.out.println(\"  do non-exist seekFloor(\" + inputToString(inputMode, term) + \")\");\n                  }\n                  isDone = fstEnum.seekFloor(term) == null;\n                } else {\n                  if (VERBOSE) {\n                    System.out.println(\"  do non-exist seekCeil(\" + inputToString(inputMode, term) + \")\");\n                  }\n                  isDone = fstEnum.seekCeil(term) == null;\n                }\n\n                break;\n              }\n            }\n            if (attempt == 10) {\n              continue;\n            }\n            \n          } else {\n            final int inc = random.nextInt(pairs.size() - upto - 1);\n            upto += inc;\n            if (upto == -1) {\n              upto = 0;\n            }\n\n            if (random.nextBoolean()) {\n              if (VERBOSE) {\n                System.out.println(\"  do advanceCeil(\" + inputToString(inputMode, pairs.get(upto).input) + \")\");\n              }\n              isDone = fstEnum.seekCeil(pairs.get(upto).input) == null;\n            } else {\n              if (VERBOSE) {\n                System.out.println(\"  do advanceFloor(\" + inputToString(inputMode, pairs.get(upto).input) + \")\");\n              }\n              isDone = fstEnum.seekFloor(pairs.get(upto).input) == null;\n            }\n          }\n          if (VERBOSE) {\n            if (!isDone) {\n              System.out.println(\"    got \" + inputToString(inputMode, fstEnum.current().input));\n            } else {\n              System.out.println(\"    got null\");\n            }\n          }\n\n          if (upto == pairs.size()) {\n            assertTrue(isDone);\n            break;\n          } else {\n            assertFalse(isDone);\n            assertEquals(pairs.get(upto).input, fstEnum.current().input);\n            assertEquals(pairs.get(upto).output, fstEnum.current().output);\n\n            /*\n            if (upto < pairs.size()-1) {\n              int tryCount = 0;\n              while(tryCount < 10) {\n                final IntsRef t = toIntsRef(getRandomString(), inputMode);\n                if (pairs.get(upto).input.compareTo(t) < 0) {\n                  final boolean expected = t.compareTo(pairs.get(upto+1).input) < 0;\n                  if (VERBOSE) {\n                    System.out.println(\"TEST: call beforeNext(\" + inputToString(inputMode, t) + \"); current=\" + inputToString(inputMode, pairs.get(upto).input) + \" next=\" + inputToString(inputMode, pairs.get(upto+1).input) + \" expected=\" + expected);\n                  }\n                  assertEquals(expected, fstEnum.beforeNext(t));\n                  break;\n                }\n                tryCount++;\n              }\n            }\n            */\n          }\n        }\n      }\n    }\n\n","sourceOld":"    // FST is complete\n    private void verifyUnPruned(int inputMode, FST<T> fst) throws IOException {\n\n      if (pairs.size() == 0) {\n        assertNull(fst);\n        return;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: now verify \" + pairs.size() + \" terms\");\n        for(InputOutput<T> pair : pairs) {\n          assertNotNull(pair);\n          assertNotNull(pair.input);\n          assertNotNull(pair.output);\n          System.out.println(\"  \" + inputToString(inputMode, pair.input) + \": \" + outputs.outputToString(pair.output));\n        }\n      }\n\n      assertNotNull(fst);\n\n      // visit valid paris in order -- make sure all words\n      // are accepted, and FSTEnum's next() steps through\n      // them correctly\n      if (VERBOSE) {\n        System.out.println(\"TEST: check valid terms/next()\");\n      }\n      {\n        IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n        for(InputOutput<T> pair : pairs) {\n          IntsRef term = pair.input;\n          if (VERBOSE) {\n            System.out.println(\"TEST: check term=\" + inputToString(inputMode, term) + \" output=\" + fst.outputs.outputToString(pair.output));\n          }\n          Object output = run(fst, term, null);\n\n          assertNotNull(\"term \" + inputToString(inputMode, term) + \" is not accepted\", output);\n          assertEquals(output, pair.output);\n\n          // verify enum's next\n          IntsRefFSTEnum.InputOutput<T> t = fstEnum.next();\n          assertNotNull(t);\n          assertEquals(\"expected input=\" + inputToString(inputMode, term) + \" but fstEnum returned \" + inputToString(inputMode, t.input), term, t.input);\n          assertEquals(pair.output, t.output);\n        }\n        assertNull(fstEnum.next());\n      }\n\n      final Map<IntsRef,T> termsMap = new HashMap<IntsRef,T>();\n      for(InputOutput<T> pair : pairs) {\n        termsMap.put(pair.input, pair.output);\n      }\n\n      // find random matching word and make sure it's valid\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify random accepted terms\");\n      }\n      final IntsRef scratch = new IntsRef(10);\n      for(int iter=0;iter<500*RANDOM_MULTIPLIER;iter++) {\n        T output = randomAcceptedWord(fst, scratch);\n        assertTrue(\"accepted word \" + inputToString(inputMode, scratch) + \" is not valid\", termsMap.containsKey(scratch));\n        assertEquals(termsMap.get(scratch), output);\n      }\n    \n      // test IntsRefFSTEnum.seek:\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify seek\");\n      }\n      IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        if (random.nextBoolean()) {\n          // seek to term that doesn't exist:\n          while(true) {\n            final IntsRef term = toIntsRef(getRandomString(), inputMode);\n            int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n            if (pos < 0) {\n              pos = -(pos+1);\n              // ok doesn't exist\n              //System.out.println(\"  seek \" + inputToString(inputMode, term));\n              final IntsRefFSTEnum.InputOutput<T> seekResult;\n              if (random.nextBoolean()) {\n                if (VERBOSE) {\n                  System.out.println(\"  do non-exist seekFloor term=\" + inputToString(inputMode, term));\n                }\n                seekResult = fstEnum.seekFloor(term);\n                pos--;\n              } else {\n                if (VERBOSE) {\n                  System.out.println(\"  do non-exist seekCeil term=\" + inputToString(inputMode, term));\n                }\n                seekResult = fstEnum.seekCeil(term);\n              }\n\n              if (pos != -1 && pos < pairs.size()) {\n                //System.out.println(\"    got \" + inputToString(inputMode,seekResult.input) + \" output=\" + fst.outputs.outputToString(seekResult.output));\n                assertNotNull(\"got null but expected term=\" + inputToString(inputMode, pairs.get(pos).input), seekResult);\n                if (VERBOSE) {\n                  System.out.println(\"    got \" + inputToString(inputMode, seekResult.input));\n                }\n                assertEquals(\"expected \" + inputToString(inputMode, pairs.get(pos).input) + \" but got \" + inputToString(inputMode, seekResult.input), pairs.get(pos).input, seekResult.input);\n                assertEquals(pairs.get(pos).output, seekResult.output);\n              } else {\n                // seeked before start or beyond end\n                //System.out.println(\"seek=\" + seekTerm);\n                assertNull(\"expected null but got \" + (seekResult==null ? \"null\" : inputToString(inputMode, seekResult.input)), seekResult);\n                if (VERBOSE) {\n                  System.out.println(\"    got null\");\n                }\n              }\n\n              break;\n            }\n          }\n        } else {\n          // seek to term that does exist:\n          InputOutput<T> pair = pairs.get(random.nextInt(pairs.size()));\n          final IntsRefFSTEnum.InputOutput<T> seekResult;\n          if (random.nextBoolean()) {\n            if (VERBOSE) {\n              System.out.println(\"  do exists seekFloor \" + inputToString(inputMode, pair.input));\n            }\n            seekResult = fstEnum.seekFloor(pair.input);\n          } else {\n            if (VERBOSE) {\n              System.out.println(\"  do exists seekCeil \" + inputToString(inputMode, pair.input));\n            }\n            seekResult = fstEnum.seekCeil(pair.input);\n          }\n          assertNotNull(seekResult);\n          assertEquals(\"got \" + inputToString(inputMode, seekResult.input) + \" but expected \" + inputToString(inputMode, pair.input), pair.input, seekResult.input);\n          assertEquals(pair.output, seekResult.output);\n        }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: mixed next/seek\");\n      }\n\n      // test mixed next/seek\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter \" + iter);\n        }\n        // reset:\n        fstEnum = new IntsRefFSTEnum<T>(fst);\n        int upto = -1;\n        while(true) {\n          boolean isDone = false;\n          if (upto == pairs.size()-1 || random.nextBoolean()) {\n            // next\n            upto++;\n            if (VERBOSE) {\n              System.out.println(\"  do next\");\n            }\n            isDone = fstEnum.next() == null;\n          } else if (upto != -1 && upto < 0.75 * pairs.size() && random.nextBoolean()) {\n            int attempt = 0;\n            for(;attempt<10;attempt++) {\n              IntsRef term = toIntsRef(getRandomString(), inputMode);\n              if (!termsMap.containsKey(term) && term.compareTo(pairs.get(upto).input) > 0) {\n                int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n                assert pos < 0;\n                upto = -(pos+1);\n\n                if (random.nextBoolean()) {\n                  upto--;\n                  assertTrue(upto != -1);\n                  if (VERBOSE) {\n                    System.out.println(\"  do non-exist seekFloor(\" + inputToString(inputMode, term) + \")\");\n                  }\n                  isDone = fstEnum.seekFloor(term) == null;\n                } else {\n                  if (VERBOSE) {\n                    System.out.println(\"  do non-exist seekCeil(\" + inputToString(inputMode, term) + \")\");\n                  }\n                  isDone = fstEnum.seekCeil(term) == null;\n                }\n\n                break;\n              }\n            }\n            if (attempt == 10) {\n              continue;\n            }\n            \n          } else {\n            final int inc = random.nextInt(pairs.size() - upto - 1);\n            upto += inc;\n            if (upto == -1) {\n              upto = 0;\n            }\n\n            if (random.nextBoolean()) {\n              if (VERBOSE) {\n                System.out.println(\"  do advanceCeil(\" + inputToString(inputMode, pairs.get(upto).input) + \")\");\n              }\n              isDone = fstEnum.seekCeil(pairs.get(upto).input) == null;\n            } else {\n              if (VERBOSE) {\n                System.out.println(\"  do advanceFloor(\" + inputToString(inputMode, pairs.get(upto).input) + \")\");\n              }\n              isDone = fstEnum.seekFloor(pairs.get(upto).input) == null;\n            }\n          }\n          if (VERBOSE) {\n            if (!isDone) {\n              System.out.println(\"    got \" + inputToString(inputMode, fstEnum.current().input));\n            } else {\n              System.out.println(\"    got null\");\n            }\n          }\n\n          if (upto == pairs.size()) {\n            assertTrue(isDone);\n            break;\n          } else {\n            assertFalse(isDone);\n            assertEquals(pairs.get(upto).input, fstEnum.current().input);\n            assertEquals(pairs.get(upto).output, fstEnum.current().output);\n\n            /*\n            if (upto < pairs.size()-1) {\n              int tryCount = 0;\n              while(tryCount < 10) {\n                final IntsRef t = toIntsRef(getRandomString(), inputMode);\n                if (pairs.get(upto).input.compareTo(t) < 0) {\n                  final boolean expected = t.compareTo(pairs.get(upto+1).input) < 0;\n                  if (VERBOSE) {\n                    System.out.println(\"TEST: call beforeNext(\" + inputToString(inputMode, t) + \"); current=\" + inputToString(inputMode, pairs.get(upto).input) + \" next=\" + inputToString(inputMode, pairs.get(upto+1).input) + \" expected=\" + expected);\n                  }\n                  assertEquals(expected, fstEnum.beforeNext(t));\n                  break;\n                }\n                tryCount++;\n              }\n            }\n            */\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#verifyUnPruned(int,FST[T]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#verifyUnPruned(int,FST[T]).mjava","sourceNew":"    // FST is complete\n    private void verifyUnPruned(int inputMode, FST<T> fst) throws IOException {\n\n      if (pairs.size() == 0) {\n        assertNull(fst);\n        return;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: now verify \" + pairs.size() + \" terms\");\n        for(InputOutput<T> pair : pairs) {\n          assertNotNull(pair);\n          assertNotNull(pair.input);\n          assertNotNull(pair.output);\n          System.out.println(\"  \" + inputToString(inputMode, pair.input) + \": \" + outputs.outputToString(pair.output));\n        }\n      }\n\n      assertNotNull(fst);\n\n      // visit valid paris in order -- make sure all words\n      // are accepted, and FSTEnum's next() steps through\n      // them correctly\n      if (VERBOSE) {\n        System.out.println(\"TEST: check valid terms/next()\");\n      }\n      {\n        IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n        for(InputOutput<T> pair : pairs) {\n          IntsRef term = pair.input;\n          if (VERBOSE) {\n            System.out.println(\"TEST: check term=\" + inputToString(inputMode, term) + \" output=\" + fst.outputs.outputToString(pair.output));\n          }\n          Object output = run(fst, term, null);\n\n          assertNotNull(\"term \" + inputToString(inputMode, term) + \" is not accepted\", output);\n          assertEquals(pair.output, output);\n\n          // verify enum's next\n          IntsRefFSTEnum.InputOutput<T> t = fstEnum.next();\n          assertNotNull(t);\n          assertEquals(\"expected input=\" + inputToString(inputMode, term) + \" but fstEnum returned \" + inputToString(inputMode, t.input), term, t.input);\n          assertEquals(pair.output, t.output);\n        }\n        assertNull(fstEnum.next());\n      }\n\n      final Map<IntsRef,T> termsMap = new HashMap<IntsRef,T>();\n      for(InputOutput<T> pair : pairs) {\n        termsMap.put(pair.input, pair.output);\n      }\n\n      // find random matching word and make sure it's valid\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify random accepted terms\");\n      }\n      final IntsRef scratch = new IntsRef(10);\n      for(int iter=0;iter<500*RANDOM_MULTIPLIER;iter++) {\n        T output = randomAcceptedWord(fst, scratch);\n        assertTrue(\"accepted word \" + inputToString(inputMode, scratch) + \" is not valid\", termsMap.containsKey(scratch));\n        assertEquals(termsMap.get(scratch), output);\n      }\n    \n      // test IntsRefFSTEnum.seek:\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify seek\");\n      }\n      IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        if (random.nextBoolean()) {\n          // seek to term that doesn't exist:\n          while(true) {\n            final IntsRef term = toIntsRef(getRandomString(), inputMode);\n            int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n            if (pos < 0) {\n              pos = -(pos+1);\n              // ok doesn't exist\n              //System.out.println(\"  seek \" + inputToString(inputMode, term));\n              final IntsRefFSTEnum.InputOutput<T> seekResult;\n              if (random.nextBoolean()) {\n                if (VERBOSE) {\n                  System.out.println(\"  do non-exist seekFloor term=\" + inputToString(inputMode, term));\n                }\n                seekResult = fstEnum.seekFloor(term);\n                pos--;\n              } else {\n                if (VERBOSE) {\n                  System.out.println(\"  do non-exist seekCeil term=\" + inputToString(inputMode, term));\n                }\n                seekResult = fstEnum.seekCeil(term);\n              }\n\n              if (pos != -1 && pos < pairs.size()) {\n                //System.out.println(\"    got \" + inputToString(inputMode,seekResult.input) + \" output=\" + fst.outputs.outputToString(seekResult.output));\n                assertNotNull(\"got null but expected term=\" + inputToString(inputMode, pairs.get(pos).input), seekResult);\n                if (VERBOSE) {\n                  System.out.println(\"    got \" + inputToString(inputMode, seekResult.input));\n                }\n                assertEquals(\"expected \" + inputToString(inputMode, pairs.get(pos).input) + \" but got \" + inputToString(inputMode, seekResult.input), pairs.get(pos).input, seekResult.input);\n                assertEquals(pairs.get(pos).output, seekResult.output);\n              } else {\n                // seeked before start or beyond end\n                //System.out.println(\"seek=\" + seekTerm);\n                assertNull(\"expected null but got \" + (seekResult==null ? \"null\" : inputToString(inputMode, seekResult.input)), seekResult);\n                if (VERBOSE) {\n                  System.out.println(\"    got null\");\n                }\n              }\n\n              break;\n            }\n          }\n        } else {\n          // seek to term that does exist:\n          InputOutput<T> pair = pairs.get(random.nextInt(pairs.size()));\n          final IntsRefFSTEnum.InputOutput<T> seekResult;\n          if (random.nextBoolean()) {\n            if (VERBOSE) {\n              System.out.println(\"  do exists seekFloor \" + inputToString(inputMode, pair.input));\n            }\n            seekResult = fstEnum.seekFloor(pair.input);\n          } else {\n            if (VERBOSE) {\n              System.out.println(\"  do exists seekCeil \" + inputToString(inputMode, pair.input));\n            }\n            seekResult = fstEnum.seekCeil(pair.input);\n          }\n          assertNotNull(seekResult);\n          assertEquals(\"got \" + inputToString(inputMode, seekResult.input) + \" but expected \" + inputToString(inputMode, pair.input), pair.input, seekResult.input);\n          assertEquals(pair.output, seekResult.output);\n        }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: mixed next/seek\");\n      }\n\n      // test mixed next/seek\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter \" + iter);\n        }\n        // reset:\n        fstEnum = new IntsRefFSTEnum<T>(fst);\n        int upto = -1;\n        while(true) {\n          boolean isDone = false;\n          if (upto == pairs.size()-1 || random.nextBoolean()) {\n            // next\n            upto++;\n            if (VERBOSE) {\n              System.out.println(\"  do next\");\n            }\n            isDone = fstEnum.next() == null;\n          } else if (upto != -1 && upto < 0.75 * pairs.size() && random.nextBoolean()) {\n            int attempt = 0;\n            for(;attempt<10;attempt++) {\n              IntsRef term = toIntsRef(getRandomString(), inputMode);\n              if (!termsMap.containsKey(term) && term.compareTo(pairs.get(upto).input) > 0) {\n                int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n                assert pos < 0;\n                upto = -(pos+1);\n\n                if (random.nextBoolean()) {\n                  upto--;\n                  assertTrue(upto != -1);\n                  if (VERBOSE) {\n                    System.out.println(\"  do non-exist seekFloor(\" + inputToString(inputMode, term) + \")\");\n                  }\n                  isDone = fstEnum.seekFloor(term) == null;\n                } else {\n                  if (VERBOSE) {\n                    System.out.println(\"  do non-exist seekCeil(\" + inputToString(inputMode, term) + \")\");\n                  }\n                  isDone = fstEnum.seekCeil(term) == null;\n                }\n\n                break;\n              }\n            }\n            if (attempt == 10) {\n              continue;\n            }\n            \n          } else {\n            final int inc = random.nextInt(pairs.size() - upto - 1);\n            upto += inc;\n            if (upto == -1) {\n              upto = 0;\n            }\n\n            if (random.nextBoolean()) {\n              if (VERBOSE) {\n                System.out.println(\"  do advanceCeil(\" + inputToString(inputMode, pairs.get(upto).input) + \")\");\n              }\n              isDone = fstEnum.seekCeil(pairs.get(upto).input) == null;\n            } else {\n              if (VERBOSE) {\n                System.out.println(\"  do advanceFloor(\" + inputToString(inputMode, pairs.get(upto).input) + \")\");\n              }\n              isDone = fstEnum.seekFloor(pairs.get(upto).input) == null;\n            }\n          }\n          if (VERBOSE) {\n            if (!isDone) {\n              System.out.println(\"    got \" + inputToString(inputMode, fstEnum.current().input));\n            } else {\n              System.out.println(\"    got null\");\n            }\n          }\n\n          if (upto == pairs.size()) {\n            assertTrue(isDone);\n            break;\n          } else {\n            assertFalse(isDone);\n            assertEquals(pairs.get(upto).input, fstEnum.current().input);\n            assertEquals(pairs.get(upto).output, fstEnum.current().output);\n\n            /*\n            if (upto < pairs.size()-1) {\n              int tryCount = 0;\n              while(tryCount < 10) {\n                final IntsRef t = toIntsRef(getRandomString(), inputMode);\n                if (pairs.get(upto).input.compareTo(t) < 0) {\n                  final boolean expected = t.compareTo(pairs.get(upto+1).input) < 0;\n                  if (VERBOSE) {\n                    System.out.println(\"TEST: call beforeNext(\" + inputToString(inputMode, t) + \"); current=\" + inputToString(inputMode, pairs.get(upto).input) + \" next=\" + inputToString(inputMode, pairs.get(upto+1).input) + \" expected=\" + expected);\n                  }\n                  assertEquals(expected, fstEnum.beforeNext(t));\n                  break;\n                }\n                tryCount++;\n              }\n            }\n            */\n          }\n        }\n      }\n    }\n\n","sourceOld":"    // FST is complete\n    private void verifyUnPruned(int inputMode, FST<T> fst) throws IOException {\n\n      if (pairs.size() == 0) {\n        assertNull(fst);\n        return;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: now verify \" + pairs.size() + \" terms\");\n        for(InputOutput<T> pair : pairs) {\n          assertNotNull(pair);\n          assertNotNull(pair.input);\n          assertNotNull(pair.output);\n          System.out.println(\"  \" + inputToString(inputMode, pair.input) + \": \" + outputs.outputToString(pair.output));\n        }\n      }\n\n      assertNotNull(fst);\n\n      // visit valid paris in order -- make sure all words\n      // are accepted, and FSTEnum's next() steps through\n      // them correctly\n      if (VERBOSE) {\n        System.out.println(\"TEST: check valid terms/next()\");\n      }\n      {\n        IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n        for(InputOutput<T> pair : pairs) {\n          IntsRef term = pair.input;\n          if (VERBOSE) {\n            System.out.println(\"TEST: check term=\" + inputToString(inputMode, term) + \" output=\" + fst.outputs.outputToString(pair.output));\n          }\n          Object output = run(fst, term, null);\n\n          assertNotNull(\"term \" + inputToString(inputMode, term) + \" is not accepted\", output);\n          assertEquals(output, pair.output);\n\n          // verify enum's next\n          IntsRefFSTEnum.InputOutput<T> t = fstEnum.next();\n          assertNotNull(t);\n          assertEquals(\"expected input=\" + inputToString(inputMode, term) + \" but fstEnum returned \" + inputToString(inputMode, t.input), term, t.input);\n          assertEquals(pair.output, t.output);\n        }\n        assertNull(fstEnum.next());\n      }\n\n      final Map<IntsRef,T> termsMap = new HashMap<IntsRef,T>();\n      for(InputOutput<T> pair : pairs) {\n        termsMap.put(pair.input, pair.output);\n      }\n\n      // find random matching word and make sure it's valid\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify random accepted terms\");\n      }\n      final IntsRef scratch = new IntsRef(10);\n      for(int iter=0;iter<500*RANDOM_MULTIPLIER;iter++) {\n        T output = randomAcceptedWord(fst, scratch);\n        assertTrue(\"accepted word \" + inputToString(inputMode, scratch) + \" is not valid\", termsMap.containsKey(scratch));\n        assertEquals(termsMap.get(scratch), output);\n      }\n    \n      // test IntsRefFSTEnum.seek:\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify seek\");\n      }\n      IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        if (random.nextBoolean()) {\n          // seek to term that doesn't exist:\n          while(true) {\n            final IntsRef term = toIntsRef(getRandomString(), inputMode);\n            int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n            if (pos < 0) {\n              pos = -(pos+1);\n              // ok doesn't exist\n              //System.out.println(\"  seek \" + inputToString(inputMode, term));\n              final IntsRefFSTEnum.InputOutput<T> seekResult;\n              if (random.nextBoolean()) {\n                if (VERBOSE) {\n                  System.out.println(\"  do non-exist seekFloor term=\" + inputToString(inputMode, term));\n                }\n                seekResult = fstEnum.seekFloor(term);\n                pos--;\n              } else {\n                if (VERBOSE) {\n                  System.out.println(\"  do non-exist seekCeil term=\" + inputToString(inputMode, term));\n                }\n                seekResult = fstEnum.seekCeil(term);\n              }\n\n              if (pos != -1 && pos < pairs.size()) {\n                //System.out.println(\"    got \" + inputToString(inputMode,seekResult.input) + \" output=\" + fst.outputs.outputToString(seekResult.output));\n                assertNotNull(\"got null but expected term=\" + inputToString(inputMode, pairs.get(pos).input), seekResult);\n                if (VERBOSE) {\n                  System.out.println(\"    got \" + inputToString(inputMode, seekResult.input));\n                }\n                assertEquals(\"expected \" + inputToString(inputMode, pairs.get(pos).input) + \" but got \" + inputToString(inputMode, seekResult.input), pairs.get(pos).input, seekResult.input);\n                assertEquals(pairs.get(pos).output, seekResult.output);\n              } else {\n                // seeked before start or beyond end\n                //System.out.println(\"seek=\" + seekTerm);\n                assertNull(\"expected null but got \" + (seekResult==null ? \"null\" : inputToString(inputMode, seekResult.input)), seekResult);\n                if (VERBOSE) {\n                  System.out.println(\"    got null\");\n                }\n              }\n\n              break;\n            }\n          }\n        } else {\n          // seek to term that does exist:\n          InputOutput<T> pair = pairs.get(random.nextInt(pairs.size()));\n          final IntsRefFSTEnum.InputOutput<T> seekResult;\n          if (random.nextBoolean()) {\n            if (VERBOSE) {\n              System.out.println(\"  do exists seekFloor \" + inputToString(inputMode, pair.input));\n            }\n            seekResult = fstEnum.seekFloor(pair.input);\n          } else {\n            if (VERBOSE) {\n              System.out.println(\"  do exists seekCeil \" + inputToString(inputMode, pair.input));\n            }\n            seekResult = fstEnum.seekCeil(pair.input);\n          }\n          assertNotNull(seekResult);\n          assertEquals(\"got \" + inputToString(inputMode, seekResult.input) + \" but expected \" + inputToString(inputMode, pair.input), pair.input, seekResult.input);\n          assertEquals(pair.output, seekResult.output);\n        }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: mixed next/seek\");\n      }\n\n      // test mixed next/seek\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter \" + iter);\n        }\n        // reset:\n        fstEnum = new IntsRefFSTEnum<T>(fst);\n        int upto = -1;\n        while(true) {\n          boolean isDone = false;\n          if (upto == pairs.size()-1 || random.nextBoolean()) {\n            // next\n            upto++;\n            if (VERBOSE) {\n              System.out.println(\"  do next\");\n            }\n            isDone = fstEnum.next() == null;\n          } else if (upto != -1 && upto < 0.75 * pairs.size() && random.nextBoolean()) {\n            int attempt = 0;\n            for(;attempt<10;attempt++) {\n              IntsRef term = toIntsRef(getRandomString(), inputMode);\n              if (!termsMap.containsKey(term) && term.compareTo(pairs.get(upto).input) > 0) {\n                int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n                assert pos < 0;\n                upto = -(pos+1);\n\n                if (random.nextBoolean()) {\n                  upto--;\n                  assertTrue(upto != -1);\n                  if (VERBOSE) {\n                    System.out.println(\"  do non-exist seekFloor(\" + inputToString(inputMode, term) + \")\");\n                  }\n                  isDone = fstEnum.seekFloor(term) == null;\n                } else {\n                  if (VERBOSE) {\n                    System.out.println(\"  do non-exist seekCeil(\" + inputToString(inputMode, term) + \")\");\n                  }\n                  isDone = fstEnum.seekCeil(term) == null;\n                }\n\n                break;\n              }\n            }\n            if (attempt == 10) {\n              continue;\n            }\n            \n          } else {\n            final int inc = random.nextInt(pairs.size() - upto - 1);\n            upto += inc;\n            if (upto == -1) {\n              upto = 0;\n            }\n\n            if (random.nextBoolean()) {\n              if (VERBOSE) {\n                System.out.println(\"  do advanceCeil(\" + inputToString(inputMode, pairs.get(upto).input) + \")\");\n              }\n              isDone = fstEnum.seekCeil(pairs.get(upto).input) == null;\n            } else {\n              if (VERBOSE) {\n                System.out.println(\"  do advanceFloor(\" + inputToString(inputMode, pairs.get(upto).input) + \")\");\n              }\n              isDone = fstEnum.seekFloor(pairs.get(upto).input) == null;\n            }\n          }\n          if (VERBOSE) {\n            if (!isDone) {\n              System.out.println(\"    got \" + inputToString(inputMode, fstEnum.current().input));\n            } else {\n              System.out.println(\"    got null\");\n            }\n          }\n\n          if (upto == pairs.size()) {\n            assertTrue(isDone);\n            break;\n          } else {\n            assertFalse(isDone);\n            assertEquals(pairs.get(upto).input, fstEnum.current().input);\n            assertEquals(pairs.get(upto).output, fstEnum.current().output);\n\n            /*\n            if (upto < pairs.size()-1) {\n              int tryCount = 0;\n              while(tryCount < 10) {\n                final IntsRef t = toIntsRef(getRandomString(), inputMode);\n                if (pairs.get(upto).input.compareTo(t) < 0) {\n                  final boolean expected = t.compareTo(pairs.get(upto+1).input) < 0;\n                  if (VERBOSE) {\n                    System.out.println(\"TEST: call beforeNext(\" + inputToString(inputMode, t) + \"); current=\" + inputToString(inputMode, pairs.get(upto).input) + \" next=\" + inputToString(inputMode, pairs.get(upto+1).input) + \" expected=\" + expected);\n                  }\n                  assertEquals(expected, fstEnum.beforeNext(t));\n                  break;\n                }\n                tryCount++;\n              }\n            }\n            */\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.FSTTester#verifyUnPruned(int,FST[T]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#verifyUnPruned(int,FST[T]).mjava","sourceNew":"    // FST is complete\n    private void verifyUnPruned(int inputMode, FST<T> fst) throws IOException {\n\n      if (pairs.size() == 0) {\n        assertNull(fst);\n        return;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: now verify \" + pairs.size() + \" terms\");\n        for(InputOutput<T> pair : pairs) {\n          assertNotNull(pair);\n          assertNotNull(pair.input);\n          assertNotNull(pair.output);\n          System.out.println(\"  \" + inputToString(inputMode, pair.input) + \": \" + outputs.outputToString(pair.output));\n        }\n      }\n\n      assertNotNull(fst);\n\n      // visit valid paris in order -- make sure all words\n      // are accepted, and FSTEnum's next() steps through\n      // them correctly\n      if (VERBOSE) {\n        System.out.println(\"TEST: check valid terms/next()\");\n      }\n      {\n        IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n        for(InputOutput<T> pair : pairs) {\n          IntsRef term = pair.input;\n          if (VERBOSE) {\n            System.out.println(\"TEST: check term=\" + inputToString(inputMode, term) + \" output=\" + fst.outputs.outputToString(pair.output));\n          }\n          Object output = run(fst, term, null);\n\n          assertNotNull(\"term \" + inputToString(inputMode, term) + \" is not accepted\", output);\n          assertEquals(pair.output, output);\n\n          // verify enum's next\n          IntsRefFSTEnum.InputOutput<T> t = fstEnum.next();\n          assertNotNull(t);\n          assertEquals(\"expected input=\" + inputToString(inputMode, term) + \" but fstEnum returned \" + inputToString(inputMode, t.input), term, t.input);\n          assertEquals(pair.output, t.output);\n        }\n        assertNull(fstEnum.next());\n      }\n\n      final Map<IntsRef,T> termsMap = new HashMap<IntsRef,T>();\n      for(InputOutput<T> pair : pairs) {\n        termsMap.put(pair.input, pair.output);\n      }\n\n      // find random matching word and make sure it's valid\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify random accepted terms\");\n      }\n      final IntsRef scratch = new IntsRef(10);\n      for(int iter=0;iter<500*RANDOM_MULTIPLIER;iter++) {\n        T output = randomAcceptedWord(fst, scratch);\n        assertTrue(\"accepted word \" + inputToString(inputMode, scratch) + \" is not valid\", termsMap.containsKey(scratch));\n        assertEquals(termsMap.get(scratch), output);\n      }\n    \n      // test IntsRefFSTEnum.seek:\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify seek\");\n      }\n      IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        if (random.nextBoolean()) {\n          // seek to term that doesn't exist:\n          while(true) {\n            final IntsRef term = toIntsRef(getRandomString(), inputMode);\n            int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n            if (pos < 0) {\n              pos = -(pos+1);\n              // ok doesn't exist\n              //System.out.println(\"  seek \" + inputToString(inputMode, term));\n              final IntsRefFSTEnum.InputOutput<T> seekResult;\n              if (random.nextBoolean()) {\n                if (VERBOSE) {\n                  System.out.println(\"  do non-exist seekFloor term=\" + inputToString(inputMode, term));\n                }\n                seekResult = fstEnum.seekFloor(term);\n                pos--;\n              } else {\n                if (VERBOSE) {\n                  System.out.println(\"  do non-exist seekCeil term=\" + inputToString(inputMode, term));\n                }\n                seekResult = fstEnum.seekCeil(term);\n              }\n\n              if (pos != -1 && pos < pairs.size()) {\n                //System.out.println(\"    got \" + inputToString(inputMode,seekResult.input) + \" output=\" + fst.outputs.outputToString(seekResult.output));\n                assertNotNull(\"got null but expected term=\" + inputToString(inputMode, pairs.get(pos).input), seekResult);\n                if (VERBOSE) {\n                  System.out.println(\"    got \" + inputToString(inputMode, seekResult.input));\n                }\n                assertEquals(\"expected \" + inputToString(inputMode, pairs.get(pos).input) + \" but got \" + inputToString(inputMode, seekResult.input), pairs.get(pos).input, seekResult.input);\n                assertEquals(pairs.get(pos).output, seekResult.output);\n              } else {\n                // seeked before start or beyond end\n                //System.out.println(\"seek=\" + seekTerm);\n                assertNull(\"expected null but got \" + (seekResult==null ? \"null\" : inputToString(inputMode, seekResult.input)), seekResult);\n                if (VERBOSE) {\n                  System.out.println(\"    got null\");\n                }\n              }\n\n              break;\n            }\n          }\n        } else {\n          // seek to term that does exist:\n          InputOutput<T> pair = pairs.get(random.nextInt(pairs.size()));\n          final IntsRefFSTEnum.InputOutput<T> seekResult;\n          if (random.nextBoolean()) {\n            if (VERBOSE) {\n              System.out.println(\"  do exists seekFloor \" + inputToString(inputMode, pair.input));\n            }\n            seekResult = fstEnum.seekFloor(pair.input);\n          } else {\n            if (VERBOSE) {\n              System.out.println(\"  do exists seekCeil \" + inputToString(inputMode, pair.input));\n            }\n            seekResult = fstEnum.seekCeil(pair.input);\n          }\n          assertNotNull(seekResult);\n          assertEquals(\"got \" + inputToString(inputMode, seekResult.input) + \" but expected \" + inputToString(inputMode, pair.input), pair.input, seekResult.input);\n          assertEquals(pair.output, seekResult.output);\n        }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: mixed next/seek\");\n      }\n\n      // test mixed next/seek\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter \" + iter);\n        }\n        // reset:\n        fstEnum = new IntsRefFSTEnum<T>(fst);\n        int upto = -1;\n        while(true) {\n          boolean isDone = false;\n          if (upto == pairs.size()-1 || random.nextBoolean()) {\n            // next\n            upto++;\n            if (VERBOSE) {\n              System.out.println(\"  do next\");\n            }\n            isDone = fstEnum.next() == null;\n          } else if (upto != -1 && upto < 0.75 * pairs.size() && random.nextBoolean()) {\n            int attempt = 0;\n            for(;attempt<10;attempt++) {\n              IntsRef term = toIntsRef(getRandomString(), inputMode);\n              if (!termsMap.containsKey(term) && term.compareTo(pairs.get(upto).input) > 0) {\n                int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n                assert pos < 0;\n                upto = -(pos+1);\n\n                if (random.nextBoolean()) {\n                  upto--;\n                  assertTrue(upto != -1);\n                  if (VERBOSE) {\n                    System.out.println(\"  do non-exist seekFloor(\" + inputToString(inputMode, term) + \")\");\n                  }\n                  isDone = fstEnum.seekFloor(term) == null;\n                } else {\n                  if (VERBOSE) {\n                    System.out.println(\"  do non-exist seekCeil(\" + inputToString(inputMode, term) + \")\");\n                  }\n                  isDone = fstEnum.seekCeil(term) == null;\n                }\n\n                break;\n              }\n            }\n            if (attempt == 10) {\n              continue;\n            }\n            \n          } else {\n            final int inc = random.nextInt(pairs.size() - upto - 1);\n            upto += inc;\n            if (upto == -1) {\n              upto = 0;\n            }\n\n            if (random.nextBoolean()) {\n              if (VERBOSE) {\n                System.out.println(\"  do advanceCeil(\" + inputToString(inputMode, pairs.get(upto).input) + \")\");\n              }\n              isDone = fstEnum.seekCeil(pairs.get(upto).input) == null;\n            } else {\n              if (VERBOSE) {\n                System.out.println(\"  do advanceFloor(\" + inputToString(inputMode, pairs.get(upto).input) + \")\");\n              }\n              isDone = fstEnum.seekFloor(pairs.get(upto).input) == null;\n            }\n          }\n          if (VERBOSE) {\n            if (!isDone) {\n              System.out.println(\"    got \" + inputToString(inputMode, fstEnum.current().input));\n            } else {\n              System.out.println(\"    got null\");\n            }\n          }\n\n          if (upto == pairs.size()) {\n            assertTrue(isDone);\n            break;\n          } else {\n            assertFalse(isDone);\n            assertEquals(pairs.get(upto).input, fstEnum.current().input);\n            assertEquals(pairs.get(upto).output, fstEnum.current().output);\n\n            /*\n            if (upto < pairs.size()-1) {\n              int tryCount = 0;\n              while(tryCount < 10) {\n                final IntsRef t = toIntsRef(getRandomString(), inputMode);\n                if (pairs.get(upto).input.compareTo(t) < 0) {\n                  final boolean expected = t.compareTo(pairs.get(upto+1).input) < 0;\n                  if (VERBOSE) {\n                    System.out.println(\"TEST: call beforeNext(\" + inputToString(inputMode, t) + \"); current=\" + inputToString(inputMode, pairs.get(upto).input) + \" next=\" + inputToString(inputMode, pairs.get(upto+1).input) + \" expected=\" + expected);\n                  }\n                  assertEquals(expected, fstEnum.beforeNext(t));\n                  break;\n                }\n                tryCount++;\n              }\n            }\n            */\n          }\n        }\n      }\n    }\n\n","sourceOld":"    // FST is complete\n    private void verifyUnPruned(int inputMode, FST<T> fst) throws IOException {\n\n      if (pairs.size() == 0) {\n        assertNull(fst);\n        return;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: now verify \" + pairs.size() + \" terms\");\n        for(InputOutput<T> pair : pairs) {\n          assertNotNull(pair);\n          assertNotNull(pair.input);\n          assertNotNull(pair.output);\n          System.out.println(\"  \" + inputToString(inputMode, pair.input) + \": \" + outputs.outputToString(pair.output));\n        }\n      }\n\n      assertNotNull(fst);\n\n      // visit valid paris in order -- make sure all words\n      // are accepted, and FSTEnum's next() steps through\n      // them correctly\n      if (VERBOSE) {\n        System.out.println(\"TEST: check valid terms/next()\");\n      }\n      {\n        IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n        for(InputOutput<T> pair : pairs) {\n          IntsRef term = pair.input;\n          if (VERBOSE) {\n            System.out.println(\"TEST: check term=\" + inputToString(inputMode, term) + \" output=\" + fst.outputs.outputToString(pair.output));\n          }\n          Object output = run(fst, term, null);\n\n          assertNotNull(\"term \" + inputToString(inputMode, term) + \" is not accepted\", output);\n          assertEquals(pair.output, output);\n\n          // verify enum's next\n          IntsRefFSTEnum.InputOutput<T> t = fstEnum.next();\n          assertNotNull(t);\n          assertEquals(\"expected input=\" + inputToString(inputMode, term) + \" but fstEnum returned \" + inputToString(inputMode, t.input), term, t.input);\n          assertEquals(pair.output, t.output);\n        }\n        assertNull(fstEnum.next());\n      }\n\n      final Map<IntsRef,T> termsMap = new HashMap<IntsRef,T>();\n      for(InputOutput<T> pair : pairs) {\n        termsMap.put(pair.input, pair.output);\n      }\n\n      // find random matching word and make sure it's valid\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify random accepted terms\");\n      }\n      final IntsRef scratch = new IntsRef(10);\n      for(int iter=0;iter<500*RANDOM_MULTIPLIER;iter++) {\n        T output = randomAcceptedWord(fst, scratch);\n        assertTrue(\"accepted word \" + inputToString(inputMode, scratch) + \" is not valid\", termsMap.containsKey(scratch));\n        assertEquals(termsMap.get(scratch), output);\n      }\n    \n      // test IntsRefFSTEnum.seek:\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify seek\");\n      }\n      IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        if (random.nextBoolean()) {\n          // seek to term that doesn't exist:\n          while(true) {\n            final IntsRef term = toIntsRef(getRandomString(), inputMode);\n            int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n            if (pos < 0) {\n              pos = -(pos+1);\n              // ok doesn't exist\n              //System.out.println(\"  seek \" + inputToString(inputMode, term));\n              final IntsRefFSTEnum.InputOutput<T> seekResult;\n              if (random.nextBoolean()) {\n                if (VERBOSE) {\n                  System.out.println(\"  do non-exist seekFloor term=\" + inputToString(inputMode, term));\n                }\n                seekResult = fstEnum.seekFloor(term);\n                pos--;\n              } else {\n                if (VERBOSE) {\n                  System.out.println(\"  do non-exist seekCeil term=\" + inputToString(inputMode, term));\n                }\n                seekResult = fstEnum.seekCeil(term);\n              }\n\n              if (pos != -1 && pos < pairs.size()) {\n                //System.out.println(\"    got \" + inputToString(inputMode,seekResult.input) + \" output=\" + fst.outputs.outputToString(seekResult.output));\n                assertNotNull(\"got null but expected term=\" + inputToString(inputMode, pairs.get(pos).input), seekResult);\n                if (VERBOSE) {\n                  System.out.println(\"    got \" + inputToString(inputMode, seekResult.input));\n                }\n                assertEquals(\"expected \" + inputToString(inputMode, pairs.get(pos).input) + \" but got \" + inputToString(inputMode, seekResult.input), pairs.get(pos).input, seekResult.input);\n                assertEquals(pairs.get(pos).output, seekResult.output);\n              } else {\n                // seeked before start or beyond end\n                //System.out.println(\"seek=\" + seekTerm);\n                assertNull(\"expected null but got \" + (seekResult==null ? \"null\" : inputToString(inputMode, seekResult.input)), seekResult);\n                if (VERBOSE) {\n                  System.out.println(\"    got null\");\n                }\n              }\n\n              break;\n            }\n          }\n        } else {\n          // seek to term that does exist:\n          InputOutput<T> pair = pairs.get(random.nextInt(pairs.size()));\n          final IntsRefFSTEnum.InputOutput<T> seekResult;\n          if (random.nextBoolean()) {\n            if (VERBOSE) {\n              System.out.println(\"  do exists seekFloor \" + inputToString(inputMode, pair.input));\n            }\n            seekResult = fstEnum.seekFloor(pair.input);\n          } else {\n            if (VERBOSE) {\n              System.out.println(\"  do exists seekCeil \" + inputToString(inputMode, pair.input));\n            }\n            seekResult = fstEnum.seekCeil(pair.input);\n          }\n          assertNotNull(seekResult);\n          assertEquals(\"got \" + inputToString(inputMode, seekResult.input) + \" but expected \" + inputToString(inputMode, pair.input), pair.input, seekResult.input);\n          assertEquals(pair.output, seekResult.output);\n        }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: mixed next/seek\");\n      }\n\n      // test mixed next/seek\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter \" + iter);\n        }\n        // reset:\n        fstEnum = new IntsRefFSTEnum<T>(fst);\n        int upto = -1;\n        while(true) {\n          boolean isDone = false;\n          if (upto == pairs.size()-1 || random.nextBoolean()) {\n            // next\n            upto++;\n            if (VERBOSE) {\n              System.out.println(\"  do next\");\n            }\n            isDone = fstEnum.next() == null;\n          } else if (upto != -1 && upto < 0.75 * pairs.size() && random.nextBoolean()) {\n            int attempt = 0;\n            for(;attempt<10;attempt++) {\n              IntsRef term = toIntsRef(getRandomString(), inputMode);\n              if (!termsMap.containsKey(term) && term.compareTo(pairs.get(upto).input) > 0) {\n                int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n                assert pos < 0;\n                upto = -(pos+1);\n\n                if (random.nextBoolean()) {\n                  upto--;\n                  assertTrue(upto != -1);\n                  if (VERBOSE) {\n                    System.out.println(\"  do non-exist seekFloor(\" + inputToString(inputMode, term) + \")\");\n                  }\n                  isDone = fstEnum.seekFloor(term) == null;\n                } else {\n                  if (VERBOSE) {\n                    System.out.println(\"  do non-exist seekCeil(\" + inputToString(inputMode, term) + \")\");\n                  }\n                  isDone = fstEnum.seekCeil(term) == null;\n                }\n\n                break;\n              }\n            }\n            if (attempt == 10) {\n              continue;\n            }\n            \n          } else {\n            final int inc = random.nextInt(pairs.size() - upto - 1);\n            upto += inc;\n            if (upto == -1) {\n              upto = 0;\n            }\n\n            if (random.nextBoolean()) {\n              if (VERBOSE) {\n                System.out.println(\"  do advanceCeil(\" + inputToString(inputMode, pairs.get(upto).input) + \")\");\n              }\n              isDone = fstEnum.seekCeil(pairs.get(upto).input) == null;\n            } else {\n              if (VERBOSE) {\n                System.out.println(\"  do advanceFloor(\" + inputToString(inputMode, pairs.get(upto).input) + \")\");\n              }\n              isDone = fstEnum.seekFloor(pairs.get(upto).input) == null;\n            }\n          }\n          if (VERBOSE) {\n            if (!isDone) {\n              System.out.println(\"    got \" + inputToString(inputMode, fstEnum.current().input));\n            } else {\n              System.out.println(\"    got null\");\n            }\n          }\n\n          if (upto == pairs.size()) {\n            assertTrue(isDone);\n            break;\n          } else {\n            assertFalse(isDone);\n            assertEquals(pairs.get(upto).input, fstEnum.current().input);\n            assertEquals(pairs.get(upto).output, fstEnum.current().output);\n\n            /*\n            if (upto < pairs.size()-1) {\n              int tryCount = 0;\n              while(tryCount < 10) {\n                final IntsRef t = toIntsRef(getRandomString(), inputMode);\n                if (pairs.get(upto).input.compareTo(t) < 0) {\n                  final boolean expected = t.compareTo(pairs.get(upto+1).input) < 0;\n                  if (VERBOSE) {\n                    System.out.println(\"TEST: call beforeNext(\" + inputToString(inputMode, t) + \"); current=\" + inputToString(inputMode, pairs.get(upto).input) + \" next=\" + inputToString(inputMode, pairs.get(upto+1).input) + \" expected=\" + expected);\n                  }\n                  assertEquals(expected, fstEnum.beforeNext(t));\n                  break;\n                }\n                tryCount++;\n              }\n            }\n            */\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.FSTTester#verifyUnPruned(int,FST[T]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#verifyUnPruned(int,FST[T]).mjava","sourceNew":"    // FST is complete\n    private void verifyUnPruned(int inputMode, FST<T> fst) throws IOException {\n\n      if (pairs.size() == 0) {\n        assertNull(fst);\n        return;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: now verify \" + pairs.size() + \" terms\");\n        for(InputOutput<T> pair : pairs) {\n          assertNotNull(pair);\n          assertNotNull(pair.input);\n          assertNotNull(pair.output);\n          System.out.println(\"  \" + inputToString(inputMode, pair.input) + \": \" + outputs.outputToString(pair.output));\n        }\n      }\n\n      assertNotNull(fst);\n\n      // visit valid paris in order -- make sure all words\n      // are accepted, and FSTEnum's next() steps through\n      // them correctly\n      if (VERBOSE) {\n        System.out.println(\"TEST: check valid terms/next()\");\n      }\n      {\n        IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n        for(InputOutput<T> pair : pairs) {\n          IntsRef term = pair.input;\n          if (VERBOSE) {\n            System.out.println(\"TEST: check term=\" + inputToString(inputMode, term) + \" output=\" + fst.outputs.outputToString(pair.output));\n          }\n          Object output = run(fst, term, null);\n\n          assertNotNull(\"term \" + inputToString(inputMode, term) + \" is not accepted\", output);\n          assertEquals(pair.output, output);\n\n          // verify enum's next\n          IntsRefFSTEnum.InputOutput<T> t = fstEnum.next();\n          assertNotNull(t);\n          assertEquals(\"expected input=\" + inputToString(inputMode, term) + \" but fstEnum returned \" + inputToString(inputMode, t.input), term, t.input);\n          assertEquals(pair.output, t.output);\n        }\n        assertNull(fstEnum.next());\n      }\n\n      final Map<IntsRef,T> termsMap = new HashMap<IntsRef,T>();\n      for(InputOutput<T> pair : pairs) {\n        termsMap.put(pair.input, pair.output);\n      }\n\n      // find random matching word and make sure it's valid\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify random accepted terms\");\n      }\n      final IntsRef scratch = new IntsRef(10);\n      for(int iter=0;iter<500*RANDOM_MULTIPLIER;iter++) {\n        T output = randomAcceptedWord(fst, scratch);\n        assertTrue(\"accepted word \" + inputToString(inputMode, scratch) + \" is not valid\", termsMap.containsKey(scratch));\n        assertEquals(termsMap.get(scratch), output);\n      }\n    \n      // test IntsRefFSTEnum.seek:\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify seek\");\n      }\n      IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        if (random.nextBoolean()) {\n          // seek to term that doesn't exist:\n          while(true) {\n            final IntsRef term = toIntsRef(getRandomString(), inputMode);\n            int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n            if (pos < 0) {\n              pos = -(pos+1);\n              // ok doesn't exist\n              //System.out.println(\"  seek \" + inputToString(inputMode, term));\n              final IntsRefFSTEnum.InputOutput<T> seekResult;\n              if (random.nextBoolean()) {\n                if (VERBOSE) {\n                  System.out.println(\"  do non-exist seekFloor term=\" + inputToString(inputMode, term));\n                }\n                seekResult = fstEnum.seekFloor(term);\n                pos--;\n              } else {\n                if (VERBOSE) {\n                  System.out.println(\"  do non-exist seekCeil term=\" + inputToString(inputMode, term));\n                }\n                seekResult = fstEnum.seekCeil(term);\n              }\n\n              if (pos != -1 && pos < pairs.size()) {\n                //System.out.println(\"    got \" + inputToString(inputMode,seekResult.input) + \" output=\" + fst.outputs.outputToString(seekResult.output));\n                assertNotNull(\"got null but expected term=\" + inputToString(inputMode, pairs.get(pos).input), seekResult);\n                if (VERBOSE) {\n                  System.out.println(\"    got \" + inputToString(inputMode, seekResult.input));\n                }\n                assertEquals(\"expected \" + inputToString(inputMode, pairs.get(pos).input) + \" but got \" + inputToString(inputMode, seekResult.input), pairs.get(pos).input, seekResult.input);\n                assertEquals(pairs.get(pos).output, seekResult.output);\n              } else {\n                // seeked before start or beyond end\n                //System.out.println(\"seek=\" + seekTerm);\n                assertNull(\"expected null but got \" + (seekResult==null ? \"null\" : inputToString(inputMode, seekResult.input)), seekResult);\n                if (VERBOSE) {\n                  System.out.println(\"    got null\");\n                }\n              }\n\n              break;\n            }\n          }\n        } else {\n          // seek to term that does exist:\n          InputOutput<T> pair = pairs.get(random.nextInt(pairs.size()));\n          final IntsRefFSTEnum.InputOutput<T> seekResult;\n          if (random.nextBoolean()) {\n            if (VERBOSE) {\n              System.out.println(\"  do exists seekFloor \" + inputToString(inputMode, pair.input));\n            }\n            seekResult = fstEnum.seekFloor(pair.input);\n          } else {\n            if (VERBOSE) {\n              System.out.println(\"  do exists seekCeil \" + inputToString(inputMode, pair.input));\n            }\n            seekResult = fstEnum.seekCeil(pair.input);\n          }\n          assertNotNull(seekResult);\n          assertEquals(\"got \" + inputToString(inputMode, seekResult.input) + \" but expected \" + inputToString(inputMode, pair.input), pair.input, seekResult.input);\n          assertEquals(pair.output, seekResult.output);\n        }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: mixed next/seek\");\n      }\n\n      // test mixed next/seek\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter \" + iter);\n        }\n        // reset:\n        fstEnum = new IntsRefFSTEnum<T>(fst);\n        int upto = -1;\n        while(true) {\n          boolean isDone = false;\n          if (upto == pairs.size()-1 || random.nextBoolean()) {\n            // next\n            upto++;\n            if (VERBOSE) {\n              System.out.println(\"  do next\");\n            }\n            isDone = fstEnum.next() == null;\n          } else if (upto != -1 && upto < 0.75 * pairs.size() && random.nextBoolean()) {\n            int attempt = 0;\n            for(;attempt<10;attempt++) {\n              IntsRef term = toIntsRef(getRandomString(), inputMode);\n              if (!termsMap.containsKey(term) && term.compareTo(pairs.get(upto).input) > 0) {\n                int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n                assert pos < 0;\n                upto = -(pos+1);\n\n                if (random.nextBoolean()) {\n                  upto--;\n                  assertTrue(upto != -1);\n                  if (VERBOSE) {\n                    System.out.println(\"  do non-exist seekFloor(\" + inputToString(inputMode, term) + \")\");\n                  }\n                  isDone = fstEnum.seekFloor(term) == null;\n                } else {\n                  if (VERBOSE) {\n                    System.out.println(\"  do non-exist seekCeil(\" + inputToString(inputMode, term) + \")\");\n                  }\n                  isDone = fstEnum.seekCeil(term) == null;\n                }\n\n                break;\n              }\n            }\n            if (attempt == 10) {\n              continue;\n            }\n            \n          } else {\n            final int inc = random.nextInt(pairs.size() - upto - 1);\n            upto += inc;\n            if (upto == -1) {\n              upto = 0;\n            }\n\n            if (random.nextBoolean()) {\n              if (VERBOSE) {\n                System.out.println(\"  do advanceCeil(\" + inputToString(inputMode, pairs.get(upto).input) + \")\");\n              }\n              isDone = fstEnum.seekCeil(pairs.get(upto).input) == null;\n            } else {\n              if (VERBOSE) {\n                System.out.println(\"  do advanceFloor(\" + inputToString(inputMode, pairs.get(upto).input) + \")\");\n              }\n              isDone = fstEnum.seekFloor(pairs.get(upto).input) == null;\n            }\n          }\n          if (VERBOSE) {\n            if (!isDone) {\n              System.out.println(\"    got \" + inputToString(inputMode, fstEnum.current().input));\n            } else {\n              System.out.println(\"    got null\");\n            }\n          }\n\n          if (upto == pairs.size()) {\n            assertTrue(isDone);\n            break;\n          } else {\n            assertFalse(isDone);\n            assertEquals(pairs.get(upto).input, fstEnum.current().input);\n            assertEquals(pairs.get(upto).output, fstEnum.current().output);\n\n            /*\n            if (upto < pairs.size()-1) {\n              int tryCount = 0;\n              while(tryCount < 10) {\n                final IntsRef t = toIntsRef(getRandomString(), inputMode);\n                if (pairs.get(upto).input.compareTo(t) < 0) {\n                  final boolean expected = t.compareTo(pairs.get(upto+1).input) < 0;\n                  if (VERBOSE) {\n                    System.out.println(\"TEST: call beforeNext(\" + inputToString(inputMode, t) + \"); current=\" + inputToString(inputMode, pairs.get(upto).input) + \" next=\" + inputToString(inputMode, pairs.get(upto+1).input) + \" expected=\" + expected);\n                  }\n                  assertEquals(expected, fstEnum.beforeNext(t));\n                  break;\n                }\n                tryCount++;\n              }\n            }\n            */\n          }\n        }\n      }\n    }\n\n","sourceOld":"    // FST is complete\n    private void verifyUnPruned(int inputMode, FST<T> fst) throws IOException {\n\n      if (pairs.size() == 0) {\n        assertNull(fst);\n        return;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: now verify \" + pairs.size() + \" terms\");\n        for(InputOutput<T> pair : pairs) {\n          assertNotNull(pair);\n          assertNotNull(pair.input);\n          assertNotNull(pair.output);\n          System.out.println(\"  \" + inputToString(inputMode, pair.input) + \": \" + outputs.outputToString(pair.output));\n        }\n      }\n\n      assertNotNull(fst);\n\n      // visit valid paris in order -- make sure all words\n      // are accepted, and FSTEnum's next() steps through\n      // them correctly\n      if (VERBOSE) {\n        System.out.println(\"TEST: check valid terms/next()\");\n      }\n      {\n        IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n        for(InputOutput<T> pair : pairs) {\n          IntsRef term = pair.input;\n          if (VERBOSE) {\n            System.out.println(\"TEST: check term=\" + inputToString(inputMode, term) + \" output=\" + fst.outputs.outputToString(pair.output));\n          }\n          Object output = run(fst, term, null);\n\n          assertNotNull(\"term \" + inputToString(inputMode, term) + \" is not accepted\", output);\n          assertEquals(pair.output, output);\n\n          // verify enum's next\n          IntsRefFSTEnum.InputOutput<T> t = fstEnum.next();\n          assertNotNull(t);\n          assertEquals(\"expected input=\" + inputToString(inputMode, term) + \" but fstEnum returned \" + inputToString(inputMode, t.input), term, t.input);\n          assertEquals(pair.output, t.output);\n        }\n        assertNull(fstEnum.next());\n      }\n\n      final Map<IntsRef,T> termsMap = new HashMap<IntsRef,T>();\n      for(InputOutput<T> pair : pairs) {\n        termsMap.put(pair.input, pair.output);\n      }\n\n      // find random matching word and make sure it's valid\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify random accepted terms\");\n      }\n      final IntsRef scratch = new IntsRef(10);\n      for(int iter=0;iter<500*RANDOM_MULTIPLIER;iter++) {\n        T output = randomAcceptedWord(fst, scratch);\n        assertTrue(\"accepted word \" + inputToString(inputMode, scratch) + \" is not valid\", termsMap.containsKey(scratch));\n        assertEquals(termsMap.get(scratch), output);\n      }\n    \n      // test IntsRefFSTEnum.seek:\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify seek\");\n      }\n      IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        if (random.nextBoolean()) {\n          // seek to term that doesn't exist:\n          while(true) {\n            final IntsRef term = toIntsRef(getRandomString(), inputMode);\n            int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n            if (pos < 0) {\n              pos = -(pos+1);\n              // ok doesn't exist\n              //System.out.println(\"  seek \" + inputToString(inputMode, term));\n              final IntsRefFSTEnum.InputOutput<T> seekResult;\n              if (random.nextBoolean()) {\n                if (VERBOSE) {\n                  System.out.println(\"  do non-exist seekFloor term=\" + inputToString(inputMode, term));\n                }\n                seekResult = fstEnum.seekFloor(term);\n                pos--;\n              } else {\n                if (VERBOSE) {\n                  System.out.println(\"  do non-exist seekCeil term=\" + inputToString(inputMode, term));\n                }\n                seekResult = fstEnum.seekCeil(term);\n              }\n\n              if (pos != -1 && pos < pairs.size()) {\n                //System.out.println(\"    got \" + inputToString(inputMode,seekResult.input) + \" output=\" + fst.outputs.outputToString(seekResult.output));\n                assertNotNull(\"got null but expected term=\" + inputToString(inputMode, pairs.get(pos).input), seekResult);\n                if (VERBOSE) {\n                  System.out.println(\"    got \" + inputToString(inputMode, seekResult.input));\n                }\n                assertEquals(\"expected \" + inputToString(inputMode, pairs.get(pos).input) + \" but got \" + inputToString(inputMode, seekResult.input), pairs.get(pos).input, seekResult.input);\n                assertEquals(pairs.get(pos).output, seekResult.output);\n              } else {\n                // seeked before start or beyond end\n                //System.out.println(\"seek=\" + seekTerm);\n                assertNull(\"expected null but got \" + (seekResult==null ? \"null\" : inputToString(inputMode, seekResult.input)), seekResult);\n                if (VERBOSE) {\n                  System.out.println(\"    got null\");\n                }\n              }\n\n              break;\n            }\n          }\n        } else {\n          // seek to term that does exist:\n          InputOutput<T> pair = pairs.get(random.nextInt(pairs.size()));\n          final IntsRefFSTEnum.InputOutput<T> seekResult;\n          if (random.nextBoolean()) {\n            if (VERBOSE) {\n              System.out.println(\"  do exists seekFloor \" + inputToString(inputMode, pair.input));\n            }\n            seekResult = fstEnum.seekFloor(pair.input);\n          } else {\n            if (VERBOSE) {\n              System.out.println(\"  do exists seekCeil \" + inputToString(inputMode, pair.input));\n            }\n            seekResult = fstEnum.seekCeil(pair.input);\n          }\n          assertNotNull(seekResult);\n          assertEquals(\"got \" + inputToString(inputMode, seekResult.input) + \" but expected \" + inputToString(inputMode, pair.input), pair.input, seekResult.input);\n          assertEquals(pair.output, seekResult.output);\n        }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: mixed next/seek\");\n      }\n\n      // test mixed next/seek\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter \" + iter);\n        }\n        // reset:\n        fstEnum = new IntsRefFSTEnum<T>(fst);\n        int upto = -1;\n        while(true) {\n          boolean isDone = false;\n          if (upto == pairs.size()-1 || random.nextBoolean()) {\n            // next\n            upto++;\n            if (VERBOSE) {\n              System.out.println(\"  do next\");\n            }\n            isDone = fstEnum.next() == null;\n          } else if (upto != -1 && upto < 0.75 * pairs.size() && random.nextBoolean()) {\n            int attempt = 0;\n            for(;attempt<10;attempt++) {\n              IntsRef term = toIntsRef(getRandomString(), inputMode);\n              if (!termsMap.containsKey(term) && term.compareTo(pairs.get(upto).input) > 0) {\n                int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n                assert pos < 0;\n                upto = -(pos+1);\n\n                if (random.nextBoolean()) {\n                  upto--;\n                  assertTrue(upto != -1);\n                  if (VERBOSE) {\n                    System.out.println(\"  do non-exist seekFloor(\" + inputToString(inputMode, term) + \")\");\n                  }\n                  isDone = fstEnum.seekFloor(term) == null;\n                } else {\n                  if (VERBOSE) {\n                    System.out.println(\"  do non-exist seekCeil(\" + inputToString(inputMode, term) + \")\");\n                  }\n                  isDone = fstEnum.seekCeil(term) == null;\n                }\n\n                break;\n              }\n            }\n            if (attempt == 10) {\n              continue;\n            }\n            \n          } else {\n            final int inc = random.nextInt(pairs.size() - upto - 1);\n            upto += inc;\n            if (upto == -1) {\n              upto = 0;\n            }\n\n            if (random.nextBoolean()) {\n              if (VERBOSE) {\n                System.out.println(\"  do advanceCeil(\" + inputToString(inputMode, pairs.get(upto).input) + \")\");\n              }\n              isDone = fstEnum.seekCeil(pairs.get(upto).input) == null;\n            } else {\n              if (VERBOSE) {\n                System.out.println(\"  do advanceFloor(\" + inputToString(inputMode, pairs.get(upto).input) + \")\");\n              }\n              isDone = fstEnum.seekFloor(pairs.get(upto).input) == null;\n            }\n          }\n          if (VERBOSE) {\n            if (!isDone) {\n              System.out.println(\"    got \" + inputToString(inputMode, fstEnum.current().input));\n            } else {\n              System.out.println(\"    got null\");\n            }\n          }\n\n          if (upto == pairs.size()) {\n            assertTrue(isDone);\n            break;\n          } else {\n            assertFalse(isDone);\n            assertEquals(pairs.get(upto).input, fstEnum.current().input);\n            assertEquals(pairs.get(upto).output, fstEnum.current().output);\n\n            /*\n            if (upto < pairs.size()-1) {\n              int tryCount = 0;\n              while(tryCount < 10) {\n                final IntsRef t = toIntsRef(getRandomString(), inputMode);\n                if (pairs.get(upto).input.compareTo(t) < 0) {\n                  final boolean expected = t.compareTo(pairs.get(upto+1).input) < 0;\n                  if (VERBOSE) {\n                    System.out.println(\"TEST: call beforeNext(\" + inputToString(inputMode, t) + \"); current=\" + inputToString(inputMode, pairs.get(upto).input) + \" next=\" + inputToString(inputMode, pairs.get(upto+1).input) + \" expected=\" + expected);\n                  }\n                  assertEquals(expected, fstEnum.beforeNext(t));\n                  break;\n                }\n                tryCount++;\n              }\n            }\n            */\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.FSTTester#verifyUnPruned(int,FST[T]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#verifyUnPruned(int,FST[T]).mjava","sourceNew":"    // FST is complete\n    private void verifyUnPruned(int inputMode, FST<T> fst) throws IOException {\n\n      if (pairs.size() == 0) {\n        assertNull(fst);\n        return;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: now verify \" + pairs.size() + \" terms\");\n        for(InputOutput<T> pair : pairs) {\n          assertNotNull(pair);\n          assertNotNull(pair.input);\n          assertNotNull(pair.output);\n          System.out.println(\"  \" + inputToString(inputMode, pair.input) + \": \" + outputs.outputToString(pair.output));\n        }\n      }\n\n      assertNotNull(fst);\n\n      // visit valid paris in order -- make sure all words\n      // are accepted, and FSTEnum's next() steps through\n      // them correctly\n      if (VERBOSE) {\n        System.out.println(\"TEST: check valid terms/next()\");\n      }\n      {\n        IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n        for(InputOutput<T> pair : pairs) {\n          IntsRef term = pair.input;\n          if (VERBOSE) {\n            System.out.println(\"TEST: check term=\" + inputToString(inputMode, term) + \" output=\" + fst.outputs.outputToString(pair.output));\n          }\n          Object output = run(fst, term, null);\n\n          assertNotNull(\"term \" + inputToString(inputMode, term) + \" is not accepted\", output);\n          assertEquals(pair.output, output);\n\n          // verify enum's next\n          IntsRefFSTEnum.InputOutput<T> t = fstEnum.next();\n          assertNotNull(t);\n          assertEquals(\"expected input=\" + inputToString(inputMode, term) + \" but fstEnum returned \" + inputToString(inputMode, t.input), term, t.input);\n          assertEquals(pair.output, t.output);\n        }\n        assertNull(fstEnum.next());\n      }\n\n      final Map<IntsRef,T> termsMap = new HashMap<IntsRef,T>();\n      for(InputOutput<T> pair : pairs) {\n        termsMap.put(pair.input, pair.output);\n      }\n\n      // find random matching word and make sure it's valid\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify random accepted terms\");\n      }\n      final IntsRef scratch = new IntsRef(10);\n      for(int iter=0;iter<500*RANDOM_MULTIPLIER;iter++) {\n        T output = randomAcceptedWord(fst, scratch);\n        assertTrue(\"accepted word \" + inputToString(inputMode, scratch) + \" is not valid\", termsMap.containsKey(scratch));\n        assertEquals(termsMap.get(scratch), output);\n      }\n    \n      // test IntsRefFSTEnum.seek:\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify seek\");\n      }\n      IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        if (random.nextBoolean()) {\n          // seek to term that doesn't exist:\n          while(true) {\n            final IntsRef term = toIntsRef(getRandomString(), inputMode);\n            int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n            if (pos < 0) {\n              pos = -(pos+1);\n              // ok doesn't exist\n              //System.out.println(\"  seek \" + inputToString(inputMode, term));\n              final IntsRefFSTEnum.InputOutput<T> seekResult;\n              if (random.nextBoolean()) {\n                if (VERBOSE) {\n                  System.out.println(\"  do non-exist seekFloor term=\" + inputToString(inputMode, term));\n                }\n                seekResult = fstEnum.seekFloor(term);\n                pos--;\n              } else {\n                if (VERBOSE) {\n                  System.out.println(\"  do non-exist seekCeil term=\" + inputToString(inputMode, term));\n                }\n                seekResult = fstEnum.seekCeil(term);\n              }\n\n              if (pos != -1 && pos < pairs.size()) {\n                //System.out.println(\"    got \" + inputToString(inputMode,seekResult.input) + \" output=\" + fst.outputs.outputToString(seekResult.output));\n                assertNotNull(\"got null but expected term=\" + inputToString(inputMode, pairs.get(pos).input), seekResult);\n                if (VERBOSE) {\n                  System.out.println(\"    got \" + inputToString(inputMode, seekResult.input));\n                }\n                assertEquals(\"expected \" + inputToString(inputMode, pairs.get(pos).input) + \" but got \" + inputToString(inputMode, seekResult.input), pairs.get(pos).input, seekResult.input);\n                assertEquals(pairs.get(pos).output, seekResult.output);\n              } else {\n                // seeked before start or beyond end\n                //System.out.println(\"seek=\" + seekTerm);\n                assertNull(\"expected null but got \" + (seekResult==null ? \"null\" : inputToString(inputMode, seekResult.input)), seekResult);\n                if (VERBOSE) {\n                  System.out.println(\"    got null\");\n                }\n              }\n\n              break;\n            }\n          }\n        } else {\n          // seek to term that does exist:\n          InputOutput<T> pair = pairs.get(random.nextInt(pairs.size()));\n          final IntsRefFSTEnum.InputOutput<T> seekResult;\n          if (random.nextBoolean()) {\n            if (VERBOSE) {\n              System.out.println(\"  do exists seekFloor \" + inputToString(inputMode, pair.input));\n            }\n            seekResult = fstEnum.seekFloor(pair.input);\n          } else {\n            if (VERBOSE) {\n              System.out.println(\"  do exists seekCeil \" + inputToString(inputMode, pair.input));\n            }\n            seekResult = fstEnum.seekCeil(pair.input);\n          }\n          assertNotNull(seekResult);\n          assertEquals(\"got \" + inputToString(inputMode, seekResult.input) + \" but expected \" + inputToString(inputMode, pair.input), pair.input, seekResult.input);\n          assertEquals(pair.output, seekResult.output);\n        }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: mixed next/seek\");\n      }\n\n      // test mixed next/seek\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter \" + iter);\n        }\n        // reset:\n        fstEnum = new IntsRefFSTEnum<T>(fst);\n        int upto = -1;\n        while(true) {\n          boolean isDone = false;\n          if (upto == pairs.size()-1 || random.nextBoolean()) {\n            // next\n            upto++;\n            if (VERBOSE) {\n              System.out.println(\"  do next\");\n            }\n            isDone = fstEnum.next() == null;\n          } else if (upto != -1 && upto < 0.75 * pairs.size() && random.nextBoolean()) {\n            int attempt = 0;\n            for(;attempt<10;attempt++) {\n              IntsRef term = toIntsRef(getRandomString(), inputMode);\n              if (!termsMap.containsKey(term) && term.compareTo(pairs.get(upto).input) > 0) {\n                int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n                assert pos < 0;\n                upto = -(pos+1);\n\n                if (random.nextBoolean()) {\n                  upto--;\n                  assertTrue(upto != -1);\n                  if (VERBOSE) {\n                    System.out.println(\"  do non-exist seekFloor(\" + inputToString(inputMode, term) + \")\");\n                  }\n                  isDone = fstEnum.seekFloor(term) == null;\n                } else {\n                  if (VERBOSE) {\n                    System.out.println(\"  do non-exist seekCeil(\" + inputToString(inputMode, term) + \")\");\n                  }\n                  isDone = fstEnum.seekCeil(term) == null;\n                }\n\n                break;\n              }\n            }\n            if (attempt == 10) {\n              continue;\n            }\n            \n          } else {\n            final int inc = random.nextInt(pairs.size() - upto - 1);\n            upto += inc;\n            if (upto == -1) {\n              upto = 0;\n            }\n\n            if (random.nextBoolean()) {\n              if (VERBOSE) {\n                System.out.println(\"  do advanceCeil(\" + inputToString(inputMode, pairs.get(upto).input) + \")\");\n              }\n              isDone = fstEnum.seekCeil(pairs.get(upto).input) == null;\n            } else {\n              if (VERBOSE) {\n                System.out.println(\"  do advanceFloor(\" + inputToString(inputMode, pairs.get(upto).input) + \")\");\n              }\n              isDone = fstEnum.seekFloor(pairs.get(upto).input) == null;\n            }\n          }\n          if (VERBOSE) {\n            if (!isDone) {\n              System.out.println(\"    got \" + inputToString(inputMode, fstEnum.current().input));\n            } else {\n              System.out.println(\"    got null\");\n            }\n          }\n\n          if (upto == pairs.size()) {\n            assertTrue(isDone);\n            break;\n          } else {\n            assertFalse(isDone);\n            assertEquals(pairs.get(upto).input, fstEnum.current().input);\n            assertEquals(pairs.get(upto).output, fstEnum.current().output);\n\n            /*\n            if (upto < pairs.size()-1) {\n              int tryCount = 0;\n              while(tryCount < 10) {\n                final IntsRef t = toIntsRef(getRandomString(), inputMode);\n                if (pairs.get(upto).input.compareTo(t) < 0) {\n                  final boolean expected = t.compareTo(pairs.get(upto+1).input) < 0;\n                  if (VERBOSE) {\n                    System.out.println(\"TEST: call beforeNext(\" + inputToString(inputMode, t) + \"); current=\" + inputToString(inputMode, pairs.get(upto).input) + \" next=\" + inputToString(inputMode, pairs.get(upto+1).input) + \" expected=\" + expected);\n                  }\n                  assertEquals(expected, fstEnum.beforeNext(t));\n                  break;\n                }\n                tryCount++;\n              }\n            }\n            */\n          }\n        }\n      }\n    }\n\n","sourceOld":"    // FST is complete\n    private void verifyUnPruned(int inputMode, FST<T> fst) throws IOException {\n\n      if (pairs.size() == 0) {\n        assertNull(fst);\n        return;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: now verify \" + pairs.size() + \" terms\");\n        for(InputOutput<T> pair : pairs) {\n          assertNotNull(pair);\n          assertNotNull(pair.input);\n          assertNotNull(pair.output);\n          System.out.println(\"  \" + inputToString(inputMode, pair.input) + \": \" + outputs.outputToString(pair.output));\n        }\n      }\n\n      assertNotNull(fst);\n\n      // visit valid paris in order -- make sure all words\n      // are accepted, and FSTEnum's next() steps through\n      // them correctly\n      if (VERBOSE) {\n        System.out.println(\"TEST: check valid terms/next()\");\n      }\n      {\n        IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n        for(InputOutput<T> pair : pairs) {\n          IntsRef term = pair.input;\n          if (VERBOSE) {\n            System.out.println(\"TEST: check term=\" + inputToString(inputMode, term) + \" output=\" + fst.outputs.outputToString(pair.output));\n          }\n          Object output = run(fst, term, null);\n\n          assertNotNull(\"term \" + inputToString(inputMode, term) + \" is not accepted\", output);\n          assertEquals(pair.output, output);\n\n          // verify enum's next\n          IntsRefFSTEnum.InputOutput<T> t = fstEnum.next();\n          assertNotNull(t);\n          assertEquals(\"expected input=\" + inputToString(inputMode, term) + \" but fstEnum returned \" + inputToString(inputMode, t.input), term, t.input);\n          assertEquals(pair.output, t.output);\n        }\n        assertNull(fstEnum.next());\n      }\n\n      final Map<IntsRef,T> termsMap = new HashMap<IntsRef,T>();\n      for(InputOutput<T> pair : pairs) {\n        termsMap.put(pair.input, pair.output);\n      }\n\n      // find random matching word and make sure it's valid\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify random accepted terms\");\n      }\n      final IntsRef scratch = new IntsRef(10);\n      for(int iter=0;iter<500*RANDOM_MULTIPLIER;iter++) {\n        T output = randomAcceptedWord(fst, scratch);\n        assertTrue(\"accepted word \" + inputToString(inputMode, scratch) + \" is not valid\", termsMap.containsKey(scratch));\n        assertEquals(termsMap.get(scratch), output);\n      }\n    \n      // test IntsRefFSTEnum.seek:\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify seek\");\n      }\n      IntsRefFSTEnum<T> fstEnum = new IntsRefFSTEnum<T>(fst);\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        if (random.nextBoolean()) {\n          // seek to term that doesn't exist:\n          while(true) {\n            final IntsRef term = toIntsRef(getRandomString(), inputMode);\n            int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n            if (pos < 0) {\n              pos = -(pos+1);\n              // ok doesn't exist\n              //System.out.println(\"  seek \" + inputToString(inputMode, term));\n              final IntsRefFSTEnum.InputOutput<T> seekResult;\n              if (random.nextBoolean()) {\n                if (VERBOSE) {\n                  System.out.println(\"  do non-exist seekFloor term=\" + inputToString(inputMode, term));\n                }\n                seekResult = fstEnum.seekFloor(term);\n                pos--;\n              } else {\n                if (VERBOSE) {\n                  System.out.println(\"  do non-exist seekCeil term=\" + inputToString(inputMode, term));\n                }\n                seekResult = fstEnum.seekCeil(term);\n              }\n\n              if (pos != -1 && pos < pairs.size()) {\n                //System.out.println(\"    got \" + inputToString(inputMode,seekResult.input) + \" output=\" + fst.outputs.outputToString(seekResult.output));\n                assertNotNull(\"got null but expected term=\" + inputToString(inputMode, pairs.get(pos).input), seekResult);\n                if (VERBOSE) {\n                  System.out.println(\"    got \" + inputToString(inputMode, seekResult.input));\n                }\n                assertEquals(\"expected \" + inputToString(inputMode, pairs.get(pos).input) + \" but got \" + inputToString(inputMode, seekResult.input), pairs.get(pos).input, seekResult.input);\n                assertEquals(pairs.get(pos).output, seekResult.output);\n              } else {\n                // seeked before start or beyond end\n                //System.out.println(\"seek=\" + seekTerm);\n                assertNull(\"expected null but got \" + (seekResult==null ? \"null\" : inputToString(inputMode, seekResult.input)), seekResult);\n                if (VERBOSE) {\n                  System.out.println(\"    got null\");\n                }\n              }\n\n              break;\n            }\n          }\n        } else {\n          // seek to term that does exist:\n          InputOutput<T> pair = pairs.get(random.nextInt(pairs.size()));\n          final IntsRefFSTEnum.InputOutput<T> seekResult;\n          if (random.nextBoolean()) {\n            if (VERBOSE) {\n              System.out.println(\"  do exists seekFloor \" + inputToString(inputMode, pair.input));\n            }\n            seekResult = fstEnum.seekFloor(pair.input);\n          } else {\n            if (VERBOSE) {\n              System.out.println(\"  do exists seekCeil \" + inputToString(inputMode, pair.input));\n            }\n            seekResult = fstEnum.seekCeil(pair.input);\n          }\n          assertNotNull(seekResult);\n          assertEquals(\"got \" + inputToString(inputMode, seekResult.input) + \" but expected \" + inputToString(inputMode, pair.input), pair.input, seekResult.input);\n          assertEquals(pair.output, seekResult.output);\n        }\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: mixed next/seek\");\n      }\n\n      // test mixed next/seek\n      for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter \" + iter);\n        }\n        // reset:\n        fstEnum = new IntsRefFSTEnum<T>(fst);\n        int upto = -1;\n        while(true) {\n          boolean isDone = false;\n          if (upto == pairs.size()-1 || random.nextBoolean()) {\n            // next\n            upto++;\n            if (VERBOSE) {\n              System.out.println(\"  do next\");\n            }\n            isDone = fstEnum.next() == null;\n          } else if (upto != -1 && upto < 0.75 * pairs.size() && random.nextBoolean()) {\n            int attempt = 0;\n            for(;attempt<10;attempt++) {\n              IntsRef term = toIntsRef(getRandomString(), inputMode);\n              if (!termsMap.containsKey(term) && term.compareTo(pairs.get(upto).input) > 0) {\n                int pos = Collections.binarySearch(pairs, new InputOutput<T>(term, null));\n                assert pos < 0;\n                upto = -(pos+1);\n\n                if (random.nextBoolean()) {\n                  upto--;\n                  assertTrue(upto != -1);\n                  if (VERBOSE) {\n                    System.out.println(\"  do non-exist seekFloor(\" + inputToString(inputMode, term) + \")\");\n                  }\n                  isDone = fstEnum.seekFloor(term) == null;\n                } else {\n                  if (VERBOSE) {\n                    System.out.println(\"  do non-exist seekCeil(\" + inputToString(inputMode, term) + \")\");\n                  }\n                  isDone = fstEnum.seekCeil(term) == null;\n                }\n\n                break;\n              }\n            }\n            if (attempt == 10) {\n              continue;\n            }\n            \n          } else {\n            final int inc = random.nextInt(pairs.size() - upto - 1);\n            upto += inc;\n            if (upto == -1) {\n              upto = 0;\n            }\n\n            if (random.nextBoolean()) {\n              if (VERBOSE) {\n                System.out.println(\"  do advanceCeil(\" + inputToString(inputMode, pairs.get(upto).input) + \")\");\n              }\n              isDone = fstEnum.seekCeil(pairs.get(upto).input) == null;\n            } else {\n              if (VERBOSE) {\n                System.out.println(\"  do advanceFloor(\" + inputToString(inputMode, pairs.get(upto).input) + \")\");\n              }\n              isDone = fstEnum.seekFloor(pairs.get(upto).input) == null;\n            }\n          }\n          if (VERBOSE) {\n            if (!isDone) {\n              System.out.println(\"    got \" + inputToString(inputMode, fstEnum.current().input));\n            } else {\n              System.out.println(\"    got null\");\n            }\n          }\n\n          if (upto == pairs.size()) {\n            assertTrue(isDone);\n            break;\n          } else {\n            assertFalse(isDone);\n            assertEquals(pairs.get(upto).input, fstEnum.current().input);\n            assertEquals(pairs.get(upto).output, fstEnum.current().output);\n\n            /*\n            if (upto < pairs.size()-1) {\n              int tryCount = 0;\n              while(tryCount < 10) {\n                final IntsRef t = toIntsRef(getRandomString(), inputMode);\n                if (pairs.get(upto).input.compareTo(t) < 0) {\n                  final boolean expected = t.compareTo(pairs.get(upto+1).input) < 0;\n                  if (VERBOSE) {\n                    System.out.println(\"TEST: call beforeNext(\" + inputToString(inputMode, t) + \"); current=\" + inputToString(inputMode, pairs.get(upto).input) + \" next=\" + inputToString(inputMode, pairs.get(upto+1).input) + \" expected=\" + expected);\n                  }\n                  assertEquals(expected, fstEnum.beforeNext(t));\n                  break;\n                }\n                tryCount++;\n              }\n            }\n            */\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","56da903869515527852ee21ea7ef7bfe414cd40d"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["7bb4e4e4a6b66f262115066bbc28b9859f54747e"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"7bb4e4e4a6b66f262115066bbc28b9859f54747e":["56da903869515527852ee21ea7ef7bfe414cd40d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["70ad682703b8585f5d0a637efec044d57ec05efb","7bb4e4e4a6b66f262115066bbc28b9859f54747e"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"56da903869515527852ee21ea7ef7bfe414cd40d":["d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"a3776dccca01c11e7046323cfad46a3b4a471233":["56da903869515527852ee21ea7ef7bfe414cd40d","7bb4e4e4a6b66f262115066bbc28b9859f54747e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["c3a8a449466c1ff7ce2274fe73dab487256964b4","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["70ad682703b8585f5d0a637efec044d57ec05efb"],"7bb4e4e4a6b66f262115066bbc28b9859f54747e":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","7bb4e4e4a6b66f262115066bbc28b9859f54747e","a3776dccca01c11e7046323cfad46a3b4a471233","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}