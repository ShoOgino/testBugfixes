{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsReader.FieldReader.IntersectEnum#pushFrame(int).mjava","commits":[{"id":"0a570bec4aec8585a4eea44849bfb2bc264208c4","date":1371308653,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsReader.FieldReader.IntersectEnum#pushFrame(int).mjava","pathOld":"/dev/null","sourceNew":"      private Frame pushFrame(int state) throws IOException {\n        final Frame f = getFrame(currentFrame == null ? 0 : 1+currentFrame.ord);\n        \n        f.fp = f.fpOrig = currentFrame.lastSubFP;\n        f.prefix = currentFrame.prefix + currentFrame.suffix;\n        // if (DEBUG) System.out.println(\"    pushFrame state=\" + state + \" prefix=\" + f.prefix);\n        f.setState(state);\n\n        // Walk the arc through the index -- we only\n        // \"bother\" with this so we can get the floor data\n        // from the index and skip floor blocks when\n        // possible:\n        FST.Arc<BytesRef> arc = currentFrame.arc;\n        int idx = currentFrame.prefix;\n        assert currentFrame.suffix > 0;\n        BytesRef output = currentFrame.outputPrefix;\n        while (idx < f.prefix) {\n          final int target = term.bytes[idx] & 0xff;\n          // TODO: we could be more efficient for the next()\n          // case by using current arc as starting point,\n          // passed to findTargetArc\n          arc = index.findTargetArc(target, arc, getArc(1+idx), fstReader);\n          assert arc != null;\n          output = fstOutputs.add(output, arc.output);\n          idx++;\n        }\n\n        f.arc = arc;\n        f.outputPrefix = output;\n        assert arc.isFinal();\n        f.load(fstOutputs.add(output, arc.nextFinalOutput));\n        return f;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d01ed6d1df51191983f4dd157aedf5f4650e2b3","date":1376572546,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTreeTermsReader.FieldReader.IntersectEnum#pushFrame(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsReader.FieldReader.IntersectEnum#pushFrame(int).mjava","sourceNew":"      private Frame pushFrame(int state) throws IOException {\n        final Frame f = getFrame(currentFrame == null ? 0 : 1+currentFrame.ord);\n        \n        f.fp = f.fpOrig = currentFrame.lastSubFP;\n        f.prefix = currentFrame.prefix + currentFrame.suffix;\n        // if (DEBUG) System.out.println(\"    pushFrame state=\" + state + \" prefix=\" + f.prefix);\n        f.setState(state);\n\n        // Walk the arc through the index -- we only\n        // \"bother\" with this so we can get the floor data\n        // from the index and skip floor blocks when\n        // possible:\n        FST.Arc<BytesRef> arc = currentFrame.arc;\n        int idx = currentFrame.prefix;\n        assert currentFrame.suffix > 0;\n        BytesRef output = currentFrame.outputPrefix;\n        while (idx < f.prefix) {\n          final int target = term.bytes[idx] & 0xff;\n          // TODO: we could be more efficient for the next()\n          // case by using current arc as starting point,\n          // passed to findTargetArc\n          arc = index.findTargetArc(target, arc, getArc(1+idx), fstReader);\n          assert arc != null;\n          output = fstOutputs.add(output, arc.output);\n          idx++;\n        }\n\n        f.arc = arc;\n        f.outputPrefix = output;\n        assert arc.isFinal();\n        f.load(fstOutputs.add(output, arc.nextFinalOutput));\n        return f;\n      }\n\n","sourceOld":"      private Frame pushFrame(int state) throws IOException {\n        final Frame f = getFrame(currentFrame == null ? 0 : 1+currentFrame.ord);\n        \n        f.fp = f.fpOrig = currentFrame.lastSubFP;\n        f.prefix = currentFrame.prefix + currentFrame.suffix;\n        // if (DEBUG) System.out.println(\"    pushFrame state=\" + state + \" prefix=\" + f.prefix);\n        f.setState(state);\n\n        // Walk the arc through the index -- we only\n        // \"bother\" with this so we can get the floor data\n        // from the index and skip floor blocks when\n        // possible:\n        FST.Arc<BytesRef> arc = currentFrame.arc;\n        int idx = currentFrame.prefix;\n        assert currentFrame.suffix > 0;\n        BytesRef output = currentFrame.outputPrefix;\n        while (idx < f.prefix) {\n          final int target = term.bytes[idx] & 0xff;\n          // TODO: we could be more efficient for the next()\n          // case by using current arc as starting point,\n          // passed to findTargetArc\n          arc = index.findTargetArc(target, arc, getArc(1+idx), fstReader);\n          assert arc != null;\n          output = fstOutputs.add(output, arc.output);\n          idx++;\n        }\n\n        f.arc = arc;\n        f.outputPrefix = output;\n        assert arc.isFinal();\n        f.load(fstOutputs.add(output, arc.nextFinalOutput));\n        return f;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a570bec4aec8585a4eea44849bfb2bc264208c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":["0a570bec4aec8585a4eea44849bfb2bc264208c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0a570bec4aec8585a4eea44849bfb2bc264208c4":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a570bec4aec8585a4eea44849bfb2bc264208c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}