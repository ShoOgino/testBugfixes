{"path":"src/test/org/apache/solr/analysis/TestCapitalizationFilter#testKeepIgnoreCase().mjava","commits":[{"id":"16a3bd060e23c83333ee54d14fc1034f973eb8b5","date":1203820455,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestCapitalizationFilter#testKeepIgnoreCase().mjava","pathOld":"/dev/null","sourceNew":"  public void testKeepIgnoreCase() throws Exception {\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CapitalizationFilterFactory.KEEP, \"kitten\" );\n    args.put( CapitalizationFilterFactory.KEEP_IGNORE_CASE, \"true\" );\n    args.put( CapitalizationFilterFactory.ONLY_FIRST_WORD, \"true\" );\n\n    CapitalizationFilterFactory factory = new CapitalizationFilterFactory();\n    factory.init( args );\n    char[] termBuffer;\n    termBuffer = \"kiTTEN\".toCharArray();\n    factory.forceFirstLetter = true;\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"KiTTEN\",  new String(termBuffer, 0, termBuffer.length));\n\n    factory.forceFirstLetter = false;\n    termBuffer = \"kiTTEN\".toCharArray();\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"kiTTEN\",  new String(termBuffer, 0, termBuffer.length));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd1a40477a0ea93015c918e8285103cef0e718a3","date":1249044842,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestCapitalizationFilter#testKeepIgnoreCase().mjava","pathOld":"src/test/org/apache/solr/analysis/TestCapitalizationFilter#testKeepIgnoreCase().mjava","sourceNew":"  public void testKeepIgnoreCase() throws Exception {\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CapitalizationFilterFactory.KEEP, \"kitten\" );\n    args.put( CapitalizationFilterFactory.KEEP_IGNORE_CASE, \"true\" );\n    args.put( CapitalizationFilterFactory.ONLY_FIRST_WORD, \"true\" );\n\n    CapitalizationFilterFactory factory = new CapitalizationFilterFactory();\n    factory.init( args );\n    char[] termBuffer;\n    termBuffer = \"kiTTEN\".toCharArray();\n    factory.forceFirstLetter = true;\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"KiTTEN\",  new String(termBuffer, 0, termBuffer.length));\n\n    factory.forceFirstLetter = false;\n    termBuffer = \"kiTTEN\".toCharArray();\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"kiTTEN\",  new String(termBuffer, 0, termBuffer.length));\n\n    factory.keep = null;\n    termBuffer = \"kiTTEN\".toCharArray();\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"Kitten\",  new String(termBuffer, 0, termBuffer.length));\n  }\n\n","sourceOld":"  public void testKeepIgnoreCase() throws Exception {\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CapitalizationFilterFactory.KEEP, \"kitten\" );\n    args.put( CapitalizationFilterFactory.KEEP_IGNORE_CASE, \"true\" );\n    args.put( CapitalizationFilterFactory.ONLY_FIRST_WORD, \"true\" );\n\n    CapitalizationFilterFactory factory = new CapitalizationFilterFactory();\n    factory.init( args );\n    char[] termBuffer;\n    termBuffer = \"kiTTEN\".toCharArray();\n    factory.forceFirstLetter = true;\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"KiTTEN\",  new String(termBuffer, 0, termBuffer.length));\n\n    factory.forceFirstLetter = false;\n    termBuffer = \"kiTTEN\".toCharArray();\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"kiTTEN\",  new String(termBuffer, 0, termBuffer.length));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestCapitalizationFilter#testKeepIgnoreCase().mjava","pathOld":"src/test/org/apache/solr/analysis/TestCapitalizationFilter#testKeepIgnoreCase().mjava","sourceNew":"  public void testKeepIgnoreCase() throws Exception {\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CapitalizationFilterFactory.KEEP, \"kitten\" );\n    args.put( CapitalizationFilterFactory.KEEP_IGNORE_CASE, \"true\" );\n    args.put( CapitalizationFilterFactory.ONLY_FIRST_WORD, \"true\" );\n\n    CapitalizationFilterFactory factory = new CapitalizationFilterFactory();\n    factory.init( args );\n    char[] termBuffer;\n    termBuffer = \"kiTTEN\".toCharArray();\n    factory.forceFirstLetter = true;\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"KiTTEN\",  new String(termBuffer, 0, termBuffer.length));\n\n    factory.forceFirstLetter = false;\n    termBuffer = \"kiTTEN\".toCharArray();\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"kiTTEN\",  new String(termBuffer, 0, termBuffer.length));\n\n    factory.keep = null;\n    termBuffer = \"kiTTEN\".toCharArray();\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"Kitten\",  new String(termBuffer, 0, termBuffer.length));\n  }\n\n","sourceOld":"  public void testKeepIgnoreCase() throws Exception {\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CapitalizationFilterFactory.KEEP, \"kitten\" );\n    args.put( CapitalizationFilterFactory.KEEP_IGNORE_CASE, \"true\" );\n    args.put( CapitalizationFilterFactory.ONLY_FIRST_WORD, \"true\" );\n\n    CapitalizationFilterFactory factory = new CapitalizationFilterFactory();\n    factory.init( args );\n    char[] termBuffer;\n    termBuffer = \"kiTTEN\".toCharArray();\n    factory.forceFirstLetter = true;\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"KiTTEN\",  new String(termBuffer, 0, termBuffer.length));\n\n    factory.forceFirstLetter = false;\n    termBuffer = \"kiTTEN\".toCharArray();\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"kiTTEN\",  new String(termBuffer, 0, termBuffer.length));\n\n    factory.keep = null;\n    termBuffer = \"kiTTEN\".toCharArray();\n    factory.processWord(termBuffer, 0, termBuffer.length, 0 );\n    assertEquals( \"Kitten\",  new String(termBuffer, 0, termBuffer.length));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"fd1a40477a0ea93015c918e8285103cef0e718a3":["16a3bd060e23c83333ee54d14fc1034f973eb8b5"],"ad94625fb8d088209f46650c8097196fec67f00c":["fd1a40477a0ea93015c918e8285103cef0e718a3"],"16a3bd060e23c83333ee54d14fc1034f973eb8b5":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["16a3bd060e23c83333ee54d14fc1034f973eb8b5"],"fd1a40477a0ea93015c918e8285103cef0e718a3":["ad94625fb8d088209f46650c8097196fec67f00c"],"16a3bd060e23c83333ee54d14fc1034f973eb8b5":["fd1a40477a0ea93015c918e8285103cef0e718a3"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}