{"path":"contrib/queries/src/test/org/apache/lucene/search/trie/TestIntTrieRangeQuery#testLeftOpenRange(int).mjava","commits":[{"id":"c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc","date":1239886708,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestIntTrieRangeQuery#testLeftOpenRange(int).mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestIntTrieRangeFilter#testLeftOpenRange(int).mjava","sourceNew":"  private void testLeftOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    int upper=(count-1)*distance + (distance/3) + startOffset;\n    IntTrieRangeQuery q=new IntTrieRangeQuery(field, precisionStep, null, new Integer(upper), true, true);\n    TopDocs topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    System.out.println(\"Found \"+q.getTotalNumberOfTerms()+\" distinct terms in left open range for field '\"+field+\"'.\");\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", startOffset, TrieUtils.prefixCodedToInt(doc.get(\"value\")) );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (count-1)*distance+startOffset, TrieUtils.prefixCodedToInt(doc.get(\"value\")) );\n  }\n\n","sourceOld":"  private void testLeftOpenRange(int precisionStep) throws Exception {\r\n    String field=\"field\"+precisionStep;\r\n    int count=3000;\r\n    int upper=(count-1)*distance + (distance/3) + startOffset;\r\n    IntTrieRangeFilter f=new IntTrieRangeFilter(field, precisionStep, null, new Integer(upper), true, true);\r\n    TopDocs topDocs = searcher.search(f.asQuery(), null, noDocs, Sort.INDEXORDER);\r\n    System.out.println(\"Found \"+f.getLastNumberOfTerms()+\" distinct terms in left open range for field '\"+field+\"'.\");\r\n    ScoreDoc[] sd = topDocs.scoreDocs;\r\n    assertNotNull(sd);\r\n    assertEquals(\"Score doc count\", count, sd.length );\r\n    Document doc=searcher.doc(sd[0].doc);\r\n    assertEquals(\"First doc\", startOffset, TrieUtils.prefixCodedToInt(doc.get(\"value\")) );\r\n    doc=searcher.doc(sd[sd.length-1].doc);\r\n    assertEquals(\"Last doc\", (count-1)*distance+startOffset, TrieUtils.prefixCodedToInt(doc.get(\"value\")) );\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7997e20249c312f7420d4e348cde0a36c22d9a8c","date":1245413812,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestIntTrieRangeQuery#testLeftOpenRange(int).mjava","sourceNew":null,"sourceOld":"  private void testLeftOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    int upper=(count-1)*distance + (distance/3) + startOffset;\n    IntTrieRangeQuery q=new IntTrieRangeQuery(field, precisionStep, null, new Integer(upper), true, true);\n    TopDocs topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    System.out.println(\"Found \"+q.getTotalNumberOfTerms()+\" distinct terms in left open range for field '\"+field+\"'.\");\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", startOffset, TrieUtils.prefixCodedToInt(doc.get(\"value\")) );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (count-1)*distance+startOffset, TrieUtils.prefixCodedToInt(doc.get(\"value\")) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7997e20249c312f7420d4e348cde0a36c22d9a8c":["c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7997e20249c312f7420d4e348cde0a36c22d9a8c"]},"commit2Childs":{"7997e20249c312f7420d4e348cde0a36c22d9a8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc"],"c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc":["7997e20249c312f7420d4e348cde0a36c22d9a8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}