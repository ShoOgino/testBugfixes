{"path":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","commits":[{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockRAMDirectory#close().mjava","sourceNew":"  @Override\n  public synchronized void close() throws IOException {\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockRAMDirectory: cannot close: there are still open files: \" + openFiles);\n    }\n    open = false;\n    delegate.close();\n  }\n\n","sourceOld":"  @Override\n  public synchronized void close() {\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockRAMDirectory: cannot close: there are still open files: \" + openFiles);\n    }\n    open = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71122e5efb3fd9ad29e81a7682dc45a8852bd53c","date":1282667345,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","sourceNew":"  @Override\n  public synchronized void close() throws IOException {\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = files.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockRAMDirectory: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    open = false;\n    delegate.close();\n  }\n\n","sourceOld":"  @Override\n  public synchronized void close() throws IOException {\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockRAMDirectory: cannot close: there are still open files: \" + openFiles);\n    }\n    open = false;\n    delegate.close();\n  }\n\n","bugFix":null,"bugIntro":["2a186ae8733084223c22044e935e4ef848a143d1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04be11fe184bedfd187256e82f829c194d62d447","date":1282734180,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","sourceNew":"  @Override\n  public synchronized void close() throws IOException {\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = files.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    open = false;\n    delegate.close();\n  }\n\n","sourceOld":"  @Override\n  public synchronized void close() throws IOException {\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = files.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockRAMDirectory: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    open = false;\n    delegate.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a186ae8733084223c22044e935e4ef848a143d1","date":1289694819,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","sourceNew":"  @Override\n  public synchronized void close() throws IOException {\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n      openFilesDeleted = new HashSet<String>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = openFileHandles.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    open = false;\n    delegate.close();\n  }\n\n","sourceOld":"  @Override\n  public synchronized void close() throws IOException {\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = files.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    open = false;\n    delegate.close();\n  }\n\n","bugFix":["71122e5efb3fd9ad29e81a7682dc45a8852bd53c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c498d3f8d75170b121f5eda2c6210ac5beb5d411","date":1289726298,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","sourceNew":"  @Override\n  public synchronized void close() throws IOException {\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n      openFilesDeleted = new HashSet<String>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = openFileHandles.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    open = false;\n    delegate.close();\n  }\n\n","sourceOld":"  @Override\n  public synchronized void close() throws IOException {\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = files.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    open = false;\n    delegate.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","sourceNew":"  @Override\n  public synchronized void close() throws IOException {\n    maybeYield();\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n      openFilesDeleted = new HashSet<String>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = openFileHandles.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    open = false;\n    delegate.close();\n  }\n\n","sourceOld":"  @Override\n  public synchronized void close() throws IOException {\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n      openFilesDeleted = new HashSet<String>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = openFileHandles.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    open = false;\n    delegate.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","sourceNew":"  @Override\n  public synchronized void close() throws IOException {\n    maybeYield();\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n      openFilesDeleted = new HashSet<String>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = openFileHandles.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    open = false;\n    delegate.close();\n  }\n\n","sourceOld":"  @Override\n  public synchronized void close() throws IOException {\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n      openFilesDeleted = new HashSet<String>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = openFileHandles.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    open = false;\n    delegate.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public synchronized void close() throws IOException {\n    maybeYield();\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n      openFilesDeleted = new HashSet<String>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = openFileHandles.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    open = false;\n    delegate.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d16aff6229cca84309d03d047cd718946bd4b43","date":1296516600,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","sourceNew":"  @Override\n  public synchronized void close() throws IOException {\n    maybeYield();\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n      openFilesDeleted = new HashSet<String>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = openFileHandles.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    open = false;\n    if (checkIndexOnClose && IndexReader.indexExists(this)) {\n      _TestUtil.checkIndex(this);\n    }\n    delegate.close();\n  }\n\n","sourceOld":"  @Override\n  public synchronized void close() throws IOException {\n    maybeYield();\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n      openFilesDeleted = new HashSet<String>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = openFileHandles.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    open = false;\n    delegate.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","sourceNew":"  @Override\n  public synchronized void close() throws IOException {\n    maybeYield();\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n      openFilesDeleted = new HashSet<String>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = openFileHandles.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    open = false;\n    if (checkIndexOnClose && IndexReader.indexExists(this)) {\n      _TestUtil.checkIndex(this);\n    }\n    delegate.close();\n  }\n\n","sourceOld":"  @Override\n  public synchronized void close() throws IOException {\n    maybeYield();\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n      openFilesDeleted = new HashSet<String>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = openFileHandles.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    open = false;\n    if (checkIndexOnClose && IndexReader.indexExists(this)) {\n      _TestUtil.checkIndex(this);\n    }\n    delegate.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","sourceNew":null,"sourceOld":"  @Override\n  public synchronized void close() throws IOException {\n    maybeYield();\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n      openFilesDeleted = new HashSet<String>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = openFileHandles.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    open = false;\n    delegate.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","sourceNew":"  @Override\n  public synchronized void close() throws IOException {\n    maybeYield();\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n      openFilesDeleted = new HashSet<String>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = openFileHandles.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    open = false;\n    if (checkIndexOnClose && IndexReader.indexExists(this)) {\n      _TestUtil.checkIndex(this);\n    }\n    delegate.close();\n  }\n\n","sourceOld":"  @Override\n  public synchronized void close() throws IOException {\n    maybeYield();\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n      openFilesDeleted = new HashSet<String>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // print the first one as its very verbose otherwise\n      Exception cause = null;\n      Iterator<Exception> stacktraces = openFileHandles.values().iterator();\n      if (stacktraces.hasNext())\n        cause = stacktraces.next();\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockDirectoryWrapper: cannot close: there are still open files: \" + openFiles, cause);\n    }\n    open = false;\n    delegate.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2a186ae8733084223c22044e935e4ef848a143d1":["04be11fe184bedfd187256e82f829c194d62d447"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["c498d3f8d75170b121f5eda2c6210ac5beb5d411","53a31399f2471493d67b19a95c028a74e0113b6a"],"c498d3f8d75170b121f5eda2c6210ac5beb5d411":["04be11fe184bedfd187256e82f829c194d62d447","2a186ae8733084223c22044e935e4ef848a143d1"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","53a31399f2471493d67b19a95c028a74e0113b6a"],"7d16aff6229cca84309d03d047cd718946bd4b43":["53a31399f2471493d67b19a95c028a74e0113b6a"],"04be11fe184bedfd187256e82f829c194d62d447":["71122e5efb3fd9ad29e81a7682dc45a8852bd53c"],"71122e5efb3fd9ad29e81a7682dc45a8852bd53c":["a05409176bd65129d67a785ee70e881e238a9aef"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["7d16aff6229cca84309d03d047cd718946bd4b43"],"53a31399f2471493d67b19a95c028a74e0113b6a":["2a186ae8733084223c22044e935e4ef848a143d1"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"]},"commit2Childs":{"2a186ae8733084223c22044e935e4ef848a143d1":["c498d3f8d75170b121f5eda2c6210ac5beb5d411","53a31399f2471493d67b19a95c028a74e0113b6a"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"c498d3f8d75170b121f5eda2c6210ac5beb5d411":["9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"7d16aff6229cca84309d03d047cd718946bd4b43":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"04be11fe184bedfd187256e82f829c194d62d447":["2a186ae8733084223c22044e935e4ef848a143d1","c498d3f8d75170b121f5eda2c6210ac5beb5d411"],"71122e5efb3fd9ad29e81a7682dc45a8852bd53c":["04be11fe184bedfd187256e82f829c194d62d447"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"53a31399f2471493d67b19a95c028a74e0113b6a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","7d16aff6229cca84309d03d047cd718946bd4b43"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a05409176bd65129d67a785ee70e881e238a9aef"],"a05409176bd65129d67a785ee70e881e238a9aef":["71122e5efb3fd9ad29e81a7682dc45a8852bd53c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}