{"path":"lucene/core/src/java/org/apache/lucene/store/NIOFSDirectory#openInput(String,IOContext).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NIOFSDirectory#openInput(String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/NIOFSDirectory#openInput(String,IOContext).mjava","sourceNew":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    return new NIOFSIndexInput(new File(getDirectory(), name), context, getReadChunkSize());\n  }\n\n","sourceOld":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    return new NIOFSIndexInput(new File(getDirectory(), name), context, getReadChunkSize());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7be25195304fffb0961b22414915e675ac3c9f6","date":1363889959,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NIOFSDirectory#openInput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NIOFSDirectory#openInput(String,IOContext).mjava","sourceNew":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    File path = new File(getDirectory(), name);\n    FileChannel fc = FileChannel.open(path.toPath(), StandardOpenOption.READ);\n    return new NIOFSIndexInput(\"NIOFSIndexInput(path=\\\"\" + path + \"\\\")\", fc, context, getReadChunkSize());\n  }\n\n","sourceOld":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    return new NIOFSIndexInput(new File(getDirectory(), name), context, getReadChunkSize());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0dcf83b1542b01ad5cddb41b01dc51f751215919","date":1376231222,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NIOFSDirectory#openInput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NIOFSDirectory#openInput(String,IOContext).mjava","sourceNew":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    File path = new File(getDirectory(), name);\n    FileChannel fc = FileChannel.open(path.toPath(), StandardOpenOption.READ);\n    return new NIOFSIndexInput(\"NIOFSIndexInput(path=\\\"\" + path + \"\\\")\", fc, context);\n  }\n\n","sourceOld":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    File path = new File(getDirectory(), name);\n    FileChannel fc = FileChannel.open(path.toPath(), StandardOpenOption.READ);\n    return new NIOFSIndexInput(\"NIOFSIndexInput(path=\\\"\" + path + \"\\\")\", fc, context, getReadChunkSize());\n  }\n\n","bugFix":null,"bugIntro":["a9097868501153a9566bd69c7b92f716ccb52df7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NIOFSDirectory#openInput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NIOFSDirectory#openInput(String,IOContext).mjava","sourceNew":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    File path = new File(getDirectory(), name);\n    FileChannel fc = FileChannel.open(path.toPath(), StandardOpenOption.READ);\n    return new NIOFSIndexInput(\"NIOFSIndexInput(path=\\\"\" + path + \"\\\")\", fc, context);\n  }\n\n","sourceOld":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    File path = new File(getDirectory(), name);\n    FileChannel fc = FileChannel.open(path.toPath(), StandardOpenOption.READ);\n    return new NIOFSIndexInput(\"NIOFSIndexInput(path=\\\"\" + path + \"\\\")\", fc, context, getReadChunkSize());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NIOFSDirectory#openInput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NIOFSDirectory#openInput(String,IOContext).mjava","sourceNew":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    Path path = getDirectory().resolve(name);\n    FileChannel fc = FileChannel.open(path, StandardOpenOption.READ);\n    return new NIOFSIndexInput(\"NIOFSIndexInput(path=\\\"\" + path + \"\\\")\", fc, context);\n  }\n\n","sourceOld":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    File path = new File(getDirectory(), name);\n    FileChannel fc = FileChannel.open(path.toPath(), StandardOpenOption.READ);\n    return new NIOFSIndexInput(\"NIOFSIndexInput(path=\\\"\" + path + \"\\\")\", fc, context);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NIOFSDirectory#openInput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NIOFSDirectory#openInput(String,IOContext).mjava","sourceNew":"  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    ensureCanRead(name);\n    Path path = getDirectory().resolve(name);\n    FileChannel fc = FileChannel.open(path, StandardOpenOption.READ);\n    return new NIOFSIndexInput(\"NIOFSIndexInput(path=\\\"\" + path + \"\\\")\", fc, context);\n  }\n\n","sourceOld":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    Path path = getDirectory().resolve(name);\n    FileChannel fc = FileChannel.open(path, StandardOpenOption.READ);\n    return new NIOFSIndexInput(\"NIOFSIndexInput(path=\\\"\" + path + \"\\\")\", fc, context);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NIOFSDirectory#openInput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NIOFSDirectory#openInput(String,IOContext).mjava","sourceNew":"  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    ensureCanRead(name);\n    Path path = getDirectory().resolve(name);\n    FileChannel fc = FileChannel.open(path, StandardOpenOption.READ);\n    return new NIOFSIndexInput(\"NIOFSIndexInput(path=\\\"\" + path + \"\\\")\", fc, context);\n  }\n\n","sourceOld":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    Path path = getDirectory().resolve(name);\n    FileChannel fc = FileChannel.open(path, StandardOpenOption.READ);\n    return new NIOFSIndexInput(\"NIOFSIndexInput(path=\\\"\" + path + \"\\\")\", fc, context);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NIOFSDirectory#openInput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NIOFSDirectory#openInput(String,IOContext).mjava","sourceNew":"  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    ensureCanRead(name);\n    Path path = getDirectory().resolve(name);\n    FileChannel fc = FileChannel.open(path, StandardOpenOption.READ);\n    return new NIOFSIndexInput(\"NIOFSIndexInput(path=\\\"\" + path + \"\\\")\", fc, context);\n  }\n\n","sourceOld":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    Path path = getDirectory().resolve(name);\n    FileChannel fc = FileChannel.open(path, StandardOpenOption.READ);\n    return new NIOFSIndexInput(\"NIOFSIndexInput(path=\\\"\" + path + \"\\\")\", fc, context);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NIOFSDirectory#openInput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NIOFSDirectory#openInput(String,IOContext).mjava","sourceNew":"  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    ensureCanRead(name);\n    Path path = getDirectory().resolve(name);\n    FileChannel fc = FileChannel.open(path, StandardOpenOption.READ);\n    return new NIOFSIndexInput(\"NIOFSIndexInput(path=\\\"\" + path + \"\\\")\", fc, context);\n  }\n\n","sourceOld":"  /** Creates an IndexInput for the file with the given name. */\n  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    Path path = getDirectory().resolve(name);\n    FileChannel fc = FileChannel.open(path, StandardOpenOption.READ);\n    return new NIOFSIndexInput(\"NIOFSIndexInput(path=\\\"\" + path + \"\\\")\", fc, context);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9097868501153a9566bd69c7b92f716ccb52df7","date":1594300445,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NIOFSDirectory#openInput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NIOFSDirectory#openInput(String,IOContext).mjava","sourceNew":"  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    ensureCanRead(name);\n    Path path = getDirectory().resolve(name);\n    FileChannel fc = FileChannel.open(path, StandardOpenOption.READ);\n    boolean success = false;\n    try {\n      final NIOFSIndexInput indexInput = new NIOFSIndexInput(\"NIOFSIndexInput(path=\\\"\" + path + \"\\\")\", fc, context);\n      success = true;\n      return indexInput;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(fc);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public IndexInput openInput(String name, IOContext context) throws IOException {\n    ensureOpen();\n    ensureCanRead(name);\n    Path path = getDirectory().resolve(name);\n    FileChannel fc = FileChannel.open(path, StandardOpenOption.READ);\n    return new NIOFSIndexInput(\"NIOFSIndexInput(path=\\\"\" + path + \"\\\")\", fc, context);\n  }\n\n","bugFix":["0dcf83b1542b01ad5cddb41b01dc51f751215919"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7be25195304fffb0961b22414915e675ac3c9f6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["f4abec28b874149a7223e32cc7a01704c27790de","b470f36a9372c97283360b1304eacbde22df6c0d"],"b470f36a9372c97283360b1304eacbde22df6c0d":["f4abec28b874149a7223e32cc7a01704c27790de","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["f4abec28b874149a7223e32cc7a01704c27790de","b470f36a9372c97283360b1304eacbde22df6c0d"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["c7be25195304fffb0961b22414915e675ac3c9f6"],"0dcf83b1542b01ad5cddb41b01dc51f751215919":["c7be25195304fffb0961b22414915e675ac3c9f6"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["f4abec28b874149a7223e32cc7a01704c27790de"],"a9097868501153a9566bd69c7b92f716ccb52df7":["5a207d19eac354d649c3f0e2cce070017c78125e"],"f4abec28b874149a7223e32cc7a01704c27790de":["0dcf83b1542b01ad5cddb41b01dc51f751215919"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a9097868501153a9566bd69c7b92f716ccb52df7"]},"commit2Childs":{"c7be25195304fffb0961b22414915e675ac3c9f6":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","0dcf83b1542b01ad5cddb41b01dc51f751215919"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c7be25195304fffb0961b22414915e675ac3c9f6"],"5a207d19eac354d649c3f0e2cce070017c78125e":["a9097868501153a9566bd69c7b92f716ccb52df7"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"0dcf83b1542b01ad5cddb41b01dc51f751215919":["f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["5a207d19eac354d649c3f0e2cce070017c78125e","b470f36a9372c97283360b1304eacbde22df6c0d","1e6acbaae7af722f17204ceccf0f7db5753eccf3","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a9097868501153a9566bd69c7b92f716ccb52df7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}