{"path":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#compareDirectories(File,File).mjava","commits":[{"id":"3dc9e1a7a552fea4325daea83bc538ea4a481aad","date":1498713374,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#compareDirectories(File,File).mjava","pathOld":"/dev/null","sourceNew":"  private static void compareDirectories(File userDefault, File testDefault) throws IOException {\n    assertTrue(\"Test _default doesn't exist: \" + testDefault.getAbsolutePath(), testDefault.exists());\n    assertTrue(\"Test _default not a directory: \" + testDefault.getAbsolutePath(),testDefault.isDirectory());\n    assertTrue(\"User _default doesn't exist: \" + userDefault.getAbsolutePath(), userDefault.exists());\n    assertTrue(\"User _default not a directory: \" + userDefault.getAbsolutePath(),userDefault.isDirectory());\n\n    Files.walkFileTree(userDefault.toPath(), new SimpleFileVisitor<Path>() {\n      @Override\n      public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n        FileVisitResult result = super.preVisitDirectory(dir, attrs);\n        Path relativePath = userDefault.toPath().relativize(dir);\n        File testDefaultFile = testDefault.toPath().resolve(relativePath).toFile();\n        assertEquals(\"Mismatch in files\", Arrays.toString(dir.toFile().list()), Arrays.toString(testDefaultFile.list()));\n        return result;\n      }\n      @Override\n      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n        FileVisitResult result = super.visitFile(file, attrs);\n        Path relativePath = userDefault.toPath().relativize(file);\n        File testDefaultFile = testDefault.toPath().resolve(relativePath).toFile();\n        String userDefaultContents = FileUtils.readFileToString(file.toFile(), \"UTF-8\");\n        String testDefaultContents = FileUtils.readFileToString(testDefaultFile, \"UTF-8\");\n        assertEquals(testDefaultFile+\" contents doesn't match expected (\"+file+\")\", userDefaultContents, testDefaultContents);                    \n        return result;\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#compareDirectories(File,File).mjava","pathOld":"/dev/null","sourceNew":"  private static void compareDirectories(File userDefault, File testDefault) throws IOException {\n    assertTrue(\"Test _default doesn't exist: \" + testDefault.getAbsolutePath(), testDefault.exists());\n    assertTrue(\"Test _default not a directory: \" + testDefault.getAbsolutePath(),testDefault.isDirectory());\n    assertTrue(\"User _default doesn't exist: \" + userDefault.getAbsolutePath(), userDefault.exists());\n    assertTrue(\"User _default not a directory: \" + userDefault.getAbsolutePath(),userDefault.isDirectory());\n\n    Files.walkFileTree(userDefault.toPath(), new SimpleFileVisitor<Path>() {\n      @Override\n      public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n        FileVisitResult result = super.preVisitDirectory(dir, attrs);\n        Path relativePath = userDefault.toPath().relativize(dir);\n        File testDefaultFile = testDefault.toPath().resolve(relativePath).toFile();\n        assertEquals(\"Mismatch in files\", Arrays.toString(dir.toFile().list()), Arrays.toString(testDefaultFile.list()));\n        return result;\n      }\n      @Override\n      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n        FileVisitResult result = super.visitFile(file, attrs);\n        Path relativePath = userDefault.toPath().relativize(file);\n        File testDefaultFile = testDefault.toPath().resolve(relativePath).toFile();\n        String userDefaultContents = FileUtils.readFileToString(file.toFile(), \"UTF-8\");\n        String testDefaultContents = FileUtils.readFileToString(testDefaultFile, \"UTF-8\");\n        assertEquals(testDefaultFile+\" contents doesn't match expected (\"+file+\")\", userDefaultContents, testDefaultContents);                    \n        return result;\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9bee9c3b88545db564398802bfa2fe207c25cd5","date":1498753339,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#compareDirectories(File,File).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#compareDirectories(File,File).mjava","sourceNew":"  private static void compareDirectories(File userDefault, File testDefault) throws IOException {\n    assertTrue(\"Test _default doesn't exist: \" + testDefault.getAbsolutePath(), testDefault.exists());\n    assertTrue(\"Test _default not a directory: \" + testDefault.getAbsolutePath(),testDefault.isDirectory());\n    assertTrue(\"User _default doesn't exist: \" + userDefault.getAbsolutePath(), userDefault.exists());\n    assertTrue(\"User _default not a directory: \" + userDefault.getAbsolutePath(),userDefault.isDirectory());\n\n    Files.walkFileTree(userDefault.toPath(), new SimpleFileVisitor<Path>() {\n      @Override\n      public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n        FileVisitResult result = super.preVisitDirectory(dir, attrs);\n        Path relativePath = userDefault.toPath().relativize(dir);\n        File testDefaultFile = testDefault.toPath().resolve(relativePath).toFile();\n        String[] listOne = dir.toFile().list();\n        String[] listTwo = testDefaultFile.list();\n        Arrays.sort(listOne);\n        Arrays.sort(listTwo);\n        assertEquals(\"Mismatch in files\", Arrays.toString(listOne), Arrays.toString(listTwo));\n        return result;\n      }\n      @Override\n      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n        FileVisitResult result = super.visitFile(file, attrs);\n        Path relativePath = userDefault.toPath().relativize(file);\n        File testDefaultFile = testDefault.toPath().resolve(relativePath).toFile();\n        String userDefaultContents = FileUtils.readFileToString(file.toFile(), \"UTF-8\");\n        String testDefaultContents = FileUtils.readFileToString(testDefaultFile, \"UTF-8\");\n        assertEquals(testDefaultFile+\" contents doesn't match expected (\"+file+\")\", userDefaultContents, testDefaultContents);                    \n        return result;\n      }\n    });\n  }\n\n","sourceOld":"  private static void compareDirectories(File userDefault, File testDefault) throws IOException {\n    assertTrue(\"Test _default doesn't exist: \" + testDefault.getAbsolutePath(), testDefault.exists());\n    assertTrue(\"Test _default not a directory: \" + testDefault.getAbsolutePath(),testDefault.isDirectory());\n    assertTrue(\"User _default doesn't exist: \" + userDefault.getAbsolutePath(), userDefault.exists());\n    assertTrue(\"User _default not a directory: \" + userDefault.getAbsolutePath(),userDefault.isDirectory());\n\n    Files.walkFileTree(userDefault.toPath(), new SimpleFileVisitor<Path>() {\n      @Override\n      public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n        FileVisitResult result = super.preVisitDirectory(dir, attrs);\n        Path relativePath = userDefault.toPath().relativize(dir);\n        File testDefaultFile = testDefault.toPath().resolve(relativePath).toFile();\n        assertEquals(\"Mismatch in files\", Arrays.toString(dir.toFile().list()), Arrays.toString(testDefaultFile.list()));\n        return result;\n      }\n      @Override\n      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n        FileVisitResult result = super.visitFile(file, attrs);\n        Path relativePath = userDefault.toPath().relativize(file);\n        File testDefaultFile = testDefault.toPath().resolve(relativePath).toFile();\n        String userDefaultContents = FileUtils.readFileToString(file.toFile(), \"UTF-8\");\n        String testDefaultContents = FileUtils.readFileToString(testDefaultFile, \"UTF-8\");\n        assertEquals(testDefaultFile+\" contents doesn't match expected (\"+file+\")\", userDefaultContents, testDefaultContents);                    \n        return result;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#compareDirectories(File,File).mjava","pathOld":"/dev/null","sourceNew":"  private static void compareDirectories(File userDefault, File testDefault) throws IOException {\n    assertTrue(\"Test _default doesn't exist: \" + testDefault.getAbsolutePath(), testDefault.exists());\n    assertTrue(\"Test _default not a directory: \" + testDefault.getAbsolutePath(),testDefault.isDirectory());\n    assertTrue(\"User _default doesn't exist: \" + userDefault.getAbsolutePath(), userDefault.exists());\n    assertTrue(\"User _default not a directory: \" + userDefault.getAbsolutePath(),userDefault.isDirectory());\n\n    Files.walkFileTree(userDefault.toPath(), new SimpleFileVisitor<Path>() {\n      @Override\n      public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n        FileVisitResult result = super.preVisitDirectory(dir, attrs);\n        Path relativePath = userDefault.toPath().relativize(dir);\n        File testDefaultFile = testDefault.toPath().resolve(relativePath).toFile();\n        String[] listOne = dir.toFile().list();\n        String[] listTwo = testDefaultFile.list();\n        Arrays.sort(listOne);\n        Arrays.sort(listTwo);\n        assertEquals(\"Mismatch in files\", Arrays.toString(listOne), Arrays.toString(listTwo));\n        return result;\n      }\n      @Override\n      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n        FileVisitResult result = super.visitFile(file, attrs);\n        Path relativePath = userDefault.toPath().relativize(file);\n        File testDefaultFile = testDefault.toPath().resolve(relativePath).toFile();\n        String userDefaultContents = FileUtils.readFileToString(file.toFile(), \"UTF-8\");\n        String testDefaultContents = FileUtils.readFileToString(testDefaultFile, \"UTF-8\");\n        assertEquals(testDefaultFile+\" contents doesn't match expected (\"+file+\")\", userDefaultContents, testDefaultContents);                    \n        return result;\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbb2d9cb96e731a93749beccbf9d0a5e4849cae2","date":1581705413,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#compareDirectories(File,File).mjava","sourceNew":null,"sourceOld":"  private static void compareDirectories(File userDefault, File testDefault) throws IOException {\n    assertTrue(\"Test _default doesn't exist: \" + testDefault.getAbsolutePath(), testDefault.exists());\n    assertTrue(\"Test _default not a directory: \" + testDefault.getAbsolutePath(),testDefault.isDirectory());\n    assertTrue(\"User _default doesn't exist: \" + userDefault.getAbsolutePath(), userDefault.exists());\n    assertTrue(\"User _default not a directory: \" + userDefault.getAbsolutePath(),userDefault.isDirectory());\n\n    Files.walkFileTree(userDefault.toPath(), new SimpleFileVisitor<Path>() {\n      @Override\n      public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n        FileVisitResult result = super.preVisitDirectory(dir, attrs);\n        Path relativePath = userDefault.toPath().relativize(dir);\n        File testDefaultFile = testDefault.toPath().resolve(relativePath).toFile();\n        String[] listOne = dir.toFile().list();\n        String[] listTwo = testDefaultFile.list();\n        Arrays.sort(listOne);\n        Arrays.sort(listTwo);\n        assertEquals(\"Mismatch in files\", Arrays.toString(listOne), Arrays.toString(listTwo));\n        return result;\n      }\n      @Override\n      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n        FileVisitResult result = super.visitFile(file, attrs);\n        Path relativePath = userDefault.toPath().relativize(file);\n        File testDefaultFile = testDefault.toPath().resolve(relativePath).toFile();\n        String userDefaultContents = FileUtils.readFileToString(file.toFile(), \"UTF-8\");\n        String testDefaultContents = FileUtils.readFileToString(testDefaultFile, \"UTF-8\");\n        assertEquals(testDefaultFile+\" contents doesn't match expected (\"+file+\")\", userDefaultContents, testDefaultContents);                    \n        return result;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3dc9e1a7a552fea4325daea83bc538ea4a481aad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9bee9c3b88545db564398802bfa2fe207c25cd5":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cbb2d9cb96e731a93749beccbf9d0a5e4849cae2":["e9bee9c3b88545db564398802bfa2fe207c25cd5"],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e9bee9c3b88545db564398802bfa2fe207c25cd5"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3dc9e1a7a552fea4325daea83bc538ea4a481aad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cbb2d9cb96e731a93749beccbf9d0a5e4849cae2"]},"commit2Childs":{"3dc9e1a7a552fea4325daea83bc538ea4a481aad":["28288370235ed02234a64753cdbf0c6ec096304a"],"e9bee9c3b88545db564398802bfa2fe207c25cd5":["cbb2d9cb96e731a93749beccbf9d0a5e4849cae2","30c8e5574b55d57947e989443dfde611646530ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3dc9e1a7a552fea4325daea83bc538ea4a481aad","30c8e5574b55d57947e989443dfde611646530ee","28288370235ed02234a64753cdbf0c6ec096304a"],"cbb2d9cb96e731a93749beccbf9d0a5e4849cae2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30c8e5574b55d57947e989443dfde611646530ee":[],"28288370235ed02234a64753cdbf0c6ec096304a":["e9bee9c3b88545db564398802bfa2fe207c25cd5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}