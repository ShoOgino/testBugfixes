{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String,String,String,boolean).mjava","commits":[{"id":"5687aaac49dac0091f9d42a734eb5ec955377aad","date":1472269082,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String,String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private Long getNumRequests(String baseUrl, String collectionName, String category, String key, boolean returnNumErrors) throws\n      SolrServerException, IOException {\n\n    NamedList<Object> resp;\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl + \"/\"+ collectionName)) {\n      client.setConnectionTimeout(15000);\n      client.setSoTimeout(60000);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans\");\n      params.set(\"stats\", \"true\");\n      params.set(\"key\", key);\n      params.set(\"cat\", category);\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      resp = client.request(req);\n    }\n    return (Long) resp.findRecursive(\"solr-mbeans\", category, key, \"stats\", returnNumErrors ? \"errors\" : \"requests\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String,String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private Long getNumRequests(String baseUrl, String collectionName, String category, String key, boolean returnNumErrors) throws\n      SolrServerException, IOException {\n\n    NamedList<Object> resp;\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl + \"/\"+ collectionName)) {\n      client.setConnectionTimeout(15000);\n      client.setSoTimeout(60000);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans\");\n      params.set(\"stats\", \"true\");\n      params.set(\"key\", key);\n      params.set(\"cat\", category);\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      resp = client.request(req);\n    }\n    return (Long) resp.findRecursive(\"solr-mbeans\", category, key, \"stats\", returnNumErrors ? \"errors\" : \"requests\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String,String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private Long getNumRequests(String baseUrl, String collectionName, String category, String key, boolean returnNumErrors) throws\n      SolrServerException, IOException {\n\n    NamedList<Object> resp;\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl + \"/\"+ collectionName)) {\n      client.setConnectionTimeout(15000);\n      client.setSoTimeout(60000);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans\");\n      params.set(\"stats\", \"true\");\n      params.set(\"key\", key);\n      params.set(\"cat\", category);\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      resp = client.request(req);\n    }\n    return (Long) resp.findRecursive(\"solr-mbeans\", category, key, \"stats\", returnNumErrors ? \"errors\" : \"requests\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String,String,String,String,boolean).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String,String,String,boolean).mjava","sourceNew":"  private Long getNumRequests(String baseUrl, String collectionName, String category, String key, String scope, boolean returnNumErrors) throws\n      SolrServerException, IOException {\n\n    NamedList<Object> resp;\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl + \"/\"+ collectionName)) {\n      client.setConnectionTimeout(15000);\n      client.setSoTimeout(60000);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans\");\n      params.set(\"stats\", \"true\");\n      params.set(\"key\", key);\n      params.set(\"cat\", category);\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      resp = client.request(req);\n    }\n    String name;\n    if (returnNumErrors) {\n      name = category + \".\" + (scope != null ? scope : key) + \".errors\";\n    } else {\n      name = category + \".\" + (scope != null ? scope : key) + \".requests\";\n    }\n    Map<String,Object> map = (Map<String,Object>)resp.findRecursive(\"solr-mbeans\", category, key, \"stats\");\n    if (map == null) {\n      return null;\n    }\n    if (scope != null) { // admin handler uses a meter instead of counter here\n      return (Long)map.get(name + \".count\");\n    } else {\n      return (Long) map.get(name);\n    }\n  }\n\n","sourceOld":"  private Long getNumRequests(String baseUrl, String collectionName, String category, String key, boolean returnNumErrors) throws\n      SolrServerException, IOException {\n\n    NamedList<Object> resp;\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl + \"/\"+ collectionName)) {\n      client.setConnectionTimeout(15000);\n      client.setSoTimeout(60000);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans\");\n      params.set(\"stats\", \"true\");\n      params.set(\"key\", key);\n      params.set(\"cat\", category);\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      resp = client.request(req);\n    }\n    return (Long) resp.findRecursive(\"solr-mbeans\", category, key, \"stats\", returnNumErrors ? \"errors\" : \"requests\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#getNumRequests(String,String,String,String,boolean).mjava","sourceNew":null,"sourceOld":"  private Long getNumRequests(String baseUrl, String collectionName, String category, String key, boolean returnNumErrors) throws\n      SolrServerException, IOException {\n\n    NamedList<Object> resp;\n    try (HttpSolrClient client = getHttpSolrClient(baseUrl + \"/\"+ collectionName)) {\n      client.setConnectionTimeout(15000);\n      client.setSoTimeout(60000);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"qt\", \"/admin/mbeans\");\n      params.set(\"stats\", \"true\");\n      params.set(\"key\", key);\n      params.set(\"cat\", category);\n      // use generic request to avoid extra processing of queries\n      QueryRequest req = new QueryRequest(params);\n      resp = client.request(req);\n    }\n    return (Long) resp.findRecursive(\"solr-mbeans\", category, key, \"stats\", returnNumErrors ? \"errors\" : \"requests\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5687aaac49dac0091f9d42a734eb5ec955377aad"],"5687aaac49dac0091f9d42a734eb5ec955377aad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"816521ebaad5add9cb96bb88c577394e2938c40b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["816521ebaad5add9cb96bb88c577394e2938c40b"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","5687aaac49dac0091f9d42a734eb5ec955377aad","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5687aaac49dac0091f9d42a734eb5ec955377aad":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"816521ebaad5add9cb96bb88c577394e2938c40b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}