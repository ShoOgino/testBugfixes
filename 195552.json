{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","commits":[{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentInfoPerCommit,String,IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context)\n      throws IOException {\n    \n    // note: we don't really need this fis (its copied), but we load it up\n    // so we don't pass a null value to the si writer\n    FieldInfos fis = SegmentReader.readFieldInfos(info);\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directory, info.info.getVersion(), segName, info.info.getDocCount(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), info.getFieldInfosGen());\n\n    Set<String> segFiles = new HashSet<String>();\n\n    // Build up new segment's file names.  Must do this\n    // before writing SegmentInfo:\n    for (String file: info.files()) {\n      final String newFileName;\n      newFileName = segName + IndexFileNames.stripSegmentName(file);\n      segFiles.add(newFileName);\n    }\n    newInfo.setFiles(segFiles);\n\n    // We must rewrite the SI file because it references segment name in its list of files, etc\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(directory);\n\n    boolean success = false;\n\n    try {\n\n      newInfo.getCodec().segmentInfoFormat().getSegmentInfoWriter().write(trackingDir, newInfo, fis, context);\n\n      final Collection<String> siFiles = trackingDir.getCreatedFiles();\n\n      // Copy the segment's files\n      for (String file: info.files()) {\n\n        final String newFileName = segName + IndexFileNames.stripSegmentName(file);\n\n        if (siFiles.contains(newFileName)) {\n          // We already rewrote this above\n          continue;\n        }\n\n        assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; siFiles=\" + siFiles;\n\n        info.info.dir.copy(directory, file, newFileName, context);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        for(String file : newInfo.files()) {\n          try {\n            directory.deleteFile(file);\n          } catch (Throwable t) {\n          }\n        }\n      }\n    }\n    \n    return newInfoPerCommit;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentInfoPerCommit copySegmentAsIs(SegmentInfoPerCommit info, String segName, IOContext context)\n      throws IOException {\n    \n    // note: we don't really need this fis (its copied), but we load it up\n    // so we don't pass a null value to the si writer\n    FieldInfos fis = SegmentReader.readFieldInfos(info);\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directory, info.info.getVersion(), segName, info.info.getDocCount(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics());\n    SegmentInfoPerCommit newInfoPerCommit = new SegmentInfoPerCommit(newInfo, info.getDelCount(), info.getDelGen(), info.getFieldInfosGen());\n\n    Set<String> segFiles = new HashSet<String>();\n\n    // Build up new segment's file names.  Must do this\n    // before writing SegmentInfo:\n    for (String file: info.files()) {\n      final String newFileName;\n      newFileName = segName + IndexFileNames.stripSegmentName(file);\n      segFiles.add(newFileName);\n    }\n    newInfo.setFiles(segFiles);\n\n    // We must rewrite the SI file because it references segment name in its list of files, etc\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(directory);\n\n    boolean success = false;\n\n    try {\n\n      newInfo.getCodec().segmentInfoFormat().getSegmentInfoWriter().write(trackingDir, newInfo, fis, context);\n\n      final Collection<String> siFiles = trackingDir.getCreatedFiles();\n\n      // Copy the segment's files\n      for (String file: info.files()) {\n\n        final String newFileName = segName + IndexFileNames.stripSegmentName(file);\n\n        if (siFiles.contains(newFileName)) {\n          // We already rewrote this above\n          continue;\n        }\n\n        assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; siFiles=\" + siFiles;\n\n        info.info.dir.copy(directory, file, newFileName, context);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        for(String file : newInfo.files()) {\n          try {\n            directory.deleteFile(file);\n          } catch (Throwable t) {\n          }\n        }\n      }\n    }\n    \n    return newInfoPerCommit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context)\n      throws IOException {\n    \n    // note: we don't really need this fis (its copied), but we load it up\n    // so we don't pass a null value to the si writer\n    FieldInfos fis = SegmentReader.readFieldInfos(info);\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directory, info.info.getVersion(), segName, info.info.getDocCount(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), info.getFieldInfosGen());\n\n    Set<String> segFiles = new HashSet<>();\n\n    // Build up new segment's file names.  Must do this\n    // before writing SegmentInfo:\n    for (String file: info.files()) {\n      final String newFileName;\n      newFileName = segName + IndexFileNames.stripSegmentName(file);\n      segFiles.add(newFileName);\n    }\n    newInfo.setFiles(segFiles);\n\n    // We must rewrite the SI file because it references segment name in its list of files, etc\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(directory);\n\n    boolean success = false;\n\n    try {\n\n      newInfo.getCodec().segmentInfoFormat().getSegmentInfoWriter().write(trackingDir, newInfo, fis, context);\n\n      final Collection<String> siFiles = trackingDir.getCreatedFiles();\n\n      // Copy the segment's files\n      for (String file: info.files()) {\n\n        final String newFileName = segName + IndexFileNames.stripSegmentName(file);\n\n        if (siFiles.contains(newFileName)) {\n          // We already rewrote this above\n          continue;\n        }\n\n        assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; siFiles=\" + siFiles;\n\n        info.info.dir.copy(directory, file, newFileName, context);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        for(String file : newInfo.files()) {\n          try {\n            directory.deleteFile(file);\n          } catch (Throwable t) {\n          }\n        }\n      }\n    }\n    \n    return newInfoPerCommit;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context)\n      throws IOException {\n    \n    // note: we don't really need this fis (its copied), but we load it up\n    // so we don't pass a null value to the si writer\n    FieldInfos fis = SegmentReader.readFieldInfos(info);\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directory, info.info.getVersion(), segName, info.info.getDocCount(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), info.getFieldInfosGen());\n\n    Set<String> segFiles = new HashSet<String>();\n\n    // Build up new segment's file names.  Must do this\n    // before writing SegmentInfo:\n    for (String file: info.files()) {\n      final String newFileName;\n      newFileName = segName + IndexFileNames.stripSegmentName(file);\n      segFiles.add(newFileName);\n    }\n    newInfo.setFiles(segFiles);\n\n    // We must rewrite the SI file because it references segment name in its list of files, etc\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(directory);\n\n    boolean success = false;\n\n    try {\n\n      newInfo.getCodec().segmentInfoFormat().getSegmentInfoWriter().write(trackingDir, newInfo, fis, context);\n\n      final Collection<String> siFiles = trackingDir.getCreatedFiles();\n\n      // Copy the segment's files\n      for (String file: info.files()) {\n\n        final String newFileName = segName + IndexFileNames.stripSegmentName(file);\n\n        if (siFiles.contains(newFileName)) {\n          // We already rewrote this above\n          continue;\n        }\n\n        assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; siFiles=\" + siFiles;\n\n        info.info.dir.copy(directory, file, newFileName, context);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        for(String file : newInfo.files()) {\n          try {\n            directory.deleteFile(file);\n          } catch (Throwable t) {\n          }\n        }\n      }\n    }\n    \n    return newInfoPerCommit;\n  }\n\n","bugFix":null,"bugIntro":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cd4e13d997cf4fb810398a20a299c2c5a9f6b796","date":1395594336,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context)\n      throws IOException {\n    \n    // note: we don't really need this fis (its copied), but we load it up\n    // so we don't pass a null value to the si writer\n    FieldInfos fis = SegmentReader.readFieldInfos(info);\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directory, info.info.getVersion(), segName, info.info.getDocCount(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), info.getFieldInfosGen());\n\n    Set<String> segFiles = new HashSet<>();\n\n    // Build up new segment's file names.  Must do this\n    // before writing SegmentInfo:\n    for (String file: info.files()) {\n      final String newFileName;\n      newFileName = segName + IndexFileNames.stripSegmentName(file);\n      segFiles.add(newFileName);\n    }\n    newInfo.setFiles(segFiles);\n\n    // We must rewrite the SI file because it references segment name in its list of files, etc\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(directory);\n\n    boolean success = false;\n\n    try {\n\n      newInfo.getCodec().segmentInfoFormat().getSegmentInfoWriter().write(trackingDir, newInfo, fis, context);\n\n      final Collection<String> siFiles = trackingDir.getCreatedFiles();\n\n      // Copy the segment's files\n      for (String file: info.files()) {\n\n        final String newFileName = segName + IndexFileNames.stripSegmentName(file);\n\n        if (siFiles.contains(newFileName)) {\n          // We already rewrote this above\n          continue;\n        }\n\n        assert !slowFileExists(directory, newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; siFiles=\" + siFiles;\n\n        info.info.dir.copy(directory, file, newFileName, context);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        for(String file : newInfo.files()) {\n          try {\n            directory.deleteFile(file);\n          } catch (Throwable t) {\n          }\n        }\n      }\n    }\n    \n    return newInfoPerCommit;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context)\n      throws IOException {\n    \n    // note: we don't really need this fis (its copied), but we load it up\n    // so we don't pass a null value to the si writer\n    FieldInfos fis = SegmentReader.readFieldInfos(info);\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directory, info.info.getVersion(), segName, info.info.getDocCount(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), info.getFieldInfosGen());\n\n    Set<String> segFiles = new HashSet<>();\n\n    // Build up new segment's file names.  Must do this\n    // before writing SegmentInfo:\n    for (String file: info.files()) {\n      final String newFileName;\n      newFileName = segName + IndexFileNames.stripSegmentName(file);\n      segFiles.add(newFileName);\n    }\n    newInfo.setFiles(segFiles);\n\n    // We must rewrite the SI file because it references segment name in its list of files, etc\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(directory);\n\n    boolean success = false;\n\n    try {\n\n      newInfo.getCodec().segmentInfoFormat().getSegmentInfoWriter().write(trackingDir, newInfo, fis, context);\n\n      final Collection<String> siFiles = trackingDir.getCreatedFiles();\n\n      // Copy the segment's files\n      for (String file: info.files()) {\n\n        final String newFileName = segName + IndexFileNames.stripSegmentName(file);\n\n        if (siFiles.contains(newFileName)) {\n          // We already rewrote this above\n          continue;\n        }\n\n        assert !directory.fileExists(newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; siFiles=\" + siFiles;\n\n        info.info.dir.copy(directory, file, newFileName, context);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        for(String file : newInfo.files()) {\n          try {\n            directory.deleteFile(file);\n          } catch (Throwable t) {\n          }\n        }\n      }\n    }\n    \n    return newInfoPerCommit;\n  }\n\n","bugFix":null,"bugIntro":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0567bdc5c86c94ced64201187cfcef2417d76dda","date":1400678298,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context)\n      throws IOException {\n    \n    // note: we don't really need this fis (its copied), but we load it up\n    // so we don't pass a null value to the si writer\n    FieldInfos fis = SegmentReader.readFieldInfos(info);\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directory, info.info.getVersion(), segName, info.info.getDocCount(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo,\n        info.getDelCount(), info.getDelGen(), info.getFieldInfosGen(),\n        info.getDocValuesGen());\n\n    Set<String> segFiles = new HashSet<>();\n\n    // Build up new segment's file names.  Must do this\n    // before writing SegmentInfo:\n    for (String file: info.files()) {\n      final String newFileName;\n      newFileName = segName + IndexFileNames.stripSegmentName(file);\n      segFiles.add(newFileName);\n    }\n    newInfo.setFiles(segFiles);\n\n    // We must rewrite the SI file because it references segment name in its list of files, etc\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(directory);\n\n    boolean success = false;\n\n    try {\n\n      newInfo.getCodec().segmentInfoFormat().getSegmentInfoWriter().write(trackingDir, newInfo, fis, context);\n\n      final Collection<String> siFiles = trackingDir.getCreatedFiles();\n\n      // Copy the segment's files\n      for (String file: info.files()) {\n\n        final String newFileName = segName + IndexFileNames.stripSegmentName(file);\n\n        if (siFiles.contains(newFileName)) {\n          // We already rewrote this above\n          continue;\n        }\n\n        assert !slowFileExists(directory, newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; siFiles=\" + siFiles;\n\n        info.info.dir.copy(directory, file, newFileName, context);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        for(String file : newInfo.files()) {\n          try {\n            directory.deleteFile(file);\n          } catch (Throwable t) {\n          }\n        }\n      }\n    }\n    \n    return newInfoPerCommit;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context)\n      throws IOException {\n    \n    // note: we don't really need this fis (its copied), but we load it up\n    // so we don't pass a null value to the si writer\n    FieldInfos fis = SegmentReader.readFieldInfos(info);\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directory, info.info.getVersion(), segName, info.info.getDocCount(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), info.getFieldInfosGen());\n\n    Set<String> segFiles = new HashSet<>();\n\n    // Build up new segment's file names.  Must do this\n    // before writing SegmentInfo:\n    for (String file: info.files()) {\n      final String newFileName;\n      newFileName = segName + IndexFileNames.stripSegmentName(file);\n      segFiles.add(newFileName);\n    }\n    newInfo.setFiles(segFiles);\n\n    // We must rewrite the SI file because it references segment name in its list of files, etc\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(directory);\n\n    boolean success = false;\n\n    try {\n\n      newInfo.getCodec().segmentInfoFormat().getSegmentInfoWriter().write(trackingDir, newInfo, fis, context);\n\n      final Collection<String> siFiles = trackingDir.getCreatedFiles();\n\n      // Copy the segment's files\n      for (String file: info.files()) {\n\n        final String newFileName = segName + IndexFileNames.stripSegmentName(file);\n\n        if (siFiles.contains(newFileName)) {\n          // We already rewrote this above\n          continue;\n        }\n\n        assert !slowFileExists(directory, newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; siFiles=\" + siFiles;\n\n        info.info.dir.copy(directory, file, newFileName, context);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        for(String file : newInfo.files()) {\n          try {\n            directory.deleteFile(file);\n          } catch (Throwable t) {\n          }\n        }\n      }\n    }\n    \n    return newInfoPerCommit;\n  }\n\n","bugFix":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"bugIntro":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a656b32c3aa151037a8c52e9b134acc3cbf482bc","date":1400688195,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context)\n      throws IOException {\n    \n    // note: we don't really need this fis (its copied), but we load it up\n    // so we don't pass a null value to the si writer\n    FieldInfos fis = SegmentReader.readFieldInfos(info);\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directory, info.info.getVersion(), segName, info.info.getDocCount(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo,\n        info.getDelCount(), info.getDelGen(), info.getFieldInfosGen(),\n        info.getDocValuesGen());\n\n    Set<String> segFiles = new HashSet<>();\n\n    // Build up new segment's file names.  Must do this\n    // before writing SegmentInfo:\n    for (String file: info.files()) {\n      final String newFileName;\n      newFileName = segName + IndexFileNames.stripSegmentName(file);\n      segFiles.add(newFileName);\n    }\n    newInfo.setFiles(segFiles);\n\n    // We must rewrite the SI file because it references segment name in its list of files, etc\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(directory);\n\n    boolean success = false;\n\n    try {\n\n      newInfo.getCodec().segmentInfoFormat().getSegmentInfoWriter().write(trackingDir, newInfo, fis, context);\n\n      final Collection<String> siFiles = trackingDir.getCreatedFiles();\n\n      // Copy the segment's files\n      for (String file: info.files()) {\n\n        final String newFileName = segName + IndexFileNames.stripSegmentName(file);\n\n        if (siFiles.contains(newFileName)) {\n          // We already rewrote this above\n          continue;\n        }\n\n        assert !slowFileExists(directory, newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; siFiles=\" + siFiles;\n\n        info.info.dir.copy(directory, file, newFileName, context);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        for(String file : newInfo.files()) {\n          try {\n            directory.deleteFile(file);\n          } catch (Throwable t) {\n          }\n        }\n      }\n    }\n    \n    return newInfoPerCommit;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context)\n      throws IOException {\n    \n    // note: we don't really need this fis (its copied), but we load it up\n    // so we don't pass a null value to the si writer\n    FieldInfos fis = SegmentReader.readFieldInfos(info);\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directory, info.info.getVersion(), segName, info.info.getDocCount(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), info.getFieldInfosGen());\n\n    Set<String> segFiles = new HashSet<>();\n\n    // Build up new segment's file names.  Must do this\n    // before writing SegmentInfo:\n    for (String file: info.files()) {\n      final String newFileName;\n      newFileName = segName + IndexFileNames.stripSegmentName(file);\n      segFiles.add(newFileName);\n    }\n    newInfo.setFiles(segFiles);\n\n    // We must rewrite the SI file because it references segment name in its list of files, etc\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(directory);\n\n    boolean success = false;\n\n    try {\n\n      newInfo.getCodec().segmentInfoFormat().getSegmentInfoWriter().write(trackingDir, newInfo, fis, context);\n\n      final Collection<String> siFiles = trackingDir.getCreatedFiles();\n\n      // Copy the segment's files\n      for (String file: info.files()) {\n\n        final String newFileName = segName + IndexFileNames.stripSegmentName(file);\n\n        if (siFiles.contains(newFileName)) {\n          // We already rewrote this above\n          continue;\n        }\n\n        assert !slowFileExists(directory, newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; siFiles=\" + siFiles;\n\n        info.info.dir.copy(directory, file, newFileName, context);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        for(String file : newInfo.files()) {\n          try {\n            directory.deleteFile(file);\n          } catch (Throwable t) {\n          }\n        }\n      }\n    }\n    \n    return newInfoPerCommit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context)\n      throws IOException {\n    \n    // note: we don't really need this fis (its copied), but we load it up\n    // so we don't pass a null value to the si writer\n    FieldInfos fis = SegmentReader.readFieldInfos(info);\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directory, info.info.getVersion(), segName, info.info.getDocCount(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo,\n        info.getDelCount(), info.getDelGen(), info.getFieldInfosGen(),\n        info.getDocValuesGen());\n\n    Set<String> segFiles = new HashSet<>();\n\n    // Build up new segment's file names.  Must do this\n    // before writing SegmentInfo:\n    for (String file: info.files()) {\n      final String newFileName;\n      newFileName = segName + IndexFileNames.stripSegmentName(file);\n      segFiles.add(newFileName);\n    }\n    newInfo.setFiles(segFiles);\n\n    // We must rewrite the SI file because it references segment name in its list of files, etc\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(directory);\n\n    boolean success = false;\n\n    try {\n\n      newInfo.getCodec().segmentInfoFormat().getSegmentInfoWriter().write(trackingDir, newInfo, fis, context);\n\n      final Collection<String> siFiles = trackingDir.getCreatedFiles();\n\n      // Copy the segment's files\n      for (String file: info.files()) {\n\n        final String newFileName = segName + IndexFileNames.stripSegmentName(file);\n\n        if (siFiles.contains(newFileName)) {\n          // We already rewrote this above\n          continue;\n        }\n\n        assert !slowFileExists(directory, newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; siFiles=\" + siFiles;\n\n        info.info.dir.copy(directory, file, newFileName, context);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        for(String file : newInfo.files()) {\n          try {\n            directory.deleteFile(file);\n          } catch (Throwable t) {\n          }\n        }\n      }\n    }\n    \n    return newInfoPerCommit;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context)\n      throws IOException {\n    \n    // note: we don't really need this fis (its copied), but we load it up\n    // so we don't pass a null value to the si writer\n    FieldInfos fis = SegmentReader.readFieldInfos(info);\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directory, info.info.getVersion(), segName, info.info.getDocCount(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), info.getFieldInfosGen());\n\n    Set<String> segFiles = new HashSet<>();\n\n    // Build up new segment's file names.  Must do this\n    // before writing SegmentInfo:\n    for (String file: info.files()) {\n      final String newFileName;\n      newFileName = segName + IndexFileNames.stripSegmentName(file);\n      segFiles.add(newFileName);\n    }\n    newInfo.setFiles(segFiles);\n\n    // We must rewrite the SI file because it references segment name in its list of files, etc\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(directory);\n\n    boolean success = false;\n\n    try {\n\n      newInfo.getCodec().segmentInfoFormat().getSegmentInfoWriter().write(trackingDir, newInfo, fis, context);\n\n      final Collection<String> siFiles = trackingDir.getCreatedFiles();\n\n      // Copy the segment's files\n      for (String file: info.files()) {\n\n        final String newFileName = segName + IndexFileNames.stripSegmentName(file);\n\n        if (siFiles.contains(newFileName)) {\n          // We already rewrote this above\n          continue;\n        }\n\n        assert !slowFileExists(directory, newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; siFiles=\" + siFiles;\n\n        info.info.dir.copy(directory, file, newFileName, context);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        for(String file : newInfo.files()) {\n          try {\n            directory.deleteFile(file);\n          } catch (Throwable t) {\n          }\n        }\n      }\n    }\n    \n    return newInfoPerCommit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3cc329405ce41b8ef462b4cd30611eca1567620","date":1408661910,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context)\n      throws IOException {\n    \n    // note: we don't really need this fis (its copied), but we load it up\n    // so we don't pass a null value to the si writer\n    FieldInfos fis = SegmentReader.readFieldInfos(info);\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directory, info.info.getVersion(), segName, info.info.getDocCount(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), StringHelper.randomId());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo,\n        info.getDelCount(), info.getDelGen(), info.getFieldInfosGen(),\n        info.getDocValuesGen());\n\n    Set<String> segFiles = new HashSet<>();\n\n    // Build up new segment's file names.  Must do this\n    // before writing SegmentInfo:\n    for (String file: info.files()) {\n      final String newFileName;\n      newFileName = segName + IndexFileNames.stripSegmentName(file);\n      segFiles.add(newFileName);\n    }\n    newInfo.setFiles(segFiles);\n\n    // We must rewrite the SI file because it references segment name in its list of files, etc\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(directory);\n\n    boolean success = false;\n\n    try {\n\n      newInfo.getCodec().segmentInfoFormat().getSegmentInfoWriter().write(trackingDir, newInfo, fis, context);\n\n      final Collection<String> siFiles = trackingDir.getCreatedFiles();\n\n      // Copy the segment's files\n      for (String file: info.files()) {\n\n        final String newFileName = segName + IndexFileNames.stripSegmentName(file);\n\n        if (siFiles.contains(newFileName)) {\n          // We already rewrote this above\n          continue;\n        }\n\n        assert !slowFileExists(directory, newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; siFiles=\" + siFiles;\n\n        info.info.dir.copy(directory, file, newFileName, context);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        for(String file : newInfo.files()) {\n          try {\n            directory.deleteFile(file);\n          } catch (Throwable t) {\n          }\n        }\n      }\n    }\n    \n    return newInfoPerCommit;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context)\n      throws IOException {\n    \n    // note: we don't really need this fis (its copied), but we load it up\n    // so we don't pass a null value to the si writer\n    FieldInfos fis = SegmentReader.readFieldInfos(info);\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directory, info.info.getVersion(), segName, info.info.getDocCount(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo,\n        info.getDelCount(), info.getDelGen(), info.getFieldInfosGen(),\n        info.getDocValuesGen());\n\n    Set<String> segFiles = new HashSet<>();\n\n    // Build up new segment's file names.  Must do this\n    // before writing SegmentInfo:\n    for (String file: info.files()) {\n      final String newFileName;\n      newFileName = segName + IndexFileNames.stripSegmentName(file);\n      segFiles.add(newFileName);\n    }\n    newInfo.setFiles(segFiles);\n\n    // We must rewrite the SI file because it references segment name in its list of files, etc\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(directory);\n\n    boolean success = false;\n\n    try {\n\n      newInfo.getCodec().segmentInfoFormat().getSegmentInfoWriter().write(trackingDir, newInfo, fis, context);\n\n      final Collection<String> siFiles = trackingDir.getCreatedFiles();\n\n      // Copy the segment's files\n      for (String file: info.files()) {\n\n        final String newFileName = segName + IndexFileNames.stripSegmentName(file);\n\n        if (siFiles.contains(newFileName)) {\n          // We already rewrote this above\n          continue;\n        }\n\n        assert !slowFileExists(directory, newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; siFiles=\" + siFiles;\n\n        info.info.dir.copy(directory, file, newFileName, context);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        for(String file : newInfo.files()) {\n          try {\n            directory.deleteFile(file);\n          } catch (Throwable t) {\n          }\n        }\n      }\n    }\n    \n    return newInfoPerCommit;\n  }\n\n","bugFix":null,"bugIntro":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77d177b70aefca41f3edc910b0a703c76283d8b6","date":1411650976,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directory, info.info.getVersion(), segName, info.info.getDocCount(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n\n        assert !slowFileExists(directory, newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; newInfo.files=\" + newInfo.files();\n\n        info.info.dir.copy(directory, file, newFileName, context);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.deleteFilesIgnoringExceptions(directory, newInfo.files().toArray(new String[0]));\n      }\n    }\n    \n    return newInfoPerCommit;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context)\n      throws IOException {\n    \n    // note: we don't really need this fis (its copied), but we load it up\n    // so we don't pass a null value to the si writer\n    FieldInfos fis = SegmentReader.readFieldInfos(info);\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directory, info.info.getVersion(), segName, info.info.getDocCount(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), StringHelper.randomId());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo,\n        info.getDelCount(), info.getDelGen(), info.getFieldInfosGen(),\n        info.getDocValuesGen());\n\n    Set<String> segFiles = new HashSet<>();\n\n    // Build up new segment's file names.  Must do this\n    // before writing SegmentInfo:\n    for (String file: info.files()) {\n      final String newFileName;\n      newFileName = segName + IndexFileNames.stripSegmentName(file);\n      segFiles.add(newFileName);\n    }\n    newInfo.setFiles(segFiles);\n\n    // We must rewrite the SI file because it references segment name in its list of files, etc\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(directory);\n\n    boolean success = false;\n\n    try {\n\n      newInfo.getCodec().segmentInfoFormat().getSegmentInfoWriter().write(trackingDir, newInfo, fis, context);\n\n      final Collection<String> siFiles = trackingDir.getCreatedFiles();\n\n      // Copy the segment's files\n      for (String file: info.files()) {\n\n        final String newFileName = segName + IndexFileNames.stripSegmentName(file);\n\n        if (siFiles.contains(newFileName)) {\n          // We already rewrote this above\n          continue;\n        }\n\n        assert !slowFileExists(directory, newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; siFiles=\" + siFiles;\n\n        info.info.dir.copy(directory, file, newFileName, context);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        for(String file : newInfo.files()) {\n          try {\n            directory.deleteFile(file);\n          } catch (Throwable t) {\n          }\n        }\n      }\n    }\n    \n    return newInfoPerCommit;\n  }\n\n","bugFix":null,"bugIntro":["8521d944f9dfb45692ec28235dbf116d47ef69ba"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f6bd27530a2846413fe2d00030493c0e2d3a072","date":1411811855,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directory, info.info.getVersion(), segName, info.info.getDocCount(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n\n        assert !slowFileExists(directory, newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; newInfo.files=\" + newInfo.files();\n\n        info.info.dir.copy(directory, file, newFileName, context);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.deleteFilesIgnoringExceptions(directory, newInfo.files().toArray(new String[0]));\n      }\n    }\n    \n    return newInfoPerCommit;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context)\n      throws IOException {\n    \n    // note: we don't really need this fis (its copied), but we load it up\n    // so we don't pass a null value to the si writer\n    FieldInfos fis = SegmentReader.readFieldInfos(info);\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directory, info.info.getVersion(), segName, info.info.getDocCount(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), StringHelper.randomId());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo,\n        info.getDelCount(), info.getDelGen(), info.getFieldInfosGen(),\n        info.getDocValuesGen());\n\n    Set<String> segFiles = new HashSet<>();\n\n    // Build up new segment's file names.  Must do this\n    // before writing SegmentInfo:\n    for (String file: info.files()) {\n      final String newFileName;\n      newFileName = segName + IndexFileNames.stripSegmentName(file);\n      segFiles.add(newFileName);\n    }\n    newInfo.setFiles(segFiles);\n\n    // We must rewrite the SI file because it references segment name in its list of files, etc\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(directory);\n\n    boolean success = false;\n\n    try {\n\n      newInfo.getCodec().segmentInfoFormat().getSegmentInfoWriter().write(trackingDir, newInfo, fis, context);\n\n      final Collection<String> siFiles = trackingDir.getCreatedFiles();\n\n      // Copy the segment's files\n      for (String file: info.files()) {\n\n        final String newFileName = segName + IndexFileNames.stripSegmentName(file);\n\n        if (siFiles.contains(newFileName)) {\n          // We already rewrote this above\n          continue;\n        }\n\n        assert !slowFileExists(directory, newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; siFiles=\" + siFiles;\n\n        info.info.dir.copy(directory, file, newFileName, context);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        for(String file : newInfo.files()) {\n          try {\n            directory.deleteFile(file);\n          } catch (Throwable t) {\n          }\n        }\n      }\n    }\n    \n    return newInfoPerCommit;\n  }\n\n","bugFix":["0567bdc5c86c94ced64201187cfcef2417d76dda","634f330c54fd3f9f491d52036dc3f40b4f4d8934","23ab146d336df02e9a396ea060f8f4b114dc33a6","73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","352763be0465236f8e2ac188aa1b761cb3e1c9ee","8435160e9702b19398118ddf76b61c846612b6a4","07087852d7b2a5c7e7d79b19c3e3ba775596b5d8","e3cc329405ce41b8ef462b4cd30611eca1567620","9eae2a56dc810a17cf807d831f720dec931a03de","4356000e349e38c9fb48034695b7c309abd54557","cd4e13d997cf4fb810398a20a299c2c5a9f6b796","1494abe5dc85557ec2e2772f87660d48f831c3a5","fb5728b83dbb3e002cdd22adfe6caf103a96ef15","57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8521d944f9dfb45692ec28235dbf116d47ef69ba","date":1417535150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directory, info.info.getVersion(), segName, info.info.getDocCount(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n\n        assert !slowFileExists(directory, newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; newInfo.files=\" + newInfo.files();\n\n        info.info.dir.copy(directory, file, newFileName, context);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.deleteFilesIgnoringExceptions(directory, newInfo.files().toArray(new String[0]));\n      }\n    }\n    \n    return newInfoPerCommit;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directory, info.info.getVersion(), segName, info.info.getDocCount(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n\n        assert !slowFileExists(directory, newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; newInfo.files=\" + newInfo.files();\n\n        info.info.dir.copy(directory, file, newFileName, context);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.deleteFilesIgnoringExceptions(directory, newInfo.files().toArray(new String[0]));\n      }\n    }\n    \n    return newInfoPerCommit;\n  }\n\n","bugFix":["77d177b70aefca41f3edc910b0a703c76283d8b6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52d4cfb22484037a9b8e9080e03aeaff60954880","date":1420125313,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directory, info.info.getVersion(), segName, info.info.getDocCount(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n\n        assert !slowFileExists(directory, newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; newInfo.files=\" + newInfo.files();\n\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.deleteFilesIgnoringExceptions(directory, newInfo.files().toArray(new String[0]));\n      }\n    }\n    \n    return newInfoPerCommit;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directory, info.info.getVersion(), segName, info.info.getDocCount(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n\n        assert !slowFileExists(directory, newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; newInfo.files=\" + newInfo.files();\n\n        info.info.dir.copy(directory, file, newFileName, context);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.deleteFilesIgnoringExceptions(directory, newInfo.files().toArray(new String[0]));\n      }\n    }\n    \n    return newInfoPerCommit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0267c69e2456a3477a1ad785723f2135da3117e","date":1425317087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directory, info.info.getVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n\n        assert !slowFileExists(directory, newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; newInfo.files=\" + newInfo.files();\n\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.deleteFilesIgnoringExceptions(directory, newInfo.files().toArray(new String[0]));\n      }\n    }\n    \n    return newInfoPerCommit;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directory, info.info.getVersion(), segName, info.info.getDocCount(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n\n        assert !slowFileExists(directory, newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; newInfo.files=\" + newInfo.files();\n\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.deleteFilesIgnoringExceptions(directory, newInfo.files().toArray(new String[0]));\n      }\n    }\n    \n    return newInfoPerCommit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b06445ae1731e049327712db0454e5643ca9b7fe","date":1425329139,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directory, info.info.getVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n\n        assert !slowFileExists(directory, newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; newInfo.files=\" + newInfo.files();\n\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.deleteFilesIgnoringExceptions(directory, newInfo.files().toArray(new String[0]));\n      }\n    }\n    \n    return newInfoPerCommit;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directory, info.info.getVersion(), segName, info.info.getDocCount(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n\n        assert !slowFileExists(directory, newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; newInfo.files=\" + newInfo.files();\n\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.deleteFilesIgnoringExceptions(directory, newInfo.files().toArray(new String[0]));\n      }\n    }\n    \n    return newInfoPerCommit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directory, info.info.getVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n\n        assert !slowFileExists(directory, newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; newInfo.files=\" + newInfo.files();\n\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.deleteFilesIgnoringExceptions(directory, newInfo.files().toArray(new String[0]));\n      }\n    }\n    \n    return newInfoPerCommit;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directory, info.info.getVersion(), segName, info.info.getDocCount(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n\n        assert !slowFileExists(directory, newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; newInfo.files=\" + newInfo.files();\n\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.deleteFilesIgnoringExceptions(directory, newInfo.files().toArray(new String[0]));\n      }\n    }\n    \n    return newInfoPerCommit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"618635065f043788c9e034f96ca5cd5cea1b4592","date":1433442044,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directoryOrig, info.info.getVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n\n        assert !slowFileExists(directory, newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; newInfo.files=\" + newInfo.files();\n\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.deleteFilesIgnoringExceptions(directory, newInfo.files().toArray(new String[0]));\n      }\n    }\n    \n    return newInfoPerCommit;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directory, info.info.getVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n\n        assert !slowFileExists(directory, newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; newInfo.files=\" + newInfo.files();\n\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.deleteFilesIgnoringExceptions(directory, newInfo.files().toArray(new String[0]));\n      }\n    }\n    \n    return newInfoPerCommit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"950882a2bd2a5f9dc16a154871584eaa643d882a","date":1436366563,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directoryOrig, info.info.getVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    Set<String> copiedFiles = new HashSet<>();\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n\n        assert !slowFileExists(directory, newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; newInfo.files=\" + newInfo.files();\n\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n        copiedFiles.add(newFileName);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteNewFiles(copiedFiles);\n      }\n    }\n\n    assert copiedFiles.equals(newInfoPerCommit.files());\n    \n    return newInfoPerCommit;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directoryOrig, info.info.getVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n\n        assert !slowFileExists(directory, newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; newInfo.files=\" + newInfo.files();\n\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.deleteFilesIgnoringExceptions(directory, newInfo.files().toArray(new String[0]));\n      }\n    }\n    \n    return newInfoPerCommit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directoryOrig, info.info.getVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes(), info.info.getIndexSort());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    Set<String> copiedFiles = new HashSet<>();\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n\n        assert !slowFileExists(directory, newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; newInfo.files=\" + newInfo.files();\n\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n        copiedFiles.add(newFileName);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteNewFiles(copiedFiles);\n      }\n    }\n\n    assert copiedFiles.equals(newInfoPerCommit.files());\n    \n    return newInfoPerCommit;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directoryOrig, info.info.getVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    Set<String> copiedFiles = new HashSet<>();\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n\n        assert !slowFileExists(directory, newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; newInfo.files=\" + newInfo.files();\n\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n        copiedFiles.add(newFileName);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteNewFiles(copiedFiles);\n      }\n    }\n\n    assert copiedFiles.equals(newInfoPerCommit.files());\n    \n    return newInfoPerCommit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directoryOrig, info.info.getVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes(), info.info.getIndexSort());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    Set<String> copiedFiles = new HashSet<>();\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n\n        assert !slowFileExists(directory, newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; newInfo.files=\" + newInfo.files();\n\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n        copiedFiles.add(newFileName);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteNewFiles(copiedFiles);\n      }\n    }\n\n    assert copiedFiles.equals(newInfoPerCommit.files());\n    \n    return newInfoPerCommit;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directoryOrig, info.info.getVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    Set<String> copiedFiles = new HashSet<>();\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n\n        assert !slowFileExists(directory, newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; newInfo.files=\" + newInfo.files();\n\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n        copiedFiles.add(newFileName);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteNewFiles(copiedFiles);\n      }\n    }\n\n    assert copiedFiles.equals(newInfoPerCommit.files());\n    \n    return newInfoPerCommit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directoryOrig, info.info.getVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes(), info.info.getIndexSort());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    Set<String> copiedFiles = new HashSet<>();\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n\n        assert !slowFileExists(directory, newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; newInfo.files=\" + newInfo.files();\n\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n        copiedFiles.add(newFileName);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteNewFiles(copiedFiles);\n      }\n    }\n\n    assert copiedFiles.equals(newInfoPerCommit.files());\n    \n    return newInfoPerCommit;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directoryOrig, info.info.getVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    Set<String> copiedFiles = new HashSet<>();\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n\n        assert !slowFileExists(directory, newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; newInfo.files=\" + newInfo.files();\n\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n        copiedFiles.add(newFileName);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteNewFiles(copiedFiles);\n      }\n    }\n\n    assert copiedFiles.equals(newInfoPerCommit.files());\n    \n    return newInfoPerCommit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directoryOrig, info.info.getVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes(), info.info.getIndexSort());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    Set<String> copiedFiles = new HashSet<>();\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n\n        assert !slowFileExists(directory, newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; newInfo.files=\" + newInfo.files();\n\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n        copiedFiles.add(newFileName);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteNewFiles(copiedFiles);\n      }\n    }\n\n    assert copiedFiles.equals(newInfoPerCommit.files());\n    \n    return newInfoPerCommit;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directoryOrig, info.info.getVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    Set<String> copiedFiles = new HashSet<>();\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n\n        assert !slowFileExists(directory, newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; newInfo.files=\" + newInfo.files();\n\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n        copiedFiles.add(newFileName);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteNewFiles(copiedFiles);\n      }\n    }\n\n    assert copiedFiles.equals(newInfoPerCommit.files());\n    \n    return newInfoPerCommit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7acb3c7b3ad0a84a18fc0a9d6585ada371859905","date":1468229576,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directoryOrig, info.info.getVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes(), info.info.getIndexSort());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    Set<String> copiedFiles = new HashSet<>();\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n        copiedFiles.add(newFileName);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteNewFiles(copiedFiles);\n      }\n    }\n\n    assert copiedFiles.equals(newInfoPerCommit.files());\n    \n    return newInfoPerCommit;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directoryOrig, info.info.getVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes(), info.info.getIndexSort());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    Set<String> copiedFiles = new HashSet<>();\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n\n        assert !slowFileExists(directory, newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; newInfo.files=\" + newInfo.files();\n\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n        copiedFiles.add(newFileName);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteNewFiles(copiedFiles);\n      }\n    }\n\n    assert copiedFiles.equals(newInfoPerCommit.files());\n    \n    return newInfoPerCommit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dcbdc4d70424f69441091cee35f497a60c60bdb","date":1468245582,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directoryOrig, info.info.getVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes(), info.info.getIndexSort());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    Set<String> copiedFiles = new HashSet<>();\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n        copiedFiles.add(newFileName);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteNewFiles(copiedFiles);\n      }\n    }\n\n    assert copiedFiles.equals(newInfoPerCommit.files());\n    \n    return newInfoPerCommit;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directoryOrig, info.info.getVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes(), info.info.getIndexSort());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    Set<String> copiedFiles = new HashSet<>();\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n\n        assert !slowFileExists(directory, newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; newInfo.files=\" + newInfo.files();\n\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n        copiedFiles.add(newFileName);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteNewFiles(copiedFiles);\n      }\n    }\n\n    assert copiedFiles.equals(newInfoPerCommit.files());\n    \n    return newInfoPerCommit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directoryOrig, info.info.getVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes(), info.info.getIndexSort());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    Set<String> copiedFiles = new HashSet<>();\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n        copiedFiles.add(newFileName);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteNewFiles(copiedFiles);\n      }\n    }\n\n    assert copiedFiles.equals(newInfoPerCommit.files());\n    \n    return newInfoPerCommit;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directoryOrig, info.info.getVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    Set<String> copiedFiles = new HashSet<>();\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n\n        assert !slowFileExists(directory, newFileName): \"file \\\"\" + newFileName + \"\\\" already exists; newInfo.files=\" + newInfo.files();\n\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n        copiedFiles.add(newFileName);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteNewFiles(copiedFiles);\n      }\n    }\n\n    assert copiedFiles.equals(newInfoPerCommit.files());\n    \n    return newInfoPerCommit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31741cf1390044e38a2ec3127cf302ba841bfd75","date":1491292636,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directoryOrig, info.info.getVersion(), info.info.getMinVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes(), info.info.getIndexSort());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    Set<String> copiedFiles = new HashSet<>();\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n        copiedFiles.add(newFileName);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteNewFiles(copiedFiles);\n      }\n    }\n\n    assert copiedFiles.equals(newInfoPerCommit.files());\n    \n    return newInfoPerCommit;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directoryOrig, info.info.getVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes(), info.info.getIndexSort());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    Set<String> copiedFiles = new HashSet<>();\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n        copiedFiles.add(newFileName);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteNewFiles(copiedFiles);\n      }\n    }\n\n    assert copiedFiles.equals(newInfoPerCommit.files());\n    \n    return newInfoPerCommit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92212fd254551a0b1156aafc3a1a6ed1a43932ad","date":1491296431,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directoryOrig, info.info.getVersion(), info.info.getMinVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes(), info.info.getIndexSort());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    Set<String> copiedFiles = new HashSet<>();\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n        copiedFiles.add(newFileName);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteNewFiles(copiedFiles);\n      }\n    }\n\n    assert copiedFiles.equals(newInfoPerCommit.files());\n    \n    return newInfoPerCommit;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directoryOrig, info.info.getVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes(), info.info.getIndexSort());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    Set<String> copiedFiles = new HashSet<>();\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n        copiedFiles.add(newFileName);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteNewFiles(copiedFiles);\n      }\n    }\n\n    assert copiedFiles.equals(newInfoPerCommit.files());\n    \n    return newInfoPerCommit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directoryOrig, info.info.getVersion(), info.info.getMinVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes(), info.info.getIndexSort());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    Set<String> copiedFiles = new HashSet<>();\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n        copiedFiles.add(newFileName);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteNewFiles(copiedFiles);\n      }\n    }\n\n    assert copiedFiles.equals(newInfoPerCommit.files());\n    \n    return newInfoPerCommit;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directoryOrig, info.info.getVersion(), info.info.getMinVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes(), info.info.getIndexSort());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    Set<String> copiedFiles = new HashSet<>();\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n        copiedFiles.add(newFileName);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteNewFiles(copiedFiles);\n      }\n    }\n\n    assert copiedFiles.equals(newInfoPerCommit.files());\n    \n    return newInfoPerCommit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directoryOrig, info.info.getVersion(), info.info.getMinVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes(), info.info.getIndexSort());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    Set<String> copiedFiles = new HashSet<>();\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n        copiedFiles.add(newFileName);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteNewFiles(copiedFiles);\n      }\n    }\n\n    assert copiedFiles.equals(newInfoPerCommit.files());\n    \n    return newInfoPerCommit;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directoryOrig, info.info.getVersion(), info.info.getMinVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes(), info.info.getIndexSort());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    Set<String> copiedFiles = new HashSet<>();\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n        copiedFiles.add(newFileName);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteNewFiles(copiedFiles);\n      }\n    }\n\n    assert copiedFiles.equals(newInfoPerCommit.files());\n    \n    return newInfoPerCommit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directoryOrig, info.info.getVersion(), info.info.getMinVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes(), info.info.getIndexSort());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    Set<String> copiedFiles = new HashSet<>();\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n        copiedFiles.add(newFileName);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteNewFiles(copiedFiles);\n      }\n    }\n\n    assert copiedFiles.equals(newInfoPerCommit.files());\n    \n    return newInfoPerCommit;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    //System.out.println(\"copy seg=\" + info.info.name + \" version=\" + info.info.getVersion());\n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directoryOrig, info.info.getVersion(), info.info.getMinVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes(), info.info.getIndexSort());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    Set<String> copiedFiles = new HashSet<>();\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n        copiedFiles.add(newFileName);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteNewFiles(copiedFiles);\n      }\n    }\n\n    assert copiedFiles.equals(newInfoPerCommit.files());\n    \n    return newInfoPerCommit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e165dc2e339428ed06c118109d99acf35e8240de","date":1523200521,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directoryOrig, info.info.getVersion(), info.info.getMinVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes(), info.info.getIndexSort());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n\n    newInfo.setFiles(info.info.files());\n    newInfoPerCommit.setFieldInfosFiles(info.getFieldInfosFiles());\n    newInfoPerCommit.setDocValuesUpdatesFiles(info.getDocValuesUpdatesFiles());\n\n    boolean success = false;\n\n    Set<String> copiedFiles = new HashSet<>();\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n        copiedFiles.add(newFileName);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteNewFiles(copiedFiles);\n      }\n    }\n\n    assert copiedFiles.equals(newInfoPerCommit.files()): \"copiedFiles=\" + copiedFiles + \" vs \" + newInfoPerCommit.files();\n    \n    return newInfoPerCommit;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directoryOrig, info.info.getVersion(), info.info.getMinVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes(), info.info.getIndexSort());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    Set<String> copiedFiles = new HashSet<>();\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n        copiedFiles.add(newFileName);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteNewFiles(copiedFiles);\n      }\n    }\n\n    assert copiedFiles.equals(newInfoPerCommit.files());\n    \n    return newInfoPerCommit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directoryOrig, info.info.getVersion(), info.info.getMinVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes(), info.info.getIndexSort());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n\n    newInfo.setFiles(info.info.files());\n    newInfoPerCommit.setFieldInfosFiles(info.getFieldInfosFiles());\n    newInfoPerCommit.setDocValuesUpdatesFiles(info.getDocValuesUpdatesFiles());\n\n    boolean success = false;\n\n    Set<String> copiedFiles = new HashSet<>();\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n        copiedFiles.add(newFileName);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteNewFiles(copiedFiles);\n      }\n    }\n\n    assert copiedFiles.equals(newInfoPerCommit.files()): \"copiedFiles=\" + copiedFiles + \" vs \" + newInfoPerCommit.files();\n    \n    return newInfoPerCommit;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directoryOrig, info.info.getVersion(), info.info.getMinVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes(), info.info.getIndexSort());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n    \n    newInfo.setFiles(info.files());\n\n    boolean success = false;\n\n    Set<String> copiedFiles = new HashSet<>();\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n        copiedFiles.add(newFileName);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteNewFiles(copiedFiles);\n      }\n    }\n\n    assert copiedFiles.equals(newInfoPerCommit.files());\n    \n    return newInfoPerCommit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f2203cb8ae87188877cfbf6ad170c5738a0aad5","date":1528117512,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directoryOrig, info.info.getVersion(), info.info.getMinVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes(), info.info.getIndexSort());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getSoftDelCount(), info.getDelGen(),\n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n\n    newInfo.setFiles(info.info.files());\n    newInfoPerCommit.setFieldInfosFiles(info.getFieldInfosFiles());\n    newInfoPerCommit.setDocValuesUpdatesFiles(info.getDocValuesUpdatesFiles());\n\n    boolean success = false;\n\n    Set<String> copiedFiles = new HashSet<>();\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n        copiedFiles.add(newFileName);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteNewFiles(copiedFiles);\n      }\n    }\n\n    assert copiedFiles.equals(newInfoPerCommit.files()): \"copiedFiles=\" + copiedFiles + \" vs \" + newInfoPerCommit.files();\n    \n    return newInfoPerCommit;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directoryOrig, info.info.getVersion(), info.info.getMinVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes(), info.info.getIndexSort());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n\n    newInfo.setFiles(info.info.files());\n    newInfoPerCommit.setFieldInfosFiles(info.getFieldInfosFiles());\n    newInfoPerCommit.setDocValuesUpdatesFiles(info.getDocValuesUpdatesFiles());\n\n    boolean success = false;\n\n    Set<String> copiedFiles = new HashSet<>();\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n        copiedFiles.add(newFileName);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteNewFiles(copiedFiles);\n      }\n    }\n\n    assert copiedFiles.equals(newInfoPerCommit.files()): \"copiedFiles=\" + copiedFiles + \" vs \" + newInfoPerCommit.files();\n    \n    return newInfoPerCommit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directoryOrig, info.info.getVersion(), info.info.getMinVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes(), info.info.getIndexSort());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getSoftDelCount(), info.getDelGen(),\n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n\n    newInfo.setFiles(info.info.files());\n    newInfoPerCommit.setFieldInfosFiles(info.getFieldInfosFiles());\n    newInfoPerCommit.setDocValuesUpdatesFiles(info.getDocValuesUpdatesFiles());\n\n    boolean success = false;\n\n    Set<String> copiedFiles = new HashSet<>();\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n        copiedFiles.add(newFileName);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteNewFiles(copiedFiles);\n      }\n    }\n\n    assert copiedFiles.equals(newInfoPerCommit.files()): \"copiedFiles=\" + copiedFiles + \" vs \" + newInfoPerCommit.files();\n    \n    return newInfoPerCommit;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directoryOrig, info.info.getVersion(), info.info.getMinVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes(), info.info.getIndexSort());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n\n    newInfo.setFiles(info.info.files());\n    newInfoPerCommit.setFieldInfosFiles(info.getFieldInfosFiles());\n    newInfoPerCommit.setDocValuesUpdatesFiles(info.getDocValuesUpdatesFiles());\n\n    boolean success = false;\n\n    Set<String> copiedFiles = new HashSet<>();\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n        copiedFiles.add(newFileName);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteNewFiles(copiedFiles);\n      }\n    }\n\n    assert copiedFiles.equals(newInfoPerCommit.files()): \"copiedFiles=\" + copiedFiles + \" vs \" + newInfoPerCommit.files();\n    \n    return newInfoPerCommit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directoryOrig, info.info.getVersion(), info.info.getMinVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes(), info.info.getIndexSort());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getSoftDelCount(), info.getDelGen(),\n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n\n    newInfo.setFiles(info.info.files());\n    newInfoPerCommit.setFieldInfosFiles(info.getFieldInfosFiles());\n    newInfoPerCommit.setDocValuesUpdatesFiles(info.getDocValuesUpdatesFiles());\n\n    boolean success = false;\n\n    Set<String> copiedFiles = new HashSet<>();\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n        copiedFiles.add(newFileName);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteNewFiles(copiedFiles);\n      }\n    }\n\n    assert copiedFiles.equals(newInfoPerCommit.files()): \"copiedFiles=\" + copiedFiles + \" vs \" + newInfoPerCommit.files();\n    \n    return newInfoPerCommit;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directoryOrig, info.info.getVersion(), info.info.getMinVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes(), info.info.getIndexSort());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getDelGen(), \n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n\n    newInfo.setFiles(info.info.files());\n    newInfoPerCommit.setFieldInfosFiles(info.getFieldInfosFiles());\n    newInfoPerCommit.setDocValuesUpdatesFiles(info.getDocValuesUpdatesFiles());\n\n    boolean success = false;\n\n    Set<String> copiedFiles = new HashSet<>();\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n        copiedFiles.add(newFileName);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteNewFiles(copiedFiles);\n      }\n    }\n\n    assert copiedFiles.equals(newInfoPerCommit.files()): \"copiedFiles=\" + copiedFiles + \" vs \" + newInfoPerCommit.files();\n    \n    return newInfoPerCommit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14654be3f7a82c9a3c52169e365baa55bfe64f66","date":1587212697,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#copySegmentAsIs(SegmentCommitInfo,String,IOContext).mjava","sourceNew":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directoryOrig, info.info.getVersion(), info.info.getMinVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes(), info.info.getIndexSort());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getSoftDelCount(), info.getDelGen(),\n                                                               info.getFieldInfosGen(), info.getDocValuesGen(), info.getId());\n\n    newInfo.setFiles(info.info.files());\n    newInfoPerCommit.setFieldInfosFiles(info.getFieldInfosFiles());\n    newInfoPerCommit.setDocValuesUpdatesFiles(info.getDocValuesUpdatesFiles());\n\n    boolean success = false;\n\n    Set<String> copiedFiles = new HashSet<>();\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n        copiedFiles.add(newFileName);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteNewFiles(copiedFiles);\n      }\n    }\n\n    assert copiedFiles.equals(newInfoPerCommit.files()): \"copiedFiles=\" + copiedFiles + \" vs \" + newInfoPerCommit.files();\n    \n    return newInfoPerCommit;\n  }\n\n","sourceOld":"  /** Copies the segment files as-is into the IndexWriter's directory. */\n  private SegmentCommitInfo copySegmentAsIs(SegmentCommitInfo info, String segName, IOContext context) throws IOException {\n    \n    // Same SI as before but we change directory and name\n    SegmentInfo newInfo = new SegmentInfo(directoryOrig, info.info.getVersion(), info.info.getMinVersion(), segName, info.info.maxDoc(),\n                                          info.info.getUseCompoundFile(), info.info.getCodec(), \n                                          info.info.getDiagnostics(), info.info.getId(), info.info.getAttributes(), info.info.getIndexSort());\n    SegmentCommitInfo newInfoPerCommit = new SegmentCommitInfo(newInfo, info.getDelCount(), info.getSoftDelCount(), info.getDelGen(),\n                                                               info.getFieldInfosGen(), info.getDocValuesGen());\n\n    newInfo.setFiles(info.info.files());\n    newInfoPerCommit.setFieldInfosFiles(info.getFieldInfosFiles());\n    newInfoPerCommit.setDocValuesUpdatesFiles(info.getDocValuesUpdatesFiles());\n\n    boolean success = false;\n\n    Set<String> copiedFiles = new HashSet<>();\n    try {\n      // Copy the segment's files\n      for (String file: info.files()) {\n        final String newFileName = newInfo.namedForThisSegment(file);\n        directory.copyFrom(info.info.dir, file, newFileName, context);\n        copiedFiles.add(newFileName);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // Safe: these files must exist\n        deleteNewFiles(copiedFiles);\n      }\n    }\n\n    assert copiedFiles.equals(newInfoPerCommit.files()): \"copiedFiles=\" + copiedFiles + \" vs \" + newInfoPerCommit.files();\n    \n    return newInfoPerCommit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e165dc2e339428ed06c118109d99acf35e8240de":["28288370235ed02234a64753cdbf0c6ec096304a"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["31741cf1390044e38a2ec3127cf302ba841bfd75"],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["e3cc329405ce41b8ef462b4cd30611eca1567620","77d177b70aefca41f3edc910b0a703c76283d8b6"],"0ad30c6a479e764150a3316e57263319775f1df2":["950882a2bd2a5f9dc16a154871584eaa643d882a","3d33e731a93d4b57e662ff094f64f94a745422d4"],"b7605579001505896d48b07160075a5c8b8e128e":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796","0567bdc5c86c94ced64201187cfcef2417d76dda"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["2dcbdc4d70424f69441091cee35f497a60c60bdb"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["950882a2bd2a5f9dc16a154871584eaa643d882a","0ad30c6a479e764150a3316e57263319775f1df2"],"d58e44159788900f4a2113b84463dc3fbbf80f20":["28288370235ed02234a64753cdbf0c6ec096304a","e165dc2e339428ed06c118109d99acf35e8240de"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["52d4cfb22484037a9b8e9080e03aeaff60954880","b0267c69e2456a3477a1ad785723f2135da3117e"],"7acb3c7b3ad0a84a18fc0a9d6585ada371859905":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"b06445ae1731e049327712db0454e5643ca9b7fe":["52d4cfb22484037a9b8e9080e03aeaff60954880","b0267c69e2456a3477a1ad785723f2135da3117e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["d58e44159788900f4a2113b84463dc3fbbf80f20","8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"52d4cfb22484037a9b8e9080e03aeaff60954880":["8521d944f9dfb45692ec28235dbf116d47ef69ba"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":["2dcbdc4d70424f69441091cee35f497a60c60bdb"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"77d177b70aefca41f3edc910b0a703c76283d8b6":["e3cc329405ce41b8ef462b4cd30611eca1567620"],"b0267c69e2456a3477a1ad785723f2135da3117e":["52d4cfb22484037a9b8e9080e03aeaff60954880"],"2dcbdc4d70424f69441091cee35f497a60c60bdb":["d470c8182e92b264680e34081b75e70a9f2b3c89","7acb3c7b3ad0a84a18fc0a9d6585ada371859905"],"0567bdc5c86c94ced64201187cfcef2417d76dda":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["92212fd254551a0b1156aafc3a1a6ed1a43932ad","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["31741cf1390044e38a2ec3127cf302ba841bfd75","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["950882a2bd2a5f9dc16a154871584eaa643d882a","2dcbdc4d70424f69441091cee35f497a60c60bdb"],"618635065f043788c9e034f96ca5cd5cea1b4592":["b0267c69e2456a3477a1ad785723f2135da3117e"],"8521d944f9dfb45692ec28235dbf116d47ef69ba":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"e3cc329405ce41b8ef462b4cd30611eca1567620":["0567bdc5c86c94ced64201187cfcef2417d76dda"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["950882a2bd2a5f9dc16a154871584eaa643d882a"],"14654be3f7a82c9a3c52169e365baa55bfe64f66":["8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"950882a2bd2a5f9dc16a154871584eaa643d882a":["618635065f043788c9e034f96ca5cd5cea1b4592"],"a656b32c3aa151037a8c52e9b134acc3cbf482bc":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796","0567bdc5c86c94ced64201187cfcef2417d76dda"],"8f2203cb8ae87188877cfbf6ad170c5738a0aad5":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["950882a2bd2a5f9dc16a154871584eaa643d882a","ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"f592209545c71895260367152601e9200399776d":["d58e44159788900f4a2113b84463dc3fbbf80f20","8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["14654be3f7a82c9a3c52169e365baa55bfe64f66"]},"commit2Childs":{"e165dc2e339428ed06c118109d99acf35e8240de":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["8521d944f9dfb45692ec28235dbf116d47ef69ba"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"b7605579001505896d48b07160075a5c8b8e128e":[],"31741cf1390044e38a2ec3127cf302ba841bfd75":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","28288370235ed02234a64753cdbf0c6ec096304a"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["7acb3c7b3ad0a84a18fc0a9d6585ada371859905","2dcbdc4d70424f69441091cee35f497a60c60bdb"],"d58e44159788900f4a2113b84463dc3fbbf80f20":["b70042a8a492f7054d480ccdd2be9796510d4327","8f2203cb8ae87188877cfbf6ad170c5738a0aad5","f592209545c71895260367152601e9200399776d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"7acb3c7b3ad0a84a18fc0a9d6585ada371859905":["2dcbdc4d70424f69441091cee35f497a60c60bdb"],"b06445ae1731e049327712db0454e5643ca9b7fe":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"52d4cfb22484037a9b8e9080e03aeaff60954880":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","b0267c69e2456a3477a1ad785723f2135da3117e"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["b7605579001505896d48b07160075a5c8b8e128e","0567bdc5c86c94ced64201187cfcef2417d76dda","a656b32c3aa151037a8c52e9b134acc3cbf482bc"],"77d177b70aefca41f3edc910b0a703c76283d8b6":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"2dcbdc4d70424f69441091cee35f497a60c60bdb":["31741cf1390044e38a2ec3127cf302ba841bfd75","92212fd254551a0b1156aafc3a1a6ed1a43932ad","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b0267c69e2456a3477a1ad785723f2135da3117e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","618635065f043788c9e034f96ca5cd5cea1b4592"],"0567bdc5c86c94ced64201187cfcef2417d76dda":["b7605579001505896d48b07160075a5c8b8e128e","e3cc329405ce41b8ef462b4cd30611eca1567620","a656b32c3aa151037a8c52e9b134acc3cbf482bc"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["e165dc2e339428ed06c118109d99acf35e8240de","d58e44159788900f4a2113b84463dc3fbbf80f20"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"8521d944f9dfb45692ec28235dbf116d47ef69ba":["52d4cfb22484037a9b8e9080e03aeaff60954880"],"618635065f043788c9e034f96ca5cd5cea1b4592":["950882a2bd2a5f9dc16a154871584eaa643d882a"],"e3cc329405ce41b8ef462b4cd30611eca1567620":["5f6bd27530a2846413fe2d00030493c0e2d3a072","77d177b70aefca41f3edc910b0a703c76283d8b6"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"14654be3f7a82c9a3c52169e365baa55bfe64f66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"950882a2bd2a5f9dc16a154871584eaa643d882a":["0ad30c6a479e764150a3316e57263319775f1df2","d470c8182e92b264680e34081b75e70a9f2b3c89","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ceaef6cfc68c8ab22a684192e469a8280f9e6e70","3d33e731a93d4b57e662ff094f64f94a745422d4"],"a656b32c3aa151037a8c52e9b134acc3cbf482bc":[],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"8f2203cb8ae87188877cfbf6ad170c5738a0aad5":["b70042a8a492f7054d480ccdd2be9796510d4327","14654be3f7a82c9a3c52169e365baa55bfe64f66","f592209545c71895260367152601e9200399776d"],"f592209545c71895260367152601e9200399776d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7605579001505896d48b07160075a5c8b8e128e","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","b70042a8a492f7054d480ccdd2be9796510d4327","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a656b32c3aa151037a8c52e9b134acc3cbf482bc","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}