{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testGetMaxIntFacets().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testGetMaxIntFacets().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testGetMaxIntFacets().mjava","sourceNew":"  /**\n   * Creating an index, matching the results of an top K = Integer.MAX_VALUE and top-1000 requests\n   */\n  @Test\n  public void testGetMaxIntFacets() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      // do different facet counts and compare to control\n      CategoryPath path = new CategoryPath(\"a\", \"b\");\n      FacetSearchParams sParams = getFacetedSearchParams(partitionSize);\n      sParams.addFacetRequest(new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      long start = System.currentTimeMillis();\n      List<FacetResult> results = fc.getFacetResults();\n      long end = System.currentTimeMillis();\n\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n\n      assertEquals(\"Should only be one result as there's only one request\", 1, results.size());\n      FacetResult res = results.get(0);\n      assertEquals(path + \" should only have 4 desendants\", 4, res.getNumValidDescendants());\n\n      // As a control base results, ask for top-1000 results\n      FacetSearchParams sParams2 = getFacetedSearchParams(partitionSize);\n      sParams2.addFacetRequest(new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc2 = new FacetsCollector(sParams2, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc2);\n      List<FacetResult> baseResults = fc2.getFacetResults();\n      FacetResult baseRes = baseResults.get(0);\n\n      // Removing the first line which holds the REQUEST and this is surly different between the two\n      String baseResultString = baseRes.toString();\n      baseResultString = baseResultString.substring(baseResultString.indexOf('\\n'));\n      \n      // Removing the first line\n      String resultString = res.toString();\n      resultString = resultString.substring(resultString.indexOf('\\n'));\n      \n      assertTrue(\"Results for k=MAX_VALUE do not match the regular results for k=1000!!\",\n          baseResultString.equals(resultString));\n      \n      closeAll();\n    }\n  }\n\n","sourceOld":"  /**\n   * Creating an index, matching the results of an top K = Integer.MAX_VALUE and top-1000 requests\n   */\n  @Test\n  public void testGetMaxIntFacets() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      // do different facet counts and compare to control\n      CategoryPath path = new CategoryPath(\"a\", \"b\");\n      FacetSearchParams sParams = getFacetedSearchParams(partitionSize);\n      sParams.addFacetRequest(new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      long start = System.currentTimeMillis();\n      List<FacetResult> results = fc.getFacetResults();\n      long end = System.currentTimeMillis();\n\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n\n      assertEquals(\"Should only be one result as there's only one request\", 1, results.size());\n      FacetResult res = results.get(0);\n      assertEquals(path + \" should only have 4 desendants\", 4, res.getNumValidDescendants());\n\n      // As a control base results, ask for top-1000 results\n      FacetSearchParams sParams2 = getFacetedSearchParams(partitionSize);\n      sParams2.addFacetRequest(new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc2 = new FacetsCollector(sParams2, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc2);\n      List<FacetResult> baseResults = fc2.getFacetResults();\n      FacetResult baseRes = baseResults.get(0);\n\n      // Removing the first line which holds the REQUEST and this is surly different between the two\n      String baseResultString = baseRes.toString();\n      baseResultString = baseResultString.substring(baseResultString.indexOf('\\n'));\n      \n      // Removing the first line\n      String resultString = res.toString();\n      resultString = resultString.substring(resultString.indexOf('\\n'));\n      \n      assertTrue(\"Results for k=MAX_VALUE do not match the regular results for k=1000!!\",\n          baseResultString.equals(resultString));\n      \n      closeAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4c6c7f3cda7a0595cabd16e5e9107ca29852708","date":1355402234,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testGetMaxIntFacets().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testGetMaxIntFacets().mjava","sourceNew":"  /**\n   * Creating an index, matching the results of an top K = Integer.MAX_VALUE and top-1000 requests\n   */\n  @Test\n  public void testGetMaxIntFacets() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      // do different facet counts and compare to control\n      CategoryPath path = new CategoryPath(\"a\", \"b\");\n      FacetSearchParams sParams = getFacetSearchParams(\n          getFacetIndexingParams(partitionSize), new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      long start = System.currentTimeMillis();\n      List<FacetResult> results = fc.getFacetResults();\n      long end = System.currentTimeMillis();\n\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n\n      assertEquals(\"Should only be one result as there's only one request\", 1, results.size());\n      FacetResult res = results.get(0);\n      assertEquals(path + \" should only have 4 desendants\", 4, res.getNumValidDescendants());\n\n      // As a control base results, ask for top-1000 results\n      FacetSearchParams sParams2 = getFacetSearchParams(\n          getFacetIndexingParams(partitionSize), new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc2 = new FacetsCollector(sParams2, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc2);\n      List<FacetResult> baseResults = fc2.getFacetResults();\n      FacetResult baseRes = baseResults.get(0);\n\n      // Removing the first line which holds the REQUEST and this is surly different between the two\n      String baseResultString = baseRes.toString();\n      baseResultString = baseResultString.substring(baseResultString.indexOf('\\n'));\n      \n      // Removing the first line\n      String resultString = res.toString();\n      resultString = resultString.substring(resultString.indexOf('\\n'));\n      \n      assertTrue(\"Results for k=MAX_VALUE do not match the regular results for k=1000!!\",\n          baseResultString.equals(resultString));\n      \n      closeAll();\n    }\n  }\n\n","sourceOld":"  /**\n   * Creating an index, matching the results of an top K = Integer.MAX_VALUE and top-1000 requests\n   */\n  @Test\n  public void testGetMaxIntFacets() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      // do different facet counts and compare to control\n      CategoryPath path = new CategoryPath(\"a\", \"b\");\n      FacetSearchParams sParams = getFacetedSearchParams(partitionSize);\n      sParams.addFacetRequest(new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      long start = System.currentTimeMillis();\n      List<FacetResult> results = fc.getFacetResults();\n      long end = System.currentTimeMillis();\n\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n\n      assertEquals(\"Should only be one result as there's only one request\", 1, results.size());\n      FacetResult res = results.get(0);\n      assertEquals(path + \" should only have 4 desendants\", 4, res.getNumValidDescendants());\n\n      // As a control base results, ask for top-1000 results\n      FacetSearchParams sParams2 = getFacetedSearchParams(partitionSize);\n      sParams2.addFacetRequest(new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc2 = new FacetsCollector(sParams2, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc2);\n      List<FacetResult> baseResults = fc2.getFacetResults();\n      FacetResult baseRes = baseResults.get(0);\n\n      // Removing the first line which holds the REQUEST and this is surly different between the two\n      String baseResultString = baseRes.toString();\n      baseResultString = baseResultString.substring(baseResultString.indexOf('\\n'));\n      \n      // Removing the first line\n      String resultString = res.toString();\n      resultString = resultString.substring(resultString.indexOf('\\n'));\n      \n      assertTrue(\"Results for k=MAX_VALUE do not match the regular results for k=1000!!\",\n          baseResultString.equals(resultString));\n      \n      closeAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testGetMaxIntFacets().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testGetMaxIntFacets().mjava","sourceNew":"  /**\n   * Creating an index, matching the results of an top K = Integer.MAX_VALUE and top-1000 requests\n   */\n  @Test\n  public void testGetMaxIntFacets() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      // do different facet counts and compare to control\n      CategoryPath path = new CategoryPath(\"a\", \"b\");\n      FacetSearchParams sParams = getFacetSearchParams(\n          getFacetIndexingParams(partitionSize), new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      long start = System.currentTimeMillis();\n      List<FacetResult> results = fc.getFacetResults();\n      long end = System.currentTimeMillis();\n\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n\n      assertEquals(\"Should only be one result as there's only one request\", 1, results.size());\n      FacetResult res = results.get(0);\n      assertEquals(path + \" should only have 4 desendants\", 4, res.getNumValidDescendants());\n\n      // As a control base results, ask for top-1000 results\n      FacetSearchParams sParams2 = getFacetSearchParams(\n          getFacetIndexingParams(partitionSize), new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc2 = new FacetsCollector(sParams2, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc2);\n      List<FacetResult> baseResults = fc2.getFacetResults();\n      FacetResult baseRes = baseResults.get(0);\n\n      // Removing the first line which holds the REQUEST and this is surly different between the two\n      String baseResultString = baseRes.toString();\n      baseResultString = baseResultString.substring(baseResultString.indexOf('\\n'));\n      \n      // Removing the first line\n      String resultString = res.toString();\n      resultString = resultString.substring(resultString.indexOf('\\n'));\n      \n      assertTrue(\"Results for k=MAX_VALUE do not match the regular results for k=1000!!\",\n          baseResultString.equals(resultString));\n      \n      closeAll();\n    }\n  }\n\n","sourceOld":"  /**\n   * Creating an index, matching the results of an top K = Integer.MAX_VALUE and top-1000 requests\n   */\n  @Test\n  public void testGetMaxIntFacets() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      // do different facet counts and compare to control\n      CategoryPath path = new CategoryPath(\"a\", \"b\");\n      FacetSearchParams sParams = getFacetedSearchParams(partitionSize);\n      sParams.addFacetRequest(new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      long start = System.currentTimeMillis();\n      List<FacetResult> results = fc.getFacetResults();\n      long end = System.currentTimeMillis();\n\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n\n      assertEquals(\"Should only be one result as there's only one request\", 1, results.size());\n      FacetResult res = results.get(0);\n      assertEquals(path + \" should only have 4 desendants\", 4, res.getNumValidDescendants());\n\n      // As a control base results, ask for top-1000 results\n      FacetSearchParams sParams2 = getFacetedSearchParams(partitionSize);\n      sParams2.addFacetRequest(new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc2 = new FacetsCollector(sParams2, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc2);\n      List<FacetResult> baseResults = fc2.getFacetResults();\n      FacetResult baseRes = baseResults.get(0);\n\n      // Removing the first line which holds the REQUEST and this is surly different between the two\n      String baseResultString = baseRes.toString();\n      baseResultString = baseResultString.substring(baseResultString.indexOf('\\n'));\n      \n      // Removing the first line\n      String resultString = res.toString();\n      resultString = resultString.substring(resultString.indexOf('\\n'));\n      \n      assertTrue(\"Results for k=MAX_VALUE do not match the regular results for k=1000!!\",\n          baseResultString.equals(resultString));\n      \n      closeAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"811cdb4a80352766eb0c762e48972707a924e5cd","date":1358767313,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testGetMaxIntFacets().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testGetMaxIntFacets().mjava","sourceNew":"  /**\n   * Creating an index, matching the results of an top K = Integer.MAX_VALUE and top-1000 requests\n   */\n  @Test\n  public void testGetMaxIntFacets() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      // do different facet counts and compare to control\n      CategoryPath path = new CategoryPath(\"a\", \"b\");\n      FacetSearchParams sParams = getFacetSearchParams(\n          getFacetIndexingParams(partitionSize), new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      List<FacetResult> results = fc.getFacetResults();\n\n      assertEquals(\"Should only be one result as there's only one request\", 1, results.size());\n      FacetResult res = results.get(0);\n      assertEquals(path + \" should only have 4 desendants\", 4, res.getNumValidDescendants());\n\n      // As a control base results, ask for top-1000 results\n      FacetSearchParams sParams2 = getFacetSearchParams(\n          getFacetIndexingParams(partitionSize), new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc2 = new FacetsCollector(sParams2, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc2);\n      List<FacetResult> baseResults = fc2.getFacetResults();\n      FacetResult baseRes = baseResults.get(0);\n\n      // Removing the first line which holds the REQUEST and this is surly different between the two\n      String baseResultString = baseRes.toString();\n      baseResultString = baseResultString.substring(baseResultString.indexOf('\\n'));\n      \n      // Removing the first line\n      String resultString = res.toString();\n      resultString = resultString.substring(resultString.indexOf('\\n'));\n      \n      assertTrue(\"Results for k=MAX_VALUE do not match the regular results for k=1000!!\",\n          baseResultString.equals(resultString));\n      \n      closeAll();\n    }\n  }\n\n","sourceOld":"  /**\n   * Creating an index, matching the results of an top K = Integer.MAX_VALUE and top-1000 requests\n   */\n  @Test\n  public void testGetMaxIntFacets() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      // do different facet counts and compare to control\n      CategoryPath path = new CategoryPath(\"a\", \"b\");\n      FacetSearchParams sParams = getFacetSearchParams(\n          getFacetIndexingParams(partitionSize), new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      long start = System.currentTimeMillis();\n      List<FacetResult> results = fc.getFacetResults();\n      long end = System.currentTimeMillis();\n\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n\n      assertEquals(\"Should only be one result as there's only one request\", 1, results.size());\n      FacetResult res = results.get(0);\n      assertEquals(path + \" should only have 4 desendants\", 4, res.getNumValidDescendants());\n\n      // As a control base results, ask for top-1000 results\n      FacetSearchParams sParams2 = getFacetSearchParams(\n          getFacetIndexingParams(partitionSize), new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc2 = new FacetsCollector(sParams2, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc2);\n      List<FacetResult> baseResults = fc2.getFacetResults();\n      FacetResult baseRes = baseResults.get(0);\n\n      // Removing the first line which holds the REQUEST and this is surly different between the two\n      String baseResultString = baseRes.toString();\n      baseResultString = baseResultString.substring(baseResultString.indexOf('\\n'));\n      \n      // Removing the first line\n      String resultString = res.toString();\n      resultString = resultString.substring(resultString.indexOf('\\n'));\n      \n      assertTrue(\"Results for k=MAX_VALUE do not match the regular results for k=1000!!\",\n          baseResultString.equals(resultString));\n      \n      closeAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","date":1358784296,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testGetMaxIntFacets().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testGetMaxIntFacets().mjava","sourceNew":"  /**\n   * Creating an index, matching the results of an top K = Integer.MAX_VALUE and top-1000 requests\n   */\n  @Test\n  public void testGetMaxIntFacets() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      // do different facet counts and compare to control\n      CategoryPath path = new CategoryPath(\"a\", \"b\");\n      FacetSearchParams sParams = getFacetSearchParams(getFacetIndexingParams(partitionSize), \n          new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc = new StandardFacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      List<FacetResult> results = fc.getFacetResults();\n\n      assertEquals(\"Should only be one result as there's only one request\", 1, results.size());\n      FacetResult res = results.get(0);\n      assertEquals(path + \" should only have 4 desendants\", 4, res.getNumValidDescendants());\n\n      // As a control base results, ask for top-1000 results\n      FacetSearchParams sParams2 = getFacetSearchParams(\n          getFacetIndexingParams(partitionSize), new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc2 = new StandardFacetsCollector(sParams2, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc2);\n      List<FacetResult> baseResults = fc2.getFacetResults();\n      FacetResult baseRes = baseResults.get(0);\n\n      // Removing the first line which holds the REQUEST and this is surly different between the two\n      String baseResultString = baseRes.toString();\n      baseResultString = baseResultString.substring(baseResultString.indexOf('\\n'));\n      \n      // Removing the first line\n      String resultString = res.toString();\n      resultString = resultString.substring(resultString.indexOf('\\n'));\n      \n      assertTrue(\"Results for k=MAX_VALUE do not match the regular results for k=1000!!\",\n          baseResultString.equals(resultString));\n      \n      closeAll();\n    }\n  }\n\n","sourceOld":"  /**\n   * Creating an index, matching the results of an top K = Integer.MAX_VALUE and top-1000 requests\n   */\n  @Test\n  public void testGetMaxIntFacets() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      // do different facet counts and compare to control\n      CategoryPath path = new CategoryPath(\"a\", \"b\");\n      FacetSearchParams sParams = getFacetSearchParams(\n          getFacetIndexingParams(partitionSize), new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      List<FacetResult> results = fc.getFacetResults();\n\n      assertEquals(\"Should only be one result as there's only one request\", 1, results.size());\n      FacetResult res = results.get(0);\n      assertEquals(path + \" should only have 4 desendants\", 4, res.getNumValidDescendants());\n\n      // As a control base results, ask for top-1000 results\n      FacetSearchParams sParams2 = getFacetSearchParams(\n          getFacetIndexingParams(partitionSize), new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc2 = new FacetsCollector(sParams2, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc2);\n      List<FacetResult> baseResults = fc2.getFacetResults();\n      FacetResult baseRes = baseResults.get(0);\n\n      // Removing the first line which holds the REQUEST and this is surly different between the two\n      String baseResultString = baseRes.toString();\n      baseResultString = baseResultString.substring(baseResultString.indexOf('\\n'));\n      \n      // Removing the first line\n      String resultString = res.toString();\n      resultString = resultString.substring(resultString.indexOf('\\n'));\n      \n      assertTrue(\"Results for k=MAX_VALUE do not match the regular results for k=1000!!\",\n          baseResultString.equals(resultString));\n      \n      closeAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testGetMaxIntFacets().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testGetMaxIntFacets().mjava","sourceNew":"  /**\n   * Creating an index, matching the results of an top K = Integer.MAX_VALUE and top-1000 requests\n   */\n  @Test\n  public void testGetMaxIntFacets() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      // do different facet counts and compare to control\n      CategoryPath path = new CategoryPath(\"a\", \"b\");\n      FacetSearchParams sParams = getFacetSearchParams(getFacetIndexingParams(partitionSize), \n          new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc = new StandardFacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      List<FacetResult> results = fc.getFacetResults();\n\n      assertEquals(\"Should only be one result as there's only one request\", 1, results.size());\n      FacetResult res = results.get(0);\n      assertEquals(path + \" should only have 4 desendants\", 4, res.getNumValidDescendants());\n\n      // As a control base results, ask for top-1000 results\n      FacetSearchParams sParams2 = getFacetSearchParams(\n          getFacetIndexingParams(partitionSize), new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc2 = new StandardFacetsCollector(sParams2, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc2);\n      List<FacetResult> baseResults = fc2.getFacetResults();\n      FacetResult baseRes = baseResults.get(0);\n\n      // Removing the first line which holds the REQUEST and this is surly different between the two\n      String baseResultString = baseRes.toString();\n      baseResultString = baseResultString.substring(baseResultString.indexOf('\\n'));\n      \n      // Removing the first line\n      String resultString = res.toString();\n      resultString = resultString.substring(resultString.indexOf('\\n'));\n      \n      assertTrue(\"Results for k=MAX_VALUE do not match the regular results for k=1000!!\",\n          baseResultString.equals(resultString));\n      \n      closeAll();\n    }\n  }\n\n","sourceOld":"  /**\n   * Creating an index, matching the results of an top K = Integer.MAX_VALUE and top-1000 requests\n   */\n  @Test\n  public void testGetMaxIntFacets() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      // do different facet counts and compare to control\n      CategoryPath path = new CategoryPath(\"a\", \"b\");\n      FacetSearchParams sParams = getFacetSearchParams(\n          getFacetIndexingParams(partitionSize), new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      long start = System.currentTimeMillis();\n      List<FacetResult> results = fc.getFacetResults();\n      long end = System.currentTimeMillis();\n\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n\n      assertEquals(\"Should only be one result as there's only one request\", 1, results.size());\n      FacetResult res = results.get(0);\n      assertEquals(path + \" should only have 4 desendants\", 4, res.getNumValidDescendants());\n\n      // As a control base results, ask for top-1000 results\n      FacetSearchParams sParams2 = getFacetSearchParams(\n          getFacetIndexingParams(partitionSize), new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc2 = new FacetsCollector(sParams2, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc2);\n      List<FacetResult> baseResults = fc2.getFacetResults();\n      FacetResult baseRes = baseResults.get(0);\n\n      // Removing the first line which holds the REQUEST and this is surly different between the two\n      String baseResultString = baseRes.toString();\n      baseResultString = baseResultString.substring(baseResultString.indexOf('\\n'));\n      \n      // Removing the first line\n      String resultString = res.toString();\n      resultString = resultString.substring(resultString.indexOf('\\n'));\n      \n      assertTrue(\"Results for k=MAX_VALUE do not match the regular results for k=1000!!\",\n          baseResultString.equals(resultString));\n      \n      closeAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"239f79ed06f0979cfe1911ec5fba32b94fda43c1","date":1359553898,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testGetMaxIntFacets().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testGetMaxIntFacets().mjava","sourceNew":"  /**\n   * Creating an index, matching the results of an top K = Integer.MAX_VALUE and top-1000 requests\n   */\n  @Test\n  public void testGetMaxIntFacets() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      FacetIndexingParams fip = getFacetIndexingParams(partitionSize);\n      initIndex(fip);\n\n      // do different facet counts and compare to control\n      CategoryPath path = new CategoryPath(\"a\", \"b\");\n      FacetSearchParams sParams = getFacetSearchParams(fip, new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc = new StandardFacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      List<FacetResult> results = fc.getFacetResults();\n\n      assertEquals(\"Should only be one result as there's only one request\", 1, results.size());\n      FacetResult res = results.get(0);\n      assertEquals(path + \" should only have 4 desendants\", 4, res.getNumValidDescendants());\n\n      // As a control base results, ask for top-1000 results\n      FacetSearchParams sParams2 = getFacetSearchParams(\n          fip, new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc2 = new StandardFacetsCollector(sParams2, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc2);\n      List<FacetResult> baseResults = fc2.getFacetResults();\n      FacetResult baseRes = baseResults.get(0);\n\n      // Removing the first line which holds the REQUEST and this is surly different between the two\n      String baseResultString = baseRes.toString();\n      baseResultString = baseResultString.substring(baseResultString.indexOf('\\n'));\n      \n      // Removing the first line\n      String resultString = res.toString();\n      resultString = resultString.substring(resultString.indexOf('\\n'));\n      \n      assertTrue(\"Results for k=MAX_VALUE do not match the regular results for k=1000!!\",\n          baseResultString.equals(resultString));\n      \n      closeAll();\n    }\n  }\n\n","sourceOld":"  /**\n   * Creating an index, matching the results of an top K = Integer.MAX_VALUE and top-1000 requests\n   */\n  @Test\n  public void testGetMaxIntFacets() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      // do different facet counts and compare to control\n      CategoryPath path = new CategoryPath(\"a\", \"b\");\n      FacetSearchParams sParams = getFacetSearchParams(getFacetIndexingParams(partitionSize), \n          new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc = new StandardFacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      List<FacetResult> results = fc.getFacetResults();\n\n      assertEquals(\"Should only be one result as there's only one request\", 1, results.size());\n      FacetResult res = results.get(0);\n      assertEquals(path + \" should only have 4 desendants\", 4, res.getNumValidDescendants());\n\n      // As a control base results, ask for top-1000 results\n      FacetSearchParams sParams2 = getFacetSearchParams(\n          getFacetIndexingParams(partitionSize), new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc2 = new StandardFacetsCollector(sParams2, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc2);\n      List<FacetResult> baseResults = fc2.getFacetResults();\n      FacetResult baseRes = baseResults.get(0);\n\n      // Removing the first line which holds the REQUEST and this is surly different between the two\n      String baseResultString = baseRes.toString();\n      baseResultString = baseResultString.substring(baseResultString.indexOf('\\n'));\n      \n      // Removing the first line\n      String resultString = res.toString();\n      resultString = resultString.substring(resultString.indexOf('\\n'));\n      \n      assertTrue(\"Results for k=MAX_VALUE do not match the regular results for k=1000!!\",\n          baseResultString.equals(resultString));\n      \n      closeAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d5f95d14e5b9b046998c51e16709a398c15226","date":1359603451,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testGetMaxIntFacets().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testGetMaxIntFacets().mjava","sourceNew":"  /**\n   * Creating an index, matching the results of an top K = Integer.MAX_VALUE and top-1000 requests\n   */\n  @Test\n  public void testGetMaxIntFacets() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      FacetIndexingParams fip = getFacetIndexingParams(partitionSize);\n      initIndex(fip);\n\n      // do different facet counts and compare to control\n      CategoryPath path = new CategoryPath(\"a\", \"b\");\n      FacetSearchParams sParams = getFacetSearchParams(fip, new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc = new StandardFacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      List<FacetResult> results = fc.getFacetResults();\n\n      assertEquals(\"Should only be one result as there's only one request\", 1, results.size());\n      FacetResult res = results.get(0);\n      assertEquals(path + \" should only have 4 desendants\", 4, res.getNumValidDescendants());\n\n      // As a control base results, ask for top-1000 results\n      FacetSearchParams sParams2 = getFacetSearchParams(\n          fip, new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc2 = new StandardFacetsCollector(sParams2, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc2);\n      List<FacetResult> baseResults = fc2.getFacetResults();\n      FacetResult baseRes = baseResults.get(0);\n\n      // Removing the first line which holds the REQUEST and this is surly different between the two\n      String baseResultString = baseRes.toString();\n      baseResultString = baseResultString.substring(baseResultString.indexOf('\\n'));\n      \n      // Removing the first line\n      String resultString = res.toString();\n      resultString = resultString.substring(resultString.indexOf('\\n'));\n      \n      assertTrue(\"Results for k=MAX_VALUE do not match the regular results for k=1000!!\",\n          baseResultString.equals(resultString));\n      \n      closeAll();\n    }\n  }\n\n","sourceOld":"  /**\n   * Creating an index, matching the results of an top K = Integer.MAX_VALUE and top-1000 requests\n   */\n  @Test\n  public void testGetMaxIntFacets() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      // do different facet counts and compare to control\n      CategoryPath path = new CategoryPath(\"a\", \"b\");\n      FacetSearchParams sParams = getFacetSearchParams(getFacetIndexingParams(partitionSize), \n          new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc = new StandardFacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      List<FacetResult> results = fc.getFacetResults();\n\n      assertEquals(\"Should only be one result as there's only one request\", 1, results.size());\n      FacetResult res = results.get(0);\n      assertEquals(path + \" should only have 4 desendants\", 4, res.getNumValidDescendants());\n\n      // As a control base results, ask for top-1000 results\n      FacetSearchParams sParams2 = getFacetSearchParams(\n          getFacetIndexingParams(partitionSize), new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc2 = new StandardFacetsCollector(sParams2, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc2);\n      List<FacetResult> baseResults = fc2.getFacetResults();\n      FacetResult baseRes = baseResults.get(0);\n\n      // Removing the first line which holds the REQUEST and this is surly different between the two\n      String baseResultString = baseRes.toString();\n      baseResultString = baseResultString.substring(baseResultString.indexOf('\\n'));\n      \n      // Removing the first line\n      String resultString = res.toString();\n      resultString = resultString.substring(resultString.indexOf('\\n'));\n      \n      assertTrue(\"Results for k=MAX_VALUE do not match the regular results for k=1000!!\",\n          baseResultString.equals(resultString));\n      \n      closeAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testGetMaxIntFacets().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testGetMaxIntFacets().mjava","sourceNew":"  /**\n   * Creating an index, matching the results of an top K = Integer.MAX_VALUE and top-1000 requests\n   */\n  @Test\n  public void testGetMaxIntFacets() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      FacetIndexingParams fip = getFacetIndexingParams(partitionSize);\n      initIndex(fip);\n\n      // do different facet counts and compare to control\n      CategoryPath path = new CategoryPath(\"a\", \"b\");\n      FacetSearchParams sParams = getFacetSearchParams(fip, new CountFacetRequest(path, Integer.MAX_VALUE));\n      FacetsCollector fc = FacetsCollector.create(sParams, indexReader, taxoReader);\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      List<FacetResult> results = fc.getFacetResults();\n\n      assertEquals(\"Should only be one result as there's only one request\", 1, results.size());\n      FacetResult res = results.get(0);\n      assertEquals(path + \" should only have 4 desendants\", 4, res.getNumValidDescendants());\n\n      // As a control base results, ask for top-1000 results\n      FacetSearchParams sParams2 = getFacetSearchParams(fip, new CountFacetRequest(path, Integer.MAX_VALUE));\n      FacetsCollector fc2 = FacetsCollector.create(sParams2, indexReader, taxoReader);\n      \n      searcher.search(new MatchAllDocsQuery(), fc2);\n      List<FacetResult> baseResults = fc2.getFacetResults();\n      FacetResult baseRes = baseResults.get(0);\n\n      // Removing the first line which holds the REQUEST and this is surly different between the two\n      String baseResultString = baseRes.toString();\n      baseResultString = baseResultString.substring(baseResultString.indexOf('\\n'));\n      \n      // Removing the first line\n      String resultString = res.toString();\n      resultString = resultString.substring(resultString.indexOf('\\n'));\n      \n      assertTrue(\"Results for k=MAX_VALUE do not match the regular results for k=1000!!\",\n          baseResultString.equals(resultString));\n      \n      closeAll();\n    }\n  }\n\n","sourceOld":"  /**\n   * Creating an index, matching the results of an top K = Integer.MAX_VALUE and top-1000 requests\n   */\n  @Test\n  public void testGetMaxIntFacets() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      FacetIndexingParams fip = getFacetIndexingParams(partitionSize);\n      initIndex(fip);\n\n      // do different facet counts and compare to control\n      CategoryPath path = new CategoryPath(\"a\", \"b\");\n      FacetSearchParams sParams = getFacetSearchParams(fip, new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc = new StandardFacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      List<FacetResult> results = fc.getFacetResults();\n\n      assertEquals(\"Should only be one result as there's only one request\", 1, results.size());\n      FacetResult res = results.get(0);\n      assertEquals(path + \" should only have 4 desendants\", 4, res.getNumValidDescendants());\n\n      // As a control base results, ask for top-1000 results\n      FacetSearchParams sParams2 = getFacetSearchParams(\n          fip, new CountFacetRequest(path, Integer.MAX_VALUE));\n\n      FacetsCollector fc2 = new StandardFacetsCollector(sParams2, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc2);\n      List<FacetResult> baseResults = fc2.getFacetResults();\n      FacetResult baseRes = baseResults.get(0);\n\n      // Removing the first line which holds the REQUEST and this is surly different between the two\n      String baseResultString = baseRes.toString();\n      baseResultString = baseResultString.substring(baseResultString.indexOf('\\n'));\n      \n      // Removing the first line\n      String resultString = res.toString();\n      resultString = resultString.substring(resultString.indexOf('\\n'));\n      \n      assertTrue(\"Results for k=MAX_VALUE do not match the regular results for k=1000!!\",\n          baseResultString.equals(resultString));\n      \n      closeAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testGetMaxIntFacets().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testGetMaxIntFacets().mjava","sourceNew":"  /**\n   * Creating an index, matching the results of an top K = Integer.MAX_VALUE and top-1000 requests\n   */\n  @Test\n  public void testGetMaxIntFacets() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      FacetIndexingParams fip = getFacetIndexingParams(partitionSize);\n      initIndex(fip);\n\n      // do different facet counts and compare to control\n      FacetLabel path = new FacetLabel(\"a\", \"b\");\n      FacetSearchParams sParams = getFacetSearchParams(fip, new CountFacetRequest(path, Integer.MAX_VALUE));\n      FacetsCollector fc = FacetsCollector.create(sParams, indexReader, taxoReader);\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      List<FacetResult> results = fc.getFacetResults();\n\n      assertEquals(\"Should only be one result as there's only one request\", 1, results.size());\n      FacetResult res = results.get(0);\n      assertEquals(path + \" should only have 4 desendants\", 4, res.getNumValidDescendants());\n\n      // As a control base results, ask for top-1000 results\n      FacetSearchParams sParams2 = getFacetSearchParams(fip, new CountFacetRequest(path, Integer.MAX_VALUE));\n      FacetsCollector fc2 = FacetsCollector.create(sParams2, indexReader, taxoReader);\n      \n      searcher.search(new MatchAllDocsQuery(), fc2);\n      List<FacetResult> baseResults = fc2.getFacetResults();\n      FacetResult baseRes = baseResults.get(0);\n\n      // Removing the first line which holds the REQUEST and this is surly different between the two\n      String baseResultString = baseRes.toString();\n      baseResultString = baseResultString.substring(baseResultString.indexOf('\\n'));\n      \n      // Removing the first line\n      String resultString = res.toString();\n      resultString = resultString.substring(resultString.indexOf('\\n'));\n      \n      assertTrue(\"Results for k=MAX_VALUE do not match the regular results for k=1000!!\",\n          baseResultString.equals(resultString));\n      \n      closeAll();\n    }\n  }\n\n","sourceOld":"  /**\n   * Creating an index, matching the results of an top K = Integer.MAX_VALUE and top-1000 requests\n   */\n  @Test\n  public void testGetMaxIntFacets() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      FacetIndexingParams fip = getFacetIndexingParams(partitionSize);\n      initIndex(fip);\n\n      // do different facet counts and compare to control\n      CategoryPath path = new CategoryPath(\"a\", \"b\");\n      FacetSearchParams sParams = getFacetSearchParams(fip, new CountFacetRequest(path, Integer.MAX_VALUE));\n      FacetsCollector fc = FacetsCollector.create(sParams, indexReader, taxoReader);\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      List<FacetResult> results = fc.getFacetResults();\n\n      assertEquals(\"Should only be one result as there's only one request\", 1, results.size());\n      FacetResult res = results.get(0);\n      assertEquals(path + \" should only have 4 desendants\", 4, res.getNumValidDescendants());\n\n      // As a control base results, ask for top-1000 results\n      FacetSearchParams sParams2 = getFacetSearchParams(fip, new CountFacetRequest(path, Integer.MAX_VALUE));\n      FacetsCollector fc2 = FacetsCollector.create(sParams2, indexReader, taxoReader);\n      \n      searcher.search(new MatchAllDocsQuery(), fc2);\n      List<FacetResult> baseResults = fc2.getFacetResults();\n      FacetResult baseRes = baseResults.get(0);\n\n      // Removing the first line which holds the REQUEST and this is surly different between the two\n      String baseResultString = baseRes.toString();\n      baseResultString = baseResultString.substring(baseResultString.indexOf('\\n'));\n      \n      // Removing the first line\n      String resultString = res.toString();\n      resultString = resultString.substring(resultString.indexOf('\\n'));\n      \n      assertTrue(\"Results for k=MAX_VALUE do not match the regular results for k=1000!!\",\n          baseResultString.equals(resultString));\n      \n      closeAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testGetMaxIntFacets().mjava","sourceNew":null,"sourceOld":"  /**\n   * Creating an index, matching the results of an top K = Integer.MAX_VALUE and top-1000 requests\n   */\n  @Test\n  public void testGetMaxIntFacets() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      FacetIndexingParams fip = getFacetIndexingParams(partitionSize);\n      initIndex(fip);\n\n      // do different facet counts and compare to control\n      FacetLabel path = new FacetLabel(\"a\", \"b\");\n      FacetSearchParams sParams = getFacetSearchParams(fip, new CountFacetRequest(path, Integer.MAX_VALUE));\n      FacetsCollector fc = FacetsCollector.create(sParams, indexReader, taxoReader);\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      List<FacetResult> results = fc.getFacetResults();\n\n      assertEquals(\"Should only be one result as there's only one request\", 1, results.size());\n      FacetResult res = results.get(0);\n      assertEquals(path + \" should only have 4 desendants\", 4, res.getNumValidDescendants());\n\n      // As a control base results, ask for top-1000 results\n      FacetSearchParams sParams2 = getFacetSearchParams(fip, new CountFacetRequest(path, Integer.MAX_VALUE));\n      FacetsCollector fc2 = FacetsCollector.create(sParams2, indexReader, taxoReader);\n      \n      searcher.search(new MatchAllDocsQuery(), fc2);\n      List<FacetResult> baseResults = fc2.getFacetResults();\n      FacetResult baseRes = baseResults.get(0);\n\n      // Removing the first line which holds the REQUEST and this is surly different between the two\n      String baseResultString = baseRes.toString();\n      baseResultString = baseResultString.substring(baseResultString.indexOf('\\n'));\n      \n      // Removing the first line\n      String resultString = res.toString();\n      resultString = resultString.substring(resultString.indexOf('\\n'));\n      \n      assertTrue(\"Results for k=MAX_VALUE do not match the regular results for k=1000!!\",\n          baseResultString.equals(resultString));\n      \n      closeAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testGetMaxIntFacets().mjava","sourceNew":null,"sourceOld":"  /**\n   * Creating an index, matching the results of an top K = Integer.MAX_VALUE and top-1000 requests\n   */\n  @Test\n  public void testGetMaxIntFacets() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      FacetIndexingParams fip = getFacetIndexingParams(partitionSize);\n      initIndex(fip);\n\n      // do different facet counts and compare to control\n      CategoryPath path = new CategoryPath(\"a\", \"b\");\n      FacetSearchParams sParams = getFacetSearchParams(fip, new CountFacetRequest(path, Integer.MAX_VALUE));\n      FacetsCollector fc = FacetsCollector.create(sParams, indexReader, taxoReader);\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      List<FacetResult> results = fc.getFacetResults();\n\n      assertEquals(\"Should only be one result as there's only one request\", 1, results.size());\n      FacetResult res = results.get(0);\n      assertEquals(path + \" should only have 4 desendants\", 4, res.getNumValidDescendants());\n\n      // As a control base results, ask for top-1000 results\n      FacetSearchParams sParams2 = getFacetSearchParams(fip, new CountFacetRequest(path, Integer.MAX_VALUE));\n      FacetsCollector fc2 = FacetsCollector.create(sParams2, indexReader, taxoReader);\n      \n      searcher.search(new MatchAllDocsQuery(), fc2);\n      List<FacetResult> baseResults = fc2.getFacetResults();\n      FacetResult baseRes = baseResults.get(0);\n\n      // Removing the first line which holds the REQUEST and this is surly different between the two\n      String baseResultString = baseRes.toString();\n      baseResultString = baseResultString.substring(baseResultString.indexOf('\\n'));\n      \n      // Removing the first line\n      String resultString = res.toString();\n      resultString = resultString.substring(resultString.indexOf('\\n'));\n      \n      assertTrue(\"Results for k=MAX_VALUE do not match the regular results for k=1000!!\",\n          baseResultString.equals(resultString));\n      \n      closeAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["811cdb4a80352766eb0c762e48972707a924e5cd"],"d33e19a97046248623a7591aeaa6547233fd15e2":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"07155cdd910937cdf6877e48884d5782845c8b8b":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"61d5f95d14e5b9b046998c51e16709a398c15226":["07155cdd910937cdf6877e48884d5782845c8b8b","239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"239f79ed06f0979cfe1911ec5fba32b94fda43c1":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["571abba77e55fea386a38c0024f72ffa5b37a9ad","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"811cdb4a80352766eb0c762e48972707a924e5cd":["d4c6c7f3cda7a0595cabd16e5e9107ca29852708"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["07155cdd910937cdf6877e48884d5782845c8b8b"],"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["07155cdd910937cdf6877e48884d5782845c8b8b","239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"07155cdd910937cdf6877e48884d5782845c8b8b":["61d5f95d14e5b9b046998c51e16709a398c15226"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["c190847801a50f4dd20fd639bdc29b54ea3b288b","3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d33e19a97046248623a7591aeaa6547233fd15e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"61d5f95d14e5b9b046998c51e16709a398c15226":[],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","811cdb4a80352766eb0c762e48972707a924e5cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"239f79ed06f0979cfe1911ec5fba32b94fda43c1":["571abba77e55fea386a38c0024f72ffa5b37a9ad","61d5f95d14e5b9b046998c51e16709a398c15226"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"811cdb4a80352766eb0c762e48972707a924e5cd":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["61d5f95d14e5b9b046998c51e16709a398c15226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}