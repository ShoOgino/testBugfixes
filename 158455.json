{"path":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/server/GDataSearchService#getFeed(GDataRequest,GDataResponse).mjava","commits":[{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/server/GDataSearchService#getFeed(GDataRequest,GDataResponse).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/server/GDataSearchService#getFeed(GDataRequest,GDataResponse).mjava","sourceNew":"    /**\n     * @see org.apache.lucene.gdata.server.GDataService#getFeed(org.apache.lucene.gdata.server.GDataRequest, org.apache.lucene.gdata.server.GDataResponse)\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public BaseFeed getFeed(GDataRequest request, GDataResponse response) throws ServiceException {\n        String translatedQuery = request.getTranslatedQuery();\n        ProvidedService service = request.getConfigurator();\n        \n        QueryParser parser = new GDataQueryParser(service.getIndexSchema());\n        Query query;\n        try {\n            query = parser.parse(translatedQuery);\n           \n        } catch (ParseException e1) {\n            throw new ServiceException(\"Search Failed -- Can not parse query\",e1,GDataResponse.BAD_REQUEST);\n        }\n        if(LOG.isInfoEnabled())\n            LOG.info(\"Fire search for user query  query: \"+query.toString());\n        this.searcher = SEARCHCOMPONENT.getServiceSearcher(service);\n        List<String> result;\n        try {\n            result = this.searcher.search(query,request.getItemsPerPage(),request.getStartIndex(),request.getFeedId());\n        } catch (IOException e) {\n           throw new ServiceException(\"Search Failed -- Searcher throws IOException\",e,GDataResponse.SERVER_ERROR); \n           \n        }\n        if(LOG.isInfoEnabled())\n            LOG.info(\"Fetching results for user query result size: \"+result.size());\n        ServerBaseFeed requestFeed = new ServerBaseFeed();\n        requestFeed.setServiceConfig(service);\n        requestFeed.setStartIndex(0);\n        requestFeed.setItemsPerPage(0);\n        requestFeed.setId(request.getFeedId());\n        BaseFeed feed = null;\n        try{\n         feed = this.storage.getFeed(requestFeed);\n        }catch (StorageException e) {\n            throw new ServiceException(\"Search Failed -- can not get feed, feed not stored \",e,GDataResponse.NOT_FOUND);\n        }\n        for (String entryId : result) {\n            ServerBaseEntry requestEntry = new ServerBaseEntry();\n            requestEntry.setId(entryId);\n            requestEntry.setServiceConfig(service);\n            try{\n            BaseEntry entry = this.storage.getEntry(requestEntry);\n            feed.getEntries().add(entry);\n            }catch (StorageException e) {\n                \n                LOG.error(\"StorageException caught while fetching query results -- skip entry -- \"+e.getMessage(),e);\n            }\n        }\n        dynamicElementFeedStragey(feed,request);\n        return feed;\n    }\n\n","sourceOld":"    /**\n     * @see org.apache.lucene.gdata.server.GDataService#getFeed(org.apache.lucene.gdata.server.GDataRequest, org.apache.lucene.gdata.server.GDataResponse)\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public BaseFeed getFeed(GDataRequest request, GDataResponse response) throws ServiceException {\n        String translatedQuery = request.getTranslatedQuery();\n        ProvidedService service = request.getConfigurator();\n        \n        QueryParser parser = new GDataQueryParser(service.getIndexSchema());\n        Query query;\n        try {\n            query = parser.parse(translatedQuery);\n           \n        } catch (ParseException e1) {\n            throw new ServiceException(\"Search Failed -- Can not parse query\",e1,GDataResponse.BAD_REQUEST);\n        }\n        if(LOG.isInfoEnabled())\n            LOG.info(\"Fire search for user query  query: \"+query.toString());\n        this.searcher = SEARCHCOMPONENT.getServiceSearcher(service);\n        List<String> result;\n        try {\n            result = this.searcher.search(query,request.getItemsPerPage(),request.getStartIndex(),request.getFeedId());\n        } catch (IOException e) {\n           throw new ServiceException(\"Search Failed -- Searcher throws IOException\",e,GDataResponse.SERVER_ERROR); \n           \n        }\n        if(LOG.isInfoEnabled())\n            LOG.info(\"Fetching results for user query result size: \"+result.size());\n        ServerBaseFeed requestFeed = new ServerBaseFeed();\n        requestFeed.setServiceConfig(service);\n        requestFeed.setStartIndex(0);\n        requestFeed.setItemsPerPage(0);\n        requestFeed.setId(request.getFeedId());\n        BaseFeed feed = null;\n        try{\n         feed = this.storage.getFeed(requestFeed);\n        }catch (StorageException e) {\n            throw new ServiceException(\"Search Failed -- can not get feed, feed not stored \",e,GDataResponse.NOT_FOUND);\n        }\n        for (String entryId : result) {\n            ServerBaseEntry requestEntry = new ServerBaseEntry();\n            requestEntry.setId(entryId);\n            requestEntry.setServiceConfig(service);\n            try{\n            BaseEntry entry = this.storage.getEntry(requestEntry);\n            feed.getEntries().add(entry);\n            }catch (StorageException e) {\n                \n                LOG.error(\"StorageException caught while fetching query results -- skip entry -- \"+e.getMessage(),e);\n            }\n        }\n        dynamicElementFeedStragey(feed,request);\n        return feed;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/server/GDataSearchService#getFeed(GDataRequest,GDataResponse).mjava","pathOld":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/server/GDataSearchService#getFeed(GDataRequest,GDataResponse).mjava","sourceNew":"    /**\n     * @see org.apache.lucene.gdata.server.GDataService#getFeed(org.apache.lucene.gdata.server.GDataRequest, org.apache.lucene.gdata.server.GDataResponse)\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public BaseFeed getFeed(GDataRequest request, GDataResponse response) throws ServiceException {\n        String translatedQuery = request.getTranslatedQuery();\n        ProvidedService service = request.getConfigurator();\n        \n        QueryParser parser = new GDataQueryParser(service.getIndexSchema());\n        Query query;\n        try {\n            query = parser.parse(translatedQuery);\n           \n        } catch (ParseException e1) {\n            throw new ServiceException(\"Search Failed -- Can not parse query\",e1,GDataResponse.BAD_REQUEST);\n        }\n        if(LOG.isInfoEnabled())\n            LOG.info(\"Fire search for user query  query: \"+query.toString());\n        this.searcher = SEARCHCOMPONENT.getServiceSearcher(service);\n        List<String> result;\n        try {\n            result = this.searcher.search(query,request.getItemsPerPage(),request.getStartIndex(),request.getFeedId());\n        } catch (IOException e) {\n           throw new ServiceException(\"Search Failed -- Searcher throws IOException\",e,GDataResponse.SERVER_ERROR); \n           \n        }\n        if(LOG.isInfoEnabled())\n            LOG.info(\"Fetching results for user query result size: \"+result.size());\n        ServerBaseFeed requestFeed = new ServerBaseFeed();\n        requestFeed.setServiceConfig(service);\n        requestFeed.setStartIndex(0);\n        requestFeed.setItemsPerPage(0);\n        requestFeed.setId(request.getFeedId());\n        BaseFeed feed = null;\n        try{\n         feed = this.storage.getFeed(requestFeed);\n        }catch (StorageException e) {\n            throw new ServiceException(\"Search Failed -- can not get feed, feed not stored \",e,GDataResponse.NOT_FOUND);\n        }\n        for (String entryId : result) {\n            ServerBaseEntry requestEntry = new ServerBaseEntry();\n            requestEntry.setId(entryId);\n            requestEntry.setServiceConfig(service);\n            try{\n            BaseEntry entry = this.storage.getEntry(requestEntry);\n            feed.getEntries().add(entry);\n            }catch (StorageException e) {\n                \n                LOG.error(\"StorageException caught while fetching query results -- skip entry -- \"+e.getMessage(),e);\n            }\n        }\n        dynamicElementFeedStragey(feed,request);\n        return feed;\n    }\n\n","sourceOld":"    /**\n     * @see org.apache.lucene.gdata.server.GDataService#getFeed(org.apache.lucene.gdata.server.GDataRequest, org.apache.lucene.gdata.server.GDataResponse)\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public BaseFeed getFeed(GDataRequest request, GDataResponse response) throws ServiceException {\n        String translatedQuery = request.getTranslatedQuery();\n        ProvidedService service = request.getConfigurator();\n        \n        QueryParser parser = new GDataQueryParser(service.getIndexSchema());\n        Query query;\n        try {\n            query = parser.parse(translatedQuery);\n           \n        } catch (ParseException e1) {\n            throw new ServiceException(\"Search Failed -- Can not parse query\",e1,GDataResponse.BAD_REQUEST);\n        }\n        if(LOG.isInfoEnabled())\n            LOG.info(\"Fire search for user query  query: \"+query.toString());\n        this.searcher = SEARCHCOMPONENT.getServiceSearcher(service);\n        List<String> result;\n        try {\n            result = this.searcher.search(query,request.getItemsPerPage(),request.getStartIndex(),request.getFeedId());\n        } catch (IOException e) {\n           throw new ServiceException(\"Search Failed -- Searcher throws IOException\",e,GDataResponse.SERVER_ERROR); \n           \n        }\n        if(LOG.isInfoEnabled())\n            LOG.info(\"Fetching results for user query result size: \"+result.size());\n        ServerBaseFeed requestFeed = new ServerBaseFeed();\n        requestFeed.setServiceConfig(service);\n        requestFeed.setStartIndex(0);\n        requestFeed.setItemsPerPage(0);\n        requestFeed.setId(request.getFeedId());\n        BaseFeed feed = null;\n        try{\n         feed = this.storage.getFeed(requestFeed);\n        }catch (StorageException e) {\n            throw new ServiceException(\"Search Failed -- can not get feed, feed not stored \",e,GDataResponse.NOT_FOUND);\n        }\n        for (String entryId : result) {\n            ServerBaseEntry requestEntry = new ServerBaseEntry();\n            requestEntry.setId(entryId);\n            requestEntry.setServiceConfig(service);\n            try{\n            BaseEntry entry = this.storage.getEntry(requestEntry);\n            feed.getEntries().add(entry);\n            }catch (StorageException e) {\n                \n                LOG.error(\"StorageException caught while fetching query results -- skip entry -- \"+e.getMessage(),e);\n            }\n        }\n        dynamicElementFeedStragey(feed,request);\n        return feed;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}