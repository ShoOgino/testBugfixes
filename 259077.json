{"path":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#addPosition(int,BytesRef).mjava","commits":[{"id":"99cf56f3a650b908f7017a72f9d23940418f8a52","date":1284891529,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#addPosition(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriterImpl#addPosition(int,BytesRef).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    assert !omitTermFreqAndPositions: \"omitTermFreqAndPositions is true\";\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta > 0 || position == 0 || position == -1: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    assert !omitTermFreqAndPositions: \"omitTermFreqAndPositions is true\";\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta > 0 || position == 0 || position == -1: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#addPosition(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriterImpl#addPosition(int,BytesRef).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    assert !omitTermFreqAndPositions: \"omitTermFreqAndPositions is true\";\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta > 0 || position == 0 || position == -1: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    assert !omitTermFreqAndPositions: \"omitTermFreqAndPositions is true\";\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta > 0 || position == 0 || position == -1: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#addPosition(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#addPosition(int,BytesRef).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    assert !omitTermFreqAndPositions: \"omitTermFreqAndPositions is true\";\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta > 0 || position == 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    assert !omitTermFreqAndPositions: \"omitTermFreqAndPositions is true\";\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta > 0 || position == 0 || position == -1: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#addPosition(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#addPosition(int,BytesRef).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    assert !omitTermFreqAndPositions: \"omitTermFreqAndPositions is true\";\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta > 0 || position == 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    assert !omitTermFreqAndPositions: \"omitTermFreqAndPositions is true\";\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta > 0 || position == 0 || position == -1: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#addPosition(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#addPosition(int,BytesRef).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    assert !omitTermFreqAndPositions: \"omitTermFreqAndPositions is true\";\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta > 0 || position == 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    assert !omitTermFreqAndPositions: \"omitTermFreqAndPositions is true\";\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta > 0 || position == 0 || position == -1: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#addPosition(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#addPosition(int,BytesRef).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    //System.out.println(\"StandardW:     addPos pos=\" + position + \" payload=\" + (payload == null ? \"null\" : (payload.length + \" bytes\")) + \" proxFP=\" + proxOut.getFilePointer());\n    assert !omitTermFreqAndPositions: \"omitTermFreqAndPositions is true\";\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta > 0 || position == 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    assert !omitTermFreqAndPositions: \"omitTermFreqAndPositions is true\";\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta > 0 || position == 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#addPosition(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#addPosition(int,BytesRef).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    //System.out.println(\"StandardW:     addPos pos=\" + position + \" payload=\" + (payload == null ? \"null\" : (payload.length + \" bytes\")) + \" proxFP=\" + proxOut.getFilePointer());\n    assert !omitTermFreqAndPositions: \"omitTermFreqAndPositions is true\";\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta > 0 || position == 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    assert !omitTermFreqAndPositions: \"omitTermFreqAndPositions is true\";\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta > 0 || position == 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#addPosition(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#addPosition(int,BytesRef).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    //System.out.println(\"StandardW:     addPos pos=\" + position + \" payload=\" + (payload == null ? \"null\" : (payload.length + \" bytes\")) + \" proxFP=\" + proxOut.getFilePointer());\n    assert !omitTermFreqAndPositions: \"omitTermFreqAndPositions is true\";\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta > 0 || position == 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    assert !omitTermFreqAndPositions: \"omitTermFreqAndPositions is true\";\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta > 0 || position == 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07972d15a5709171622bbb52bd91e9a35f1e3f26","date":1307194597,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#addPosition(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#addPosition(int,BytesRef).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    //System.out.println(\"StandardW:     addPos pos=\" + position + \" payload=\" + (payload == null ? \"null\" : (payload.length + \" bytes\")) + \" proxFP=\" + proxOut.getFilePointer());\n    assert !omitTermFreqAndPositions: \"omitTermFreqAndPositions is true\";\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n\n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;\n\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    //System.out.println(\"StandardW:     addPos pos=\" + position + \" payload=\" + (payload == null ? \"null\" : (payload.length + \" bytes\")) + \" proxFP=\" + proxOut.getFilePointer());\n    assert !omitTermFreqAndPositions: \"omitTermFreqAndPositions is true\";\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta > 0 || position == 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e7c99bd45fa88a3d93a03fdd773053bef72268e","date":1307218088,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#addPosition(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#addPosition(int,BytesRef).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    //System.out.println(\"StandardW:     addPos pos=\" + position + \" payload=\" + (payload == null ? \"null\" : (payload.length + \" bytes\")) + \" proxFP=\" + proxOut.getFilePointer());\n    assert !omitTermFreqAndPositions: \"omitTermFreqAndPositions is true\";\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n\n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;\n\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    //System.out.println(\"StandardW:     addPos pos=\" + position + \" payload=\" + (payload == null ? \"null\" : (payload.length + \" bytes\")) + \" proxFP=\" + proxOut.getFilePointer());\n    assert !omitTermFreqAndPositions: \"omitTermFreqAndPositions is true\";\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta > 0 || position == 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#addPosition(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#addPosition(int,BytesRef).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    //System.out.println(\"StandardW:     addPos pos=\" + position + \" payload=\" + (payload == null ? \"null\" : (payload.length + \" bytes\")) + \" proxFP=\" + proxOut.getFilePointer());\n    assert !omitTermFreqAndPositions: \"omitTermFreqAndPositions is true\";\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n\n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;\n\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    //System.out.println(\"StandardW:     addPos pos=\" + position + \" payload=\" + (payload == null ? \"null\" : (payload.length + \" bytes\")) + \" proxFP=\" + proxOut.getFilePointer());\n    assert !omitTermFreqAndPositions: \"omitTermFreqAndPositions is true\";\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta > 0 || position == 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#addPosition(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#addPosition(int,BytesRef).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    //System.out.println(\"StandardW:     addPos pos=\" + position + \" payload=\" + (payload == null ? \"null\" : (payload.length + \" bytes\")) + \" proxFP=\" + proxOut.getFilePointer());\n    assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS: \"invalid indexOptions: \" + indexOptions;\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n\n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;\n\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    //System.out.println(\"StandardW:     addPos pos=\" + position + \" payload=\" + (payload == null ? \"null\" : (payload.length + \" bytes\")) + \" proxFP=\" + proxOut.getFilePointer());\n    assert !omitTermFreqAndPositions: \"omitTermFreqAndPositions is true\";\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n\n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;\n\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#addPosition(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#addPosition(int,BytesRef).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    //if (DEBUG) System.out.println(\"SPW:     addPos pos=\" + position + \" payload=\" + (payload == null ? \"null\" : (payload.length + \" bytes\")) + \" proxFP=\" + proxOut.getFilePointer());\n    assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS: \"invalid indexOptions: \" + indexOptions;\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    //System.out.println(\"StandardW:     addPos pos=\" + position + \" payload=\" + (payload == null ? \"null\" : (payload.length + \" bytes\")) + \" proxFP=\" + proxOut.getFilePointer());\n    assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS: \"invalid indexOptions: \" + indexOptions;\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n\n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;\n\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsWriter#addPosition(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#addPosition(int,BytesRef).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    //if (DEBUG) System.out.println(\"SPW:     addPos pos=\" + position + \" payload=\" + (payload == null ? \"null\" : (payload.length + \" bytes\")) + \" proxFP=\" + proxOut.getFilePointer());\n    assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS: \"invalid indexOptions: \" + indexOptions;\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    //if (DEBUG) System.out.println(\"SPW:     addPos pos=\" + position + \" payload=\" + (payload == null ? \"null\" : (payload.length + \" bytes\")) + \" proxFP=\" + proxOut.getFilePointer());\n    assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS: \"invalid indexOptions: \" + indexOptions;\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["07972d15a5709171622bbb52bd91e9a35f1e3f26"],"70ad682703b8585f5d0a637efec044d57ec05efb":["99cf56f3a650b908f7017a72f9d23940418f8a52","56da903869515527852ee21ea7ef7bfe414cd40d"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["56da903869515527852ee21ea7ef7bfe414cd40d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99cf56f3a650b908f7017a72f9d23940418f8a52"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["868da859b43505d9d2a023bfeae6dd0c795f5295","b1add9ddc0005b07550d4350720aac22dc9886b3"],"1e7c99bd45fa88a3d93a03fdd773053bef72268e":["b1add9ddc0005b07550d4350720aac22dc9886b3","07972d15a5709171622bbb52bd91e9a35f1e3f26"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"7b91922b55d15444d554721b352861d028eb8278":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"07972d15a5709171622bbb52bd91e9a35f1e3f26":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"56da903869515527852ee21ea7ef7bfe414cd40d":["99cf56f3a650b908f7017a72f9d23940418f8a52"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","b1add9ddc0005b07550d4350720aac22dc9886b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["29ef99d61cda9641b6250bf9567329a6e65f901d","07972d15a5709171622bbb52bd91e9a35f1e3f26"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["e79a6d080bdd5b2a8f56342cf571b5476de04180","1e7c99bd45fa88a3d93a03fdd773053bef72268e","07972d15a5709171622bbb52bd91e9a35f1e3f26","29ef99d61cda9641b6250bf9567329a6e65f901d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"1e7c99bd45fa88a3d93a03fdd773053bef72268e":[],"60ba444201d2570214b6fcf1d15600dc1a01f548":["7b91922b55d15444d554721b352861d028eb8278"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"07972d15a5709171622bbb52bd91e9a35f1e3f26":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","1e7c99bd45fa88a3d93a03fdd773053bef72268e","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","b1add9ddc0005b07550d4350720aac22dc9886b3","868da859b43505d9d2a023bfeae6dd0c795f5295"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","99cf56f3a650b908f7017a72f9d23940418f8a52"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["70ad682703b8585f5d0a637efec044d57ec05efb","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e79a6d080bdd5b2a8f56342cf571b5476de04180","1e7c99bd45fa88a3d93a03fdd773053bef72268e","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}