{"path":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#add(DocIdSetIterator).mjava","commits":[{"id":"0e91a2d9ed80172872da0f517870da6756289554","date":1436431140,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#add(DocIdSetIterator).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add the content of the provided {@link DocIdSetIterator} to this builder.\n   * NOTE: if you need to build a {@link DocIdSet} out of a single\n   * {@link DocIdSetIterator}, you should rather use {@link RoaringDocIdSet.Builder}.\n   */\n  public void add(DocIdSetIterator iter) throws IOException {\n    grow((int) Math.min(Integer.MAX_VALUE, iter.cost()));\n\n    if (bitSet != null) {\n      bitSet.or(iter);\n    } else {\n      while (true) {  \n        final int end = Math.min(threshold, buffer.length);\n        for (int i = bufferSize; i < end; ++i) {\n          final int doc = iter.nextDoc();\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            bufferSize = i;\n            return;\n          }\n          buffer[bufferSize++] = doc;\n        }\n        bufferSize = end;\n\n        if (bufferSize + 1 >= threshold) {\n          break;\n        }\n\n        buffer = ArrayUtil.grow(buffer, bufferSize + 1);\n      }\n\n      upgradeToBitSet();\n      for (int doc = iter.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = iter.nextDoc()) {\n        bitSet.set(doc);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbb517d79e844487af01a6ca20870b400594321c","date":1436476855,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#add(DocIdSetIterator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#add(DocIdSetIterator).mjava","sourceNew":"  /**\n   * Add the content of the provided {@link DocIdSetIterator} to this builder.\n   * NOTE: if you need to build a {@link DocIdSet} out of a single\n   * {@link DocIdSetIterator}, you should rather use {@link RoaringDocIdSet.Builder}.\n   */\n  public void add(DocIdSetIterator iter) throws IOException {\n    grow((int) Math.min(Integer.MAX_VALUE, iter.cost()));\n\n    if (bitSet != null) {\n      bitSet.or(iter);\n    } else {\n      while (true) {  \n        assert buffer.length <= threshold;\n        final int end = buffer.length;\n        for (int i = bufferSize; i < end; ++i) {\n          final int doc = iter.nextDoc();\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            bufferSize = i;\n            return;\n          }\n          buffer[bufferSize++] = doc;\n        }\n        bufferSize = end;\n\n        if (bufferSize + 1 >= threshold) {\n          break;\n        }\n\n        growBuffer(bufferSize+1);\n      }\n\n      upgradeToBitSet();\n      for (int doc = iter.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = iter.nextDoc()) {\n        bitSet.set(doc);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Add the content of the provided {@link DocIdSetIterator} to this builder.\n   * NOTE: if you need to build a {@link DocIdSet} out of a single\n   * {@link DocIdSetIterator}, you should rather use {@link RoaringDocIdSet.Builder}.\n   */\n  public void add(DocIdSetIterator iter) throws IOException {\n    grow((int) Math.min(Integer.MAX_VALUE, iter.cost()));\n\n    if (bitSet != null) {\n      bitSet.or(iter);\n    } else {\n      while (true) {  \n        final int end = Math.min(threshold, buffer.length);\n        for (int i = bufferSize; i < end; ++i) {\n          final int doc = iter.nextDoc();\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            bufferSize = i;\n            return;\n          }\n          buffer[bufferSize++] = doc;\n        }\n        bufferSize = end;\n\n        if (bufferSize + 1 >= threshold) {\n          break;\n        }\n\n        buffer = ArrayUtil.grow(buffer, bufferSize + 1);\n      }\n\n      upgradeToBitSet();\n      for (int doc = iter.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = iter.nextDoc()) {\n        bitSet.set(doc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d3eccadf4f2a01d2034c96afe1a5c617b2e85af","date":1461918927,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#add(DocIdSetIterator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#add(DocIdSetIterator).mjava","sourceNew":"  /**\n   * Add the content of the provided {@link DocIdSetIterator} to this builder.\n   * NOTE: if you need to build a {@link DocIdSet} out of a single\n   * {@link DocIdSetIterator}, you should rather use {@link RoaringDocIdSet.Builder}.\n   */\n  public void add(DocIdSetIterator iter) throws IOException {\n    grow((int) Math.min(Integer.MAX_VALUE, iter.cost()));\n\n    if (bitSet != null) {\n      bitSet.or(iter);\n    } else {\n      while (true) {\n        assert buffer.length <= threshold;\n        final int end = buffer.length;\n        for (int i = bufferSize; i < end; ++i) {\n          final int doc = iter.nextDoc();\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            bufferSize = i;\n            return;\n          }\n          buffer[bufferSize++] = doc;\n        }\n        bufferSize = end;\n\n        if (bufferSize + 1 >= threshold) {\n          break;\n        }\n\n        growBuffer(bufferSize+1);\n      }\n\n      upgradeToBitSet();\n      for (int doc = iter.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = iter.nextDoc()) {\n        bitSet.set(doc);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Add the content of the provided {@link DocIdSetIterator} to this builder.\n   * NOTE: if you need to build a {@link DocIdSet} out of a single\n   * {@link DocIdSetIterator}, you should rather use {@link RoaringDocIdSet.Builder}.\n   */\n  public void add(DocIdSetIterator iter) throws IOException {\n    grow((int) Math.min(Integer.MAX_VALUE, iter.cost()));\n\n    if (bitSet != null) {\n      bitSet.or(iter);\n    } else {\n      while (true) {  \n        assert buffer.length <= threshold;\n        final int end = buffer.length;\n        for (int i = bufferSize; i < end; ++i) {\n          final int doc = iter.nextDoc();\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            bufferSize = i;\n            return;\n          }\n          buffer[bufferSize++] = doc;\n        }\n        bufferSize = end;\n\n        if (bufferSize + 1 >= threshold) {\n          break;\n        }\n\n        growBuffer(bufferSize+1);\n      }\n\n      upgradeToBitSet();\n      for (int doc = iter.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = iter.nextDoc()) {\n        bitSet.set(doc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8e8d5955830d712186a4beb716e797d505af7981","date":1461951189,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#add(DocIdSetIterator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#add(DocIdSetIterator).mjava","sourceNew":"  /**\n   * Add the content of the provided {@link DocIdSetIterator} to this builder.\n   * NOTE: if you need to build a {@link DocIdSet} out of a single\n   * {@link DocIdSetIterator}, you should rather use {@link RoaringDocIdSet.Builder}.\n   */\n  public void add(DocIdSetIterator iter) throws IOException {\n    grow((int) Math.min(Integer.MAX_VALUE, iter.cost()));\n\n    if (bitSet != null) {\n      bitSet.or(iter);\n    } else {\n      while (true) {\n        assert buffer.length <= threshold;\n        final int end = buffer.length;\n        for (int i = bufferSize; i < end; ++i) {\n          final int doc = iter.nextDoc();\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            bufferSize = i;\n            return;\n          }\n          buffer[bufferSize++] = doc;\n        }\n        bufferSize = end;\n\n        if (bufferSize + 1 >= threshold) {\n          break;\n        }\n\n        growBuffer(bufferSize+1);\n      }\n\n      upgradeToBitSet();\n      for (int doc = iter.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = iter.nextDoc()) {\n        bitSet.set(doc);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Add the content of the provided {@link DocIdSetIterator} to this builder.\n   * NOTE: if you need to build a {@link DocIdSet} out of a single\n   * {@link DocIdSetIterator}, you should rather use {@link RoaringDocIdSet.Builder}.\n   */\n  public void add(DocIdSetIterator iter) throws IOException {\n    grow((int) Math.min(Integer.MAX_VALUE, iter.cost()));\n\n    if (bitSet != null) {\n      bitSet.or(iter);\n    } else {\n      while (true) {  \n        assert buffer.length <= threshold;\n        final int end = buffer.length;\n        for (int i = bufferSize; i < end; ++i) {\n          final int doc = iter.nextDoc();\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            bufferSize = i;\n            return;\n          }\n          buffer[bufferSize++] = doc;\n        }\n        bufferSize = end;\n\n        if (bufferSize + 1 >= threshold) {\n          break;\n        }\n\n        growBuffer(bufferSize+1);\n      }\n\n      upgradeToBitSet();\n      for (int doc = iter.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = iter.nextDoc()) {\n        bitSet.set(doc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#add(DocIdSetIterator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#add(DocIdSetIterator).mjava","sourceNew":"  /**\n   * Add the content of the provided {@link DocIdSetIterator} to this builder.\n   * NOTE: if you need to build a {@link DocIdSet} out of a single\n   * {@link DocIdSetIterator}, you should rather use {@link RoaringDocIdSet.Builder}.\n   */\n  public void add(DocIdSetIterator iter) throws IOException {\n    grow((int) Math.min(Integer.MAX_VALUE, iter.cost()));\n\n    if (bitSet != null) {\n      bitSet.or(iter);\n    } else {\n      while (true) {\n        assert buffer.length <= threshold;\n        final int end = buffer.length;\n        for (int i = bufferSize; i < end; ++i) {\n          final int doc = iter.nextDoc();\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            bufferSize = i;\n            return;\n          }\n          buffer[bufferSize++] = doc;\n        }\n        bufferSize = end;\n\n        if (bufferSize + 1 >= threshold) {\n          break;\n        }\n\n        growBuffer(bufferSize+1);\n      }\n\n      upgradeToBitSet();\n      for (int doc = iter.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = iter.nextDoc()) {\n        bitSet.set(doc);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Add the content of the provided {@link DocIdSetIterator} to this builder.\n   * NOTE: if you need to build a {@link DocIdSet} out of a single\n   * {@link DocIdSetIterator}, you should rather use {@link RoaringDocIdSet.Builder}.\n   */\n  public void add(DocIdSetIterator iter) throws IOException {\n    grow((int) Math.min(Integer.MAX_VALUE, iter.cost()));\n\n    if (bitSet != null) {\n      bitSet.or(iter);\n    } else {\n      while (true) {  \n        assert buffer.length <= threshold;\n        final int end = buffer.length;\n        for (int i = bufferSize; i < end; ++i) {\n          final int doc = iter.nextDoc();\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            bufferSize = i;\n            return;\n          }\n          buffer[bufferSize++] = doc;\n        }\n        bufferSize = end;\n\n        if (bufferSize + 1 >= threshold) {\n          break;\n        }\n\n        growBuffer(bufferSize+1);\n      }\n\n      upgradeToBitSet();\n      for (int doc = iter.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = iter.nextDoc()) {\n        bitSet.set(doc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cb92b52940b86bd2ad151ecc61b2f5e83af1a5e","date":1463988431,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#add(DocIdSetIterator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#add(DocIdSetIterator).mjava","sourceNew":"  /**\n   * Add the content of the provided {@link DocIdSetIterator} to this builder.\n   * NOTE: if you need to build a {@link DocIdSet} out of a single\n   * {@link DocIdSetIterator}, you should rather use {@link RoaringDocIdSet.Builder}.\n   */\n  public void add(DocIdSetIterator iter) throws IOException {\n    if (bitSet != null) {\n      bitSet.or(iter);\n      return;\n    }\n    int cost = (int) Math.min(Integer.MAX_VALUE, iter.cost());\n    BulkAdder adder = grow(cost);\n    for (int i = 0; i < cost; ++i) {\n      int doc = iter.nextDoc();\n      if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      adder.add(doc);\n    }\n    for (int doc = iter.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = iter.nextDoc()) {\n      grow(1).add(doc);\n    }\n  }\n\n","sourceOld":"  /**\n   * Add the content of the provided {@link DocIdSetIterator} to this builder.\n   * NOTE: if you need to build a {@link DocIdSet} out of a single\n   * {@link DocIdSetIterator}, you should rather use {@link RoaringDocIdSet.Builder}.\n   */\n  public void add(DocIdSetIterator iter) throws IOException {\n    grow((int) Math.min(Integer.MAX_VALUE, iter.cost()));\n\n    if (bitSet != null) {\n      bitSet.or(iter);\n    } else {\n      while (true) {\n        assert buffer.length <= threshold;\n        final int end = buffer.length;\n        for (int i = bufferSize; i < end; ++i) {\n          final int doc = iter.nextDoc();\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            bufferSize = i;\n            return;\n          }\n          buffer[bufferSize++] = doc;\n        }\n        bufferSize = end;\n\n        if (bufferSize + 1 >= threshold) {\n          break;\n        }\n\n        growBuffer(bufferSize+1);\n      }\n\n      upgradeToBitSet();\n      for (int doc = iter.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = iter.nextDoc()) {\n        bitSet.set(doc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e616cfbf284ecbd0f40b4b9e4196daa27e92abd5","date":1464066565,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#add(DocIdSetIterator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#add(DocIdSetIterator).mjava","sourceNew":"  /**\n   * Add the content of the provided {@link DocIdSetIterator} to this builder.\n   * NOTE: if you need to build a {@link DocIdSet} out of a single\n   * {@link DocIdSetIterator}, you should rather use {@link RoaringDocIdSet.Builder}.\n   */\n  public void add(DocIdSetIterator iter) throws IOException {\n    if (bitSet != null) {\n      bitSet.or(iter);\n      return;\n    }\n    int cost = (int) Math.min(Integer.MAX_VALUE, iter.cost());\n    BulkAdder adder = grow(cost);\n    for (int i = 0; i < cost; ++i) {\n      int doc = iter.nextDoc();\n      if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      adder.add(doc);\n    }\n    for (int doc = iter.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = iter.nextDoc()) {\n      grow(1).add(doc);\n    }\n  }\n\n","sourceOld":"  /**\n   * Add the content of the provided {@link DocIdSetIterator} to this builder.\n   * NOTE: if you need to build a {@link DocIdSet} out of a single\n   * {@link DocIdSetIterator}, you should rather use {@link RoaringDocIdSet.Builder}.\n   */\n  public void add(DocIdSetIterator iter) throws IOException {\n    grow((int) Math.min(Integer.MAX_VALUE, iter.cost()));\n\n    if (bitSet != null) {\n      bitSet.or(iter);\n    } else {\n      while (true) {\n        assert buffer.length <= threshold;\n        final int end = buffer.length;\n        for (int i = bufferSize; i < end; ++i) {\n          final int doc = iter.nextDoc();\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            bufferSize = i;\n            return;\n          }\n          buffer[bufferSize++] = doc;\n        }\n        bufferSize = end;\n\n        if (bufferSize + 1 >= threshold) {\n          break;\n        }\n\n        growBuffer(bufferSize+1);\n      }\n\n      upgradeToBitSet();\n      for (int doc = iter.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = iter.nextDoc()) {\n        bitSet.set(doc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#add(DocIdSetIterator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/DocIdSetBuilder#add(DocIdSetIterator).mjava","sourceNew":"  /**\n   * Add the content of the provided {@link DocIdSetIterator} to this builder.\n   * NOTE: if you need to build a {@link DocIdSet} out of a single\n   * {@link DocIdSetIterator}, you should rather use {@link RoaringDocIdSet.Builder}.\n   */\n  public void add(DocIdSetIterator iter) throws IOException {\n    if (bitSet != null) {\n      bitSet.or(iter);\n      return;\n    }\n    int cost = (int) Math.min(Integer.MAX_VALUE, iter.cost());\n    BulkAdder adder = grow(cost);\n    for (int i = 0; i < cost; ++i) {\n      int doc = iter.nextDoc();\n      if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      adder.add(doc);\n    }\n    for (int doc = iter.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = iter.nextDoc()) {\n      grow(1).add(doc);\n    }\n  }\n\n","sourceOld":"  /**\n   * Add the content of the provided {@link DocIdSetIterator} to this builder.\n   * NOTE: if you need to build a {@link DocIdSet} out of a single\n   * {@link DocIdSetIterator}, you should rather use {@link RoaringDocIdSet.Builder}.\n   */\n  public void add(DocIdSetIterator iter) throws IOException {\n    grow((int) Math.min(Integer.MAX_VALUE, iter.cost()));\n\n    if (bitSet != null) {\n      bitSet.or(iter);\n    } else {\n      while (true) {\n        assert buffer.length <= threshold;\n        final int end = buffer.length;\n        for (int i = bufferSize; i < end; ++i) {\n          final int doc = iter.nextDoc();\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            bufferSize = i;\n            return;\n          }\n          buffer[bufferSize++] = doc;\n        }\n        bufferSize = end;\n\n        if (bufferSize + 1 >= threshold) {\n          break;\n        }\n\n        growBuffer(bufferSize+1);\n      }\n\n      upgradeToBitSet();\n      for (int doc = iter.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = iter.nextDoc()) {\n        bitSet.set(doc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9cb92b52940b86bd2ad151ecc61b2f5e83af1a5e":["8e8d5955830d712186a4beb716e797d505af7981"],"fbb517d79e844487af01a6ca20870b400594321c":["0e91a2d9ed80172872da0f517870da6756289554"],"3d3eccadf4f2a01d2034c96afe1a5c617b2e85af":["fbb517d79e844487af01a6ca20870b400594321c"],"8e8d5955830d712186a4beb716e797d505af7981":["fbb517d79e844487af01a6ca20870b400594321c","3d3eccadf4f2a01d2034c96afe1a5c617b2e85af"],"0e91a2d9ed80172872da0f517870da6756289554":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e616cfbf284ecbd0f40b4b9e4196daa27e92abd5":["8e8d5955830d712186a4beb716e797d505af7981","9cb92b52940b86bd2ad151ecc61b2f5e83af1a5e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["55b50463286869f584cf849d1587a0fcd54d1dfa","e616cfbf284ecbd0f40b4b9e4196daa27e92abd5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e616cfbf284ecbd0f40b4b9e4196daa27e92abd5"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["fbb517d79e844487af01a6ca20870b400594321c","8e8d5955830d712186a4beb716e797d505af7981"]},"commit2Childs":{"9cb92b52940b86bd2ad151ecc61b2f5e83af1a5e":["e616cfbf284ecbd0f40b4b9e4196daa27e92abd5"],"fbb517d79e844487af01a6ca20870b400594321c":["3d3eccadf4f2a01d2034c96afe1a5c617b2e85af","8e8d5955830d712186a4beb716e797d505af7981","55b50463286869f584cf849d1587a0fcd54d1dfa"],"3d3eccadf4f2a01d2034c96afe1a5c617b2e85af":["8e8d5955830d712186a4beb716e797d505af7981"],"8e8d5955830d712186a4beb716e797d505af7981":["9cb92b52940b86bd2ad151ecc61b2f5e83af1a5e","e616cfbf284ecbd0f40b4b9e4196daa27e92abd5","55b50463286869f584cf849d1587a0fcd54d1dfa"],"0e91a2d9ed80172872da0f517870da6756289554":["fbb517d79e844487af01a6ca20870b400594321c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0e91a2d9ed80172872da0f517870da6756289554"],"e616cfbf284ecbd0f40b4b9e4196daa27e92abd5":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}