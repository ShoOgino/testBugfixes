{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#getEvaluators(List[Map[String,String]]).mjava","commits":[{"id":"7c7b0ae5716b6c2044195a818e9ae58205175659","date":1353342230,"type":0,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#getEvaluators(List[Map[String,String]]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * used by tests.\n   */\n  Map<String, Evaluator> getEvaluators(List<Map<String,String>> fn) {\n    Map<String, Evaluator> evaluators = new HashMap<String, Evaluator>();\n    evaluators.put(Evaluator.DATE_FORMAT_EVALUATOR, new DateFormatEvaluator());\n    evaluators.put(Evaluator.SQL_ESCAPE_EVALUATOR, new SqlEscapingEvaluator());\n    evaluators.put(Evaluator.URL_ENCODE_EVALUATOR, new UrlEvaluator());\n    evaluators.put(Evaluator.ESCAPE_SOLR_QUERY_CHARS, new SolrQueryEscapingEvaluator());\n    SolrCore core = docBuilder == null ? null : docBuilder.dataImporter.getCore();\n    for (Map<String, String> map : fn) {\n      try {\n        evaluators.put(map.get(NAME), (Evaluator) loadClass(map.get(CLASS), core).newInstance());\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Unable to instantiate evaluator: \" + map.get(CLASS));\n      }\n    }\n    return evaluators;    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#getEvaluators(List[Map[String,String]]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * used by tests.\n   */\n  Map<String, Evaluator> getEvaluators(List<Map<String,String>> fn) {\n    Map<String, Evaluator> evaluators = new HashMap<String, Evaluator>();\n    evaluators.put(Evaluator.DATE_FORMAT_EVALUATOR, new DateFormatEvaluator());\n    evaluators.put(Evaluator.SQL_ESCAPE_EVALUATOR, new SqlEscapingEvaluator());\n    evaluators.put(Evaluator.URL_ENCODE_EVALUATOR, new UrlEvaluator());\n    evaluators.put(Evaluator.ESCAPE_SOLR_QUERY_CHARS, new SolrQueryEscapingEvaluator());\n    SolrCore core = docBuilder == null ? null : docBuilder.dataImporter.getCore();\n    for (Map<String, String> map : fn) {\n      try {\n        evaluators.put(map.get(NAME), (Evaluator) loadClass(map.get(CLASS), core).newInstance());\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Unable to instantiate evaluator: \" + map.get(CLASS));\n      }\n    }\n    return evaluators;    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#getEvaluators(List[Map[String,String]]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#getEvaluators(List[Map[String,String]]).mjava","sourceNew":"  /**\n   * used by tests.\n   */\n  Map<String, Evaluator> getEvaluators(List<Map<String,String>> fn) {\n    Map<String, Evaluator> evaluators = new HashMap<>();\n    evaluators.put(Evaluator.DATE_FORMAT_EVALUATOR, new DateFormatEvaluator());\n    evaluators.put(Evaluator.SQL_ESCAPE_EVALUATOR, new SqlEscapingEvaluator());\n    evaluators.put(Evaluator.URL_ENCODE_EVALUATOR, new UrlEvaluator());\n    evaluators.put(Evaluator.ESCAPE_SOLR_QUERY_CHARS, new SolrQueryEscapingEvaluator());\n    SolrCore core = docBuilder == null ? null : docBuilder.dataImporter.getCore();\n    for (Map<String, String> map : fn) {\n      try {\n        evaluators.put(map.get(NAME), (Evaluator) loadClass(map.get(CLASS), core).newInstance());\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Unable to instantiate evaluator: \" + map.get(CLASS));\n      }\n    }\n    return evaluators;    \n  }\n\n","sourceOld":"  /**\n   * used by tests.\n   */\n  Map<String, Evaluator> getEvaluators(List<Map<String,String>> fn) {\n    Map<String, Evaluator> evaluators = new HashMap<String, Evaluator>();\n    evaluators.put(Evaluator.DATE_FORMAT_EVALUATOR, new DateFormatEvaluator());\n    evaluators.put(Evaluator.SQL_ESCAPE_EVALUATOR, new SqlEscapingEvaluator());\n    evaluators.put(Evaluator.URL_ENCODE_EVALUATOR, new UrlEvaluator());\n    evaluators.put(Evaluator.ESCAPE_SOLR_QUERY_CHARS, new SolrQueryEscapingEvaluator());\n    SolrCore core = docBuilder == null ? null : docBuilder.dataImporter.getCore();\n    for (Map<String, String> map : fn) {\n      try {\n        evaluators.put(map.get(NAME), (Evaluator) loadClass(map.get(CLASS), core).newInstance());\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Unable to instantiate evaluator: \" + map.get(CLASS));\n      }\n    }\n    return evaluators;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#getEvaluators(List[Map[String,String]]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#getEvaluators(List[Map[String,String]]).mjava","sourceNew":"  /**\n   * used by tests.\n   */\n  Map<String, Evaluator> getEvaluators(List<Map<String,String>> fn) {\n    Map<String, Evaluator> evaluators = new HashMap<>();\n    evaluators.put(Evaluator.DATE_FORMAT_EVALUATOR, new DateFormatEvaluator());\n    evaluators.put(Evaluator.SQL_ESCAPE_EVALUATOR, new SqlEscapingEvaluator());\n    evaluators.put(Evaluator.URL_ENCODE_EVALUATOR, new UrlEvaluator());\n    evaluators.put(Evaluator.ESCAPE_SOLR_QUERY_CHARS, new SolrQueryEscapingEvaluator());\n    SolrCore core = docBuilder == null ? null : docBuilder.dataImporter.getCore();\n    for (Map<String, String> map : fn) {\n      try {\n        evaluators.put(map.get(NAME), (Evaluator) loadClass(map.get(CLASS), core).getConstructor().newInstance());\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Unable to instantiate evaluator: \" + map.get(CLASS));\n      }\n    }\n    return evaluators;    \n  }\n\n","sourceOld":"  /**\n   * used by tests.\n   */\n  Map<String, Evaluator> getEvaluators(List<Map<String,String>> fn) {\n    Map<String, Evaluator> evaluators = new HashMap<>();\n    evaluators.put(Evaluator.DATE_FORMAT_EVALUATOR, new DateFormatEvaluator());\n    evaluators.put(Evaluator.SQL_ESCAPE_EVALUATOR, new SqlEscapingEvaluator());\n    evaluators.put(Evaluator.URL_ENCODE_EVALUATOR, new UrlEvaluator());\n    evaluators.put(Evaluator.ESCAPE_SOLR_QUERY_CHARS, new SolrQueryEscapingEvaluator());\n    SolrCore core = docBuilder == null ? null : docBuilder.dataImporter.getCore();\n    for (Map<String, String> map : fn) {\n      try {\n        evaluators.put(map.get(NAME), (Evaluator) loadClass(map.get(CLASS), core).newInstance());\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Unable to instantiate evaluator: \" + map.get(CLASS));\n      }\n    }\n    return evaluators;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"024e13388acbf5562fcbb77a129620982a5e2d79","date":1591531835,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#getEvaluators(List[Map[String,String]]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#getEvaluators(List[Map[String,String]]).mjava","sourceNew":"  /**\n   * used by tests.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  Map<String, Evaluator> getEvaluators(List<Map<String,String>> fn) {\n    Map<String, Evaluator> evaluators = new HashMap<>();\n    evaluators.put(Evaluator.DATE_FORMAT_EVALUATOR, new DateFormatEvaluator());\n    evaluators.put(Evaluator.SQL_ESCAPE_EVALUATOR, new SqlEscapingEvaluator());\n    evaluators.put(Evaluator.URL_ENCODE_EVALUATOR, new UrlEvaluator());\n    evaluators.put(Evaluator.ESCAPE_SOLR_QUERY_CHARS, new SolrQueryEscapingEvaluator());\n    SolrCore core = docBuilder == null ? null : docBuilder.dataImporter.getCore();\n    for (Map<String, String> map : fn) {\n      try {\n        evaluators.put(map.get(NAME), (Evaluator) loadClass(map.get(CLASS), core).getConstructor().newInstance());\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Unable to instantiate evaluator: \" + map.get(CLASS));\n      }\n    }\n    return evaluators;    \n  }\n\n","sourceOld":"  /**\n   * used by tests.\n   */\n  Map<String, Evaluator> getEvaluators(List<Map<String,String>> fn) {\n    Map<String, Evaluator> evaluators = new HashMap<>();\n    evaluators.put(Evaluator.DATE_FORMAT_EVALUATOR, new DateFormatEvaluator());\n    evaluators.put(Evaluator.SQL_ESCAPE_EVALUATOR, new SqlEscapingEvaluator());\n    evaluators.put(Evaluator.URL_ENCODE_EVALUATOR, new UrlEvaluator());\n    evaluators.put(Evaluator.ESCAPE_SOLR_QUERY_CHARS, new SolrQueryEscapingEvaluator());\n    SolrCore core = docBuilder == null ? null : docBuilder.dataImporter.getCore();\n    for (Map<String, String> map : fn) {\n      try {\n        evaluators.put(map.get(NAME), (Evaluator) loadClass(map.get(CLASS), core).getConstructor().newInstance());\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Unable to instantiate evaluator: \" + map.get(CLASS));\n      }\n    }\n    return evaluators;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter#getEvaluators(List[Map[String,String]]).mjava","sourceNew":null,"sourceOld":"  /**\n   * used by tests.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  Map<String, Evaluator> getEvaluators(List<Map<String,String>> fn) {\n    Map<String, Evaluator> evaluators = new HashMap<>();\n    evaluators.put(Evaluator.DATE_FORMAT_EVALUATOR, new DateFormatEvaluator());\n    evaluators.put(Evaluator.SQL_ESCAPE_EVALUATOR, new SqlEscapingEvaluator());\n    evaluators.put(Evaluator.URL_ENCODE_EVALUATOR, new UrlEvaluator());\n    evaluators.put(Evaluator.ESCAPE_SOLR_QUERY_CHARS, new SolrQueryEscapingEvaluator());\n    SolrCore core = docBuilder == null ? null : docBuilder.dataImporter.getCore();\n    for (Map<String, String> map : fn) {\n      try {\n        evaluators.put(map.get(NAME), (Evaluator) loadClass(map.get(CLASS), core).getConstructor().newInstance());\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Unable to instantiate evaluator: \" + map.get(CLASS));\n      }\n    }\n    return evaluators;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7c7b0ae5716b6c2044195a818e9ae58205175659"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["024e13388acbf5562fcbb77a129620982a5e2d79"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"024e13388acbf5562fcbb77a129620982a5e2d79":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7c7b0ae5716b6c2044195a818e9ae58205175659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["024e13388acbf5562fcbb77a129620982a5e2d79"],"024e13388acbf5562fcbb77a129620982a5e2d79":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c7b0ae5716b6c2044195a818e9ae58205175659","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}