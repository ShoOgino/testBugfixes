{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsRequestParser#constructGrouping(String,AnalyticsGroupingRequest,ExpressionFactory,boolean).mjava","commits":[{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsRequestParser#constructGrouping(String,AnalyticsGroupingRequest,ExpressionFactory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private static AnalyticsGroupingManager constructGrouping(String name, AnalyticsGroupingRequest grouping, ExpressionFactory expressionFactory, boolean isDistribRequest) throws SolrException {\n    expressionFactory.startGrouping();\n    \n    // Expressions\n    if (grouping.expressions == null || grouping.expressions.size() == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"Groupings must contain at least one expression, '\" + name + \"' has none.\");\n    }\n    \n    Map<String,AnalyticsExpression> expressions = constructExpressions(grouping.expressions, expressionFactory);\n    AnalyticsGroupingManager manager = new AnalyticsGroupingManager(name, \n                                                                    expressionFactory.createGroupingReductionManager(isDistribRequest), \n                                                                    expressions.values());\n    \n    if (grouping.facets == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"Groupings must contain at least one facet, '\" + name + \"' has none.\");\n    }\n    // Parse the facets\n    grouping.facets.forEach( (facetName, facet) -> {\n      if (facet instanceof AnalyticsValueFacetRequest) {\n        manager.addFacet(constructValueFacet(facetName, (AnalyticsValueFacetRequest) facet, expressionFactory, expressions));\n      } else if (facet instanceof AnalyticsPivotFacetRequest) {\n        manager.addFacet(constructPivotFacet(facetName, (AnalyticsPivotFacetRequest) facet, expressionFactory, expressions));\n      } else if (facet instanceof AnalyticsRangeFacetRequest) {\n        manager.addFacet(constructRangeFacet(facetName, (AnalyticsRangeFacetRequest) facet, expressionFactory.getSchema()));\n      } else if (facet instanceof AnalyticsQueryFacetRequest) {\n        manager.addFacet(constructQueryFacet(facetName, (AnalyticsQueryFacetRequest) facet));\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The facet type, '\" + facet.getClass().toString() + \"' in \"\n            + \"grouping '\" + name + \"' is not a valid type of facet\"); \n      }\n    });\n    \n    return manager;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsRequestParser#constructGrouping(String,AnalyticsGroupingRequest,ExpressionFactory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private static AnalyticsGroupingManager constructGrouping(String name, AnalyticsGroupingRequest grouping, ExpressionFactory expressionFactory, boolean isDistribRequest) throws SolrException {\n    expressionFactory.startGrouping();\n    \n    // Expressions\n    if (grouping.expressions == null || grouping.expressions.size() == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"Groupings must contain at least one expression, '\" + name + \"' has none.\");\n    }\n    \n    Map<String,AnalyticsExpression> expressions = constructExpressions(grouping.expressions, expressionFactory);\n    AnalyticsGroupingManager manager = new AnalyticsGroupingManager(name, \n                                                                    expressionFactory.createGroupingReductionManager(isDistribRequest), \n                                                                    expressions.values());\n    \n    if (grouping.facets == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"Groupings must contain at least one facet, '\" + name + \"' has none.\");\n    }\n    // Parse the facets\n    grouping.facets.forEach( (facetName, facet) -> {\n      if (facet instanceof AnalyticsValueFacetRequest) {\n        manager.addFacet(constructValueFacet(facetName, (AnalyticsValueFacetRequest) facet, expressionFactory, expressions));\n      } else if (facet instanceof AnalyticsPivotFacetRequest) {\n        manager.addFacet(constructPivotFacet(facetName, (AnalyticsPivotFacetRequest) facet, expressionFactory, expressions));\n      } else if (facet instanceof AnalyticsRangeFacetRequest) {\n        manager.addFacet(constructRangeFacet(facetName, (AnalyticsRangeFacetRequest) facet, expressionFactory.getSchema()));\n      } else if (facet instanceof AnalyticsQueryFacetRequest) {\n        manager.addFacet(constructQueryFacet(facetName, (AnalyticsQueryFacetRequest) facet));\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The facet type, '\" + facet.getClass().toString() + \"' in \"\n            + \"grouping '\" + name + \"' is not a valid type of facet\"); \n      }\n    });\n    \n    return manager;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsRequestParser#constructGrouping(String,AnalyticsGroupingRequest,ExpressionFactory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private static AnalyticsGroupingManager constructGrouping(String name, AnalyticsGroupingRequest grouping, ExpressionFactory expressionFactory, boolean isDistribRequest) throws SolrException {\n    expressionFactory.startGrouping();\n    \n    // Expressions\n    if (grouping.expressions == null || grouping.expressions.size() == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"Groupings must contain at least one expression, '\" + name + \"' has none.\");\n    }\n    \n    Map<String,AnalyticsExpression> expressions = constructExpressions(grouping.expressions, expressionFactory);\n    AnalyticsGroupingManager manager = new AnalyticsGroupingManager(name, \n                                                                    expressionFactory.createGroupingReductionManager(isDistribRequest), \n                                                                    expressions.values());\n    \n    if (grouping.facets == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"Groupings must contain at least one facet, '\" + name + \"' has none.\");\n    }\n    // Parse the facets\n    grouping.facets.forEach( (facetName, facet) -> {\n      if (facet instanceof AnalyticsValueFacetRequest) {\n        manager.addFacet(constructValueFacet(facetName, (AnalyticsValueFacetRequest) facet, expressionFactory, expressions));\n      } else if (facet instanceof AnalyticsPivotFacetRequest) {\n        manager.addFacet(constructPivotFacet(facetName, (AnalyticsPivotFacetRequest) facet, expressionFactory, expressions));\n      } else if (facet instanceof AnalyticsRangeFacetRequest) {\n        manager.addFacet(constructRangeFacet(facetName, (AnalyticsRangeFacetRequest) facet, expressionFactory.getSchema()));\n      } else if (facet instanceof AnalyticsQueryFacetRequest) {\n        manager.addFacet(constructQueryFacet(facetName, (AnalyticsQueryFacetRequest) facet));\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The facet type, '\" + facet.getClass().toString() + \"' in \"\n            + \"grouping '\" + name + \"' is not a valid type of facet\"); \n      }\n    });\n    \n    return manager;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsRequestParser#constructGrouping(String,AnalyticsGroupingRequest,ExpressionFactory,boolean).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsRequestParser#constructGrouping(String,AnalyticsGroupingRequest,ExpressionFactory,boolean).mjava","sourceNew":"  private static AnalyticsGroupingManager constructGrouping(String name, AnalyticsGroupingRequest grouping, ExpressionFactory expressionFactory, boolean isDistribRequest) throws SolrException {\n    expressionFactory.startGrouping();\n\n    // Expressions\n    if (grouping.expressions == null || grouping.expressions.size() == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"Groupings must contain at least one expression, '\" + name + \"' has none.\");\n    }\n\n    Map<String,AnalyticsExpression> expressions = constructExpressions(grouping.expressions, expressionFactory);\n    AnalyticsGroupingManager manager = new AnalyticsGroupingManager(name,\n                                                                    expressionFactory.createGroupingReductionManager(isDistribRequest),\n                                                                    expressions.values());\n\n    if (grouping.facets == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"Groupings must contain at least one facet, '\" + name + \"' has none.\");\n    }\n    // Parse the facets\n    grouping.facets.forEach( (facetName, facet) -> {\n      if (facet instanceof AnalyticsValueFacetRequest) {\n        manager.addFacet(constructValueFacet(facetName, (AnalyticsValueFacetRequest) facet, expressionFactory, expressions));\n      } else if (facet instanceof AnalyticsPivotFacetRequest) {\n        manager.addFacet(constructPivotFacet(facetName, (AnalyticsPivotFacetRequest) facet, expressionFactory, expressions));\n      } else if (facet instanceof AnalyticsRangeFacetRequest) {\n        manager.addFacet(constructRangeFacet(facetName, (AnalyticsRangeFacetRequest) facet, expressionFactory.getSchema()));\n      } else if (facet instanceof AnalyticsQueryFacetRequest) {\n        manager.addFacet(constructQueryFacet(facetName, (AnalyticsQueryFacetRequest) facet));\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The facet type, '\" + facet.getClass().toString() + \"' in \"\n            + \"grouping '\" + name + \"' is not a valid type of facet\");\n      }\n    });\n\n    return manager;\n  }\n\n","sourceOld":"  private static AnalyticsGroupingManager constructGrouping(String name, AnalyticsGroupingRequest grouping, ExpressionFactory expressionFactory, boolean isDistribRequest) throws SolrException {\n    expressionFactory.startGrouping();\n    \n    // Expressions\n    if (grouping.expressions == null || grouping.expressions.size() == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"Groupings must contain at least one expression, '\" + name + \"' has none.\");\n    }\n    \n    Map<String,AnalyticsExpression> expressions = constructExpressions(grouping.expressions, expressionFactory);\n    AnalyticsGroupingManager manager = new AnalyticsGroupingManager(name, \n                                                                    expressionFactory.createGroupingReductionManager(isDistribRequest), \n                                                                    expressions.values());\n    \n    if (grouping.facets == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"Groupings must contain at least one facet, '\" + name + \"' has none.\");\n    }\n    // Parse the facets\n    grouping.facets.forEach( (facetName, facet) -> {\n      if (facet instanceof AnalyticsValueFacetRequest) {\n        manager.addFacet(constructValueFacet(facetName, (AnalyticsValueFacetRequest) facet, expressionFactory, expressions));\n      } else if (facet instanceof AnalyticsPivotFacetRequest) {\n        manager.addFacet(constructPivotFacet(facetName, (AnalyticsPivotFacetRequest) facet, expressionFactory, expressions));\n      } else if (facet instanceof AnalyticsRangeFacetRequest) {\n        manager.addFacet(constructRangeFacet(facetName, (AnalyticsRangeFacetRequest) facet, expressionFactory.getSchema()));\n      } else if (facet instanceof AnalyticsQueryFacetRequest) {\n        manager.addFacet(constructQueryFacet(facetName, (AnalyticsQueryFacetRequest) facet));\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The facet type, '\" + facet.getClass().toString() + \"' in \"\n            + \"grouping '\" + name + \"' is not a valid type of facet\"); \n      }\n    });\n    \n    return manager;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsRequestParser#constructGrouping(String,AnalyticsGroupingRequest,ExpressionFactory,boolean).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsRequestParser#constructGrouping(String,AnalyticsGroupingRequest,ExpressionFactory,boolean).mjava","sourceNew":"  private static AnalyticsGroupingManager constructGrouping(String name, AnalyticsGroupingRequest grouping, ExpressionFactory expressionFactory, boolean isDistribRequest) throws SolrException {\n    expressionFactory.startGrouping();\n\n    // Expressions\n    if (grouping.expressions == null || grouping.expressions.size() == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"Groupings must contain at least one expression, '\" + name + \"' has none.\");\n    }\n\n    Map<String,AnalyticsExpression> expressions = constructExpressions(grouping.expressions, expressionFactory);\n    AnalyticsGroupingManager manager = new AnalyticsGroupingManager(name,\n                                                                    expressionFactory.createGroupingReductionManager(isDistribRequest),\n                                                                    expressions.values());\n\n    if (grouping.facets == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"Groupings must contain at least one facet, '\" + name + \"' has none.\");\n    }\n    // Parse the facets\n    grouping.facets.forEach( (facetName, facet) -> {\n      if (facet instanceof AnalyticsValueFacetRequest) {\n        manager.addFacet(constructValueFacet(facetName, (AnalyticsValueFacetRequest) facet, expressionFactory, expressions));\n      } else if (facet instanceof AnalyticsPivotFacetRequest) {\n        manager.addFacet(constructPivotFacet(facetName, (AnalyticsPivotFacetRequest) facet, expressionFactory, expressions));\n      } else if (facet instanceof AnalyticsRangeFacetRequest) {\n        manager.addFacet(constructRangeFacet(facetName, (AnalyticsRangeFacetRequest) facet, expressionFactory.getSchema()));\n      } else if (facet instanceof AnalyticsQueryFacetRequest) {\n        manager.addFacet(constructQueryFacet(facetName, (AnalyticsQueryFacetRequest) facet));\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The facet type, '\" + facet.getClass().toString() + \"' in \"\n            + \"grouping '\" + name + \"' is not a valid type of facet\");\n      }\n    });\n\n    return manager;\n  }\n\n","sourceOld":"  private static AnalyticsGroupingManager constructGrouping(String name, AnalyticsGroupingRequest grouping, ExpressionFactory expressionFactory, boolean isDistribRequest) throws SolrException {\n    expressionFactory.startGrouping();\n    \n    // Expressions\n    if (grouping.expressions == null || grouping.expressions.size() == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"Groupings must contain at least one expression, '\" + name + \"' has none.\");\n    }\n    \n    Map<String,AnalyticsExpression> expressions = constructExpressions(grouping.expressions, expressionFactory);\n    AnalyticsGroupingManager manager = new AnalyticsGroupingManager(name, \n                                                                    expressionFactory.createGroupingReductionManager(isDistribRequest), \n                                                                    expressions.values());\n    \n    if (grouping.facets == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"Groupings must contain at least one facet, '\" + name + \"' has none.\");\n    }\n    // Parse the facets\n    grouping.facets.forEach( (facetName, facet) -> {\n      if (facet instanceof AnalyticsValueFacetRequest) {\n        manager.addFacet(constructValueFacet(facetName, (AnalyticsValueFacetRequest) facet, expressionFactory, expressions));\n      } else if (facet instanceof AnalyticsPivotFacetRequest) {\n        manager.addFacet(constructPivotFacet(facetName, (AnalyticsPivotFacetRequest) facet, expressionFactory, expressions));\n      } else if (facet instanceof AnalyticsRangeFacetRequest) {\n        manager.addFacet(constructRangeFacet(facetName, (AnalyticsRangeFacetRequest) facet, expressionFactory.getSchema()));\n      } else if (facet instanceof AnalyticsQueryFacetRequest) {\n        manager.addFacet(constructQueryFacet(facetName, (AnalyticsQueryFacetRequest) facet));\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The facet type, '\" + facet.getClass().toString() + \"' in \"\n            + \"grouping '\" + name + \"' is not a valid type of facet\"); \n      }\n    });\n    \n    return manager;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"f8061ddd97f3352007d927dae445884a6f3d857b":["28288370235ed02234a64753cdbf0c6ec096304a","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["1e4e64b7199d2f2a17be7f3926c7532553910dce","30c8e5574b55d57947e989443dfde611646530ee","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}