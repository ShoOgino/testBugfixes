{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState,int).mjava","commits":[{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState,int).mjava","pathOld":"/dev/null","sourceNew":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState, int flags) throws IOException {\n      this.liveDocs = liveDocs;\n\n      docFreq = termState.docFreq;\n      totalTermFreq = indexHasFreq ? termState.totalTermFreq : docFreq;\n      docTermStartFP = termState.docStartFP;\n      skipOffset = termState.skipOffset;\n      singletonDocID = termState.singletonDocID;\n      if (docFreq > 1) {\n        if (docIn == null) {\n          // lazy init\n          docIn = startDocIn.clone();\n        }\n        docIn.seek(docTermStartFP);\n      }\n\n      doc = -1;\n      this.needsFreq = (flags & DocsEnum.FLAG_FREQS) != 0;\n      if (!indexHasFreq) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState,int).mjava","pathOld":"/dev/null","sourceNew":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState, int flags) throws IOException {\n      this.liveDocs = liveDocs;\n\n      docFreq = termState.docFreq;\n      totalTermFreq = indexHasFreq ? termState.totalTermFreq : docFreq;\n      docTermStartFP = termState.docStartFP;\n      skipOffset = termState.skipOffset;\n      singletonDocID = termState.singletonDocID;\n      if (docFreq > 1) {\n        if (docIn == null) {\n          // lazy init\n          docIn = startDocIn.clone();\n        }\n        docIn.seek(docTermStartFP);\n      }\n\n      doc = -1;\n      this.needsFreq = (flags & DocsEnum.FLAG_FREQS) != 0;\n      if (!indexHasFreq) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState,int).mjava","sourceNew":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState, int flags) throws IOException {\n      this.liveDocs = liveDocs;\n\n      docFreq = termState.docFreq;\n      totalTermFreq = indexHasFreq ? termState.totalTermFreq : docFreq;\n      docTermStartFP = termState.docStartFP;\n      skipOffset = termState.skipOffset;\n      singletonDocID = termState.singletonDocID;\n      if (docFreq > 1) {\n        if (docIn == null) {\n          // lazy init\n          docIn = startDocIn.clone();\n        }\n        docIn.seek(docTermStartFP);\n      }\n\n      doc = -1;\n      this.needsFreq = (flags & DocsEnum.FLAG_FREQS) != 0;\n      if (indexHasFreq == false || needsFreq == false) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState, int flags) throws IOException {\n      this.liveDocs = liveDocs;\n\n      docFreq = termState.docFreq;\n      totalTermFreq = indexHasFreq ? termState.totalTermFreq : docFreq;\n      docTermStartFP = termState.docStartFP;\n      skipOffset = termState.skipOffset;\n      singletonDocID = termState.singletonDocID;\n      if (docFreq > 1) {\n        if (docIn == null) {\n          // lazy init\n          docIn = startDocIn.clone();\n        }\n        docIn.seek(docTermStartFP);\n      }\n\n      doc = -1;\n      this.needsFreq = (flags & DocsEnum.FLAG_FREQS) != 0;\n      if (!indexHasFreq) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","bugFix":["99eb4a732d1a908f4636ace52928876136bf1896"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState,int).mjava","sourceNew":"    public PostingsEnum reset(Bits liveDocs, IntBlockTermState termState, int flags) throws IOException {\n      this.liveDocs = liveDocs;\n\n      docFreq = termState.docFreq;\n      totalTermFreq = indexHasFreq ? termState.totalTermFreq : docFreq;\n      docTermStartFP = termState.docStartFP;\n      skipOffset = termState.skipOffset;\n      singletonDocID = termState.singletonDocID;\n      if (docFreq > 1) {\n        if (docIn == null) {\n          // lazy init\n          docIn = startDocIn.clone();\n        }\n        docIn.seek(docTermStartFP);\n      }\n\n      doc = -1;\n      this.needsFreq = (flags & PostingsEnum.FLAG_FREQS) != 0;\n      if (indexHasFreq == false || needsFreq == false) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState, int flags) throws IOException {\n      this.liveDocs = liveDocs;\n\n      docFreq = termState.docFreq;\n      totalTermFreq = indexHasFreq ? termState.totalTermFreq : docFreq;\n      docTermStartFP = termState.docStartFP;\n      skipOffset = termState.skipOffset;\n      singletonDocID = termState.singletonDocID;\n      if (docFreq > 1) {\n        if (docIn == null) {\n          // lazy init\n          docIn = startDocIn.clone();\n        }\n        docIn.seek(docTermStartFP);\n      }\n\n      doc = -1;\n      this.needsFreq = (flags & DocsEnum.FLAG_FREQS) != 0;\n      if (indexHasFreq == false || needsFreq == false) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState,int).mjava","sourceNew":"    public PostingsEnum reset(Bits liveDocs, IntBlockTermState termState, int flags) throws IOException {\n      this.liveDocs = liveDocs;\n\n      docFreq = termState.docFreq;\n      totalTermFreq = indexHasFreq ? termState.totalTermFreq : docFreq;\n      docTermStartFP = termState.docStartFP;\n      skipOffset = termState.skipOffset;\n      singletonDocID = termState.singletonDocID;\n      if (docFreq > 1) {\n        if (docIn == null) {\n          // lazy init\n          docIn = startDocIn.clone();\n        }\n        docIn.seek(docTermStartFP);\n      }\n\n      doc = -1;\n      this.needsFreq = (flags & PostingsEnum.FREQS) != 0;\n      if (indexHasFreq == false || needsFreq == false) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":"    public PostingsEnum reset(Bits liveDocs, IntBlockTermState termState, int flags) throws IOException {\n      this.liveDocs = liveDocs;\n\n      docFreq = termState.docFreq;\n      totalTermFreq = indexHasFreq ? termState.totalTermFreq : docFreq;\n      docTermStartFP = termState.docStartFP;\n      skipOffset = termState.skipOffset;\n      singletonDocID = termState.singletonDocID;\n      if (docFreq > 1) {\n        if (docIn == null) {\n          // lazy init\n          docIn = startDocIn.clone();\n        }\n        docIn.seek(docTermStartFP);\n      }\n\n      doc = -1;\n      this.needsFreq = (flags & PostingsEnum.FLAG_FREQS) != 0;\n      if (indexHasFreq == false || needsFreq == false) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9023c2bf8056230665bace786651c0716d78d31","date":1424736578,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState,int).mjava","sourceNew":"    public PostingsEnum reset(Bits liveDocs, IntBlockTermState termState, int flags) throws IOException {\n      this.liveDocs = liveDocs;\n\n      docFreq = termState.docFreq;\n      totalTermFreq = indexHasFreq ? termState.totalTermFreq : docFreq;\n      docTermStartFP = termState.docStartFP;\n      skipOffset = termState.skipOffset;\n      singletonDocID = termState.singletonDocID;\n      if (docFreq > 1) {\n        if (docIn == null) {\n          // lazy init\n          docIn = startDocIn.clone();\n        }\n        docIn.seek(docTermStartFP);\n      }\n\n      doc = -1;\n      this.needsFreq = PostingsEnum.featureRequested(flags, PostingsEnum.FREQS);\n      if (indexHasFreq == false || needsFreq == false) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":"    public PostingsEnum reset(Bits liveDocs, IntBlockTermState termState, int flags) throws IOException {\n      this.liveDocs = liveDocs;\n\n      docFreq = termState.docFreq;\n      totalTermFreq = indexHasFreq ? termState.totalTermFreq : docFreq;\n      docTermStartFP = termState.docStartFP;\n      skipOffset = termState.skipOffset;\n      singletonDocID = termState.singletonDocID;\n      if (docFreq > 1) {\n        if (docIn == null) {\n          // lazy init\n          docIn = startDocIn.clone();\n        }\n        docIn.seek(docTermStartFP);\n      }\n\n      doc = -1;\n      this.needsFreq = (flags & PostingsEnum.FREQS) != 0;\n      if (indexHasFreq == false || needsFreq == false) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockDocsEnum#reset(IntBlockTermState,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState,int).mjava","sourceNew":"    public PostingsEnum reset(IntBlockTermState termState, int flags) throws IOException {\n      docFreq = termState.docFreq;\n      totalTermFreq = indexHasFreq ? termState.totalTermFreq : docFreq;\n      docTermStartFP = termState.docStartFP;\n      skipOffset = termState.skipOffset;\n      singletonDocID = termState.singletonDocID;\n      if (docFreq > 1) {\n        if (docIn == null) {\n          // lazy init\n          docIn = startDocIn.clone();\n        }\n        docIn.seek(docTermStartFP);\n      }\n\n      doc = -1;\n      this.needsFreq = PostingsEnum.featureRequested(flags, PostingsEnum.FREQS);\n      if (indexHasFreq == false || needsFreq == false) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":"    public PostingsEnum reset(Bits liveDocs, IntBlockTermState termState, int flags) throws IOException {\n      this.liveDocs = liveDocs;\n\n      docFreq = termState.docFreq;\n      totalTermFreq = indexHasFreq ? termState.totalTermFreq : docFreq;\n      docTermStartFP = termState.docStartFP;\n      skipOffset = termState.skipOffset;\n      singletonDocID = termState.singletonDocID;\n      if (docFreq > 1) {\n        if (docIn == null) {\n          // lazy init\n          docIn = startDocIn.clone();\n        }\n        docIn.seek(docTermStartFP);\n      }\n\n      doc = -1;\n      this.needsFreq = PostingsEnum.featureRequested(flags, PostingsEnum.FREQS);\n      if (indexHasFreq == false || needsFreq == false) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["a9023c2bf8056230665bace786651c0716d78d31"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"99eb4a732d1a908f4636ace52928876136bf1896":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99eb4a732d1a908f4636ace52928876136bf1896"],"a9023c2bf8056230665bace786651c0716d78d31":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"51f5280f31484820499077f41fcdfe92d527d9dc":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["a9023c2bf8056230665bace786651c0716d78d31"],"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"a9023c2bf8056230665bace786651c0716d78d31":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}