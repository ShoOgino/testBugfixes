{"path":"solr/core/src/test/org/apache/solr/schema/TestManagedSchema#testAddFieldThenReload().mjava","commits":[{"id":"c84120abb208489fa02365a639464653d793cbb3","date":1376338597,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestManagedSchema#testAddFieldThenReload().mjava","pathOld":"/dev/null","sourceNew":"  public void testAddFieldThenReload() throws Exception {\n    deleteCore();\n    File managedSchemaFile = new File(tmpConfDir, \"managed-schema\");\n    assertTrue(managedSchemaFile.delete()); // Delete managed-schema so it won't block parsing a new schema\n    initCore(\"solrconfig-mutable-managed-schema.xml\", \"schema-one-field-no-dynamic-field.xml\", tmpSolrHome.getPath());\n\n    String fieldName = \"new_text_field\";\n    assertNull(\"Field '\" + fieldName + \"' is present in the schema\",\n        h.getCore().getLatestSchema().getFieldOrNull(fieldName));\n\n    Map<String,Object> options = new HashMap<String,Object>();\n    IndexSchema oldSchema = h.getCore().getLatestSchema();\n    String fieldType = \"text\";\n    SchemaField newField = oldSchema.newField(fieldName, fieldType, options);\n    IndexSchema newSchema = oldSchema.addField(newField);\n    h.getCore().setLatestSchema(newSchema);\n\n    h.reload();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestManagedSchema#testAddFieldThenReload().mjava","pathOld":"/dev/null","sourceNew":"  public void testAddFieldThenReload() throws Exception {\n    deleteCore();\n    File managedSchemaFile = new File(tmpConfDir, \"managed-schema\");\n    assertTrue(managedSchemaFile.delete()); // Delete managed-schema so it won't block parsing a new schema\n    initCore(\"solrconfig-mutable-managed-schema.xml\", \"schema-one-field-no-dynamic-field.xml\", tmpSolrHome.getPath());\n\n    String fieldName = \"new_text_field\";\n    assertNull(\"Field '\" + fieldName + \"' is present in the schema\",\n        h.getCore().getLatestSchema().getFieldOrNull(fieldName));\n\n    Map<String,Object> options = new HashMap<String,Object>();\n    IndexSchema oldSchema = h.getCore().getLatestSchema();\n    String fieldType = \"text\";\n    SchemaField newField = oldSchema.newField(fieldName, fieldType, options);\n    IndexSchema newSchema = oldSchema.addField(newField);\n    h.getCore().setLatestSchema(newSchema);\n\n    h.reload();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e0d5dcd5bcba76f5b672a85f179329a4969f456","date":1376419046,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestManagedSchema#testAddFieldThenReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestManagedSchema#testAddFieldThenReload().mjava","sourceNew":"  public void testAddFieldThenReload() throws Exception {\n    deleteCore();\n    File managedSchemaFile = new File(tmpConfDir, \"managed-schema\");\n    assertTrue(managedSchemaFile.delete()); // Delete managed-schema so it won't block parsing a new schema\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    initCore(\"solrconfig-managed-schema.xml\", \"schema-one-field-no-dynamic-field.xml\", tmpSolrHome.getPath());\n\n    String fieldName = \"new_text_field\";\n    assertNull(\"Field '\" + fieldName + \"' is present in the schema\",\n        h.getCore().getLatestSchema().getFieldOrNull(fieldName));\n\n    Map<String,Object> options = new HashMap<String,Object>();\n    IndexSchema oldSchema = h.getCore().getLatestSchema();\n    String fieldType = \"text\";\n    SchemaField newField = oldSchema.newField(fieldName, fieldType, options);\n    IndexSchema newSchema = oldSchema.addField(newField);\n    h.getCore().setLatestSchema(newSchema);\n\n    h.reload();\n  }\n\n","sourceOld":"  public void testAddFieldThenReload() throws Exception {\n    deleteCore();\n    File managedSchemaFile = new File(tmpConfDir, \"managed-schema\");\n    assertTrue(managedSchemaFile.delete()); // Delete managed-schema so it won't block parsing a new schema\n    initCore(\"solrconfig-mutable-managed-schema.xml\", \"schema-one-field-no-dynamic-field.xml\", tmpSolrHome.getPath());\n\n    String fieldName = \"new_text_field\";\n    assertNull(\"Field '\" + fieldName + \"' is present in the schema\",\n        h.getCore().getLatestSchema().getFieldOrNull(fieldName));\n\n    Map<String,Object> options = new HashMap<String,Object>();\n    IndexSchema oldSchema = h.getCore().getLatestSchema();\n    String fieldType = \"text\";\n    SchemaField newField = oldSchema.newField(fieldName, fieldType, options);\n    IndexSchema newSchema = oldSchema.addField(newField);\n    h.getCore().setLatestSchema(newSchema);\n\n    h.reload();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestManagedSchema#testAddFieldThenReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestManagedSchema#testAddFieldThenReload().mjava","sourceNew":"  public void testAddFieldThenReload() throws Exception {\n    deleteCore();\n    File managedSchemaFile = new File(tmpConfDir, \"managed-schema\");\n    assertTrue(managedSchemaFile.delete()); // Delete managed-schema so it won't block parsing a new schema\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    initCore(\"solrconfig-managed-schema.xml\", \"schema-one-field-no-dynamic-field.xml\", tmpSolrHome.getPath());\n\n    String fieldName = \"new_text_field\";\n    assertNull(\"Field '\" + fieldName + \"' is present in the schema\",\n        h.getCore().getLatestSchema().getFieldOrNull(fieldName));\n\n    Map<String,Object> options = new HashMap<String,Object>();\n    IndexSchema oldSchema = h.getCore().getLatestSchema();\n    String fieldType = \"text\";\n    SchemaField newField = oldSchema.newField(fieldName, fieldType, options);\n    IndexSchema newSchema = oldSchema.addField(newField);\n    h.getCore().setLatestSchema(newSchema);\n\n    h.reload();\n  }\n\n","sourceOld":"  public void testAddFieldThenReload() throws Exception {\n    deleteCore();\n    File managedSchemaFile = new File(tmpConfDir, \"managed-schema\");\n    assertTrue(managedSchemaFile.delete()); // Delete managed-schema so it won't block parsing a new schema\n    initCore(\"solrconfig-mutable-managed-schema.xml\", \"schema-one-field-no-dynamic-field.xml\", tmpSolrHome.getPath());\n\n    String fieldName = \"new_text_field\";\n    assertNull(\"Field '\" + fieldName + \"' is present in the schema\",\n        h.getCore().getLatestSchema().getFieldOrNull(fieldName));\n\n    Map<String,Object> options = new HashMap<String,Object>();\n    IndexSchema oldSchema = h.getCore().getLatestSchema();\n    String fieldType = \"text\";\n    SchemaField newField = oldSchema.newField(fieldName, fieldType, options);\n    IndexSchema newSchema = oldSchema.addField(newField);\n    h.getCore().setLatestSchema(newSchema);\n\n    h.reload();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestManagedSchema#testAddFieldThenReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestManagedSchema#testAddFieldThenReload().mjava","sourceNew":"  public void testAddFieldThenReload() throws Exception {\n    deleteCore();\n    File managedSchemaFile = new File(tmpConfDir, \"managed-schema\");\n    assertTrue(managedSchemaFile.delete()); // Delete managed-schema so it won't block parsing a new schema\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    initCore(\"solrconfig-managed-schema.xml\", \"schema-one-field-no-dynamic-field.xml\", tmpSolrHome.getPath());\n\n    String fieldName = \"new_text_field\";\n    assertNull(\"Field '\" + fieldName + \"' is present in the schema\",\n        h.getCore().getLatestSchema().getFieldOrNull(fieldName));\n\n    Map<String,Object> options = new HashMap<>();\n    IndexSchema oldSchema = h.getCore().getLatestSchema();\n    String fieldType = \"text\";\n    SchemaField newField = oldSchema.newField(fieldName, fieldType, options);\n    IndexSchema newSchema = oldSchema.addField(newField);\n    h.getCore().setLatestSchema(newSchema);\n\n    h.reload();\n  }\n\n","sourceOld":"  public void testAddFieldThenReload() throws Exception {\n    deleteCore();\n    File managedSchemaFile = new File(tmpConfDir, \"managed-schema\");\n    assertTrue(managedSchemaFile.delete()); // Delete managed-schema so it won't block parsing a new schema\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    initCore(\"solrconfig-managed-schema.xml\", \"schema-one-field-no-dynamic-field.xml\", tmpSolrHome.getPath());\n\n    String fieldName = \"new_text_field\";\n    assertNull(\"Field '\" + fieldName + \"' is present in the schema\",\n        h.getCore().getLatestSchema().getFieldOrNull(fieldName));\n\n    Map<String,Object> options = new HashMap<String,Object>();\n    IndexSchema oldSchema = h.getCore().getLatestSchema();\n    String fieldType = \"text\";\n    SchemaField newField = oldSchema.newField(fieldName, fieldType, options);\n    IndexSchema newSchema = oldSchema.addField(newField);\n    h.getCore().setLatestSchema(newSchema);\n\n    h.reload();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbc3688252d4a8045d69a164236b2cf87b721f17","date":1409846185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestManagedSchema#testAddFieldThenReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestManagedSchema#testAddFieldThenReload().mjava","sourceNew":"  public void testAddFieldThenReload() throws Exception {\n    deleteCore();\n    File managedSchemaFile = new File(tmpConfDir, \"managed-schema\");\n    Files.delete(managedSchemaFile.toPath()); // Delete managed-schema so it won't block parsing a new schema\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    initCore(\"solrconfig-managed-schema.xml\", \"schema-one-field-no-dynamic-field.xml\", tmpSolrHome.getPath());\n\n    String fieldName = \"new_text_field\";\n    assertNull(\"Field '\" + fieldName + \"' is present in the schema\",\n        h.getCore().getLatestSchema().getFieldOrNull(fieldName));\n\n    Map<String,Object> options = new HashMap<>();\n    IndexSchema oldSchema = h.getCore().getLatestSchema();\n    String fieldType = \"text\";\n    SchemaField newField = oldSchema.newField(fieldName, fieldType, options);\n    IndexSchema newSchema = oldSchema.addField(newField);\n    h.getCore().setLatestSchema(newSchema);\n\n    h.reload();\n  }\n\n","sourceOld":"  public void testAddFieldThenReload() throws Exception {\n    deleteCore();\n    File managedSchemaFile = new File(tmpConfDir, \"managed-schema\");\n    assertTrue(managedSchemaFile.delete()); // Delete managed-schema so it won't block parsing a new schema\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    initCore(\"solrconfig-managed-schema.xml\", \"schema-one-field-no-dynamic-field.xml\", tmpSolrHome.getPath());\n\n    String fieldName = \"new_text_field\";\n    assertNull(\"Field '\" + fieldName + \"' is present in the schema\",\n        h.getCore().getLatestSchema().getFieldOrNull(fieldName));\n\n    Map<String,Object> options = new HashMap<>();\n    IndexSchema oldSchema = h.getCore().getLatestSchema();\n    String fieldType = \"text\";\n    SchemaField newField = oldSchema.newField(fieldName, fieldType, options);\n    IndexSchema newSchema = oldSchema.addField(newField);\n    h.getCore().setLatestSchema(newSchema);\n\n    h.reload();\n  }\n\n","bugFix":["c84120abb208489fa02365a639464653d793cbb3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1e0d5dcd5bcba76f5b672a85f179329a4969f456"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c84120abb208489fa02365a639464653d793cbb3"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","1e0d5dcd5bcba76f5b672a85f179329a4969f456"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e0d5dcd5bcba76f5b672a85f179329a4969f456":["c84120abb208489fa02365a639464653d793cbb3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"c84120abb208489fa02365a639464653d793cbb3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","c84120abb208489fa02365a639464653d793cbb3"],"1e0d5dcd5bcba76f5b672a85f179329a4969f456":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"c84120abb208489fa02365a639464653d793cbb3":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","1e0d5dcd5bcba76f5b672a85f179329a4969f456"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}