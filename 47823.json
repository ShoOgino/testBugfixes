{"path":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesUnstored().mjava","commits":[{"id":"084ac3d057e654193ccee4e8f65eab8bc24104a8","date":1346787217,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesUnstored().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocValuesUnstored() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwconfig);\n    for (int i = 0; i < 50; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"dv\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    DirectoryReader r = writer.getReader();\n    SlowCompositeReaderWrapper slow = new SlowCompositeReaderWrapper(r);\n    FieldInfos fi = slow.getFieldInfos();\n    FieldInfo dvInfo = fi.fieldInfo(\"dv\");\n    assertTrue(dvInfo.hasDocValues());\n    DocValues dv = slow.docValues(\"dv\");\n    Source source = dv.getDirectSource();\n    for (int i = 0; i < 50; i++) {\n      assertEquals(i, source.getInt(i));\n      StoredDocument d = slow.document(i);\n      // cannot use d.get(\"dv\") due to another bug!\n      assertNull(d.getField(\"dv\"));\n      assertEquals(Integer.toString(i), d.get(\"docId\"));\n    }\n    slow.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55d38708477d49511977195bad066d9ced001005","date":1353348143,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesUnstored().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesUnstored().mjava","sourceNew":"  public void testDocValuesUnstored() throws IOException {\n    //nocommit convert!\n    Directory dir = newDirectory();\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwconfig);\n    for (int i = 0; i < 50; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"dv\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    DirectoryReader r = writer.getReader();\n    SlowCompositeReaderWrapper slow = new SlowCompositeReaderWrapper(r);\n    FieldInfos fi = slow.getFieldInfos();\n    FieldInfo dvInfo = fi.fieldInfo(\"dv\");\n    assertTrue(dvInfo.hasDocValues());\n    DocValues dv = slow.docValues(\"dv\");\n    Source source = dv.getDirectSource();\n    for (int i = 0; i < 50; i++) {\n      assertEquals(i, source.getInt(i));\n      StoredDocument d = slow.document(i);\n      // cannot use d.get(\"dv\") due to another bug!\n      assertNull(d.getField(\"dv\"));\n      assertEquals(Integer.toString(i), d.get(\"docId\"));\n    }\n    slow.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesUnstored() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwconfig);\n    for (int i = 0; i < 50; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"dv\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    DirectoryReader r = writer.getReader();\n    SlowCompositeReaderWrapper slow = new SlowCompositeReaderWrapper(r);\n    FieldInfos fi = slow.getFieldInfos();\n    FieldInfo dvInfo = fi.fieldInfo(\"dv\");\n    assertTrue(dvInfo.hasDocValues());\n    DocValues dv = slow.docValues(\"dv\");\n    Source source = dv.getDirectSource();\n    for (int i = 0; i < 50; i++) {\n      assertEquals(i, source.getInt(i));\n      StoredDocument d = slow.document(i);\n      // cannot use d.get(\"dv\") due to another bug!\n      assertNull(d.getField(\"dv\"));\n      assertEquals(Integer.toString(i), d.get(\"docId\"));\n    }\n    slow.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddadc5a8439c906a65bfba5ce15166b5d5b58d82","date":1358287870,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesUnstored().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesUnstored().mjava","sourceNew":"  public void testDocValuesUnstored() throws IOException {\n    //nocommit convert!\n    Directory dir = newDirectory();\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwconfig);\n    for (int i = 0; i < 50; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"dv\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    DirectoryReader r = writer.getReader();\n    SlowCompositeReaderWrapper slow = new SlowCompositeReaderWrapper(r);\n    FieldInfos fi = slow.getFieldInfos();\n    FieldInfo dvInfo = fi.fieldInfo(\"dv\");\n    assertTrue(dvInfo.hasDocValues());\n    NumericDocValues dv = slow.getNumericDocValues(\"dv\");\n    for (int i = 0; i < 50; i++) {\n      assertEquals(i, dv.get(i));\n      StoredDocument d = slow.document(i);\n      // cannot use d.get(\"dv\") due to another bug!\n      assertNull(d.getField(\"dv\"));\n      assertEquals(Integer.toString(i), d.get(\"docId\"));\n    }\n    slow.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesUnstored() throws IOException {\n    //nocommit convert!\n    Directory dir = newDirectory();\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwconfig);\n    for (int i = 0; i < 50; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"dv\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    DirectoryReader r = writer.getReader();\n    SlowCompositeReaderWrapper slow = new SlowCompositeReaderWrapper(r);\n    FieldInfos fi = slow.getFieldInfos();\n    FieldInfo dvInfo = fi.fieldInfo(\"dv\");\n    assertTrue(dvInfo.hasDocValues());\n    DocValues dv = slow.docValues(\"dv\");\n    Source source = dv.getDirectSource();\n    for (int i = 0; i < 50; i++) {\n      assertEquals(i, source.getInt(i));\n      StoredDocument d = slow.document(i);\n      // cannot use d.get(\"dv\") due to another bug!\n      assertNull(d.getField(\"dv\"));\n      assertEquals(Integer.toString(i), d.get(\"docId\"));\n    }\n    slow.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"423d89a2b3cc419b647c07c2b3fdbc54311d07f9","date":1358836612,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesUnstored().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesUnstored().mjava","sourceNew":"  public void testDocValuesUnstored() throws IOException {\n    //nocommit convert!\n    Directory dir = newDirectory();\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwconfig);\n    for (int i = 0; i < 50; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"dv\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    DirectoryReader r = writer.getReader();\n    SlowCompositeReaderWrapper slow = new SlowCompositeReaderWrapper(r);\n    FieldInfos fi = slow.getFieldInfos();\n    FieldInfo dvInfo = fi.fieldInfo(\"dv\");\n    assertTrue(dvInfo.hasDocValues());\n    NumericDocValues dv = slow.getNumericDocValues(\"dv\");\n    for (int i = 0; i < 50; i++) {\n      assertEquals(i, dv.get(i));\n      StoredDocument d = slow.document(i);\n      // cannot use d.get(\"dv\") due to another bug!\n      assertNull(d.getField(\"dv\"));\n      assertEquals(Integer.toString(i), d.get(\"docId\"));\n    }\n    slow.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesUnstored() throws IOException {\n    //nocommit convert!\n    Directory dir = newDirectory();\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwconfig);\n    for (int i = 0; i < 50; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"dv\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    DirectoryReader r = writer.getReader();\n    SlowCompositeReaderWrapper slow = new SlowCompositeReaderWrapper(r);\n    FieldInfos fi = slow.getFieldInfos();\n    FieldInfo dvInfo = fi.fieldInfo(\"dv\");\n    assertTrue(dvInfo.hasDocValues());\n    NumericDocValues dv = slow.getNumericDocValues(\"dv\");\n    for (int i = 0; i < 50; i++) {\n      assertEquals(i, dv.get(i));\n      StoredDocument d = slow.document(i);\n      // cannot use d.get(\"dv\") due to another bug!\n      assertNull(d.getField(\"dv\"));\n      assertEquals(Integer.toString(i), d.get(\"docId\"));\n    }\n    slow.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"59d00acb12c9809438e21de7c24f016356973d46","date":1359349254,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesUnstored().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesUnstored().mjava","sourceNew":"  public void testDocValuesUnstored() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwconfig);\n    for (int i = 0; i < 50; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"dv\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    DirectoryReader r = writer.getReader();\n    SlowCompositeReaderWrapper slow = new SlowCompositeReaderWrapper(r);\n    FieldInfos fi = slow.getFieldInfos();\n    FieldInfo dvInfo = fi.fieldInfo(\"dv\");\n    assertTrue(dvInfo.hasDocValues());\n    NumericDocValues dv = slow.getNumericDocValues(\"dv\");\n    for (int i = 0; i < 50; i++) {\n      assertEquals(i, dv.get(i));\n      StoredDocument d = slow.document(i);\n      // cannot use d.get(\"dv\") due to another bug!\n      assertNull(d.getField(\"dv\"));\n      assertEquals(Integer.toString(i), d.get(\"docId\"));\n    }\n    slow.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesUnstored() throws IOException {\n    //nocommit convert!\n    Directory dir = newDirectory();\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwconfig);\n    for (int i = 0; i < 50; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"dv\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    DirectoryReader r = writer.getReader();\n    SlowCompositeReaderWrapper slow = new SlowCompositeReaderWrapper(r);\n    FieldInfos fi = slow.getFieldInfos();\n    FieldInfo dvInfo = fi.fieldInfo(\"dv\");\n    assertTrue(dvInfo.hasDocValues());\n    NumericDocValues dv = slow.getNumericDocValues(\"dv\");\n    for (int i = 0; i < 50; i++) {\n      assertEquals(i, dv.get(i));\n      StoredDocument d = slow.document(i);\n      // cannot use d.get(\"dv\") due to another bug!\n      assertNull(d.getField(\"dv\"));\n      assertEquals(Integer.toString(i), d.get(\"docId\"));\n    }\n    slow.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesUnstored().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesUnstored().mjava","sourceNew":"  public void testDocValuesUnstored() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwconfig);\n    for (int i = 0; i < 50; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"dv\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    DirectoryReader r = writer.getReader();\n    SlowCompositeReaderWrapper slow = new SlowCompositeReaderWrapper(r);\n    FieldInfos fi = slow.getFieldInfos();\n    FieldInfo dvInfo = fi.fieldInfo(\"dv\");\n    assertTrue(dvInfo.hasDocValues());\n    NumericDocValues dv = slow.getNumericDocValues(\"dv\");\n    for (int i = 0; i < 50; i++) {\n      assertEquals(i, dv.get(i));\n      StoredDocument d = slow.document(i);\n      // cannot use d.get(\"dv\") due to another bug!\n      assertNull(d.getField(\"dv\"));\n      assertEquals(Integer.toString(i), d.get(\"docId\"));\n    }\n    slow.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesUnstored() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwconfig);\n    for (int i = 0; i < 50; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"dv\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    DirectoryReader r = writer.getReader();\n    SlowCompositeReaderWrapper slow = new SlowCompositeReaderWrapper(r);\n    FieldInfos fi = slow.getFieldInfos();\n    FieldInfo dvInfo = fi.fieldInfo(\"dv\");\n    assertTrue(dvInfo.hasDocValues());\n    DocValues dv = slow.docValues(\"dv\");\n    Source source = dv.getDirectSource();\n    for (int i = 0; i < 50; i++) {\n      assertEquals(i, source.getInt(i));\n      StoredDocument d = slow.document(i);\n      // cannot use d.get(\"dv\") due to another bug!\n      assertNull(d.getField(\"dv\"));\n      assertEquals(Integer.toString(i), d.get(\"docId\"));\n    }\n    slow.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":["084ac3d057e654193ccee4e8f65eab8bc24104a8"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392","date":1377503666,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesUnstored().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesUnstored().mjava","sourceNew":"  public void testDocValuesUnstored() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwconfig);\n    for (int i = 0; i < 50; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"dv\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    DirectoryReader r = writer.getReader();\n    AtomicReader slow = SlowCompositeReaderWrapper.wrap(r);\n    FieldInfos fi = slow.getFieldInfos();\n    FieldInfo dvInfo = fi.fieldInfo(\"dv\");\n    assertTrue(dvInfo.hasDocValues());\n    NumericDocValues dv = slow.getNumericDocValues(\"dv\");\n    for (int i = 0; i < 50; i++) {\n      assertEquals(i, dv.get(i));\n      StoredDocument d = slow.document(i);\n      // cannot use d.get(\"dv\") due to another bug!\n      assertNull(d.getField(\"dv\"));\n      assertEquals(Integer.toString(i), d.get(\"docId\"));\n    }\n    slow.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesUnstored() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwconfig);\n    for (int i = 0; i < 50; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"dv\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    DirectoryReader r = writer.getReader();\n    SlowCompositeReaderWrapper slow = new SlowCompositeReaderWrapper(r);\n    FieldInfos fi = slow.getFieldInfos();\n    FieldInfo dvInfo = fi.fieldInfo(\"dv\");\n    assertTrue(dvInfo.hasDocValues());\n    NumericDocValues dv = slow.getNumericDocValues(\"dv\");\n    for (int i = 0; i < 50; i++) {\n      assertEquals(i, dv.get(i));\n      StoredDocument d = slow.document(i);\n      // cannot use d.get(\"dv\") due to another bug!\n      assertNull(d.getField(\"dv\"));\n      assertEquals(Integer.toString(i), d.get(\"docId\"));\n    }\n    slow.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesUnstored().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesUnstored().mjava","sourceNew":"  public void testDocValuesUnstored() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwconfig);\n    for (int i = 0; i < 50; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"dv\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    DirectoryReader r = writer.getReader();\n    AtomicReader slow = SlowCompositeReaderWrapper.wrap(r);\n    FieldInfos fi = slow.getFieldInfos();\n    FieldInfo dvInfo = fi.fieldInfo(\"dv\");\n    assertTrue(dvInfo.hasDocValues());\n    NumericDocValues dv = slow.getNumericDocValues(\"dv\");\n    for (int i = 0; i < 50; i++) {\n      assertEquals(i, dv.get(i));\n      StoredDocument d = slow.document(i);\n      // cannot use d.get(\"dv\") due to another bug!\n      assertNull(d.getField(\"dv\"));\n      assertEquals(Integer.toString(i), d.get(\"docId\"));\n    }\n    slow.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesUnstored() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwconfig);\n    for (int i = 0; i < 50; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"dv\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    DirectoryReader r = writer.getReader();\n    SlowCompositeReaderWrapper slow = new SlowCompositeReaderWrapper(r);\n    FieldInfos fi = slow.getFieldInfos();\n    FieldInfo dvInfo = fi.fieldInfo(\"dv\");\n    assertTrue(dvInfo.hasDocValues());\n    NumericDocValues dv = slow.getNumericDocValues(\"dv\");\n    for (int i = 0; i < 50; i++) {\n      assertEquals(i, dv.get(i));\n      StoredDocument d = slow.document(i);\n      // cannot use d.get(\"dv\") due to another bug!\n      assertNull(d.getField(\"dv\"));\n      assertEquals(Integer.toString(i), d.get(\"docId\"));\n    }\n    slow.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesUnstored().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesUnstored().mjava","sourceNew":"  public void testDocValuesUnstored() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwconfig);\n    for (int i = 0; i < 50; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"dv\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    DirectoryReader r = writer.getReader();\n    AtomicReader slow = SlowCompositeReaderWrapper.wrap(r);\n    FieldInfos fi = slow.getFieldInfos();\n    FieldInfo dvInfo = fi.fieldInfo(\"dv\");\n    assertTrue(dvInfo.hasDocValues());\n    NumericDocValues dv = slow.getNumericDocValues(\"dv\");\n    for (int i = 0; i < 50; i++) {\n      assertEquals(i, dv.get(i));\n      StoredDocument d = slow.document(i);\n      // cannot use d.get(\"dv\") due to another bug!\n      assertNull(d.getField(\"dv\"));\n      assertEquals(Integer.toString(i), d.get(\"docId\"));\n    }\n    slow.close();\n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesUnstored() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwconfig);\n    for (int i = 0; i < 50; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"dv\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    DirectoryReader r = writer.getReader();\n    AtomicReader slow = SlowCompositeReaderWrapper.wrap(r);\n    FieldInfos fi = slow.getFieldInfos();\n    FieldInfo dvInfo = fi.fieldInfo(\"dv\");\n    assertTrue(dvInfo.hasDocValues());\n    NumericDocValues dv = slow.getNumericDocValues(\"dv\");\n    for (int i = 0; i < 50; i++) {\n      assertEquals(i, dv.get(i));\n      StoredDocument d = slow.document(i);\n      // cannot use d.get(\"dv\") due to another bug!\n      assertNull(d.getField(\"dv\"));\n      assertEquals(Integer.toString(i), d.get(\"docId\"));\n    }\n    slow.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesUnstored().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesUnstored().mjava","sourceNew":"  public void testDocValuesUnstored() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwconfig = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwconfig);\n    for (int i = 0; i < 50; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"dv\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    DirectoryReader r = writer.getReader();\n    AtomicReader slow = SlowCompositeReaderWrapper.wrap(r);\n    FieldInfos fi = slow.getFieldInfos();\n    FieldInfo dvInfo = fi.fieldInfo(\"dv\");\n    assertTrue(dvInfo.hasDocValues());\n    NumericDocValues dv = slow.getNumericDocValues(\"dv\");\n    for (int i = 0; i < 50; i++) {\n      assertEquals(i, dv.get(i));\n      StoredDocument d = slow.document(i);\n      // cannot use d.get(\"dv\") due to another bug!\n      assertNull(d.getField(\"dv\"));\n      assertEquals(Integer.toString(i), d.get(\"docId\"));\n    }\n    slow.close();\n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesUnstored() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwconfig);\n    for (int i = 0; i < 50; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"dv\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    DirectoryReader r = writer.getReader();\n    AtomicReader slow = SlowCompositeReaderWrapper.wrap(r);\n    FieldInfos fi = slow.getFieldInfos();\n    FieldInfo dvInfo = fi.fieldInfo(\"dv\");\n    assertTrue(dvInfo.hasDocValues());\n    NumericDocValues dv = slow.getNumericDocValues(\"dv\");\n    for (int i = 0; i < 50; i++) {\n      assertEquals(i, dv.get(i));\n      StoredDocument d = slow.document(i);\n      // cannot use d.get(\"dv\") due to another bug!\n      assertNull(d.getField(\"dv\"));\n      assertEquals(Integer.toString(i), d.get(\"docId\"));\n    }\n    slow.close();\n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesUnstored().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesUnstored().mjava","sourceNew":"  public void testDocValuesUnstored() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwconfig = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwconfig);\n    for (int i = 0; i < 50; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"dv\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    DirectoryReader r = writer.getReader();\n    AtomicReader slow = SlowCompositeReaderWrapper.wrap(r);\n    FieldInfos fi = slow.getFieldInfos();\n    FieldInfo dvInfo = fi.fieldInfo(\"dv\");\n    assertTrue(dvInfo.hasDocValues());\n    NumericDocValues dv = slow.getNumericDocValues(\"dv\");\n    for (int i = 0; i < 50; i++) {\n      assertEquals(i, dv.get(i));\n      StoredDocument d = slow.document(i);\n      // cannot use d.get(\"dv\") due to another bug!\n      assertNull(d.getField(\"dv\"));\n      assertEquals(Integer.toString(i), d.get(\"docId\"));\n    }\n    slow.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesUnstored() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwconfig = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwconfig);\n    for (int i = 0; i < 50; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"dv\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    DirectoryReader r = writer.getReader();\n    AtomicReader slow = SlowCompositeReaderWrapper.wrap(r);\n    FieldInfos fi = slow.getFieldInfos();\n    FieldInfo dvInfo = fi.fieldInfo(\"dv\");\n    assertTrue(dvInfo.hasDocValues());\n    NumericDocValues dv = slow.getNumericDocValues(\"dv\");\n    for (int i = 0; i < 50; i++) {\n      assertEquals(i, dv.get(i));\n      StoredDocument d = slow.document(i);\n      // cannot use d.get(\"dv\") due to another bug!\n      assertNull(d.getField(\"dv\"));\n      assertEquals(Integer.toString(i), d.get(\"docId\"));\n    }\n    slow.close();\n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesUnstored().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesUnstored().mjava","sourceNew":"  public void testDocValuesUnstored() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwconfig = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwconfig);\n    for (int i = 0; i < 50; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"dv\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    DirectoryReader r = writer.getReader();\n    LeafReader slow = SlowCompositeReaderWrapper.wrap(r);\n    FieldInfos fi = slow.getFieldInfos();\n    FieldInfo dvInfo = fi.fieldInfo(\"dv\");\n    assertTrue(dvInfo.hasDocValues());\n    NumericDocValues dv = slow.getNumericDocValues(\"dv\");\n    for (int i = 0; i < 50; i++) {\n      assertEquals(i, dv.get(i));\n      StoredDocument d = slow.document(i);\n      // cannot use d.get(\"dv\") due to another bug!\n      assertNull(d.getField(\"dv\"));\n      assertEquals(Integer.toString(i), d.get(\"docId\"));\n    }\n    slow.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesUnstored() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwconfig = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwconfig);\n    for (int i = 0; i < 50; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"dv\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    DirectoryReader r = writer.getReader();\n    AtomicReader slow = SlowCompositeReaderWrapper.wrap(r);\n    FieldInfos fi = slow.getFieldInfos();\n    FieldInfo dvInfo = fi.fieldInfo(\"dv\");\n    assertTrue(dvInfo.hasDocValues());\n    NumericDocValues dv = slow.getNumericDocValues(\"dv\");\n    for (int i = 0; i < 50; i++) {\n      assertEquals(i, dv.get(i));\n      StoredDocument d = slow.document(i);\n      // cannot use d.get(\"dv\") due to another bug!\n      assertNull(d.getField(\"dv\"));\n      assertEquals(Integer.toString(i), d.get(\"docId\"));\n    }\n    slow.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"556a4aab886d75371b2af129d87be3c2795cea76","date":1414954991,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesUnstored().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesUnstored().mjava","sourceNew":"  public void testDocValuesUnstored() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwconfig = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwconfig);\n    for (int i = 0; i < 50; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"dv\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    DirectoryReader r = writer.getReader();\n    LeafReader slow = SlowCompositeReaderWrapper.wrap(r);\n    FieldInfos fi = slow.getFieldInfos();\n    FieldInfo dvInfo = fi.fieldInfo(\"dv\");\n    assertTrue(dvInfo.getDocValuesType() != DocValuesType.NONE);\n    NumericDocValues dv = slow.getNumericDocValues(\"dv\");\n    for (int i = 0; i < 50; i++) {\n      assertEquals(i, dv.get(i));\n      StoredDocument d = slow.document(i);\n      // cannot use d.get(\"dv\") due to another bug!\n      assertNull(d.getField(\"dv\"));\n      assertEquals(Integer.toString(i), d.get(\"docId\"));\n    }\n    slow.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesUnstored() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwconfig = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwconfig);\n    for (int i = 0; i < 50; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"dv\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    DirectoryReader r = writer.getReader();\n    LeafReader slow = SlowCompositeReaderWrapper.wrap(r);\n    FieldInfos fi = slow.getFieldInfos();\n    FieldInfo dvInfo = fi.fieldInfo(\"dv\");\n    assertTrue(dvInfo.hasDocValues());\n    NumericDocValues dv = slow.getNumericDocValues(\"dv\");\n    for (int i = 0; i < 50; i++) {\n      assertEquals(i, dv.get(i));\n      StoredDocument d = slow.document(i);\n      // cannot use d.get(\"dv\") due to another bug!\n      assertNull(d.getField(\"dv\"));\n      assertEquals(Integer.toString(i), d.get(\"docId\"));\n    }\n    slow.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesUnstored().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesUnstored().mjava","sourceNew":"  public void testDocValuesUnstored() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwconfig = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwconfig);\n    for (int i = 0; i < 50; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"dv\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    DirectoryReader r = writer.getReader();\n    LeafReader slow = SlowCompositeReaderWrapper.wrap(r);\n    FieldInfos fi = slow.getFieldInfos();\n    FieldInfo dvInfo = fi.fieldInfo(\"dv\");\n    assertTrue(dvInfo.getDocValuesType() != DocValuesType.NONE);\n    NumericDocValues dv = slow.getNumericDocValues(\"dv\");\n    for (int i = 0; i < 50; i++) {\n      assertEquals(i, dv.get(i));\n      Document d = slow.document(i);\n      // cannot use d.get(\"dv\") due to another bug!\n      assertNull(d.getField(\"dv\"));\n      assertEquals(Integer.toString(i), d.get(\"docId\"));\n    }\n    slow.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesUnstored() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwconfig = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwconfig);\n    for (int i = 0; i < 50; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"dv\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    DirectoryReader r = writer.getReader();\n    LeafReader slow = SlowCompositeReaderWrapper.wrap(r);\n    FieldInfos fi = slow.getFieldInfos();\n    FieldInfo dvInfo = fi.fieldInfo(\"dv\");\n    assertTrue(dvInfo.getDocValuesType() != DocValuesType.NONE);\n    NumericDocValues dv = slow.getNumericDocValues(\"dv\");\n    for (int i = 0; i < 50; i++) {\n      assertEquals(i, dv.get(i));\n      StoredDocument d = slow.document(i);\n      // cannot use d.get(\"dv\") due to another bug!\n      assertNull(d.getField(\"dv\"));\n      assertEquals(Integer.toString(i), d.get(\"docId\"));\n    }\n    slow.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesUnstored().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesUnstored().mjava","sourceNew":"  public void testDocValuesUnstored() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwconfig = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwconfig);\n    for (int i = 0; i < 50; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"dv\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    DirectoryReader r = writer.getReader();\n    FieldInfos fi = MultiFields.getMergedFieldInfos(r);\n    FieldInfo dvInfo = fi.fieldInfo(\"dv\");\n    assertTrue(dvInfo.getDocValuesType() != DocValuesType.NONE);\n    NumericDocValues dv = MultiDocValues.getNumericValues(r, \"dv\");\n    for (int i = 0; i < 50; i++) {\n      assertEquals(i, dv.get(i));\n      Document d = r.document(i);\n      // cannot use d.get(\"dv\") due to another bug!\n      assertNull(d.getField(\"dv\"));\n      assertEquals(Integer.toString(i), d.get(\"docId\"));\n    }\n    r.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesUnstored() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwconfig = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwconfig);\n    for (int i = 0; i < 50; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"dv\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    DirectoryReader r = writer.getReader();\n    LeafReader slow = SlowCompositeReaderWrapper.wrap(r);\n    FieldInfos fi = slow.getFieldInfos();\n    FieldInfo dvInfo = fi.fieldInfo(\"dv\");\n    assertTrue(dvInfo.getDocValuesType() != DocValuesType.NONE);\n    NumericDocValues dv = slow.getNumericDocValues(\"dv\");\n    for (int i = 0; i < 50; i++) {\n      assertEquals(i, dv.get(i));\n      Document d = slow.document(i);\n      // cannot use d.get(\"dv\") due to another bug!\n      assertNull(d.getField(\"dv\"));\n      assertEquals(Integer.toString(i), d.get(\"docId\"));\n    }\n    slow.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87","ddadc5a8439c906a65bfba5ce15166b5d5b58d82","6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","084ac3d057e654193ccee4e8f65eab8bc24104a8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesUnstored().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesUnstored().mjava","sourceNew":"  public void testDocValuesUnstored() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwconfig = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwconfig);\n    for (int i = 0; i < 50; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"dv\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    DirectoryReader r = writer.getReader();\n    FieldInfos fi = MultiFields.getMergedFieldInfos(r);\n    FieldInfo dvInfo = fi.fieldInfo(\"dv\");\n    assertTrue(dvInfo.getDocValuesType() != DocValuesType.NONE);\n    NumericDocValues dv = MultiDocValues.getNumericValues(r, \"dv\");\n    for (int i = 0; i < 50; i++) {\n      assertEquals(i, dv.nextDoc());\n      assertEquals(i, dv.longValue());\n      Document d = r.document(i);\n      // cannot use d.get(\"dv\") due to another bug!\n      assertNull(d.getField(\"dv\"));\n      assertEquals(Integer.toString(i), d.get(\"docId\"));\n    }\n    r.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesUnstored() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwconfig = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwconfig);\n    for (int i = 0; i < 50; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"dv\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    DirectoryReader r = writer.getReader();\n    FieldInfos fi = MultiFields.getMergedFieldInfos(r);\n    FieldInfo dvInfo = fi.fieldInfo(\"dv\");\n    assertTrue(dvInfo.getDocValuesType() != DocValuesType.NONE);\n    NumericDocValues dv = MultiDocValues.getNumericValues(r, \"dv\");\n    for (int i = 0; i < 50; i++) {\n      assertEquals(i, dv.get(i));\n      Document d = r.document(i);\n      // cannot use d.get(\"dv\") due to another bug!\n      assertNull(d.getField(\"dv\"));\n      assertEquals(Integer.toString(i), d.get(\"docId\"));\n    }\n    r.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesUnstored().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesUnstored().mjava","sourceNew":"  public void testDocValuesUnstored() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwconfig = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwconfig);\n    for (int i = 0; i < 50; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"dv\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    DirectoryReader r = writer.getReader();\n    FieldInfos fi = MultiFields.getMergedFieldInfos(r);\n    FieldInfo dvInfo = fi.fieldInfo(\"dv\");\n    assertTrue(dvInfo.getDocValuesType() != DocValuesType.NONE);\n    NumericDocValues dv = MultiDocValues.getNumericValues(r, \"dv\");\n    for (int i = 0; i < 50; i++) {\n      assertEquals(i, dv.nextDoc());\n      assertEquals(i, dv.longValue());\n      Document d = r.document(i);\n      // cannot use d.get(\"dv\") due to another bug!\n      assertNull(d.getField(\"dv\"));\n      assertEquals(Integer.toString(i), d.get(\"docId\"));\n    }\n    r.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesUnstored() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwconfig = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwconfig);\n    for (int i = 0; i < 50; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"dv\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    DirectoryReader r = writer.getReader();\n    FieldInfos fi = MultiFields.getMergedFieldInfos(r);\n    FieldInfo dvInfo = fi.fieldInfo(\"dv\");\n    assertTrue(dvInfo.getDocValuesType() != DocValuesType.NONE);\n    NumericDocValues dv = MultiDocValues.getNumericValues(r, \"dv\");\n    for (int i = 0; i < 50; i++) {\n      assertEquals(i, dv.get(i));\n      Document d = r.document(i);\n      // cannot use d.get(\"dv\") due to another bug!\n      assertNull(d.getField(\"dv\"));\n      assertEquals(Integer.toString(i), d.get(\"docId\"));\n    }\n    r.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesUnstored().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesUnstored().mjava","sourceNew":"  public void testDocValuesUnstored() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwconfig = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwconfig);\n    for (int i = 0; i < 50; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"dv\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    DirectoryReader r = writer.getReader();\n    FieldInfos fi = MultiFields.getMergedFieldInfos(r);\n    FieldInfo dvInfo = fi.fieldInfo(\"dv\");\n    assertTrue(dvInfo.getDocValuesType() != DocValuesType.NONE);\n    NumericDocValues dv = MultiDocValues.getNumericValues(r, \"dv\");\n    for (int i = 0; i < 50; i++) {\n      assertEquals(i, dv.nextDoc());\n      assertEquals(i, dv.longValue());\n      Document d = r.document(i);\n      // cannot use d.get(\"dv\") due to another bug!\n      assertNull(d.getField(\"dv\"));\n      assertEquals(Integer.toString(i), d.get(\"docId\"));\n    }\n    r.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesUnstored() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwconfig = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwconfig);\n    for (int i = 0; i < 50; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"dv\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    DirectoryReader r = writer.getReader();\n    FieldInfos fi = MultiFields.getMergedFieldInfos(r);\n    FieldInfo dvInfo = fi.fieldInfo(\"dv\");\n    assertTrue(dvInfo.getDocValuesType() != DocValuesType.NONE);\n    NumericDocValues dv = MultiDocValues.getNumericValues(r, \"dv\");\n    for (int i = 0; i < 50; i++) {\n      assertEquals(i, dv.get(i));\n      Document d = r.document(i);\n      // cannot use d.get(\"dv\") due to another bug!\n      assertNull(d.getField(\"dv\"));\n      assertEquals(Integer.toString(i), d.get(\"docId\"));\n    }\n    r.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesUnstored().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesUnstored().mjava","sourceNew":"  public void testDocValuesUnstored() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwconfig = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwconfig);\n    for (int i = 0; i < 50; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"dv\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    DirectoryReader r = writer.getReader();\n    FieldInfos fi = FieldInfos.getMergedFieldInfos(r);\n    FieldInfo dvInfo = fi.fieldInfo(\"dv\");\n    assertTrue(dvInfo.getDocValuesType() != DocValuesType.NONE);\n    NumericDocValues dv = MultiDocValues.getNumericValues(r, \"dv\");\n    for (int i = 0; i < 50; i++) {\n      assertEquals(i, dv.nextDoc());\n      assertEquals(i, dv.longValue());\n      Document d = r.document(i);\n      // cannot use d.get(\"dv\") due to another bug!\n      assertNull(d.getField(\"dv\"));\n      assertEquals(Integer.toString(i), d.get(\"docId\"));\n    }\n    r.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesUnstored() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwconfig = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    IndexWriter writer = new IndexWriter(dir, iwconfig);\n    for (int i = 0; i < 50; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"dv\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    DirectoryReader r = writer.getReader();\n    FieldInfos fi = MultiFields.getMergedFieldInfos(r);\n    FieldInfo dvInfo = fi.fieldInfo(\"dv\");\n    assertTrue(dvInfo.getDocValuesType() != DocValuesType.NONE);\n    NumericDocValues dv = MultiDocValues.getNumericValues(r, \"dv\");\n    for (int i = 0; i < 50; i++) {\n      assertEquals(i, dv.nextDoc());\n      assertEquals(i, dv.longValue());\n      Document d = r.document(i);\n      // cannot use d.get(\"dv\") due to another bug!\n      assertNull(d.getField(\"dv\"));\n      assertEquals(Integer.toString(i), d.get(\"docId\"));\n    }\n    r.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59d00acb12c9809438e21de7c24f016356973d46":["423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["d4d69c535930b5cce125cff868d40f6373dc27d4","df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392"],"556a4aab886d75371b2af129d87be3c2795cea76":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["084ac3d057e654193ccee4e8f65eab8bc24104a8","59d00acb12c9809438e21de7c24f016356973d46"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["ddadc5a8439c906a65bfba5ce15166b5d5b58d82"],"ddadc5a8439c906a65bfba5ce15166b5d5b58d82":["55d38708477d49511977195bad066d9ced001005"],"55d38708477d49511977195bad066d9ced001005":["084ac3d057e654193ccee4e8f65eab8bc24104a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["556a4aab886d75371b2af129d87be3c2795cea76"],"084ac3d057e654193ccee4e8f65eab8bc24104a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"59d00acb12c9809438e21de7c24f016356973d46":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"556a4aab886d75371b2af129d87be3c2795cea76":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["556a4aab886d75371b2af129d87be3c2795cea76"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","04e775de416dd2d8067b10db1c8af975a1d5017e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["084ac3d057e654193ccee4e8f65eab8bc24104a8"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["59d00acb12c9809438e21de7c24f016356973d46"],"ddadc5a8439c906a65bfba5ce15166b5d5b58d82":["423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"55d38708477d49511977195bad066d9ced001005":["ddadc5a8439c906a65bfba5ce15166b5d5b58d82"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"084ac3d057e654193ccee4e8f65eab8bc24104a8":["d4d69c535930b5cce125cff868d40f6373dc27d4","55d38708477d49511977195bad066d9ced001005"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}