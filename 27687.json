{"path":"src/java/org/apache/lucene/index/FieldsReader.LazyField#binaryValue().mjava","commits":[{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader.LazyField#binaryValue().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * The value of the field in Binary, or null.  If null, the Reader or\n     * String value is used.  Exactly one of stringValue(), readerValue() and\n     * binaryValue() must be set.\n     */\n    public byte[] binaryValue() {\n      if (fieldsData == null) {\n        final byte[] b = new byte[toRead];\n        IndexInput localFieldsStream = (IndexInput) fieldsStreamTL.get();\n        if (localFieldsStream == null) {\n          localFieldsStream = (IndexInput) fieldsStream.clone();\n          fieldsStreamTL.set(localFieldsStream);\n        }\n        //Throw this IO Exception since IndexREader.document does so anyway, so probably not that big of a change for people\n        //since they are already handling this exception when getting the document\n        try {\n          localFieldsStream.seek(pointer);\n          localFieldsStream.readBytes(b, 0, b.length);\n          if (isCompressed == true) {\n            fieldsData = uncompress(b);\n          } else {\n            fieldsData = b;\n          }\n        } catch (IOException e) {\n          throw new FieldReaderException(e);\n        }\n      }\n      return fieldsData instanceof byte[] ? (byte[]) fieldsData : null;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["98ad65f4cb77e7bf5d0ab1d1bcd8938b77beed6e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5fb0d97d0a04ebb8ba42b465420fb12b444b1843","date":1161313682,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader.LazyField#binaryValue().mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader.LazyField#binaryValue().mjava","sourceNew":"    /**\n     * The value of the field in Binary, or null.  If null, the Reader or\n     * String value is used.  Exactly one of stringValue(), readerValue() and\n     * binaryValue() must be set.\n     */\n    public byte[] binaryValue() {\n      if (fieldsData == null) {\n        final byte[] b = new byte[toRead];\n        IndexInput localFieldsStream = getFieldStream();\n        //Throw this IO Exception since IndexREader.document does so anyway, so probably not that big of a change for people\n        //since they are already handling this exception when getting the document\n        try {\n          localFieldsStream.seek(pointer);\n          localFieldsStream.readBytes(b, 0, b.length);\n          if (isCompressed == true) {\n            fieldsData = uncompress(b);\n          } else {\n            fieldsData = b;\n          }\n        } catch (IOException e) {\n          throw new FieldReaderException(e);\n        }\n      }\n      return fieldsData instanceof byte[] ? (byte[]) fieldsData : null;\n    }\n\n","sourceOld":"    /**\n     * The value of the field in Binary, or null.  If null, the Reader or\n     * String value is used.  Exactly one of stringValue(), readerValue() and\n     * binaryValue() must be set.\n     */\n    public byte[] binaryValue() {\n      if (fieldsData == null) {\n        final byte[] b = new byte[toRead];\n        IndexInput localFieldsStream = (IndexInput) fieldsStreamTL.get();\n        if (localFieldsStream == null) {\n          localFieldsStream = (IndexInput) fieldsStream.clone();\n          fieldsStreamTL.set(localFieldsStream);\n        }\n        //Throw this IO Exception since IndexREader.document does so anyway, so probably not that big of a change for people\n        //since they are already handling this exception when getting the document\n        try {\n          localFieldsStream.seek(pointer);\n          localFieldsStream.readBytes(b, 0, b.length);\n          if (isCompressed == true) {\n            fieldsData = uncompress(b);\n          } else {\n            fieldsData = b;\n          }\n        } catch (IOException e) {\n          throw new FieldReaderException(e);\n        }\n      }\n      return fieldsData instanceof byte[] ? (byte[]) fieldsData : null;\n    }\n\n","bugFix":null,"bugIntro":["98ad65f4cb77e7bf5d0ab1d1bcd8938b77beed6e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"328c1568e471f0c6eaa49ec00334ca59e573710f","date":1173897963,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader.LazyField#binaryValue().mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader.LazyField#binaryValue().mjava","sourceNew":"    /**\n     * The value of the field in Binary, or null.  If null, the Reader or\n     * String value is used.  Exactly one of stringValue(), readerValue() and\n     * binaryValue() must be set.\n     */\n    public byte[] binaryValue() {\n      ensureOpen();\n      if (fieldsData == null) {\n        final byte[] b = new byte[toRead];\n        IndexInput localFieldsStream = getFieldStream();\n        //Throw this IO Exception since IndexREader.document does so anyway, so probably not that big of a change for people\n        //since they are already handling this exception when getting the document\n        try {\n          localFieldsStream.seek(pointer);\n          localFieldsStream.readBytes(b, 0, b.length);\n          if (isCompressed == true) {\n            fieldsData = uncompress(b);\n          } else {\n            fieldsData = b;\n          }\n        } catch (IOException e) {\n          throw new FieldReaderException(e);\n        }\n      }\n      return fieldsData instanceof byte[] ? (byte[]) fieldsData : null;\n    }\n\n","sourceOld":"    /**\n     * The value of the field in Binary, or null.  If null, the Reader or\n     * String value is used.  Exactly one of stringValue(), readerValue() and\n     * binaryValue() must be set.\n     */\n    public byte[] binaryValue() {\n      if (fieldsData == null) {\n        final byte[] b = new byte[toRead];\n        IndexInput localFieldsStream = getFieldStream();\n        //Throw this IO Exception since IndexREader.document does so anyway, so probably not that big of a change for people\n        //since they are already handling this exception when getting the document\n        try {\n          localFieldsStream.seek(pointer);\n          localFieldsStream.readBytes(b, 0, b.length);\n          if (isCompressed == true) {\n            fieldsData = uncompress(b);\n          } else {\n            fieldsData = b;\n          }\n        } catch (IOException e) {\n          throw new FieldReaderException(e);\n        }\n      }\n      return fieldsData instanceof byte[] ? (byte[]) fieldsData : null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42579622cc27f9908e64f29fa1130bfc28306009","date":1177874771,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader.LazyField#binaryValue().mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader.LazyField#binaryValue().mjava","sourceNew":"    /** The value of the field in Binary, or null.  If null, the Reader value,\n     * String value, or TokenStream value is used. Exactly one of stringValue(), \n     * readerValue(), binaryValue(), and tokenStreamValue() must be set. */\n    public byte[] binaryValue() {\n      ensureOpen();\n      if (fieldsData == null) {\n        final byte[] b = new byte[toRead];\n        IndexInput localFieldsStream = getFieldStream();\n        //Throw this IO Exception since IndexREader.document does so anyway, so probably not that big of a change for people\n        //since they are already handling this exception when getting the document\n        try {\n          localFieldsStream.seek(pointer);\n          localFieldsStream.readBytes(b, 0, b.length);\n          if (isCompressed == true) {\n            fieldsData = uncompress(b);\n          } else {\n            fieldsData = b;\n          }\n        } catch (IOException e) {\n          throw new FieldReaderException(e);\n        }\n      }\n      return fieldsData instanceof byte[] ? (byte[]) fieldsData : null;\n    }\n\n","sourceOld":"    /**\n     * The value of the field in Binary, or null.  If null, the Reader or\n     * String value is used.  Exactly one of stringValue(), readerValue() and\n     * binaryValue() must be set.\n     */\n    public byte[] binaryValue() {\n      ensureOpen();\n      if (fieldsData == null) {\n        final byte[] b = new byte[toRead];\n        IndexInput localFieldsStream = getFieldStream();\n        //Throw this IO Exception since IndexREader.document does so anyway, so probably not that big of a change for people\n        //since they are already handling this exception when getting the document\n        try {\n          localFieldsStream.seek(pointer);\n          localFieldsStream.readBytes(b, 0, b.length);\n          if (isCompressed == true) {\n            fieldsData = uncompress(b);\n          } else {\n            fieldsData = b;\n          }\n        } catch (IOException e) {\n          throw new FieldReaderException(e);\n        }\n      }\n      return fieldsData instanceof byte[] ? (byte[]) fieldsData : null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"10b8bbb8821e38be1de1192f7c7428e7dc8036a5","date":1205276030,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader.LazyField#binaryValue().mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader.LazyField#binaryValue().mjava","sourceNew":"    /** The value of the field in Binary, or null.  If null, the Reader value,\n     * String value, or TokenStream value is used. Exactly one of stringValue(), \n     * readerValue(), binaryValue(), and tokenStreamValue() must be set. */\n    public byte[] binaryValue() {\n      ensureOpen();\n      if (fieldsData == null) {\n        final byte[] b = new byte[toRead];\n        IndexInput localFieldsStream = getFieldStream();\n        //Throw this IO Exception since IndexReader.document does so anyway, so probably not that big of a change for people\n        //since they are already handling this exception when getting the document\n        try {\n          localFieldsStream.seek(pointer);\n          localFieldsStream.readBytes(b, 0, b.length);\n          if (isCompressed == true) {\n            fieldsData = uncompress(b);\n          } else {\n            fieldsData = b;\n          }\n          isBinary = true;\n        } catch (IOException e) {\n          throw new FieldReaderException(e);\n        }\n      }\n      return isBinary ? (byte[]) fieldsData : null;\n    }\n\n","sourceOld":"    /** The value of the field in Binary, or null.  If null, the Reader value,\n     * String value, or TokenStream value is used. Exactly one of stringValue(), \n     * readerValue(), binaryValue(), and tokenStreamValue() must be set. */\n    public byte[] binaryValue() {\n      ensureOpen();\n      if (fieldsData == null) {\n        final byte[] b = new byte[toRead];\n        IndexInput localFieldsStream = getFieldStream();\n        //Throw this IO Exception since IndexREader.document does so anyway, so probably not that big of a change for people\n        //since they are already handling this exception when getting the document\n        try {\n          localFieldsStream.seek(pointer);\n          localFieldsStream.readBytes(b, 0, b.length);\n          if (isCompressed == true) {\n            fieldsData = uncompress(b);\n          } else {\n            fieldsData = b;\n          }\n        } catch (IOException e) {\n          throw new FieldReaderException(e);\n        }\n      }\n      return fieldsData instanceof byte[] ? (byte[]) fieldsData : null;\n    }\n\n","bugFix":null,"bugIntro":["98ad65f4cb77e7bf5d0ab1d1bcd8938b77beed6e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98ad65f4cb77e7bf5d0ab1d1bcd8938b77beed6e","date":1205362958,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader.LazyField#binaryValue().mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader.LazyField#binaryValue().mjava","sourceNew":"    /** The value of the field in Binary, or null.  If null, the Reader value,\n     * String value, or TokenStream value is used. Exactly one of stringValue(), \n     * readerValue(), binaryValue(), and tokenStreamValue() must be set. */\n    public byte[] binaryValue() {\n      ensureOpen();\n      if (isBinary) {\n        if (fieldsData == null) {\n          final byte[] b = new byte[toRead];\n          IndexInput localFieldsStream = getFieldStream();\n          //Throw this IO Exception since IndexReader.document does so anyway, so probably not that big of a change for people\n          //since they are already handling this exception when getting the document\n          try {\n            localFieldsStream.seek(pointer);\n            localFieldsStream.readBytes(b, 0, b.length);\n            if (isCompressed == true) {\n              fieldsData = uncompress(b);\n            } else {\n              fieldsData = b;\n            }\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n        }\n        return (byte[]) fieldsData;\n      } else\n        return null;\n    }\n\n","sourceOld":"    /** The value of the field in Binary, or null.  If null, the Reader value,\n     * String value, or TokenStream value is used. Exactly one of stringValue(), \n     * readerValue(), binaryValue(), and tokenStreamValue() must be set. */\n    public byte[] binaryValue() {\n      ensureOpen();\n      if (fieldsData == null) {\n        final byte[] b = new byte[toRead];\n        IndexInput localFieldsStream = getFieldStream();\n        //Throw this IO Exception since IndexReader.document does so anyway, so probably not that big of a change for people\n        //since they are already handling this exception when getting the document\n        try {\n          localFieldsStream.seek(pointer);\n          localFieldsStream.readBytes(b, 0, b.length);\n          if (isCompressed == true) {\n            fieldsData = uncompress(b);\n          } else {\n            fieldsData = b;\n          }\n          isBinary = true;\n        } catch (IOException e) {\n          throw new FieldReaderException(e);\n        }\n      }\n      return isBinary ? (byte[]) fieldsData : null;\n    }\n\n","bugFix":["10b8bbb8821e38be1de1192f7c7428e7dc8036a5","12d40284fd9481f79444bc63bc5d13847caddd3d","5fb0d97d0a04ebb8ba42b465420fb12b444b1843"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d7203a8194ca217ec527231120df075e9bec237","date":1219055463,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader.LazyField#binaryValue().mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader.LazyField#binaryValue().mjava","sourceNew":"    /** The value of the field in Binary, or null.  If null, the Reader value,\n     * String value, or TokenStream value is used. Exactly one of stringValue(), \n     * readerValue(), binaryValue(), and tokenStreamValue() must be set. */\n    public byte[] binaryValue() {\n      return getBinaryValue(null);\n    }\n\n","sourceOld":"    /** The value of the field in Binary, or null.  If null, the Reader value,\n     * String value, or TokenStream value is used. Exactly one of stringValue(), \n     * readerValue(), binaryValue(), and tokenStreamValue() must be set. */\n    public byte[] binaryValue() {\n      ensureOpen();\n      if (isBinary) {\n        if (fieldsData == null) {\n          final byte[] b = new byte[toRead];\n          IndexInput localFieldsStream = getFieldStream();\n          //Throw this IO Exception since IndexReader.document does so anyway, so probably not that big of a change for people\n          //since they are already handling this exception when getting the document\n          try {\n            localFieldsStream.seek(pointer);\n            localFieldsStream.readBytes(b, 0, b.length);\n            if (isCompressed == true) {\n              fieldsData = uncompress(b);\n            } else {\n              fieldsData = b;\n            }\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n        }\n        return (byte[]) fieldsData;\n      } else\n        return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f44f07aa147c21735d6c43bafa4fde560d0362e1","date":1255024926,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/FieldsReader.LazyField#binaryValue().mjava","sourceNew":null,"sourceOld":"    /** The value of the field in Binary, or null.  If null, the Reader value,\n     * String value, or TokenStream value is used. Exactly one of stringValue(), \n     * readerValue(), binaryValue(), and tokenStreamValue() must be set. */\n    public byte[] binaryValue() {\n      return getBinaryValue(null);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f44f07aa147c21735d6c43bafa4fde560d0362e1":["7d7203a8194ca217ec527231120df075e9bec237"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["5fb0d97d0a04ebb8ba42b465420fb12b444b1843"],"7d7203a8194ca217ec527231120df075e9bec237":["98ad65f4cb77e7bf5d0ab1d1bcd8938b77beed6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5fb0d97d0a04ebb8ba42b465420fb12b444b1843":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"98ad65f4cb77e7bf5d0ab1d1bcd8938b77beed6e":["10b8bbb8821e38be1de1192f7c7428e7dc8036a5"],"10b8bbb8821e38be1de1192f7c7428e7dc8036a5":["42579622cc27f9908e64f29fa1130bfc28306009"],"42579622cc27f9908e64f29fa1130bfc28306009":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f44f07aa147c21735d6c43bafa4fde560d0362e1"]},"commit2Childs":{"f44f07aa147c21735d6c43bafa4fde560d0362e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["42579622cc27f9908e64f29fa1130bfc28306009"],"7d7203a8194ca217ec527231120df075e9bec237":["f44f07aa147c21735d6c43bafa4fde560d0362e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"5fb0d97d0a04ebb8ba42b465420fb12b444b1843":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"98ad65f4cb77e7bf5d0ab1d1bcd8938b77beed6e":["7d7203a8194ca217ec527231120df075e9bec237"],"10b8bbb8821e38be1de1192f7c7428e7dc8036a5":["98ad65f4cb77e7bf5d0ab1d1bcd8938b77beed6e"],"42579622cc27f9908e64f29fa1130bfc28306009":["10b8bbb8821e38be1de1192f7c7428e7dc8036a5"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["5fb0d97d0a04ebb8ba42b465420fb12b444b1843"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}