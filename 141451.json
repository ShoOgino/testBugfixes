{"path":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#createTree(Polygon2D[],int,int,boolean).mjava","commits":[{"id":"925fce43f3bac029d912b9b7de03c789e258a333","date":1461612714,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#createTree(Polygon2D[],int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Creates tree from sorted components (with range low and high inclusive) */\n  private static Polygon2D createTree(Polygon2D components[], int low, int high, boolean splitX) {\n    if (low > high) {\n      return null;\n    } else if (low < high) {\n      // TODO: do one sort instead! there are better algorithms!\n      if (splitX) {\n        Arrays.sort(components, low, high+1, (left, right) -> {\n          int ret = Double.compare(left.minLon, right.minLon);\n          if (ret == 0) {\n            ret = Double.compare(left.maxX, right.maxX);\n          }\n          return ret;\n        });\n      } else {\n        Arrays.sort(components, low, high+1, (left, right) -> {\n          int ret = Double.compare(left.minLat, right.minLat);\n          if (ret == 0) {\n            ret = Double.compare(left.maxY, right.maxY);\n          }\n          return ret;\n        });\n      }\n    }\n    // add midpoint\n    int mid = (low + high) >>> 1;\n    Polygon2D newNode = components[mid];\n    newNode.splitX = splitX;\n    // add children\n    newNode.left = createTree(components, low, mid - 1, !splitX);\n    newNode.right = createTree(components, mid + 1, high, !splitX);\n    // pull up max values to this node\n    if (newNode.left != null) {\n      newNode.maxX = Math.max(newNode.maxX, newNode.left.maxX);\n      newNode.maxY = Math.max(newNode.maxY, newNode.left.maxY);\n    }\n    if (newNode.right != null) {\n      newNode.maxX = Math.max(newNode.maxX, newNode.right.maxX);\n      newNode.maxY = Math.max(newNode.maxY, newNode.right.maxY);\n    }\n    return newNode;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#createTree(Polygon2D[],int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Creates tree from sorted components (with range low and high inclusive) */\n  private static Polygon2D createTree(Polygon2D components[], int low, int high, boolean splitX) {\n    if (low > high) {\n      return null;\n    } else if (low < high) {\n      // TODO: do one sort instead! there are better algorithms!\n      if (splitX) {\n        Arrays.sort(components, low, high+1, (left, right) -> {\n          int ret = Double.compare(left.minLon, right.minLon);\n          if (ret == 0) {\n            ret = Double.compare(left.maxX, right.maxX);\n          }\n          return ret;\n        });\n      } else {\n        Arrays.sort(components, low, high+1, (left, right) -> {\n          int ret = Double.compare(left.minLat, right.minLat);\n          if (ret == 0) {\n            ret = Double.compare(left.maxY, right.maxY);\n          }\n          return ret;\n        });\n      }\n    }\n    // add midpoint\n    int mid = (low + high) >>> 1;\n    Polygon2D newNode = components[mid];\n    newNode.splitX = splitX;\n    // add children\n    newNode.left = createTree(components, low, mid - 1, !splitX);\n    newNode.right = createTree(components, mid + 1, high, !splitX);\n    // pull up max values to this node\n    if (newNode.left != null) {\n      newNode.maxX = Math.max(newNode.maxX, newNode.left.maxX);\n      newNode.maxY = Math.max(newNode.maxY, newNode.left.maxY);\n    }\n    if (newNode.right != null) {\n      newNode.maxX = Math.max(newNode.maxX, newNode.right.maxX);\n      newNode.maxY = Math.max(newNode.maxY, newNode.right.maxY);\n    }\n    return newNode;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e533fe5a9b29e5ca780ca7611d1500dc9eddf04b","date":1464795186,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#createTree(Polygon2D[],int,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#createTree(Polygon2D[],int,int,boolean).mjava","sourceNew":"  /** Creates tree from sorted components (with range low and high inclusive) */\n  private static Polygon2D createTree(Polygon2D components[], int low, int high, boolean splitX) {\n    if (low > high) {\n      return null;\n    }\n    final int mid = (low + high) >>> 1;\n    if (low < high) {\n      Comparator<Polygon2D> comparator;\n      if (splitX) {\n        comparator = (left, right) -> {\n          int ret = Double.compare(left.minLon, right.minLon);\n          if (ret == 0) {\n            ret = Double.compare(left.maxX, right.maxX);\n          }\n          return ret;\n        };\n      } else {\n        comparator = (left, right) -> {\n          int ret = Double.compare(left.minLat, right.minLat);\n          if (ret == 0) {\n            ret = Double.compare(left.maxY, right.maxY);\n          }\n          return ret;\n        };\n      }\n      ArrayUtil.select(components, low, high + 1, mid, comparator);\n    }\n    // add midpoint\n    Polygon2D newNode = components[mid];\n    newNode.splitX = splitX;\n    // add children\n    newNode.left = createTree(components, low, mid - 1, !splitX);\n    newNode.right = createTree(components, mid + 1, high, !splitX);\n    // pull up max values to this node\n    if (newNode.left != null) {\n      newNode.maxX = Math.max(newNode.maxX, newNode.left.maxX);\n      newNode.maxY = Math.max(newNode.maxY, newNode.left.maxY);\n    }\n    if (newNode.right != null) {\n      newNode.maxX = Math.max(newNode.maxX, newNode.right.maxX);\n      newNode.maxY = Math.max(newNode.maxY, newNode.right.maxY);\n    }\n    return newNode;\n  }\n\n","sourceOld":"  /** Creates tree from sorted components (with range low and high inclusive) */\n  private static Polygon2D createTree(Polygon2D components[], int low, int high, boolean splitX) {\n    if (low > high) {\n      return null;\n    } else if (low < high) {\n      // TODO: do one sort instead! there are better algorithms!\n      if (splitX) {\n        Arrays.sort(components, low, high+1, (left, right) -> {\n          int ret = Double.compare(left.minLon, right.minLon);\n          if (ret == 0) {\n            ret = Double.compare(left.maxX, right.maxX);\n          }\n          return ret;\n        });\n      } else {\n        Arrays.sort(components, low, high+1, (left, right) -> {\n          int ret = Double.compare(left.minLat, right.minLat);\n          if (ret == 0) {\n            ret = Double.compare(left.maxY, right.maxY);\n          }\n          return ret;\n        });\n      }\n    }\n    // add midpoint\n    int mid = (low + high) >>> 1;\n    Polygon2D newNode = components[mid];\n    newNode.splitX = splitX;\n    // add children\n    newNode.left = createTree(components, low, mid - 1, !splitX);\n    newNode.right = createTree(components, mid + 1, high, !splitX);\n    // pull up max values to this node\n    if (newNode.left != null) {\n      newNode.maxX = Math.max(newNode.maxX, newNode.left.maxX);\n      newNode.maxY = Math.max(newNode.maxY, newNode.left.maxY);\n    }\n    if (newNode.right != null) {\n      newNode.maxX = Math.max(newNode.maxX, newNode.right.maxX);\n      newNode.maxY = Math.max(newNode.maxY, newNode.right.maxY);\n    }\n    return newNode;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8ee93140fd0efef7e101786e3ed5160a700b5f","date":1464820111,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#createTree(Polygon2D[],int,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#createTree(Polygon2D[],int,int,boolean).mjava","sourceNew":"  /** Creates tree from sorted components (with range low and high inclusive) */\n  private static Polygon2D createTree(Polygon2D components[], int low, int high, boolean splitX) {\n    if (low > high) {\n      return null;\n    }\n    final int mid = (low + high) >>> 1;\n    if (low < high) {\n      Comparator<Polygon2D> comparator;\n      if (splitX) {\n        comparator = (left, right) -> {\n          int ret = Double.compare(left.minLon, right.minLon);\n          if (ret == 0) {\n            ret = Double.compare(left.maxX, right.maxX);\n          }\n          return ret;\n        };\n      } else {\n        comparator = (left, right) -> {\n          int ret = Double.compare(left.minLat, right.minLat);\n          if (ret == 0) {\n            ret = Double.compare(left.maxY, right.maxY);\n          }\n          return ret;\n        };\n      }\n      ArrayUtil.select(components, low, high + 1, mid, comparator);\n    }\n    // add midpoint\n    Polygon2D newNode = components[mid];\n    newNode.splitX = splitX;\n    // add children\n    newNode.left = createTree(components, low, mid - 1, !splitX);\n    newNode.right = createTree(components, mid + 1, high, !splitX);\n    // pull up max values to this node\n    if (newNode.left != null) {\n      newNode.maxX = Math.max(newNode.maxX, newNode.left.maxX);\n      newNode.maxY = Math.max(newNode.maxY, newNode.left.maxY);\n    }\n    if (newNode.right != null) {\n      newNode.maxX = Math.max(newNode.maxX, newNode.right.maxX);\n      newNode.maxY = Math.max(newNode.maxY, newNode.right.maxY);\n    }\n    return newNode;\n  }\n\n","sourceOld":"  /** Creates tree from sorted components (with range low and high inclusive) */\n  private static Polygon2D createTree(Polygon2D components[], int low, int high, boolean splitX) {\n    if (low > high) {\n      return null;\n    } else if (low < high) {\n      // TODO: do one sort instead! there are better algorithms!\n      if (splitX) {\n        Arrays.sort(components, low, high+1, (left, right) -> {\n          int ret = Double.compare(left.minLon, right.minLon);\n          if (ret == 0) {\n            ret = Double.compare(left.maxX, right.maxX);\n          }\n          return ret;\n        });\n      } else {\n        Arrays.sort(components, low, high+1, (left, right) -> {\n          int ret = Double.compare(left.minLat, right.minLat);\n          if (ret == 0) {\n            ret = Double.compare(left.maxY, right.maxY);\n          }\n          return ret;\n        });\n      }\n    }\n    // add midpoint\n    int mid = (low + high) >>> 1;\n    Polygon2D newNode = components[mid];\n    newNode.splitX = splitX;\n    // add children\n    newNode.left = createTree(components, low, mid - 1, !splitX);\n    newNode.right = createTree(components, mid + 1, high, !splitX);\n    // pull up max values to this node\n    if (newNode.left != null) {\n      newNode.maxX = Math.max(newNode.maxX, newNode.left.maxX);\n      newNode.maxY = Math.max(newNode.maxY, newNode.left.maxY);\n    }\n    if (newNode.right != null) {\n      newNode.maxX = Math.max(newNode.maxX, newNode.right.maxX);\n      newNode.maxY = Math.max(newNode.maxY, newNode.right.maxY);\n    }\n    return newNode;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","date":1464821470,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#createTree(Polygon2D[],int,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#createTree(Polygon2D[],int,int,boolean).mjava","sourceNew":"  /** Creates tree from sorted components (with range low and high inclusive) */\n  private static Polygon2D createTree(Polygon2D components[], int low, int high, boolean splitX) {\n    if (low > high) {\n      return null;\n    }\n    final int mid = (low + high) >>> 1;\n    if (low < high) {\n      Comparator<Polygon2D> comparator;\n      if (splitX) {\n        comparator = (left, right) -> {\n          int ret = Double.compare(left.minLon, right.minLon);\n          if (ret == 0) {\n            ret = Double.compare(left.maxX, right.maxX);\n          }\n          return ret;\n        };\n      } else {\n        comparator = (left, right) -> {\n          int ret = Double.compare(left.minLat, right.minLat);\n          if (ret == 0) {\n            ret = Double.compare(left.maxY, right.maxY);\n          }\n          return ret;\n        };\n      }\n      ArrayUtil.select(components, low, high + 1, mid, comparator);\n    }\n    // add midpoint\n    Polygon2D newNode = components[mid];\n    newNode.splitX = splitX;\n    // add children\n    newNode.left = createTree(components, low, mid - 1, !splitX);\n    newNode.right = createTree(components, mid + 1, high, !splitX);\n    // pull up max values to this node\n    if (newNode.left != null) {\n      newNode.maxX = Math.max(newNode.maxX, newNode.left.maxX);\n      newNode.maxY = Math.max(newNode.maxY, newNode.left.maxY);\n    }\n    if (newNode.right != null) {\n      newNode.maxX = Math.max(newNode.maxX, newNode.right.maxX);\n      newNode.maxY = Math.max(newNode.maxY, newNode.right.maxY);\n    }\n    return newNode;\n  }\n\n","sourceOld":"  /** Creates tree from sorted components (with range low and high inclusive) */\n  private static Polygon2D createTree(Polygon2D components[], int low, int high, boolean splitX) {\n    if (low > high) {\n      return null;\n    } else if (low < high) {\n      // TODO: do one sort instead! there are better algorithms!\n      if (splitX) {\n        Arrays.sort(components, low, high+1, (left, right) -> {\n          int ret = Double.compare(left.minLon, right.minLon);\n          if (ret == 0) {\n            ret = Double.compare(left.maxX, right.maxX);\n          }\n          return ret;\n        });\n      } else {\n        Arrays.sort(components, low, high+1, (left, right) -> {\n          int ret = Double.compare(left.minLat, right.minLat);\n          if (ret == 0) {\n            ret = Double.compare(left.maxY, right.maxY);\n          }\n          return ret;\n        });\n      }\n    }\n    // add midpoint\n    int mid = (low + high) >>> 1;\n    Polygon2D newNode = components[mid];\n    newNode.splitX = splitX;\n    // add children\n    newNode.left = createTree(components, low, mid - 1, !splitX);\n    newNode.right = createTree(components, mid + 1, high, !splitX);\n    // pull up max values to this node\n    if (newNode.left != null) {\n      newNode.maxX = Math.max(newNode.maxX, newNode.left.maxX);\n      newNode.maxY = Math.max(newNode.maxY, newNode.left.maxY);\n    }\n    if (newNode.right != null) {\n      newNode.maxX = Math.max(newNode.maxX, newNode.right.maxX);\n      newNode.maxY = Math.max(newNode.maxY, newNode.right.maxY);\n    }\n    return newNode;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f69e96b07e265f3e18957be540909b01fae36f8","date":1464859090,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#createTree(Polygon2D[],int,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#createTree(Polygon2D[],int,int,boolean).mjava","sourceNew":"  /** Creates tree from sorted components (with range low and high inclusive) */\n  private static Polygon2D createTree(Polygon2D components[], int low, int high, boolean splitX) {\n    if (low > high) {\n      return null;\n    }\n    final int mid = (low + high) >>> 1;\n    if (low < high) {\n      Comparator<Polygon2D> comparator;\n      if (splitX) {\n        comparator = (left, right) -> {\n          int ret = Double.compare(left.minLon, right.minLon);\n          if (ret == 0) {\n            ret = Double.compare(left.maxX, right.maxX);\n          }\n          return ret;\n        };\n      } else {\n        comparator = (left, right) -> {\n          int ret = Double.compare(left.minLat, right.minLat);\n          if (ret == 0) {\n            ret = Double.compare(left.maxY, right.maxY);\n          }\n          return ret;\n        };\n      }\n      ArrayUtil.select(components, low, high + 1, mid, comparator);\n    }\n    // add midpoint\n    Polygon2D newNode = components[mid];\n    newNode.splitX = splitX;\n    // add children\n    newNode.left = createTree(components, low, mid - 1, !splitX);\n    newNode.right = createTree(components, mid + 1, high, !splitX);\n    // pull up max values to this node\n    if (newNode.left != null) {\n      newNode.maxX = Math.max(newNode.maxX, newNode.left.maxX);\n      newNode.maxY = Math.max(newNode.maxY, newNode.left.maxY);\n    }\n    if (newNode.right != null) {\n      newNode.maxX = Math.max(newNode.maxX, newNode.right.maxX);\n      newNode.maxY = Math.max(newNode.maxY, newNode.right.maxY);\n    }\n    return newNode;\n  }\n\n","sourceOld":"  /** Creates tree from sorted components (with range low and high inclusive) */\n  private static Polygon2D createTree(Polygon2D components[], int low, int high, boolean splitX) {\n    if (low > high) {\n      return null;\n    } else if (low < high) {\n      // TODO: do one sort instead! there are better algorithms!\n      if (splitX) {\n        Arrays.sort(components, low, high+1, (left, right) -> {\n          int ret = Double.compare(left.minLon, right.minLon);\n          if (ret == 0) {\n            ret = Double.compare(left.maxX, right.maxX);\n          }\n          return ret;\n        });\n      } else {\n        Arrays.sort(components, low, high+1, (left, right) -> {\n          int ret = Double.compare(left.minLat, right.minLat);\n          if (ret == 0) {\n            ret = Double.compare(left.maxY, right.maxY);\n          }\n          return ret;\n        });\n      }\n    }\n    // add midpoint\n    int mid = (low + high) >>> 1;\n    Polygon2D newNode = components[mid];\n    newNode.splitX = splitX;\n    // add children\n    newNode.left = createTree(components, low, mid - 1, !splitX);\n    newNode.right = createTree(components, mid + 1, high, !splitX);\n    // pull up max values to this node\n    if (newNode.left != null) {\n      newNode.maxX = Math.max(newNode.maxX, newNode.left.maxX);\n      newNode.maxY = Math.max(newNode.maxY, newNode.left.maxY);\n    }\n    if (newNode.right != null) {\n      newNode.maxX = Math.max(newNode.maxX, newNode.right.maxX);\n      newNode.maxY = Math.max(newNode.maxY, newNode.right.maxY);\n    }\n    return newNode;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#createTree(Polygon2D[],int,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#createTree(Polygon2D[],int,int,boolean).mjava","sourceNew":"  /** Creates tree from sorted components (with range low and high inclusive) */\n  private static Polygon2D createTree(Polygon2D components[], int low, int high, boolean splitX) {\n    if (low > high) {\n      return null;\n    }\n    final int mid = (low + high) >>> 1;\n    if (low < high) {\n      Comparator<Polygon2D> comparator;\n      if (splitX) {\n        comparator = (left, right) -> {\n          int ret = Double.compare(left.minLon, right.minLon);\n          if (ret == 0) {\n            ret = Double.compare(left.maxX, right.maxX);\n          }\n          return ret;\n        };\n      } else {\n        comparator = (left, right) -> {\n          int ret = Double.compare(left.minLat, right.minLat);\n          if (ret == 0) {\n            ret = Double.compare(left.maxY, right.maxY);\n          }\n          return ret;\n        };\n      }\n      ArrayUtil.select(components, low, high + 1, mid, comparator);\n    }\n    // add midpoint\n    Polygon2D newNode = components[mid];\n    newNode.splitX = splitX;\n    // add children\n    newNode.left = createTree(components, low, mid - 1, !splitX);\n    newNode.right = createTree(components, mid + 1, high, !splitX);\n    // pull up max values to this node\n    if (newNode.left != null) {\n      newNode.maxX = Math.max(newNode.maxX, newNode.left.maxX);\n      newNode.maxY = Math.max(newNode.maxY, newNode.left.maxY);\n    }\n    if (newNode.right != null) {\n      newNode.maxX = Math.max(newNode.maxX, newNode.right.maxX);\n      newNode.maxY = Math.max(newNode.maxY, newNode.right.maxY);\n    }\n    return newNode;\n  }\n\n","sourceOld":"  /** Creates tree from sorted components (with range low and high inclusive) */\n  private static Polygon2D createTree(Polygon2D components[], int low, int high, boolean splitX) {\n    if (low > high) {\n      return null;\n    } else if (low < high) {\n      // TODO: do one sort instead! there are better algorithms!\n      if (splitX) {\n        Arrays.sort(components, low, high+1, (left, right) -> {\n          int ret = Double.compare(left.minLon, right.minLon);\n          if (ret == 0) {\n            ret = Double.compare(left.maxX, right.maxX);\n          }\n          return ret;\n        });\n      } else {\n        Arrays.sort(components, low, high+1, (left, right) -> {\n          int ret = Double.compare(left.minLat, right.minLat);\n          if (ret == 0) {\n            ret = Double.compare(left.maxY, right.maxY);\n          }\n          return ret;\n        });\n      }\n    }\n    // add midpoint\n    int mid = (low + high) >>> 1;\n    Polygon2D newNode = components[mid];\n    newNode.splitX = splitX;\n    // add children\n    newNode.left = createTree(components, low, mid - 1, !splitX);\n    newNode.right = createTree(components, mid + 1, high, !splitX);\n    // pull up max values to this node\n    if (newNode.left != null) {\n      newNode.maxX = Math.max(newNode.maxX, newNode.left.maxX);\n      newNode.maxY = Math.max(newNode.maxY, newNode.left.maxY);\n    }\n    if (newNode.right != null) {\n      newNode.maxX = Math.max(newNode.maxX, newNode.right.maxX);\n      newNode.maxY = Math.max(newNode.maxY, newNode.right.maxY);\n    }\n    return newNode;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4fccad460342b1af30cb328cc8297751a218d78","date":1541177339,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#createTree(EdgeTree[],int,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#createTree(Polygon2D[],int,int,boolean).mjava","sourceNew":"  /** Creates tree from sorted components (with range low and high inclusive) */\n  protected static EdgeTree createTree(EdgeTree components[], int low, int high, boolean splitX) {\n    if (low > high) {\n      return null;\n    }\n    final int mid = (low + high) >>> 1;\n    if (low < high) {\n      Comparator<EdgeTree> comparator;\n      if (splitX) {\n        comparator = (left, right) -> {\n          int ret = Double.compare(left.minLon, right.minLon);\n          if (ret == 0) {\n            ret = Double.compare(left.maxX, right.maxX);\n          }\n          return ret;\n        };\n      } else {\n        comparator = (left, right) -> {\n          int ret = Double.compare(left.minLat, right.minLat);\n          if (ret == 0) {\n            ret = Double.compare(left.maxY, right.maxY);\n          }\n          return ret;\n        };\n      }\n      ArrayUtil.select(components, low, high + 1, mid, comparator);\n    }\n    // add midpoint\n    EdgeTree newNode = components[mid];\n    newNode.splitX = splitX;\n    // add children\n    newNode.left = createTree(components, low, mid - 1, !splitX);\n    newNode.right = createTree(components, mid + 1, high, !splitX);\n    // pull up max values to this node\n    if (newNode.left != null) {\n      newNode.maxX = Math.max(newNode.maxX, newNode.left.maxX);\n      newNode.maxY = Math.max(newNode.maxY, newNode.left.maxY);\n    }\n    if (newNode.right != null) {\n      newNode.maxX = Math.max(newNode.maxX, newNode.right.maxX);\n      newNode.maxY = Math.max(newNode.maxY, newNode.right.maxY);\n    }\n    return newNode;\n  }\n\n","sourceOld":"  /** Creates tree from sorted components (with range low and high inclusive) */\n  private static Polygon2D createTree(Polygon2D components[], int low, int high, boolean splitX) {\n    if (low > high) {\n      return null;\n    }\n    final int mid = (low + high) >>> 1;\n    if (low < high) {\n      Comparator<Polygon2D> comparator;\n      if (splitX) {\n        comparator = (left, right) -> {\n          int ret = Double.compare(left.minLon, right.minLon);\n          if (ret == 0) {\n            ret = Double.compare(left.maxX, right.maxX);\n          }\n          return ret;\n        };\n      } else {\n        comparator = (left, right) -> {\n          int ret = Double.compare(left.minLat, right.minLat);\n          if (ret == 0) {\n            ret = Double.compare(left.maxY, right.maxY);\n          }\n          return ret;\n        };\n      }\n      ArrayUtil.select(components, low, high + 1, mid, comparator);\n    }\n    // add midpoint\n    Polygon2D newNode = components[mid];\n    newNode.splitX = splitX;\n    // add children\n    newNode.left = createTree(components, low, mid - 1, !splitX);\n    newNode.right = createTree(components, mid + 1, high, !splitX);\n    // pull up max values to this node\n    if (newNode.left != null) {\n      newNode.maxX = Math.max(newNode.maxX, newNode.left.maxX);\n      newNode.maxY = Math.max(newNode.maxY, newNode.left.maxY);\n    }\n    if (newNode.right != null) {\n      newNode.maxX = Math.max(newNode.maxX, newNode.right.maxX);\n      newNode.maxY = Math.max(newNode.maxY, newNode.right.maxY);\n    }\n    return newNode;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e533fe5a9b29e5ca780ca7611d1500dc9eddf04b":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","925fce43f3bac029d912b9b7de03c789e258a333"],"1f69e96b07e265f3e18957be540909b01fae36f8":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","e533fe5a9b29e5ca780ca7611d1500dc9eddf04b"],"e4fccad460342b1af30cb328cc8297751a218d78":["1f69e96b07e265f3e18957be540909b01fae36f8"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","e533fe5a9b29e5ca780ca7611d1500dc9eddf04b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","1f69e96b07e265f3e18957be540909b01fae36f8"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e4fccad460342b1af30cb328cc8297751a218d78"],"925fce43f3bac029d912b9b7de03c789e258a333":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e533fe5a9b29e5ca780ca7611d1500dc9eddf04b":["1f69e96b07e265f3e18957be540909b01fae36f8","5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["e533fe5a9b29e5ca780ca7611d1500dc9eddf04b","1f69e96b07e265f3e18957be540909b01fae36f8","5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","925fce43f3bac029d912b9b7de03c789e258a333"],"1f69e96b07e265f3e18957be540909b01fae36f8":["e4fccad460342b1af30cb328cc8297751a218d78","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e4fccad460342b1af30cb328cc8297751a218d78":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":[],"925fce43f3bac029d912b9b7de03c789e258a333":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}