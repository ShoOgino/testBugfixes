{"path":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#testResolveLanguage().mjava","commits":[{"id":"a799d5c6eb6dd4c46e099b34640cc369f6db9155","date":1318737330,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#testResolveLanguage().mjava","pathOld":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTest#testResolveLanguage().mjava","sourceNew":"  @Test\n  public void testResolveLanguage() throws Exception {\n    List<DetectedLanguage> langs;\n    parameters = new ModifiableSolrParams();\n    parameters.add(\"langid.fl\", \"text\");\n    parameters.add(\"langid.langField\", \"language\");\n    liProcessor = createLangIdProcessor(parameters);\n\n    // No detected languages\n    langs = new ArrayList<DetectedLanguage>();\n    assertEquals(\"\", liProcessor.resolveLanguage(langs, null));\n    assertEquals(\"fallback\", liProcessor.resolveLanguage(langs, \"fallback\"));\n\n    // One detected language\n    langs.add(new DetectedLanguage(\"one\", 1.0));\n    assertEquals(\"one\", liProcessor.resolveLanguage(langs, \"fallback\"));    \n\n    // One detected language under default threshold\n    langs = new ArrayList<DetectedLanguage>();\n    langs.add(new DetectedLanguage(\"under\", 0.1));\n    assertEquals(\"fallback\", liProcessor.resolveLanguage(langs, \"fallback\"));    \n  }\n\n","sourceOld":"  @Test\n  public void testResolveLanguage() throws Exception {\n    List<DetectedLanguage> langs;\n    parameters = new ModifiableSolrParams();\n    parameters.add(\"langid.fl\", \"text\");\n    parameters.add(\"langid.langField\", \"language\");\n    liProcessor = createLangIdProcessor(parameters);\n\n    // No detected languages\n    langs = new ArrayList<DetectedLanguage>();\n    assertEquals(\"\", liProcessor.resolveLanguage(langs, null));\n    assertEquals(\"fallback\", liProcessor.resolveLanguage(langs, \"fallback\"));\n\n    // One detected language\n    langs.add(new DetectedLanguage(\"one\", 1.0));\n    assertEquals(\"one\", liProcessor.resolveLanguage(langs, \"fallback\"));    \n\n    // One detected language under default threshold\n    langs = new ArrayList<DetectedLanguage>();\n    langs.add(new DetectedLanguage(\"under\", 0.1));\n    assertEquals(\"fallback\", liProcessor.resolveLanguage(langs, \"fallback\"));    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#testResolveLanguage().mjava","pathOld":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#testResolveLanguage().mjava","sourceNew":"  @Test\n  public void testResolveLanguage() throws Exception {\n    List<DetectedLanguage> langs;\n    parameters = new ModifiableSolrParams();\n    parameters.add(\"langid.fl\", \"text\");\n    parameters.add(\"langid.langField\", \"language\");\n    liProcessor = createLangIdProcessor(parameters);\n\n    // No detected languages\n    langs = new ArrayList<>();\n    assertEquals(\"\", liProcessor.resolveLanguage(langs, null));\n    assertEquals(\"fallback\", liProcessor.resolveLanguage(langs, \"fallback\"));\n\n    // One detected language\n    langs.add(new DetectedLanguage(\"one\", 1.0));\n    assertEquals(\"one\", liProcessor.resolveLanguage(langs, \"fallback\"));    \n\n    // One detected language under default threshold\n    langs = new ArrayList<>();\n    langs.add(new DetectedLanguage(\"under\", 0.1));\n    assertEquals(\"fallback\", liProcessor.resolveLanguage(langs, \"fallback\"));    \n  }\n\n","sourceOld":"  @Test\n  public void testResolveLanguage() throws Exception {\n    List<DetectedLanguage> langs;\n    parameters = new ModifiableSolrParams();\n    parameters.add(\"langid.fl\", \"text\");\n    parameters.add(\"langid.langField\", \"language\");\n    liProcessor = createLangIdProcessor(parameters);\n\n    // No detected languages\n    langs = new ArrayList<DetectedLanguage>();\n    assertEquals(\"\", liProcessor.resolveLanguage(langs, null));\n    assertEquals(\"fallback\", liProcessor.resolveLanguage(langs, \"fallback\"));\n\n    // One detected language\n    langs.add(new DetectedLanguage(\"one\", 1.0));\n    assertEquals(\"one\", liProcessor.resolveLanguage(langs, \"fallback\"));    \n\n    // One detected language under default threshold\n    langs = new ArrayList<DetectedLanguage>();\n    langs.add(new DetectedLanguage(\"under\", 0.1));\n    assertEquals(\"fallback\", liProcessor.resolveLanguage(langs, \"fallback\"));    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a2a2c4468a8bdff4cb7487d8b203d835d963e65","date":1408126346,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#testResolveLanguage().mjava","pathOld":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#testResolveLanguage().mjava","sourceNew":"  @Test\n  public void testResolveLanguage() throws Exception {\n    List<DetectedLanguage> langs;\n    ModifiableSolrParams parameters = new ModifiableSolrParams();\n    parameters.add(\"langid.fl\", \"text\");\n    parameters.add(\"langid.langField\", \"language\");\n    liProcessor = createLangIdProcessor(parameters);\n\n    // No detected languages\n    langs = new ArrayList<>();\n    assertEquals(\"\", liProcessor.resolveLanguage(langs, null));\n    assertEquals(\"fallback\", liProcessor.resolveLanguage(langs, \"fallback\"));\n\n    // One detected language\n    langs.add(new DetectedLanguage(\"one\", 1.0));\n    assertEquals(\"one\", liProcessor.resolveLanguage(langs, \"fallback\"));    \n\n    // One detected language under default threshold\n    langs = new ArrayList<>();\n    langs.add(new DetectedLanguage(\"under\", 0.1));\n    assertEquals(\"fallback\", liProcessor.resolveLanguage(langs, \"fallback\"));    \n  }\n\n","sourceOld":"  @Test\n  public void testResolveLanguage() throws Exception {\n    List<DetectedLanguage> langs;\n    parameters = new ModifiableSolrParams();\n    parameters.add(\"langid.fl\", \"text\");\n    parameters.add(\"langid.langField\", \"language\");\n    liProcessor = createLangIdProcessor(parameters);\n\n    // No detected languages\n    langs = new ArrayList<>();\n    assertEquals(\"\", liProcessor.resolveLanguage(langs, null));\n    assertEquals(\"fallback\", liProcessor.resolveLanguage(langs, \"fallback\"));\n\n    // One detected language\n    langs.add(new DetectedLanguage(\"one\", 1.0));\n    assertEquals(\"one\", liProcessor.resolveLanguage(langs, \"fallback\"));    \n\n    // One detected language under default threshold\n    langs = new ArrayList<>();\n    langs.add(new DetectedLanguage(\"under\", 0.1));\n    assertEquals(\"fallback\", liProcessor.resolveLanguage(langs, \"fallback\"));    \n  }\n\n","bugFix":["0f45f65b8ca4312a6880cc80396c35205dc21543"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a799d5c6eb6dd4c46e099b34640cc369f6db9155"],"1a2a2c4468a8bdff4cb7487d8b203d835d963e65":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a799d5c6eb6dd4c46e099b34640cc369f6db9155":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1a2a2c4468a8bdff4cb7487d8b203d835d963e65"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1a2a2c4468a8bdff4cb7487d8b203d835d963e65"],"1a2a2c4468a8bdff4cb7487d8b203d835d963e65":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a799d5c6eb6dd4c46e099b34640cc369f6db9155"],"a799d5c6eb6dd4c46e099b34640cc369f6db9155":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}