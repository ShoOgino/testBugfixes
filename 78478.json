{"path":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(byte[]).mjava","commits":[{"id":"86cab68ee900a31d093b114182b488ea8e85c59d","date":1456171815,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(byte[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a string of a single value in a human-readable format for debugging.\n   * This is used by {@link #toString()}.\n   *\n   * The default implementation encodes the individual byte values.\n   *\n   * @param value single value, never null\n   * @return human readable value for debugging\n   */\n  protected String toString(byte[] value) {\n    assert value != null;\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"binary(\");\n    for (int i = 0; i < value.length; i++) {\n      if (i > 0) {\n        sb.append(' ');\n      }\n      sb.append(Integer.toHexString(value[i] & 0xFF));\n    }\n    sb.append(')');\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(byte[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a string of a single value in a human-readable format for debugging.\n   * This is used by {@link #toString()}.\n   *\n   * The default implementation encodes the individual byte values.\n   *\n   * @param value single value, never null\n   * @return human readable value for debugging\n   */\n  protected String toString(byte[] value) {\n    assert value != null;\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"binary(\");\n    for (int i = 0; i < value.length; i++) {\n      if (i > 0) {\n        sb.append(' ');\n      }\n      sb.append(Integer.toHexString(value[i] & 0xFF));\n    }\n    sb.append(')');\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3104a6ba367dfb690806b227c5ef17c42c6107b","date":1456265035,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(byte[]).mjava","sourceNew":"  /**\n   * Returns a string of a single value in a human-readable format for debugging.\n   * This is used by {@link #toString()}.\n   *\n   * @param value single value, never null\n   * @return human readable value for debugging\n   */\n  protected abstract String toString(byte[] value);\n\n","sourceOld":"  /**\n   * Returns a string of a single value in a human-readable format for debugging.\n   * This is used by {@link #toString()}.\n   *\n   * The default implementation encodes the individual byte values.\n   *\n   * @param value single value, never null\n   * @return human readable value for debugging\n   */\n  protected String toString(byte[] value) {\n    assert value != null;\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"binary(\");\n    for (int i = 0; i < value.length; i++) {\n      if (i > 0) {\n        sb.append(' ');\n      }\n      sb.append(Integer.toHexString(value[i] & 0xFF));\n    }\n    sb.append(')');\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","date":1456265720,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(byte[]).mjava","sourceNew":"  /**\n   * Returns a string of a single value in a human-readable format for debugging.\n   * This is used by {@link #toString()}.\n   *\n   * @param value single value, never null\n   * @return human readable value for debugging\n   */\n  protected abstract String toString(byte[] value);\n\n","sourceOld":"  /**\n   * Returns a string of a single value in a human-readable format for debugging.\n   * This is used by {@link #toString()}.\n   *\n   * The default implementation encodes the individual byte values.\n   *\n   * @param value single value, never null\n   * @return human readable value for debugging\n   */\n  protected String toString(byte[] value) {\n    assert value != null;\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"binary(\");\n    for (int i = 0; i < value.length; i++) {\n      if (i > 0) {\n        sb.append(' ');\n      }\n      sb.append(Integer.toHexString(value[i] & 0xFF));\n    }\n    sb.append(')');\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(byte[]).mjava","sourceNew":"  /**\n   * Returns a string of a single value in a human-readable format for debugging.\n   * This is used by {@link #toString()}.\n   *\n   * @param value single value, never null\n   * @return human readable value for debugging\n   */\n  protected abstract String toString(byte[] value);\n\n","sourceOld":"  /**\n   * Returns a string of a single value in a human-readable format for debugging.\n   * This is used by {@link #toString()}.\n   *\n   * The default implementation encodes the individual byte values.\n   *\n   * @param value single value, never null\n   * @return human readable value for debugging\n   */\n  protected String toString(byte[] value) {\n    assert value != null;\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"binary(\");\n    for (int i = 0; i < value.length; i++) {\n      if (i > 0) {\n        sb.append(' ');\n      }\n      sb.append(Integer.toHexString(value[i] & 0xFF));\n    }\n    sb.append(')');\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","date":1456306182,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(byte[]).mjava","sourceNew":"  /**\n   * Returns a string of a single value in a human-readable format for debugging.\n   * This is used by {@link #toString()}.\n   *\n   * @param value single value, never null\n   * @return human readable value for debugging\n   */\n  protected abstract String toString(byte[] value);\n\n","sourceOld":"  /**\n   * Returns a string of a single value in a human-readable format for debugging.\n   * This is used by {@link #toString()}.\n   *\n   * The default implementation encodes the individual byte values.\n   *\n   * @param value single value, never null\n   * @return human readable value for debugging\n   */\n  protected String toString(byte[] value) {\n    assert value != null;\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"binary(\");\n    for (int i = 0; i < value.length; i++) {\n      if (i > 0) {\n        sb.append(' ');\n      }\n      sb.append(Integer.toHexString(value[i] & 0xFF));\n    }\n    sb.append(')');\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"609ba4ce51a7095e9815d4fb2666ec85714f8f54","date":1456320705,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(int,byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(byte[]).mjava","sourceNew":"  /**\n   * Returns a string of a single value in a human-readable format for debugging.\n   * This is used by {@link #toString()}.\n   *\n   * @param dimension dimension of the particular value\n   * @param value single value, never null\n   * @return human readable value for debugging\n   */\n  protected abstract String toString(int dimension, byte[] value);\n\n","sourceOld":"  /**\n   * Returns a string of a single value in a human-readable format for debugging.\n   * This is used by {@link #toString()}.\n   *\n   * @param value single value, never null\n   * @return human readable value for debugging\n   */\n  protected abstract String toString(byte[] value);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6","date":1456321728,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(int,byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#toString(byte[]).mjava","sourceNew":"  /**\n   * Returns a string of a single value in a human-readable format for debugging.\n   * This is used by {@link #toString()}.\n   *\n   * @param dimension dimension of the particular value\n   * @param value single value, never null\n   * @return human readable value for debugging\n   */\n  protected abstract String toString(int dimension, byte[] value);\n\n","sourceOld":"  /**\n   * Returns a string of a single value in a human-readable format for debugging.\n   * This is used by {@link #toString()}.\n   *\n   * @param value single value, never null\n   * @return human readable value for debugging\n   */\n  protected abstract String toString(byte[] value);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3104a6ba367dfb690806b227c5ef17c42c6107b":["419a8f52c6635419beb951255cacbbb281044c57"],"609ba4ce51a7095e9815d4fb2666ec85714f8f54":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"419a8f52c6635419beb951255cacbbb281044c57":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","86cab68ee900a31d093b114182b488ea8e85c59d"],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["419a8f52c6635419beb951255cacbbb281044c57","a5296efc4b319f5647b606629c093a94b23692c6"],"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5":["419a8f52c6635419beb951255cacbbb281044c57","d3104a6ba367dfb690806b227c5ef17c42c6107b"],"a5296efc4b319f5647b606629c093a94b23692c6":["419a8f52c6635419beb951255cacbbb281044c57","d3104a6ba367dfb690806b227c5ef17c42c6107b"],"86cab68ee900a31d093b114182b488ea8e85c59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6":["7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","609ba4ce51a7095e9815d4fb2666ec85714f8f54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["609ba4ce51a7095e9815d4fb2666ec85714f8f54"]},"commit2Childs":{"d3104a6ba367dfb690806b227c5ef17c42c6107b":["7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","a5296efc4b319f5647b606629c093a94b23692c6"],"609ba4ce51a7095e9815d4fb2666ec85714f8f54":["1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["419a8f52c6635419beb951255cacbbb281044c57","86cab68ee900a31d093b114182b488ea8e85c59d"],"419a8f52c6635419beb951255cacbbb281044c57":["d3104a6ba367dfb690806b227c5ef17c42c6107b","1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","a5296efc4b319f5647b606629c093a94b23692c6"],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["609ba4ce51a7095e9815d4fb2666ec85714f8f54"],"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5":["1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6"],"a5296efc4b319f5647b606629c093a94b23692c6":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"86cab68ee900a31d093b114182b488ea8e85c59d":["419a8f52c6635419beb951255cacbbb281044c57"],"1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}