{"path":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#appendEscapedTextToBuilder(StringBuilder,String,char).mjava","commits":[{"id":"92751ba9273251eab6a2e379ec42a1697a32ff96","date":1407954233,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#appendEscapedTextToBuilder(StringBuilder,String,char).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * writes chars from item to out, backslash escaping as needed based on separator -- \n   * but does not append the seperator itself\n   */\n  public static void appendEscapedTextToBuilder(StringBuilder out, \n                                                 String item, \n                                                 char separator) {\n    for (int i = 0; i < item.length(); i++) {\n      char ch = item.charAt(i);\n      if (ch == '\\\\' || ch == separator) { \n        out.append('\\\\');\n      }\n      out.append(ch);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"18e7cf5eab4be20c96aa36554daa39b53f43cf6e","date":1490632275,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#appendEscapedTextToBuilder(StringBuilder,String,char).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#appendEscapedTextToBuilder(StringBuilder,String,char).mjava","sourceNew":"  /**\n   * writes chars from item to out, backslash escaping as needed based on separator -- \n   * but does not append the separator itself\n   */\n  public static void appendEscapedTextToBuilder(StringBuilder out, \n                                                 String item, \n                                                 char separator) {\n    for (int i = 0; i < item.length(); i++) {\n      char ch = item.charAt(i);\n      if (ch == '\\\\' || ch == separator) { \n        out.append('\\\\');\n      }\n      out.append(ch);\n    }\n  }\n\n","sourceOld":"  /**\n   * writes chars from item to out, backslash escaping as needed based on separator -- \n   * but does not append the seperator itself\n   */\n  public static void appendEscapedTextToBuilder(StringBuilder out, \n                                                 String item, \n                                                 char separator) {\n    for (int i = 0; i < item.length(); i++) {\n      char ch = item.charAt(i);\n      if (ch == '\\\\' || ch == separator) { \n        out.append('\\\\');\n      }\n      out.append(ch);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"febf4fa8feff6bbc932c1b388cbd758a3e6697f7","date":1490873944,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#appendEscapedTextToBuilder(StringBuilder,String,char).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#appendEscapedTextToBuilder(StringBuilder,String,char).mjava","sourceNew":"  /**\n   * writes chars from item to out, backslash escaping as needed based on separator -- \n   * but does not append the separator itself\n   */\n  public static void appendEscapedTextToBuilder(StringBuilder out, \n                                                 String item, \n                                                 char separator) {\n    for (int i = 0; i < item.length(); i++) {\n      char ch = item.charAt(i);\n      if (ch == '\\\\' || ch == separator) { \n        out.append('\\\\');\n      }\n      out.append(ch);\n    }\n  }\n\n","sourceOld":"  /**\n   * writes chars from item to out, backslash escaping as needed based on separator -- \n   * but does not append the seperator itself\n   */\n  public static void appendEscapedTextToBuilder(StringBuilder out, \n                                                 String item, \n                                                 char separator) {\n    for (int i = 0; i < item.length(); i++) {\n      char ch = item.charAt(i);\n      if (ch == '\\\\' || ch == separator) { \n        out.append('\\\\');\n      }\n      out.append(ch);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8476949555f799dff381770c01cfad051a264487","date":1570505073,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#appendEscapedTextToBuilder(StringBuilder,String,char).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#appendEscapedTextToBuilder(StringBuilder,String,char).mjava","sourceNew":"  /**\n   * writes chars from item to out, backslash escaping as needed based on separator --\n   * but does not append the separator itself\n   */\n  public static void appendEscapedTextToBuilder(StringBuilder out,\n                                                String item,\n                                                char separator) {\n    for (int i = 0; i < item.length(); i++) {\n      char ch = item.charAt(i);\n      if (ch == '\\\\' || ch == separator) {\n        out.append('\\\\');\n      }\n      out.append(ch);\n    }\n  }\n\n","sourceOld":"  /**\n   * writes chars from item to out, backslash escaping as needed based on separator -- \n   * but does not append the separator itself\n   */\n  public static void appendEscapedTextToBuilder(StringBuilder out, \n                                                 String item, \n                                                 char separator) {\n    for (int i = 0; i < item.length(); i++) {\n      char ch = item.charAt(i);\n      if (ch == '\\\\' || ch == separator) { \n        out.append('\\\\');\n      }\n      out.append(ch);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#appendEscapedTextToBuilder(StringBuilder,String,char).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#appendEscapedTextToBuilder(StringBuilder,String,char).mjava","sourceNew":"  /**\n   * writes chars from item to out, backslash escaping as needed based on separator --\n   * but does not append the separator itself\n   */\n  public static void appendEscapedTextToBuilder(StringBuilder out,\n                                                String item,\n                                                char separator) {\n    for (int i = 0; i < item.length(); i++) {\n      char ch = item.charAt(i);\n      if (ch == '\\\\' || ch == separator) {\n        out.append('\\\\');\n      }\n      out.append(ch);\n    }\n  }\n\n","sourceOld":"  /**\n   * writes chars from item to out, backslash escaping as needed based on separator -- \n   * but does not append the separator itself\n   */\n  public static void appendEscapedTextToBuilder(StringBuilder out, \n                                                 String item, \n                                                 char separator) {\n    for (int i = 0; i < item.length(); i++) {\n      char ch = item.charAt(i);\n      if (ch == '\\\\' || ch == separator) { \n        out.append('\\\\');\n      }\n      out.append(ch);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"febf4fa8feff6bbc932c1b388cbd758a3e6697f7":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"18e7cf5eab4be20c96aa36554daa39b53f43cf6e":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"92751ba9273251eab6a2e379ec42a1697a32ff96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8476949555f799dff381770c01cfad051a264487":["18e7cf5eab4be20c96aa36554daa39b53f43cf6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8476949555f799dff381770c01cfad051a264487"],"b0b597c65628ca9e73913a07e81691f8229bae35":["18e7cf5eab4be20c96aa36554daa39b53f43cf6e","8476949555f799dff381770c01cfad051a264487"]},"commit2Childs":{"febf4fa8feff6bbc932c1b388cbd758a3e6697f7":[],"92751ba9273251eab6a2e379ec42a1697a32ff96":["febf4fa8feff6bbc932c1b388cbd758a3e6697f7","18e7cf5eab4be20c96aa36554daa39b53f43cf6e"],"18e7cf5eab4be20c96aa36554daa39b53f43cf6e":["8476949555f799dff381770c01cfad051a264487","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"8476949555f799dff381770c01cfad051a264487":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["febf4fa8feff6bbc932c1b388cbd758a3e6697f7","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}