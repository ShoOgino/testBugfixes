{"path":"lucene/core/src/java/org/apache/lucene/index/MultiTerms#MultiTerms(Terms[],ReaderUtil.Slice[]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiTerms#MultiTerms(Terms[],ReaderUtil.Slice[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiTerms#MultiTerms(Terms[],ReaderUtil.Slice[]).mjava","sourceNew":"  public MultiTerms(Terms[] subs, ReaderUtil.Slice[] subSlices) throws IOException {\n    this.subs = subs;\n    this.subSlices = subSlices;\n    \n    Comparator<BytesRef> _termComp = null;\n    for(int i=0;i<subs.length;i++) {\n      if (_termComp == null) {\n        _termComp = subs[i].getComparator();\n      } else {\n        // We cannot merge sub-readers that have\n        // different TermComps\n        final Comparator<BytesRef> subTermComp = subs[i].getComparator();\n        if (subTermComp != null && !subTermComp.equals(_termComp)) {\n          throw new IllegalStateException(\"sub-readers have different BytesRef.Comparators; cannot merge\");\n        }\n      }\n    }\n\n    termComp = _termComp;\n  }\n\n","sourceOld":"  public MultiTerms(Terms[] subs, ReaderUtil.Slice[] subSlices) throws IOException {\n    this.subs = subs;\n    this.subSlices = subSlices;\n    \n    Comparator<BytesRef> _termComp = null;\n    for(int i=0;i<subs.length;i++) {\n      if (_termComp == null) {\n        _termComp = subs[i].getComparator();\n      } else {\n        // We cannot merge sub-readers that have\n        // different TermComps\n        final Comparator<BytesRef> subTermComp = subs[i].getComparator();\n        if (subTermComp != null && !subTermComp.equals(_termComp)) {\n          throw new IllegalStateException(\"sub-readers have different BytesRef.Comparators; cannot merge\");\n        }\n      }\n    }\n\n    termComp = _termComp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiTerms#MultiTerms(Terms[],ReaderSlice[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiTerms#MultiTerms(Terms[],ReaderUtil.Slice[]).mjava","sourceNew":"  public MultiTerms(Terms[] subs, ReaderSlice[] subSlices) throws IOException {\n    this.subs = subs;\n    this.subSlices = subSlices;\n    \n    Comparator<BytesRef> _termComp = null;\n    for(int i=0;i<subs.length;i++) {\n      if (_termComp == null) {\n        _termComp = subs[i].getComparator();\n      } else {\n        // We cannot merge sub-readers that have\n        // different TermComps\n        final Comparator<BytesRef> subTermComp = subs[i].getComparator();\n        if (subTermComp != null && !subTermComp.equals(_termComp)) {\n          throw new IllegalStateException(\"sub-readers have different BytesRef.Comparators; cannot merge\");\n        }\n      }\n    }\n\n    termComp = _termComp;\n  }\n\n","sourceOld":"  public MultiTerms(Terms[] subs, ReaderUtil.Slice[] subSlices) throws IOException {\n    this.subs = subs;\n    this.subSlices = subSlices;\n    \n    Comparator<BytesRef> _termComp = null;\n    for(int i=0;i<subs.length;i++) {\n      if (_termComp == null) {\n        _termComp = subs[i].getComparator();\n      } else {\n        // We cannot merge sub-readers that have\n        // different TermComps\n        final Comparator<BytesRef> subTermComp = subs[i].getComparator();\n        if (subTermComp != null && !subTermComp.equals(_termComp)) {\n          throw new IllegalStateException(\"sub-readers have different BytesRef.Comparators; cannot merge\");\n        }\n      }\n    }\n\n    termComp = _termComp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"]},"commit2Childs":{"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}