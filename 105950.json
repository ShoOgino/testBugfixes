{"path":"lucene/core/src/test/org/apache/lucene/document/BaseShapeTestCase#verify(Object...).mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/BaseShapeTestCase#verify(Object...).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/BaseShapeTestCase#verify(Object...).mjava","sourceNew":"  private void verify(Object... shapes) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < shapes.length / 100) {\n      iwc.setMaxBufferedDocs(shapes.length / 100);\n    }\n    Directory dir;\n    if (shapes.length > 1000) {\n      dir = newFSDirectory(createTempDir(getClass().getSimpleName()));\n    } else {\n      dir = newDirectory();\n    }\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    // index random polygons\n    indexRandomShapes(w, shapes);\n\n    // query testing\n    final IndexReader reader = DirectoryReader.open(w);\n    // test random bbox queries\n    verifyRandomQueries(reader, shapes);\n    IOUtils.close(w, reader, dir);\n  }\n\n","sourceOld":"  private void verify(Object... shapes) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < shapes.length / 100) {\n      iwc.setMaxBufferedDocs(shapes.length / 100);\n    }\n    Directory dir;\n    if (shapes.length > 1000) {\n      dir = newFSDirectory(createTempDir(getClass().getSimpleName()));\n    } else {\n      dir = newDirectory();\n    }\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    // index random polygons\n    indexRandomShapes(w, shapes);\n\n    // query testing\n    final IndexReader reader = DirectoryReader.open(w);\n    // test random bbox queries\n    verifyRandomQueries(reader, shapes);\n    IOUtils.close(w, reader, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}