{"path":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#mergeThreadCount().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#mergeThreadCount().mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#mergeThreadCount().mjava","sourceNew":"  private synchronized int mergeThreadCount() {\n    int count = 0;\n    final int numThreads = mergeThreads.size();\n    for(int i=0;i<numThreads;i++)\n      if (mergeThreads.get(i).isAlive())\n        count++;\n    return count;\n  }\n\n","sourceOld":"  private synchronized int mergeThreadCount() {\n    int count = 0;\n    final int numThreads = mergeThreads.size();\n    for(int i=0;i<numThreads;i++)\n      if (mergeThreads.get(i).isAlive())\n        count++;\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60679157c78fc286ee35471398529a1e5749621c","date":1292841330,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#mergeThreadCount().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#mergeThreadCount().mjava","sourceNew":"  private synchronized int mergeThreadCount() {\n    int count = 0;\n    final int numThreads = mergeThreads.size();\n    for(int i=0;i<numThreads;i++) {\n      final MergeThread t = mergeThreads.get(i);\n      if (t.isAlive() && t.getCurrentMerge() != null) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n","sourceOld":"  private synchronized int mergeThreadCount() {\n    int count = 0;\n    final int numThreads = mergeThreads.size();\n    for(int i=0;i<numThreads;i++)\n      if (mergeThreads.get(i).isAlive())\n        count++;\n    return count;\n  }\n\n","bugFix":["4e1ce9be74263e9659aad8a6ee1f213193710b71","d5f48f93ebe46929b99824596327a9dc6d6130d9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#mergeThreadCount().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#mergeThreadCount().mjava","sourceNew":"  private synchronized int mergeThreadCount() {\n    int count = 0;\n    final int numThreads = mergeThreads.size();\n    for(int i=0;i<numThreads;i++) {\n      final MergeThread t = mergeThreads.get(i);\n      if (t.isAlive() && t.getCurrentMerge() != null) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n","sourceOld":"  private synchronized int mergeThreadCount() {\n    int count = 0;\n    final int numThreads = mergeThreads.size();\n    for(int i=0;i<numThreads;i++)\n      if (mergeThreads.get(i).isAlive())\n        count++;\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#mergeThreadCount().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#mergeThreadCount().mjava","sourceNew":"  private synchronized int mergeThreadCount() {\n    int count = 0;\n    final int numThreads = mergeThreads.size();\n    for(int i=0;i<numThreads;i++) {\n      final MergeThread t = mergeThreads.get(i);\n      if (t.isAlive() && t.getCurrentMerge() != null) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n","sourceOld":"  private synchronized int mergeThreadCount() {\n    int count = 0;\n    final int numThreads = mergeThreads.size();\n    for(int i=0;i<numThreads;i++)\n      if (mergeThreads.get(i).isAlive())\n        count++;\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abba363b04df5f50b5ec36177b5cd17c3fe73d6b","date":1295268568,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#mergeThreadCount().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#mergeThreadCount().mjava","sourceNew":"  /**\n   * Returns the number of merge threads that are alive. Note that this number\n   * is &le; {@link #mergeThreads} size.\n   */\n  protected synchronized int mergeThreadCount() {\n    int count = 0;\n    for (MergeThread mt : mergeThreads) {\n      if (mt.isAlive()) count++;\n    }\n    return count;\n  }\n\n","sourceOld":"  private synchronized int mergeThreadCount() {\n    int count = 0;\n    final int numThreads = mergeThreads.size();\n    for(int i=0;i<numThreads;i++) {\n      final MergeThread t = mergeThreads.get(i);\n      if (t.isAlive() && t.getCurrentMerge() != null) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":["c6cc2915889370c9313ee1741da315e976bdd574"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5451c3a3b069da464a9354b2c631345c8240a983","date":1295367120,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#mergeThreadCount().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#mergeThreadCount().mjava","sourceNew":"  /**\n   * Returns the number of merge threads that are alive. Note that this number\n   * is &le; {@link #mergeThreads} size.\n   */\n  protected synchronized int mergeThreadCount() {\n    int count = 0;\n    for (MergeThread mt : mergeThreads) {\n      if (mt.isAlive() && mt.getCurrentMerge() != null) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n","sourceOld":"  /**\n   * Returns the number of merge threads that are alive. Note that this number\n   * is &le; {@link #mergeThreads} size.\n   */\n  protected synchronized int mergeThreadCount() {\n    int count = 0;\n    for (MergeThread mt : mergeThreads) {\n      if (mt.isAlive()) count++;\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":["a1346c5dacb766a49ec3b6160a23d2e80073501c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#mergeThreadCount().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#mergeThreadCount().mjava","sourceNew":"  /**\n   * Returns the number of merge threads that are alive. Note that this number\n   * is &le; {@link #mergeThreads} size.\n   */\n  protected synchronized int mergeThreadCount() {\n    int count = 0;\n    for (MergeThread mt : mergeThreads) {\n      if (mt.isAlive() && mt.getCurrentMerge() != null) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n","sourceOld":"  private synchronized int mergeThreadCount() {\n    int count = 0;\n    final int numThreads = mergeThreads.size();\n    for(int i=0;i<numThreads;i++) {\n      final MergeThread t = mergeThreads.get(i);\n      if (t.isAlive() && t.getCurrentMerge() != null) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#mergeThreadCount().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#mergeThreadCount().mjava","sourceNew":"  /**\n   * Returns the number of merge threads that are alive. Note that this number\n   * is &le; {@link #mergeThreads} size.\n   */\n  protected synchronized int mergeThreadCount() {\n    int count = 0;\n    for (MergeThread mt : mergeThreads) {\n      if (mt.isAlive() && mt.getCurrentMerge() != null) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n","sourceOld":"  private synchronized int mergeThreadCount() {\n    int count = 0;\n    final int numThreads = mergeThreads.size();\n    for(int i=0;i<numThreads;i++) {\n      final MergeThread t = mergeThreads.get(i);\n      if (t.isAlive() && t.getCurrentMerge() != null) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#mergeThreadCount().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#mergeThreadCount().mjava","sourceNew":"  /**\n   * Returns the number of merge threads that are alive. Note that this number\n   * is &le; {@link #mergeThreads} size.\n   */\n  protected synchronized int mergeThreadCount() {\n    int count = 0;\n    for (MergeThread mt : mergeThreads) {\n      if (mt.isAlive() && mt.getCurrentMerge() != null) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n","sourceOld":"  /**\n   * Returns the number of merge threads that are alive. Note that this number\n   * is &le; {@link #mergeThreads} size.\n   */\n  protected synchronized int mergeThreadCount() {\n    int count = 0;\n    for (MergeThread mt : mergeThreads) {\n      if (mt.isAlive() && mt.getCurrentMerge() != null) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["9454a6510e2db155fb01faa5c049b06ece95fab9","60679157c78fc286ee35471398529a1e5749621c"],"5451c3a3b069da464a9354b2c631345c8240a983":["abba363b04df5f50b5ec36177b5cd17c3fe73d6b"],"60679157c78fc286ee35471398529a1e5749621c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5451c3a3b069da464a9354b2c631345c8240a983"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","5451c3a3b069da464a9354b2c631345c8240a983"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"abba363b04df5f50b5ec36177b5cd17c3fe73d6b":["60679157c78fc286ee35471398529a1e5749621c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","60679157c78fc286ee35471398529a1e5749621c"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5451c3a3b069da464a9354b2c631345c8240a983"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"60679157c78fc286ee35471398529a1e5749621c":["70ad682703b8585f5d0a637efec044d57ec05efb","abba363b04df5f50b5ec36177b5cd17c3fe73d6b","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"5451c3a3b069da464a9354b2c631345c8240a983":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"abba363b04df5f50b5ec36177b5cd17c3fe73d6b":["5451c3a3b069da464a9354b2c631345c8240a983"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["70ad682703b8585f5d0a637efec044d57ec05efb","60679157c78fc286ee35471398529a1e5749621c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}