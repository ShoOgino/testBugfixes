{"path":"src/java/org/apache/lucene/index/SegmentMerger#mergeTermInfos().mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#mergeTermInfos().mjava","pathOld":"/dev/null","sourceNew":"  private final void mergeTermInfos() throws IOException {\n    queue = new SegmentMergeQueue(readers.size());\n    int base = 0;\n    for (int i = 0; i < readers.size(); i++) {\n      SegmentReader reader = (SegmentReader)readers.elementAt(i);\n      SegmentTermEnum termEnum = (SegmentTermEnum)reader.terms();\n      SegmentMergeInfo smi = new SegmentMergeInfo(base, termEnum, reader);\n      base += reader.numDocs();\n      if (smi.next())\n\tqueue.put(smi);\t\t\t\t  // initialize queue\n      else\n\tsmi.close();\n    }\n\n    SegmentMergeInfo[] match = new SegmentMergeInfo[readers.size()];\n    \n    while (queue.size() > 0) {\n      int matchSize = 0;\t\t\t  // pop matching terms\n      match[matchSize++] = (SegmentMergeInfo)queue.pop();\n      Term term = match[0].term;\n      SegmentMergeInfo top = (SegmentMergeInfo)queue.top();\n      \n      while (top != null && term.compareTo(top.term) == 0) {\n\tmatch[matchSize++] = (SegmentMergeInfo)queue.pop();\n\ttop = (SegmentMergeInfo)queue.top();\n      }\n\n      mergeTermInfo(match, matchSize);\t\t  // add new TermInfo\n      \n      while (matchSize > 0) {\n\tSegmentMergeInfo smi = match[--matchSize];\n\tif (smi.next())\n\t  queue.put(smi);\t\t\t  // restore queue\n\telse\n\t  smi.close();\t\t\t\t  // done with a segment\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["346d5897e4c4e77ed5dbd31f7730ff30973d5971","1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1","date":1064527311,"type":3,"author":"Dmitry Serebrennikov","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#mergeTermInfos().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#mergeTermInfos().mjava","sourceNew":"  private final void mergeTermInfos() throws IOException {\n    queue = new SegmentMergeQueue(readers.size());\n    int base = 0;\n    for (int i = 0; i < readers.size(); i++) {\n      SegmentReader reader = (SegmentReader)readers.elementAt(i);\n      SegmentTermEnum termEnum = (SegmentTermEnum)reader.terms();\n      SegmentMergeInfo smi = new SegmentMergeInfo(base, termEnum, reader);\n      base += reader.numDocs();\n      if (smi.next())\n        queue.put(smi);\t\t\t\t  // initialize queue\n      else\n        smi.close();\n    }\n\n    SegmentMergeInfo[] match = new SegmentMergeInfo[readers.size()];\n    \n    while (queue.size() > 0) {\n      int matchSize = 0;\t\t\t  // pop matching terms\n      match[matchSize++] = (SegmentMergeInfo)queue.pop();\n      Term term = match[0].term;\n      SegmentMergeInfo top = (SegmentMergeInfo)queue.top();\n      \n      while (top != null && term.compareTo(top.term) == 0) {\n        match[matchSize++] = (SegmentMergeInfo)queue.pop();\n        top = (SegmentMergeInfo)queue.top();\n      }\n\n      mergeTermInfo(match, matchSize);\t\t  // add new TermInfo\n      \n      while (matchSize > 0) {\n        SegmentMergeInfo smi = match[--matchSize];\n        if (smi.next())\n          queue.put(smi);\t\t\t  // restore queue\n        else\n          smi.close();\t\t\t\t  // done with a segment\n      }\n    }\n  }\n\n","sourceOld":"  private final void mergeTermInfos() throws IOException {\n    queue = new SegmentMergeQueue(readers.size());\n    int base = 0;\n    for (int i = 0; i < readers.size(); i++) {\n      SegmentReader reader = (SegmentReader)readers.elementAt(i);\n      SegmentTermEnum termEnum = (SegmentTermEnum)reader.terms();\n      SegmentMergeInfo smi = new SegmentMergeInfo(base, termEnum, reader);\n      base += reader.numDocs();\n      if (smi.next())\n\tqueue.put(smi);\t\t\t\t  // initialize queue\n      else\n\tsmi.close();\n    }\n\n    SegmentMergeInfo[] match = new SegmentMergeInfo[readers.size()];\n    \n    while (queue.size() > 0) {\n      int matchSize = 0;\t\t\t  // pop matching terms\n      match[matchSize++] = (SegmentMergeInfo)queue.pop();\n      Term term = match[0].term;\n      SegmentMergeInfo top = (SegmentMergeInfo)queue.top();\n      \n      while (top != null && term.compareTo(top.term) == 0) {\n\tmatch[matchSize++] = (SegmentMergeInfo)queue.pop();\n\ttop = (SegmentMergeInfo)queue.top();\n      }\n\n      mergeTermInfo(match, matchSize);\t\t  // add new TermInfo\n      \n      while (matchSize > 0) {\n\tSegmentMergeInfo smi = match[--matchSize];\n\tif (smi.next())\n\t  queue.put(smi);\t\t\t  // restore queue\n\telse\n\t  smi.close();\t\t\t\t  // done with a segment\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7fb6d70db034a5456ae560175dd1b821eea9ff4","date":1066759157,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#mergeTermInfos().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#mergeTermInfos().mjava","sourceNew":"  private final void mergeTermInfos() throws IOException {\n    queue = new SegmentMergeQueue(readers.size());\n    int base = 0;\n    for (int i = 0; i < readers.size(); i++) {\n      IndexReader reader = (IndexReader)readers.elementAt(i);\n      TermEnum termEnum = reader.terms();\n      SegmentMergeInfo smi = new SegmentMergeInfo(base, termEnum, reader);\n      base += reader.numDocs();\n      if (smi.next())\n        queue.put(smi);\t\t\t\t  // initialize queue\n      else\n        smi.close();\n    }\n\n    SegmentMergeInfo[] match = new SegmentMergeInfo[readers.size()];\n    \n    while (queue.size() > 0) {\n      int matchSize = 0;\t\t\t  // pop matching terms\n      match[matchSize++] = (SegmentMergeInfo)queue.pop();\n      Term term = match[0].term;\n      SegmentMergeInfo top = (SegmentMergeInfo)queue.top();\n      \n      while (top != null && term.compareTo(top.term) == 0) {\n        match[matchSize++] = (SegmentMergeInfo)queue.pop();\n        top = (SegmentMergeInfo)queue.top();\n      }\n\n      mergeTermInfo(match, matchSize);\t\t  // add new TermInfo\n      \n      while (matchSize > 0) {\n        SegmentMergeInfo smi = match[--matchSize];\n        if (smi.next())\n          queue.put(smi);\t\t\t  // restore queue\n        else\n          smi.close();\t\t\t\t  // done with a segment\n      }\n    }\n  }\n\n","sourceOld":"  private final void mergeTermInfos() throws IOException {\n    queue = new SegmentMergeQueue(readers.size());\n    int base = 0;\n    for (int i = 0; i < readers.size(); i++) {\n      SegmentReader reader = (SegmentReader)readers.elementAt(i);\n      SegmentTermEnum termEnum = (SegmentTermEnum)reader.terms();\n      SegmentMergeInfo smi = new SegmentMergeInfo(base, termEnum, reader);\n      base += reader.numDocs();\n      if (smi.next())\n        queue.put(smi);\t\t\t\t  // initialize queue\n      else\n        smi.close();\n    }\n\n    SegmentMergeInfo[] match = new SegmentMergeInfo[readers.size()];\n    \n    while (queue.size() > 0) {\n      int matchSize = 0;\t\t\t  // pop matching terms\n      match[matchSize++] = (SegmentMergeInfo)queue.pop();\n      Term term = match[0].term;\n      SegmentMergeInfo top = (SegmentMergeInfo)queue.top();\n      \n      while (top != null && term.compareTo(top.term) == 0) {\n        match[matchSize++] = (SegmentMergeInfo)queue.pop();\n        top = (SegmentMergeInfo)queue.top();\n      }\n\n      mergeTermInfo(match, matchSize);\t\t  // add new TermInfo\n      \n      while (matchSize > 0) {\n        SegmentMergeInfo smi = match[--matchSize];\n        if (smi.next())\n          queue.put(smi);\t\t\t  // restore queue\n        else\n          smi.close();\t\t\t\t  // done with a segment\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#mergeTermInfos().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#mergeTermInfos().mjava","sourceNew":"  private final void mergeTermInfos() throws IOException {\n    queue = new SegmentMergeQueue(readers.size());\n    int base = 0;\n    for (int i = 0; i < readers.size(); i++) {\n      IndexReader reader = (IndexReader) readers.elementAt(i);\n      TermEnum termEnum = reader.terms();\n      SegmentMergeInfo smi = new SegmentMergeInfo(base, termEnum, reader);\n      base += reader.numDocs();\n      if (smi.next())\n        queue.put(smi);\t\t\t\t  // initialize queue\n      else\n        smi.close();\n    }\n\n    SegmentMergeInfo[] match = new SegmentMergeInfo[readers.size()];\n\n    while (queue.size() > 0) {\n      int matchSize = 0;\t\t\t  // pop matching terms\n      match[matchSize++] = (SegmentMergeInfo) queue.pop();\n      Term term = match[0].term;\n      SegmentMergeInfo top = (SegmentMergeInfo) queue.top();\n\n      while (top != null && term.compareTo(top.term) == 0) {\n        match[matchSize++] = (SegmentMergeInfo) queue.pop();\n        top = (SegmentMergeInfo) queue.top();\n      }\n\n      mergeTermInfo(match, matchSize);\t\t  // add new TermInfo\n\n      while (matchSize > 0) {\n        SegmentMergeInfo smi = match[--matchSize];\n        if (smi.next())\n          queue.put(smi);\t\t\t  // restore queue\n        else\n          smi.close();\t\t\t\t  // done with a segment\n      }\n    }\n  }\n\n","sourceOld":"  private final void mergeTermInfos() throws IOException {\n    queue = new SegmentMergeQueue(readers.size());\n    int base = 0;\n    for (int i = 0; i < readers.size(); i++) {\n      IndexReader reader = (IndexReader)readers.elementAt(i);\n      TermEnum termEnum = reader.terms();\n      SegmentMergeInfo smi = new SegmentMergeInfo(base, termEnum, reader);\n      base += reader.numDocs();\n      if (smi.next())\n        queue.put(smi);\t\t\t\t  // initialize queue\n      else\n        smi.close();\n    }\n\n    SegmentMergeInfo[] match = new SegmentMergeInfo[readers.size()];\n    \n    while (queue.size() > 0) {\n      int matchSize = 0;\t\t\t  // pop matching terms\n      match[matchSize++] = (SegmentMergeInfo)queue.pop();\n      Term term = match[0].term;\n      SegmentMergeInfo top = (SegmentMergeInfo)queue.top();\n      \n      while (top != null && term.compareTo(top.term) == 0) {\n        match[matchSize++] = (SegmentMergeInfo)queue.pop();\n        top = (SegmentMergeInfo)queue.top();\n      }\n\n      mergeTermInfo(match, matchSize);\t\t  // add new TermInfo\n      \n      while (matchSize > 0) {\n        SegmentMergeInfo smi = match[--matchSize];\n        if (smi.next())\n          queue.put(smi);\t\t\t  // restore queue\n        else\n          smi.close();\t\t\t\t  // done with a segment\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f5cf8ed8dfc080044944e2cabac618bc36199013","date":1082468878,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#mergeTermInfos().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#mergeTermInfos().mjava","sourceNew":"  private final void mergeTermInfos() throws IOException {\n    int base = 0;\n    for (int i = 0; i < readers.size(); i++) {\n      IndexReader reader = (IndexReader) readers.elementAt(i);\n      TermEnum termEnum = reader.terms();\n      SegmentMergeInfo smi = new SegmentMergeInfo(base, termEnum, reader);\n      base += reader.numDocs();\n      if (smi.next())\n        queue.put(smi);\t\t\t\t  // initialize queue\n      else\n        smi.close();\n    }\n\n    SegmentMergeInfo[] match = new SegmentMergeInfo[readers.size()];\n\n    while (queue.size() > 0) {\n      int matchSize = 0;\t\t\t  // pop matching terms\n      match[matchSize++] = (SegmentMergeInfo) queue.pop();\n      Term term = match[0].term;\n      SegmentMergeInfo top = (SegmentMergeInfo) queue.top();\n\n      while (top != null && term.compareTo(top.term) == 0) {\n        match[matchSize++] = (SegmentMergeInfo) queue.pop();\n        top = (SegmentMergeInfo) queue.top();\n      }\n\n      mergeTermInfo(match, matchSize);\t\t  // add new TermInfo\n\n      while (matchSize > 0) {\n        SegmentMergeInfo smi = match[--matchSize];\n        if (smi.next())\n          queue.put(smi);\t\t\t  // restore queue\n        else\n          smi.close();\t\t\t\t  // done with a segment\n      }\n    }\n  }\n\n","sourceOld":"  private final void mergeTermInfos() throws IOException {\n    queue = new SegmentMergeQueue(readers.size());\n    int base = 0;\n    for (int i = 0; i < readers.size(); i++) {\n      IndexReader reader = (IndexReader) readers.elementAt(i);\n      TermEnum termEnum = reader.terms();\n      SegmentMergeInfo smi = new SegmentMergeInfo(base, termEnum, reader);\n      base += reader.numDocs();\n      if (smi.next())\n        queue.put(smi);\t\t\t\t  // initialize queue\n      else\n        smi.close();\n    }\n\n    SegmentMergeInfo[] match = new SegmentMergeInfo[readers.size()];\n\n    while (queue.size() > 0) {\n      int matchSize = 0;\t\t\t  // pop matching terms\n      match[matchSize++] = (SegmentMergeInfo) queue.pop();\n      Term term = match[0].term;\n      SegmentMergeInfo top = (SegmentMergeInfo) queue.top();\n\n      while (top != null && term.compareTo(top.term) == 0) {\n        match[matchSize++] = (SegmentMergeInfo) queue.pop();\n        top = (SegmentMergeInfo) queue.top();\n      }\n\n      mergeTermInfo(match, matchSize);\t\t  // add new TermInfo\n\n      while (matchSize > 0) {\n        SegmentMergeInfo smi = match[--matchSize];\n        if (smi.next())\n          queue.put(smi);\t\t\t  // restore queue\n        else\n          smi.close();\t\t\t\t  // done with a segment\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#mergeTermInfos().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#mergeTermInfos().mjava","sourceNew":"  private final void mergeTermInfos() throws CorruptIndexException, IOException {\n    int base = 0;\n    for (int i = 0; i < readers.size(); i++) {\n      IndexReader reader = (IndexReader) readers.elementAt(i);\n      TermEnum termEnum = reader.terms();\n      SegmentMergeInfo smi = new SegmentMergeInfo(base, termEnum, reader);\n      base += reader.numDocs();\n      if (smi.next())\n        queue.put(smi);\t\t\t\t  // initialize queue\n      else\n        smi.close();\n    }\n\n    SegmentMergeInfo[] match = new SegmentMergeInfo[readers.size()];\n\n    while (queue.size() > 0) {\n      int matchSize = 0;\t\t\t  // pop matching terms\n      match[matchSize++] = (SegmentMergeInfo) queue.pop();\n      Term term = match[0].term;\n      SegmentMergeInfo top = (SegmentMergeInfo) queue.top();\n\n      while (top != null && term.compareTo(top.term) == 0) {\n        match[matchSize++] = (SegmentMergeInfo) queue.pop();\n        top = (SegmentMergeInfo) queue.top();\n      }\n\n      mergeTermInfo(match, matchSize);\t\t  // add new TermInfo\n\n      while (matchSize > 0) {\n        SegmentMergeInfo smi = match[--matchSize];\n        if (smi.next())\n          queue.put(smi);\t\t\t  // restore queue\n        else\n          smi.close();\t\t\t\t  // done with a segment\n      }\n    }\n  }\n\n","sourceOld":"  private final void mergeTermInfos() throws IOException {\n    int base = 0;\n    for (int i = 0; i < readers.size(); i++) {\n      IndexReader reader = (IndexReader) readers.elementAt(i);\n      TermEnum termEnum = reader.terms();\n      SegmentMergeInfo smi = new SegmentMergeInfo(base, termEnum, reader);\n      base += reader.numDocs();\n      if (smi.next())\n        queue.put(smi);\t\t\t\t  // initialize queue\n      else\n        smi.close();\n    }\n\n    SegmentMergeInfo[] match = new SegmentMergeInfo[readers.size()];\n\n    while (queue.size() > 0) {\n      int matchSize = 0;\t\t\t  // pop matching terms\n      match[matchSize++] = (SegmentMergeInfo) queue.pop();\n      Term term = match[0].term;\n      SegmentMergeInfo top = (SegmentMergeInfo) queue.top();\n\n      while (top != null && term.compareTo(top.term) == 0) {\n        match[matchSize++] = (SegmentMergeInfo) queue.pop();\n        top = (SegmentMergeInfo) queue.top();\n      }\n\n      mergeTermInfo(match, matchSize);\t\t  // add new TermInfo\n\n      while (matchSize > 0) {\n        SegmentMergeInfo smi = match[--matchSize];\n        if (smi.next())\n          queue.put(smi);\t\t\t  // restore queue\n        else\n          smi.close();\t\t\t\t  // done with a segment\n      }\n    }\n  }\n\n","bugFix":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"346d5897e4c4e77ed5dbd31f7730ff30973d5971","date":1198317988,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#mergeTermInfos().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#mergeTermInfos().mjava","sourceNew":"  private final void mergeTermInfos() throws CorruptIndexException, IOException {\n    int base = 0;\n    for (int i = 0; i < readers.size(); i++) {\n      IndexReader reader = (IndexReader) readers.elementAt(i);\n      TermEnum termEnum = reader.terms();\n      SegmentMergeInfo smi = new SegmentMergeInfo(base, termEnum, reader);\n      base += reader.numDocs();\n      if (smi.next())\n        queue.put(smi);\t\t\t\t  // initialize queue\n      else\n        smi.close();\n    }\n\n    SegmentMergeInfo[] match = new SegmentMergeInfo[readers.size()];\n\n    while (queue.size() > 0) {\n      int matchSize = 0;\t\t\t  // pop matching terms\n      match[matchSize++] = (SegmentMergeInfo) queue.pop();\n      Term term = match[0].term;\n      SegmentMergeInfo top = (SegmentMergeInfo) queue.top();\n\n      while (top != null && term.compareTo(top.term) == 0) {\n        match[matchSize++] = (SegmentMergeInfo) queue.pop();\n        top = (SegmentMergeInfo) queue.top();\n      }\n\n      final int df = mergeTermInfo(match, matchSize);\t\t  // add new TermInfo\n\n      if (checkAbort != null)\n        checkAbort.work(df/3.0);\n\n      while (matchSize > 0) {\n        SegmentMergeInfo smi = match[--matchSize];\n        if (smi.next())\n          queue.put(smi);\t\t\t  // restore queue\n        else\n          smi.close();\t\t\t\t  // done with a segment\n      }\n    }\n  }\n\n","sourceOld":"  private final void mergeTermInfos() throws CorruptIndexException, IOException {\n    int base = 0;\n    for (int i = 0; i < readers.size(); i++) {\n      IndexReader reader = (IndexReader) readers.elementAt(i);\n      TermEnum termEnum = reader.terms();\n      SegmentMergeInfo smi = new SegmentMergeInfo(base, termEnum, reader);\n      base += reader.numDocs();\n      if (smi.next())\n        queue.put(smi);\t\t\t\t  // initialize queue\n      else\n        smi.close();\n    }\n\n    SegmentMergeInfo[] match = new SegmentMergeInfo[readers.size()];\n\n    while (queue.size() > 0) {\n      int matchSize = 0;\t\t\t  // pop matching terms\n      match[matchSize++] = (SegmentMergeInfo) queue.pop();\n      Term term = match[0].term;\n      SegmentMergeInfo top = (SegmentMergeInfo) queue.top();\n\n      while (top != null && term.compareTo(top.term) == 0) {\n        match[matchSize++] = (SegmentMergeInfo) queue.pop();\n        top = (SegmentMergeInfo) queue.top();\n      }\n\n      mergeTermInfo(match, matchSize);\t\t  // add new TermInfo\n\n      while (matchSize > 0) {\n        SegmentMergeInfo smi = match[--matchSize];\n        if (smi.next())\n          queue.put(smi);\t\t\t  // restore queue\n        else\n          smi.close();\t\t\t\t  // done with a segment\n      }\n    }\n  }\n\n","bugFix":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be","date":1204801324,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#mergeTermInfos().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#mergeTermInfos().mjava","sourceNew":"  private final void mergeTermInfos() throws CorruptIndexException, IOException {\n    int base = 0;\n    final int readerCount = readers.size();\n    for (int i = 0; i < readerCount; i++) {\n      IndexReader reader = (IndexReader) readers.elementAt(i);\n      TermEnum termEnum = reader.terms();\n      SegmentMergeInfo smi = new SegmentMergeInfo(base, termEnum, reader);\n      int[] docMap  = smi.getDocMap();\n      if (docMap != null) {\n        if (docMaps == null) {\n          docMaps = new int[readerCount][];\n          delCounts = new int[readerCount];\n        }\n        docMaps[i] = docMap;\n        delCounts[i] = smi.reader.maxDoc() - smi.reader.numDocs();\n      }\n\n      base += reader.numDocs();\n      if (smi.next())\n        queue.put(smi);\t\t\t\t  // initialize queue\n      else\n        smi.close();\n    }\n\n    SegmentMergeInfo[] match = new SegmentMergeInfo[readers.size()];\n\n    while (queue.size() > 0) {\n      int matchSize = 0;\t\t\t  // pop matching terms\n      match[matchSize++] = (SegmentMergeInfo) queue.pop();\n      Term term = match[0].term;\n      SegmentMergeInfo top = (SegmentMergeInfo) queue.top();\n\n      while (top != null && term.compareTo(top.term) == 0) {\n        match[matchSize++] = (SegmentMergeInfo) queue.pop();\n        top = (SegmentMergeInfo) queue.top();\n      }\n\n      final int df = mergeTermInfo(match, matchSize);\t\t  // add new TermInfo\n\n      if (checkAbort != null)\n        checkAbort.work(df/3.0);\n\n      while (matchSize > 0) {\n        SegmentMergeInfo smi = match[--matchSize];\n        if (smi.next())\n          queue.put(smi);\t\t\t  // restore queue\n        else\n          smi.close();\t\t\t\t  // done with a segment\n      }\n    }\n  }\n\n","sourceOld":"  private final void mergeTermInfos() throws CorruptIndexException, IOException {\n    int base = 0;\n    for (int i = 0; i < readers.size(); i++) {\n      IndexReader reader = (IndexReader) readers.elementAt(i);\n      TermEnum termEnum = reader.terms();\n      SegmentMergeInfo smi = new SegmentMergeInfo(base, termEnum, reader);\n      base += reader.numDocs();\n      if (smi.next())\n        queue.put(smi);\t\t\t\t  // initialize queue\n      else\n        smi.close();\n    }\n\n    SegmentMergeInfo[] match = new SegmentMergeInfo[readers.size()];\n\n    while (queue.size() > 0) {\n      int matchSize = 0;\t\t\t  // pop matching terms\n      match[matchSize++] = (SegmentMergeInfo) queue.pop();\n      Term term = match[0].term;\n      SegmentMergeInfo top = (SegmentMergeInfo) queue.top();\n\n      while (top != null && term.compareTo(top.term) == 0) {\n        match[matchSize++] = (SegmentMergeInfo) queue.pop();\n        top = (SegmentMergeInfo) queue.top();\n      }\n\n      final int df = mergeTermInfo(match, matchSize);\t\t  // add new TermInfo\n\n      if (checkAbort != null)\n        checkAbort.work(df/3.0);\n\n      while (matchSize > 0) {\n        SegmentMergeInfo smi = match[--matchSize];\n        if (smi.next())\n          queue.put(smi);\t\t\t  // restore queue\n        else\n          smi.close();\t\t\t\t  // done with a segment\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7b6cdc70e097da94da79a655ed8f94477ff69f5","date":1220815360,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#mergeTermInfos().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#mergeTermInfos().mjava","sourceNew":"  private final void mergeTermInfos() throws CorruptIndexException, IOException {\n    int base = 0;\n    final int readerCount = readers.size();\n    for (int i = 0; i < readerCount; i++) {\n      IndexReader reader = (IndexReader) readers.get(i);\n      TermEnum termEnum = reader.terms();\n      SegmentMergeInfo smi = new SegmentMergeInfo(base, termEnum, reader);\n      int[] docMap  = smi.getDocMap();\n      if (docMap != null) {\n        if (docMaps == null) {\n          docMaps = new int[readerCount][];\n          delCounts = new int[readerCount];\n        }\n        docMaps[i] = docMap;\n        delCounts[i] = smi.reader.maxDoc() - smi.reader.numDocs();\n      }\n\n      base += reader.numDocs();\n      if (smi.next())\n        queue.put(smi);\t\t\t\t  // initialize queue\n      else\n        smi.close();\n    }\n\n    SegmentMergeInfo[] match = new SegmentMergeInfo[readers.size()];\n\n    while (queue.size() > 0) {\n      int matchSize = 0;\t\t\t  // pop matching terms\n      match[matchSize++] = (SegmentMergeInfo) queue.pop();\n      Term term = match[0].term;\n      SegmentMergeInfo top = (SegmentMergeInfo) queue.top();\n\n      while (top != null && term.compareTo(top.term) == 0) {\n        match[matchSize++] = (SegmentMergeInfo) queue.pop();\n        top = (SegmentMergeInfo) queue.top();\n      }\n\n      final int df = mergeTermInfo(match, matchSize);\t\t  // add new TermInfo\n\n      if (checkAbort != null)\n        checkAbort.work(df/3.0);\n\n      while (matchSize > 0) {\n        SegmentMergeInfo smi = match[--matchSize];\n        if (smi.next())\n          queue.put(smi);\t\t\t  // restore queue\n        else\n          smi.close();\t\t\t\t  // done with a segment\n      }\n    }\n  }\n\n","sourceOld":"  private final void mergeTermInfos() throws CorruptIndexException, IOException {\n    int base = 0;\n    final int readerCount = readers.size();\n    for (int i = 0; i < readerCount; i++) {\n      IndexReader reader = (IndexReader) readers.elementAt(i);\n      TermEnum termEnum = reader.terms();\n      SegmentMergeInfo smi = new SegmentMergeInfo(base, termEnum, reader);\n      int[] docMap  = smi.getDocMap();\n      if (docMap != null) {\n        if (docMaps == null) {\n          docMaps = new int[readerCount][];\n          delCounts = new int[readerCount];\n        }\n        docMaps[i] = docMap;\n        delCounts[i] = smi.reader.maxDoc() - smi.reader.numDocs();\n      }\n\n      base += reader.numDocs();\n      if (smi.next())\n        queue.put(smi);\t\t\t\t  // initialize queue\n      else\n        smi.close();\n    }\n\n    SegmentMergeInfo[] match = new SegmentMergeInfo[readers.size()];\n\n    while (queue.size() > 0) {\n      int matchSize = 0;\t\t\t  // pop matching terms\n      match[matchSize++] = (SegmentMergeInfo) queue.pop();\n      Term term = match[0].term;\n      SegmentMergeInfo top = (SegmentMergeInfo) queue.top();\n\n      while (top != null && term.compareTo(top.term) == 0) {\n        match[matchSize++] = (SegmentMergeInfo) queue.pop();\n        top = (SegmentMergeInfo) queue.top();\n      }\n\n      final int df = mergeTermInfo(match, matchSize);\t\t  // add new TermInfo\n\n      if (checkAbort != null)\n        checkAbort.work(df/3.0);\n\n      while (matchSize > 0) {\n        SegmentMergeInfo smi = match[--matchSize];\n        if (smi.next())\n          queue.put(smi);\t\t\t  // restore queue\n        else\n          smi.close();\t\t\t\t  // done with a segment\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d17492f26096e19670d947d1be5e9adc52b1d3d","date":1224931200,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#mergeTermInfos(FormatPostingsFieldsConsumer).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#mergeTermInfos().mjava","sourceNew":"  private final void mergeTermInfos(final FormatPostingsFieldsConsumer consumer) throws CorruptIndexException, IOException {\n    int base = 0;\n    final int readerCount = readers.size();\n    for (int i = 0; i < readerCount; i++) {\n      IndexReader reader = (IndexReader) readers.get(i);\n      TermEnum termEnum = reader.terms();\n      SegmentMergeInfo smi = new SegmentMergeInfo(base, termEnum, reader);\n      int[] docMap  = smi.getDocMap();\n      if (docMap != null) {\n        if (docMaps == null) {\n          docMaps = new int[readerCount][];\n          delCounts = new int[readerCount];\n        }\n        docMaps[i] = docMap;\n        delCounts[i] = smi.reader.maxDoc() - smi.reader.numDocs();\n      }\n\n      base += reader.numDocs();\n      if (smi.next())\n        queue.put(smi);\t\t\t\t  // initialize queue\n      else\n        smi.close();\n    }\n\n    SegmentMergeInfo[] match = new SegmentMergeInfo[readers.size()];\n\n    String currentField = null;\n    FormatPostingsTermsConsumer termsConsumer = null;\n\n    while (queue.size() > 0) {\n      int matchSize = 0;\t\t\t  // pop matching terms\n      match[matchSize++] = (SegmentMergeInfo) queue.pop();\n      Term term = match[0].term;\n      SegmentMergeInfo top = (SegmentMergeInfo) queue.top();\n\n      while (top != null && term.compareTo(top.term) == 0) {\n        match[matchSize++] = (SegmentMergeInfo) queue.pop();\n        top = (SegmentMergeInfo) queue.top();\n      }\n\n      if (currentField != term.field) {\n        currentField = term.field;\n        if (termsConsumer != null)\n          termsConsumer.finish();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(currentField);\n        termsConsumer = consumer.addField(fieldInfo);\n        omitTF = fieldInfo.omitTf;\n      }\n\n      int df = appendPostings(termsConsumer, match, matchSize);\t\t  // add new TermInfo\n\n      if (checkAbort != null)\n        checkAbort.work(df/3.0);\n\n      while (matchSize > 0) {\n        SegmentMergeInfo smi = match[--matchSize];\n        if (smi.next())\n          queue.put(smi);\t\t\t  // restore queue\n        else\n          smi.close();\t\t\t\t  // done with a segment\n      }\n    }\n  }\n\n","sourceOld":"  private final void mergeTermInfos() throws CorruptIndexException, IOException {\n    int base = 0;\n    final int readerCount = readers.size();\n    for (int i = 0; i < readerCount; i++) {\n      IndexReader reader = (IndexReader) readers.get(i);\n      TermEnum termEnum = reader.terms();\n      SegmentMergeInfo smi = new SegmentMergeInfo(base, termEnum, reader);\n      int[] docMap  = smi.getDocMap();\n      if (docMap != null) {\n        if (docMaps == null) {\n          docMaps = new int[readerCount][];\n          delCounts = new int[readerCount];\n        }\n        docMaps[i] = docMap;\n        delCounts[i] = smi.reader.maxDoc() - smi.reader.numDocs();\n      }\n\n      base += reader.numDocs();\n      if (smi.next())\n        queue.put(smi);\t\t\t\t  // initialize queue\n      else\n        smi.close();\n    }\n\n    SegmentMergeInfo[] match = new SegmentMergeInfo[readers.size()];\n\n    while (queue.size() > 0) {\n      int matchSize = 0;\t\t\t  // pop matching terms\n      match[matchSize++] = (SegmentMergeInfo) queue.pop();\n      Term term = match[0].term;\n      SegmentMergeInfo top = (SegmentMergeInfo) queue.top();\n\n      while (top != null && term.compareTo(top.term) == 0) {\n        match[matchSize++] = (SegmentMergeInfo) queue.pop();\n        top = (SegmentMergeInfo) queue.top();\n      }\n\n      final int df = mergeTermInfo(match, matchSize);\t\t  // add new TermInfo\n\n      if (checkAbort != null)\n        checkAbort.work(df/3.0);\n\n      while (matchSize > 0) {\n        SegmentMergeInfo smi = match[--matchSize];\n        if (smi.next())\n          queue.put(smi);\t\t\t  // restore queue\n        else\n          smi.close();\t\t\t\t  // done with a segment\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["e7fb6d70db034a5456ae560175dd1b821eea9ff4"],"346d5897e4c4e77ed5dbd31f7730ff30973d5971":["1b54a9bc667895a2095a886184bf69a3179e63df"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e7fb6d70db034a5456ae560175dd1b821eea9ff4":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"1b54a9bc667895a2095a886184bf69a3179e63df":["f5cf8ed8dfc080044944e2cabac618bc36199013"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d17492f26096e19670d947d1be5e9adc52b1d3d":["c7b6cdc70e097da94da79a655ed8f94477ff69f5"],"c7b6cdc70e097da94da79a655ed8f94477ff69f5":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["346d5897e4c4e77ed5dbd31f7730ff30973d5971"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"f5cf8ed8dfc080044944e2cabac618bc36199013":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d17492f26096e19670d947d1be5e9adc52b1d3d"]},"commit2Childs":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["f5cf8ed8dfc080044944e2cabac618bc36199013"],"346d5897e4c4e77ed5dbd31f7730ff30973d5971":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"e7fb6d70db034a5456ae560175dd1b821eea9ff4":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"1b54a9bc667895a2095a886184bf69a3179e63df":["346d5897e4c4e77ed5dbd31f7730ff30973d5971"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["e7fb6d70db034a5456ae560175dd1b821eea9ff4"],"4d17492f26096e19670d947d1be5e9adc52b1d3d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c7b6cdc70e097da94da79a655ed8f94477ff69f5":["4d17492f26096e19670d947d1be5e9adc52b1d3d"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["c7b6cdc70e097da94da79a655ed8f94477ff69f5"],"f5cf8ed8dfc080044944e2cabac618bc36199013":["1b54a9bc667895a2095a886184bf69a3179e63df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}