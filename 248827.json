{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RawValueEvaluator#toExpression(StreamFactory).mjava","commits":[{"id":"88073e8783f450d4c0218decc2f001a1ac2c7e7c","date":1486705191,"type":2,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RawValueEvaluator#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ops/NotOperation#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(getClass()));\n    expression.addParameter(new StreamExpressionValue(value.toString()));\n    return expression;\n  }\n\n","sourceOld":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    if(operand instanceof Expressible) {\n      expression.addParameter(operand.toExpression(factory));\n    } else {\n      throw new IOException(\"The operand of the NotOperation contains a non-expressible operation - it cannot be converted to an expression\");\n    }\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"88073e8783f450d4c0218decc2f001a1ac2c7e7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["88073e8783f450d4c0218decc2f001a1ac2c7e7c"]},"commit2Childs":{"88073e8783f450d4c0218decc2f001a1ac2c7e7c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["88073e8783f450d4c0218decc2f001a1ac2c7e7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}