{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#complementLight(LightAutomaton).mjava","commits":[{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#complementLight(LightAutomaton).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a (deterministic) automaton that accepts the complement of the\n   * language of the given automaton.\n   * <p>\n   * Complexity: linear in number of states (if already deterministic).\n   */\n  static public LightAutomaton complementLight(LightAutomaton a) {\n    a = determinize(a).totalize();\n    int numStates = a.getNumStates();\n    for (int p=0;p<numStates;p++) {\n      a.setAccept(p, !a.isAccept(p));\n    }\n    return removeDeadTransitions(a);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a67285d1a68175d877eb9fd1624fccad3db028ff","date":1402779028,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#complementLight(LightAutomaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#complementLight(LightAutomaton).mjava","sourceNew":"  /**\n   * Returns a (deterministic) automaton that accepts the complement of the\n   * language of the given automaton.\n   * <p>\n   * Complexity: linear in number of states (if already deterministic).\n   */\n  static public LightAutomaton complementLight(LightAutomaton a) {\n    a = determinize(a).totalize();\n    int numStates = a.getNumStates();\n    for (int p=0;p<numStates;p++) {\n      a.setAccept(p, !a.isAccept(p));\n    }\n    return removeDeadStates(a);\n  }\n\n","sourceOld":"  /**\n   * Returns a (deterministic) automaton that accepts the complement of the\n   * language of the given automaton.\n   * <p>\n   * Complexity: linear in number of states (if already deterministic).\n   */\n  static public LightAutomaton complementLight(LightAutomaton a) {\n    a = determinize(a).totalize();\n    int numStates = a.getNumStates();\n    for (int p=0;p<numStates;p++) {\n      a.setAccept(p, !a.isAccept(p));\n    }\n    return removeDeadTransitions(a);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#complement(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#complementLight(LightAutomaton).mjava","sourceNew":"  /**\n   * Returns a (deterministic) automaton that accepts the complement of the\n   * language of the given automaton.\n   * <p>\n   * Complexity: linear in number of states (if already deterministic).\n   */\n  static public Automaton complement(Automaton a) {\n    a = determinize(a).totalize();\n    int numStates = a.getNumStates();\n    for (int p=0;p<numStates;p++) {\n      a.setAccept(p, !a.isAccept(p));\n    }\n    return removeDeadStates(a);\n  }\n\n","sourceOld":"  /**\n   * Returns a (deterministic) automaton that accepts the complement of the\n   * language of the given automaton.\n   * <p>\n   * Complexity: linear in number of states (if already deterministic).\n   */\n  static public LightAutomaton complementLight(LightAutomaton a) {\n    a = determinize(a).totalize();\n    int numStates = a.getNumStates();\n    for (int p=0;p<numStates;p++) {\n      a.setAccept(p, !a.isAccept(p));\n    }\n    return removeDeadStates(a);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a67285d1a68175d877eb9fd1624fccad3db028ff":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a67285d1a68175d877eb9fd1624fccad3db028ff"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a67285d1a68175d877eb9fd1624fccad3db028ff":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a67285d1a68175d877eb9fd1624fccad3db028ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}