{"path":"backwards/src/java/org/apache/lucene/index/IndexWriter#setMaxBufferedDocs(int).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/IndexWriter#setMaxBufferedDocs(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Determines the minimal number of documents required\n   * before the buffered in-memory documents are flushed as\n   * a new Segment.  Large values generally gives faster\n   * indexing.\n   *\n   * <p>When this is set, the writer will flush every\n   * maxBufferedDocs added documents.  Pass in {@link\n   * #DISABLE_AUTO_FLUSH} to prevent triggering a flush due\n   * to number of buffered documents.  Note that if flushing\n   * by RAM usage is also enabled, then the flush will be\n   * triggered by whichever comes first.</p>\n   *\n   * <p>Disabled by default (writer flushes by RAM usage).</p>\n   *\n   * @throws IllegalArgumentException if maxBufferedDocs is\n   * enabled but smaller than 2, or it disables maxBufferedDocs\n   * when ramBufferSize is already disabled\n   * @see #setRAMBufferSizeMB\n   */\n  public void setMaxBufferedDocs(int maxBufferedDocs) {\n    ensureOpen();\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && getRAMBufferSizeMB() == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    docWriter.setMaxBufferedDocs(maxBufferedDocs);\n    pushMaxBufferedDocs();\n    if (infoStream != null)\n      message(\"setMaxBufferedDocs \" + maxBufferedDocs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#setMaxBufferedDocs(int).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexWriter#setMaxBufferedDocs(int).mjava","sourceNew":"  /** Determines the minimal number of documents required\n   * before the buffered in-memory documents are flushed as\n   * a new Segment.  Large values generally gives faster\n   * indexing.\n   *\n   * <p>When this is set, the writer will flush every\n   * maxBufferedDocs added documents.  Pass in {@link\n   * #DISABLE_AUTO_FLUSH} to prevent triggering a flush due\n   * to number of buffered documents.  Note that if flushing\n   * by RAM usage is also enabled, then the flush will be\n   * triggered by whichever comes first.</p>\n   *\n   * <p>Disabled by default (writer flushes by RAM usage).</p>\n   *\n   * @throws IllegalArgumentException if maxBufferedDocs is\n   * enabled but smaller than 2, or it disables maxBufferedDocs\n   * when ramBufferSize is already disabled\n   * @see #setRAMBufferSizeMB\n   */\n  public void setMaxBufferedDocs(int maxBufferedDocs) {\n    ensureOpen();\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && getRAMBufferSizeMB() == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    docWriter.setMaxBufferedDocs(maxBufferedDocs);\n    pushMaxBufferedDocs();\n    if (infoStream != null)\n      message(\"setMaxBufferedDocs \" + maxBufferedDocs);\n  }\n\n","sourceOld":"  /** Determines the minimal number of documents required\n   * before the buffered in-memory documents are flushed as\n   * a new Segment.  Large values generally gives faster\n   * indexing.\n   *\n   * <p>When this is set, the writer will flush every\n   * maxBufferedDocs added documents.  Pass in {@link\n   * #DISABLE_AUTO_FLUSH} to prevent triggering a flush due\n   * to number of buffered documents.  Note that if flushing\n   * by RAM usage is also enabled, then the flush will be\n   * triggered by whichever comes first.</p>\n   *\n   * <p>Disabled by default (writer flushes by RAM usage).</p>\n   *\n   * @throws IllegalArgumentException if maxBufferedDocs is\n   * enabled but smaller than 2, or it disables maxBufferedDocs\n   * when ramBufferSize is already disabled\n   * @see #setRAMBufferSizeMB\n   */\n  public void setMaxBufferedDocs(int maxBufferedDocs) {\n    ensureOpen();\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && getRAMBufferSizeMB() == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    docWriter.setMaxBufferedDocs(maxBufferedDocs);\n    pushMaxBufferedDocs();\n    if (infoStream != null)\n      message(\"setMaxBufferedDocs \" + maxBufferedDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}