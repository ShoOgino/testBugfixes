{"path":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#modifyIndexProps(String).mjava","commits":[{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":1,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#modifyIndexProps(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","sourceNew":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      if (slowFileExists(dir, IndexFetcher.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + IndexFetcher.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      Writer os = null;\n      try {\n        os = new OutputStreamWriter(new PropertiesOutputStream(out), StandardCharsets.UTF_8);\n        p.store(os, IndexFetcher.INDEX_PROPERTIES);\n        dir.sync(Collections.singleton(INDEX_PROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + IndexFetcher.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      if (slowFileExists(dir, SnapPuller.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(SnapPuller.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + SnapPuller.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(SnapPuller.INDEX_PROPERTIES);\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(SnapPuller.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      Writer os = null;\n      try {\n        os = new OutputStreamWriter(new PropertiesOutputStream(out), StandardCharsets.UTF_8);\n        p.store(os, SnapPuller.INDEX_PROPERTIES);\n        dir.sync(Collections.singleton(INDEX_PROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + SnapPuller.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#modifyIndexProps(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      if (slowFileExists(dir, IndexFetcher.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + IndexFetcher.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      Writer os = null;\n      try {\n        os = new OutputStreamWriter(new PropertiesOutputStream(out), StandardCharsets.UTF_8);\n        p.store(os, IndexFetcher.INDEX_PROPERTIES);\n        dir.sync(Collections.singleton(INDEX_PROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + IndexFetcher.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b13106276bb5ea342253dbf6aae7b675adb38d3","date":1428054414,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#modifyIndexProps(SolrCore,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#modifyIndexProps(String).mjava","sourceNew":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  protected static boolean modifyIndexProps(SolrCore solrCore, String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      if (slowFileExists(dir, IndexFetcher.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n\n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + IndexFetcher.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      Writer os = null;\n      try {\n        os = new OutputStreamWriter(new PropertiesOutputStream(out), StandardCharsets.UTF_8);\n        p.store(os, IndexFetcher.INDEX_PROPERTIES);\n        dir.sync(Collections.singleton(INDEX_PROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + IndexFetcher.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      if (slowFileExists(dir, IndexFetcher.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + IndexFetcher.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      Writer os = null;\n      try {\n        os = new OutputStreamWriter(new PropertiesOutputStream(out), StandardCharsets.UTF_8);\n        p.store(os, IndexFetcher.INDEX_PROPERTIES);\n        dir.sync(Collections.singleton(INDEX_PROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + IndexFetcher.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","date":1428091986,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#modifyIndexProps(SolrCore,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#modifyIndexProps(String).mjava","sourceNew":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  protected static boolean modifyIndexProps(SolrCore solrCore, String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      if (slowFileExists(dir, IndexFetcher.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n\n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + IndexFetcher.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      Writer os = null;\n      try {\n        os = new OutputStreamWriter(new PropertiesOutputStream(out), StandardCharsets.UTF_8);\n        p.store(os, IndexFetcher.INDEX_PROPERTIES);\n        dir.sync(Collections.singleton(INDEX_PROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + IndexFetcher.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      if (slowFileExists(dir, IndexFetcher.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + IndexFetcher.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      Writer os = null;\n      try {\n        os = new OutputStreamWriter(new PropertiesOutputStream(out), StandardCharsets.UTF_8);\n        p.store(os, IndexFetcher.INDEX_PROPERTIES);\n        dir.sync(Collections.singleton(INDEX_PROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + IndexFetcher.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7b13106276bb5ea342253dbf6aae7b675adb38d3"],"7b13106276bb5ea342253dbf6aae7b675adb38d3":["20f6b7cff3771384f27af0f059795d7e64aff6b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b13106276bb5ea342253dbf6aae7b675adb38d3"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7b13106276bb5ea342253dbf6aae7b675adb38d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":[],"7b13106276bb5ea342253dbf6aae7b675adb38d3":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}