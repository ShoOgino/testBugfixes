{"path":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRightOpenRange(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRightOpenRange(int).mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRightOpenRange(int).mjava","sourceNew":"  private void testRightOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(count-1)*distance + (distance/3) +startOffset;\n    NumericRangeQuery<Long> q=NumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, true);\n    TopDocs topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    if (VERBOSE) System.out.println(\"Found \"+q.getTotalNumberOfTerms()+\" distinct terms in right open range for field '\"+field+\"'.\");\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, Long.parseLong(doc.get(field)) );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, Long.parseLong(doc.get(field)) );\n\n    q=NumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, false);\n    topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, Long.parseLong(doc.get(field)) );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, Long.parseLong(doc.get(field)) );\n  }\n\n","sourceOld":"  private void testRightOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(count-1)*distance + (distance/3) +startOffset;\n    NumericRangeQuery<Long> q=NumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, true);\n    TopDocs topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    if (VERBOSE) System.out.println(\"Found \"+q.getTotalNumberOfTerms()+\" distinct terms in right open range for field '\"+field+\"'.\");\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, Long.parseLong(doc.get(field)) );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, Long.parseLong(doc.get(field)) );\n\n    q=NumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, false);\n    topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, Long.parseLong(doc.get(field)) );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, Long.parseLong(doc.get(field)) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a4965b25e439626b575c2281b39ad875f89d891","date":1321132400,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRightOpenRange(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRightOpenRange(int).mjava","sourceNew":"  private void testRightOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(count-1)*distance + (distance/3) +startOffset;\n    NumericRangeQuery<Long> q=NumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, true);\n    TopDocs topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, Long.parseLong(doc.get(field)) );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, Long.parseLong(doc.get(field)) );\n\n    q=NumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, false);\n    topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, Long.parseLong(doc.get(field)) );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, Long.parseLong(doc.get(field)) );\n  }\n\n","sourceOld":"  private void testRightOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(count-1)*distance + (distance/3) +startOffset;\n    NumericRangeQuery<Long> q=NumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, true);\n    TopDocs topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    if (VERBOSE) System.out.println(\"Found \"+q.getTotalNumberOfTerms()+\" distinct terms in right open range for field '\"+field+\"'.\");\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, Long.parseLong(doc.get(field)) );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, Long.parseLong(doc.get(field)) );\n\n    q=NumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, false);\n    topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, Long.parseLong(doc.get(field)) );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, Long.parseLong(doc.get(field)) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRightOpenRange(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRightOpenRange(int).mjava","sourceNew":"  private void testRightOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(count-1)*distance + (distance/3) +startOffset;\n    NumericRangeQuery<Long> q=NumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, true);\n    TopDocs topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n\n    q=NumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, false);\n    topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n  }\n\n","sourceOld":"  private void testRightOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(count-1)*distance + (distance/3) +startOffset;\n    NumericRangeQuery<Long> q=NumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, true);\n    TopDocs topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, Long.parseLong(doc.get(field)) );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, Long.parseLong(doc.get(field)) );\n\n    q=NumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, false);\n    topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, Long.parseLong(doc.get(field)) );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, Long.parseLong(doc.get(field)) );\n  }\n\n","bugFix":["4ba19267cba8a08940edd30c894796d6e7899530","65eb076d345a794256daba691a2b366657c807e8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRightOpenRange(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRightOpenRange(int).mjava","sourceNew":"  private void testRightOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(count-1)*distance + (distance/3) +startOffset;\n    NumericRangeQuery<Long> q=NumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, true);\n    TopDocs topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n\n    q=NumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, false);\n    topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n  }\n\n","sourceOld":"  private void testRightOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(count-1)*distance + (distance/3) +startOffset;\n    NumericRangeQuery<Long> q=NumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, true);\n    TopDocs topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n\n    q=NumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, false);\n    topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fa0f44f887719e97183771e977cfc4bfb485b766"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2a4965b25e439626b575c2281b39ad875f89d891":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fa0f44f887719e97183771e977cfc4bfb485b766":["2a4965b25e439626b575c2281b39ad875f89d891"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"2a4965b25e439626b575c2281b39ad875f89d891":["fa0f44f887719e97183771e977cfc4bfb485b766"],"fa0f44f887719e97183771e977cfc4bfb485b766":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["2a4965b25e439626b575c2281b39ad875f89d891"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}