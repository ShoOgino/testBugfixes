{"path":"backwards/src/java/org/apache/lucene/index/IndexWriter#expungeDeletes(boolean).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/IndexWriter#expungeDeletes(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Just like {@link #expungeDeletes()}, except you can\n   *  specify whether the call should block until the\n   *  operation completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void expungeDeletes(boolean doWait)\n    throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (infoStream != null)\n      message(\"expungeDeletes: index now \" + segString());\n\n    MergePolicy.MergeSpecification spec;\n\n    synchronized(this) {\n      spec = mergePolicy.findMergesToExpungeDeletes(segmentInfos);\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++)\n          registerMerge(spec.merges.get(i));\n      }\n    }\n\n    mergeScheduler.merge(this);\n\n    if (spec != null && doWait) {\n      final int numMerges = spec.merges.size();\n      synchronized(this) {\n        boolean running = true;\n        while(running) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete expungeDeletes\");\n          }\n\n          // Check each merge that MergePolicy asked us to\n          // do, to see if any of them are still running and\n          // if any of them have hit an exception.\n          running = false;\n          for(int i=0;i<numMerges;i++) {\n            final MergePolicy.OneMerge merge = spec.merges.get(i);\n            if (pendingMerges.contains(merge) || runningMerges.contains(merge))\n              running = true;\n            Throwable t = merge.getException();\n            if (t != null) {\n              IOException ioe = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n              ioe.initCause(t);\n              throw ioe;\n            }\n          }\n\n          // If any of our merges are still running, wait:\n          if (running)\n            doWait();\n        }\n      }\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#expungeDeletes(boolean).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexWriter#expungeDeletes(boolean).mjava","sourceNew":"  /** Just like {@link #expungeDeletes()}, except you can\n   *  specify whether the call should block until the\n   *  operation completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void expungeDeletes(boolean doWait)\n    throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (infoStream != null)\n      message(\"expungeDeletes: index now \" + segString());\n\n    MergePolicy.MergeSpecification spec;\n\n    synchronized(this) {\n      spec = mergePolicy.findMergesToExpungeDeletes(segmentInfos);\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++)\n          registerMerge(spec.merges.get(i));\n      }\n    }\n\n    mergeScheduler.merge(this);\n\n    if (spec != null && doWait) {\n      final int numMerges = spec.merges.size();\n      synchronized(this) {\n        boolean running = true;\n        while(running) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete expungeDeletes\");\n          }\n\n          // Check each merge that MergePolicy asked us to\n          // do, to see if any of them are still running and\n          // if any of them have hit an exception.\n          running = false;\n          for(int i=0;i<numMerges;i++) {\n            final MergePolicy.OneMerge merge = spec.merges.get(i);\n            if (pendingMerges.contains(merge) || runningMerges.contains(merge))\n              running = true;\n            Throwable t = merge.getException();\n            if (t != null) {\n              IOException ioe = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n              ioe.initCause(t);\n              throw ioe;\n            }\n          }\n\n          // If any of our merges are still running, wait:\n          if (running)\n            doWait();\n        }\n      }\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","sourceOld":"  /** Just like {@link #expungeDeletes()}, except you can\n   *  specify whether the call should block until the\n   *  operation completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void expungeDeletes(boolean doWait)\n    throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (infoStream != null)\n      message(\"expungeDeletes: index now \" + segString());\n\n    MergePolicy.MergeSpecification spec;\n\n    synchronized(this) {\n      spec = mergePolicy.findMergesToExpungeDeletes(segmentInfos);\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++)\n          registerMerge(spec.merges.get(i));\n      }\n    }\n\n    mergeScheduler.merge(this);\n\n    if (spec != null && doWait) {\n      final int numMerges = spec.merges.size();\n      synchronized(this) {\n        boolean running = true;\n        while(running) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete expungeDeletes\");\n          }\n\n          // Check each merge that MergePolicy asked us to\n          // do, to see if any of them are still running and\n          // if any of them have hit an exception.\n          running = false;\n          for(int i=0;i<numMerges;i++) {\n            final MergePolicy.OneMerge merge = spec.merges.get(i);\n            if (pendingMerges.contains(merge) || runningMerges.contains(merge))\n              running = true;\n            Throwable t = merge.getException();\n            if (t != null) {\n              IOException ioe = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n              ioe.initCause(t);\n              throw ioe;\n            }\n          }\n\n          // If any of our merges are still running, wait:\n          if (running)\n            doWait();\n        }\n      }\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}