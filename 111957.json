{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TextLogitStream#TextLogitStream(StreamExpression,StreamFactory).mjava","commits":[{"id":"f6b1e64caa933f6fb3c0494afd6ca2597f55cc91","date":1470238980,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TextLogitStream#TextLogitStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   *   logit(collection, zkHost=\"\", features=\"a,b,c,d,e,f,g\", outcome=\"y\", maxIteration=\"20\")\n   **/\n\n  public TextLogitStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size() + streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")) {\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    String name = params.get(\"name\");\n    if (name != null) {\n      params.remove(\"name\");\n    } else {\n      throw new IOException(\"name param cannot be null for TextLogitStream\");\n    }\n\n    String feature = params.get(\"field\");\n    if (feature != null) {\n      params.remove(\"field\");\n    } else {\n      throw new IOException(\"field param cannot be null for TextLogitStream\");\n    }\n\n    TupleStream stream = null;\n\n    if (streamExpressions.size() > 0) {\n      stream = factory.constructStream(streamExpressions.get(0));\n    } else {\n      throw new IOException(\"features must be present for TextLogitStream\");\n    }\n\n    String maxIterationsParam = params.get(\"maxIterations\");\n    int maxIterations = 0;\n    if(maxIterationsParam != null) {\n      maxIterations = Integer.parseInt(maxIterationsParam);\n      params.remove(\"maxIterations\");\n    } else {\n      throw new IOException(\"maxIterations param cannot be null for TextLogitStream\");\n    }\n\n    String outcomeParam = params.get(\"outcome\");\n\n    if(outcomeParam != null) {\n      params.remove(\"outcome\");\n    } else {\n      throw new IOException(\"outcome param cannot be null for TextLogitStream\");\n    }\n\n    String positiveLabelParam = params.get(\"positiveLabel\");\n    int positiveLabel = 1;\n    if(positiveLabelParam != null) {\n      positiveLabel = Integer.parseInt(positiveLabelParam);\n      params.remove(\"positiveLabel\");\n    }\n\n    String thresholdParam = params.get(\"threshold\");\n    double threshold = 0.5;\n    if(thresholdParam != null) {\n      threshold = Double.parseDouble(thresholdParam);\n      params.remove(\"threshold\");\n    }\n\n    int iteration = 0;\n    String iterationParam = params.get(\"iteration\");\n    if(iterationParam != null) {\n      iteration = Integer.parseInt(iterationParam);\n      params.remove(\"iteration\");\n    }\n\n    List<Double> weights = null;\n    String weightsParam = params.get(\"weights\");\n    if(weightsParam != null) {\n      weights = new ArrayList<>();\n      String[] weightsArray = weightsParam.split(\",\");\n      for(String weightString : weightsArray) {\n        weights.add(Double.parseDouble(weightString));\n      }\n      params.remove(\"weights\");\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(collectionName, zkHost, params, name, feature, stream, weights, outcomeParam, positiveLabel, threshold, maxIterations, iteration);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TextLogitStream#TextLogitStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   *   logit(collection, zkHost=\"\", features=\"a,b,c,d,e,f,g\", outcome=\"y\", maxIteration=\"20\")\n   **/\n\n  public TextLogitStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size() + streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")) {\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    String name = params.get(\"name\");\n    if (name != null) {\n      params.remove(\"name\");\n    } else {\n      throw new IOException(\"name param cannot be null for TextLogitStream\");\n    }\n\n    String feature = params.get(\"field\");\n    if (feature != null) {\n      params.remove(\"field\");\n    } else {\n      throw new IOException(\"field param cannot be null for TextLogitStream\");\n    }\n\n    TupleStream stream = null;\n\n    if (streamExpressions.size() > 0) {\n      stream = factory.constructStream(streamExpressions.get(0));\n    } else {\n      throw new IOException(\"features must be present for TextLogitStream\");\n    }\n\n    String maxIterationsParam = params.get(\"maxIterations\");\n    int maxIterations = 0;\n    if(maxIterationsParam != null) {\n      maxIterations = Integer.parseInt(maxIterationsParam);\n      params.remove(\"maxIterations\");\n    } else {\n      throw new IOException(\"maxIterations param cannot be null for TextLogitStream\");\n    }\n\n    String outcomeParam = params.get(\"outcome\");\n\n    if(outcomeParam != null) {\n      params.remove(\"outcome\");\n    } else {\n      throw new IOException(\"outcome param cannot be null for TextLogitStream\");\n    }\n\n    String positiveLabelParam = params.get(\"positiveLabel\");\n    int positiveLabel = 1;\n    if(positiveLabelParam != null) {\n      positiveLabel = Integer.parseInt(positiveLabelParam);\n      params.remove(\"positiveLabel\");\n    }\n\n    String thresholdParam = params.get(\"threshold\");\n    double threshold = 0.5;\n    if(thresholdParam != null) {\n      threshold = Double.parseDouble(thresholdParam);\n      params.remove(\"threshold\");\n    }\n\n    int iteration = 0;\n    String iterationParam = params.get(\"iteration\");\n    if(iterationParam != null) {\n      iteration = Integer.parseInt(iterationParam);\n      params.remove(\"iteration\");\n    }\n\n    List<Double> weights = null;\n    String weightsParam = params.get(\"weights\");\n    if(weightsParam != null) {\n      weights = new ArrayList<>();\n      String[] weightsArray = weightsParam.split(\",\");\n      for(String weightString : weightsArray) {\n        weights.add(Double.parseDouble(weightString));\n      }\n      params.remove(\"weights\");\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(collectionName, zkHost, params, name, feature, stream, weights, outcomeParam, positiveLabel, threshold, maxIterations, iteration);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TextLogitStream#TextLogitStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   *   logit(collection, zkHost=\"\", features=\"a,b,c,d,e,f,g\", outcome=\"y\", maxIteration=\"20\")\n   **/\n\n  public TextLogitStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size() + streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")) {\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    String name = params.get(\"name\");\n    if (name != null) {\n      params.remove(\"name\");\n    } else {\n      throw new IOException(\"name param cannot be null for TextLogitStream\");\n    }\n\n    String feature = params.get(\"field\");\n    if (feature != null) {\n      params.remove(\"field\");\n    } else {\n      throw new IOException(\"field param cannot be null for TextLogitStream\");\n    }\n\n    TupleStream stream = null;\n\n    if (streamExpressions.size() > 0) {\n      stream = factory.constructStream(streamExpressions.get(0));\n    } else {\n      throw new IOException(\"features must be present for TextLogitStream\");\n    }\n\n    String maxIterationsParam = params.get(\"maxIterations\");\n    int maxIterations = 0;\n    if(maxIterationsParam != null) {\n      maxIterations = Integer.parseInt(maxIterationsParam);\n      params.remove(\"maxIterations\");\n    } else {\n      throw new IOException(\"maxIterations param cannot be null for TextLogitStream\");\n    }\n\n    String outcomeParam = params.get(\"outcome\");\n\n    if(outcomeParam != null) {\n      params.remove(\"outcome\");\n    } else {\n      throw new IOException(\"outcome param cannot be null for TextLogitStream\");\n    }\n\n    String positiveLabelParam = params.get(\"positiveLabel\");\n    int positiveLabel = 1;\n    if(positiveLabelParam != null) {\n      positiveLabel = Integer.parseInt(positiveLabelParam);\n      params.remove(\"positiveLabel\");\n    }\n\n    String thresholdParam = params.get(\"threshold\");\n    double threshold = 0.5;\n    if(thresholdParam != null) {\n      threshold = Double.parseDouble(thresholdParam);\n      params.remove(\"threshold\");\n    }\n\n    int iteration = 0;\n    String iterationParam = params.get(\"iteration\");\n    if(iterationParam != null) {\n      iteration = Integer.parseInt(iterationParam);\n      params.remove(\"iteration\");\n    }\n\n    List<Double> weights = null;\n    String weightsParam = params.get(\"weights\");\n    if(weightsParam != null) {\n      weights = new ArrayList<>();\n      String[] weightsArray = weightsParam.split(\",\");\n      for(String weightString : weightsArray) {\n        weights.add(Double.parseDouble(weightString));\n      }\n      params.remove(\"weights\");\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(collectionName, zkHost, params, name, feature, stream, weights, outcomeParam, positiveLabel, threshold, maxIterations, iteration);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f6b1e64caa933f6fb3c0494afd6ca2597f55cc91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6b1e64caa933f6fb3c0494afd6ca2597f55cc91"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6b1e64caa933f6fb3c0494afd6ca2597f55cc91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f6b1e64caa933f6fb3c0494afd6ca2597f55cc91"]},"commit2Childs":{"f6b1e64caa933f6fb3c0494afd6ca2597f55cc91":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f6b1e64caa933f6fb3c0494afd6ca2597f55cc91","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}