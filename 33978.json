{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","sourceNew":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(sdp));\n\n    // First commit\n    Document doc = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    \n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot(\"id\");\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, DirectoryReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(\"id\");\n    writer.deleteUnusedFiles();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(sdp));\n\n    // First commit\n    Document doc = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    \n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot(\"id\");\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, DirectoryReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(\"id\");\n    writer.deleteUnusedFiles();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","sourceNew":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(sdp));\n\n    // First commit\n    Document doc = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    \n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot(\"id\");\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, DirectoryReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(\"id\");\n    writer.deleteUnusedFiles();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(sdp));\n\n    // First commit\n    Document doc = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    \n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot(\"id\");\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, DirectoryReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(\"id\");\n    writer.deleteUnusedFiles();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70790b11e79a0366b21b2cc5b82d03b6fddcef81","date":1364594206,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","sourceNew":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy())));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    // First commit\n    Document doc = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    \n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot(\"id\");\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, DirectoryReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(\"id\");\n    writer.deleteUnusedFiles();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(sdp));\n\n    // First commit\n    Document doc = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    \n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot(\"id\");\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, DirectoryReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(\"id\");\n    writer.deleteUnusedFiles();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a207624ce3e468bca1819861084438d936e3b1c","date":1367514967,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","sourceNew":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy())));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    // First commit\n    Document doc = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    \n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    // Keep that commit\n    IndexCommit id = sdp.snapshot();\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, DirectoryReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(id);\n    writer.deleteUnusedFiles();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy())));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    // First commit\n    Document doc = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    \n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    // Keep that commit\n    sdp.snapshot(\"id\");\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, DirectoryReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(\"id\");\n    writer.deleteUnusedFiles();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","sourceNew":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy())));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    // First commit\n    Document doc = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    \n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    // Keep that commit\n    IndexCommit id = sdp.snapshot();\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, DirectoryReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(id);\n    writer.deleteUnusedFiles();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy())));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    // First commit\n    Document doc = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    \n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    // Keep that commit\n    IndexCommit id = sdp.snapshot();\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, DirectoryReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(id);\n    writer.deleteUnusedFiles();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","sourceNew":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setIndexDeletionPolicy(new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy())));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    // First commit\n    Document doc = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    \n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    // Keep that commit\n    IndexCommit id = sdp.snapshot();\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, DirectoryReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(id);\n    writer.deleteUnusedFiles();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy())));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    // First commit\n    Document doc = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    \n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    // Keep that commit\n    IndexCommit id = sdp.snapshot();\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, DirectoryReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(id);\n    writer.deleteUnusedFiles();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","sourceNew":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setIndexDeletionPolicy(new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy())));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    // First commit\n    Document doc = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    \n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    // Keep that commit\n    IndexCommit id = sdp.snapshot();\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, DirectoryReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(id);\n    writer.deleteUnusedFiles();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setIndexDeletionPolicy(new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy())));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    // First commit\n    Document doc = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    \n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    // Keep that commit\n    IndexCommit id = sdp.snapshot();\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, DirectoryReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(id);\n    writer.deleteUnusedFiles();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","date":1409346855,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnsedFiles2().mjava","sourceNew":"  public void testDeleteUnusedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // otherwise the delete of old commit might not actually succeed temporarily.\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setIndexDeletionPolicy(new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy())));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    // First commit\n    Document doc = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    \n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    // Keep that commit\n    IndexCommit id = sdp.snapshot();\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, DirectoryReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(id);\n    writer.deleteUnusedFiles();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteUnsedFiles2() throws Exception {\n    // Validates that iw.deleteUnusedFiles() also deletes unused index commits\n    // in case a deletion policy which holds onto commits is used.\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setIndexDeletionPolicy(new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy())));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n\n    // First commit\n    Document doc = new Document();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    \n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    // Keep that commit\n    IndexCommit id = sdp.snapshot();\n\n    // Second commit - now KeepOnlyLastCommit cannot delete the prev commit.\n    doc = new Document();\n    doc.add(newField(\"c\", \"val\", customType));\n    writer.addDocument(doc);\n    writer.commit();\n    assertEquals(2, DirectoryReader.listCommits(dir).size());\n\n    // Should delete the unreferenced commit\n    sdp.release(id);\n    writer.deleteUnusedFiles();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70790b11e79a0366b21b2cc5b82d03b6fddcef81":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"8a207624ce3e468bca1819861084438d936e3b1c":["70790b11e79a0366b21b2cc5b82d03b6fddcef81"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["8a207624ce3e468bca1819861084438d936e3b1c"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"]},"commit2Childs":{"70790b11e79a0366b21b2cc5b82d03b6fddcef81":["8a207624ce3e468bca1819861084438d936e3b1c"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"8a207624ce3e468bca1819861084438d936e3b1c":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["70790b11e79a0366b21b2cc5b82d03b6fddcef81"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}