{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#getType(String).mjava","commits":[{"id":"c135b907ec07be761fc0f0c3501a038a2a28f3bc","date":1220975801,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#getType(String).mjava","pathOld":"/dev/null","sourceNew":"  private int getType(String typeString) {\n    int type;\n    if (typeString.equals(\"float\")) {\n      type = SortField.FLOAT;\n    } else if (typeString.equals(\"int\")) {\n      type = SortField.INT;\n    } else if (typeString.equals(\"string\")) {\n      type = SortField.STRING;\n    } else {\n      type = SortField.AUTO;\n    }\n    return type;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#getType(String).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#getType(String).mjava","sourceNew":"  private int getType(String typeString) {\n    int type;\n    if (typeString.equals(\"float\")) {\n      type = SortField.FLOAT;\n    } else if (typeString.equals(\"int\")) {\n      type = SortField.INT;\n    } else if (typeString.equals(\"string\")) {\n      type = SortField.STRING;\n    } else if (typeString.equals(\"string_val\")) {\n      type = SortField.STRING_VAL;\n    } else {\n      type = SortField.AUTO;\n    }\n    return type;\n  }\n\n","sourceOld":"  private int getType(String typeString) {\n    int type;\n    if (typeString.equals(\"float\")) {\n      type = SortField.FLOAT;\n    } else if (typeString.equals(\"int\")) {\n      type = SortField.INT;\n    } else if (typeString.equals(\"string\")) {\n      type = SortField.STRING;\n    } else {\n      type = SortField.AUTO;\n    }\n    return type;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bc1076e669ef72f6939198a862b40a0ffd1fc70","date":1248689703,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#getType(String).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#getType(String).mjava","sourceNew":"  private int getType(String typeString) {\n    int type;\n    if (typeString.equals(\"float\")) {\n      type = SortField.FLOAT;\n    } else if (typeString.equals(\"double\")) {\n      type = SortField.DOUBLE;\n    } else if (typeString.equals(\"byte\")) {\n      type = SortField.BYTE;\n    } else if (typeString.equals(\"short\")) {\n      type = SortField.SHORT;\n    } else if (typeString.equals(\"int\")) {\n      type = SortField.INT;\n    } else if (typeString.equals(\"long\")) {\n      type = SortField.LONG;\n    } else if (typeString.equals(\"string\")) {\n      type = SortField.STRING;\n    } else if (typeString.equals(\"string_val\")) {\n      type = SortField.STRING_VAL;\n    } else {\n      throw new RuntimeException(\"Unrecognized sort field type \" + typeString);\n    }\n    return type;\n  }\n\n","sourceOld":"  private int getType(String typeString) {\n    int type;\n    if (typeString.equals(\"float\")) {\n      type = SortField.FLOAT;\n    } else if (typeString.equals(\"int\")) {\n      type = SortField.INT;\n    } else if (typeString.equals(\"string\")) {\n      type = SortField.STRING;\n    } else if (typeString.equals(\"string_val\")) {\n      type = SortField.STRING_VAL;\n    } else {\n      type = SortField.AUTO;\n    }\n    return type;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#getType(String).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#getType(String).mjava","sourceNew":"  private int getType(String typeString) {\n    int type;\n    if (typeString.equals(\"float\")) {\n      type = SortField.FLOAT;\n    } else if (typeString.equals(\"double\")) {\n      type = SortField.DOUBLE;\n    } else if (typeString.equals(\"byte\")) {\n      type = SortField.BYTE;\n    } else if (typeString.equals(\"short\")) {\n      type = SortField.SHORT;\n    } else if (typeString.equals(\"int\")) {\n      type = SortField.INT;\n    } else if (typeString.equals(\"long\")) {\n      type = SortField.LONG;\n    } else if (typeString.equals(\"string\")) {\n      type = SortField.STRING;\n    } else if (typeString.equals(\"string_val\")) {\n      type = SortField.STRING_VAL;\n    } else {\n      throw new RuntimeException(\"Unrecognized sort field type \" + typeString);\n    }\n    return type;\n  }\n\n","sourceOld":"  private int getType(String typeString) {\n    int type;\n    if (typeString.equals(\"float\")) {\n      type = SortField.FLOAT;\n    } else if (typeString.equals(\"double\")) {\n      type = SortField.DOUBLE;\n    } else if (typeString.equals(\"byte\")) {\n      type = SortField.BYTE;\n    } else if (typeString.equals(\"short\")) {\n      type = SortField.SHORT;\n    } else if (typeString.equals(\"int\")) {\n      type = SortField.INT;\n    } else if (typeString.equals(\"long\")) {\n      type = SortField.LONG;\n    } else if (typeString.equals(\"string\")) {\n      type = SortField.STRING;\n    } else if (typeString.equals(\"string_val\")) {\n      type = SortField.STRING_VAL;\n    } else {\n      throw new RuntimeException(\"Unrecognized sort field type \" + typeString);\n    }\n    return type;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"63bc3238545c6012bd44f5d294077997f236bc4e":["c135b907ec07be761fc0f0c3501a038a2a28f3bc"],"c135b907ec07be761fc0f0c3501a038a2a28f3bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1bc1076e669ef72f6939198a862b40a0ffd1fc70"],"1bc1076e669ef72f6939198a862b40a0ffd1fc70":["63bc3238545c6012bd44f5d294077997f236bc4e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c135b907ec07be761fc0f0c3501a038a2a28f3bc"],"63bc3238545c6012bd44f5d294077997f236bc4e":["1bc1076e669ef72f6939198a862b40a0ffd1fc70"],"c135b907ec07be761fc0f0c3501a038a2a28f3bc":["63bc3238545c6012bd44f5d294077997f236bc4e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1bc1076e669ef72f6939198a862b40a0ffd1fc70":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}