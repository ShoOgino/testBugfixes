{"path":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#add(Builder.UnCompiledNode[T]).mjava","commits":[{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#add(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#add(Builder.UnCompiledNode[T]).mjava","sourceNew":"  public int add(Builder.UnCompiledNode<T> node) throws IOException {\n    // System.out.println(\"hash: add count=\" + count + \" vs \" + table.length);\n    final int h = hash(node);\n    int pos = h & mask;\n    int c = 0;\n    while(true) {\n      final int v = table[pos];\n      if (v == 0) {\n        // freeze & add\n        final int address = fst.addNode(node);\n        //System.out.println(\"  now freeze addr=\" + address);\n        assert hash(address) == h : \"frozenHash=\" + hash(address) + \" vs h=\" + h;\n        count++;\n        table[pos] = address;\n        if (table.length < 2*count) {\n          rehash();\n        }\n        return address;\n      } else if (nodesEqual(node, v)) {\n        // same node is already here\n        return v;\n      }\n\n      // quadratic probe\n      pos = (pos + (++c)) & mask;\n    }\n  }\n\n","sourceOld":"  public int add(Builder.UnCompiledNode<T> node) throws IOException {\n    // System.out.println(\"hash: add count=\" + count + \" vs \" + table.length);\n    final int h = hash(node);\n    int pos = h & mask;\n    int c = 0;\n    while(true) {\n      final int v = table[pos];\n      if (v == 0) {\n        // freeze & add\n        final int address = fst.addNode(node);\n        //System.out.println(\"  now freeze addr=\" + address);\n        assert hash(address) == h : \"frozenHash=\" + hash(address) + \" vs h=\" + h;\n        count++;\n        table[pos] = address;\n        if (table.length < 2*count) {\n          rehash();\n        }\n        return address;\n      } else if (nodesEqual(node, v)) {\n        // same node is already here\n        return v;\n      }\n\n      // quadratic probe\n      pos = (pos + (++c)) & mask;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#add(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#add(Builder.UnCompiledNode[T]).mjava","sourceNew":"  public int add(Builder.UnCompiledNode<T> node) throws IOException {\n    // System.out.println(\"hash: add count=\" + count + \" vs \" + table.length);\n    final int h = hash(node);\n    int pos = h & mask;\n    int c = 0;\n    while(true) {\n      final int v = table[pos];\n      if (v == 0) {\n        // freeze & add\n        final int address = fst.addNode(node);\n        //System.out.println(\"  now freeze addr=\" + address);\n        assert hash(address) == h : \"frozenHash=\" + hash(address) + \" vs h=\" + h;\n        count++;\n        table[pos] = address;\n        if (table.length < 2*count) {\n          rehash();\n        }\n        return address;\n      } else if (nodesEqual(node, v)) {\n        // same node is already here\n        return v;\n      }\n\n      // quadratic probe\n      pos = (pos + (++c)) & mask;\n    }\n  }\n\n","sourceOld":"  public int add(Builder.UnCompiledNode<T> node) throws IOException {\n    // System.out.println(\"hash: add count=\" + count + \" vs \" + table.length);\n    final int h = hash(node);\n    int pos = h & mask;\n    int c = 0;\n    while(true) {\n      final int v = table[pos];\n      if (v == 0) {\n        // freeze & add\n        final int address = fst.addNode(node);\n        //System.out.println(\"  now freeze addr=\" + address);\n        assert hash(address) == h : \"frozenHash=\" + hash(address) + \" vs h=\" + h;\n        count++;\n        table[pos] = address;\n        if (table.length < 2*count) {\n          rehash();\n        }\n        return address;\n      } else if (nodesEqual(node, v)) {\n        // same node is already here\n        return v;\n      }\n\n      // quadratic probe\n      pos = (pos + (++c)) & mask;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#add(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#add(Builder.UnCompiledNode[T]).mjava","sourceNew":"  public int add(Builder.UnCompiledNode<T> node) throws IOException {\n    // System.out.println(\"hash: add count=\" + count + \" vs \" + table.length);\n    final int h = hash(node);\n    int pos = h & mask;\n    int c = 0;\n    while(true) {\n      final int v = table[pos];\n      if (v == 0) {\n        // freeze & add\n        final int address = fst.addNode(node);\n        //System.out.println(\"  now freeze addr=\" + address);\n        assert hash(address) == h : \"frozenHash=\" + hash(address) + \" vs h=\" + h;\n        count++;\n        table[pos] = address;\n        if (table.length < 2*count) {\n          rehash();\n        }\n        return address;\n      } else if (nodesEqual(node, v)) {\n        // same node is already here\n        return v;\n      }\n\n      // quadratic probe\n      pos = (pos + (++c)) & mask;\n    }\n  }\n\n","sourceOld":"  public int add(Builder.UnCompiledNode<T> node) throws IOException {\n    // System.out.println(\"hash: add count=\" + count + \" vs \" + table.length);\n    final int h = hash(node);\n    int pos = h & mask;\n    int c = 0;\n    while(true) {\n      final int v = table[pos];\n      if (v == 0) {\n        // freeze & add\n        final int address = fst.addNode(node);\n        //System.out.println(\"  now freeze addr=\" + address);\n        assert hash(address) == h : \"frozenHash=\" + hash(address) + \" vs h=\" + h;\n        count++;\n        table[pos] = address;\n        if (table.length < 2*count) {\n          rehash();\n        }\n        return address;\n      } else if (nodesEqual(node, v)) {\n        // same node is already here\n        return v;\n      }\n\n      // quadratic probe\n      pos = (pos + (++c)) & mask;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4708e7bf7695781d702d204d178627b4faddc03f","date":1326982060,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#add(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#add(Builder.UnCompiledNode[T]).mjava","sourceNew":"  public int add(Builder.UnCompiledNode<T> node) throws IOException {\n    // System.out.println(\"hash: add count=\" + count + \" vs \" + table.length);\n    final FST.BytesReader in = fst.getBytesReader(0);\n    final int h = hash(node);\n    int pos = h & mask;\n    int c = 0;\n    while(true) {\n      final int v = table[pos];\n      if (v == 0) {\n        // freeze & add\n        final int address = fst.addNode(node);\n        //System.out.println(\"  now freeze addr=\" + address);\n        assert hash(address) == h : \"frozenHash=\" + hash(address) + \" vs h=\" + h;\n        count++;\n        table[pos] = address;\n        if (table.length < 2*count) {\n          rehash();\n        }\n        return address;\n      } else if (nodesEqual(node, v, in)) {\n        // same node is already here\n        return v;\n      }\n\n      // quadratic probe\n      pos = (pos + (++c)) & mask;\n    }\n  }\n\n","sourceOld":"  public int add(Builder.UnCompiledNode<T> node) throws IOException {\n    // System.out.println(\"hash: add count=\" + count + \" vs \" + table.length);\n    final int h = hash(node);\n    int pos = h & mask;\n    int c = 0;\n    while(true) {\n      final int v = table[pos];\n      if (v == 0) {\n        // freeze & add\n        final int address = fst.addNode(node);\n        //System.out.println(\"  now freeze addr=\" + address);\n        assert hash(address) == h : \"frozenHash=\" + hash(address) + \" vs h=\" + h;\n        count++;\n        table[pos] = address;\n        if (table.length < 2*count) {\n          rehash();\n        }\n        return address;\n      } else if (nodesEqual(node, v)) {\n        // same node is already here\n        return v;\n      }\n\n      // quadratic probe\n      pos = (pos + (++c)) & mask;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3be20ca1091c0b7cdb2308b9023606a5e451cec","date":1327877325,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#add(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#add(Builder.UnCompiledNode[T]).mjava","sourceNew":"  public int add(Builder.UnCompiledNode<T> nodeIn) throws IOException {\n    // System.out.println(\"hash: add count=\" + count + \" vs \" + table.length);\n    final FST.BytesReader in = fst.getBytesReader(0);\n    final int h = hash(nodeIn);\n    int pos = h & mask;\n    int c = 0;\n    while(true) {\n      final int v = table[pos];\n      if (v == 0) {\n        // freeze & add\n        final int node = fst.addNode(nodeIn);\n        //System.out.println(\"  now freeze node=\" + node);\n        assert hash(node) == h : \"frozenHash=\" + hash(node) + \" vs h=\" + h;\n        count++;\n        table[pos] = node;\n        if (table.length < 2*count) {\n          rehash();\n        }\n        return node;\n      } else if (nodesEqual(nodeIn, v, in)) {\n        // same node is already here\n        return v;\n      }\n\n      // quadratic probe\n      pos = (pos + (++c)) & mask;\n    }\n  }\n\n","sourceOld":"  public int add(Builder.UnCompiledNode<T> node) throws IOException {\n    // System.out.println(\"hash: add count=\" + count + \" vs \" + table.length);\n    final FST.BytesReader in = fst.getBytesReader(0);\n    final int h = hash(node);\n    int pos = h & mask;\n    int c = 0;\n    while(true) {\n      final int v = table[pos];\n      if (v == 0) {\n        // freeze & add\n        final int address = fst.addNode(node);\n        //System.out.println(\"  now freeze addr=\" + address);\n        assert hash(address) == h : \"frozenHash=\" + hash(address) + \" vs h=\" + h;\n        count++;\n        table[pos] = address;\n        if (table.length < 2*count) {\n          rehash();\n        }\n        return address;\n      } else if (nodesEqual(node, v, in)) {\n        // same node is already here\n        return v;\n      }\n\n      // quadratic probe\n      pos = (pos + (++c)) & mask;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#add(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#add(Builder.UnCompiledNode[T]).mjava","sourceNew":"  public int add(Builder.UnCompiledNode<T> nodeIn) throws IOException {\n    // System.out.println(\"hash: add count=\" + count + \" vs \" + table.length);\n    final FST.BytesReader in = fst.getBytesReader(0);\n    final int h = hash(nodeIn);\n    int pos = h & mask;\n    int c = 0;\n    while(true) {\n      final int v = table[pos];\n      if (v == 0) {\n        // freeze & add\n        final int node = fst.addNode(nodeIn);\n        //System.out.println(\"  now freeze node=\" + node);\n        assert hash(node) == h : \"frozenHash=\" + hash(node) + \" vs h=\" + h;\n        count++;\n        table[pos] = node;\n        if (table.length < 2*count) {\n          rehash();\n        }\n        return node;\n      } else if (nodesEqual(nodeIn, v, in)) {\n        // same node is already here\n        return v;\n      }\n\n      // quadratic probe\n      pos = (pos + (++c)) & mask;\n    }\n  }\n\n","sourceOld":"  public int add(Builder.UnCompiledNode<T> node) throws IOException {\n    // System.out.println(\"hash: add count=\" + count + \" vs \" + table.length);\n    final FST.BytesReader in = fst.getBytesReader(0);\n    final int h = hash(node);\n    int pos = h & mask;\n    int c = 0;\n    while(true) {\n      final int v = table[pos];\n      if (v == 0) {\n        // freeze & add\n        final int address = fst.addNode(node);\n        //System.out.println(\"  now freeze addr=\" + address);\n        assert hash(address) == h : \"frozenHash=\" + hash(address) + \" vs h=\" + h;\n        count++;\n        table[pos] = address;\n        if (table.length < 2*count) {\n          rehash();\n        }\n        return address;\n      } else if (nodesEqual(node, v, in)) {\n        // same node is already here\n        return v;\n      }\n\n      // quadratic probe\n      pos = (pos + (++c)) & mask;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#add(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#add(Builder.UnCompiledNode[T]).mjava","sourceNew":"  public int add(Builder.UnCompiledNode<T> nodeIn) throws IOException {\n    // System.out.println(\"hash: add count=\" + count + \" vs \" + table.length);\n    final FST.BytesReader in = fst.getBytesReader(0);\n    final int h = hash(nodeIn);\n    int pos = h & mask;\n    int c = 0;\n    while(true) {\n      final int v = table[pos];\n      if (v == 0) {\n        // freeze & add\n        final int node = fst.addNode(nodeIn);\n        //System.out.println(\"  now freeze node=\" + node);\n        assert hash(node) == h : \"frozenHash=\" + hash(node) + \" vs h=\" + h;\n        count++;\n        table[pos] = node;\n        if (table.length < 2*count) {\n          rehash();\n        }\n        return node;\n      } else if (nodesEqual(nodeIn, v, in)) {\n        // same node is already here\n        return v;\n      }\n\n      // quadratic probe\n      pos = (pos + (++c)) & mask;\n    }\n  }\n\n","sourceOld":"  public int add(Builder.UnCompiledNode<T> node) throws IOException {\n    // System.out.println(\"hash: add count=\" + count + \" vs \" + table.length);\n    final FST.BytesReader in = fst.getBytesReader(0);\n    final int h = hash(node);\n    int pos = h & mask;\n    int c = 0;\n    while(true) {\n      final int v = table[pos];\n      if (v == 0) {\n        // freeze & add\n        final int address = fst.addNode(node);\n        //System.out.println(\"  now freeze addr=\" + address);\n        assert hash(address) == h : \"frozenHash=\" + hash(address) + \" vs h=\" + h;\n        count++;\n        table[pos] = address;\n        if (table.length < 2*count) {\n          rehash();\n        }\n        return address;\n      } else if (nodesEqual(node, v, in)) {\n        // same node is already here\n        return v;\n      }\n\n      // quadratic probe\n      pos = (pos + (++c)) & mask;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#add(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#add(Builder.UnCompiledNode[T]).mjava","sourceNew":"  public int add(Builder.UnCompiledNode<T> nodeIn) throws IOException {\n    // System.out.println(\"hash: add count=\" + count + \" vs \" + table.length);\n    final FST.BytesReader in = fst.getBytesReader(0);\n    final int h = hash(nodeIn);\n    int pos = h & mask;\n    int c = 0;\n    while(true) {\n      final int v = table[pos];\n      if (v == 0) {\n        // freeze & add\n        final int node = fst.addNode(nodeIn);\n        //System.out.println(\"  now freeze node=\" + node);\n        assert hash(node) == h : \"frozenHash=\" + hash(node) + \" vs h=\" + h;\n        count++;\n        table[pos] = node;\n        if (table.length < 2*count) {\n          rehash();\n        }\n        return node;\n      } else if (nodesEqual(nodeIn, v, in)) {\n        // same node is already here\n        return v;\n      }\n\n      // quadratic probe\n      pos = (pos + (++c)) & mask;\n    }\n  }\n\n","sourceOld":"  public int add(Builder.UnCompiledNode<T> nodeIn) throws IOException {\n    // System.out.println(\"hash: add count=\" + count + \" vs \" + table.length);\n    final FST.BytesReader in = fst.getBytesReader(0);\n    final int h = hash(nodeIn);\n    int pos = h & mask;\n    int c = 0;\n    while(true) {\n      final int v = table[pos];\n      if (v == 0) {\n        // freeze & add\n        final int node = fst.addNode(nodeIn);\n        //System.out.println(\"  now freeze node=\" + node);\n        assert hash(node) == h : \"frozenHash=\" + hash(node) + \" vs h=\" + h;\n        count++;\n        table[pos] = node;\n        if (table.length < 2*count) {\n          rehash();\n        }\n        return node;\n      } else if (nodesEqual(nodeIn, v, in)) {\n        // same node is already here\n        return v;\n      }\n\n      // quadratic probe\n      pos = (pos + (++c)) & mask;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["4708e7bf7695781d702d204d178627b4faddc03f"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["4708e7bf7695781d702d204d178627b4faddc03f","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["4708e7bf7695781d702d204d178627b4faddc03f","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4708e7bf7695781d702d204d178627b4faddc03f":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","4708e7bf7695781d702d204d178627b4faddc03f","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["817882884229bace7dc5d1b75f6b0e4aa1e47122","3a119bbc8703c10faa329ec201c654b3a35a1e3e","5b6fdfce35d0adb18836cf8711abe487a934df33"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"4708e7bf7695781d702d204d178627b4faddc03f":["b3be20ca1091c0b7cdb2308b9023606a5e451cec","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}