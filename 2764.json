{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#Preference(Map[String,Object]).mjava","commits":[{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":1,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#Preference(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Preference#Preference(Map[String,Object]).mjava","sourceNew":"  Preference(Map<String, Object> m) {\n    this.original = Utils.getDeepCopy(m,3);\n    sort = Policy.Sort.get(m);\n    name = Policy.SortParam.get(m.get(sort.name()).toString());\n    Object p = m.getOrDefault(\"precision\", 0);\n    precision = p instanceof Number ? ((Number) p).intValue() : Integer.parseInt(p.toString());\n    if (precision < 0) {\n      throw new RuntimeException(\"precision must be a positive value \");\n    }\n    if(precision< name.min || precision> name.max){\n      throw new RuntimeException(StrUtils.formatString(\"invalid precision value {0} must lie between {1} and {1}\",\n          precision, name.min, name.max ) );\n    }\n\n  }\n\n","sourceOld":"  Preference(Map<String, Object> m) {\n    this.original = Utils.getDeepCopy(m,3);\n    sort = Policy.Sort.get(m);\n    name = Policy.SortParam.get(m.get(sort.name()).toString());\n    Object p = m.getOrDefault(\"precision\", 0);\n    precision = p instanceof Number ? ((Number) p).intValue() : Integer.parseInt(p.toString());\n    if (precision < 0) {\n      throw new RuntimeException(\"precision must be a positive value \");\n    }\n    if(precision< name.min || precision> name.max){\n      throw new RuntimeException(StrUtils.formatString(\"invalid precision value {0} must lie between {1} and {1}\",\n          precision, name.min, name.max ) );\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#Preference(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Preference#Preference(Map[String,Object]).mjava","sourceNew":"  Preference(Map<String, Object> m) {\n    this.original = Utils.getDeepCopy(m,3);\n    sort = Policy.Sort.get(m);\n    name = Policy.SortParam.get(m.get(sort.name()).toString());\n    Object p = m.getOrDefault(\"precision\", 0);\n    precision = p instanceof Number ? ((Number) p).intValue() : Integer.parseInt(p.toString());\n    if (precision < 0) {\n      throw new RuntimeException(\"precision must be a positive value \");\n    }\n    if(precision< name.min || precision> name.max){\n      throw new RuntimeException(StrUtils.formatString(\"invalid precision value {0} must lie between {1} and {1}\",\n          precision, name.min, name.max ) );\n    }\n\n  }\n\n","sourceOld":"  Preference(Map<String, Object> m) {\n    this.original = Utils.getDeepCopy(m,3);\n    sort = Policy.Sort.get(m);\n    name = Policy.SortParam.get(m.get(sort.name()).toString());\n    Object p = m.getOrDefault(\"precision\", 0);\n    precision = p instanceof Number ? ((Number) p).intValue() : Integer.parseInt(p.toString());\n    if (precision < 0) {\n      throw new RuntimeException(\"precision must be a positive value \");\n    }\n    if(precision< name.min || precision> name.max){\n      throw new RuntimeException(StrUtils.formatString(\"invalid precision value {0} must lie between {1} and {1}\",\n          precision, name.min, name.max ) );\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#Preference(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  Preference(Map<String, Object> m) {\n    this.original = Utils.getDeepCopy(m,3);\n    sort = Policy.Sort.get(m);\n    name = Policy.SortParam.get(m.get(sort.name()).toString());\n    Object p = m.getOrDefault(\"precision\", 0);\n    precision = p instanceof Number ? ((Number) p).intValue() : Integer.parseInt(p.toString());\n    if (precision < 0) {\n      throw new RuntimeException(\"precision must be a positive value \");\n    }\n    if(precision< name.min || precision> name.max){\n      throw new RuntimeException(StrUtils.formatString(\"invalid precision value {0} must lie between {1} and {1}\",\n          precision, name.min, name.max ) );\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#Preference(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#Preference(Map[String,Object]).mjava","sourceNew":"  public Preference(Map<String, Object> m) {\n    this.original = Utils.getDeepCopy(m,3);\n    sort = Policy.Sort.get(m);\n    name = Policy.SortParam.get(m.get(sort.name()).toString());\n    Object p = m.getOrDefault(\"precision\", 0);\n    precision = p instanceof Number ? ((Number) p).intValue() : Integer.parseInt(p.toString());\n    if (precision < 0) {\n      throw new RuntimeException(\"precision must be a positive value \");\n    }\n    if(precision< name.min || precision> name.max){\n      throw new RuntimeException(StrUtils.formatString(\"invalid precision value {0} must lie between {1} and {1}\",\n          precision, name.min, name.max ) );\n    }\n\n  }\n\n","sourceOld":"  Preference(Map<String, Object> m) {\n    this.original = Utils.getDeepCopy(m,3);\n    sort = Policy.Sort.get(m);\n    name = Policy.SortParam.get(m.get(sort.name()).toString());\n    Object p = m.getOrDefault(\"precision\", 0);\n    precision = p instanceof Number ? ((Number) p).intValue() : Integer.parseInt(p.toString());\n    if (precision < 0) {\n      throw new RuntimeException(\"precision must be a positive value \");\n    }\n    if(precision< name.min || precision> name.max){\n      throw new RuntimeException(StrUtils.formatString(\"invalid precision value {0} must lie between {1} and {1}\",\n          precision, name.min, name.max ) );\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954590f07cfbe2c3ccb86e29d0742c43740ca509","date":1500371516,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#Preference(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#Preference(Map[String,Object]).mjava","sourceNew":"  public Preference(Map<String, Object> m) {\n    this(m, 0);\n  }\n\n","sourceOld":"  public Preference(Map<String, Object> m) {\n    this.original = Utils.getDeepCopy(m,3);\n    sort = Policy.Sort.get(m);\n    name = Policy.SortParam.get(m.get(sort.name()).toString());\n    Object p = m.getOrDefault(\"precision\", 0);\n    precision = p instanceof Number ? ((Number) p).intValue() : Integer.parseInt(p.toString());\n    if (precision < 0) {\n      throw new RuntimeException(\"precision must be a positive value \");\n    }\n    if(precision< name.min || precision> name.max){\n      throw new RuntimeException(StrUtils.formatString(\"invalid precision value {0} must lie between {1} and {1}\",\n          precision, name.min, name.max ) );\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#Preference(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#Preference(Map[String,Object]).mjava","sourceNew":"  public Preference(Map<String, Object> m) {\n    this(m, 0);\n  }\n\n","sourceOld":"  Preference(Map<String, Object> m) {\n    this.original = Utils.getDeepCopy(m,3);\n    sort = Policy.Sort.get(m);\n    name = Policy.SortParam.get(m.get(sort.name()).toString());\n    Object p = m.getOrDefault(\"precision\", 0);\n    precision = p instanceof Number ? ((Number) p).intValue() : Integer.parseInt(p.toString());\n    if (precision < 0) {\n      throw new RuntimeException(\"precision must be a positive value \");\n    }\n    if(precision< name.min || precision> name.max){\n      throw new RuntimeException(StrUtils.formatString(\"invalid precision value {0} must lie between {1} and {1}\",\n          precision, name.min, name.max ) );\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#Preference(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#Preference(Map[String,Object]).mjava","sourceNew":"  public Preference(Map<String, Object> m) {\n    this(m, 0);\n  }\n\n","sourceOld":"  Preference(Map<String, Object> m) {\n    this.original = Utils.getDeepCopy(m,3);\n    sort = Policy.Sort.get(m);\n    name = Policy.SortParam.get(m.get(sort.name()).toString());\n    Object p = m.getOrDefault(\"precision\", 0);\n    precision = p instanceof Number ? ((Number) p).intValue() : Integer.parseInt(p.toString());\n    if (precision < 0) {\n      throw new RuntimeException(\"precision must be a positive value \");\n    }\n    if(precision< name.min || precision> name.max){\n      throw new RuntimeException(StrUtils.formatString(\"invalid precision value {0} must lie between {1} and {1}\",\n          precision, name.min, name.max ) );\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Preference#Preference(Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  public Preference(Map<String, Object> m) {\n    this(m, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["28288370235ed02234a64753cdbf0c6ec096304a","954590f07cfbe2c3ccb86e29d0742c43740ca509"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["560c18d71dad43d675158783c3840f8c80d6d39c"],"954590f07cfbe2c3ccb86e29d0742c43740ca509":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"560c18d71dad43d675158783c3840f8c80d6d39c":["28288370235ed02234a64753cdbf0c6ec096304a","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["98f11c416d30e556e0004a9a84960702d12d35b1"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"98f11c416d30e556e0004a9a84960702d12d35b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"954590f07cfbe2c3ccb86e29d0742c43740ca509":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"560c18d71dad43d675158783c3840f8c80d6d39c":["3f504512a03d978990cbff30db0522b354e846db"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["954590f07cfbe2c3ccb86e29d0742c43740ca509"],"28288370235ed02234a64753cdbf0c6ec096304a":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"98f11c416d30e556e0004a9a84960702d12d35b1":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}