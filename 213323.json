{"path":"solr/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"/dev/null","sourceNew":"  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    boolean abortOnConfigurationError = true;\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n      init.setSolrConfigFilename(config.getInitParameter(\"solrconfig-filename\"));\n\n      this.cores = init.initialize();\n      abortOnConfigurationError = init.isAbortOnConfigurationError();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property\", t);\n      SolrConfig.severeErrors.add( t );\n      SolrCore.log( t );\n    }\n\n    // Optionally abort if we found a sever error\n    if( abortOnConfigurationError && SolrConfig.severeErrors.size() > 0 ) {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter( sw );\n      out.println( \"Severe errors in solr configuration.\\n\" );\n      out.println( \"Check your log files for more detailed information on what may be wrong.\\n\" );\n      out.println( \"If you want solr to continue after configuration errors, change: \\n\");\n      out.println( \" <abortOnConfigurationError>false</abortOnConfigurationError>\\n\" );\n      out.println( \"in \"+init.getSolrConfigFilename()+\"\\n\" );\n\n      for( Throwable t : SolrConfig.severeErrors ) {\n        out.println( \"-------------------------------------------------------------\" );\n        t.printStackTrace( out );\n      }\n      out.flush();\n\n      // Servlet containers behave slightly differently if you throw an exception during \n      // initialization.  Resin will display that error for every page, jetty prints it in\n      // the logs, but continues normally.  (We will see a 404 rather then the real error)\n      // rather then leave the behavior undefined, lets cache the error and spit it out \n      // for every request.\n      abortErrorMessage = sw.toString();\n      //throw new ServletException( abortErrorMessage );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":null,"sourceOld":"  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    boolean abortOnConfigurationError = true;\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n      init.setSolrConfigFilename(config.getInitParameter(\"solrconfig-filename\"));\n\n      this.cores = init.initialize();\n      abortOnConfigurationError = init.isAbortOnConfigurationError();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property\", t);\n      SolrConfig.severeErrors.add( t );\n      SolrCore.log( t );\n    }\n\n    // Optionally abort if we found a sever error\n    if( abortOnConfigurationError && SolrConfig.severeErrors.size() > 0 ) {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter( sw );\n      out.println( \"Severe errors in solr configuration.\\n\" );\n      out.println( \"Check your log files for more detailed information on what may be wrong.\\n\" );\n      out.println( \"If you want solr to continue after configuration errors, change: \\n\");\n      out.println( \" <abortOnConfigurationError>false</abortOnConfigurationError>\\n\" );\n      out.println( \"in \"+init.getSolrConfigFilename()+\"\\n\" );\n\n      for( Throwable t : SolrConfig.severeErrors ) {\n        out.println( \"-------------------------------------------------------------\" );\n        t.printStackTrace( out );\n      }\n      out.flush();\n\n      // Servlet containers behave slightly differently if you throw an exception during \n      // initialization.  Resin will display that error for every page, jetty prints it in\n      // the logs, but continues normally.  (We will see a 404 rather then the real error)\n      // rather then leave the behavior undefined, lets cache the error and spit it out \n      // for every request.\n      abortErrorMessage = sw.toString();\n      //throw new ServletException( abortErrorMessage );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    boolean abortOnConfigurationError = true;\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n      init.setSolrConfigFilename(config.getInitParameter(\"solrconfig-filename\"));\n\n      this.cores = init.initialize();\n      abortOnConfigurationError = init.isAbortOnConfigurationError();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property\", t);\n      SolrConfig.severeErrors.add( t );\n      SolrCore.log( t );\n    }\n\n    // Optionally abort if we found a sever error\n    if( abortOnConfigurationError && SolrConfig.severeErrors.size() > 0 ) {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter( sw );\n      out.println( \"Severe errors in solr configuration.\\n\" );\n      out.println( \"Check your log files for more detailed information on what may be wrong.\\n\" );\n      out.println( \"If you want solr to continue after configuration errors, change: \\n\");\n      out.println( \" <abortOnConfigurationError>false</abortOnConfigurationError>\\n\" );\n      out.println( \"in \"+init.getSolrConfigFilename()+\"\\n\" );\n\n      for( Throwable t : SolrConfig.severeErrors ) {\n        out.println( \"-------------------------------------------------------------\" );\n        t.printStackTrace( out );\n      }\n      out.flush();\n\n      // Servlet containers behave slightly differently if you throw an exception during \n      // initialization.  Resin will display that error for every page, jetty prints it in\n      // the logs, but continues normally.  (We will see a 404 rather then the real error)\n      // rather then leave the behavior undefined, lets cache the error and spit it out \n      // for every request.\n      abortErrorMessage = sw.toString();\n      //throw new ServletException( abortErrorMessage );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    boolean abortOnConfigurationError = true;\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n      init.setSolrConfigFilename(config.getInitParameter(\"solrconfig-filename\"));\n\n      this.cores = init.initialize();\n      abortOnConfigurationError = init.isAbortOnConfigurationError();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property\", t);\n      SolrConfig.severeErrors.add( t );\n      SolrCore.log( t );\n    }\n\n    // Optionally abort if we found a sever error\n    if( abortOnConfigurationError && SolrConfig.severeErrors.size() > 0 ) {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter( sw );\n      out.println( \"Severe errors in solr configuration.\\n\" );\n      out.println( \"Check your log files for more detailed information on what may be wrong.\\n\" );\n      out.println( \"If you want solr to continue after configuration errors, change: \\n\");\n      out.println( \" <abortOnConfigurationError>false</abortOnConfigurationError>\\n\" );\n      out.println( \"in \"+init.getSolrConfigFilename()+\"\\n\" );\n\n      for( Throwable t : SolrConfig.severeErrors ) {\n        out.println( \"-------------------------------------------------------------\" );\n        t.printStackTrace( out );\n      }\n      out.flush();\n\n      // Servlet containers behave slightly differently if you throw an exception during \n      // initialization.  Resin will display that error for every page, jetty prints it in\n      // the logs, but continues normally.  (We will see a 404 rather then the real error)\n      // rather then leave the behavior undefined, lets cache the error and spit it out \n      // for every request.\n      abortErrorMessage = sw.toString();\n      //throw new ServletException( abortErrorMessage );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"/dev/null","sourceNew":"  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    boolean abortOnConfigurationError = true;\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n      init.setSolrConfigFilename(config.getInitParameter(\"solrconfig-filename\"));\n\n      this.cores = init.initialize();\n      abortOnConfigurationError = init.isAbortOnConfigurationError();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property\", t);\n      SolrConfig.severeErrors.add( t );\n      SolrCore.log( t );\n    }\n\n    // Optionally abort if we found a sever error\n    if( abortOnConfigurationError && SolrConfig.severeErrors.size() > 0 ) {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter( sw );\n      out.println( \"Severe errors in solr configuration.\\n\" );\n      out.println( \"Check your log files for more detailed information on what may be wrong.\\n\" );\n      out.println( \"If you want solr to continue after configuration errors, change: \\n\");\n      out.println( \" <abortOnConfigurationError>false</abortOnConfigurationError>\\n\" );\n      out.println( \"in \"+init.getSolrConfigFilename()+\"\\n\" );\n\n      for( Throwable t : SolrConfig.severeErrors ) {\n        out.println( \"-------------------------------------------------------------\" );\n        t.printStackTrace( out );\n      }\n      out.flush();\n\n      // Servlet containers behave slightly differently if you throw an exception during \n      // initialization.  Resin will display that error for every page, jetty prints it in\n      // the logs, but continues normally.  (We will see a 404 rather then the real error)\n      // rather then leave the behavior undefined, lets cache the error and spit it out \n      // for every request.\n      abortErrorMessage = sw.toString();\n      //throw new ServletException( abortErrorMessage );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0aea57ab530d174e645bf6e14d04db1e243e13d7","date":1274216848,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    boolean abortOnConfigurationError = true;\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n      init.setSolrConfigFilename(config.getInitParameter(\"solrconfig-filename\"));\n\n      this.cores = init.initialize();\n      abortOnConfigurationError = init.isAbortOnConfigurationError();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property\", t);\n      SolrConfig.severeErrors.add( t );\n      SolrCore.log( t );\n    }\n\n    // Optionally abort if we found a sever error\n    if( abortOnConfigurationError && SolrConfig.severeErrors.size() > 0 ) {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter( sw );\n      out.println( \"Severe errors in solr configuration.\\n\" );\n      out.println( \"Check your log files for more detailed information on what may be wrong.\\n\" );\n      for( Throwable t : SolrConfig.severeErrors ) {\n        out.println( \"-------------------------------------------------------------\" );\n        t.printStackTrace( out );\n      }\n      out.flush();\n\n      // Servlet containers behave slightly differently if you throw an exception during \n      // initialization.  Resin will display that error for every page, jetty prints it in\n      // the logs, but continues normally.  (We will see a 404 rather then the real error)\n      // rather then leave the behavior undefined, lets cache the error and spit it out \n      // for every request.\n      abortErrorMessage = sw.toString();\n      //throw new ServletException( abortErrorMessage );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    boolean abortOnConfigurationError = true;\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n      init.setSolrConfigFilename(config.getInitParameter(\"solrconfig-filename\"));\n\n      this.cores = init.initialize();\n      abortOnConfigurationError = init.isAbortOnConfigurationError();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property\", t);\n      SolrConfig.severeErrors.add( t );\n      SolrCore.log( t );\n    }\n\n    // Optionally abort if we found a sever error\n    if( abortOnConfigurationError && SolrConfig.severeErrors.size() > 0 ) {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter( sw );\n      out.println( \"Severe errors in solr configuration.\\n\" );\n      out.println( \"Check your log files for more detailed information on what may be wrong.\\n\" );\n      out.println( \"If you want solr to continue after configuration errors, change: \\n\");\n      out.println( \" <abortOnConfigurationError>false</abortOnConfigurationError>\\n\" );\n      out.println( \"in \"+init.getSolrConfigFilename()+\"\\n\" );\n\n      for( Throwable t : SolrConfig.severeErrors ) {\n        out.println( \"-------------------------------------------------------------\" );\n        t.printStackTrace( out );\n      }\n      out.flush();\n\n      // Servlet containers behave slightly differently if you throw an exception during \n      // initialization.  Resin will display that error for every page, jetty prints it in\n      // the logs, but continues normally.  (We will see a 404 rather then the real error)\n      // rather then leave the behavior undefined, lets cache the error and spit it out \n      // for every request.\n      abortErrorMessage = sw.toString();\n      //throw new ServletException( abortErrorMessage );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":["4926b5318ba4167d360445a0c5f3fc8af2cf8c49","368c8927753a9ca6ee214a251da2746ff35aeef6","ae248910a22eb7d1b6bd9ade7f9a33dfc0506f0c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4f4245d1ce3fc22feae2d4d0341e09c623d18b58","date":1293820574,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    boolean abortOnConfigurationError = true;\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = init.initialize();\n      abortOnConfigurationError = init.isAbortOnConfigurationError();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property\", t);\n      SolrConfig.severeErrors.add( t );\n      SolrCore.log( t );\n    }\n\n    // Optionally abort if we found a sever error\n    if( abortOnConfigurationError && SolrConfig.severeErrors.size() > 0 ) {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter( sw );\n      out.println( \"Severe errors in solr configuration.\\n\" );\n      out.println( \"Check your log files for more detailed information on what may be wrong.\\n\" );\n      for( Throwable t : SolrConfig.severeErrors ) {\n        out.println( \"-------------------------------------------------------------\" );\n        t.printStackTrace( out );\n      }\n      out.flush();\n\n      // Servlet containers behave slightly differently if you throw an exception during \n      // initialization.  Resin will display that error for every page, jetty prints it in\n      // the logs, but continues normally.  (We will see a 404 rather then the real error)\n      // rather then leave the behavior undefined, lets cache the error and spit it out \n      // for every request.\n      abortErrorMessage = sw.toString();\n      //throw new ServletException( abortErrorMessage );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    boolean abortOnConfigurationError = true;\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n      init.setSolrConfigFilename(config.getInitParameter(\"solrconfig-filename\"));\n\n      this.cores = init.initialize();\n      abortOnConfigurationError = init.isAbortOnConfigurationError();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property\", t);\n      SolrConfig.severeErrors.add( t );\n      SolrCore.log( t );\n    }\n\n    // Optionally abort if we found a sever error\n    if( abortOnConfigurationError && SolrConfig.severeErrors.size() > 0 ) {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter( sw );\n      out.println( \"Severe errors in solr configuration.\\n\" );\n      out.println( \"Check your log files for more detailed information on what may be wrong.\\n\" );\n      for( Throwable t : SolrConfig.severeErrors ) {\n        out.println( \"-------------------------------------------------------------\" );\n        t.printStackTrace( out );\n      }\n      out.flush();\n\n      // Servlet containers behave slightly differently if you throw an exception during \n      // initialization.  Resin will display that error for every page, jetty prints it in\n      // the logs, but continues normally.  (We will see a 404 rather then the real error)\n      // rather then leave the behavior undefined, lets cache the error and spit it out \n      // for every request.\n      abortErrorMessage = sw.toString();\n      //throw new ServletException( abortErrorMessage );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    boolean abortOnConfigurationError = true;\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = init.initialize();\n      abortOnConfigurationError = init.isAbortOnConfigurationError();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property\", t);\n      SolrConfig.severeErrors.add( t );\n      SolrCore.log( t );\n    }\n\n    // Optionally abort if we found a sever error\n    if( abortOnConfigurationError && SolrConfig.severeErrors.size() > 0 ) {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter( sw );\n      out.println( \"Severe errors in solr configuration.\\n\" );\n      out.println( \"Check your log files for more detailed information on what may be wrong.\\n\" );\n      for( Throwable t : SolrConfig.severeErrors ) {\n        out.println( \"-------------------------------------------------------------\" );\n        t.printStackTrace( out );\n      }\n      out.flush();\n\n      // Servlet containers behave slightly differently if you throw an exception during \n      // initialization.  Resin will display that error for every page, jetty prints it in\n      // the logs, but continues normally.  (We will see a 404 rather then the real error)\n      // rather then leave the behavior undefined, lets cache the error and spit it out \n      // for every request.\n      abortErrorMessage = sw.toString();\n      //throw new ServletException( abortErrorMessage );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    boolean abortOnConfigurationError = true;\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n      init.setSolrConfigFilename(config.getInitParameter(\"solrconfig-filename\"));\n\n      this.cores = init.initialize();\n      abortOnConfigurationError = init.isAbortOnConfigurationError();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property\", t);\n      SolrConfig.severeErrors.add( t );\n      SolrCore.log( t );\n    }\n\n    // Optionally abort if we found a sever error\n    if( abortOnConfigurationError && SolrConfig.severeErrors.size() > 0 ) {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter( sw );\n      out.println( \"Severe errors in solr configuration.\\n\" );\n      out.println( \"Check your log files for more detailed information on what may be wrong.\\n\" );\n      for( Throwable t : SolrConfig.severeErrors ) {\n        out.println( \"-------------------------------------------------------------\" );\n        t.printStackTrace( out );\n      }\n      out.flush();\n\n      // Servlet containers behave slightly differently if you throw an exception during \n      // initialization.  Resin will display that error for every page, jetty prints it in\n      // the logs, but continues normally.  (We will see a 404 rather then the real error)\n      // rather then leave the behavior undefined, lets cache the error and spit it out \n      // for every request.\n      abortErrorMessage = sw.toString();\n      //throw new ServletException( abortErrorMessage );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    boolean abortOnConfigurationError = true;\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = init.initialize();\n      abortOnConfigurationError = init.isAbortOnConfigurationError();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property\", t);\n      SolrConfig.severeErrors.add( t );\n      SolrCore.log( t );\n    }\n\n    // Optionally abort if we found a sever error\n    if( abortOnConfigurationError && SolrConfig.severeErrors.size() > 0 ) {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter( sw );\n      out.println( \"Severe errors in solr configuration.\\n\" );\n      out.println( \"Check your log files for more detailed information on what may be wrong.\\n\" );\n      for( Throwable t : SolrConfig.severeErrors ) {\n        out.println( \"-------------------------------------------------------------\" );\n        t.printStackTrace( out );\n      }\n      out.flush();\n\n      // Servlet containers behave slightly differently if you throw an exception during \n      // initialization.  Resin will display that error for every page, jetty prints it in\n      // the logs, but continues normally.  (We will see a 404 rather then the real error)\n      // rather then leave the behavior undefined, lets cache the error and spit it out \n      // for every request.\n      abortErrorMessage = sw.toString();\n      //throw new ServletException( abortErrorMessage );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    boolean abortOnConfigurationError = true;\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n      init.setSolrConfigFilename(config.getInitParameter(\"solrconfig-filename\"));\n\n      this.cores = init.initialize();\n      abortOnConfigurationError = init.isAbortOnConfigurationError();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property\", t);\n      SolrConfig.severeErrors.add( t );\n      SolrCore.log( t );\n    }\n\n    // Optionally abort if we found a sever error\n    if( abortOnConfigurationError && SolrConfig.severeErrors.size() > 0 ) {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter( sw );\n      out.println( \"Severe errors in solr configuration.\\n\" );\n      out.println( \"Check your log files for more detailed information on what may be wrong.\\n\" );\n      for( Throwable t : SolrConfig.severeErrors ) {\n        out.println( \"-------------------------------------------------------------\" );\n        t.printStackTrace( out );\n      }\n      out.flush();\n\n      // Servlet containers behave slightly differently if you throw an exception during \n      // initialization.  Resin will display that error for every page, jetty prints it in\n      // the logs, but continues normally.  (We will see a 404 rather then the real error)\n      // rather then leave the behavior undefined, lets cache the error and spit it out \n      // for every request.\n      abortErrorMessage = sw.toString();\n      //throw new ServletException( abortErrorMessage );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    boolean abortOnConfigurationError = true;\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = init.initialize();\n      abortOnConfigurationError = init.isAbortOnConfigurationError();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property\", t);\n      SolrConfig.severeErrors.add( t );\n      SolrCore.log( t );\n    }\n\n    // Optionally abort if we found a sever error\n    if( abortOnConfigurationError && SolrConfig.severeErrors.size() > 0 ) {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter( sw );\n      out.println( \"Severe errors in solr configuration.\\n\" );\n      out.println( \"Check your log files for more detailed information on what may be wrong.\\n\" );\n      for( Throwable t : SolrConfig.severeErrors ) {\n        out.println( \"-------------------------------------------------------------\" );\n        t.printStackTrace( out );\n      }\n      out.flush();\n\n      // Servlet containers behave slightly differently if you throw an exception during \n      // initialization.  Resin will display that error for every page, jetty prints it in\n      // the logs, but continues normally.  (We will see a 404 rather then the real error)\n      // rather then leave the behavior undefined, lets cache the error and spit it out \n      // for every request.\n      abortErrorMessage = sw.toString();\n      //throw new ServletException( abortErrorMessage );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    boolean abortOnConfigurationError = true;\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = init.initialize();\n      abortOnConfigurationError = init.isAbortOnConfigurationError();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property\", t);\n      SolrConfig.severeErrors.add( t );\n      SolrCore.log( t );\n    }\n\n    // Optionally abort if we found a sever error\n    if( abortOnConfigurationError && SolrConfig.severeErrors.size() > 0 ) {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter( sw );\n      out.println( \"Severe errors in solr configuration.\\n\" );\n      out.println( \"Check your log files for more detailed information on what may be wrong.\\n\" );\n      for( Throwable t : SolrConfig.severeErrors ) {\n        out.println( \"-------------------------------------------------------------\" );\n        t.printStackTrace( out );\n      }\n      out.flush();\n\n      // Servlet containers behave slightly differently if you throw an exception during \n      // initialization.  Resin will display that error for every page, jetty prints it in\n      // the logs, but continues normally.  (We will see a 404 rather then the real error)\n      // rather then leave the behavior undefined, lets cache the error and spit it out \n      // for every request.\n      abortErrorMessage = sw.toString();\n      //throw new ServletException( abortErrorMessage );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    boolean abortOnConfigurationError = true;\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = init.initialize();\n      abortOnConfigurationError = init.isAbortOnConfigurationError();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property\", t);\n      SolrConfig.severeErrors.add( t );\n      SolrCore.log( t );\n    }\n\n    // Optionally abort if we found a sever error\n    if( abortOnConfigurationError && SolrConfig.severeErrors.size() > 0 ) {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter( sw );\n      out.println( \"Severe errors in solr configuration.\\n\" );\n      out.println( \"Check your log files for more detailed information on what may be wrong.\\n\" );\n      for( Throwable t : SolrConfig.severeErrors ) {\n        out.println( \"-------------------------------------------------------------\" );\n        t.printStackTrace( out );\n      }\n      out.flush();\n\n      // Servlet containers behave slightly differently if you throw an exception during \n      // initialization.  Resin will display that error for every page, jetty prints it in\n      // the logs, but continues normally.  (We will see a 404 rather then the real error)\n      // rather then leave the behavior undefined, lets cache the error and spit it out \n      // for every request.\n      abortErrorMessage = sw.toString();\n      //throw new ServletException( abortErrorMessage );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    boolean abortOnConfigurationError = true;\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = init.initialize();\n      abortOnConfigurationError = init.isAbortOnConfigurationError();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property\", t);\n      SolrConfig.severeErrors.add( t );\n      SolrCore.log( t );\n    }\n\n    // Optionally abort if we found a sever error\n    if( abortOnConfigurationError && SolrConfig.severeErrors.size() > 0 ) {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter( sw );\n      out.println( \"Severe errors in solr configuration.\\n\" );\n      out.println( \"Check your log files for more detailed information on what may be wrong.\\n\" );\n      for( Throwable t : SolrConfig.severeErrors ) {\n        out.println( \"-------------------------------------------------------------\" );\n        t.printStackTrace( out );\n      }\n      out.flush();\n\n      // Servlet containers behave slightly differently if you throw an exception during \n      // initialization.  Resin will display that error for every page, jetty prints it in\n      // the logs, but continues normally.  (We will see a 404 rather then the real error)\n      // rather then leave the behavior undefined, lets cache the error and spit it out \n      // for every request.\n      abortErrorMessage = sw.toString();\n      //throw new ServletException( abortErrorMessage );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    boolean abortOnConfigurationError = true;\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = init.initialize();\n      abortOnConfigurationError = init.isAbortOnConfigurationError();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property\", t);\n      SolrConfig.severeErrors.add( t );\n      SolrCore.log( t );\n    }\n\n    // Optionally abort if we found a sever error\n    if( abortOnConfigurationError && SolrConfig.severeErrors.size() > 0 ) {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter( sw );\n      out.println( \"Severe errors in solr configuration.\\n\" );\n      out.println( \"Check your log files for more detailed information on what may be wrong.\\n\" );\n      for( Throwable t : SolrConfig.severeErrors ) {\n        out.println( \"-------------------------------------------------------------\" );\n        t.printStackTrace( out );\n      }\n      out.flush();\n\n      // Servlet containers behave slightly differently if you throw an exception during \n      // initialization.  Resin will display that error for every page, jetty prints it in\n      // the logs, but continues normally.  (We will see a 404 rather then the real error)\n      // rather then leave the behavior undefined, lets cache the error and spit it out \n      // for every request.\n      abortErrorMessage = sw.toString();\n      //throw new ServletException( abortErrorMessage );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    boolean abortOnConfigurationError = true;\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = init.initialize();\n      abortOnConfigurationError = init.isAbortOnConfigurationError();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property\", t);\n      SolrConfig.severeErrors.add( t );\n      SolrCore.log( t );\n    }\n\n    // Optionally abort if we found a sever error\n    if( abortOnConfigurationError && SolrConfig.severeErrors.size() > 0 ) {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter( sw );\n      out.println( \"Severe errors in solr configuration.\\n\" );\n      out.println( \"Check your log files for more detailed information on what may be wrong.\\n\" );\n      for( Throwable t : SolrConfig.severeErrors ) {\n        out.println( \"-------------------------------------------------------------\" );\n        t.printStackTrace( out );\n      }\n      out.flush();\n\n      // Servlet containers behave slightly differently if you throw an exception during \n      // initialization.  Resin will display that error for every page, jetty prints it in\n      // the logs, but continues normally.  (We will see a 404 rather then the real error)\n      // rather then leave the behavior undefined, lets cache the error and spit it out \n      // for every request.\n      abortErrorMessage = sw.toString();\n      //throw new ServletException( abortErrorMessage );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["0aea57ab530d174e645bf6e14d04db1e243e13d7","4f4245d1ce3fc22feae2d4d0341e09c623d18b58"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["4f4245d1ce3fc22feae2d4d0341e09c623d18b58","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["0aea57ab530d174e645bf6e14d04db1e243e13d7","4f4245d1ce3fc22feae2d4d0341e09c623d18b58"],"0aea57ab530d174e645bf6e14d04db1e243e13d7":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["4f4245d1ce3fc22feae2d4d0341e09c623d18b58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4f4245d1ce3fc22feae2d4d0341e09c623d18b58":["0aea57ab530d174e645bf6e14d04db1e243e13d7"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["4f4245d1ce3fc22feae2d4d0341e09c623d18b58"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"1da8d55113b689b06716246649de6f62430f15c0":["0aea57ab530d174e645bf6e14d04db1e243e13d7"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":[],"0aea57ab530d174e645bf6e14d04db1e243e13d7":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","4f4245d1ce3fc22feae2d4d0341e09c623d18b58"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"4f4245d1ce3fc22feae2d4d0341e09c623d18b58":["70ad682703b8585f5d0a637efec044d57ec05efb","c26f00b574427b55127e869b935845554afde1fa","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}