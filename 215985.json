{"path":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","sourceNew":"  @Test\n  public void testOptions() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n       , TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\")\n       ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n    );\n    \n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        , TermVectorParams.ALL, \"true\")\n        ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n     );\n    \n    // test each combination at random\n    final List<String> list = new ArrayList<String>();\n    list.addAll(Arrays.asList(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"));\n    String[][] options = new String[][] { { TermVectorParams.TF, \"'tf':1\" },\n        { TermVectorParams.OFFSETS, \"'offsets':{'start':20, 'end':27}\" },\n        { TermVectorParams.POSITIONS, \"'positions':{'position':1}\" },\n        { TermVectorParams.DF, \"'df':2\" },\n        { TermVectorParams.TF_IDF, \"'tf-idf':0.5\" } };\n    StringBuilder expected = new StringBuilder(\"/termVectors/doc-0/test_posofftv/anoth=={\");\n    boolean first = true;\n    for (int i = 0; i < options.length; i++) {\n      final boolean use = random.nextBoolean();\n      if (use) {\n        if (!first) {\n          expected.append(\", \");\n        }\n        first = false;\n        expected.append(options[i][1]);\n        \n      }\n      list.add(options[i][0]);\n      list.add(use ? \"true\" : \"false\");\n    }\n    \n    expected.append(\"}\");\n    assertJQ(req(list.toArray(new String[0])), expected.toString());\n  }\n\n","sourceOld":"  @Test\n  public void testOptions() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n       , TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\")\n       ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n    );\n    \n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        , TermVectorParams.ALL, \"true\")\n        ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n     );\n    \n    // test each combination at random\n    final List<String> list = new ArrayList<String>();\n    list.addAll(Arrays.asList(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"));\n    String[][] options = new String[][] { { TermVectorParams.TF, \"'tf':1\" },\n        { TermVectorParams.OFFSETS, \"'offsets':{'start':20, 'end':27}\" },\n        { TermVectorParams.POSITIONS, \"'positions':{'position':1}\" },\n        { TermVectorParams.DF, \"'df':2\" },\n        { TermVectorParams.TF_IDF, \"'tf-idf':0.5\" } };\n    StringBuilder expected = new StringBuilder(\"/termVectors/doc-0/test_posofftv/anoth=={\");\n    boolean first = true;\n    for (int i = 0; i < options.length; i++) {\n      final boolean use = random.nextBoolean();\n      if (use) {\n        if (!first) {\n          expected.append(\", \");\n        }\n        first = false;\n        expected.append(options[i][1]);\n        \n      }\n      list.add(options[i][0]);\n      list.add(use ? \"true\" : \"false\");\n    }\n    \n    expected.append(\"}\");\n    assertJQ(req(list.toArray(new String[0])), expected.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","sourceNew":"  @Test\n  public void testOptions() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n       , TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\")\n       ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n    );\n    \n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        , TermVectorParams.ALL, \"true\")\n        ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n     );\n    \n    // test each combination at random\n    final List<String> list = new ArrayList<String>();\n    list.addAll(Arrays.asList(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"));\n    String[][] options = new String[][] { { TermVectorParams.TF, \"'tf':1\" },\n        { TermVectorParams.OFFSETS, \"'offsets':{'start':20, 'end':27}\" },\n        { TermVectorParams.POSITIONS, \"'positions':{'position':1}\" },\n        { TermVectorParams.DF, \"'df':2\" },\n        { TermVectorParams.TF_IDF, \"'tf-idf':0.5\" } };\n    StringBuilder expected = new StringBuilder(\"/termVectors/doc-0/test_posofftv/anoth=={\");\n    boolean first = true;\n    for (int i = 0; i < options.length; i++) {\n      final boolean use = random.nextBoolean();\n      if (use) {\n        if (!first) {\n          expected.append(\", \");\n        }\n        first = false;\n        expected.append(options[i][1]);\n        \n      }\n      list.add(options[i][0]);\n      list.add(use ? \"true\" : \"false\");\n    }\n    \n    expected.append(\"}\");\n    assertJQ(req(list.toArray(new String[0])), expected.toString());\n  }\n\n","sourceOld":"  @Test\n  public void testOptions() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n       , TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\")\n       ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n    );\n    \n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        , TermVectorParams.ALL, \"true\")\n        ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n     );\n    \n    // test each combination at random\n    final List<String> list = new ArrayList<String>();\n    list.addAll(Arrays.asList(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"));\n    String[][] options = new String[][] { { TermVectorParams.TF, \"'tf':1\" },\n        { TermVectorParams.OFFSETS, \"'offsets':{'start':20, 'end':27}\" },\n        { TermVectorParams.POSITIONS, \"'positions':{'position':1}\" },\n        { TermVectorParams.DF, \"'df':2\" },\n        { TermVectorParams.TF_IDF, \"'tf-idf':0.5\" } };\n    StringBuilder expected = new StringBuilder(\"/termVectors/doc-0/test_posofftv/anoth=={\");\n    boolean first = true;\n    for (int i = 0; i < options.length; i++) {\n      final boolean use = random.nextBoolean();\n      if (use) {\n        if (!first) {\n          expected.append(\", \");\n        }\n        first = false;\n        expected.append(options[i][1]);\n        \n      }\n      list.add(options[i][0]);\n      list.add(use ? \"true\" : \"false\");\n    }\n    \n    expected.append(\"}\");\n    assertJQ(req(list.toArray(new String[0])), expected.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","sourceNew":"  @Test\n  public void testOptions() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n       , TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\")\n       ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n    );\n    \n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        , TermVectorParams.ALL, \"true\")\n        ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n     );\n    \n    // test each combination at random\n    final List<String> list = new ArrayList<String>();\n    list.addAll(Arrays.asList(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"));\n    String[][] options = new String[][] { { TermVectorParams.TF, \"'tf':1\" },\n        { TermVectorParams.OFFSETS, \"'offsets':{'start':20, 'end':27}\" },\n        { TermVectorParams.POSITIONS, \"'positions':{'position':1}\" },\n        { TermVectorParams.DF, \"'df':2\" },\n        { TermVectorParams.TF_IDF, \"'tf-idf':0.5\" } };\n    StringBuilder expected = new StringBuilder(\"/termVectors/doc-0/test_posofftv/anoth=={\");\n    boolean first = true;\n    for (int i = 0; i < options.length; i++) {\n      final boolean use = random.nextBoolean();\n      if (use) {\n        if (!first) {\n          expected.append(\", \");\n        }\n        first = false;\n        expected.append(options[i][1]);\n        \n      }\n      list.add(options[i][0]);\n      list.add(use ? \"true\" : \"false\");\n    }\n    \n    expected.append(\"}\");\n    assertJQ(req(list.toArray(new String[0])), expected.toString());\n  }\n\n","sourceOld":"  @Test\n  public void testOptions() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n       , TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\")\n       ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n    );\n    \n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        , TermVectorParams.ALL, \"true\")\n        ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n     );\n    \n    // test each combination at random\n    final List<String> list = new ArrayList<String>();\n    list.addAll(Arrays.asList(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"));\n    String[][] options = new String[][] { { TermVectorParams.TF, \"'tf':1\" },\n        { TermVectorParams.OFFSETS, \"'offsets':{'start':20, 'end':27}\" },\n        { TermVectorParams.POSITIONS, \"'positions':{'position':1}\" },\n        { TermVectorParams.DF, \"'df':2\" },\n        { TermVectorParams.TF_IDF, \"'tf-idf':0.5\" } };\n    StringBuilder expected = new StringBuilder(\"/termVectors/doc-0/test_posofftv/anoth=={\");\n    boolean first = true;\n    for (int i = 0; i < options.length; i++) {\n      final boolean use = random.nextBoolean();\n      if (use) {\n        if (!first) {\n          expected.append(\", \");\n        }\n        first = false;\n        expected.append(options[i][1]);\n        \n      }\n      list.add(options[i][0]);\n      list.add(use ? \"true\" : \"false\");\n    }\n    \n    expected.append(\"}\");\n    assertJQ(req(list.toArray(new String[0])), expected.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","sourceNew":"  @Test\n  public void testOptions() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n       , TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\")\n       ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n    );\n    \n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        , TermVectorParams.ALL, \"true\")\n        ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n     );\n    \n    // test each combination at random\n    final List<String> list = new ArrayList<String>();\n    list.addAll(Arrays.asList(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"));\n    String[][] options = new String[][] { { TermVectorParams.TF, \"'tf':1\" },\n        { TermVectorParams.OFFSETS, \"'offsets':{'start':20, 'end':27}\" },\n        { TermVectorParams.POSITIONS, \"'positions':{'position':1}\" },\n        { TermVectorParams.DF, \"'df':2\" },\n        { TermVectorParams.TF_IDF, \"'tf-idf':0.5\" } };\n    StringBuilder expected = new StringBuilder(\"/termVectors/doc-0/test_posofftv/anoth=={\");\n    boolean first = true;\n    for (int i = 0; i < options.length; i++) {\n      final boolean use = random().nextBoolean();\n      if (use) {\n        if (!first) {\n          expected.append(\", \");\n        }\n        first = false;\n        expected.append(options[i][1]);\n        \n      }\n      list.add(options[i][0]);\n      list.add(use ? \"true\" : \"false\");\n    }\n    \n    expected.append(\"}\");\n    assertJQ(req(list.toArray(new String[0])), expected.toString());\n  }\n\n","sourceOld":"  @Test\n  public void testOptions() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n       , TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\")\n       ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n    );\n    \n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        , TermVectorParams.ALL, \"true\")\n        ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n     );\n    \n    // test each combination at random\n    final List<String> list = new ArrayList<String>();\n    list.addAll(Arrays.asList(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"));\n    String[][] options = new String[][] { { TermVectorParams.TF, \"'tf':1\" },\n        { TermVectorParams.OFFSETS, \"'offsets':{'start':20, 'end':27}\" },\n        { TermVectorParams.POSITIONS, \"'positions':{'position':1}\" },\n        { TermVectorParams.DF, \"'df':2\" },\n        { TermVectorParams.TF_IDF, \"'tf-idf':0.5\" } };\n    StringBuilder expected = new StringBuilder(\"/termVectors/doc-0/test_posofftv/anoth=={\");\n    boolean first = true;\n    for (int i = 0; i < options.length; i++) {\n      final boolean use = random.nextBoolean();\n      if (use) {\n        if (!first) {\n          expected.append(\", \");\n        }\n        first = false;\n        expected.append(options[i][1]);\n        \n      }\n      list.add(options[i][0]);\n      list.add(use ? \"true\" : \"false\");\n    }\n    \n    expected.append(\"}\");\n    assertJQ(req(list.toArray(new String[0])), expected.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba3a184cc785359756dd0a77bbdb0e4f06bf727b","date":1344450045,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","sourceNew":"  @Test\n  public void testOptions() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n       , TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\")\n       ,\"/termVectors/0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n    );\n    \n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        , TermVectorParams.ALL, \"true\")\n        ,\"/termVectors/0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n     );\n    \n    // test each combination at random\n    final List<String> list = new ArrayList<String>();\n    list.addAll(Arrays.asList(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"));\n    String[][] options = new String[][] { { TermVectorParams.TF, \"'tf':1\" },\n        { TermVectorParams.OFFSETS, \"'offsets':{'start':20, 'end':27}\" },\n        { TermVectorParams.POSITIONS, \"'positions':{'position':1}\" },\n        { TermVectorParams.DF, \"'df':2\" },\n        { TermVectorParams.TF_IDF, \"'tf-idf':0.5\" } };\n    StringBuilder expected = new StringBuilder(\"/termVectors/0/test_posofftv/anoth=={\");\n    boolean first = true;\n    for (int i = 0; i < options.length; i++) {\n      final boolean use = random().nextBoolean();\n      if (use) {\n        if (!first) {\n          expected.append(\", \");\n        }\n        first = false;\n        expected.append(options[i][1]);\n        \n      }\n      list.add(options[i][0]);\n      list.add(use ? \"true\" : \"false\");\n    }\n    \n    expected.append(\"}\");\n    assertJQ(req(list.toArray(new String[0])), expected.toString());\n  }\n\n","sourceOld":"  @Test\n  public void testOptions() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n       , TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\")\n       ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n    );\n    \n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        , TermVectorParams.ALL, \"true\")\n        ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n     );\n    \n    // test each combination at random\n    final List<String> list = new ArrayList<String>();\n    list.addAll(Arrays.asList(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"));\n    String[][] options = new String[][] { { TermVectorParams.TF, \"'tf':1\" },\n        { TermVectorParams.OFFSETS, \"'offsets':{'start':20, 'end':27}\" },\n        { TermVectorParams.POSITIONS, \"'positions':{'position':1}\" },\n        { TermVectorParams.DF, \"'df':2\" },\n        { TermVectorParams.TF_IDF, \"'tf-idf':0.5\" } };\n    StringBuilder expected = new StringBuilder(\"/termVectors/doc-0/test_posofftv/anoth=={\");\n    boolean first = true;\n    for (int i = 0; i < options.length; i++) {\n      final boolean use = random().nextBoolean();\n      if (use) {\n        if (!first) {\n          expected.append(\", \");\n        }\n        first = false;\n        expected.append(options[i][1]);\n        \n      }\n      list.add(options[i][0]);\n      list.add(use ? \"true\" : \"false\");\n    }\n    \n    expected.append(\"}\");\n    assertJQ(req(list.toArray(new String[0])), expected.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","sourceNew":"  @Test\n  public void testOptions() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n       , TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\")\n       ,\"/termVectors/0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n    );\n    \n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        , TermVectorParams.ALL, \"true\")\n        ,\"/termVectors/0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n     );\n    \n    // test each combination at random\n    final List<String> list = new ArrayList<String>();\n    list.addAll(Arrays.asList(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"));\n    String[][] options = new String[][] { { TermVectorParams.TF, \"'tf':1\" },\n        { TermVectorParams.OFFSETS, \"'offsets':{'start':20, 'end':27}\" },\n        { TermVectorParams.POSITIONS, \"'positions':{'position':1}\" },\n        { TermVectorParams.DF, \"'df':2\" },\n        { TermVectorParams.TF_IDF, \"'tf-idf':0.5\" } };\n    StringBuilder expected = new StringBuilder(\"/termVectors/0/test_posofftv/anoth=={\");\n    boolean first = true;\n    for (int i = 0; i < options.length; i++) {\n      final boolean use = random().nextBoolean();\n      if (use) {\n        if (!first) {\n          expected.append(\", \");\n        }\n        first = false;\n        expected.append(options[i][1]);\n        \n      }\n      list.add(options[i][0]);\n      list.add(use ? \"true\" : \"false\");\n    }\n    \n    expected.append(\"}\");\n    assertJQ(req(list.toArray(new String[0])), expected.toString());\n  }\n\n","sourceOld":"  @Test\n  public void testOptions() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n       , TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\")\n       ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n    );\n    \n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        , TermVectorParams.ALL, \"true\")\n        ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n     );\n    \n    // test each combination at random\n    final List<String> list = new ArrayList<String>();\n    list.addAll(Arrays.asList(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"));\n    String[][] options = new String[][] { { TermVectorParams.TF, \"'tf':1\" },\n        { TermVectorParams.OFFSETS, \"'offsets':{'start':20, 'end':27}\" },\n        { TermVectorParams.POSITIONS, \"'positions':{'position':1}\" },\n        { TermVectorParams.DF, \"'df':2\" },\n        { TermVectorParams.TF_IDF, \"'tf-idf':0.5\" } };\n    StringBuilder expected = new StringBuilder(\"/termVectors/doc-0/test_posofftv/anoth=={\");\n    boolean first = true;\n    for (int i = 0; i < options.length; i++) {\n      final boolean use = random().nextBoolean();\n      if (use) {\n        if (!first) {\n          expected.append(\", \");\n        }\n        first = false;\n        expected.append(options[i][1]);\n        \n      }\n      list.add(options[i][0]);\n      list.add(use ? \"true\" : \"false\");\n    }\n    \n    expected.append(\"}\");\n    assertJQ(req(list.toArray(new String[0])), expected.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","sourceNew":"  @Test\n  public void testOptions() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n       , TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\")\n       ,\"/termVectors/0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n    );\n    \n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        , TermVectorParams.ALL, \"true\")\n        ,\"/termVectors/0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n     );\n    \n    // test each combination at random\n    final List<String> list = new ArrayList<String>();\n    list.addAll(Arrays.asList(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"));\n    String[][] options = new String[][] { { TermVectorParams.TF, \"'tf':1\" },\n        { TermVectorParams.OFFSETS, \"'offsets':{'start':20, 'end':27}\" },\n        { TermVectorParams.POSITIONS, \"'positions':{'position':1}\" },\n        { TermVectorParams.DF, \"'df':2\" },\n        { TermVectorParams.TF_IDF, \"'tf-idf':0.5\" } };\n    StringBuilder expected = new StringBuilder(\"/termVectors/0/test_posofftv/anoth=={\");\n    boolean first = true;\n    for (int i = 0; i < options.length; i++) {\n      final boolean use = random().nextBoolean();\n      if (use) {\n        if (!first) {\n          expected.append(\", \");\n        }\n        first = false;\n        expected.append(options[i][1]);\n        \n      }\n      list.add(options[i][0]);\n      list.add(use ? \"true\" : \"false\");\n    }\n    \n    expected.append(\"}\");\n    assertJQ(req(list.toArray(new String[0])), expected.toString());\n  }\n\n","sourceOld":"  @Test\n  public void testOptions() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n       , TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\")\n       ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n    );\n    \n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        , TermVectorParams.ALL, \"true\")\n        ,\"/termVectors/doc-0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n     );\n    \n    // test each combination at random\n    final List<String> list = new ArrayList<String>();\n    list.addAll(Arrays.asList(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"));\n    String[][] options = new String[][] { { TermVectorParams.TF, \"'tf':1\" },\n        { TermVectorParams.OFFSETS, \"'offsets':{'start':20, 'end':27}\" },\n        { TermVectorParams.POSITIONS, \"'positions':{'position':1}\" },\n        { TermVectorParams.DF, \"'df':2\" },\n        { TermVectorParams.TF_IDF, \"'tf-idf':0.5\" } };\n    StringBuilder expected = new StringBuilder(\"/termVectors/doc-0/test_posofftv/anoth=={\");\n    boolean first = true;\n    for (int i = 0; i < options.length; i++) {\n      final boolean use = random().nextBoolean();\n      if (use) {\n        if (!first) {\n          expected.append(\", \");\n        }\n        first = false;\n        expected.append(options[i][1]);\n        \n      }\n      list.add(options[i][0]);\n      list.add(use ? \"true\" : \"false\");\n    }\n    \n    expected.append(\"}\");\n    assertJQ(req(list.toArray(new String[0])), expected.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eafa8c5eabc3dacd34680054e6a33bda024080ac","date":1367691488,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","sourceNew":"  @Test\n  public void testOptions() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n       , TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\")\n       ,\"/termVectors/0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':5}, 'df':2, 'tf-idf':0.5}\"\n    );\n    \n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        , TermVectorParams.ALL, \"true\")\n        ,\"/termVectors/0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':5}, 'df':2, 'tf-idf':0.5}\"\n     );\n    \n    // test each combination at random\n    final List<String> list = new ArrayList<String>();\n    list.addAll(Arrays.asList(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"));\n    String[][] options = new String[][] { { TermVectorParams.TF, \"'tf':1\" },\n        { TermVectorParams.OFFSETS, \"'offsets':{'start':20, 'end':27}\" },\n        { TermVectorParams.POSITIONS, \"'positions':{'position':5}\" },\n        { TermVectorParams.DF, \"'df':2\" },\n        { TermVectorParams.TF_IDF, \"'tf-idf':0.5\" } };\n    StringBuilder expected = new StringBuilder(\"/termVectors/0/test_posofftv/anoth=={\");\n    boolean first = true;\n    for (int i = 0; i < options.length; i++) {\n      final boolean use = random().nextBoolean();\n      if (use) {\n        if (!first) {\n          expected.append(\", \");\n        }\n        first = false;\n        expected.append(options[i][1]);\n        \n      }\n      list.add(options[i][0]);\n      list.add(use ? \"true\" : \"false\");\n    }\n    \n    expected.append(\"}\");\n    assertJQ(req(list.toArray(new String[0])), expected.toString());\n  }\n\n","sourceOld":"  @Test\n  public void testOptions() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n       , TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\")\n       ,\"/termVectors/0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n    );\n    \n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        , TermVectorParams.ALL, \"true\")\n        ,\"/termVectors/0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n     );\n    \n    // test each combination at random\n    final List<String> list = new ArrayList<String>();\n    list.addAll(Arrays.asList(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"));\n    String[][] options = new String[][] { { TermVectorParams.TF, \"'tf':1\" },\n        { TermVectorParams.OFFSETS, \"'offsets':{'start':20, 'end':27}\" },\n        { TermVectorParams.POSITIONS, \"'positions':{'position':1}\" },\n        { TermVectorParams.DF, \"'df':2\" },\n        { TermVectorParams.TF_IDF, \"'tf-idf':0.5\" } };\n    StringBuilder expected = new StringBuilder(\"/termVectors/0/test_posofftv/anoth=={\");\n    boolean first = true;\n    for (int i = 0; i < options.length; i++) {\n      final boolean use = random().nextBoolean();\n      if (use) {\n        if (!first) {\n          expected.append(\", \");\n        }\n        first = false;\n        expected.append(options[i][1]);\n        \n      }\n      list.add(options[i][0]);\n      list.add(use ? \"true\" : \"false\");\n    }\n    \n    expected.append(\"}\");\n    assertJQ(req(list.toArray(new String[0])), expected.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","sourceNew":"  @Test\n  public void testOptions() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n       , TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\")\n       ,\"/termVectors/0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':5}, 'df':2, 'tf-idf':0.5}\"\n    );\n    \n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        , TermVectorParams.ALL, \"true\")\n        ,\"/termVectors/0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':5}, 'df':2, 'tf-idf':0.5}\"\n     );\n    \n    // test each combination at random\n    final List<String> list = new ArrayList<>();\n    list.addAll(Arrays.asList(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"));\n    String[][] options = new String[][] { { TermVectorParams.TF, \"'tf':1\" },\n        { TermVectorParams.OFFSETS, \"'offsets':{'start':20, 'end':27}\" },\n        { TermVectorParams.POSITIONS, \"'positions':{'position':5}\" },\n        { TermVectorParams.DF, \"'df':2\" },\n        { TermVectorParams.TF_IDF, \"'tf-idf':0.5\" } };\n    StringBuilder expected = new StringBuilder(\"/termVectors/0/test_posofftv/anoth=={\");\n    boolean first = true;\n    for (int i = 0; i < options.length; i++) {\n      final boolean use = random().nextBoolean();\n      if (use) {\n        if (!first) {\n          expected.append(\", \");\n        }\n        first = false;\n        expected.append(options[i][1]);\n        \n      }\n      list.add(options[i][0]);\n      list.add(use ? \"true\" : \"false\");\n    }\n    \n    expected.append(\"}\");\n    assertJQ(req(list.toArray(new String[0])), expected.toString());\n  }\n\n","sourceOld":"  @Test\n  public void testOptions() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n       , TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\")\n       ,\"/termVectors/0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':5}, 'df':2, 'tf-idf':0.5}\"\n    );\n    \n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        , TermVectorParams.ALL, \"true\")\n        ,\"/termVectors/0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':5}, 'df':2, 'tf-idf':0.5}\"\n     );\n    \n    // test each combination at random\n    final List<String> list = new ArrayList<String>();\n    list.addAll(Arrays.asList(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"));\n    String[][] options = new String[][] { { TermVectorParams.TF, \"'tf':1\" },\n        { TermVectorParams.OFFSETS, \"'offsets':{'start':20, 'end':27}\" },\n        { TermVectorParams.POSITIONS, \"'positions':{'position':5}\" },\n        { TermVectorParams.DF, \"'df':2\" },\n        { TermVectorParams.TF_IDF, \"'tf-idf':0.5\" } };\n    StringBuilder expected = new StringBuilder(\"/termVectors/0/test_posofftv/anoth=={\");\n    boolean first = true;\n    for (int i = 0; i < options.length; i++) {\n      final boolean use = random().nextBoolean();\n      if (use) {\n        if (!first) {\n          expected.append(\", \");\n        }\n        first = false;\n        expected.append(options[i][1]);\n        \n      }\n      list.add(options[i][0]);\n      list.add(use ? \"true\" : \"false\");\n    }\n    \n    expected.append(\"}\");\n    assertJQ(req(list.toArray(new String[0])), expected.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa4d13fa31a8688899168167cbb4449e399b686f","date":1533611099,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#doOptions().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testOptions().mjava","sourceNew":"  private void doOptions() throws Exception {\n    assertJQ(req(\"json.nl\", \"map\", \"qt\", tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        , TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\")\n        , \"/termVectors/0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':5}, 'df':2, 'tf-idf':0.5}\"\n    );\n\n    assertJQ(req(\"json.nl\", \"map\", \"qt\", tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        , TermVectorParams.ALL, \"true\")\n        , \"/termVectors/0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':5}, 'df':2, 'tf-idf':0.5}\"\n    );\n\n    // test each combination at random\n    final List<String> list = new ArrayList<>();\n    list.addAll(Arrays.asList(\"json.nl\", \"map\", \"qt\", tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"));\n    String[][] options = new String[][]{{TermVectorParams.TF, \"'tf':1\"},\n        {TermVectorParams.OFFSETS, \"'offsets':{'start':20, 'end':27}\"},\n        {TermVectorParams.POSITIONS, \"'positions':{'position':5}\"},\n        {TermVectorParams.DF, \"'df':2\"},\n        {TermVectorParams.TF_IDF, \"'tf-idf':0.5\"}};\n    StringBuilder expected = new StringBuilder(\"/termVectors/0/test_posofftv/anoth=={\");\n    boolean first = true;\n    for (int i = 0; i < options.length; i++) {\n      final boolean use = random().nextBoolean();\n      if (use) {\n        if (!first) {\n          expected.append(\", \");\n        }\n        first = false;\n        expected.append(options[i][1]);\n\n      }\n      list.add(options[i][0]);\n      list.add(use ? \"true\" : \"false\");\n    }\n\n    expected.append(\"}\");\n    assertJQ(req(list.toArray(new String[0])), expected.toString());\n  }\n\n","sourceOld":"  @Test\n  public void testOptions() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n       , TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\")\n       ,\"/termVectors/0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':5}, 'df':2, 'tf-idf':0.5}\"\n    );\n    \n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        , TermVectorParams.ALL, \"true\")\n        ,\"/termVectors/0/test_posofftv/anoth=={'tf':1, 'offsets':{'start':20, 'end':27}, 'positions':{'position':5}, 'df':2, 'tf-idf':0.5}\"\n     );\n    \n    // test each combination at random\n    final List<String> list = new ArrayList<>();\n    list.addAll(Arrays.asList(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"));\n    String[][] options = new String[][] { { TermVectorParams.TF, \"'tf':1\" },\n        { TermVectorParams.OFFSETS, \"'offsets':{'start':20, 'end':27}\" },\n        { TermVectorParams.POSITIONS, \"'positions':{'position':5}\" },\n        { TermVectorParams.DF, \"'df':2\" },\n        { TermVectorParams.TF_IDF, \"'tf-idf':0.5\" } };\n    StringBuilder expected = new StringBuilder(\"/termVectors/0/test_posofftv/anoth=={\");\n    boolean first = true;\n    for (int i = 0; i < options.length; i++) {\n      final boolean use = random().nextBoolean();\n      if (use) {\n        if (!first) {\n          expected.append(\", \");\n        }\n        first = false;\n        expected.append(options[i][1]);\n        \n      }\n      list.add(options[i][0]);\n      list.add(use ? \"true\" : \"false\");\n    }\n    \n    expected.append(\"}\");\n    assertJQ(req(list.toArray(new String[0])), expected.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"ba3a184cc785359756dd0a77bbdb0e4f06bf727b":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","ba3a184cc785359756dd0a77bbdb0e4f06bf727b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fa4d13fa31a8688899168167cbb4449e399b686f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["ba3a184cc785359756dd0a77bbdb0e4f06bf727b"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","ba3a184cc785359756dd0a77bbdb0e4f06bf727b"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa4d13fa31a8688899168167cbb4449e399b686f"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["fa4d13fa31a8688899168167cbb4449e399b686f"],"ba3a184cc785359756dd0a77bbdb0e4f06bf727b":["c7869f64c874ebf7f317d22c00baf2b6857797a6","eafa8c5eabc3dacd34680054e6a33bda024080ac","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fa4d13fa31a8688899168167cbb4449e399b686f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c26f00b574427b55127e869b935845554afde1fa":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["ba3a184cc785359756dd0a77bbdb0e4f06bf727b","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}