{"path":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,int,Sort,boolean,boolean).mjava","commits":[{"id":"fb02351ae2b114dd41585916d1e35fb2cff98fb0","date":1337171337,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,int,Sort,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,int,Sort).mjava","sourceNew":"  /** Expert: Low-level search implementation with arbitrary\n   * sorting and control over whether hit scores and max\n   * score should be computed.  Finds\n   * the top <code>n</code> hits for <code>query</code> and sorting the hits\n   * by the criteria in <code>sort</code>.\n   *\n   * <p>Applications should usually call {@link\n   * IndexSearcher#search(Query,Filter,int,Sort)} instead.\n   * \n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected TopFieldDocs search(Weight weight,\n                                final int nDocs, Sort sort,\n                                boolean doDocScores, boolean doMaxScore) throws IOException {\n    return search(weight, null, nDocs, sort, true, doDocScores, doMaxScore);\n  }\n\n","sourceOld":"  /** Expert: Low-level search implementation with arbitrary sorting.  Finds\n   * the top <code>n</code> hits for <code>query</code> and sorting the hits\n   * by the criteria in <code>sort</code>.\n   *\n   * <p>Applications should usually call {@link\n   * IndexSearcher#search(Query,Filter,int,Sort)} instead.\n   * \n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected TopFieldDocs search(Weight weight,\n      final int nDocs, Sort sort) throws IOException {\n    return search(weight, nDocs, sort, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,int,Sort,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,int,Sort).mjava","sourceNew":"  /** Expert: Low-level search implementation with arbitrary\n   * sorting and control over whether hit scores and max\n   * score should be computed.  Finds\n   * the top <code>n</code> hits for <code>query</code> and sorting the hits\n   * by the criteria in <code>sort</code>.\n   *\n   * <p>Applications should usually call {@link\n   * IndexSearcher#search(Query,Filter,int,Sort)} instead.\n   * \n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected TopFieldDocs search(Weight weight,\n                                final int nDocs, Sort sort,\n                                boolean doDocScores, boolean doMaxScore) throws IOException {\n    return search(weight, null, nDocs, sort, true, doDocScores, doMaxScore);\n  }\n\n","sourceOld":"  /** Expert: Low-level search implementation with arbitrary sorting.  Finds\n   * the top <code>n</code> hits for <code>query</code> and sorting the hits\n   * by the criteria in <code>sort</code>.\n   *\n   * <p>Applications should usually call {@link\n   * IndexSearcher#search(Query,Filter,int,Sort)} instead.\n   * \n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected TopFieldDocs search(Weight weight,\n      final int nDocs, Sort sort) throws IOException {\n    return search(weight, nDocs, sort, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,int,Sort,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,int,Sort,boolean,boolean).mjava","sourceNew":"  /** Expert: Low-level search implementation with arbitrary\n   * sorting and control over whether hit scores and max\n   * score should be computed.  Finds\n   * the top <code>n</code> hits for <code>query</code> and sorting the hits\n   * by the criteria in <code>sort</code>.\n   *\n   * <p>Applications should usually call {@link\n   * IndexSearcher#search(Query,Filter,int,Sort)} instead.\n   * \n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected TopFieldDocs search(Weight weight,\n                                final int nDocs, Sort sort,\n                                boolean doDocScores, boolean doMaxScore) throws IOException {\n    return search(weight, null, nDocs, sort, true, doDocScores, doMaxScore);\n  }\n\n","sourceOld":"  /** Expert: Low-level search implementation with arbitrary\n   * sorting and control over whether hit scores and max\n   * score should be computed.  Finds\n   * the top <code>n</code> hits for <code>query</code> and sorting the hits\n   * by the criteria in <code>sort</code>.\n   *\n   * <p>Applications should usually call {@link\n   * IndexSearcher#search(Query,Filter,int,Sort)} instead.\n   * \n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected TopFieldDocs search(Weight weight,\n                                final int nDocs, Sort sort,\n                                boolean doDocScores, boolean doMaxScore) throws IOException {\n    return search(weight, null, nDocs, sort, true, doDocScores, doMaxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,int,Sort,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /** Expert: Low-level search implementation with arbitrary\n   * sorting and control over whether hit scores and max\n   * score should be computed.  Finds\n   * the top <code>n</code> hits for <code>query</code> and sorting the hits\n   * by the criteria in <code>sort</code>.\n   *\n   * <p>Applications should usually call {@link\n   * IndexSearcher#search(Query,Filter,int,Sort)} instead.\n   * \n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected TopFieldDocs search(Weight weight,\n                                final int nDocs, Sort sort,\n                                boolean doDocScores, boolean doMaxScore) throws IOException {\n    return search(weight, null, nDocs, sort, true, doDocScores, doMaxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["fb02351ae2b114dd41585916d1e35fb2cff98fb0"],"fb02351ae2b114dd41585916d1e35fb2cff98fb0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fb17639909a369c1e64866842e5c213440acc17e":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ef0d8a69209261514c5739c770bba706c2308450":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fb02351ae2b114dd41585916d1e35fb2cff98fb0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb17639909a369c1e64866842e5c213440acc17e"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["fb17639909a369c1e64866842e5c213440acc17e"],"fb02351ae2b114dd41585916d1e35fb2cff98fb0":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","ef0d8a69209261514c5739c770bba706c2308450"],"fb17639909a369c1e64866842e5c213440acc17e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb02351ae2b114dd41585916d1e35fb2cff98fb0","ef0d8a69209261514c5739c770bba706c2308450"],"ef0d8a69209261514c5739c770bba706c2308450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}