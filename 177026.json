{"path":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#removeTestCodecs(Codec).mjava","commits":[{"id":"43b04c27924fe393e38e9f0986e32c634f261859","date":1284399440,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#removeTestCodecs(Codec).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#removeTestCodecs(Codec).mjava","sourceNew":"  // returns current PreFlex codec\n  static void removeTestCodecs(Codec codec) {\n    final CodecProvider cp = CodecProvider.getDefault();\n    if (codec.name.equals(\"PreFlex\")) {\n      final Codec preFlex = cp.lookup(\"PreFlex\");\n      if (preFlex != null) {\n        cp.unregister(preFlex);\n      }\n      cp.register(new PreFlexCodec());\n    }\n    cp.unregister(cp.lookup(\"MockSep\"));\n    cp.unregister(cp.lookup(\"MockFixedIntBlock\"));\n    cp.unregister(cp.lookup(\"MockVariableIntBlock\"));\n    swapCodec(new PulsingCodec(1));\n    CodecProvider.setDefaultCodec(savedDefaultCodec);\n  }\n\n","sourceOld":"  // returns current PreFlex codec\n  static void removeTestCodecs(Codec codec) {\n    final CodecProvider cp = CodecProvider.getDefault();\n    if (codec.name.equals(\"PreFlex\")) {\n      final Codec preFlex = cp.lookup(\"PreFlex\");\n      if (preFlex != null) {\n        cp.unregister(preFlex);\n      }\n      cp.register(new PreFlexCodec());\n    }\n    cp.unregister(cp.lookup(\"MockSep\"));\n    cp.unregister(cp.lookup(\"MockFixedIntBlock\"));\n    cp.unregister(cp.lookup(\"MockVariableIntBlock\"));\n    swapCodec(new PulsingCodec(1));\n    CodecProvider.setDefaultCodec(savedDefaultCodec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a493e6d0c3ad86bd55c0a1360d110142e948f2bd","date":1289406991,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#removeTestCodecs(Codec).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#removeTestCodecs(Codec).mjava","sourceNew":"  // returns current PreFlex codec\n  static void removeTestCodecs(Codec codec) {\n    final CodecProvider cp = CodecProvider.getDefault();\n    if (codec.name.equals(\"PreFlex\")) {\n      final Codec preFlex = cp.lookup(\"PreFlex\");\n      if (preFlex != null) {\n        cp.unregister(preFlex);\n      }\n      cp.register(new PreFlexCodec());\n    }\n    cp.unregister(cp.lookup(\"MockSep\"));\n    cp.unregister(cp.lookup(\"MockFixedIntBlock\"));\n    cp.unregister(cp.lookup(\"MockVariableIntBlock\"));\n    swapCodec(new PulsingCodec(1));\n    CodecProvider.setDefaultCodec(savedDefaultCodec);\n    cp.setDefaultFieldCodec(savedDefaultCodec);\n\n  }\n\n","sourceOld":"  // returns current PreFlex codec\n  static void removeTestCodecs(Codec codec) {\n    final CodecProvider cp = CodecProvider.getDefault();\n    if (codec.name.equals(\"PreFlex\")) {\n      final Codec preFlex = cp.lookup(\"PreFlex\");\n      if (preFlex != null) {\n        cp.unregister(preFlex);\n      }\n      cp.register(new PreFlexCodec());\n    }\n    cp.unregister(cp.lookup(\"MockSep\"));\n    cp.unregister(cp.lookup(\"MockFixedIntBlock\"));\n    cp.unregister(cp.lookup(\"MockVariableIntBlock\"));\n    swapCodec(new PulsingCodec(1));\n    CodecProvider.setDefaultCodec(savedDefaultCodec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#removeTestCodecs(Codec).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#removeTestCodecs(Codec).mjava","sourceNew":"  // returns current PreFlex codec\n  static void removeTestCodecs(Codec codec) {\n    final CodecProvider cp = CodecProvider.getDefault();\n    if (codec.name.equals(\"PreFlex\")) {\n      final Codec preFlex = cp.lookup(\"PreFlex\");\n      if (preFlex != null) {\n        cp.unregister(preFlex);\n      }\n      cp.register(new PreFlexCodec());\n    }\n    cp.unregister(cp.lookup(\"MockSep\"));\n    cp.unregister(cp.lookup(\"MockFixedIntBlock\"));\n    cp.unregister(cp.lookup(\"MockVariableIntBlock\"));\n    swapCodec(new PulsingCodec(1));\n    CodecProvider.setDefaultCodec(savedDefaultCodec);\n    cp.setDefaultFieldCodec(savedDefaultCodec);\n\n  }\n\n","sourceOld":"  // returns current PreFlex codec\n  static void removeTestCodecs(Codec codec) {\n    final CodecProvider cp = CodecProvider.getDefault();\n    if (codec.name.equals(\"PreFlex\")) {\n      final Codec preFlex = cp.lookup(\"PreFlex\");\n      if (preFlex != null) {\n        cp.unregister(preFlex);\n      }\n      cp.register(new PreFlexCodec());\n    }\n    cp.unregister(cp.lookup(\"MockSep\"));\n    cp.unregister(cp.lookup(\"MockFixedIntBlock\"));\n    cp.unregister(cp.lookup(\"MockVariableIntBlock\"));\n    swapCodec(new PulsingCodec(1));\n    CodecProvider.setDefaultCodec(savedDefaultCodec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13452165d8bf3d45a72f572aaed3c679735d3af2","date":1290101307,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#removeTestCodecs(Codec).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#removeTestCodecs(Codec).mjava","sourceNew":"  // returns current PreFlex codec\n  static void removeTestCodecs(Codec codec) {\n    final CodecProvider cp = CodecProvider.getDefault();\n    if (codec.name.equals(\"PreFlex\")) {\n      final Codec preFlex = cp.lookup(\"PreFlex\");\n      if (preFlex != null) {\n        cp.unregister(preFlex);\n      }\n      cp.register(new PreFlexCodec());\n    }\n    cp.unregister(cp.lookup(\"MockSep\"));\n    cp.unregister(cp.lookup(\"MockFixedIntBlock\"));\n    cp.unregister(cp.lookup(\"MockVariableIntBlock\"));\n    swapCodec(new PulsingCodec(1));\n    cp.setDefaultFieldCodec(savedDefaultCodec);\n\n  }\n\n","sourceOld":"  // returns current PreFlex codec\n  static void removeTestCodecs(Codec codec) {\n    final CodecProvider cp = CodecProvider.getDefault();\n    if (codec.name.equals(\"PreFlex\")) {\n      final Codec preFlex = cp.lookup(\"PreFlex\");\n      if (preFlex != null) {\n        cp.unregister(preFlex);\n      }\n      cp.register(new PreFlexCodec());\n    }\n    cp.unregister(cp.lookup(\"MockSep\"));\n    cp.unregister(cp.lookup(\"MockFixedIntBlock\"));\n    cp.unregister(cp.lookup(\"MockVariableIntBlock\"));\n    swapCodec(new PulsingCodec(1));\n    CodecProvider.setDefaultCodec(savedDefaultCodec);\n    cp.setDefaultFieldCodec(savedDefaultCodec);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bce89597a7c3a4535b5b7f8100c2078e520f6e57","date":1290106041,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#removeTestCodecs(Codec).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#removeTestCodecs(Codec).mjava","sourceNew":"  // returns current PreFlex codec\n  static void removeTestCodecs(Codec codec) {\n    final CodecProvider cp = CodecProvider.getDefault();\n    if (codec.name.equals(\"PreFlex\")) {\n      final Codec preFlex = cp.lookup(\"PreFlex\");\n      if (preFlex != null) {\n        cp.unregister(preFlex);\n      }\n      cp.register(new PreFlexCodec());\n    }\n    cp.unregister(cp.lookup(\"MockSep\"));\n    cp.unregister(cp.lookup(\"MockFixedIntBlock\"));\n    cp.unregister(cp.lookup(\"MockVariableIntBlock\"));\n    swapCodec(new PulsingCodec(1));\n    CodecProvider.setDefaultCodec(savedDefaultCodec);\n    cp.setDefaultFieldCodec(savedDefaultCodec);\n\n  }\n\n","sourceOld":"  // returns current PreFlex codec\n  static void removeTestCodecs(Codec codec) {\n    final CodecProvider cp = CodecProvider.getDefault();\n    if (codec.name.equals(\"PreFlex\")) {\n      final Codec preFlex = cp.lookup(\"PreFlex\");\n      if (preFlex != null) {\n        cp.unregister(preFlex);\n      }\n      cp.register(new PreFlexCodec());\n    }\n    cp.unregister(cp.lookup(\"MockSep\"));\n    cp.unregister(cp.lookup(\"MockFixedIntBlock\"));\n    cp.unregister(cp.lookup(\"MockVariableIntBlock\"));\n    swapCodec(new PulsingCodec(1));\n    cp.setDefaultFieldCodec(savedDefaultCodec);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeebcf026b55d8ce3ac8165210782b26cc4efe30","date":1290108396,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#removeTestCodecs(Codec).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#removeTestCodecs(Codec).mjava","sourceNew":"  // returns current PreFlex codec\n  static void removeTestCodecs(Codec codec) {\n    final CodecProvider cp = CodecProvider.getDefault();\n    if (codec.name.equals(\"PreFlex\")) {\n      final Codec preFlex = cp.lookup(\"PreFlex\");\n      if (preFlex != null) {\n        cp.unregister(preFlex);\n      }\n      cp.register(new PreFlexCodec());\n    }\n    cp.unregister(cp.lookup(\"MockSep\"));\n    cp.unregister(cp.lookup(\"MockFixedIntBlock\"));\n    cp.unregister(cp.lookup(\"MockVariableIntBlock\"));\n    swapCodec(new PulsingCodec(1));\n    cp.setDefaultFieldCodec(savedDefaultCodec);\n\n  }\n\n","sourceOld":"  // returns current PreFlex codec\n  static void removeTestCodecs(Codec codec) {\n    final CodecProvider cp = CodecProvider.getDefault();\n    if (codec.name.equals(\"PreFlex\")) {\n      final Codec preFlex = cp.lookup(\"PreFlex\");\n      if (preFlex != null) {\n        cp.unregister(preFlex);\n      }\n      cp.register(new PreFlexCodec());\n    }\n    cp.unregister(cp.lookup(\"MockSep\"));\n    cp.unregister(cp.lookup(\"MockFixedIntBlock\"));\n    cp.unregister(cp.lookup(\"MockVariableIntBlock\"));\n    swapCodec(new PulsingCodec(1));\n    CodecProvider.setDefaultCodec(savedDefaultCodec);\n    cp.setDefaultFieldCodec(savedDefaultCodec);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"182cfc5b92d5da17fd74fc41c8091ed157d80ff4","date":1290263949,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#removeTestCodecs(Codec,CodecProvider).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#removeTestCodecs(Codec).mjava","sourceNew":"  // returns current PreFlex codec\n  static void removeTestCodecs(Codec codec, CodecProvider cp) {\n    if (codec.name.equals(\"PreFlex\")) {\n      final Codec preFlex = cp.lookup(\"PreFlex\");\n      if (preFlex != null) {\n        cp.unregister(preFlex);\n      }\n      cp.register(new PreFlexCodec());\n    }\n    cp.unregister(cp.lookup(\"MockSep\"));\n    cp.unregister(cp.lookup(\"MockFixedIntBlock\"));\n    cp.unregister(cp.lookup(\"MockVariableIntBlock\"));\n    swapCodec(new PulsingCodec(1), cp);\n    cp.setDefaultFieldCodec(savedDefaultCodec);\n\n  }\n\n","sourceOld":"  // returns current PreFlex codec\n  static void removeTestCodecs(Codec codec) {\n    final CodecProvider cp = CodecProvider.getDefault();\n    if (codec.name.equals(\"PreFlex\")) {\n      final Codec preFlex = cp.lookup(\"PreFlex\");\n      if (preFlex != null) {\n        cp.unregister(preFlex);\n      }\n      cp.register(new PreFlexCodec());\n    }\n    cp.unregister(cp.lookup(\"MockSep\"));\n    cp.unregister(cp.lookup(\"MockFixedIntBlock\"));\n    cp.unregister(cp.lookup(\"MockVariableIntBlock\"));\n    swapCodec(new PulsingCodec(1));\n    cp.setDefaultFieldCodec(savedDefaultCodec);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#removeTestCodecs(Codec).mjava","sourceNew":null,"sourceOld":"  // returns current PreFlex codec\n  static void removeTestCodecs(Codec codec) {\n    final CodecProvider cp = CodecProvider.getDefault();\n    if (codec.name.equals(\"PreFlex\")) {\n      final Codec preFlex = cp.lookup(\"PreFlex\");\n      if (preFlex != null) {\n        cp.unregister(preFlex);\n      }\n      cp.register(new PreFlexCodec());\n    }\n    cp.unregister(cp.lookup(\"MockSep\"));\n    cp.unregister(cp.lookup(\"MockFixedIntBlock\"));\n    cp.unregister(cp.lookup(\"MockVariableIntBlock\"));\n    swapCodec(new PulsingCodec(1));\n    CodecProvider.setDefaultCodec(savedDefaultCodec);\n    cp.setDefaultFieldCodec(savedDefaultCodec);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bce89597a7c3a4535b5b7f8100c2078e520f6e57":["13452165d8bf3d45a72f572aaed3c679735d3af2"],"13452165d8bf3d45a72f572aaed3c679735d3af2":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["43b04c27924fe393e38e9f0986e32c634f261859"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["43b04c27924fe393e38e9f0986e32c634f261859","a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"eeebcf026b55d8ce3ac8165210782b26cc4efe30":["bce89597a7c3a4535b5b7f8100c2078e520f6e57"],"182cfc5b92d5da17fd74fc41c8091ed157d80ff4":["eeebcf026b55d8ce3ac8165210782b26cc4efe30"],"43b04c27924fe393e38e9f0986e32c634f261859":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3bb13258feba31ab676502787ab2e1779f129b7a":["85a883878c0af761245ab048babc63d099f835f3","182cfc5b92d5da17fd74fc41c8091ed157d80ff4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["182cfc5b92d5da17fd74fc41c8091ed157d80ff4"]},"commit2Childs":{"bce89597a7c3a4535b5b7f8100c2078e520f6e57":["eeebcf026b55d8ce3ac8165210782b26cc4efe30"],"13452165d8bf3d45a72f572aaed3c679735d3af2":["bce89597a7c3a4535b5b7f8100c2078e520f6e57"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["13452165d8bf3d45a72f572aaed3c679735d3af2","85a883878c0af761245ab048babc63d099f835f3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43b04c27924fe393e38e9f0986e32c634f261859"],"85a883878c0af761245ab048babc63d099f835f3":["3bb13258feba31ab676502787ab2e1779f129b7a"],"eeebcf026b55d8ce3ac8165210782b26cc4efe30":["182cfc5b92d5da17fd74fc41c8091ed157d80ff4"],"182cfc5b92d5da17fd74fc41c8091ed157d80ff4":["3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"43b04c27924fe393e38e9f0986e32c634f261859":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd","85a883878c0af761245ab048babc63d099f835f3"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}