{"path":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#optimize().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#optimize().mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexWriter#optimize().mjava","sourceNew":"  /**\n   * Requests an \"optimize\" operation on an index, priming the index\n   * for the fastest available search. Traditionally this has meant\n   * merging all segments into a single segment as is done in the\n   * default merge policy, but individual merge policies may implement\n   * optimize in different ways.\n   *\n   * <p>It is recommended that this method be called upon completion of indexing.  In\n   * environments with frequent updates, optimize is best done during low volume times, if at all. \n   * \n   * </p>\n   * <p>See http://www.gossamer-threads.com/lists/lucene/java-dev/47895 for more discussion. </p>\n   *\n   * <p>Note that optimize requires 2X the index size free\n   * space in your Directory.  For example, if your index\n   * size is 10 MB then you need 20 MB free for optimize to\n   * complete.</p>\n   *\n   * <p>If some but not all readers re-open while an\n   * optimize is underway, this will cause > 2X temporary\n   * space to be consumed as those new readers will then\n   * hold open the partially optimized segments at that\n   * time.  It is best not to re-open readers while optimize\n   * is running.</p>\n   *\n   * <p>The actual temporary usage could be much less than\n   * these figures (it depends on many factors).</p>\n   *\n   * <p>In general, once the optimize completes, the total size of the\n   * index will be less than the size of the starting index.\n   * It could be quite a bit smaller (if there were many\n   * pending deletes) or just slightly smaller.</p>\n   *\n   * <p>If an Exception is hit during optimize(), for example\n   * due to disk full, the index will not be corrupt and no\n   * documents will have been lost.  However, it may have\n   * been partially optimized (some segments were merged but\n   * not all), and it's possible that one of the segments in\n   * the index will be in non-compound format even when\n   * using compound file format.  This will occur when the\n   * Exception is hit during conversion of the segment into\n   * compound format.</p>\n   *\n   * <p>This call will optimize those segments present in\n   * the index when the call started.  If other threads are\n   * still adding documents and flushing segments, those\n   * newly created segments will not be optimized unless you\n   * call optimize again.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @see LogMergePolicy#findMergesForOptimize\n  */\n  public void optimize() throws CorruptIndexException, IOException {\n    optimize(true);\n  }\n\n","sourceOld":"  /**\n   * Requests an \"optimize\" operation on an index, priming the index\n   * for the fastest available search. Traditionally this has meant\n   * merging all segments into a single segment as is done in the\n   * default merge policy, but individual merge policies may implement\n   * optimize in different ways.\n   *\n   * <p>It is recommended that this method be called upon completion of indexing.  In\n   * environments with frequent updates, optimize is best done during low volume times, if at all. \n   * \n   * </p>\n   * <p>See http://www.gossamer-threads.com/lists/lucene/java-dev/47895 for more discussion. </p>\n   *\n   * <p>Note that optimize requires 2X the index size free\n   * space in your Directory.  For example, if your index\n   * size is 10 MB then you need 20 MB free for optimize to\n   * complete.</p>\n   *\n   * <p>If some but not all readers re-open while an\n   * optimize is underway, this will cause > 2X temporary\n   * space to be consumed as those new readers will then\n   * hold open the partially optimized segments at that\n   * time.  It is best not to re-open readers while optimize\n   * is running.</p>\n   *\n   * <p>The actual temporary usage could be much less than\n   * these figures (it depends on many factors).</p>\n   *\n   * <p>In general, once the optimize completes, the total size of the\n   * index will be less than the size of the starting index.\n   * It could be quite a bit smaller (if there were many\n   * pending deletes) or just slightly smaller.</p>\n   *\n   * <p>If an Exception is hit during optimize(), for example\n   * due to disk full, the index will not be corrupt and no\n   * documents will have been lost.  However, it may have\n   * been partially optimized (some segments were merged but\n   * not all), and it's possible that one of the segments in\n   * the index will be in non-compound format even when\n   * using compound file format.  This will occur when the\n   * Exception is hit during conversion of the segment into\n   * compound format.</p>\n   *\n   * <p>This call will optimize those segments present in\n   * the index when the call started.  If other threads are\n   * still adding documents and flushing segments, those\n   * newly created segments will not be optimized unless you\n   * call optimize again.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @see LogMergePolicy#findMergesForOptimize\n  */\n  public void optimize() throws CorruptIndexException, IOException {\n    optimize(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#optimize().mjava","sourceNew":null,"sourceOld":"  /**\n   * Requests an \"optimize\" operation on an index, priming the index\n   * for the fastest available search. Traditionally this has meant\n   * merging all segments into a single segment as is done in the\n   * default merge policy, but individual merge policies may implement\n   * optimize in different ways.\n   *\n   * <p>It is recommended that this method be called upon completion of indexing.  In\n   * environments with frequent updates, optimize is best done during low volume times, if at all. \n   * \n   * </p>\n   * <p>See http://www.gossamer-threads.com/lists/lucene/java-dev/47895 for more discussion. </p>\n   *\n   * <p>Note that optimize requires 2X the index size free\n   * space in your Directory.  For example, if your index\n   * size is 10 MB then you need 20 MB free for optimize to\n   * complete.</p>\n   *\n   * <p>If some but not all readers re-open while an\n   * optimize is underway, this will cause > 2X temporary\n   * space to be consumed as those new readers will then\n   * hold open the partially optimized segments at that\n   * time.  It is best not to re-open readers while optimize\n   * is running.</p>\n   *\n   * <p>The actual temporary usage could be much less than\n   * these figures (it depends on many factors).</p>\n   *\n   * <p>In general, once the optimize completes, the total size of the\n   * index will be less than the size of the starting index.\n   * It could be quite a bit smaller (if there were many\n   * pending deletes) or just slightly smaller.</p>\n   *\n   * <p>If an Exception is hit during optimize(), for example\n   * due to disk full, the index will not be corrupt and no\n   * documents will have been lost.  However, it may have\n   * been partially optimized (some segments were merged but\n   * not all), and it's possible that one of the segments in\n   * the index will be in non-compound format even when\n   * using compound file format.  This will occur when the\n   * Exception is hit during conversion of the segment into\n   * compound format.</p>\n   *\n   * <p>This call will optimize those segments present in\n   * the index when the call started.  If other threads are\n   * still adding documents and flushing segments, those\n   * newly created segments will not be optimized unless you\n   * call optimize again.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @see LogMergePolicy#findMergesForOptimize\n  */\n  public void optimize() throws CorruptIndexException, IOException {\n    optimize(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}