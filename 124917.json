{"path":"solr/core/src/test/org/apache/solr/core/DirectoryFactoryTest#assertDataHome(String,String,RAMDirectoryFactory,CoreContainer,String...).mjava","commits":[{"id":"d6603c6e525c9b2e1c32eb74e553f9b1c7102bed","date":1500471853,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/DirectoryFactoryTest#assertDataHome(String,String,RAMDirectoryFactory,CoreContainer,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/DirectoryFactoryTest#assertDataHome(String,String,RAMDirectoryFactory,MockCoreContainer,String...).mjava","sourceNew":"  private void assertDataHome(String expected, String instanceDir, RAMDirectoryFactory rdf, CoreContainer cc, String... properties) throws IOException {\n    String dataHome = rdf.getDataHome(new CoreDescriptor(\"core_name\", Paths.get(instanceDir), cc.containerProperties, cc.isZooKeeperAware(), properties));\n    assertEquals(Paths.get(expected).toAbsolutePath(), Paths.get(dataHome).toAbsolutePath());\n  }\n\n","sourceOld":"  private void assertDataHome(String expected, String instanceDir, RAMDirectoryFactory rdf, MockCoreContainer cc, String... properties) throws IOException {\n    String dataHome = rdf.getDataHome(new CoreDescriptor(\"core_name\", Paths.get(instanceDir), cc.containerProperties, cc.isZooKeeperAware(), properties));\n    assertEquals(Paths.get(expected).toAbsolutePath(), Paths.get(dataHome).toAbsolutePath());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":1,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/DirectoryFactoryTest#assertDataHome(String,String,RAMDirectoryFactory,CoreContainer,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/DirectoryFactoryTest#assertDataHome(String,String,RAMDirectoryFactory,MockCoreContainer,String...).mjava","sourceNew":"  private void assertDataHome(String expected, String instanceDir, RAMDirectoryFactory rdf, CoreContainer cc, String... properties) throws IOException {\n    String dataHome = rdf.getDataHome(new CoreDescriptor(\"core_name\", Paths.get(instanceDir), cc.containerProperties, cc.isZooKeeperAware(), properties));\n    assertEquals(Paths.get(expected).toAbsolutePath(), Paths.get(dataHome).toAbsolutePath());\n  }\n\n","sourceOld":"  private void assertDataHome(String expected, String instanceDir, RAMDirectoryFactory rdf, MockCoreContainer cc, String... properties) throws IOException {\n    String dataHome = rdf.getDataHome(new CoreDescriptor(\"core_name\", Paths.get(instanceDir), cc.containerProperties, cc.isZooKeeperAware(), properties));\n    assertEquals(Paths.get(expected).toAbsolutePath(), Paths.get(dataHome).toAbsolutePath());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e43d618262c616423ed79f226c5c49f708999b06","date":1540815794,"type":5,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/DirectoryFactoryTest#assertDataHome(String,String,DirectoryFactory,CoreContainer,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/DirectoryFactoryTest#assertDataHome(String,String,RAMDirectoryFactory,CoreContainer,String...).mjava","sourceNew":"  private void assertDataHome(String expected, String instanceDir, DirectoryFactory df, CoreContainer cc, String... properties) throws IOException {\n    String dataHome = df.getDataHome(new CoreDescriptor(\"core_name\", Paths.get(instanceDir), cc.containerProperties, cc.isZooKeeperAware(), properties));\n    assertEquals(Paths.get(expected).toAbsolutePath(), Paths.get(dataHome).toAbsolutePath());\n  }\n\n","sourceOld":"  private void assertDataHome(String expected, String instanceDir, RAMDirectoryFactory rdf, CoreContainer cc, String... properties) throws IOException {\n    String dataHome = rdf.getDataHome(new CoreDescriptor(\"core_name\", Paths.get(instanceDir), cc.containerProperties, cc.isZooKeeperAware(), properties));\n    assertEquals(Paths.get(expected).toAbsolutePath(), Paths.get(dataHome).toAbsolutePath());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d6603c6e525c9b2e1c32eb74e553f9b1c7102bed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"936cdd5882761db3b844afd6f84ab81cbb011a75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d6603c6e525c9b2e1c32eb74e553f9b1c7102bed"],"e43d618262c616423ed79f226c5c49f708999b06":["d6603c6e525c9b2e1c32eb74e553f9b1c7102bed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e43d618262c616423ed79f226c5c49f708999b06"]},"commit2Childs":{"d6603c6e525c9b2e1c32eb74e553f9b1c7102bed":["936cdd5882761db3b844afd6f84ab81cbb011a75","e43d618262c616423ed79f226c5c49f708999b06"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6603c6e525c9b2e1c32eb74e553f9b1c7102bed","936cdd5882761db3b844afd6f84ab81cbb011a75"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"e43d618262c616423ed79f226c5c49f708999b06":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}