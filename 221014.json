{"path":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SecondPassGroupingCollector#SecondPassGroupingCollector(Collection[SearchGroup[T]],Sort,Sort,int,boolean,boolean,boolean).mjava","commits":[{"id":"20e94e61fe5291647346b70437617e6b6c370408","date":1483783127,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SecondPassGroupingCollector#SecondPassGroupingCollector(Collection[SearchGroup[T]],Sort,Sort,int,boolean,boolean,boolean).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector#AbstractSecondPassGroupingCollector(Collection[SearchGroup[GROUP_VALUE_TYPE]],Sort,Sort,int,boolean,boolean,boolean).mjava","sourceNew":"  public SecondPassGroupingCollector(Collection<SearchGroup<T>> groups, Sort groupSort, Sort withinGroupSort,\n                                     int maxDocsPerGroup, boolean getScores, boolean getMaxScores, boolean fillSortFields)\n    throws IOException {\n\n    //System.out.println(\"SP init\");\n    if (groups.isEmpty()) {\n      throw new IllegalArgumentException(\"no groups to collect (groups is empty)\");\n    }\n\n    this.groups = Objects.requireNonNull(groups);\n    this.groupSort = Objects.requireNonNull(groupSort);\n    this.withinGroupSort = Objects.requireNonNull(withinGroupSort);\n    this.maxDocsPerGroup = maxDocsPerGroup;\n    this.needsScores = getScores || getMaxScores || withinGroupSort.needsScores();\n\n    this.groupMap = new HashMap<>(groups.size());\n    for (SearchGroup<T> group : groups) {\n      //System.out.println(\"  prep group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort.equals(Sort.RELEVANCE)) { // optimize to use TopScoreDocCollector\n        // Sort by score\n        collector = TopScoreDocCollector.create(maxDocsPerGroup);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, getScores, getMaxScores);\n      }\n      groupMap.put(group.groupValue, new SearchGroupDocs<>(group.groupValue, collector));\n    }\n  }\n\n","sourceOld":"  public AbstractSecondPassGroupingCollector(Collection<SearchGroup<GROUP_VALUE_TYPE>> groups, Sort groupSort, Sort withinGroupSort,\n                                             int maxDocsPerGroup, boolean getScores, boolean getMaxScores, boolean fillSortFields)\n    throws IOException {\n\n    //System.out.println(\"SP init\");\n    if (groups.isEmpty()) {\n      throw new IllegalArgumentException(\"no groups to collect (groups is empty)\");\n    }\n\n    this.groups = Objects.requireNonNull(groups);\n    this.groupSort = Objects.requireNonNull(groupSort);\n    this.withinGroupSort = Objects.requireNonNull(withinGroupSort);\n    this.maxDocsPerGroup = maxDocsPerGroup;\n    this.needsScores = getScores || getMaxScores || withinGroupSort.needsScores();\n\n    this.groupMap = new HashMap<>(groups.size());\n    for (SearchGroup<GROUP_VALUE_TYPE> group : groups) {\n      //System.out.println(\"  prep group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort.equals(Sort.RELEVANCE)) { // optimize to use TopScoreDocCollector\n        // Sort by score\n        collector = TopScoreDocCollector.create(maxDocsPerGroup);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, getScores, getMaxScores);\n      }\n      groupMap.put(group.groupValue, new SearchGroupDocs<>(group.groupValue, collector));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SecondPassGroupingCollector#SecondPassGroupingCollector(Collection[SearchGroup[T]],Sort,Sort,int,boolean,boolean,boolean).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector#AbstractSecondPassGroupingCollector(Collection[SearchGroup[GROUP_VALUE_TYPE]],Sort,Sort,int,boolean,boolean,boolean).mjava","sourceNew":"  public SecondPassGroupingCollector(Collection<SearchGroup<T>> groups, Sort groupSort, Sort withinGroupSort,\n                                     int maxDocsPerGroup, boolean getScores, boolean getMaxScores, boolean fillSortFields)\n    throws IOException {\n\n    //System.out.println(\"SP init\");\n    if (groups.isEmpty()) {\n      throw new IllegalArgumentException(\"no groups to collect (groups is empty)\");\n    }\n\n    this.groups = Objects.requireNonNull(groups);\n    this.groupSort = Objects.requireNonNull(groupSort);\n    this.withinGroupSort = Objects.requireNonNull(withinGroupSort);\n    this.maxDocsPerGroup = maxDocsPerGroup;\n    this.needsScores = getScores || getMaxScores || withinGroupSort.needsScores();\n\n    this.groupMap = new HashMap<>(groups.size());\n    for (SearchGroup<T> group : groups) {\n      //System.out.println(\"  prep group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort.equals(Sort.RELEVANCE)) { // optimize to use TopScoreDocCollector\n        // Sort by score\n        collector = TopScoreDocCollector.create(maxDocsPerGroup);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, getScores, getMaxScores);\n      }\n      groupMap.put(group.groupValue, new SearchGroupDocs<>(group.groupValue, collector));\n    }\n  }\n\n","sourceOld":"  public AbstractSecondPassGroupingCollector(Collection<SearchGroup<GROUP_VALUE_TYPE>> groups, Sort groupSort, Sort withinGroupSort,\n                                             int maxDocsPerGroup, boolean getScores, boolean getMaxScores, boolean fillSortFields)\n    throws IOException {\n\n    //System.out.println(\"SP init\");\n    if (groups.isEmpty()) {\n      throw new IllegalArgumentException(\"no groups to collect (groups is empty)\");\n    }\n\n    this.groups = Objects.requireNonNull(groups);\n    this.groupSort = Objects.requireNonNull(groupSort);\n    this.withinGroupSort = Objects.requireNonNull(withinGroupSort);\n    this.maxDocsPerGroup = maxDocsPerGroup;\n    this.needsScores = getScores || getMaxScores || withinGroupSort.needsScores();\n\n    this.groupMap = new HashMap<>(groups.size());\n    for (SearchGroup<GROUP_VALUE_TYPE> group : groups) {\n      //System.out.println(\"  prep group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort.equals(Sort.RELEVANCE)) { // optimize to use TopScoreDocCollector\n        // Sort by score\n        collector = TopScoreDocCollector.create(maxDocsPerGroup);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, getScores, getMaxScores);\n      }\n      groupMap.put(group.groupValue, new SearchGroupDocs<>(group.groupValue, collector));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ae958a739da1866696f442384393ba2f13e33e5","date":1491819018,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SecondPassGroupingCollector#SecondPassGroupingCollector(Collection[SearchGroup[T]],Sort,Sort,int,boolean,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  public SecondPassGroupingCollector(Collection<SearchGroup<T>> groups, Sort groupSort, Sort withinGroupSort,\n                                     int maxDocsPerGroup, boolean getScores, boolean getMaxScores, boolean fillSortFields)\n    throws IOException {\n\n    //System.out.println(\"SP init\");\n    if (groups.isEmpty()) {\n      throw new IllegalArgumentException(\"no groups to collect (groups is empty)\");\n    }\n\n    this.groups = Objects.requireNonNull(groups);\n    this.groupSort = Objects.requireNonNull(groupSort);\n    this.withinGroupSort = Objects.requireNonNull(withinGroupSort);\n    this.maxDocsPerGroup = maxDocsPerGroup;\n    this.needsScores = getScores || getMaxScores || withinGroupSort.needsScores();\n\n    this.groupMap = new HashMap<>(groups.size());\n    for (SearchGroup<T> group : groups) {\n      //System.out.println(\"  prep group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort.equals(Sort.RELEVANCE)) { // optimize to use TopScoreDocCollector\n        // Sort by score\n        collector = TopScoreDocCollector.create(maxDocsPerGroup);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, getScores, getMaxScores);\n      }\n      groupMap.put(group.groupValue, new SearchGroupDocs<>(group.groupValue, collector));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SecondPassGroupingCollector#SecondPassGroupingCollector(Collection[SearchGroup[T]],Sort,Sort,int,boolean,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  public SecondPassGroupingCollector(Collection<SearchGroup<T>> groups, Sort groupSort, Sort withinGroupSort,\n                                     int maxDocsPerGroup, boolean getScores, boolean getMaxScores, boolean fillSortFields)\n    throws IOException {\n\n    //System.out.println(\"SP init\");\n    if (groups.isEmpty()) {\n      throw new IllegalArgumentException(\"no groups to collect (groups is empty)\");\n    }\n\n    this.groups = Objects.requireNonNull(groups);\n    this.groupSort = Objects.requireNonNull(groupSort);\n    this.withinGroupSort = Objects.requireNonNull(withinGroupSort);\n    this.maxDocsPerGroup = maxDocsPerGroup;\n    this.needsScores = getScores || getMaxScores || withinGroupSort.needsScores();\n\n    this.groupMap = new HashMap<>(groups.size());\n    for (SearchGroup<T> group : groups) {\n      //System.out.println(\"  prep group=\" + (group.groupValue == null ? \"null\" : group.groupValue.utf8ToString()));\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort.equals(Sort.RELEVANCE)) { // optimize to use TopScoreDocCollector\n        // Sort by score\n        collector = TopScoreDocCollector.create(maxDocsPerGroup);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, getScores, getMaxScores);\n      }\n      groupMap.put(group.groupValue, new SearchGroupDocs<>(group.groupValue, collector));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["20e94e61fe5291647346b70437617e6b6c370408"],"20e94e61fe5291647346b70437617e6b6c370408":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20e94e61fe5291647346b70437617e6b6c370408"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7ae958a739da1866696f442384393ba2f13e33e5"],"7ae958a739da1866696f442384393ba2f13e33e5":["20e94e61fe5291647346b70437617e6b6c370408"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"20e94e61fe5291647346b70437617e6b6c370408":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","7ae958a739da1866696f442384393ba2f13e33e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["20e94e61fe5291647346b70437617e6b6c370408","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7ae958a739da1866696f442384393ba2f13e33e5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}