{"path":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","sourceNew":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties...\");\n    File idxprops = new File(solrCore.getDataDir() + \"index.properties\");\n    Properties p = new Properties();\n    if (idxprops.exists()) {\n      InputStream is = null;\n      try {\n        is = new FileInputStream(idxprops);\n        p.load(is);\n      } catch (Exception e) {\n        LOG.error(\"Unable to load index.properties\");\n      } finally {\n        IOUtils.closeQuietly(is);\n      }\n    }\n    p.put(\"index\", tmpIdxDirName);\n    FileOutputStream os = null;\n    try {\n      os = new FileOutputStream(idxprops);\n      p.store(os, \"index properties\");\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unable to write index.properties\", e);\n    } finally {\n      IOUtils.closeQuietly(os);\n    }\n      return true;\n  }\n\n","sourceOld":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties...\");\n    File idxprops = new File(solrCore.getDataDir() + \"index.properties\");\n    Properties p = new Properties();\n    if (idxprops.exists()) {\n      InputStream is = null;\n      try {\n        is = new FileInputStream(idxprops);\n        p.load(is);\n      } catch (Exception e) {\n        LOG.error(\"Unable to load index.properties\");\n      } finally {\n        IOUtils.closeQuietly(is);\n      }\n    }\n    p.put(\"index\", tmpIdxDirName);\n    FileOutputStream os = null;\n    try {\n      os = new FileOutputStream(idxprops);\n      p.store(os, \"index properties\");\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unable to write index.properties\", e);\n    } finally {\n      IOUtils.closeQuietly(os);\n    }\n      return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","sourceNew":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties...\");\n    File idxprops = new File(solrCore.getDataDir() + \"index.properties\");\n    Properties p = new Properties();\n    if (idxprops.exists()) {\n      InputStream is = null;\n      try {\n        is = new FileInputStream(idxprops);\n        p.load(is);\n      } catch (Exception e) {\n        LOG.error(\"Unable to load index.properties\");\n      } finally {\n        IOUtils.closeQuietly(is);\n      }\n    }\n    p.put(\"index\", tmpIdxDirName);\n    FileOutputStream os = null;\n    try {\n      os = new FileOutputStream(idxprops);\n      p.store(os, \"index properties\");\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unable to write index.properties\", e);\n    } finally {\n      IOUtils.closeQuietly(os);\n    }\n      return true;\n  }\n\n","sourceOld":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties...\");\n    File idxprops = new File(solrCore.getDataDir() + \"index.properties\");\n    Properties p = new Properties();\n    if (idxprops.exists()) {\n      InputStream is = null;\n      try {\n        is = new FileInputStream(idxprops);\n        p.load(is);\n      } catch (Exception e) {\n        LOG.error(\"Unable to load index.properties\");\n      } finally {\n        IOUtils.closeQuietly(is);\n      }\n    }\n    p.put(\"index\", tmpIdxDirName);\n    FileOutputStream os = null;\n    try {\n      os = new FileOutputStream(idxprops);\n      p.store(os, \"index properties\");\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unable to write index.properties\", e);\n    } finally {\n      IOUtils.closeQuietly(os);\n    }\n      return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","sourceNew":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties...\");\n    File idxprops = new File(solrCore.getDataDir() + \"index.properties\");\n    Properties p = new Properties();\n    if (idxprops.exists()) {\n      InputStream is = null;\n      try {\n        is = new FileInputStream(idxprops);\n        p.load(is);\n      } catch (Exception e) {\n        LOG.error(\"Unable to load index.properties\");\n      } finally {\n        IOUtils.closeQuietly(is);\n      }\n    }\n    p.put(\"index\", tmpIdxDirName);\n    FileOutputStream os = null;\n    try {\n      os = new FileOutputStream(idxprops);\n      p.store(os, \"index properties\");\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unable to write index.properties\", e);\n    } finally {\n      IOUtils.closeQuietly(os);\n    }\n      return true;\n  }\n\n","sourceOld":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties...\");\n    File idxprops = new File(solrCore.getDataDir() + \"index.properties\");\n    Properties p = new Properties();\n    if (idxprops.exists()) {\n      InputStream is = null;\n      try {\n        is = new FileInputStream(idxprops);\n        p.load(is);\n      } catch (Exception e) {\n        LOG.error(\"Unable to load index.properties\");\n      } finally {\n        IOUtils.closeQuietly(is);\n      }\n    }\n    p.put(\"index\", tmpIdxDirName);\n    FileOutputStream os = null;\n    try {\n      os = new FileOutputStream(idxprops);\n      p.store(os, \"index properties\");\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unable to write index.properties\", e);\n    } finally {\n      IOUtils.closeQuietly(os);\n    }\n      return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17423fb5ef5555fbfa7fe53c15d602faef60ba1a","date":1339512496,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","sourceNew":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    File idxprops = new File(solrCore.getDataDir() + \"index.properties\");\n    Properties p = new Properties();\n    if (idxprops.exists()) {\n      InputStream is = null;\n      try {\n        is = new FileInputStream(idxprops);\n        p.load(is);\n      } catch (Exception e) {\n        LOG.error(\"Unable to load index.properties\");\n      } finally {\n        IOUtils.closeQuietly(is);\n      }\n    }\n    p.put(\"index\", tmpIdxDirName);\n    FileOutputStream os = null;\n    try {\n      os = new FileOutputStream(idxprops);\n      p.store(os, \"index properties\");\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unable to write index.properties\", e);\n    } finally {\n      IOUtils.closeQuietly(os);\n    }\n      return true;\n  }\n\n","sourceOld":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties...\");\n    File idxprops = new File(solrCore.getDataDir() + \"index.properties\");\n    Properties p = new Properties();\n    if (idxprops.exists()) {\n      InputStream is = null;\n      try {\n        is = new FileInputStream(idxprops);\n        p.load(is);\n      } catch (Exception e) {\n        LOG.error(\"Unable to load index.properties\");\n      } finally {\n        IOUtils.closeQuietly(is);\n      }\n    }\n    p.put(\"index\", tmpIdxDirName);\n    FileOutputStream os = null;\n    try {\n      os = new FileOutputStream(idxprops);\n      p.store(os, \"index properties\");\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unable to write index.properties\", e);\n    } finally {\n      IOUtils.closeQuietly(os);\n    }\n      return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","sourceNew":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), null);\n      if (dir.fileExists(\"index.properties\")){\n        final IndexInput input = dir.openInput(\"index.properties\", IOContext.DEFAULT);\n  \n        final InputStream is = new InputStream() {\n          \n          @Override\n          public int read() throws IOException {\n            byte next;\n            try {\n              next = input.readByte();\n            } catch (EOFException e) {\n              return -1;\n            }\n            return next;\n          }\n          \n          @Override\n          public void close() throws IOException {\n            super.close();\n            input.close();\n          }\n        };\n        \n        try {\n          p.load(is);\n        } catch (Exception e) {\n          LOG.error(\"Unable to load index.properties\", e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(\"index.properties\");\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(\"index.properties\", IOContext.DEFAULT);\n      p.put(\"index\", tmpIdxDirName);\n      OutputStream os = null;\n      try {\n        os = new OutputStream() {\n          \n          @Override\n          public void write(int b) throws IOException {\n            out.writeByte((byte) b);\n          }\n          \n          @Override\n          public void close() throws IOException {\n            super.close();\n            out.close();\n          }\n        };\n        p.store(os, \"index properties\");\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write index.properties\", e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n        return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    File idxprops = new File(solrCore.getDataDir() + \"index.properties\");\n    Properties p = new Properties();\n    if (idxprops.exists()) {\n      InputStream is = null;\n      try {\n        is = new FileInputStream(idxprops);\n        p.load(is);\n      } catch (Exception e) {\n        LOG.error(\"Unable to load index.properties\");\n      } finally {\n        IOUtils.closeQuietly(is);\n      }\n    }\n    p.put(\"index\", tmpIdxDirName);\n    FileOutputStream os = null;\n    try {\n      os = new FileOutputStream(idxprops);\n      p.store(os, \"index properties\");\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unable to write index.properties\", e);\n    } finally {\n      IOUtils.closeQuietly(os);\n    }\n      return true;\n  }\n\n","bugFix":null,"bugIntro":["718607d99d02778db3280e64975663762c94170d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","sourceNew":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), null);\n      if (dir.fileExists(\"index.properties\")){\n        final IndexInput input = dir.openInput(\"index.properties\", IOContext.DEFAULT);\n  \n        final InputStream is = new InputStream() {\n          \n          @Override\n          public int read() throws IOException {\n            byte next;\n            try {\n              next = input.readByte();\n            } catch (EOFException e) {\n              return -1;\n            }\n            return next;\n          }\n          \n          @Override\n          public void close() throws IOException {\n            super.close();\n            input.close();\n          }\n        };\n        \n        try {\n          p.load(is);\n        } catch (Exception e) {\n          LOG.error(\"Unable to load index.properties\", e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(\"index.properties\");\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(\"index.properties\", IOContext.DEFAULT);\n      p.put(\"index\", tmpIdxDirName);\n      OutputStream os = null;\n      try {\n        os = new OutputStream() {\n          \n          @Override\n          public void write(int b) throws IOException {\n            out.writeByte((byte) b);\n          }\n          \n          @Override\n          public void close() throws IOException {\n            super.close();\n            out.close();\n          }\n        };\n        p.store(os, \"index properties\");\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write index.properties\", e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n        return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    File idxprops = new File(solrCore.getDataDir() + \"index.properties\");\n    Properties p = new Properties();\n    if (idxprops.exists()) {\n      InputStream is = null;\n      try {\n        is = new FileInputStream(idxprops);\n        p.load(is);\n      } catch (Exception e) {\n        LOG.error(\"Unable to load index.properties\");\n      } finally {\n        IOUtils.closeQuietly(is);\n      }\n    }\n    p.put(\"index\", tmpIdxDirName);\n    FileOutputStream os = null;\n    try {\n      os = new FileOutputStream(idxprops);\n      p.store(os, \"index properties\");\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unable to write index.properties\", e);\n    } finally {\n      IOUtils.closeQuietly(os);\n    }\n      return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"718607d99d02778db3280e64975663762c94170d","date":1354986964,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","sourceNew":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), solrCore.getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(\"index.properties\")){\n        final IndexInput input = dir.openInput(\"index.properties\", IOContext.DEFAULT);\n  \n        final InputStream is = new InputStream() {\n          \n          @Override\n          public int read() throws IOException {\n            byte next;\n            try {\n              next = input.readByte();\n            } catch (EOFException e) {\n              return -1;\n            }\n            return next;\n          }\n          \n          @Override\n          public void close() throws IOException {\n            super.close();\n            input.close();\n          }\n        };\n        \n        try {\n          p.load(is);\n        } catch (Exception e) {\n          LOG.error(\"Unable to load index.properties\", e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(\"index.properties\");\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(\"index.properties\", IOContext.DEFAULT);\n      p.put(\"index\", tmpIdxDirName);\n      OutputStream os = null;\n      try {\n        os = new OutputStream() {\n          \n          @Override\n          public void write(int b) throws IOException {\n            out.writeByte((byte) b);\n          }\n          \n          @Override\n          public void close() throws IOException {\n            super.close();\n            out.close();\n          }\n        };\n        p.store(os, \"index properties\");\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write index.properties\", e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n        return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), null);\n      if (dir.fileExists(\"index.properties\")){\n        final IndexInput input = dir.openInput(\"index.properties\", IOContext.DEFAULT);\n  \n        final InputStream is = new InputStream() {\n          \n          @Override\n          public int read() throws IOException {\n            byte next;\n            try {\n              next = input.readByte();\n            } catch (EOFException e) {\n              return -1;\n            }\n            return next;\n          }\n          \n          @Override\n          public void close() throws IOException {\n            super.close();\n            input.close();\n          }\n        };\n        \n        try {\n          p.load(is);\n        } catch (Exception e) {\n          LOG.error(\"Unable to load index.properties\", e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(\"index.properties\");\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(\"index.properties\", IOContext.DEFAULT);\n      p.put(\"index\", tmpIdxDirName);\n      OutputStream os = null;\n      try {\n        os = new OutputStream() {\n          \n          @Override\n          public void write(int b) throws IOException {\n            out.writeByte((byte) b);\n          }\n          \n          @Override\n          public void close() throws IOException {\n            super.close();\n            out.close();\n          }\n        };\n        p.store(os, \"index properties\");\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write index.properties\", e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n        return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","bugFix":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1888bdba4dbb0c062f4a2456bba74c12fb0f42e","date":1355002015,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","sourceNew":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), solrCore.getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(\"index.properties\")){\n        final IndexInput input = dir.openInput(\"index.properties\", IOContext.DEFAULT);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(is);\n        } catch (Exception e) {\n          LOG.error(\"Unable to load index.properties\", e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(\"index.properties\");\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(\"index.properties\", IOContext.DEFAULT);\n      p.put(\"index\", tmpIdxDirName);\n      OutputStream os = null;\n      try {\n        os = new PropertiesOutputStream(out);\n        p.store(os, \"index properties\");\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write index.properties\", e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), solrCore.getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(\"index.properties\")){\n        final IndexInput input = dir.openInput(\"index.properties\", IOContext.DEFAULT);\n  \n        final InputStream is = new InputStream() {\n          \n          @Override\n          public int read() throws IOException {\n            byte next;\n            try {\n              next = input.readByte();\n            } catch (EOFException e) {\n              return -1;\n            }\n            return next;\n          }\n          \n          @Override\n          public void close() throws IOException {\n            super.close();\n            input.close();\n          }\n        };\n        \n        try {\n          p.load(is);\n        } catch (Exception e) {\n          LOG.error(\"Unable to load index.properties\", e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(\"index.properties\");\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(\"index.properties\", IOContext.DEFAULT);\n      p.put(\"index\", tmpIdxDirName);\n      OutputStream os = null;\n      try {\n        os = new OutputStream() {\n          \n          @Override\n          public void write(int b) throws IOException {\n            out.writeByte((byte) b);\n          }\n          \n          @Override\n          public void close() throws IOException {\n            super.close();\n            out.close();\n          }\n        };\n        p.store(os, \"index properties\");\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write index.properties\", e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n        return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"865348f7ac33f21bb9d0acd227b4af06d95e3f9c","date":1355011923,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","sourceNew":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), solrCore.getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(\"index.properties\")){\n        final IndexInput input = dir.openInput(\"index.properties\", IOContext.DEFAULT);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(is);\n        } catch (Exception e) {\n          LOG.error(\"Unable to load index.properties\", e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(\"index.properties\");\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(\"index.properties\", IOContext.DEFAULT);\n      p.put(\"index\", tmpIdxDirName);\n      OutputStream os = null;\n      try {\n        os = new PropertiesOutputStream(out);\n        p.store(os, \"index properties\");\n        dir.sync(Collections.singleton(INDEX_PEROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write index.properties\", e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), solrCore.getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(\"index.properties\")){\n        final IndexInput input = dir.openInput(\"index.properties\", IOContext.DEFAULT);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(is);\n        } catch (Exception e) {\n          LOG.error(\"Unable to load index.properties\", e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(\"index.properties\");\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(\"index.properties\", IOContext.DEFAULT);\n      p.put(\"index\", tmpIdxDirName);\n      OutputStream os = null;\n      try {\n        os = new PropertiesOutputStream(out);\n        p.store(os, \"index properties\");\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write index.properties\", e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","sourceNew":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), solrCore.getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(\"index.properties\")){\n        final IndexInput input = dir.openInput(\"index.properties\", IOContext.DEFAULT);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(is);\n        } catch (Exception e) {\n          LOG.error(\"Unable to load index.properties\", e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(\"index.properties\");\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(\"index.properties\", IOContext.DEFAULT);\n      p.put(\"index\", tmpIdxDirName);\n      OutputStream os = null;\n      try {\n        os = new PropertiesOutputStream(out);\n        p.store(os, \"index properties\");\n        dir.sync(Collections.singleton(INDEX_PEROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write index.properties\", e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), null);\n      if (dir.fileExists(\"index.properties\")){\n        final IndexInput input = dir.openInput(\"index.properties\", IOContext.DEFAULT);\n  \n        final InputStream is = new InputStream() {\n          \n          @Override\n          public int read() throws IOException {\n            byte next;\n            try {\n              next = input.readByte();\n            } catch (EOFException e) {\n              return -1;\n            }\n            return next;\n          }\n          \n          @Override\n          public void close() throws IOException {\n            super.close();\n            input.close();\n          }\n        };\n        \n        try {\n          p.load(is);\n        } catch (Exception e) {\n          LOG.error(\"Unable to load index.properties\", e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(\"index.properties\");\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(\"index.properties\", IOContext.DEFAULT);\n      p.put(\"index\", tmpIdxDirName);\n      OutputStream os = null;\n      try {\n        os = new OutputStream() {\n          \n          @Override\n          public void write(int b) throws IOException {\n            out.writeByte((byte) b);\n          }\n          \n          @Override\n          public void close() throws IOException {\n            super.close();\n            out.close();\n          }\n        };\n        p.store(os, \"index properties\");\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write index.properties\", e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n        return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15fdb1d84f9e74320d318f682fd2b7d370398857","date":1355194688,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","sourceNew":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), solrCore.getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(\"index.properties\")){\n        final IndexInput input = dir.openInput(\"index.properties\", DirectoryFactory.IOCONTEXT_NO_CACHE);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(is);\n        } catch (Exception e) {\n          LOG.error(\"Unable to load index.properties\", e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(\"index.properties\");\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(\"index.properties\", DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      OutputStream os = null;\n      try {\n        os = new PropertiesOutputStream(out);\n        p.store(os, \"index properties\");\n        dir.sync(Collections.singleton(INDEX_PEROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write index.properties\", e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), solrCore.getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(\"index.properties\")){\n        final IndexInput input = dir.openInput(\"index.properties\", IOContext.DEFAULT);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(is);\n        } catch (Exception e) {\n          LOG.error(\"Unable to load index.properties\", e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(\"index.properties\");\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(\"index.properties\", IOContext.DEFAULT);\n      p.put(\"index\", tmpIdxDirName);\n      OutputStream os = null;\n      try {\n        os = new PropertiesOutputStream(out);\n        p.store(os, \"index properties\");\n        dir.sync(Collections.singleton(INDEX_PEROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write index.properties\", e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d2c955494271bc1fe5eee192f9faa295e47acda","date":1355240592,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","sourceNew":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), solrCore.getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(SnapPuller.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(SnapPuller.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(is);\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + SnapPuller.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(SnapPuller.INDEX_PROPERTIES);\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(SnapPuller.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      OutputStream os = null;\n      try {\n        os = new PropertiesOutputStream(out);\n        p.store(os, SnapPuller.INDEX_PROPERTIES);\n        dir.sync(Collections.singleton(INDEX_PROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + SnapPuller.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), solrCore.getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(\"index.properties\")){\n        final IndexInput input = dir.openInput(\"index.properties\", DirectoryFactory.IOCONTEXT_NO_CACHE);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(is);\n        } catch (Exception e) {\n          LOG.error(\"Unable to load index.properties\", e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(\"index.properties\");\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(\"index.properties\", DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      OutputStream os = null;\n      try {\n        os = new PropertiesOutputStream(out);\n        p.store(os, \"index properties\");\n        dir.sync(Collections.singleton(INDEX_PEROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write index.properties\", e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","sourceNew":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), solrCore.getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(SnapPuller.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(SnapPuller.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(is);\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + SnapPuller.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(SnapPuller.INDEX_PROPERTIES);\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(SnapPuller.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      OutputStream os = null;\n      try {\n        os = new PropertiesOutputStream(out);\n        p.store(os, SnapPuller.INDEX_PROPERTIES);\n        dir.sync(Collections.singleton(INDEX_PROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + SnapPuller.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), solrCore.getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(\"index.properties\")){\n        final IndexInput input = dir.openInput(\"index.properties\", IOContext.DEFAULT);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(is);\n        } catch (Exception e) {\n          LOG.error(\"Unable to load index.properties\", e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(\"index.properties\");\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(\"index.properties\", IOContext.DEFAULT);\n      p.put(\"index\", tmpIdxDirName);\n      OutputStream os = null;\n      try {\n        os = new PropertiesOutputStream(out);\n        p.store(os, \"index properties\");\n        dir.sync(Collections.singleton(INDEX_PEROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write index.properties\", e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674","date":1358098706,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","sourceNew":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(SnapPuller.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(SnapPuller.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(is);\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + SnapPuller.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(SnapPuller.INDEX_PROPERTIES);\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(SnapPuller.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      OutputStream os = null;\n      try {\n        os = new PropertiesOutputStream(out);\n        p.store(os, SnapPuller.INDEX_PROPERTIES);\n        dir.sync(Collections.singleton(INDEX_PROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + SnapPuller.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), solrCore.getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(SnapPuller.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(SnapPuller.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(is);\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + SnapPuller.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(SnapPuller.INDEX_PROPERTIES);\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(SnapPuller.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      OutputStream os = null;\n      try {\n        os = new PropertiesOutputStream(out);\n        p.store(os, SnapPuller.INDEX_PROPERTIES);\n        dir.sync(Collections.singleton(INDEX_PROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + SnapPuller.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","sourceNew":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(SnapPuller.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(SnapPuller.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(is);\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + SnapPuller.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(SnapPuller.INDEX_PROPERTIES);\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(SnapPuller.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      OutputStream os = null;\n      try {\n        os = new PropertiesOutputStream(out);\n        p.store(os, SnapPuller.INDEX_PROPERTIES);\n        dir.sync(Collections.singleton(INDEX_PROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + SnapPuller.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), solrCore.getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(SnapPuller.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(SnapPuller.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(is);\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + SnapPuller.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(SnapPuller.INDEX_PROPERTIES);\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(SnapPuller.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      OutputStream os = null;\n      try {\n        os = new PropertiesOutputStream(out);\n        p.store(os, SnapPuller.INDEX_PROPERTIES);\n        dir.sync(Collections.singleton(INDEX_PROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + SnapPuller.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fd8fc50365ae7bb9c0d47256bc40182559b70d1","date":1373649022,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","sourceNew":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(SnapPuller.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(SnapPuller.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, CHARSET_UTF_8));\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + SnapPuller.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(SnapPuller.INDEX_PROPERTIES);\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(SnapPuller.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      Writer os = null;\n      try {\n        os = new OutputStreamWriter(new PropertiesOutputStream(out), CHARSET_UTF_8);\n        p.store(os, SnapPuller.INDEX_PROPERTIES);\n        dir.sync(Collections.singleton(INDEX_PROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + SnapPuller.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(SnapPuller.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(SnapPuller.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(is);\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + SnapPuller.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(SnapPuller.INDEX_PROPERTIES);\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(SnapPuller.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      OutputStream os = null;\n      try {\n        os = new PropertiesOutputStream(out);\n        p.store(os, SnapPuller.INDEX_PROPERTIES);\n        dir.sync(Collections.singleton(INDEX_PROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + SnapPuller.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","sourceNew":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(SnapPuller.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(SnapPuller.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, CHARSET_UTF_8));\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + SnapPuller.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(SnapPuller.INDEX_PROPERTIES);\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(SnapPuller.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      Writer os = null;\n      try {\n        os = new OutputStreamWriter(new PropertiesOutputStream(out), CHARSET_UTF_8);\n        p.store(os, SnapPuller.INDEX_PROPERTIES);\n        dir.sync(Collections.singleton(INDEX_PROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + SnapPuller.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(SnapPuller.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(SnapPuller.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(is);\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + SnapPuller.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(SnapPuller.INDEX_PROPERTIES);\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(SnapPuller.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      OutputStream os = null;\n      try {\n        os = new PropertiesOutputStream(out);\n        p.store(os, SnapPuller.INDEX_PROPERTIES);\n        dir.sync(Collections.singleton(INDEX_PROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + SnapPuller.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd4e13d997cf4fb810398a20a299c2c5a9f6b796","date":1395594336,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","sourceNew":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      if (slowFileExists(dir, SnapPuller.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(SnapPuller.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, CHARSET_UTF_8));\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + SnapPuller.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(SnapPuller.INDEX_PROPERTIES);\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(SnapPuller.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      Writer os = null;\n      try {\n        os = new OutputStreamWriter(new PropertiesOutputStream(out), CHARSET_UTF_8);\n        p.store(os, SnapPuller.INDEX_PROPERTIES);\n        dir.sync(Collections.singleton(INDEX_PROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + SnapPuller.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(SnapPuller.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(SnapPuller.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, CHARSET_UTF_8));\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + SnapPuller.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(SnapPuller.INDEX_PROPERTIES);\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(SnapPuller.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      Writer os = null;\n      try {\n        os = new OutputStreamWriter(new PropertiesOutputStream(out), CHARSET_UTF_8);\n        p.store(os, SnapPuller.INDEX_PROPERTIES);\n        dir.sync(Collections.singleton(INDEX_PROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + SnapPuller.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","sourceNew":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      if (slowFileExists(dir, SnapPuller.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(SnapPuller.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + SnapPuller.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(SnapPuller.INDEX_PROPERTIES);\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(SnapPuller.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      Writer os = null;\n      try {\n        os = new OutputStreamWriter(new PropertiesOutputStream(out), StandardCharsets.UTF_8);\n        p.store(os, SnapPuller.INDEX_PROPERTIES);\n        dir.sync(Collections.singleton(INDEX_PROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + SnapPuller.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      if (slowFileExists(dir, SnapPuller.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(SnapPuller.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, CHARSET_UTF_8));\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + SnapPuller.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(SnapPuller.INDEX_PROPERTIES);\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(SnapPuller.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      Writer os = null;\n      try {\n        os = new OutputStreamWriter(new PropertiesOutputStream(out), CHARSET_UTF_8);\n        p.store(os, SnapPuller.INDEX_PROPERTIES);\n        dir.sync(Collections.singleton(INDEX_PROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + SnapPuller.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","sourceNew":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      if (slowFileExists(dir, SnapPuller.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(SnapPuller.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + SnapPuller.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(SnapPuller.INDEX_PROPERTIES);\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(SnapPuller.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      Writer os = null;\n      try {\n        os = new OutputStreamWriter(new PropertiesOutputStream(out), StandardCharsets.UTF_8);\n        p.store(os, SnapPuller.INDEX_PROPERTIES);\n        dir.sync(Collections.singleton(INDEX_PROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + SnapPuller.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      if (slowFileExists(dir, SnapPuller.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(SnapPuller.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, CHARSET_UTF_8));\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + SnapPuller.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(SnapPuller.INDEX_PROPERTIES);\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(SnapPuller.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      Writer os = null;\n      try {\n        os = new OutputStreamWriter(new PropertiesOutputStream(out), CHARSET_UTF_8);\n        p.store(os, SnapPuller.INDEX_PROPERTIES);\n        dir.sync(Collections.singleton(INDEX_PROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + SnapPuller.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":5,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#modifyIndexProps(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","sourceNew":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      if (slowFileExists(dir, IndexFetcher.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + IndexFetcher.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      Writer os = null;\n      try {\n        os = new OutputStreamWriter(new PropertiesOutputStream(out), StandardCharsets.UTF_8);\n        p.store(os, IndexFetcher.INDEX_PROPERTIES);\n        dir.sync(Collections.singleton(INDEX_PROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + IndexFetcher.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      if (slowFileExists(dir, SnapPuller.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(SnapPuller.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + SnapPuller.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(SnapPuller.INDEX_PROPERTIES);\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(SnapPuller.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      Writer os = null;\n      try {\n        os = new OutputStreamWriter(new PropertiesOutputStream(out), StandardCharsets.UTF_8);\n        p.store(os, SnapPuller.INDEX_PROPERTIES);\n        dir.sync(Collections.singleton(INDEX_PROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + SnapPuller.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#modifyIndexProps(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      if (slowFileExists(dir, SnapPuller.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(SnapPuller.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + SnapPuller.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(SnapPuller.INDEX_PROPERTIES);\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(SnapPuller.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      Writer os = null;\n      try {\n        os = new OutputStreamWriter(new PropertiesOutputStream(out), StandardCharsets.UTF_8);\n        p.store(os, SnapPuller.INDEX_PROPERTIES);\n        dir.sync(Collections.singleton(INDEX_PROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + SnapPuller.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"15fdb1d84f9e74320d318f682fd2b7d370398857":["865348f7ac33f21bb9d0acd227b4af06d95e3f9c"],"5eb2511ababf862ea11e10761c70ee560cd84510":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796","7d89d7e4e5101347833eea558851bf4209218619"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","7d2c955494271bc1fe5eee192f9faa295e47acda"],"7d2c955494271bc1fe5eee192f9faa295e47acda":["15fdb1d84f9e74320d318f682fd2b7d370398857"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674","1fd8fc50365ae7bb9c0d47256bc40182559b70d1"],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["1fd8fc50365ae7bb9c0d47256bc40182559b70d1"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674":["7d2c955494271bc1fe5eee192f9faa295e47acda"],"17423fb5ef5555fbfa7fe53c15d602faef60ba1a":["c26f00b574427b55127e869b935845554afde1fa"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d9405f486872f1e416304dfe389741f4ee2f8a4d","865348f7ac33f21bb9d0acd227b4af06d95e3f9c"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["17423fb5ef5555fbfa7fe53c15d602faef60ba1a"],"7d89d7e4e5101347833eea558851bf4209218619":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"1fd8fc50365ae7bb9c0d47256bc40182559b70d1":["1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"865348f7ac33f21bb9d0acd227b4af06d95e3f9c":["d1888bdba4dbb0c062f4a2456bba74c12fb0f42e"],"d1888bdba4dbb0c062f4a2456bba74c12fb0f42e":["718607d99d02778db3280e64975663762c94170d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["7d89d7e4e5101347833eea558851bf4209218619","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["7d89d7e4e5101347833eea558851bf4209218619"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f2126b84bd093fa3d921582a109a0ee578c28126":["17423fb5ef5555fbfa7fe53c15d602faef60ba1a","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"718607d99d02778db3280e64975663762c94170d":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20f6b7cff3771384f27af0f059795d7e64aff6b9"]},"commit2Childs":{"15fdb1d84f9e74320d318f682fd2b7d370398857":["7d2c955494271bc1fe5eee192f9faa295e47acda"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["8917bfede3b4ca30f4305c1e391e9218959cd723"],"7d2c955494271bc1fe5eee192f9faa295e47acda":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"c26f00b574427b55127e869b935845554afde1fa":["17423fb5ef5555fbfa7fe53c15d602faef60ba1a"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674":["37a0f60745e53927c4c876cfe5b5a58170f0646c","8917bfede3b4ca30f4305c1e391e9218959cd723","1fd8fc50365ae7bb9c0d47256bc40182559b70d1"],"17423fb5ef5555fbfa7fe53c15d602faef60ba1a":["d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["407687e67faf6e1f02a211ca078d8e3eed631027","f2126b84bd093fa3d921582a109a0ee578c28126","718607d99d02778db3280e64975663762c94170d"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"865348f7ac33f21bb9d0acd227b4af06d95e3f9c":["15fdb1d84f9e74320d318f682fd2b7d370398857","407687e67faf6e1f02a211ca078d8e3eed631027"],"1fd8fc50365ae7bb9c0d47256bc40182559b70d1":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"d1888bdba4dbb0c062f4a2456bba74c12fb0f42e":["865348f7ac33f21bb9d0acd227b4af06d95e3f9c"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"718607d99d02778db3280e64975663762c94170d":["d1888bdba4dbb0c062f4a2456bba74c12fb0f42e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","37a0f60745e53927c4c876cfe5b5a58170f0646c","8917bfede3b4ca30f4305c1e391e9218959cd723","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a258fbb26824fd104ed795e5d9033d2d040049ee","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}