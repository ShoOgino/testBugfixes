{"path":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#createPackedInts(int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#createPackedInts(int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#createPackedInts(int,int).mjava","sourceNew":"  private List<PackedInts.Mutable> createPackedInts(\n          int valueCount, int bitsPerValue) {\n    List<PackedInts.Mutable> packedInts = new ArrayList<PackedInts.Mutable>();\n    if (bitsPerValue <= 8) {\n      packedInts.add(new Direct8(valueCount));\n    }\n    if (bitsPerValue <= 16) {\n      packedInts.add(new Direct16(valueCount));\n    }\n    if (bitsPerValue <= 31) {\n      packedInts.add(new Packed32(valueCount, bitsPerValue));\n    }\n    if (bitsPerValue <= 32) {\n      packedInts.add(new Direct32(valueCount));\n    }\n    if (bitsPerValue <= 63) {\n      packedInts.add(new Packed64(valueCount, bitsPerValue));\n    }\n    packedInts.add(new Direct64(valueCount));\n    return packedInts;\n  }\n\n","sourceOld":"  private List<PackedInts.Mutable> createPackedInts(\n          int valueCount, int bitsPerValue) {\n    List<PackedInts.Mutable> packedInts = new ArrayList<PackedInts.Mutable>();\n    if (bitsPerValue <= 8) {\n      packedInts.add(new Direct8(valueCount));\n    }\n    if (bitsPerValue <= 16) {\n      packedInts.add(new Direct16(valueCount));\n    }\n    if (bitsPerValue <= 31) {\n      packedInts.add(new Packed32(valueCount, bitsPerValue));\n    }\n    if (bitsPerValue <= 32) {\n      packedInts.add(new Direct32(valueCount));\n    }\n    if (bitsPerValue <= 63) {\n      packedInts.add(new Packed64(valueCount, bitsPerValue));\n    }\n    packedInts.add(new Direct64(valueCount));\n    return packedInts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a470c93b2b0f8f51241f52705fc110a01f27ad2","date":1337969379,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#createPackedInts(int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#createPackedInts(int,int).mjava","sourceNew":"  private List<PackedInts.Mutable> createPackedInts(\n          int valueCount, int bitsPerValue) {\n    List<PackedInts.Mutable> packedInts = new ArrayList<PackedInts.Mutable>();\n    if (bitsPerValue <= 8) {\n      packedInts.add(new Direct8(valueCount));\n    }\n    if (bitsPerValue <= 16) {\n      packedInts.add(new Direct16(valueCount));\n    }\n    if (bitsPerValue <= 24 && valueCount <= Packed8ThreeBlocks.MAX_SIZE) {\n      packedInts.add(new Packed8ThreeBlocks(valueCount));\n    }\n    if (bitsPerValue <= 32) {\n      packedInts.add(new Direct32(valueCount));\n    }\n    if (bitsPerValue <= 48 && valueCount <= Packed16ThreeBlocks.MAX_SIZE) {\n      packedInts.add(new Packed16ThreeBlocks(valueCount));\n    }\n    if (bitsPerValue <= 63) {\n      packedInts.add(new Packed64(valueCount, bitsPerValue));\n    }\n    packedInts.add(new Direct64(valueCount));\n    for (int bpv = bitsPerValue; bpv <= 64; ++bpv) {\n      if (Packed64SingleBlock.isSupported(bpv)) {\n        packedInts.add(Packed64SingleBlock.create(valueCount, bpv));\n      }\n    }\n    return packedInts;\n  }\n\n","sourceOld":"  private List<PackedInts.Mutable> createPackedInts(\n          int valueCount, int bitsPerValue) {\n    List<PackedInts.Mutable> packedInts = new ArrayList<PackedInts.Mutable>();\n    if (bitsPerValue <= 8) {\n      packedInts.add(new Direct8(valueCount));\n    }\n    if (bitsPerValue <= 16) {\n      packedInts.add(new Direct16(valueCount));\n    }\n    if (bitsPerValue <= 31) {\n      packedInts.add(new Packed32(valueCount, bitsPerValue));\n    }\n    if (bitsPerValue <= 32) {\n      packedInts.add(new Direct32(valueCount));\n    }\n    if (bitsPerValue <= 63) {\n      packedInts.add(new Packed64(valueCount, bitsPerValue));\n    }\n    packedInts.add(new Direct64(valueCount));\n    return packedInts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"501135652c6500e4108453df1cc819dae12098e7","date":1340109868,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#createPackedInts(int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#createPackedInts(int,int).mjava","sourceNew":"  private List<PackedInts.Mutable> createPackedInts(\n          int valueCount, int bitsPerValue) {\n    List<PackedInts.Mutable> packedInts = new ArrayList<PackedInts.Mutable>();\n    if (bitsPerValue <= 8) {\n      packedInts.add(new Direct8(valueCount));\n    }\n    if (bitsPerValue <= 16) {\n      packedInts.add(new Direct16(valueCount));\n    }\n    if (bitsPerValue <= 24 && valueCount <= Packed8ThreeBlocks.MAX_SIZE) {\n      packedInts.add(new Packed8ThreeBlocks(valueCount));\n    }\n    if (bitsPerValue <= 32) {\n      packedInts.add(new Direct32(valueCount));\n    }\n    if (bitsPerValue <= 48 && valueCount <= Packed16ThreeBlocks.MAX_SIZE) {\n      packedInts.add(new Packed16ThreeBlocks(valueCount));\n    }\n    if (bitsPerValue <= 63) {\n      packedInts.add(new Packed64(valueCount, bitsPerValue));\n    }\n    packedInts.add(new Direct64(valueCount));\n    for (int bpv = bitsPerValue; bpv <= Packed64SingleBlock.MAX_SUPPORTED_BITS_PER_VALUE; ++bpv) {\n      if (Packed64SingleBlock.isSupported(bpv)) {\n        packedInts.add(Packed64SingleBlock.create(valueCount, bpv));\n      }\n    }\n    return packedInts;\n  }\n\n","sourceOld":"  private List<PackedInts.Mutable> createPackedInts(\n          int valueCount, int bitsPerValue) {\n    List<PackedInts.Mutable> packedInts = new ArrayList<PackedInts.Mutable>();\n    if (bitsPerValue <= 8) {\n      packedInts.add(new Direct8(valueCount));\n    }\n    if (bitsPerValue <= 16) {\n      packedInts.add(new Direct16(valueCount));\n    }\n    if (bitsPerValue <= 24 && valueCount <= Packed8ThreeBlocks.MAX_SIZE) {\n      packedInts.add(new Packed8ThreeBlocks(valueCount));\n    }\n    if (bitsPerValue <= 32) {\n      packedInts.add(new Direct32(valueCount));\n    }\n    if (bitsPerValue <= 48 && valueCount <= Packed16ThreeBlocks.MAX_SIZE) {\n      packedInts.add(new Packed16ThreeBlocks(valueCount));\n    }\n    if (bitsPerValue <= 63) {\n      packedInts.add(new Packed64(valueCount, bitsPerValue));\n    }\n    packedInts.add(new Direct64(valueCount));\n    for (int bpv = bitsPerValue; bpv <= 64; ++bpv) {\n      if (Packed64SingleBlock.isSupported(bpv)) {\n        packedInts.add(Packed64SingleBlock.create(valueCount, bpv));\n      }\n    }\n    return packedInts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"829d9441b99897377d279219000bb71b50c026be","date":1342046363,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#createPackedInts(int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#createPackedInts(int,int).mjava","sourceNew":"  private static List<PackedInts.Mutable> createPackedInts(\n          int valueCount, int bitsPerValue) {\n    List<PackedInts.Mutable> packedInts = new ArrayList<PackedInts.Mutable>();\n    if (bitsPerValue <= 8) {\n      packedInts.add(new Direct8(valueCount));\n    }\n    if (bitsPerValue <= 16) {\n      packedInts.add(new Direct16(valueCount));\n    }\n    if (bitsPerValue <= 24 && valueCount <= Packed8ThreeBlocks.MAX_SIZE) {\n      packedInts.add(new Packed8ThreeBlocks(valueCount));\n    }\n    if (bitsPerValue <= 32) {\n      packedInts.add(new Direct32(valueCount));\n    }\n    if (bitsPerValue <= 48 && valueCount <= Packed16ThreeBlocks.MAX_SIZE) {\n      packedInts.add(new Packed16ThreeBlocks(valueCount));\n    }\n    if (bitsPerValue <= 63) {\n      packedInts.add(new Packed64(valueCount, bitsPerValue));\n    }\n    packedInts.add(new Direct64(valueCount));\n    for (int bpv = bitsPerValue; bpv <= Packed64SingleBlock.MAX_SUPPORTED_BITS_PER_VALUE; ++bpv) {\n      if (Packed64SingleBlock.isSupported(bpv)) {\n        packedInts.add(Packed64SingleBlock.create(valueCount, bpv));\n      }\n    }\n    return packedInts;\n  }\n\n","sourceOld":"  private List<PackedInts.Mutable> createPackedInts(\n          int valueCount, int bitsPerValue) {\n    List<PackedInts.Mutable> packedInts = new ArrayList<PackedInts.Mutable>();\n    if (bitsPerValue <= 8) {\n      packedInts.add(new Direct8(valueCount));\n    }\n    if (bitsPerValue <= 16) {\n      packedInts.add(new Direct16(valueCount));\n    }\n    if (bitsPerValue <= 24 && valueCount <= Packed8ThreeBlocks.MAX_SIZE) {\n      packedInts.add(new Packed8ThreeBlocks(valueCount));\n    }\n    if (bitsPerValue <= 32) {\n      packedInts.add(new Direct32(valueCount));\n    }\n    if (bitsPerValue <= 48 && valueCount <= Packed16ThreeBlocks.MAX_SIZE) {\n      packedInts.add(new Packed16ThreeBlocks(valueCount));\n    }\n    if (bitsPerValue <= 63) {\n      packedInts.add(new Packed64(valueCount, bitsPerValue));\n    }\n    packedInts.add(new Direct64(valueCount));\n    for (int bpv = bitsPerValue; bpv <= Packed64SingleBlock.MAX_SUPPORTED_BITS_PER_VALUE; ++bpv) {\n      if (Packed64SingleBlock.isSupported(bpv)) {\n        packedInts.add(Packed64SingleBlock.create(valueCount, bpv));\n      }\n    }\n    return packedInts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#createPackedInts(int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#createPackedInts(int,int).mjava","sourceNew":"  private static List<PackedInts.Mutable> createPackedInts(\n          int valueCount, int bitsPerValue) {\n    List<PackedInts.Mutable> packedInts = new ArrayList<PackedInts.Mutable>();\n    if (bitsPerValue <= 8) {\n      packedInts.add(new Direct8(valueCount));\n    }\n    if (bitsPerValue <= 16) {\n      packedInts.add(new Direct16(valueCount));\n    }\n    if (bitsPerValue <= 24 && valueCount <= Packed8ThreeBlocks.MAX_SIZE) {\n      packedInts.add(new Packed8ThreeBlocks(valueCount));\n    }\n    if (bitsPerValue <= 32) {\n      packedInts.add(new Direct32(valueCount));\n    }\n    if (bitsPerValue <= 48 && valueCount <= Packed16ThreeBlocks.MAX_SIZE) {\n      packedInts.add(new Packed16ThreeBlocks(valueCount));\n    }\n    if (bitsPerValue <= 63) {\n      packedInts.add(new Packed64(valueCount, bitsPerValue));\n    }\n    packedInts.add(new Direct64(valueCount));\n    for (int bpv = bitsPerValue; bpv <= Packed64SingleBlock.MAX_SUPPORTED_BITS_PER_VALUE; ++bpv) {\n      if (Packed64SingleBlock.isSupported(bpv)) {\n        packedInts.add(Packed64SingleBlock.create(valueCount, bpv));\n      }\n    }\n    return packedInts;\n  }\n\n","sourceOld":"  private List<PackedInts.Mutable> createPackedInts(\n          int valueCount, int bitsPerValue) {\n    List<PackedInts.Mutable> packedInts = new ArrayList<PackedInts.Mutable>();\n    if (bitsPerValue <= 8) {\n      packedInts.add(new Direct8(valueCount));\n    }\n    if (bitsPerValue <= 16) {\n      packedInts.add(new Direct16(valueCount));\n    }\n    if (bitsPerValue <= 24 && valueCount <= Packed8ThreeBlocks.MAX_SIZE) {\n      packedInts.add(new Packed8ThreeBlocks(valueCount));\n    }\n    if (bitsPerValue <= 32) {\n      packedInts.add(new Direct32(valueCount));\n    }\n    if (bitsPerValue <= 48 && valueCount <= Packed16ThreeBlocks.MAX_SIZE) {\n      packedInts.add(new Packed16ThreeBlocks(valueCount));\n    }\n    if (bitsPerValue <= 63) {\n      packedInts.add(new Packed64(valueCount, bitsPerValue));\n    }\n    packedInts.add(new Direct64(valueCount));\n    for (int bpv = bitsPerValue; bpv <= Packed64SingleBlock.MAX_SUPPORTED_BITS_PER_VALUE; ++bpv) {\n      if (Packed64SingleBlock.isSupported(bpv)) {\n        packedInts.add(Packed64SingleBlock.create(valueCount, bpv));\n      }\n    }\n    return packedInts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#createPackedInts(int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#createPackedInts(int,int).mjava","sourceNew":"  private static List<PackedInts.Mutable> createPackedInts(\n          int valueCount, int bitsPerValue) {\n    List<PackedInts.Mutable> packedInts = new ArrayList<PackedInts.Mutable>();\n    if (bitsPerValue <= 8) {\n      packedInts.add(new Direct8(valueCount));\n    }\n    if (bitsPerValue <= 16) {\n      packedInts.add(new Direct16(valueCount));\n    }\n    if (bitsPerValue <= 24 && valueCount <= Packed8ThreeBlocks.MAX_SIZE) {\n      packedInts.add(new Packed8ThreeBlocks(valueCount));\n    }\n    if (bitsPerValue <= 32) {\n      packedInts.add(new Direct32(valueCount));\n    }\n    if (bitsPerValue <= 48 && valueCount <= Packed16ThreeBlocks.MAX_SIZE) {\n      packedInts.add(new Packed16ThreeBlocks(valueCount));\n    }\n    if (bitsPerValue <= 63) {\n      packedInts.add(new Packed64(valueCount, bitsPerValue));\n    }\n    packedInts.add(new Direct64(valueCount));\n    for (int bpv = bitsPerValue; bpv <= Packed64SingleBlock.MAX_SUPPORTED_BITS_PER_VALUE; ++bpv) {\n      if (Packed64SingleBlock.isSupported(bpv)) {\n        packedInts.add(Packed64SingleBlock.create(valueCount, bpv));\n      }\n    }\n    return packedInts;\n  }\n\n","sourceOld":"  private List<PackedInts.Mutable> createPackedInts(\n          int valueCount, int bitsPerValue) {\n    List<PackedInts.Mutable> packedInts = new ArrayList<PackedInts.Mutable>();\n    if (bitsPerValue <= 8) {\n      packedInts.add(new Direct8(valueCount));\n    }\n    if (bitsPerValue <= 16) {\n      packedInts.add(new Direct16(valueCount));\n    }\n    if (bitsPerValue <= 24 && valueCount <= Packed8ThreeBlocks.MAX_SIZE) {\n      packedInts.add(new Packed8ThreeBlocks(valueCount));\n    }\n    if (bitsPerValue <= 32) {\n      packedInts.add(new Direct32(valueCount));\n    }\n    if (bitsPerValue <= 48 && valueCount <= Packed16ThreeBlocks.MAX_SIZE) {\n      packedInts.add(new Packed16ThreeBlocks(valueCount));\n    }\n    if (bitsPerValue <= 63) {\n      packedInts.add(new Packed64(valueCount, bitsPerValue));\n    }\n    packedInts.add(new Direct64(valueCount));\n    for (int bpv = bitsPerValue; bpv <= Packed64SingleBlock.MAX_SUPPORTED_BITS_PER_VALUE; ++bpv) {\n      if (Packed64SingleBlock.isSupported(bpv)) {\n        packedInts.add(Packed64SingleBlock.create(valueCount, bpv));\n      }\n    }\n    return packedInts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#createPackedInts(int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#createPackedInts(int,int).mjava","sourceNew":"  private static List<PackedInts.Mutable> createPackedInts(\n          int valueCount, int bitsPerValue) {\n    List<PackedInts.Mutable> packedInts = new ArrayList<>();\n    if (bitsPerValue <= 8) {\n      packedInts.add(new Direct8(valueCount));\n    }\n    if (bitsPerValue <= 16) {\n      packedInts.add(new Direct16(valueCount));\n    }\n    if (bitsPerValue <= 24 && valueCount <= Packed8ThreeBlocks.MAX_SIZE) {\n      packedInts.add(new Packed8ThreeBlocks(valueCount));\n    }\n    if (bitsPerValue <= 32) {\n      packedInts.add(new Direct32(valueCount));\n    }\n    if (bitsPerValue <= 48 && valueCount <= Packed16ThreeBlocks.MAX_SIZE) {\n      packedInts.add(new Packed16ThreeBlocks(valueCount));\n    }\n    if (bitsPerValue <= 63) {\n      packedInts.add(new Packed64(valueCount, bitsPerValue));\n    }\n    packedInts.add(new Direct64(valueCount));\n    for (int bpv = bitsPerValue; bpv <= Packed64SingleBlock.MAX_SUPPORTED_BITS_PER_VALUE; ++bpv) {\n      if (Packed64SingleBlock.isSupported(bpv)) {\n        packedInts.add(Packed64SingleBlock.create(valueCount, bpv));\n      }\n    }\n    return packedInts;\n  }\n\n","sourceOld":"  private static List<PackedInts.Mutable> createPackedInts(\n          int valueCount, int bitsPerValue) {\n    List<PackedInts.Mutable> packedInts = new ArrayList<PackedInts.Mutable>();\n    if (bitsPerValue <= 8) {\n      packedInts.add(new Direct8(valueCount));\n    }\n    if (bitsPerValue <= 16) {\n      packedInts.add(new Direct16(valueCount));\n    }\n    if (bitsPerValue <= 24 && valueCount <= Packed8ThreeBlocks.MAX_SIZE) {\n      packedInts.add(new Packed8ThreeBlocks(valueCount));\n    }\n    if (bitsPerValue <= 32) {\n      packedInts.add(new Direct32(valueCount));\n    }\n    if (bitsPerValue <= 48 && valueCount <= Packed16ThreeBlocks.MAX_SIZE) {\n      packedInts.add(new Packed16ThreeBlocks(valueCount));\n    }\n    if (bitsPerValue <= 63) {\n      packedInts.add(new Packed64(valueCount, bitsPerValue));\n    }\n    packedInts.add(new Direct64(valueCount));\n    for (int bpv = bitsPerValue; bpv <= Packed64SingleBlock.MAX_SUPPORTED_BITS_PER_VALUE; ++bpv) {\n      if (Packed64SingleBlock.isSupported(bpv)) {\n        packedInts.add(Packed64SingleBlock.create(valueCount, bpv));\n      }\n    }\n    return packedInts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f440d3f04c39b9b18e8e48a78ef7b9f840674e22","date":1568209549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#createPackedInts(int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#createPackedInts(int,int).mjava","sourceNew":"  private static List<PackedInts.Mutable> createPackedInts(\n          int valueCount, int bitsPerValue) {\n    List<PackedInts.Mutable> packedInts = new ArrayList<>();\n    packedInts.add(new Packed64(valueCount, bitsPerValue));\n    for (int bpv = bitsPerValue; bpv <= Packed64SingleBlock.MAX_SUPPORTED_BITS_PER_VALUE; ++bpv) {\n      if (Packed64SingleBlock.isSupported(bpv)) {\n        packedInts.add(Packed64SingleBlock.create(valueCount, bpv));\n      }\n    }\n    return packedInts;\n  }\n\n","sourceOld":"  private static List<PackedInts.Mutable> createPackedInts(\n          int valueCount, int bitsPerValue) {\n    List<PackedInts.Mutable> packedInts = new ArrayList<>();\n    if (bitsPerValue <= 8) {\n      packedInts.add(new Direct8(valueCount));\n    }\n    if (bitsPerValue <= 16) {\n      packedInts.add(new Direct16(valueCount));\n    }\n    if (bitsPerValue <= 24 && valueCount <= Packed8ThreeBlocks.MAX_SIZE) {\n      packedInts.add(new Packed8ThreeBlocks(valueCount));\n    }\n    if (bitsPerValue <= 32) {\n      packedInts.add(new Direct32(valueCount));\n    }\n    if (bitsPerValue <= 48 && valueCount <= Packed16ThreeBlocks.MAX_SIZE) {\n      packedInts.add(new Packed16ThreeBlocks(valueCount));\n    }\n    if (bitsPerValue <= 63) {\n      packedInts.add(new Packed64(valueCount, bitsPerValue));\n    }\n    packedInts.add(new Direct64(valueCount));\n    for (int bpv = bitsPerValue; bpv <= Packed64SingleBlock.MAX_SUPPORTED_BITS_PER_VALUE; ++bpv) {\n      if (Packed64SingleBlock.isSupported(bpv)) {\n        packedInts.add(Packed64SingleBlock.create(valueCount, bpv));\n      }\n    }\n    return packedInts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["829d9441b99897377d279219000bb71b50c026be"],"aba371508186796cc6151d8223a5b4e16d02e26e":["501135652c6500e4108453df1cc819dae12098e7","829d9441b99897377d279219000bb71b50c026be"],"f440d3f04c39b9b18e8e48a78ef7b9f840674e22":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"829d9441b99897377d279219000bb71b50c026be":["501135652c6500e4108453df1cc819dae12098e7"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["501135652c6500e4108453df1cc819dae12098e7","829d9441b99897377d279219000bb71b50c026be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"501135652c6500e4108453df1cc819dae12098e7":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f440d3f04c39b9b18e8e48a78ef7b9f840674e22"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["f440d3f04c39b9b18e8e48a78ef7b9f840674e22"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"829d9441b99897377d279219000bb71b50c026be":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"f440d3f04c39b9b18e8e48a78ef7b9f840674e22":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"501135652c6500e4108453df1cc819dae12098e7":["aba371508186796cc6151d8223a5b4e16d02e26e","829d9441b99897377d279219000bb71b50c026be","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["501135652c6500e4108453df1cc819dae12098e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}