{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#testAddTooManyReplicas().mjava","commits":[{"id":"3fd3cdfbce4b551bb8ca4678682a5a891d0890ca","date":1436588269,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#testAddTooManyReplicas().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @ShardsFixed(num = 1)\n  public void testAddTooManyReplicas() throws Exception {\n    String collectionName = \"TooManyReplicasInSeveralFlavors\";\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n        .setCollectionName(collectionName)\n        .setNumShards(2)\n        .setReplicationFactor(1)\n        .setMaxShardsPerNode(2)\n        .setStateFormat(2);\n\n    CollectionAdminResponse response = create.process(cloudClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    // Now I have the fixed Jetty plus the control instnace, I have two replicas, one for each shard\n\n    // Curiously, I should be able to add a bunch of replicas if I specify the node, even more than maxShardsPerNode\n    // Just get the first node any way we can.\n    // Get a node to use for the \"node\" parameter.\n\n    String nodeName = getAllNodeNames(collectionName).get(0);\n    // Add a replica using the \"node\" parameter (no \"too many replicas check\")\n    // this node should have 2 replicas on it\n    CollectionAdminRequest.AddReplica addReplicaNode = new CollectionAdminRequest.AddReplica()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard1\")\n        .setNode(nodeName);\n    response = addReplicaNode.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    // Three replicas so far, should be able to create another one \"normally\"\n    CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard1\");\n\n    response = addReplica.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    // This one should fail though, no \"node\" parameter specified\n    try {\n      addReplica.process(cloudClient);\n      fail(\"Should have thrown an error because the nodes are full\");\n    } catch (HttpSolrClient.RemoteSolrException se) {\n      assertTrue(\"Should have gotten the right error message back\",\n          se.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n    }\n\n    // Oddly, we should succeed next just because setting property.name will not check for nodes being \"full up\"\n    Properties props = new Properties();\n    props.setProperty(\"name\", \"bogus2\");\n    addReplicaNode.setProperties(props);\n    response = addReplicaNode.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    ZkStateReader zkStateReader = getCommonCloudSolrClient().getZkStateReader();\n    zkStateReader.updateClusterState(true);\n    Slice slice = zkStateReader.getClusterState().getSlicesMap(collectionName).get(\"shard1\");\n\n    Replica rep = null;\n    for (Replica rep1 : slice.getReplicas()) { // Silly compiler\n      if (rep1.get(\"core\").equals(\"bogus2\")) {\n        rep = rep1;\n        break;\n      }\n    }\n    assertNotNull(\"Should have found a replica named 'bogus2'\", rep);\n    assertEquals(\"Replica should have been put on correct core\", nodeName, rep.getNodeName());\n\n    // Shard1 should have 4 replicas\n    assertEquals(\"There should be 4 replicas for shard 1\", 4, slice.getReplicas().size());\n\n    // And let's fail one more time because to insure that the math doesn't do weird stuff it we have more replicas\n    // than simple calcs would indicate.\n    try {\n      addReplica.process(cloudClient);\n      fail(\"Should have thrown an error because the nodes are full\");\n    } catch (HttpSolrClient.RemoteSolrException se) {\n      assertTrue(\"Should have gotten the right error message back\",\n          se.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"102da6baafc0f534a59f31729343dbab9d3b9e9a","date":1438410244,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#testAddTooManyReplicas().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#testAddTooManyReplicas().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 1)\n  public void testAddTooManyReplicas() throws Exception {\n    String collectionName = \"TooManyReplicasInSeveralFlavors\";\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n        .setCollectionName(collectionName)\n        .setNumShards(2)\n        .setReplicationFactor(1)\n        .setMaxShardsPerNode(2)\n        .setStateFormat(2);\n\n    CollectionAdminResponse response = create.process(cloudClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    // Now I have the fixed Jetty plus the control instnace, I have two replicas, one for each shard\n\n    // Curiously, I should be able to add a bunch of replicas if I specify the node, even more than maxShardsPerNode\n    // Just get the first node any way we can.\n    // Get a node to use for the \"node\" parameter.\n\n    String nodeName = getAllNodeNames(collectionName).get(0);\n    // Add a replica using the \"node\" parameter (no \"too many replicas check\")\n    // this node should have 2 replicas on it\n    CollectionAdminRequest.AddReplica addReplicaNode = new CollectionAdminRequest.AddReplica()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard1\")\n        .setNode(nodeName);\n    response = addReplicaNode.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    // Three replicas so far, should be able to create another one \"normally\"\n    CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard1\");\n\n    response = addReplica.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    // This one should fail though, no \"node\" parameter specified\n    try {\n      addReplica.process(cloudClient);\n      fail(\"Should have thrown an error because the nodes are full\");\n    } catch (HttpSolrClient.RemoteSolrException se) {\n      assertTrue(\"Should have gotten the right error message back\",\n          se.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n    }\n\n    // Oddly, we should succeed next just because setting property.name will not check for nodes being \"full up\"\n    Properties props = new Properties();\n    props.setProperty(\"name\", \"bogus2\");\n    addReplicaNode.setProperties(props);\n    response = addReplicaNode.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    ZkStateReader zkStateReader = getCommonCloudSolrClient().getZkStateReader();\n    zkStateReader.updateClusterState();\n    Slice slice = zkStateReader.getClusterState().getSlicesMap(collectionName).get(\"shard1\");\n\n    Replica rep = null;\n    for (Replica rep1 : slice.getReplicas()) { // Silly compiler\n      if (rep1.get(\"core\").equals(\"bogus2\")) {\n        rep = rep1;\n        break;\n      }\n    }\n    assertNotNull(\"Should have found a replica named 'bogus2'\", rep);\n    assertEquals(\"Replica should have been put on correct core\", nodeName, rep.getNodeName());\n\n    // Shard1 should have 4 replicas\n    assertEquals(\"There should be 4 replicas for shard 1\", 4, slice.getReplicas().size());\n\n    // And let's fail one more time because to insure that the math doesn't do weird stuff it we have more replicas\n    // than simple calcs would indicate.\n    try {\n      addReplica.process(cloudClient);\n      fail(\"Should have thrown an error because the nodes are full\");\n    } catch (HttpSolrClient.RemoteSolrException se) {\n      assertTrue(\"Should have gotten the right error message back\",\n          se.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 1)\n  public void testAddTooManyReplicas() throws Exception {\n    String collectionName = \"TooManyReplicasInSeveralFlavors\";\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n        .setCollectionName(collectionName)\n        .setNumShards(2)\n        .setReplicationFactor(1)\n        .setMaxShardsPerNode(2)\n        .setStateFormat(2);\n\n    CollectionAdminResponse response = create.process(cloudClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    // Now I have the fixed Jetty plus the control instnace, I have two replicas, one for each shard\n\n    // Curiously, I should be able to add a bunch of replicas if I specify the node, even more than maxShardsPerNode\n    // Just get the first node any way we can.\n    // Get a node to use for the \"node\" parameter.\n\n    String nodeName = getAllNodeNames(collectionName).get(0);\n    // Add a replica using the \"node\" parameter (no \"too many replicas check\")\n    // this node should have 2 replicas on it\n    CollectionAdminRequest.AddReplica addReplicaNode = new CollectionAdminRequest.AddReplica()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard1\")\n        .setNode(nodeName);\n    response = addReplicaNode.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    // Three replicas so far, should be able to create another one \"normally\"\n    CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard1\");\n\n    response = addReplica.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    // This one should fail though, no \"node\" parameter specified\n    try {\n      addReplica.process(cloudClient);\n      fail(\"Should have thrown an error because the nodes are full\");\n    } catch (HttpSolrClient.RemoteSolrException se) {\n      assertTrue(\"Should have gotten the right error message back\",\n          se.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n    }\n\n    // Oddly, we should succeed next just because setting property.name will not check for nodes being \"full up\"\n    Properties props = new Properties();\n    props.setProperty(\"name\", \"bogus2\");\n    addReplicaNode.setProperties(props);\n    response = addReplicaNode.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    ZkStateReader zkStateReader = getCommonCloudSolrClient().getZkStateReader();\n    zkStateReader.updateClusterState(true);\n    Slice slice = zkStateReader.getClusterState().getSlicesMap(collectionName).get(\"shard1\");\n\n    Replica rep = null;\n    for (Replica rep1 : slice.getReplicas()) { // Silly compiler\n      if (rep1.get(\"core\").equals(\"bogus2\")) {\n        rep = rep1;\n        break;\n      }\n    }\n    assertNotNull(\"Should have found a replica named 'bogus2'\", rep);\n    assertEquals(\"Replica should have been put on correct core\", nodeName, rep.getNodeName());\n\n    // Shard1 should have 4 replicas\n    assertEquals(\"There should be 4 replicas for shard 1\", 4, slice.getReplicas().size());\n\n    // And let's fail one more time because to insure that the math doesn't do weird stuff it we have more replicas\n    // than simple calcs would indicate.\n    try {\n      addReplica.process(cloudClient);\n      fail(\"Should have thrown an error because the nodes are full\");\n    } catch (HttpSolrClient.RemoteSolrException se) {\n      assertTrue(\"Should have gotten the right error message back\",\n          se.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#testAddTooManyReplicas().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#testAddTooManyReplicas().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 1)\n  public void testAddTooManyReplicas() throws Exception {\n    String collectionName = \"TooManyReplicasInSeveralFlavors\";\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n        .setCollectionName(collectionName)\n        .setNumShards(2)\n        .setReplicationFactor(1)\n        .setMaxShardsPerNode(2)\n        .setStateFormat(2);\n\n    CollectionAdminResponse response = create.process(cloudClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    // Now I have the fixed Jetty plus the control instnace, I have two replicas, one for each shard\n\n    // Curiously, I should be able to add a bunch of replicas if I specify the node, even more than maxShardsPerNode\n    // Just get the first node any way we can.\n    // Get a node to use for the \"node\" parameter.\n\n    String nodeName = getAllNodeNames(collectionName).get(0);\n    // Add a replica using the \"node\" parameter (no \"too many replicas check\")\n    // this node should have 2 replicas on it\n    CollectionAdminRequest.AddReplica addReplicaNode = new CollectionAdminRequest.AddReplica()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard1\")\n        .setNode(nodeName);\n    response = addReplicaNode.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    // Three replicas so far, should be able to create another one \"normally\"\n    CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard1\");\n\n    response = addReplica.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    // This one should fail though, no \"node\" parameter specified\n    try {\n      addReplica.process(cloudClient);\n      fail(\"Should have thrown an error because the nodes are full\");\n    } catch (HttpSolrClient.RemoteSolrException se) {\n      assertTrue(\"Should have gotten the right error message back\",\n          se.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n    }\n\n    // Oddly, we should succeed next just because setting property.name will not check for nodes being \"full up\"\n    Properties props = new Properties();\n    props.setProperty(\"name\", \"bogus2\");\n    addReplicaNode.setProperties(props);\n    response = addReplicaNode.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    ZkStateReader zkStateReader = getCommonCloudSolrClient().getZkStateReader();\n    zkStateReader.forceUpdateCollection(collectionName);\n    Slice slice = zkStateReader.getClusterState().getSlicesMap(collectionName).get(\"shard1\");\n\n    Replica rep = null;\n    for (Replica rep1 : slice.getReplicas()) { // Silly compiler\n      if (rep1.get(\"core\").equals(\"bogus2\")) {\n        rep = rep1;\n        break;\n      }\n    }\n    assertNotNull(\"Should have found a replica named 'bogus2'\", rep);\n    assertEquals(\"Replica should have been put on correct core\", nodeName, rep.getNodeName());\n\n    // Shard1 should have 4 replicas\n    assertEquals(\"There should be 4 replicas for shard 1\", 4, slice.getReplicas().size());\n\n    // And let's fail one more time because to insure that the math doesn't do weird stuff it we have more replicas\n    // than simple calcs would indicate.\n    try {\n      addReplica.process(cloudClient);\n      fail(\"Should have thrown an error because the nodes are full\");\n    } catch (HttpSolrClient.RemoteSolrException se) {\n      assertTrue(\"Should have gotten the right error message back\",\n          se.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 1)\n  public void testAddTooManyReplicas() throws Exception {\n    String collectionName = \"TooManyReplicasInSeveralFlavors\";\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n        .setCollectionName(collectionName)\n        .setNumShards(2)\n        .setReplicationFactor(1)\n        .setMaxShardsPerNode(2)\n        .setStateFormat(2);\n\n    CollectionAdminResponse response = create.process(cloudClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    // Now I have the fixed Jetty plus the control instnace, I have two replicas, one for each shard\n\n    // Curiously, I should be able to add a bunch of replicas if I specify the node, even more than maxShardsPerNode\n    // Just get the first node any way we can.\n    // Get a node to use for the \"node\" parameter.\n\n    String nodeName = getAllNodeNames(collectionName).get(0);\n    // Add a replica using the \"node\" parameter (no \"too many replicas check\")\n    // this node should have 2 replicas on it\n    CollectionAdminRequest.AddReplica addReplicaNode = new CollectionAdminRequest.AddReplica()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard1\")\n        .setNode(nodeName);\n    response = addReplicaNode.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    // Three replicas so far, should be able to create another one \"normally\"\n    CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard1\");\n\n    response = addReplica.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    // This one should fail though, no \"node\" parameter specified\n    try {\n      addReplica.process(cloudClient);\n      fail(\"Should have thrown an error because the nodes are full\");\n    } catch (HttpSolrClient.RemoteSolrException se) {\n      assertTrue(\"Should have gotten the right error message back\",\n          se.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n    }\n\n    // Oddly, we should succeed next just because setting property.name will not check for nodes being \"full up\"\n    Properties props = new Properties();\n    props.setProperty(\"name\", \"bogus2\");\n    addReplicaNode.setProperties(props);\n    response = addReplicaNode.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    ZkStateReader zkStateReader = getCommonCloudSolrClient().getZkStateReader();\n    zkStateReader.updateClusterState();\n    Slice slice = zkStateReader.getClusterState().getSlicesMap(collectionName).get(\"shard1\");\n\n    Replica rep = null;\n    for (Replica rep1 : slice.getReplicas()) { // Silly compiler\n      if (rep1.get(\"core\").equals(\"bogus2\")) {\n        rep = rep1;\n        break;\n      }\n    }\n    assertNotNull(\"Should have found a replica named 'bogus2'\", rep);\n    assertEquals(\"Replica should have been put on correct core\", nodeName, rep.getNodeName());\n\n    // Shard1 should have 4 replicas\n    assertEquals(\"There should be 4 replicas for shard 1\", 4, slice.getReplicas().size());\n\n    // And let's fail one more time because to insure that the math doesn't do weird stuff it we have more replicas\n    // than simple calcs would indicate.\n    try {\n      addReplica.process(cloudClient);\n      fail(\"Should have thrown an error because the nodes are full\");\n    } catch (HttpSolrClient.RemoteSolrException se) {\n      assertTrue(\"Should have gotten the right error message back\",\n          se.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4efd3fffdd7acd625bb88e455c8097e17f75735","date":1477647201,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#testAddTooManyReplicas().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#testAddTooManyReplicas().mjava","sourceNew":"  @Test\n  public void testAddTooManyReplicas() throws Exception {\n    final String collectionName = \"TooManyReplicasInSeveralFlavors\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n\n    // I have two replicas, one for each shard\n\n    // Curiously, I should be able to add a bunch of replicas if I specify the node, even more than maxShardsPerNode\n    // Just get the first node any way we can.\n    // Get a node to use for the \"node\" parameter.\n    String nodeName = getAllNodeNames(collectionName).get(0);\n\n    // Add a replica using the \"node\" parameter (no \"too many replicas check\")\n    // this node should have 2 replicas on it\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeName)\n        .process(cluster.getSolrClient());\n\n    // Three replicas so far, should be able to create another one \"normally\"\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .process(cluster.getSolrClient());\n\n    // This one should fail though, no \"node\" parameter specified\n    Exception e = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n          .process(cluster.getSolrClient());\n    });\n\n    assertTrue(\"Should have gotten the right error message back\",\n          e.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n\n    // Oddly, we should succeed next just because setting property.name will not check for nodes being \"full up\"\n    // TODO: Isn't this a bug?\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(\"name\", \"bogus2\")\n        .setNode(nodeName)\n        .process(cluster.getSolrClient());\n\n    DocCollection collectionState = getCollectionState(collectionName);\n    Slice slice = collectionState.getSlice(\"shard1\");\n    Replica replica = getRandomReplica(slice, r -> r.getCoreName().equals(\"bogus2\"));\n    assertNotNull(\"Should have found a replica named 'bogus2'\", replica);\n    assertEquals(\"Replica should have been put on correct core\", nodeName, replica.getNodeName());\n\n    // Shard1 should have 4 replicas\n    assertEquals(\"There should be 4 replicas for shard 1\", 4, slice.getReplicas().size());\n\n    // And let's fail one more time because to ensure that the math doesn't do weird stuff it we have more replicas\n    // than simple calcs would indicate.\n    Exception e2 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n          .process(cluster.getSolrClient());\n    });\n\n    assertTrue(\"Should have gotten the right error message back\",\n        e2.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // wait for recoveries to finish, for a clean shutdown - see SOLR-9645\n    waitForState(\"Expected to see all replicas active\", collectionName, (n, c) -> {\n      for (Replica r : c.getReplicas()) {\n        if (r.getState() != Replica.State.ACTIVE)\n          return false;\n      }\n      return true;\n    });\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 1)\n  public void testAddTooManyReplicas() throws Exception {\n    String collectionName = \"TooManyReplicasInSeveralFlavors\";\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n        .setCollectionName(collectionName)\n        .setNumShards(2)\n        .setReplicationFactor(1)\n        .setMaxShardsPerNode(2)\n        .setStateFormat(2);\n\n    CollectionAdminResponse response = create.process(cloudClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    // Now I have the fixed Jetty plus the control instnace, I have two replicas, one for each shard\n\n    // Curiously, I should be able to add a bunch of replicas if I specify the node, even more than maxShardsPerNode\n    // Just get the first node any way we can.\n    // Get a node to use for the \"node\" parameter.\n\n    String nodeName = getAllNodeNames(collectionName).get(0);\n    // Add a replica using the \"node\" parameter (no \"too many replicas check\")\n    // this node should have 2 replicas on it\n    CollectionAdminRequest.AddReplica addReplicaNode = new CollectionAdminRequest.AddReplica()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard1\")\n        .setNode(nodeName);\n    response = addReplicaNode.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    // Three replicas so far, should be able to create another one \"normally\"\n    CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard1\");\n\n    response = addReplica.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    // This one should fail though, no \"node\" parameter specified\n    try {\n      addReplica.process(cloudClient);\n      fail(\"Should have thrown an error because the nodes are full\");\n    } catch (HttpSolrClient.RemoteSolrException se) {\n      assertTrue(\"Should have gotten the right error message back\",\n          se.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n    }\n\n    // Oddly, we should succeed next just because setting property.name will not check for nodes being \"full up\"\n    Properties props = new Properties();\n    props.setProperty(\"name\", \"bogus2\");\n    addReplicaNode.setProperties(props);\n    response = addReplicaNode.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    ZkStateReader zkStateReader = getCommonCloudSolrClient().getZkStateReader();\n    zkStateReader.forceUpdateCollection(collectionName);\n    Slice slice = zkStateReader.getClusterState().getSlicesMap(collectionName).get(\"shard1\");\n\n    Replica rep = null;\n    for (Replica rep1 : slice.getReplicas()) { // Silly compiler\n      if (rep1.get(\"core\").equals(\"bogus2\")) {\n        rep = rep1;\n        break;\n      }\n    }\n    assertNotNull(\"Should have found a replica named 'bogus2'\", rep);\n    assertEquals(\"Replica should have been put on correct core\", nodeName, rep.getNodeName());\n\n    // Shard1 should have 4 replicas\n    assertEquals(\"There should be 4 replicas for shard 1\", 4, slice.getReplicas().size());\n\n    // And let's fail one more time because to insure that the math doesn't do weird stuff it we have more replicas\n    // than simple calcs would indicate.\n    try {\n      addReplica.process(cloudClient);\n      fail(\"Should have thrown an error because the nodes are full\");\n    } catch (HttpSolrClient.RemoteSolrException se) {\n      assertTrue(\"Should have gotten the right error message back\",\n          se.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59dce44d6a0b58c171de1d47ad8c0a75831f94fd","date":1477668573,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#testAddTooManyReplicas().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#testAddTooManyReplicas().mjava","sourceNew":"  @Test\n  public void testAddTooManyReplicas() throws Exception {\n    final String collectionName = \"TooManyReplicasInSeveralFlavors\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n\n    // I have two replicas, one for each shard\n\n    // Curiously, I should be able to add a bunch of replicas if I specify the node, even more than maxShardsPerNode\n    // Just get the first node any way we can.\n    // Get a node to use for the \"node\" parameter.\n    String nodeName = getAllNodeNames(collectionName).get(0);\n\n    // Add a replica using the \"node\" parameter (no \"too many replicas check\")\n    // this node should have 2 replicas on it\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeName)\n        .process(cluster.getSolrClient());\n\n    // Three replicas so far, should be able to create another one \"normally\"\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .process(cluster.getSolrClient());\n\n    // This one should fail though, no \"node\" parameter specified\n    Exception e = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n          .process(cluster.getSolrClient());\n    });\n\n    assertTrue(\"Should have gotten the right error message back\",\n          e.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n\n    // Oddly, we should succeed next just because setting property.name will not check for nodes being \"full up\"\n    // TODO: Isn't this a bug?\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(\"name\", \"bogus2\")\n        .setNode(nodeName)\n        .process(cluster.getSolrClient());\n\n    DocCollection collectionState = getCollectionState(collectionName);\n    Slice slice = collectionState.getSlice(\"shard1\");\n    Replica replica = getRandomReplica(slice, r -> r.getCoreName().equals(\"bogus2\"));\n    assertNotNull(\"Should have found a replica named 'bogus2'\", replica);\n    assertEquals(\"Replica should have been put on correct core\", nodeName, replica.getNodeName());\n\n    // Shard1 should have 4 replicas\n    assertEquals(\"There should be 4 replicas for shard 1\", 4, slice.getReplicas().size());\n\n    // And let's fail one more time because to ensure that the math doesn't do weird stuff it we have more replicas\n    // than simple calcs would indicate.\n    Exception e2 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n          .process(cluster.getSolrClient());\n    });\n\n    assertTrue(\"Should have gotten the right error message back\",\n        e2.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // wait for recoveries to finish, for a clean shutdown - see SOLR-9645\n    waitForState(\"Expected to see all replicas active\", collectionName, (n, c) -> {\n      for (Replica r : c.getReplicas()) {\n        if (r.getState() != Replica.State.ACTIVE)\n          return false;\n      }\n      return true;\n    });\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 1)\n  public void testAddTooManyReplicas() throws Exception {\n    String collectionName = \"TooManyReplicasInSeveralFlavors\";\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n        .setCollectionName(collectionName)\n        .setNumShards(2)\n        .setReplicationFactor(1)\n        .setMaxShardsPerNode(2)\n        .setStateFormat(2);\n\n    CollectionAdminResponse response = create.process(cloudClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    // Now I have the fixed Jetty plus the control instnace, I have two replicas, one for each shard\n\n    // Curiously, I should be able to add a bunch of replicas if I specify the node, even more than maxShardsPerNode\n    // Just get the first node any way we can.\n    // Get a node to use for the \"node\" parameter.\n\n    String nodeName = getAllNodeNames(collectionName).get(0);\n    // Add a replica using the \"node\" parameter (no \"too many replicas check\")\n    // this node should have 2 replicas on it\n    CollectionAdminRequest.AddReplica addReplicaNode = new CollectionAdminRequest.AddReplica()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard1\")\n        .setNode(nodeName);\n    response = addReplicaNode.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    // Three replicas so far, should be able to create another one \"normally\"\n    CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard1\");\n\n    response = addReplica.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    // This one should fail though, no \"node\" parameter specified\n    try {\n      addReplica.process(cloudClient);\n      fail(\"Should have thrown an error because the nodes are full\");\n    } catch (HttpSolrClient.RemoteSolrException se) {\n      assertTrue(\"Should have gotten the right error message back\",\n          se.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n    }\n\n    // Oddly, we should succeed next just because setting property.name will not check for nodes being \"full up\"\n    Properties props = new Properties();\n    props.setProperty(\"name\", \"bogus2\");\n    addReplicaNode.setProperties(props);\n    response = addReplicaNode.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    ZkStateReader zkStateReader = getCommonCloudSolrClient().getZkStateReader();\n    zkStateReader.forceUpdateCollection(collectionName);\n    Slice slice = zkStateReader.getClusterState().getSlicesMap(collectionName).get(\"shard1\");\n\n    Replica rep = null;\n    for (Replica rep1 : slice.getReplicas()) { // Silly compiler\n      if (rep1.get(\"core\").equals(\"bogus2\")) {\n        rep = rep1;\n        break;\n      }\n    }\n    assertNotNull(\"Should have found a replica named 'bogus2'\", rep);\n    assertEquals(\"Replica should have been put on correct core\", nodeName, rep.getNodeName());\n\n    // Shard1 should have 4 replicas\n    assertEquals(\"There should be 4 replicas for shard 1\", 4, slice.getReplicas().size());\n\n    // And let's fail one more time because to insure that the math doesn't do weird stuff it we have more replicas\n    // than simple calcs would indicate.\n    try {\n      addReplica.process(cloudClient);\n      fail(\"Should have thrown an error because the nodes are full\");\n    } catch (HttpSolrClient.RemoteSolrException se) {\n      assertTrue(\"Should have gotten the right error message back\",\n          se.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionTooManyReplicasTest#testAddTooManyReplicas().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#testAddTooManyReplicas().mjava","sourceNew":"  @Test\n  public void testAddTooManyReplicas() throws Exception {\n    final String collectionName = \"TooManyReplicasInSeveralFlavors\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n\n    // I have two replicas, one for each shard\n\n    // Curiously, I should be able to add a bunch of replicas if I specify the node, even more than maxShardsPerNode\n    // Just get the first node any way we can.\n    // Get a node to use for the \"node\" parameter.\n    String nodeName = getAllNodeNames(collectionName).get(0);\n\n    // Add a replica using the \"node\" parameter (no \"too many replicas check\")\n    // this node should have 2 replicas on it\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeName)\n        .process(cluster.getSolrClient());\n\n    // Three replicas so far, should be able to create another one \"normally\"\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .process(cluster.getSolrClient());\n\n    // This one should fail though, no \"node\" parameter specified\n    Exception e = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n          .process(cluster.getSolrClient());\n    });\n\n    assertTrue(\"Should have gotten the right error message back\",\n          e.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n\n    // Oddly, we should succeed next just because setting property.name will not check for nodes being \"full up\"\n    // TODO: Isn't this a bug?\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(\"name\", \"bogus2\")\n        .setNode(nodeName)\n        .process(cluster.getSolrClient());\n\n    DocCollection collectionState = getCollectionState(collectionName);\n    Slice slice = collectionState.getSlice(\"shard1\");\n    Replica replica = getRandomReplica(slice, r -> r.getCoreName().equals(\"bogus2\"));\n    assertNotNull(\"Should have found a replica named 'bogus2'\", replica);\n    assertEquals(\"Replica should have been put on correct core\", nodeName, replica.getNodeName());\n\n    // Shard1 should have 4 replicas\n    assertEquals(\"There should be 4 replicas for shard 1\", 4, slice.getReplicas().size());\n\n    // And let's fail one more time because to ensure that the math doesn't do weird stuff it we have more replicas\n    // than simple calcs would indicate.\n    Exception e2 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n          .process(cluster.getSolrClient());\n    });\n\n    assertTrue(\"Should have gotten the right error message back\",\n        e2.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // wait for recoveries to finish, for a clean shutdown - see SOLR-9645\n    waitForState(\"Expected to see all replicas active\", collectionName, (n, c) -> {\n      for (Replica r : c.getReplicas()) {\n        if (r.getState() != Replica.State.ACTIVE)\n          return false;\n      }\n      return true;\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testAddTooManyReplicas() throws Exception {\n    final String collectionName = \"TooManyReplicasInSeveralFlavors\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n\n    // I have two replicas, one for each shard\n\n    // Curiously, I should be able to add a bunch of replicas if I specify the node, even more than maxShardsPerNode\n    // Just get the first node any way we can.\n    // Get a node to use for the \"node\" parameter.\n    String nodeName = getAllNodeNames(collectionName).get(0);\n\n    // Add a replica using the \"node\" parameter (no \"too many replicas check\")\n    // this node should have 2 replicas on it\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeName)\n        .process(cluster.getSolrClient());\n\n    // Three replicas so far, should be able to create another one \"normally\"\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .process(cluster.getSolrClient());\n\n    // This one should fail though, no \"node\" parameter specified\n    Exception e = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n          .process(cluster.getSolrClient());\n    });\n\n    assertTrue(\"Should have gotten the right error message back\",\n          e.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n\n    // Oddly, we should succeed next just because setting property.name will not check for nodes being \"full up\"\n    // TODO: Isn't this a bug?\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(\"name\", \"bogus2\")\n        .setNode(nodeName)\n        .process(cluster.getSolrClient());\n\n    DocCollection collectionState = getCollectionState(collectionName);\n    Slice slice = collectionState.getSlice(\"shard1\");\n    Replica replica = getRandomReplica(slice, r -> r.getCoreName().equals(\"bogus2\"));\n    assertNotNull(\"Should have found a replica named 'bogus2'\", replica);\n    assertEquals(\"Replica should have been put on correct core\", nodeName, replica.getNodeName());\n\n    // Shard1 should have 4 replicas\n    assertEquals(\"There should be 4 replicas for shard 1\", 4, slice.getReplicas().size());\n\n    // And let's fail one more time because to ensure that the math doesn't do weird stuff it we have more replicas\n    // than simple calcs would indicate.\n    Exception e2 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n          .process(cluster.getSolrClient());\n    });\n\n    assertTrue(\"Should have gotten the right error message back\",\n        e2.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // wait for recoveries to finish, for a clean shutdown - see SOLR-9645\n    waitForState(\"Expected to see all replicas active\", collectionName, (n, c) -> {\n      for (Replica r : c.getReplicas()) {\n        if (r.getState() != Replica.State.ACTIVE)\n          return false;\n      }\n      return true;\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionTooManyReplicasTest#testAddTooManyReplicas().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#testAddTooManyReplicas().mjava","sourceNew":"  @Test\n  public void testAddTooManyReplicas() throws Exception {\n    final String collectionName = \"TooManyReplicasInSeveralFlavors\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n\n    // I have two replicas, one for each shard\n\n    // Curiously, I should be able to add a bunch of replicas if I specify the node, even more than maxShardsPerNode\n    // Just get the first node any way we can.\n    // Get a node to use for the \"node\" parameter.\n    String nodeName = getAllNodeNames(collectionName).get(0);\n\n    // Add a replica using the \"node\" parameter (no \"too many replicas check\")\n    // this node should have 2 replicas on it\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeName)\n        .process(cluster.getSolrClient());\n\n    // Three replicas so far, should be able to create another one \"normally\"\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .process(cluster.getSolrClient());\n\n    // This one should fail though, no \"node\" parameter specified\n    Exception e = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n          .process(cluster.getSolrClient());\n    });\n\n    assertTrue(\"Should have gotten the right error message back\",\n          e.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n\n    // Oddly, we should succeed next just because setting property.name will not check for nodes being \"full up\"\n    // TODO: Isn't this a bug?\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(\"name\", \"bogus2\")\n        .setNode(nodeName)\n        .process(cluster.getSolrClient());\n\n    DocCollection collectionState = getCollectionState(collectionName);\n    Slice slice = collectionState.getSlice(\"shard1\");\n    Replica replica = getRandomReplica(slice, r -> r.getCoreName().equals(\"bogus2\"));\n    assertNotNull(\"Should have found a replica named 'bogus2'\", replica);\n    assertEquals(\"Replica should have been put on correct core\", nodeName, replica.getNodeName());\n\n    // Shard1 should have 4 replicas\n    assertEquals(\"There should be 4 replicas for shard 1\", 4, slice.getReplicas().size());\n\n    // And let's fail one more time because to ensure that the math doesn't do weird stuff it we have more replicas\n    // than simple calcs would indicate.\n    Exception e2 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n          .process(cluster.getSolrClient());\n    });\n\n    assertTrue(\"Should have gotten the right error message back\",\n        e2.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // wait for recoveries to finish, for a clean shutdown - see SOLR-9645\n    waitForState(\"Expected to see all replicas active\", collectionName, (n, c) -> {\n      for (Replica r : c.getReplicas()) {\n        if (r.getState() != Replica.State.ACTIVE)\n          return false;\n      }\n      return true;\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testAddTooManyReplicas() throws Exception {\n    final String collectionName = \"TooManyReplicasInSeveralFlavors\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n\n    // I have two replicas, one for each shard\n\n    // Curiously, I should be able to add a bunch of replicas if I specify the node, even more than maxShardsPerNode\n    // Just get the first node any way we can.\n    // Get a node to use for the \"node\" parameter.\n    String nodeName = getAllNodeNames(collectionName).get(0);\n\n    // Add a replica using the \"node\" parameter (no \"too many replicas check\")\n    // this node should have 2 replicas on it\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeName)\n        .process(cluster.getSolrClient());\n\n    // Three replicas so far, should be able to create another one \"normally\"\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .process(cluster.getSolrClient());\n\n    // This one should fail though, no \"node\" parameter specified\n    Exception e = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n          .process(cluster.getSolrClient());\n    });\n\n    assertTrue(\"Should have gotten the right error message back\",\n          e.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n\n    // Oddly, we should succeed next just because setting property.name will not check for nodes being \"full up\"\n    // TODO: Isn't this a bug?\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(\"name\", \"bogus2\")\n        .setNode(nodeName)\n        .process(cluster.getSolrClient());\n\n    DocCollection collectionState = getCollectionState(collectionName);\n    Slice slice = collectionState.getSlice(\"shard1\");\n    Replica replica = getRandomReplica(slice, r -> r.getCoreName().equals(\"bogus2\"));\n    assertNotNull(\"Should have found a replica named 'bogus2'\", replica);\n    assertEquals(\"Replica should have been put on correct core\", nodeName, replica.getNodeName());\n\n    // Shard1 should have 4 replicas\n    assertEquals(\"There should be 4 replicas for shard 1\", 4, slice.getReplicas().size());\n\n    // And let's fail one more time because to ensure that the math doesn't do weird stuff it we have more replicas\n    // than simple calcs would indicate.\n    Exception e2 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n          .process(cluster.getSolrClient());\n    });\n\n    assertTrue(\"Should have gotten the right error message back\",\n        e2.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // wait for recoveries to finish, for a clean shutdown - see SOLR-9645\n    waitForState(\"Expected to see all replicas active\", collectionName, (n, c) -> {\n      for (Replica r : c.getReplicas()) {\n        if (r.getState() != Replica.State.ACTIVE)\n          return false;\n      }\n      return true;\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a4efd3fffdd7acd625bb88e455c8097e17f75735","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","a4efd3fffdd7acd625bb88e455c8097e17f75735"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["3fd3cdfbce4b551bb8ca4678682a5a891d0890ca"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a4efd3fffdd7acd625bb88e455c8097e17f75735"],"3fd3cdfbce4b551bb8ca4678682a5a891d0890ca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["b94236357aaa22b76c10629851fe4e376e0cea82","59dce44d6a0b58c171de1d47ad8c0a75831f94fd","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":[],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3fd3cdfbce4b551bb8ca4678682a5a891d0890ca"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"3fd3cdfbce4b551bb8ca4678682a5a891d0890ca":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["a4efd3fffdd7acd625bb88e455c8097e17f75735","59dce44d6a0b58c171de1d47ad8c0a75831f94fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["59dce44d6a0b58c171de1d47ad8c0a75831f94fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}