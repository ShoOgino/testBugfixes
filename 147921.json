{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/IndexedDISICacheFactory#getVBPVJumpTable(String,RandomAccessInput,long).mjava","commits":[{"id":"02d47321ea7c7780a0e0cb7a3676d109d9d62542","date":1543843794,"type":0,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/IndexedDISICacheFactory#getVBPVJumpTable(String,RandomAccessInput,long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a cache (jump table) for variable bits per value numerics and returns it.\n   * If the cache has previously been created, the old cache is returned.\n   * @param name the name for the cache, typically the field name. Used as key for later retrieval.\n   * @param slice the long values with varying bits per value.\n   * @param valuesLength the length in bytes of the slice.\n   * @return a jump table for the longs in the given slice or null if the structure is not suitable for caching.\n   */\n  VaryingBPVJumpTable getVBPVJumpTable(String name, RandomAccessInput slice, long valuesLength) throws IOException {\n    VaryingBPVJumpTable jumpTable = vBPVPool.get(name);\n    if (jumpTable == null) {\n      // TODO: Avoid overlapping builds of the same jump table for performance reasons\n      jumpTable = new VaryingBPVJumpTable(slice, name, valuesLength);\n      vBPVPool.put(name, jumpTable);\n    }\n    return jumpTable;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e86b9927b3acb1937be9daf7b71fe0733edc2206","date":1544534047,"type":4,"author":"Toke Eskildsen","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/IndexedDISICacheFactory#getVBPVJumpTable(String,RandomAccessInput,long).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a cache (jump table) for variable bits per value numerics and returns it.\n   * If the cache has previously been created, the old cache is returned.\n   * @param name the name for the cache, typically the field name. Used as key for later retrieval.\n   * @param slice the long values with varying bits per value.\n   * @param valuesLength the length in bytes of the slice.\n   * @return a jump table for the longs in the given slice or null if the structure is not suitable for caching.\n   */\n  VaryingBPVJumpTable getVBPVJumpTable(String name, RandomAccessInput slice, long valuesLength) throws IOException {\n    VaryingBPVJumpTable jumpTable = vBPVPool.get(name);\n    if (jumpTable == null) {\n      // TODO: Avoid overlapping builds of the same jump table for performance reasons\n      jumpTable = new VaryingBPVJumpTable(slice, name, valuesLength);\n      vBPVPool.put(name, jumpTable);\n    }\n    return jumpTable;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd70c9571310639a77f0123aea0db41077d9bb6","date":1544538617,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/IndexedDISICacheFactory#getVBPVJumpTable(String,RandomAccessInput,long).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a cache (jump table) for variable bits per value numerics and returns it.\n   * If the cache has previously been created, the old cache is returned.\n   * @param name the name for the cache, typically the field name. Used as key for later retrieval.\n   * @param slice the long values with varying bits per value.\n   * @param valuesLength the length in bytes of the slice.\n   * @return a jump table for the longs in the given slice or null if the structure is not suitable for caching.\n   */\n  VaryingBPVJumpTable getVBPVJumpTable(String name, RandomAccessInput slice, long valuesLength) throws IOException {\n    VaryingBPVJumpTable jumpTable = vBPVPool.get(name);\n    if (jumpTable == null) {\n      // TODO: Avoid overlapping builds of the same jump table for performance reasons\n      jumpTable = new VaryingBPVJumpTable(slice, name, valuesLength);\n      vBPVPool.put(name, jumpTable);\n    }\n    return jumpTable;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cfd70c9571310639a77f0123aea0db41077d9bb6":["02d47321ea7c7780a0e0cb7a3676d109d9d62542","e86b9927b3acb1937be9daf7b71fe0733edc2206"],"02d47321ea7c7780a0e0cb7a3676d109d9d62542":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfd70c9571310639a77f0123aea0db41077d9bb6"],"e86b9927b3acb1937be9daf7b71fe0733edc2206":["02d47321ea7c7780a0e0cb7a3676d109d9d62542"]},"commit2Childs":{"cfd70c9571310639a77f0123aea0db41077d9bb6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"02d47321ea7c7780a0e0cb7a3676d109d9d62542":["cfd70c9571310639a77f0123aea0db41077d9bb6","e86b9927b3acb1937be9daf7b71fe0733edc2206"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["02d47321ea7c7780a0e0cb7a3676d109d9d62542"],"e86b9927b3acb1937be9daf7b71fe0733edc2206":["cfd70c9571310639a77f0123aea0db41077d9bb6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}