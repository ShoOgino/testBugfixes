{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/NameIntCacheLRU#makeRoomLRU().mjava","commits":[{"id":"5cad50ed6659649a0edef71b8cf56280b0bdadd7","date":1385496862,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/NameIntCacheLRU#makeRoomLRU().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/NameIntCacheLRU#makeRoomLRU().mjava","sourceNew":"  /**\n   * If cache is full remove least recently used entries from cache. Return true\n   * if anything was removed, false otherwise.\n   * \n   * See comment in DirectoryTaxonomyWriter.addToCache(CategoryPath, int) for an\n   * explanation why we clean 2/3rds of the cache, and not just one entry.\n   */ \n  boolean makeRoomLRU() {\n    if (!isCacheFull()) {\n      return false;\n    }\n    int n = cache.size() - (2*maxCacheSize)/3;\n    if (n<=0) {\n      return false;\n    }\n    Iterator<Object> it = cache.keySet().iterator();\n    int i = 0;\n    while (i<n && it.hasNext()) {\n      it.next();\n      it.remove();\n      i++;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * If cache is full remove least recently used entries from cache. Return true\n   * if anything was removed, false otherwise.\n   * \n   * See comment in DirectoryTaxonomyWriter.addToCache(CategoryPath, int) for an\n   * explanation why we clean 2/3rds of the cache, and not just one entry.\n   */ \n  boolean makeRoomLRU() {\n    if (!isCacheFull()) {\n      return false;\n    }\n    int n = cache.size() - (2*maxCacheSize)/3;\n    if (n<=0) {\n      return false;\n    }\n    Iterator<Object> it = cache.keySet().iterator();\n    int i = 0;\n    while (i<n && it.hasNext()) {\n      it.next();\n      it.remove();\n      i++;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/NameIntCacheLRU#makeRoomLRU().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/NameIntCacheLRU#makeRoomLRU().mjava","sourceNew":"  /**\n   * If cache is full remove least recently used entries from cache. Return true\n   * if anything was removed, false otherwise.\n   * \n   * See comment in DirectoryTaxonomyWriter.addToCache(CategoryPath, int) for an\n   * explanation why we clean 2/3rds of the cache, and not just one entry.\n   */ \n  boolean makeRoomLRU() {\n    if (!isCacheFull()) {\n      return false;\n    }\n    int n = cache.size() - (2*maxCacheSize)/3;\n    if (n<=0) {\n      return false;\n    }\n    Iterator<Object> it = cache.keySet().iterator();\n    int i = 0;\n    while (i<n && it.hasNext()) {\n      it.next();\n      it.remove();\n      i++;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * If cache is full remove least recently used entries from cache. Return true\n   * if anything was removed, false otherwise.\n   * \n   * See comment in DirectoryTaxonomyWriter.addToCache(CategoryPath, int) for an\n   * explanation why we clean 2/3rds of the cache, and not just one entry.\n   */ \n  boolean makeRoomLRU() {\n    if (!isCacheFull()) {\n      return false;\n    }\n    int n = cache.size() - (2*maxCacheSize)/3;\n    if (n<=0) {\n      return false;\n    }\n    Iterator<Object> it = cache.keySet().iterator();\n    int i = 0;\n    while (i<n && it.hasNext()) {\n      it.next();\n      it.remove();\n      i++;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ade9d7ae1b1bd9a5106326063f9407397e7168cc","date":1552407573,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/NameIntCacheLRU#makeRoomLRU().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/NameIntCacheLRU#makeRoomLRU().mjava","sourceNew":"  /**\n   * If cache is full remove least recently used entries from cache. Return true\n   * if anything was removed, false otherwise.\n   * \n   * See comment in DirectoryTaxonomyWriter.addToCache(CategoryPath, int) for an\n   * explanation why we clean 1/3rd of the cache, and not just one entry.\n   */ \n  boolean makeRoomLRU() {\n    if (!isCacheFull()) {\n      return false;\n    }\n    int n = cache.size() - (int)((2L*maxCacheSize)/3);\n    if (n<=0) {\n      return false;\n    }\n    Iterator<Object> it = cache.keySet().iterator();\n    int i = 0;\n    while (i<n && it.hasNext()) {\n      it.next();\n      it.remove();\n      i++;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * If cache is full remove least recently used entries from cache. Return true\n   * if anything was removed, false otherwise.\n   * \n   * See comment in DirectoryTaxonomyWriter.addToCache(CategoryPath, int) for an\n   * explanation why we clean 2/3rds of the cache, and not just one entry.\n   */ \n  boolean makeRoomLRU() {\n    if (!isCacheFull()) {\n      return false;\n    }\n    int n = cache.size() - (2*maxCacheSize)/3;\n    if (n<=0) {\n      return false;\n    }\n    Iterator<Object> it = cache.keySet().iterator();\n    int i = 0;\n    while (i<n && it.hasNext()) {\n      it.next();\n      it.remove();\n      i++;\n    }\n    return true;\n  }\n\n","bugFix":["89f15687f60bd49cd3d9de427e85c17fd9397d61","b52ea8b7f80d4a0600efc9765dc896387008ebd4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cad50ed6659649a0edef71b8cf56280b0bdadd7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5cad50ed6659649a0edef71b8cf56280b0bdadd7"],"ade9d7ae1b1bd9a5106326063f9407397e7168cc":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ade9d7ae1b1bd9a5106326063f9407397e7168cc"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5cad50ed6659649a0edef71b8cf56280b0bdadd7","3cc728b07df73b197e6d940d27f9b08b63918f13"],"5cad50ed6659649a0edef71b8cf56280b0bdadd7":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["ade9d7ae1b1bd9a5106326063f9407397e7168cc"],"ade9d7ae1b1bd9a5106326063f9407397e7168cc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}