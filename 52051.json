{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#testRandomDepthHierarchy().mjava","commits":[{"id":"5238b7e551c27d6d8b882878a8f8b114bd79f1b5","date":1421397215,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#testRandomDepthHierarchy().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRandomDepthHierarchy() throws Exception {\n    final String parentType = \"parent\";\n    \n    int parentsNum = atLeast(5);\n    int depth = atLeast(3);\n    \n    ContextHolder holder = new ContextHolder();\n    \n    String config = createRandomizedConfig(depth, parentType, parentsNum, holder);\n    runFullImport(config);\n    \n    assertTrue(\"Update request processor processAdd was not called\", TestUpdateRequestProcessor.processAddCalled);\n    assertTrue(\"Update request processor processCommit was not callled\", TestUpdateRequestProcessor.processCommitCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    assertQ(req(\"type_s:\" + parentType), \"//*[@numFound='\" + parentsNum + \"']\");\n    assertQ(req(\"-type_s:\"+ parentType), \"//*[@numFound='\" + (holder.counter - parentsNum) + \"']\");\n    \n    // let's check BlockJoin\n    Hierarchy randomHierarchy = holder.hierarchies.get(random().nextInt(holder.hierarchies.size()));\n       \n    Query deepestQuery = createBlockJoinQuery(randomHierarchy);\n    assertSearch(deepestQuery, FIELD_ID, (String) randomHierarchy.elementData.get(FIELD_ID));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2f007bfc4c7f42ce6afc45811f7c7fc8b936203","date":1421506313,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#testRandomDepthHierarchy().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#testRandomDepthHierarchy().mjava","sourceNew":"  @Test\n  public void testRandomDepthHierarchy() throws Exception {\n    final String parentType = \"parent\";\n    \n    // Be aware that hierarchies grows exponentially, thus \n    // numbers bigger than 6 may lead to significant memory usage\n    // and cause OOME\n    int parentsNum = 2 + random().nextInt(3);\n    int depth = 2 + random().nextInt(3);\n    \n    ContextHolder holder = new ContextHolder();\n    \n    String config = createRandomizedConfig(depth, parentType, parentsNum, holder);\n    runFullImport(config);\n    \n    assertTrue(\"Update request processor processAdd was not called\", TestUpdateRequestProcessor.processAddCalled);\n    assertTrue(\"Update request processor processCommit was not callled\", TestUpdateRequestProcessor.processCommitCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    assertQ(req(\"type_s:\" + parentType), \"//*[@numFound='\" + parentsNum + \"']\");\n    assertQ(req(\"-type_s:\"+ parentType), \"//*[@numFound='\" + (holder.counter - parentsNum) + \"']\");\n    \n    // let's check BlockJoin\n    Hierarchy randomHierarchy = holder.hierarchies.get(random().nextInt(holder.hierarchies.size()));\n       \n    Query deepestQuery = createBlockJoinQuery(randomHierarchy);\n    assertSearch(deepestQuery, FIELD_ID, (String) randomHierarchy.elementData.get(FIELD_ID));\n  }\n\n","sourceOld":"  @Test\n  public void testRandomDepthHierarchy() throws Exception {\n    final String parentType = \"parent\";\n    \n    int parentsNum = atLeast(5);\n    int depth = atLeast(3);\n    \n    ContextHolder holder = new ContextHolder();\n    \n    String config = createRandomizedConfig(depth, parentType, parentsNum, holder);\n    runFullImport(config);\n    \n    assertTrue(\"Update request processor processAdd was not called\", TestUpdateRequestProcessor.processAddCalled);\n    assertTrue(\"Update request processor processCommit was not callled\", TestUpdateRequestProcessor.processCommitCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    assertQ(req(\"type_s:\" + parentType), \"//*[@numFound='\" + parentsNum + \"']\");\n    assertQ(req(\"-type_s:\"+ parentType), \"//*[@numFound='\" + (holder.counter - parentsNum) + \"']\");\n    \n    // let's check BlockJoin\n    Hierarchy randomHierarchy = holder.hierarchies.get(random().nextInt(holder.hierarchies.size()));\n       \n    Query deepestQuery = createBlockJoinQuery(randomHierarchy);\n    assertSearch(deepestQuery, FIELD_ID, (String) randomHierarchy.elementData.get(FIELD_ID));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#testRandomDepthHierarchy().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testRandomDepthHierarchy() throws Exception {\n    final String parentType = \"parent\";\n    \n    // Be aware that hierarchies grows exponentially, thus \n    // numbers bigger than 6 may lead to significant memory usage\n    // and cause OOME\n    int parentsNum = 2 + random().nextInt(3);\n    int depth = 2 + random().nextInt(3);\n    \n    ContextHolder holder = new ContextHolder();\n    \n    String config = createRandomizedConfig(depth, parentType, parentsNum, holder);\n    runFullImport(config);\n    \n    assertTrue(\"Update request processor processAdd was not called\", TestUpdateRequestProcessor.processAddCalled);\n    assertTrue(\"Update request processor processCommit was not callled\", TestUpdateRequestProcessor.processCommitCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    assertQ(req(\"type_s:\" + parentType), \"//*[@numFound='\" + parentsNum + \"']\");\n    assertQ(req(\"-type_s:\"+ parentType), \"//*[@numFound='\" + (holder.counter - parentsNum) + \"']\");\n    \n    // let's check BlockJoin\n    Hierarchy randomHierarchy = holder.hierarchies.get(random().nextInt(holder.hierarchies.size()));\n       \n    Query deepestQuery = createBlockJoinQuery(randomHierarchy);\n    assertSearch(deepestQuery, FIELD_ID, (String) randomHierarchy.elementData.get(FIELD_ID));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["e2f007bfc4c7f42ce6afc45811f7c7fc8b936203"],"5238b7e551c27d6d8b882878a8f8b114bd79f1b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e2f007bfc4c7f42ce6afc45811f7c7fc8b936203":["5238b7e551c27d6d8b882878a8f8b114bd79f1b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5238b7e551c27d6d8b882878a8f8b114bd79f1b5":["e2f007bfc4c7f42ce6afc45811f7c7fc8b936203"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5238b7e551c27d6d8b882878a8f8b114bd79f1b5"],"e2f007bfc4c7f42ce6afc45811f7c7fc8b936203":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}