{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilterFactory#testBogusFormats().mjava","commits":[{"id":"febd00ace8921b742cf22d7679207562fa752b1f","date":1379617597,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilterFactory#testBogusFormats().mjava","pathOld":"/dev/null","sourceNew":"  /** Test that bogus arguments result in exception */\n  public void testBogusFormats() throws Exception {\n    try {\n      tokenFilterFactory(\"Stop\", \n                         \"words\", \"stop-snowball.txt\",\n                         \"format\", \"bogus\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      String msg = expected.getMessage();\n      assertTrue(msg, msg.contains(\"Unknown\"));\n      assertTrue(msg, msg.contains(\"format\"));\n      assertTrue(msg, msg.contains(\"bogus\"));\n    }\n    try {\n      tokenFilterFactory(\"Stop\", \n                         // implicit default words file\n                         \"format\", \"bogus\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      String msg = expected.getMessage();\n      assertTrue(msg, msg.contains(\"can not be specified\"));\n      assertTrue(msg, msg.contains(\"format\"));\n      assertTrue(msg, msg.contains(\"bogus\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilterFactory#testBogusFormats().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilterFactory#testBogusFormats().mjava","sourceNew":"  /** Test that bogus arguments result in exception */\n  public void testBogusFormats() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"Stop\", \n                         \"words\", \"stop-snowball.txt\",\n                         \"format\", \"bogus\");\n    });\n    String msg = expected.getMessage();\n    assertTrue(msg, msg.contains(\"Unknown\"));\n    assertTrue(msg, msg.contains(\"format\"));\n    assertTrue(msg, msg.contains(\"bogus\"));\n\n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"Stop\", \n                         // implicit default words file\n                         \"format\", \"bogus\");\n      fail();\n    });\n    msg = expected.getMessage();\n    assertTrue(msg, msg.contains(\"can not be specified\"));\n    assertTrue(msg, msg.contains(\"format\"));\n    assertTrue(msg, msg.contains(\"bogus\"));\n  }\n\n","sourceOld":"  /** Test that bogus arguments result in exception */\n  public void testBogusFormats() throws Exception {\n    try {\n      tokenFilterFactory(\"Stop\", \n                         \"words\", \"stop-snowball.txt\",\n                         \"format\", \"bogus\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      String msg = expected.getMessage();\n      assertTrue(msg, msg.contains(\"Unknown\"));\n      assertTrue(msg, msg.contains(\"format\"));\n      assertTrue(msg, msg.contains(\"bogus\"));\n    }\n    try {\n      tokenFilterFactory(\"Stop\", \n                         // implicit default words file\n                         \"format\", \"bogus\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      String msg = expected.getMessage();\n      assertTrue(msg, msg.contains(\"can not be specified\"));\n      assertTrue(msg, msg.contains(\"format\"));\n      assertTrue(msg, msg.contains(\"bogus\"));\n    }\n  }\n\n","bugFix":["febd00ace8921b742cf22d7679207562fa752b1f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"febd00ace8921b742cf22d7679207562fa752b1f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["febd00ace8921b742cf22d7679207562fa752b1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"febd00ace8921b742cf22d7679207562fa752b1f":["05fe562aa248790944d43cdd478f512572835ba0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["febd00ace8921b742cf22d7679207562fa752b1f"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}