{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/analyzing/AnalyzingQueryParser#getPrefixQuery(String,String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/analyzing/AnalyzingQueryParser#getPrefixQuery(String,String).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/analyzing/AnalyzingQueryParser#getPrefixQuery(String,String).mjava","sourceNew":"  /**\n   * Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   * <p>\n   * Depending on analyzer and settings, a prefix term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param  field   Name of the field query will use.\n   * @param  termStr Term token to use for building term for the query\n   *                 (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @throws ParseException\n   */\n  @Override\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source;\n    List<String> tlist = new ArrayList<String>();\n    try {\n      source = getAnalyzer().tokenStream(field, new StringReader(termStr));\n      source.reset();\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    }\n    CharTermAttribute termAtt = source.addAttribute(CharTermAttribute.class);\n    while (true) {\n      try {\n        if (!source.incrementToken()) break;\n      } catch (IOException e) {\n        break;\n      }\n      tlist.add(termAtt.toString());\n    }\n\n    try {\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (tlist.size() == 1) {\n      return super.getPrefixQuery(field, tlist.get(0));\n    } else {\n      /* this means that the analyzer used either added or consumed\n       * (common for a stemmer) tokens, and we can't build a PrefixQuery */\n      throw new ParseException(\"Cannot build PrefixQuery with analyzer \"\n          + getAnalyzer().getClass()\n          + (tlist.size() > 1 ? \" - token(s) added\" : \" - token consumed\"));\n    }\n  }\n\n","sourceOld":"  /**\n   * Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   * <p>\n   * Depending on analyzer and settings, a prefix term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param  field   Name of the field query will use.\n   * @param  termStr Term token to use for building term for the query\n   *                 (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @throws ParseException\n   */\n  @Override\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source;\n    List<String> tlist = new ArrayList<String>();\n    try {\n      source = getAnalyzer().tokenStream(field, new StringReader(termStr));\n      source.reset();\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    }\n    CharTermAttribute termAtt = source.addAttribute(CharTermAttribute.class);\n    while (true) {\n      try {\n        if (!source.incrementToken()) break;\n      } catch (IOException e) {\n        break;\n      }\n      tlist.add(termAtt.toString());\n    }\n\n    try {\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (tlist.size() == 1) {\n      return super.getPrefixQuery(field, tlist.get(0));\n    } else {\n      /* this means that the analyzer used either added or consumed\n       * (common for a stemmer) tokens, and we can't build a PrefixQuery */\n      throw new ParseException(\"Cannot build PrefixQuery with analyzer \"\n          + getAnalyzer().getClass()\n          + (tlist.size() > 1 ? \" - token(s) added\" : \" - token consumed\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/analyzing/AnalyzingQueryParser#getPrefixQuery(String,String).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/analyzing/AnalyzingQueryParser#getPrefixQuery(String,String).mjava","sourceNew":"  /**\n   * Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   * <p>\n   * Depending on analyzer and settings, a prefix term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param  field   Name of the field query will use.\n   * @param  termStr Term token to use for building term for the query\n   *                 (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   */\n  @Override\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source;\n    List<String> tlist = new ArrayList<String>();\n    try {\n      source = getAnalyzer().tokenStream(field, new StringReader(termStr));\n      source.reset();\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    }\n    CharTermAttribute termAtt = source.addAttribute(CharTermAttribute.class);\n    while (true) {\n      try {\n        if (!source.incrementToken()) break;\n      } catch (IOException e) {\n        break;\n      }\n      tlist.add(termAtt.toString());\n    }\n\n    try {\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (tlist.size() == 1) {\n      return super.getPrefixQuery(field, tlist.get(0));\n    } else {\n      /* this means that the analyzer used either added or consumed\n       * (common for a stemmer) tokens, and we can't build a PrefixQuery */\n      throw new ParseException(\"Cannot build PrefixQuery with analyzer \"\n          + getAnalyzer().getClass()\n          + (tlist.size() > 1 ? \" - token(s) added\" : \" - token consumed\"));\n    }\n  }\n\n","sourceOld":"  /**\n   * Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   * <p>\n   * Depending on analyzer and settings, a prefix term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param  field   Name of the field query will use.\n   * @param  termStr Term token to use for building term for the query\n   *                 (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @throws ParseException\n   */\n  @Override\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source;\n    List<String> tlist = new ArrayList<String>();\n    try {\n      source = getAnalyzer().tokenStream(field, new StringReader(termStr));\n      source.reset();\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    }\n    CharTermAttribute termAtt = source.addAttribute(CharTermAttribute.class);\n    while (true) {\n      try {\n        if (!source.incrementToken()) break;\n      } catch (IOException e) {\n        break;\n      }\n      tlist.add(termAtt.toString());\n    }\n\n    try {\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (tlist.size() == 1) {\n      return super.getPrefixQuery(field, tlist.get(0));\n    } else {\n      /* this means that the analyzer used either added or consumed\n       * (common for a stemmer) tokens, and we can't build a PrefixQuery */\n      throw new ParseException(\"Cannot build PrefixQuery with analyzer \"\n          + getAnalyzer().getClass()\n          + (tlist.size() > 1 ? \" - token(s) added\" : \" - token consumed\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"046829b17e246624c179b94d5a20cb53fa945e87","date":1367880720,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/analyzing/AnalyzingQueryParser#getPrefixQuery(String,String).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/analyzing/AnalyzingQueryParser#getPrefixQuery(String,String).mjava","sourceNew":"  /**\n   * Called when parser parses an input term\n   * that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   * <p>\n   * Depending on analyzer and settings, a prefix term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param  field   Name of the field query will use.\n   * @param  termStr Term to use for building term for the query\n   *                 (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   */\n  @Override\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n    String analyzed = analyzeSingleChunk(field, termStr, termStr);\n    return super.getPrefixQuery(field, analyzed);\n  }\n\n","sourceOld":"  /**\n   * Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   * <p>\n   * Depending on analyzer and settings, a prefix term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param  field   Name of the field query will use.\n   * @param  termStr Term token to use for building term for the query\n   *                 (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   */\n  @Override\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source;\n    List<String> tlist = new ArrayList<String>();\n    try {\n      source = getAnalyzer().tokenStream(field, new StringReader(termStr));\n      source.reset();\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    }\n    CharTermAttribute termAtt = source.addAttribute(CharTermAttribute.class);\n    while (true) {\n      try {\n        if (!source.incrementToken()) break;\n      } catch (IOException e) {\n        break;\n      }\n      tlist.add(termAtt.toString());\n    }\n\n    try {\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (tlist.size() == 1) {\n      return super.getPrefixQuery(field, tlist.get(0));\n    } else {\n      /* this means that the analyzer used either added or consumed\n       * (common for a stemmer) tokens, and we can't build a PrefixQuery */\n      throw new ParseException(\"Cannot build PrefixQuery with analyzer \"\n          + getAnalyzer().getClass()\n          + (tlist.size() > 1 ? \" - token(s) added\" : \" - token consumed\"));\n    }\n  }\n\n","bugFix":["f11899016a0460a7ea2e4b008d002e1e75c7d867","00746ad002a54281629e3b6f3eb39833a33f093e","874880417e0b2612f777ecd0afe39e0d90486752","a7347509fad0711ac30cb15a746e9a3830a38ebd","1c042095bccf8e65c79da13541b035aba62f1b32","9b5756469957918cac40a831acec9cf01c8c2bb3","e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4","69e043c521d4e8db770cc140c63f5ef51f03426a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea4107f60b9f95623c16025c9c247412ff809092","date":1468333987,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/analyzing/AnalyzingQueryParser#getPrefixQuery(String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Called when parser parses an input term\n   * that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   * <p>\n   * Depending on analyzer and settings, a prefix term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param  field   Name of the field query will use.\n   * @param  termStr Term to use for building term for the query\n   *                 (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   */\n  @Override\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n    String analyzed = analyzeSingleChunk(field, termStr, termStr);\n    return super.getPrefixQuery(field, analyzed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/analyzing/AnalyzingQueryParser#getPrefixQuery(String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Called when parser parses an input term\n   * that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   * <p>\n   * Depending on analyzer and settings, a prefix term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param  field   Name of the field query will use.\n   * @param  termStr Term to use for building term for the query\n   *                 (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   */\n  @Override\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n    String analyzed = analyzeSingleChunk(field, termStr, termStr);\n    return super.getPrefixQuery(field, analyzed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ea4107f60b9f95623c16025c9c247412ff809092":["046829b17e246624c179b94d5a20cb53fa945e87"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["046829b17e246624c179b94d5a20cb53fa945e87","ea4107f60b9f95623c16025c9c247412ff809092"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea4107f60b9f95623c16025c9c247412ff809092"],"046829b17e246624c179b94d5a20cb53fa945e87":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["046829b17e246624c179b94d5a20cb53fa945e87"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ea4107f60b9f95623c16025c9c247412ff809092":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"046829b17e246624c179b94d5a20cb53fa945e87":["ea4107f60b9f95623c16025c9c247412ff809092","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}