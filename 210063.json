{"path":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDuelNumericRangeQuery().mjava","commits":[{"id":"9fb0efe75e5c6021561f115dfe334b74786364ba","date":1434366074,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDuelNumericRangeQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDuelNumericRangeQuery().mjava","sourceNew":"  public void testDuelNumericRangeQuery() throws IOException {\n    final int iters = atLeast(10);\n      for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = random().nextInt(2);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          doc.add(new LongField(\"idx\", value, Store.NO));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(NumericRangeQuery.newLongRange(\"idx\", 0L, 10L, true, true));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final Long min = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final Long max = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final boolean minInclusive = random().nextBoolean();\n        final boolean maxInclusive = random().nextBoolean();\n        final Query q1 = NumericRangeQuery.newLongRange(\"idx\", min, max, minInclusive, maxInclusive);\n        final Query q2 = DocValuesRangeQuery.newLongRange(\"dv\", min, max, minInclusive, maxInclusive);\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDuelNumericRangeQuery() throws IOException {\n    final int iters = atLeast(10);\n      for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = random().nextInt(2);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          doc.add(new LongField(\"idx\", value, Store.NO));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(NumericRangeQuery.newLongRange(\"idx\", 0L, 10L, true, true));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final Long min = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final Long max = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final boolean minInclusive = random().nextBoolean();\n        final boolean maxInclusive = random().nextBoolean();\n        final Query q1 = NumericRangeQuery.newLongRange(\"idx\", min, max, minInclusive, maxInclusive);\n        final Query q2 = DocValuesRangeQuery.newLongRange(\"dv\", min, max, minInclusive, maxInclusive);\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDuelNumericRangeQuery().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDuelNumericRangeQuery().mjava","sourceNew":"  public void testDuelNumericRangeQuery() throws IOException {\n    final int iters = atLeast(10);\n      for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = random().nextInt(2);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          doc.add(new DimensionalLongField(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(DimensionalRangeQuery.new1DLongRange(\"idx\", 0L, true, 10L, true));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final Long min = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final Long max = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final boolean minInclusive = random().nextBoolean();\n        final boolean maxInclusive = random().nextBoolean();\n        final Query q1 = DimensionalRangeQuery.new1DLongRange(\"idx\", min, minInclusive, max, maxInclusive);\n        final Query q2 = DocValuesRangeQuery.newLongRange(\"dv\", min, max, minInclusive, maxInclusive);\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDuelNumericRangeQuery() throws IOException {\n    final int iters = atLeast(10);\n      for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = random().nextInt(2);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          doc.add(new LongField(\"idx\", value, Store.NO));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(NumericRangeQuery.newLongRange(\"idx\", 0L, 10L, true, true));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final Long min = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final Long max = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final boolean minInclusive = random().nextBoolean();\n        final boolean maxInclusive = random().nextBoolean();\n        final Query q1 = NumericRangeQuery.newLongRange(\"idx\", min, max, minInclusive, maxInclusive);\n        final Query q2 = DocValuesRangeQuery.newLongRange(\"dv\", min, max, minInclusive, maxInclusive);\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDuelNumericRangeQuery().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDuelNumericRangeQuery().mjava","sourceNew":"  public void testDuelNumericRangeQuery() throws IOException {\n    final int iters = atLeast(10);\n      for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = random().nextInt(2);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(PointRangeQuery.new1DLongRange(\"idx\", 0L, true, 10L, true));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final Long min = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final Long max = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final boolean minInclusive = random().nextBoolean();\n        final boolean maxInclusive = random().nextBoolean();\n        final Query q1 = PointRangeQuery.new1DLongRange(\"idx\", min, minInclusive, max, maxInclusive);\n        final Query q2 = DocValuesRangeQuery.newLongRange(\"dv\", min, max, minInclusive, maxInclusive);\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDuelNumericRangeQuery() throws IOException {\n    final int iters = atLeast(10);\n      for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = random().nextInt(2);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          doc.add(new DimensionalLongField(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(DimensionalRangeQuery.new1DLongRange(\"idx\", 0L, true, 10L, true));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final Long min = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final Long max = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final boolean minInclusive = random().nextBoolean();\n        final boolean maxInclusive = random().nextBoolean();\n        final Query q1 = DimensionalRangeQuery.new1DLongRange(\"idx\", min, minInclusive, max, maxInclusive);\n        final Query q2 = DocValuesRangeQuery.newLongRange(\"dv\", min, max, minInclusive, maxInclusive);\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"86cab68ee900a31d093b114182b488ea8e85c59d","date":1456171815,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDuelNumericRangeQuery().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDuelNumericRangeQuery().mjava","sourceNew":"  public void testDuelNumericRangeQuery() throws IOException {\n    final int iters = atLeast(10);\n      for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = random().nextInt(2);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(PointRangeQuery.newLongRange(\"idx\", 0L, true, 10L, true));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final Long min = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final Long max = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final boolean minInclusive = random().nextBoolean();\n        final boolean maxInclusive = random().nextBoolean();\n        final Query q1 = PointRangeQuery.newLongRange(\"idx\", min, minInclusive, max, maxInclusive);\n        final Query q2 = DocValuesRangeQuery.newLongRange(\"dv\", min, max, minInclusive, maxInclusive);\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDuelNumericRangeQuery() throws IOException {\n    final int iters = atLeast(10);\n      for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = random().nextInt(2);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(PointRangeQuery.new1DLongRange(\"idx\", 0L, true, 10L, true));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final Long min = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final Long max = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final boolean minInclusive = random().nextBoolean();\n        final boolean maxInclusive = random().nextBoolean();\n        final Query q1 = PointRangeQuery.new1DLongRange(\"idx\", min, minInclusive, max, maxInclusive);\n        final Query q2 = DocValuesRangeQuery.newLongRange(\"dv\", min, max, minInclusive, maxInclusive);\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDuelNumericRangeQuery().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDuelNumericRangeQuery().mjava","sourceNew":"  public void testDuelNumericRangeQuery() throws IOException {\n    final int iters = atLeast(10);\n      for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = random().nextInt(2);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(PointRangeQuery.newLongRange(\"idx\", 0L, true, 10L, true));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final Long min = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final Long max = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final boolean minInclusive = random().nextBoolean();\n        final boolean maxInclusive = random().nextBoolean();\n        final Query q1 = PointRangeQuery.newLongRange(\"idx\", min, minInclusive, max, maxInclusive);\n        final Query q2 = DocValuesRangeQuery.newLongRange(\"dv\", min, max, minInclusive, maxInclusive);\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDuelNumericRangeQuery() throws IOException {\n    final int iters = atLeast(10);\n      for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = random().nextInt(2);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(PointRangeQuery.new1DLongRange(\"idx\", 0L, true, 10L, true));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final Long min = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final Long max = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final boolean minInclusive = random().nextBoolean();\n        final boolean maxInclusive = random().nextBoolean();\n        final Query q1 = PointRangeQuery.new1DLongRange(\"idx\", min, minInclusive, max, maxInclusive);\n        final Query q2 = DocValuesRangeQuery.newLongRange(\"dv\", min, max, minInclusive, maxInclusive);\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3104a6ba367dfb690806b227c5ef17c42c6107b","date":1456265035,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDuelNumericRangeQuery().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDuelNumericRangeQuery().mjava","sourceNew":"  public void testDuelNumericRangeQuery() throws IOException {\n    final int iters = atLeast(10);\n      for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = random().nextInt(2);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, true, 10L, true));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final Long min = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final Long max = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final boolean minInclusive = random().nextBoolean();\n        final boolean maxInclusive = random().nextBoolean();\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, minInclusive, max, maxInclusive);\n        final Query q2 = DocValuesRangeQuery.newLongRange(\"dv\", min, max, minInclusive, maxInclusive);\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDuelNumericRangeQuery() throws IOException {\n    final int iters = atLeast(10);\n      for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = random().nextInt(2);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(PointRangeQuery.newLongRange(\"idx\", 0L, true, 10L, true));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final Long min = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final Long max = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final boolean minInclusive = random().nextBoolean();\n        final boolean maxInclusive = random().nextBoolean();\n        final Query q1 = PointRangeQuery.newLongRange(\"idx\", min, minInclusive, max, maxInclusive);\n        final Query q2 = DocValuesRangeQuery.newLongRange(\"dv\", min, max, minInclusive, maxInclusive);\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["1800b996d8677670482a071dcb7a48b08c423ace"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","date":1456265720,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDuelNumericRangeQuery().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDuelNumericRangeQuery().mjava","sourceNew":"  public void testDuelNumericRangeQuery() throws IOException {\n    final int iters = atLeast(10);\n      for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = random().nextInt(2);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, true, 10L, true));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final Long min = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final Long max = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final boolean minInclusive = random().nextBoolean();\n        final boolean maxInclusive = random().nextBoolean();\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, minInclusive, max, maxInclusive);\n        final Query q2 = DocValuesRangeQuery.newLongRange(\"dv\", min, max, minInclusive, maxInclusive);\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDuelNumericRangeQuery() throws IOException {\n    final int iters = atLeast(10);\n      for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = random().nextInt(2);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(PointRangeQuery.newLongRange(\"idx\", 0L, true, 10L, true));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final Long min = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final Long max = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final boolean minInclusive = random().nextBoolean();\n        final boolean maxInclusive = random().nextBoolean();\n        final Query q1 = PointRangeQuery.newLongRange(\"idx\", min, minInclusive, max, maxInclusive);\n        final Query q2 = DocValuesRangeQuery.newLongRange(\"dv\", min, max, minInclusive, maxInclusive);\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDuelNumericRangeQuery().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDuelNumericRangeQuery().mjava","sourceNew":"  public void testDuelNumericRangeQuery() throws IOException {\n    final int iters = atLeast(10);\n      for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = random().nextInt(2);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, true, 10L, true));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final Long min = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final Long max = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final boolean minInclusive = random().nextBoolean();\n        final boolean maxInclusive = random().nextBoolean();\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, minInclusive, max, maxInclusive);\n        final Query q2 = DocValuesRangeQuery.newLongRange(\"dv\", min, max, minInclusive, maxInclusive);\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDuelNumericRangeQuery() throws IOException {\n    final int iters = atLeast(10);\n      for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = random().nextInt(2);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(PointRangeQuery.newLongRange(\"idx\", 0L, true, 10L, true));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final Long min = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final Long max = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final boolean minInclusive = random().nextBoolean();\n        final boolean maxInclusive = random().nextBoolean();\n        final Query q1 = PointRangeQuery.newLongRange(\"idx\", min, minInclusive, max, maxInclusive);\n        final Query q2 = DocValuesRangeQuery.newLongRange(\"dv\", min, max, minInclusive, maxInclusive);\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","date":1456306182,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDuelNumericRangeQuery().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDuelNumericRangeQuery().mjava","sourceNew":"  public void testDuelNumericRangeQuery() throws IOException {\n    final int iters = atLeast(10);\n      for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = random().nextInt(2);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, true, 10L, true));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final Long min = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final Long max = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final boolean minInclusive = random().nextBoolean();\n        final boolean maxInclusive = random().nextBoolean();\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, minInclusive, max, maxInclusive);\n        final Query q2 = DocValuesRangeQuery.newLongRange(\"dv\", min, max, minInclusive, maxInclusive);\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDuelNumericRangeQuery() throws IOException {\n    final int iters = atLeast(10);\n      for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = random().nextInt(2);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(PointRangeQuery.newLongRange(\"idx\", 0L, true, 10L, true));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final Long min = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final Long max = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final boolean minInclusive = random().nextBoolean();\n        final boolean maxInclusive = random().nextBoolean();\n        final Query q1 = PointRangeQuery.newLongRange(\"idx\", min, minInclusive, max, maxInclusive);\n        final Query q2 = DocValuesRangeQuery.newLongRange(\"dv\", min, max, minInclusive, maxInclusive);\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f","date":1456936072,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDuelNumericRangeQuery().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDuelNumericRangeQuery().mjava","sourceNew":"  public void testDuelNumericRangeQuery() throws IOException {\n    final int iters = atLeast(10);\n      for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = random().nextInt(2);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, true, 10L, true));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader, false);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final Long min = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final Long max = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final boolean minInclusive = random().nextBoolean();\n        final boolean maxInclusive = random().nextBoolean();\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, minInclusive, max, maxInclusive);\n        final Query q2 = DocValuesRangeQuery.newLongRange(\"dv\", min, max, minInclusive, maxInclusive);\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDuelNumericRangeQuery() throws IOException {\n    final int iters = atLeast(10);\n      for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = random().nextInt(2);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, true, 10L, true));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final Long min = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final Long max = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final boolean minInclusive = random().nextBoolean();\n        final boolean maxInclusive = random().nextBoolean();\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, minInclusive, max, maxInclusive);\n        final Query q2 = DocValuesRangeQuery.newLongRange(\"dv\", min, max, minInclusive, maxInclusive);\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1800b996d8677670482a071dcb7a48b08c423ace","date":1456955558,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDuelNumericRangeQuery().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDuelNumericRangeQuery().mjava","sourceNew":"  public void testDuelNumericRangeQuery() throws IOException {\n    final int iters = atLeast(10);\n      for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = random().nextInt(2);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, 10L));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader, false);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final Long min = TestUtil.nextLong(random(), -100, 1000);\n        final Long max = TestUtil.nextLong(random(), -100, 1000);\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, max);\n        final Query q2 = DocValuesRangeQuery.newLongRange(\"dv\", min, max, true, true);\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDuelNumericRangeQuery() throws IOException {\n    final int iters = atLeast(10);\n      for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = random().nextInt(2);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, true, 10L, true));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader, false);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final Long min = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final Long max = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final boolean minInclusive = random().nextBoolean();\n        final boolean maxInclusive = random().nextBoolean();\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, minInclusive, max, maxInclusive);\n        final Query q2 = DocValuesRangeQuery.newLongRange(\"dv\", min, max, minInclusive, maxInclusive);\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":["d3104a6ba367dfb690806b227c5ef17c42c6107b","484e80062d7ab2729bc82f0311d6a97dd913961a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c422e924212367b334b4938f1fd3e44438e88c40","date":1456962933,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDuelNumericRangeQuery().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDuelNumericRangeQuery().mjava","sourceNew":"  public void testDuelNumericRangeQuery() throws IOException {\n    final int iters = atLeast(10);\n      for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = random().nextInt(2);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, 10L));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader, false);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final Long min = TestUtil.nextLong(random(), -100, 1000);\n        final Long max = TestUtil.nextLong(random(), -100, 1000);\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, max);\n        final Query q2 = DocValuesRangeQuery.newLongRange(\"dv\", min, max, true, true);\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDuelNumericRangeQuery() throws IOException {\n    final int iters = atLeast(10);\n      for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = random().nextInt(2);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, true, 10L, true));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader, false);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final Long min = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final Long max = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final boolean minInclusive = random().nextBoolean();\n        final boolean maxInclusive = random().nextBoolean();\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, minInclusive, max, maxInclusive);\n        final Query q2 = DocValuesRangeQuery.newLongRange(\"dv\", min, max, minInclusive, maxInclusive);\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDuelNumericRangeQuery().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDuelNumericRangeQuery().mjava","sourceNew":"  public void testDuelNumericRangeQuery() throws IOException {\n    final int iters = atLeast(10);\n      for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = random().nextInt(2);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, 10L));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader, false);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final Long min = TestUtil.nextLong(random(), -100, 1000);\n        final Long max = TestUtil.nextLong(random(), -100, 1000);\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, max);\n        final Query q2 = DocValuesRangeQuery.newLongRange(\"dv\", min, max, true, true);\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDuelNumericRangeQuery() throws IOException {\n    final int iters = atLeast(10);\n      for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = random().nextInt(2);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, true, 10L, true));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final Long min = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final Long max = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n        final boolean minInclusive = random().nextBoolean();\n        final boolean maxInclusive = random().nextBoolean();\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, minInclusive, max, maxInclusive);\n        final Query q2 = DocValuesRangeQuery.newLongRange(\"dv\", min, max, minInclusive, maxInclusive);\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a412a7808b2815566cb17117ebe6638112b9a31","date":1484916151,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesQueries#doTestDuelPointRangeNumericRangeQuery(boolean,int).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDuelNumericRangeQuery().mjava","sourceNew":"  private void doTestDuelPointRangeNumericRangeQuery(boolean sortedNumeric, int maxValuesPerDoc) throws IOException {\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          if (sortedNumeric) {\n            doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          } else {\n            doc.add(new NumericDocValuesField(\"dv\", value));\n          }\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, 10L));\n      }\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader, false);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final long min = random().nextBoolean() ? Long.MIN_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        final long max = random().nextBoolean() ? Long.MAX_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, max);\n        final Query q2;\n        if (sortedNumeric) {\n          q2 = SortedNumericDocValuesField.newRangeQuery(\"dv\", min, max);\n        } else {\n          q2 = NumericDocValuesField.newRangeQuery(\"dv\", min, max);\n        }\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDuelNumericRangeQuery() throws IOException {\n    final int iters = atLeast(10);\n      for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = random().nextInt(2);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, 10L));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader, false);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final Long min = TestUtil.nextLong(random(), -100, 1000);\n        final Long max = TestUtil.nextLong(random(), -100, 1000);\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, max);\n        final Query q2 = DocValuesRangeQuery.newLongRange(\"dv\", min, max, true, true);\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["b22152b9e1a55aed5f1510ecb2312a0be7056400","b22152b9e1a55aed5f1510ecb2312a0be7056400"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a412a7808b2815566cb17117ebe6638112b9a31","date":1484916151,"type":6,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesQueries#doTestDuelPointRangeSortedRangeQuery(boolean,int).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDuelNumericRangeQuery().mjava","sourceNew":"  private void doTestDuelPointRangeSortedRangeQuery(boolean sortedSet, int maxValuesPerDoc) throws IOException {\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          byte[] encoded = new byte[Long.BYTES];\n          LongPoint.encodeDimension(value, encoded, 0);\n          if (sortedSet) {\n            doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(encoded)));\n          } else {\n            doc.add(new SortedDocValuesField(\"dv\", new BytesRef(encoded)));\n          }\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, 10L));\n      }\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader, false);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        long min = random().nextBoolean() ? Long.MIN_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        long max = random().nextBoolean() ? Long.MAX_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        byte[] encodedMin = new byte[Long.BYTES];\n        byte[] encodedMax = new byte[Long.BYTES];\n        LongPoint.encodeDimension(min, encodedMin, 0);\n        LongPoint.encodeDimension(max, encodedMax, 0);\n        boolean includeMin = true;\n        boolean includeMax = true;\n        if (random().nextBoolean()) {\n          includeMin = false;\n          min++;\n        }\n        if (random().nextBoolean()) {\n          includeMax = false;\n          max--;\n        }\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, max);\n        final Query q2;\n        if (sortedSet) {\n          q2 = SortedSetDocValuesField.newRangeQuery(\"dv\",\n              min == Long.MIN_VALUE && random().nextBoolean() ? null : new BytesRef(encodedMin),\n              max == Long.MAX_VALUE && random().nextBoolean() ? null : new BytesRef(encodedMax),\n              includeMin, includeMax);\n        } else {\n          q2 = SortedDocValuesField.newRangeQuery(\"dv\",\n              min == Long.MIN_VALUE && random().nextBoolean() ? null : new BytesRef(encodedMin),\n              max == Long.MAX_VALUE && random().nextBoolean() ? null : new BytesRef(encodedMax),\n              includeMin, includeMax);\n        }\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDuelNumericRangeQuery() throws IOException {\n    final int iters = atLeast(10);\n      for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = random().nextInt(2);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, 10L));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader, false);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final Long min = TestUtil.nextLong(random(), -100, 1000);\n        final Long max = TestUtil.nextLong(random(), -100, 1000);\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, max);\n        final Query q2 = DocValuesRangeQuery.newLongRange(\"dv\", min, max, true, true);\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["b22152b9e1a55aed5f1510ecb2312a0be7056400","b22152b9e1a55aed5f1510ecb2312a0be7056400"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesQueries#doTestDuelPointRangeNumericRangeQuery(boolean,int).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDuelNumericRangeQuery().mjava","sourceNew":"  private void doTestDuelPointRangeNumericRangeQuery(boolean sortedNumeric, int maxValuesPerDoc) throws IOException {\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          if (sortedNumeric) {\n            doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          } else {\n            doc.add(new NumericDocValuesField(\"dv\", value));\n          }\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, 10L));\n      }\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader, false);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final long min = random().nextBoolean() ? Long.MIN_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        final long max = random().nextBoolean() ? Long.MAX_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, max);\n        final Query q2;\n        if (sortedNumeric) {\n          q2 = SortedNumericDocValuesField.newRangeQuery(\"dv\", min, max);\n        } else {\n          q2 = NumericDocValuesField.newRangeQuery(\"dv\", min, max);\n        }\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDuelNumericRangeQuery() throws IOException {\n    final int iters = atLeast(10);\n      for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = random().nextInt(2);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, 10L));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader, false);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final Long min = TestUtil.nextLong(random(), -100, 1000);\n        final Long max = TestUtil.nextLong(random(), -100, 1000);\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, max);\n        final Query q2 = DocValuesRangeQuery.newLongRange(\"dv\", min, max, true, true);\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":6,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesQueries#doTestDuelPointRangeSortedRangeQuery(boolean,int).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testDuelNumericRangeQuery().mjava","sourceNew":"  private void doTestDuelPointRangeSortedRangeQuery(boolean sortedSet, int maxValuesPerDoc) throws IOException {\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          byte[] encoded = new byte[Long.BYTES];\n          LongPoint.encodeDimension(value, encoded, 0);\n          if (sortedSet) {\n            doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(encoded)));\n          } else {\n            doc.add(new SortedDocValuesField(\"dv\", new BytesRef(encoded)));\n          }\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, 10L));\n      }\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader, false);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        long min = random().nextBoolean() ? Long.MIN_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        long max = random().nextBoolean() ? Long.MAX_VALUE : TestUtil.nextLong(random(), -100, 10000);\n        byte[] encodedMin = new byte[Long.BYTES];\n        byte[] encodedMax = new byte[Long.BYTES];\n        LongPoint.encodeDimension(min, encodedMin, 0);\n        LongPoint.encodeDimension(max, encodedMax, 0);\n        boolean includeMin = true;\n        boolean includeMax = true;\n        if (random().nextBoolean()) {\n          includeMin = false;\n          min++;\n        }\n        if (random().nextBoolean()) {\n          includeMax = false;\n          max--;\n        }\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, max);\n        final Query q2;\n        if (sortedSet) {\n          q2 = SortedSetDocValuesField.newRangeQuery(\"dv\",\n              min == Long.MIN_VALUE && random().nextBoolean() ? null : new BytesRef(encodedMin),\n              max == Long.MAX_VALUE && random().nextBoolean() ? null : new BytesRef(encodedMax),\n              includeMin, includeMax);\n        } else {\n          q2 = SortedDocValuesField.newRangeQuery(\"dv\",\n              min == Long.MIN_VALUE && random().nextBoolean() ? null : new BytesRef(encodedMin),\n              max == Long.MAX_VALUE && random().nextBoolean() ? null : new BytesRef(encodedMax),\n              includeMin, includeMax);\n        }\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDuelNumericRangeQuery() throws IOException {\n    final int iters = atLeast(10);\n      for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final int numValues = random().nextInt(2);\n        for (int j = 0; j < numValues; ++j) {\n          final long value = TestUtil.nextLong(random(), -100, 10000);\n          doc.add(new SortedNumericDocValuesField(\"dv\", value));\n          doc.add(new LongPoint(\"idx\", value));\n        }\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(LongPoint.newRangeQuery(\"idx\", 0L, 10L));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader, false);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final Long min = TestUtil.nextLong(random(), -100, 1000);\n        final Long max = TestUtil.nextLong(random(), -100, 1000);\n        final Query q1 = LongPoint.newRangeQuery(\"idx\", min, max);\n        final Query q2 = DocValuesRangeQuery.newLongRange(\"dv\", min, max, true, true);\n        assertSameMatches(searcher, q1, q2, false);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["770342641f7b505eaa8dccdc666158bff2419109"],"419a8f52c6635419beb951255cacbbb281044c57":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","86cab68ee900a31d093b114182b488ea8e85c59d"],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["419a8f52c6635419beb951255cacbbb281044c57","a5296efc4b319f5647b606629c093a94b23692c6"],"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"770342641f7b505eaa8dccdc666158bff2419109":["9fb0efe75e5c6021561f115dfe334b74786364ba"],"c422e924212367b334b4938f1fd3e44438e88c40":["adc9dc8ef0ce617b940a039fd12f79e8b098cc7f","1800b996d8677670482a071dcb7a48b08c423ace"],"1800b996d8677670482a071dcb7a48b08c423ace":["adc9dc8ef0ce617b940a039fd12f79e8b098cc7f"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","5a412a7808b2815566cb17117ebe6638112b9a31"],"d3104a6ba367dfb690806b227c5ef17c42c6107b":["419a8f52c6635419beb951255cacbbb281044c57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5":["419a8f52c6635419beb951255cacbbb281044c57","d3104a6ba367dfb690806b227c5ef17c42c6107b"],"9fb0efe75e5c6021561f115dfe334b74786364ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a412a7808b2815566cb17117ebe6638112b9a31":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a5296efc4b319f5647b606629c093a94b23692c6":["419a8f52c6635419beb951255cacbbb281044c57","d3104a6ba367dfb690806b227c5ef17c42c6107b"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","c422e924212367b334b4938f1fd3e44438e88c40"],"86cab68ee900a31d093b114182b488ea8e85c59d":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a412a7808b2815566cb17117ebe6638112b9a31"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["419a8f52c6635419beb951255cacbbb281044c57","86cab68ee900a31d093b114182b488ea8e85c59d"],"419a8f52c6635419beb951255cacbbb281044c57":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","d3104a6ba367dfb690806b227c5ef17c42c6107b","7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","a5296efc4b319f5647b606629c093a94b23692c6"],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["adc9dc8ef0ce617b940a039fd12f79e8b098cc7f","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f":["c422e924212367b334b4938f1fd3e44438e88c40","1800b996d8677670482a071dcb7a48b08c423ace"],"770342641f7b505eaa8dccdc666158bff2419109":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"c422e924212367b334b4938f1fd3e44438e88c40":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1800b996d8677670482a071dcb7a48b08c423ace":["c422e924212367b334b4938f1fd3e44438e88c40"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"d3104a6ba367dfb690806b227c5ef17c42c6107b":["7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","a5296efc4b319f5647b606629c093a94b23692c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fb0efe75e5c6021561f115dfe334b74786364ba"],"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5":[],"9fb0efe75e5c6021561f115dfe334b74786364ba":["770342641f7b505eaa8dccdc666158bff2419109"],"a5296efc4b319f5647b606629c093a94b23692c6":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","5a412a7808b2815566cb17117ebe6638112b9a31"],"5a412a7808b2815566cb17117ebe6638112b9a31":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"86cab68ee900a31d093b114182b488ea8e85c59d":["419a8f52c6635419beb951255cacbbb281044c57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}