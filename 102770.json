{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/Lucene43HyphenationCompoundWordTokenFilter#decompose().mjava","commits":[{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/Lucene43HyphenationCompoundWordTokenFilter#decompose().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void decompose() {\n    // get the hyphenation points\n    Hyphenation hyphens = hyphenator.hyphenate(termAtt.buffer(), 0, termAtt.length(), 1, 1);\n    // No hyphen points found -> exit\n    if (hyphens == null) {\n      return;\n    }\n\n    final int[] hyp = hyphens.getHyphenationPoints();\n\n    for (int i = 0; i < hyp.length; ++i) {\n      int remaining = hyp.length - i;\n      int start = hyp[i];\n      CompoundToken longestMatchToken = null;\n      for (int j = 1; j < remaining; j++) {\n        int partLength = hyp[i + j] - start;\n\n        // if the part is longer than maxSubwordSize we\n        // are done with this round\n        if (partLength > this.maxSubwordSize) {\n          break;\n        }\n\n        // we only put subwords to the token stream\n        // that are longer than minPartSize\n        if (partLength < this.minSubwordSize) {\n          // BOGUS/BROKEN/FUNKY/WACKO: somehow we have negative 'parts' according to the \n          // calculation above, and we rely upon minSubwordSize being >=0 to filter them out...\n          continue;\n        }\n\n        // check the dictionary\n        if (dictionary == null || dictionary.contains(termAtt.buffer(), start, partLength)) {\n          if (this.onlyLongestMatch) {\n            if (longestMatchToken != null) {\n              if (longestMatchToken.txt.length() < partLength) {\n                longestMatchToken = new CompoundToken(start, partLength);\n              }\n            } else {\n              longestMatchToken = new CompoundToken(start, partLength);\n            }\n          } else {\n            tokens.add(new CompoundToken(start, partLength));\n          }\n        } else if (dictionary.contains(termAtt.buffer(), start, partLength - 1)) {\n          // check the dictionary again with a word that is one character\n          // shorter\n          // to avoid problems with genitive 's characters and other binding\n          // characters\n          if (this.onlyLongestMatch) {\n            if (longestMatchToken != null) {\n              if (longestMatchToken.txt.length() < partLength - 1) {\n                longestMatchToken = new CompoundToken(start, partLength - 1);\n              }\n            } else {\n              longestMatchToken = new CompoundToken(start, partLength - 1);\n            }\n          } else {\n            tokens.add(new CompoundToken(start, partLength - 1));\n          }\n        }\n      }\n      if (this.onlyLongestMatch && longestMatchToken!=null) {\n        tokens.add(longestMatchToken);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/Lucene43HyphenationCompoundWordTokenFilter#decompose().mjava","sourceNew":null,"sourceOld":"  @Override\n  protected void decompose() {\n    // get the hyphenation points\n    Hyphenation hyphens = hyphenator.hyphenate(termAtt.buffer(), 0, termAtt.length(), 1, 1);\n    // No hyphen points found -> exit\n    if (hyphens == null) {\n      return;\n    }\n\n    final int[] hyp = hyphens.getHyphenationPoints();\n\n    for (int i = 0; i < hyp.length; ++i) {\n      int remaining = hyp.length - i;\n      int start = hyp[i];\n      CompoundToken longestMatchToken = null;\n      for (int j = 1; j < remaining; j++) {\n        int partLength = hyp[i + j] - start;\n\n        // if the part is longer than maxSubwordSize we\n        // are done with this round\n        if (partLength > this.maxSubwordSize) {\n          break;\n        }\n\n        // we only put subwords to the token stream\n        // that are longer than minPartSize\n        if (partLength < this.minSubwordSize) {\n          // BOGUS/BROKEN/FUNKY/WACKO: somehow we have negative 'parts' according to the \n          // calculation above, and we rely upon minSubwordSize being >=0 to filter them out...\n          continue;\n        }\n\n        // check the dictionary\n        if (dictionary == null || dictionary.contains(termAtt.buffer(), start, partLength)) {\n          if (this.onlyLongestMatch) {\n            if (longestMatchToken != null) {\n              if (longestMatchToken.txt.length() < partLength) {\n                longestMatchToken = new CompoundToken(start, partLength);\n              }\n            } else {\n              longestMatchToken = new CompoundToken(start, partLength);\n            }\n          } else {\n            tokens.add(new CompoundToken(start, partLength));\n          }\n        } else if (dictionary.contains(termAtt.buffer(), start, partLength - 1)) {\n          // check the dictionary again with a word that is one character\n          // shorter\n          // to avoid problems with genitive 's characters and other binding\n          // characters\n          if (this.onlyLongestMatch) {\n            if (longestMatchToken != null) {\n              if (longestMatchToken.txt.length() < partLength - 1) {\n                longestMatchToken = new CompoundToken(start, partLength - 1);\n              }\n            } else {\n              longestMatchToken = new CompoundToken(start, partLength - 1);\n            }\n          } else {\n            tokens.add(new CompoundToken(start, partLength - 1));\n          }\n        }\n      }\n      if (this.onlyLongestMatch && longestMatchToken!=null) {\n        tokens.add(longestMatchToken);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"379db3ad24c4f0214f30a122265a6d6be003a99d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71387d8cb6923eb831b17a8b734608ba2e21c653":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"379db3ad24c4f0214f30a122265a6d6be003a99d":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}