{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath#distance(DistanceStyle,double,double,double).mjava","commits":[{"id":"760628478e121972168791a2afa6af915192c4a6","date":1459842108,"type":1,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath#distance(DistanceStyle,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPath#distance(DistanceStyle,double,double,double).mjava","sourceNew":"  @Override\n  protected double distance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    // Algorithm:\n    // (1) If the point is within any of the segments along the path, return that value.\n    // (2) If the point is within any of the segment end circles along the path, return that value.\n    double currentDistance = 0.0;\n    for (PathSegment segment : segments) {\n      double distance = segment.pathDistance(planetModel, distanceStyle, x,y,z);\n      if (distance != Double.MAX_VALUE)\n        return currentDistance + distance;\n      currentDistance += segment.fullPathDistance(distanceStyle);\n    }\n\n    int segmentIndex = 0;\n    currentDistance = 0.0;\n    for (SegmentEndpoint endpoint : endPoints) {\n      double distance = endpoint.pathDistance(distanceStyle, x, y, z);\n      if (distance != Double.MAX_VALUE)\n        return currentDistance + distance;\n      if (segmentIndex < segments.size())\n        currentDistance += segments.get(segmentIndex++).fullPathDistance(distanceStyle);\n    }\n\n    return Double.MAX_VALUE;\n  }\n\n","sourceOld":"  @Override\n  protected double distance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    // Algorithm:\n    // (1) If the point is within any of the segments along the path, return that value.\n    // (2) If the point is within any of the segment end circles along the path, return that value.\n    double currentDistance = 0.0;\n    for (PathSegment segment : segments) {\n      double distance = segment.pathDistance(planetModel, distanceStyle, x,y,z);\n      if (distance != Double.MAX_VALUE)\n        return currentDistance + distance;\n      currentDistance += segment.fullPathDistance(distanceStyle);\n    }\n\n    int segmentIndex = 0;\n    currentDistance = 0.0;\n    for (SegmentEndpoint endpoint : endPoints) {\n      double distance = endpoint.pathDistance(distanceStyle, x, y, z);\n      if (distance != Double.MAX_VALUE)\n        return currentDistance + distance;\n      if (segmentIndex < segments.size())\n        currentDistance += segments.get(segmentIndex++).fullPathDistance(distanceStyle);\n    }\n\n    return Double.MAX_VALUE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09af2c9610ce53a4b25fd99344299b40318a4a1a","date":1459876565,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath#distance(DistanceStyle,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPath#distance(DistanceStyle,double,double,double).mjava","sourceNew":"  @Override\n  protected double distance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    // Algorithm:\n    // (1) If the point is within any of the segments along the path, return that value.\n    // (2) If the point is within any of the segment end circles along the path, return that value.\n    double currentDistance = 0.0;\n    for (PathSegment segment : segments) {\n      double distance = segment.pathDistance(planetModel, distanceStyle, x,y,z);\n      if (distance != Double.MAX_VALUE)\n        return currentDistance + distance;\n      currentDistance += segment.fullPathDistance(distanceStyle);\n    }\n\n    int segmentIndex = 0;\n    currentDistance = 0.0;\n    for (SegmentEndpoint endpoint : endPoints) {\n      double distance = endpoint.pathDistance(distanceStyle, x, y, z);\n      if (distance != Double.MAX_VALUE)\n        return currentDistance + distance;\n      if (segmentIndex < segments.size())\n        currentDistance += segments.get(segmentIndex++).fullPathDistance(distanceStyle);\n    }\n\n    return Double.MAX_VALUE;\n  }\n\n","sourceOld":"  @Override\n  protected double distance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    // Algorithm:\n    // (1) If the point is within any of the segments along the path, return that value.\n    // (2) If the point is within any of the segment end circles along the path, return that value.\n    double currentDistance = 0.0;\n    for (PathSegment segment : segments) {\n      double distance = segment.pathDistance(planetModel, distanceStyle, x,y,z);\n      if (distance != Double.MAX_VALUE)\n        return currentDistance + distance;\n      currentDistance += segment.fullPathDistance(distanceStyle);\n    }\n\n    int segmentIndex = 0;\n    currentDistance = 0.0;\n    for (SegmentEndpoint endpoint : endPoints) {\n      double distance = endpoint.pathDistance(distanceStyle, x, y, z);\n      if (distance != Double.MAX_VALUE)\n        return currentDistance + distance;\n      if (segmentIndex < segments.size())\n        currentDistance += segments.get(segmentIndex++).fullPathDistance(distanceStyle);\n    }\n\n    return Double.MAX_VALUE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae0a2a645db6ae8e4aca176aefd05f400689d2f4","date":1463569628,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath#distance(DistanceStyle,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath#distance(DistanceStyle,double,double,double).mjava","sourceNew":"  @Override\n  protected double distance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    // Algorithm:\n    // (1) If the point is within any of the segments along the path, return that value.\n    // (2) If the point is within any of the segment end circles along the path, return that value.\n    double currentDistance = 0.0;\n    for (PathSegment segment : segments) {\n      double distance = segment.pathDistance(planetModel, distanceStyle, x,y,z);\n      if (distance != Double.POSITIVE_INFINITY)\n        return currentDistance + distance;\n      currentDistance += segment.fullPathDistance(distanceStyle);\n    }\n\n    int segmentIndex = 0;\n    currentDistance = 0.0;\n    for (SegmentEndpoint endpoint : endPoints) {\n      double distance = endpoint.pathDistance(distanceStyle, x, y, z);\n      if (distance != Double.POSITIVE_INFINITY)\n        return currentDistance + distance;\n      if (segmentIndex < segments.size())\n        currentDistance += segments.get(segmentIndex++).fullPathDistance(distanceStyle);\n    }\n\n    return Double.POSITIVE_INFINITY;\n  }\n\n","sourceOld":"  @Override\n  protected double distance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    // Algorithm:\n    // (1) If the point is within any of the segments along the path, return that value.\n    // (2) If the point is within any of the segment end circles along the path, return that value.\n    double currentDistance = 0.0;\n    for (PathSegment segment : segments) {\n      double distance = segment.pathDistance(planetModel, distanceStyle, x,y,z);\n      if (distance != Double.MAX_VALUE)\n        return currentDistance + distance;\n      currentDistance += segment.fullPathDistance(distanceStyle);\n    }\n\n    int segmentIndex = 0;\n    currentDistance = 0.0;\n    for (SegmentEndpoint endpoint : endPoints) {\n      double distance = endpoint.pathDistance(distanceStyle, x, y, z);\n      if (distance != Double.MAX_VALUE)\n        return currentDistance + distance;\n      if (segmentIndex < segments.size())\n        currentDistance += segments.get(segmentIndex++).fullPathDistance(distanceStyle);\n    }\n\n    return Double.MAX_VALUE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath#distance(DistanceStyle,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath#distance(DistanceStyle,double,double,double).mjava","sourceNew":"  @Override\n  protected double distance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    // Algorithm:\n    // (1) If the point is within any of the segments along the path, return that value.\n    // (2) If the point is within any of the segment end circles along the path, return that value.\n    double currentDistance = 0.0;\n    for (PathSegment segment : segments) {\n      double distance = segment.pathDistance(planetModel, distanceStyle, x,y,z);\n      if (distance != Double.POSITIVE_INFINITY)\n        return currentDistance + distance;\n      currentDistance += segment.fullPathDistance(distanceStyle);\n    }\n\n    int segmentIndex = 0;\n    currentDistance = 0.0;\n    for (SegmentEndpoint endpoint : endPoints) {\n      double distance = endpoint.pathDistance(distanceStyle, x, y, z);\n      if (distance != Double.POSITIVE_INFINITY)\n        return currentDistance + distance;\n      if (segmentIndex < segments.size())\n        currentDistance += segments.get(segmentIndex++).fullPathDistance(distanceStyle);\n    }\n\n    return Double.POSITIVE_INFINITY;\n  }\n\n","sourceOld":"  @Override\n  protected double distance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    // Algorithm:\n    // (1) If the point is within any of the segments along the path, return that value.\n    // (2) If the point is within any of the segment end circles along the path, return that value.\n    double currentDistance = 0.0;\n    for (PathSegment segment : segments) {\n      double distance = segment.pathDistance(planetModel, distanceStyle, x,y,z);\n      if (distance != Double.MAX_VALUE)\n        return currentDistance + distance;\n      currentDistance += segment.fullPathDistance(distanceStyle);\n    }\n\n    int segmentIndex = 0;\n    currentDistance = 0.0;\n    for (SegmentEndpoint endpoint : endPoints) {\n      double distance = endpoint.pathDistance(distanceStyle, x, y, z);\n      if (distance != Double.MAX_VALUE)\n        return currentDistance + distance;\n      if (segmentIndex < segments.size())\n        currentDistance += segments.get(segmentIndex++).fullPathDistance(distanceStyle);\n    }\n\n    return Double.MAX_VALUE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath#distance(DistanceStyle,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath#distance(DistanceStyle,double,double,double).mjava","sourceNew":"  @Override\n  protected double distance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    // Algorithm:\n    // (1) If the point is within any of the segments along the path, return that value.\n    // (2) If the point is within any of the segment end circles along the path, return that value.\n    double currentDistance = 0.0;\n    for (PathSegment segment : segments) {\n      double distance = segment.pathDistance(planetModel, distanceStyle, x,y,z);\n      if (distance != Double.POSITIVE_INFINITY)\n        return currentDistance + distance;\n      currentDistance += segment.fullPathDistance(distanceStyle);\n    }\n\n    int segmentIndex = 0;\n    currentDistance = 0.0;\n    for (SegmentEndpoint endpoint : endPoints) {\n      double distance = endpoint.pathDistance(distanceStyle, x, y, z);\n      if (distance != Double.POSITIVE_INFINITY)\n        return currentDistance + distance;\n      if (segmentIndex < segments.size())\n        currentDistance += segments.get(segmentIndex++).fullPathDistance(distanceStyle);\n    }\n\n    return Double.POSITIVE_INFINITY;\n  }\n\n","sourceOld":"  @Override\n  protected double distance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    // Algorithm:\n    // (1) If the point is within any of the segments along the path, return that value.\n    // (2) If the point is within any of the segment end circles along the path, return that value.\n    double currentDistance = 0.0;\n    for (PathSegment segment : segments) {\n      double distance = segment.pathDistance(planetModel, distanceStyle, x,y,z);\n      if (distance != Double.MAX_VALUE)\n        return currentDistance + distance;\n      currentDistance += segment.fullPathDistance(distanceStyle);\n    }\n\n    int segmentIndex = 0;\n    currentDistance = 0.0;\n    for (SegmentEndpoint endpoint : endPoints) {\n      double distance = endpoint.pathDistance(distanceStyle, x, y, z);\n      if (distance != Double.MAX_VALUE)\n        return currentDistance + distance;\n      if (segmentIndex < segments.size())\n        currentDistance += segments.get(segmentIndex++).fullPathDistance(distanceStyle);\n    }\n\n    return Double.MAX_VALUE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfeb87b48135d7ec81a3c6568883a9b3645ddfa6","date":1503899393,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath#distance(DistanceStyle,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath#distance(DistanceStyle,double,double,double).mjava","sourceNew":"  @Override\n  protected double distance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    // Algorithm:\n    // (1) If the point is within any of the segments along the path, return that value.\n    // (2) If the point is within any of the segment end circles along the path, return that value.\n    double currentDistance = 0.0;\n    for (PathSegment segment : segments) {\n      double distance = segment.pathDistance(planetModel, distanceStyle, x,y,z);\n      if (distance != Double.POSITIVE_INFINITY)\n        return distanceStyle.aggregateDistances(currentDistance, distance);\n      currentDistance = distanceStyle.aggregateDistances(currentDistance, segment.fullPathDistance(distanceStyle));\n    }\n\n    int segmentIndex = 0;\n    currentDistance = 0.0;\n    for (SegmentEndpoint endpoint : endPoints) {\n      double distance = endpoint.pathDistance(distanceStyle, x, y, z);\n      if (distance != Double.POSITIVE_INFINITY)\n        return distanceStyle.aggregateDistances(currentDistance, distance);\n      if (segmentIndex < segments.size())\n        currentDistance = distanceStyle.aggregateDistances(currentDistance, segments.get(segmentIndex++).fullPathDistance(distanceStyle));\n    }\n\n    return Double.POSITIVE_INFINITY;\n  }\n\n","sourceOld":"  @Override\n  protected double distance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    // Algorithm:\n    // (1) If the point is within any of the segments along the path, return that value.\n    // (2) If the point is within any of the segment end circles along the path, return that value.\n    double currentDistance = 0.0;\n    for (PathSegment segment : segments) {\n      double distance = segment.pathDistance(planetModel, distanceStyle, x,y,z);\n      if (distance != Double.POSITIVE_INFINITY)\n        return currentDistance + distance;\n      currentDistance += segment.fullPathDistance(distanceStyle);\n    }\n\n    int segmentIndex = 0;\n    currentDistance = 0.0;\n    for (SegmentEndpoint endpoint : endPoints) {\n      double distance = endpoint.pathDistance(distanceStyle, x, y, z);\n      if (distance != Double.POSITIVE_INFINITY)\n        return currentDistance + distance;\n      if (segmentIndex < segments.size())\n        currentDistance += segments.get(segmentIndex++).fullPathDistance(distanceStyle);\n    }\n\n    return Double.POSITIVE_INFINITY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4226cfcbb0a738a11eee87a3417724e78eddc599","date":1503983771,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath#distance(DistanceStyle,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath#distance(DistanceStyle,double,double,double).mjava","sourceNew":"  @Override\n  protected double distance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    // Algorithm:\n    // (1) If the point is within any of the segments along the path, return that value.\n    // (2) If the point is within any of the segment end circles along the path, return that value.\n    double currentDistance = 0.0;\n    for (PathSegment segment : segments) {\n      double distance = segment.pathDistance(planetModel, distanceStyle, x,y,z);\n      if (distance != Double.POSITIVE_INFINITY)\n        return distanceStyle.fromAggregationForm(distanceStyle.aggregateDistances(currentDistance, distance));\n      currentDistance = distanceStyle.aggregateDistances(currentDistance, segment.fullPathDistance(distanceStyle));\n    }\n\n    int segmentIndex = 0;\n    currentDistance = 0.0;\n    for (SegmentEndpoint endpoint : endPoints) {\n      double distance = endpoint.pathDistance(distanceStyle, x, y, z);\n      if (distance != Double.POSITIVE_INFINITY)\n        return distanceStyle.fromAggregationForm(distanceStyle.aggregateDistances(currentDistance, distance));\n      if (segmentIndex < segments.size())\n        currentDistance = distanceStyle.aggregateDistances(currentDistance, segments.get(segmentIndex++).fullPathDistance(distanceStyle));\n    }\n\n    return Double.POSITIVE_INFINITY;\n  }\n\n","sourceOld":"  @Override\n  protected double distance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    // Algorithm:\n    // (1) If the point is within any of the segments along the path, return that value.\n    // (2) If the point is within any of the segment end circles along the path, return that value.\n    double currentDistance = 0.0;\n    for (PathSegment segment : segments) {\n      double distance = segment.pathDistance(planetModel, distanceStyle, x,y,z);\n      if (distance != Double.POSITIVE_INFINITY)\n        return distanceStyle.aggregateDistances(currentDistance, distance);\n      currentDistance = distanceStyle.aggregateDistances(currentDistance, segment.fullPathDistance(distanceStyle));\n    }\n\n    int segmentIndex = 0;\n    currentDistance = 0.0;\n    for (SegmentEndpoint endpoint : endPoints) {\n      double distance = endpoint.pathDistance(distanceStyle, x, y, z);\n      if (distance != Double.POSITIVE_INFINITY)\n        return distanceStyle.aggregateDistances(currentDistance, distance);\n      if (segmentIndex < segments.size())\n        currentDistance = distanceStyle.aggregateDistances(currentDistance, segments.get(segmentIndex++).fullPathDistance(distanceStyle));\n    }\n\n    return Double.POSITIVE_INFINITY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath#distance(DistanceStyle,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath#distance(DistanceStyle,double,double,double).mjava","sourceNew":"  @Override\n  protected double distance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    // Algorithm:\n    // (1) If the point is within any of the segments along the path, return that value.\n    // (2) If the point is within any of the segment end circles along the path, return that value.\n    double currentDistance = 0.0;\n    for (PathSegment segment : segments) {\n      double distance = segment.pathDistance(planetModel, distanceStyle, x,y,z);\n      if (distance != Double.POSITIVE_INFINITY)\n        return distanceStyle.fromAggregationForm(distanceStyle.aggregateDistances(currentDistance, distance));\n      currentDistance = distanceStyle.aggregateDistances(currentDistance, segment.fullPathDistance(distanceStyle));\n    }\n\n    int segmentIndex = 0;\n    currentDistance = 0.0;\n    for (SegmentEndpoint endpoint : endPoints) {\n      double distance = endpoint.pathDistance(distanceStyle, x, y, z);\n      if (distance != Double.POSITIVE_INFINITY)\n        return distanceStyle.fromAggregationForm(distanceStyle.aggregateDistances(currentDistance, distance));\n      if (segmentIndex < segments.size())\n        currentDistance = distanceStyle.aggregateDistances(currentDistance, segments.get(segmentIndex++).fullPathDistance(distanceStyle));\n    }\n\n    return Double.POSITIVE_INFINITY;\n  }\n\n","sourceOld":"  @Override\n  protected double distance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    // Algorithm:\n    // (1) If the point is within any of the segments along the path, return that value.\n    // (2) If the point is within any of the segment end circles along the path, return that value.\n    double currentDistance = 0.0;\n    for (PathSegment segment : segments) {\n      double distance = segment.pathDistance(planetModel, distanceStyle, x,y,z);\n      if (distance != Double.POSITIVE_INFINITY)\n        return currentDistance + distance;\n      currentDistance += segment.fullPathDistance(distanceStyle);\n    }\n\n    int segmentIndex = 0;\n    currentDistance = 0.0;\n    for (SegmentEndpoint endpoint : endPoints) {\n      double distance = endpoint.pathDistance(distanceStyle, x, y, z);\n      if (distance != Double.POSITIVE_INFINITY)\n        return currentDistance + distance;\n      if (segmentIndex < segments.size())\n        currentDistance += segments.get(segmentIndex++).fullPathDistance(distanceStyle);\n    }\n\n    return Double.POSITIVE_INFINITY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b5d3e58ee2fe34bdd9e28dc47d2b236056d90d5","date":1510144003,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath#distance(DistanceStyle,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath#distance(DistanceStyle,double,double,double).mjava","sourceNew":"  @Override\n  protected double distance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    // Algorithm:\n    // (1) If the point is within any of the segments along the path, return that value.\n    // (2) If the point is within any of the segment end circles along the path, return that value.\n    // The algorithm loops over the whole path to get the shortest distance\n    double bestDistance = Double.POSITIVE_INFINITY;\n    \n    double currentDistance = 0.0;\n    for (final PathSegment segment : segments) {\n      double distance = segment.pathDistance(planetModel, distanceStyle, x,y,z);\n      if (distance != Double.POSITIVE_INFINITY) {\n        final double thisDistance = distanceStyle.fromAggregationForm(distanceStyle.aggregateDistances(currentDistance, distance));\n        if (thisDistance < bestDistance) {\n          bestDistance = thisDistance;\n        }\n      }\n      currentDistance = distanceStyle.aggregateDistances(currentDistance, segment.fullPathDistance(distanceStyle));\n    }\n\n    int segmentIndex = 0;\n    currentDistance = 0.0;\n    for (final SegmentEndpoint endpoint : endPoints) {\n      double distance = endpoint.pathDistance(distanceStyle, x, y, z);\n      if (distance != Double.POSITIVE_INFINITY) {\n        final double thisDistance = distanceStyle.fromAggregationForm(distanceStyle.aggregateDistances(currentDistance, distance));\n        if (thisDistance < bestDistance) {\n          bestDistance = thisDistance;\n        }\n      }\n      if (segmentIndex < segments.size())\n        currentDistance = distanceStyle.aggregateDistances(currentDistance, segments.get(segmentIndex++).fullPathDistance(distanceStyle));\n    }\n\n    return bestDistance;\n  }\n\n","sourceOld":"  @Override\n  protected double distance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    // Algorithm:\n    // (1) If the point is within any of the segments along the path, return that value.\n    // (2) If the point is within any of the segment end circles along the path, return that value.\n    double currentDistance = 0.0;\n    for (PathSegment segment : segments) {\n      double distance = segment.pathDistance(planetModel, distanceStyle, x,y,z);\n      if (distance != Double.POSITIVE_INFINITY)\n        return distanceStyle.fromAggregationForm(distanceStyle.aggregateDistances(currentDistance, distance));\n      currentDistance = distanceStyle.aggregateDistances(currentDistance, segment.fullPathDistance(distanceStyle));\n    }\n\n    int segmentIndex = 0;\n    currentDistance = 0.0;\n    for (SegmentEndpoint endpoint : endPoints) {\n      double distance = endpoint.pathDistance(distanceStyle, x, y, z);\n      if (distance != Double.POSITIVE_INFINITY)\n        return distanceStyle.fromAggregationForm(distanceStyle.aggregateDistances(currentDistance, distance));\n      if (segmentIndex < segments.size())\n        currentDistance = distanceStyle.aggregateDistances(currentDistance, segments.get(segmentIndex++).fullPathDistance(distanceStyle));\n    }\n\n    return Double.POSITIVE_INFINITY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8b5d3e58ee2fe34bdd9e28dc47d2b236056d90d5":["4226cfcbb0a738a11eee87a3417724e78eddc599"],"760628478e121972168791a2afa6af915192c4a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","760628478e121972168791a2afa6af915192c4a6"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["d470c8182e92b264680e34081b75e70a9f2b3c89","4226cfcbb0a738a11eee87a3417724e78eddc599"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4226cfcbb0a738a11eee87a3417724e78eddc599":["bfeb87b48135d7ec81a3c6568883a9b3645ddfa6"],"bfeb87b48135d7ec81a3c6568883a9b3645ddfa6":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"ae0a2a645db6ae8e4aca176aefd05f400689d2f4":["760628478e121972168791a2afa6af915192c4a6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["760628478e121972168791a2afa6af915192c4a6","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b5d3e58ee2fe34bdd9e28dc47d2b236056d90d5"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["760628478e121972168791a2afa6af915192c4a6","ae0a2a645db6ae8e4aca176aefd05f400689d2f4"]},"commit2Childs":{"8b5d3e58ee2fe34bdd9e28dc47d2b236056d90d5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"760628478e121972168791a2afa6af915192c4a6":["09af2c9610ce53a4b25fd99344299b40318a4a1a","ae0a2a645db6ae8e4aca176aefd05f400689d2f4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":[],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["760628478e121972168791a2afa6af915192c4a6","09af2c9610ce53a4b25fd99344299b40318a4a1a"],"4226cfcbb0a738a11eee87a3417724e78eddc599":["8b5d3e58ee2fe34bdd9e28dc47d2b236056d90d5","3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"bfeb87b48135d7ec81a3c6568883a9b3645ddfa6":["4226cfcbb0a738a11eee87a3417724e78eddc599"],"ae0a2a645db6ae8e4aca176aefd05f400689d2f4":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","bfeb87b48135d7ec81a3c6568883a9b3645ddfa6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09af2c9610ce53a4b25fd99344299b40318a4a1a","3a7809d1d753b67f48b1a706e17034bf8b624ea3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}