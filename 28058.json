{"path":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","pathOld":"/dev/null","sourceNew":"  CSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand();\n    templateAdd.allowDups=false;\n    templateAdd.overwriteCommitted=true;\n    templateAdd.overwritePending=true;\n\n    if (params.getBool(OVERWRITE,true)) {\n      templateAdd.allowDups=false;\n      templateAdd.overwriteCommitted=true;\n      templateAdd.overwritePending=true;\n    } else {\n      templateAdd.allowDups=true;\n      templateAdd.overwriteCommitted=false;\n      templateAdd.overwritePending=false;\n    }\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator((char)-2);  // TODO: add CSVStrategy.ENCAPSULATOR_DISABLED      \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","sourceNew":null,"sourceOld":"  CSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand();\n    templateAdd.allowDups=false;\n    templateAdd.overwriteCommitted=true;\n    templateAdd.overwritePending=true;\n\n    if (params.getBool(OVERWRITE,true)) {\n      templateAdd.allowDups=false;\n      templateAdd.overwriteCommitted=true;\n      templateAdd.overwritePending=true;\n    } else {\n      templateAdd.allowDups=true;\n      templateAdd.overwriteCommitted=false;\n      templateAdd.overwritePending=false;\n    }\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator((char)-2);  // TODO: add CSVStrategy.ENCAPSULATOR_DISABLED      \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","pathOld":"src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","sourceNew":"  CSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand();\n    templateAdd.allowDups=false;\n    templateAdd.overwriteCommitted=true;\n    templateAdd.overwritePending=true;\n\n    if (params.getBool(OVERWRITE,true)) {\n      templateAdd.allowDups=false;\n      templateAdd.overwriteCommitted=true;\n      templateAdd.overwritePending=true;\n    } else {\n      templateAdd.allowDups=true;\n      templateAdd.overwriteCommitted=false;\n      templateAdd.overwritePending=false;\n    }\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator((char)-2);  // TODO: add CSVStrategy.ENCAPSULATOR_DISABLED      \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","sourceOld":"  CSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand();\n    templateAdd.allowDups=false;\n    templateAdd.overwriteCommitted=true;\n    templateAdd.overwritePending=true;\n\n    if (params.getBool(OVERWRITE,true)) {\n      templateAdd.allowDups=false;\n      templateAdd.overwriteCommitted=true;\n      templateAdd.overwritePending=true;\n    } else {\n      templateAdd.allowDups=true;\n      templateAdd.overwriteCommitted=false;\n      templateAdd.overwritePending=false;\n    }\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator((char)-2);  // TODO: add CSVStrategy.ENCAPSULATOR_DISABLED      \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","pathOld":"/dev/null","sourceNew":"  CSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand();\n    templateAdd.allowDups=false;\n    templateAdd.overwriteCommitted=true;\n    templateAdd.overwritePending=true;\n\n    if (params.getBool(OVERWRITE,true)) {\n      templateAdd.allowDups=false;\n      templateAdd.overwriteCommitted=true;\n      templateAdd.overwritePending=true;\n    } else {\n      templateAdd.allowDups=true;\n      templateAdd.overwriteCommitted=false;\n      templateAdd.overwritePending=false;\n    }\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator((char)-2);  // TODO: add CSVStrategy.ENCAPSULATOR_DISABLED      \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b69cd84ea1afad0c686a964bdc267f3a298b8c0e","date":1280257599,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","pathOld":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","sourceNew":"  CSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand();\n    templateAdd.allowDups=false;\n    templateAdd.overwriteCommitted=true;\n    templateAdd.overwritePending=true;\n\n    if (params.getBool(OVERWRITE,true)) {\n      templateAdd.allowDups=false;\n      templateAdd.overwriteCommitted=true;\n      templateAdd.overwritePending=true;\n    } else {\n      templateAdd.allowDups=true;\n      templateAdd.overwriteCommitted=false;\n      templateAdd.overwritePending=false;\n    }\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","sourceOld":"  CSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand();\n    templateAdd.allowDups=false;\n    templateAdd.overwriteCommitted=true;\n    templateAdd.overwritePending=true;\n\n    if (params.getBool(OVERWRITE,true)) {\n      templateAdd.allowDups=false;\n      templateAdd.overwriteCommitted=true;\n      templateAdd.overwritePending=true;\n    } else {\n      templateAdd.allowDups=true;\n      templateAdd.overwriteCommitted=false;\n      templateAdd.overwritePending=false;\n    }\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator((char)-2);  // TODO: add CSVStrategy.ENCAPSULATOR_DISABLED      \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","pathOld":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","sourceNew":"  CSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand();\n    templateAdd.allowDups=false;\n    templateAdd.overwriteCommitted=true;\n    templateAdd.overwritePending=true;\n\n    if (params.getBool(OVERWRITE,true)) {\n      templateAdd.allowDups=false;\n      templateAdd.overwriteCommitted=true;\n      templateAdd.overwritePending=true;\n    } else {\n      templateAdd.allowDups=true;\n      templateAdd.overwriteCommitted=false;\n      templateAdd.overwritePending=false;\n    }\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","sourceOld":"  CSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand();\n    templateAdd.allowDups=false;\n    templateAdd.overwriteCommitted=true;\n    templateAdd.overwritePending=true;\n\n    if (params.getBool(OVERWRITE,true)) {\n      templateAdd.allowDups=false;\n      templateAdd.overwriteCommitted=true;\n      templateAdd.overwritePending=true;\n    } else {\n      templateAdd.allowDups=true;\n      templateAdd.overwriteCommitted=false;\n      templateAdd.overwritePending=false;\n    }\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator((char)-2);  // TODO: add CSVStrategy.ENCAPSULATOR_DISABLED      \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5653af107efef582afd0bc6aff175972359fdd6","date":1293390698,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","pathOld":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","sourceNew":"  CSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand();\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","sourceOld":"  CSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand();\n    templateAdd.allowDups=false;\n    templateAdd.overwriteCommitted=true;\n    templateAdd.overwritePending=true;\n\n    if (params.getBool(OVERWRITE,true)) {\n      templateAdd.allowDups=false;\n      templateAdd.overwriteCommitted=true;\n      templateAdd.overwritePending=true;\n    } else {\n      templateAdd.allowDups=true;\n      templateAdd.overwriteCommitted=false;\n      templateAdd.overwritePending=false;\n    }\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa","date":1293733647,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","pathOld":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","sourceNew":"  CSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand(req);\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","sourceOld":"  CSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand();\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","pathOld":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","sourceNew":"  CSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand(req);\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","sourceOld":"  CSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand();\n    templateAdd.allowDups=false;\n    templateAdd.overwriteCommitted=true;\n    templateAdd.overwritePending=true;\n\n    if (params.getBool(OVERWRITE,true)) {\n      templateAdd.allowDups=false;\n      templateAdd.overwriteCommitted=true;\n      templateAdd.overwritePending=true;\n    } else {\n      templateAdd.allowDups=true;\n      templateAdd.overwriteCommitted=false;\n      templateAdd.overwritePending=false;\n    }\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","pathOld":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","sourceNew":"  CSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand(req);\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","sourceOld":"  CSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand();\n    templateAdd.allowDups=false;\n    templateAdd.overwriteCommitted=true;\n    templateAdd.overwritePending=true;\n\n    if (params.getBool(OVERWRITE,true)) {\n      templateAdd.allowDups=false;\n      templateAdd.overwriteCommitted=true;\n      templateAdd.overwritePending=true;\n    } else {\n      templateAdd.allowDups=true;\n      templateAdd.overwriteCommitted=false;\n      templateAdd.overwritePending=false;\n    }\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","pathOld":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","sourceNew":"  CSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand(req);\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","sourceOld":"  CSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand(req);\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","pathOld":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","sourceNew":"  CSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand(req);\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","sourceOld":"  CSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand(req);\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","pathOld":"solr/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","sourceNew":"  CSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand(req);\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","sourceOld":"  CSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand(req);\n    templateAdd.overwrite=params.getBool(OVERWRITE,true);\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator( CSVStrategy.ENCAPSULATOR_DISABLED);     \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["b69cd84ea1afad0c686a964bdc267f3a298b8c0e","5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["1da8d55113b689b06716246649de6f62430f15c0","b69cd84ea1afad0c686a964bdc267f3a298b8c0e"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"b69cd84ea1afad0c686a964bdc267f3a298b8c0e":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["3242a09f703274d3b9283f2064a1a33064b53a1b","5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"b5653af107efef582afd0bc6aff175972359fdd6":["b69cd84ea1afad0c686a964bdc267f3a298b8c0e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa":["b5653af107efef582afd0bc6aff175972359fdd6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"b69cd84ea1afad0c686a964bdc267f3a298b8c0e":["70ad682703b8585f5d0a637efec044d57ec05efb","3242a09f703274d3b9283f2064a1a33064b53a1b","b5653af107efef582afd0bc6aff175972359fdd6"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"1da8d55113b689b06716246649de6f62430f15c0":["3242a09f703274d3b9283f2064a1a33064b53a1b","b69cd84ea1afad0c686a964bdc267f3a298b8c0e"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"b5653af107efef582afd0bc6aff175972359fdd6":["5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa":["70ad682703b8585f5d0a637efec044d57ec05efb","c26f00b574427b55127e869b935845554afde1fa","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}