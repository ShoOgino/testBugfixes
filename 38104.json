{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#FacetRangeProcessor(FacetContext,FacetRange).mjava","commits":[{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#FacetRangeProcessor(FacetContext,FacetRange).mjava","pathOld":"/dev/null","sourceNew":"  FacetRangeProcessor(FacetContext fcontext, FacetRange freq) {\n    super(fcontext, freq);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#FacetRangeProcessor(FacetContext,FacetRange).mjava","pathOld":"/dev/null","sourceNew":"  FacetRangeProcessor(FacetContext fcontext, FacetRange freq) {\n    super(fcontext, freq);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c05b634713ca09b2267477408773904d4c69dd9d","date":1530894845,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#FacetRangeProcessor(FacetContext,FacetRange).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#FacetRangeProcessor(FacetContext,FacetRange).mjava","sourceNew":"  FacetRangeProcessor(FacetContext fcontext, FacetRange freq) {\n    super(fcontext, freq);\n    include = freq.include;\n    sf = fcontext.searcher.getSchema().getField(freq.field);\n    calc = getCalcForField(sf);\n    start = calc.getValue(freq.start.toString());\n    end = calc.getValue(freq.end.toString());\n    gap = freq.gap.toString();\n\n    \n    // Under the normal mincount=0, each shard will need to return 0 counts since we don't calculate buckets at the top level.\n    // If mincount>0 then we could *potentially* set our sub mincount to 1...\n    // ...but that would require sorting the buckets (by their val) at the top level\n    //\n    // Rather then do that, which could be complicated by non trivial field types, we'll force the sub-shard effectiveMincount\n    // to be 0, ensuring that we can trivially merge all the buckets from every shard\n    // (we have to filter the merged buckets by the original mincount either way)\n    effectiveMincount = fcontext.isShard() ? 0 : freq.mincount;\n  }\n\n","sourceOld":"  FacetRangeProcessor(FacetContext fcontext, FacetRange freq) {\n    super(fcontext, freq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#FacetRangeProcessor(FacetContext,FacetRange).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#FacetRangeProcessor(FacetContext,FacetRange).mjava","sourceNew":"  FacetRangeProcessor(FacetContext fcontext, FacetRange freq) {\n    super(fcontext, freq);\n    include = freq.include;\n    sf = fcontext.searcher.getSchema().getField(freq.field);\n    calc = getCalcForField(sf);\n    start = calc.getValue(freq.start.toString());\n    end = calc.getValue(freq.end.toString());\n    gap = freq.gap.toString();\n\n    \n    // Under the normal mincount=0, each shard will need to return 0 counts since we don't calculate buckets at the top level.\n    // If mincount>0 then we could *potentially* set our sub mincount to 1...\n    // ...but that would require sorting the buckets (by their val) at the top level\n    //\n    // Rather then do that, which could be complicated by non trivial field types, we'll force the sub-shard effectiveMincount\n    // to be 0, ensuring that we can trivially merge all the buckets from every shard\n    // (we have to filter the merged buckets by the original mincount either way)\n    effectiveMincount = fcontext.isShard() ? 0 : freq.mincount;\n  }\n\n","sourceOld":"  FacetRangeProcessor(FacetContext fcontext, FacetRange freq) {\n    super(fcontext, freq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#FacetRangeProcessor(FacetContext,FacetRange).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#FacetRangeProcessor(FacetContext,FacetRange).mjava","sourceNew":"  FacetRangeProcessor(FacetContext fcontext, FacetRange freq) {\n    super(fcontext, freq);\n    include = freq.include;\n    sf = fcontext.searcher.getSchema().getField(freq.field);\n    calc = getCalcForField(sf);\n    start = calc.getValue(freq.start.toString());\n    end = calc.getValue(freq.end.toString());\n    gap = freq.gap.toString();\n\n    \n    // Under the normal mincount=0, each shard will need to return 0 counts since we don't calculate buckets at the top level.\n    // If mincount>0 then we could *potentially* set our sub mincount to 1...\n    // ...but that would require sorting the buckets (by their val) at the top level\n    //\n    // Rather then do that, which could be complicated by non trivial field types, we'll force the sub-shard effectiveMincount\n    // to be 0, ensuring that we can trivially merge all the buckets from every shard\n    // (we have to filter the merged buckets by the original mincount either way)\n    effectiveMincount = fcontext.isShard() ? 0 : freq.mincount;\n  }\n\n","sourceOld":"  FacetRangeProcessor(FacetContext fcontext, FacetRange freq) {\n    super(fcontext, freq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45","date":1569046571,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#FacetRangeProcessor(FacetContext,FacetRange).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#FacetRangeProcessor(FacetContext,FacetRange).mjava","sourceNew":"  FacetRangeProcessor(FacetContext fcontext, FacetRange freq) {\n    super(fcontext, freq);\n    include = freq.include;\n    sf = fcontext.searcher.getSchema().getField(freq.field);\n    calc = getCalcForField(sf);\n    if (freq.ranges != null && (freq.start != null || freq.end != null || freq.gap != null)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Cannot set gap/start/end and ranges params together\");\n    }\n    if (freq.ranges != null) {\n      ranges = freq.ranges;\n      start = null;\n      end = null;\n      gap = null;\n    } else {\n      start = calc.getValue(freq.start.toString());\n      end = calc.getValue(freq.end.toString());\n      gap = freq.gap.toString();\n      ranges = null;\n    }\n\n    // Under the normal mincount=0, each shard will need to return 0 counts since we don't calculate buckets at the top level.\n    // If mincount>0 then we could *potentially* set our sub mincount to 1...\n    // ...but that would require sorting the buckets (by their val) at the top level\n    //\n    // Rather then do that, which could be complicated by non trivial field types, we'll force the sub-shard effectiveMincount\n    // to be 0, ensuring that we can trivially merge all the buckets from every shard\n    // (we have to filter the merged buckets by the original mincount either way)\n    effectiveMincount = fcontext.isShard() ? 0 : freq.mincount;\n  }\n\n","sourceOld":"  FacetRangeProcessor(FacetContext fcontext, FacetRange freq) {\n    super(fcontext, freq);\n    include = freq.include;\n    sf = fcontext.searcher.getSchema().getField(freq.field);\n    calc = getCalcForField(sf);\n    start = calc.getValue(freq.start.toString());\n    end = calc.getValue(freq.end.toString());\n    gap = freq.gap.toString();\n\n    \n    // Under the normal mincount=0, each shard will need to return 0 counts since we don't calculate buckets at the top level.\n    // If mincount>0 then we could *potentially* set our sub mincount to 1...\n    // ...but that would require sorting the buckets (by their val) at the top level\n    //\n    // Rather then do that, which could be complicated by non trivial field types, we'll force the sub-shard effectiveMincount\n    // to be 0, ensuring that we can trivially merge all the buckets from every shard\n    // (we have to filter the merged buckets by the original mincount either way)\n    effectiveMincount = fcontext.isShard() ? 0 : freq.mincount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"248f6ecc900c3a5633fd5ca6f564ea8b717720da","date":1588863846,"type":4,"author":"Mike Drob","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#FacetRangeProcessor(FacetContext,FacetRange).mjava","sourceNew":null,"sourceOld":"  FacetRangeProcessor(FacetContext fcontext, FacetRange freq) {\n    super(fcontext, freq);\n    include = freq.include;\n    sf = fcontext.searcher.getSchema().getField(freq.field);\n    calc = getCalcForField(sf);\n    if (freq.ranges != null && (freq.start != null || freq.end != null || freq.gap != null)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Cannot set gap/start/end and ranges params together\");\n    }\n    if (freq.ranges != null) {\n      ranges = freq.ranges;\n      start = null;\n      end = null;\n      gap = null;\n    } else {\n      start = calc.getValue(freq.start.toString());\n      end = calc.getValue(freq.end.toString());\n      gap = freq.gap.toString();\n      ranges = null;\n    }\n\n    // Under the normal mincount=0, each shard will need to return 0 counts since we don't calculate buckets at the top level.\n    // If mincount>0 then we could *potentially* set our sub mincount to 1...\n    // ...but that would require sorting the buckets (by their val) at the top level\n    //\n    // Rather then do that, which could be complicated by non trivial field types, we'll force the sub-shard effectiveMincount\n    // to be 0, ensuring that we can trivially merge all the buckets from every shard\n    // (we have to filter the merged buckets by the original mincount either way)\n    effectiveMincount = fcontext.isShard() ? 0 : freq.mincount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","c05b634713ca09b2267477408773904d4c69dd9d"],"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45":["c05b634713ca09b2267477408773904d4c69dd9d"],"c05b634713ca09b2267477408773904d4c69dd9d":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","c05b634713ca09b2267477408773904d4c69dd9d"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","c05b634713ca09b2267477408773904d4c69dd9d","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"],"c05b634713ca09b2267477408773904d4c69dd9d":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}