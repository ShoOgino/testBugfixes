{"path":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(String,ClassLoader,Properties).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(String,ClassLoader,Properties).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(String,ClassLoader,Properties).mjava","sourceNew":"  /**\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * If the instance directory is not specified (=null), SolrResourceLoader#locateInstanceDir will provide one.\n   * <p>\n   */\n  public SolrResourceLoader( String instanceDir, ClassLoader parent, Properties coreProperties )\n  {\n    if( instanceDir == null ) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome();\n    } else{\n      this.instanceDir = normalizeDir(instanceDir);\n    }\n    log.info(\"Solr home set to '\" + this.instanceDir + \"'\");\n    \n    this.classLoader = createClassLoader(null, parent);\n    addToClassLoader(\"./lib/\", null);\n    \n    this.coreProperties = coreProperties;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * If the instance directory is not specified (=null), SolrResourceLoader#locateInstanceDir will provide one.\n   * <p>\n   */\n  public SolrResourceLoader( String instanceDir, ClassLoader parent, Properties coreProperties )\n  {\n    if( instanceDir == null ) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome();\n    } else{\n      this.instanceDir = normalizeDir(instanceDir);\n    }\n    log.info(\"Solr home set to '\" + this.instanceDir + \"'\");\n    \n    this.classLoader = createClassLoader(null, parent);\n    addToClassLoader(\"./lib/\", null);\n    \n    this.coreProperties = coreProperties;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(String,ClassLoader,Properties).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(String,ClassLoader,Properties).mjava","sourceNew":"  /**\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * If the instance directory is not specified (=null), SolrResourceLoader#locateInstanceDir will provide one.\n   * <p>\n   */\n  public SolrResourceLoader( String instanceDir, ClassLoader parent, Properties coreProperties )\n  {\n    if( instanceDir == null ) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome();\n    } else{\n      this.instanceDir = normalizeDir(instanceDir);\n    }\n    log.info(\"Solr home set to '\" + this.instanceDir + \"'\");\n    \n    this.classLoader = createClassLoader(null, parent);\n    addToClassLoader(\"./lib/\", null);\n    \n    this.coreProperties = coreProperties;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * If the instance directory is not specified (=null), SolrResourceLoader#locateInstanceDir will provide one.\n   * <p>\n   */\n  public SolrResourceLoader( String instanceDir, ClassLoader parent, Properties coreProperties )\n  {\n    if( instanceDir == null ) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome();\n    } else{\n      this.instanceDir = normalizeDir(instanceDir);\n    }\n    log.info(\"Solr home set to '\" + this.instanceDir + \"'\");\n    \n    this.classLoader = createClassLoader(null, parent);\n    addToClassLoader(\"./lib/\", null);\n    \n    this.coreProperties = coreProperties;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(String,ClassLoader,Properties).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(String,ClassLoader,Properties).mjava","sourceNew":"  /**\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * If the instance directory is not specified (=null), SolrResourceLoader#locateInstanceDir will provide one.\n   * <p>\n   */\n  public SolrResourceLoader( String instanceDir, ClassLoader parent, Properties coreProperties )\n  {\n    if( instanceDir == null ) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome();\n    } else{\n      this.instanceDir = normalizeDir(instanceDir);\n    }\n    log.info(\"Solr home set to '\" + this.instanceDir + \"'\");\n    \n    this.classLoader = createClassLoader(null, parent);\n    addToClassLoader(\"./lib/\", null);\n    \n    this.coreProperties = coreProperties;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * If the instance directory is not specified (=null), SolrResourceLoader#locateInstanceDir will provide one.\n   * <p>\n   */\n  public SolrResourceLoader( String instanceDir, ClassLoader parent, Properties coreProperties )\n  {\n    if( instanceDir == null ) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome();\n    } else{\n      this.instanceDir = normalizeDir(instanceDir);\n    }\n    log.info(\"Solr home set to '\" + this.instanceDir + \"'\");\n    \n    this.classLoader = createClassLoader(null, parent);\n    addToClassLoader(\"./lib/\", null);\n    \n    this.coreProperties = coreProperties;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"083df6f7d2115772bdcf0f53c63aa859e664c69e","date":1332809829,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(String,ClassLoader,Properties).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(String,ClassLoader,Properties).mjava","sourceNew":"  /**\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * </p>\n   *\n   * @param instanceDir - base directory for this resource loader, if null locateSolrHome() will be used.\n   * @see #locateSolrHome\n   */\n  public SolrResourceLoader( String instanceDir, ClassLoader parent, Properties coreProperties )\n  {\n    if( instanceDir == null ) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome();\n      log.info(\"new SolrResourceLoader for deduced Solr Home: '{}'\", \n               this.instanceDir);\n    } else{\n      this.instanceDir = normalizeDir(instanceDir);\n      log.info(\"new SolrResourceLoader for directory: '{}'\", \n               this.instanceDir);\n    }\n    \n    this.classLoader = createClassLoader(null, parent);\n    addToClassLoader(\"./lib/\", null);\n    \n    this.coreProperties = coreProperties;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * If the instance directory is not specified (=null), SolrResourceLoader#locateInstanceDir will provide one.\n   * <p>\n   */\n  public SolrResourceLoader( String instanceDir, ClassLoader parent, Properties coreProperties )\n  {\n    if( instanceDir == null ) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome();\n    } else{\n      this.instanceDir = normalizeDir(instanceDir);\n    }\n    log.info(\"Solr home set to '\" + this.instanceDir + \"'\");\n    \n    this.classLoader = createClassLoader(null, parent);\n    addToClassLoader(\"./lib/\", null);\n    \n    this.coreProperties = coreProperties;\n  }\n\n","bugFix":["1ddc2fd411184c85d1baed1e8d24840a151d6ba1"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9499b09dd7d06d975f31e59a9b00653a86f9cad2","date":1343325589,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(String,ClassLoader,Properties).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(String,ClassLoader,Properties).mjava","sourceNew":"  /**\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * </p>\n   *\n   * @param instanceDir - base directory for this resource loader, if null locateSolrHome() will be used.\n   * @see #locateSolrHome\n   */\n  public SolrResourceLoader( String instanceDir, ClassLoader parent, Properties coreProperties )\n  {\n    if( instanceDir == null ) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome();\n      log.info(\"new SolrResourceLoader for deduced Solr Home: '{}'\", \n               this.instanceDir);\n    } else{\n      this.instanceDir = normalizeDir(instanceDir);\n      log.info(\"new SolrResourceLoader for directory: '{}'\", \n               this.instanceDir);\n    }\n    \n    this.classLoader = createClassLoader(null, parent);\n    addToClassLoader(\"./lib/\", null);\n    reloadLuceneSPI();\n    this.coreProperties = coreProperties;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * </p>\n   *\n   * @param instanceDir - base directory for this resource loader, if null locateSolrHome() will be used.\n   * @see #locateSolrHome\n   */\n  public SolrResourceLoader( String instanceDir, ClassLoader parent, Properties coreProperties )\n  {\n    if( instanceDir == null ) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome();\n      log.info(\"new SolrResourceLoader for deduced Solr Home: '{}'\", \n               this.instanceDir);\n    } else{\n      this.instanceDir = normalizeDir(instanceDir);\n      log.info(\"new SolrResourceLoader for directory: '{}'\", \n               this.instanceDir);\n    }\n    \n    this.classLoader = createClassLoader(null, parent);\n    addToClassLoader(\"./lib/\", null);\n    \n    this.coreProperties = coreProperties;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(String,ClassLoader,Properties).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(String,ClassLoader,Properties).mjava","sourceNew":"  /**\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * </p>\n   *\n   * @param instanceDir - base directory for this resource loader, if null locateSolrHome() will be used.\n   * @see #locateSolrHome\n   */\n  public SolrResourceLoader( String instanceDir, ClassLoader parent, Properties coreProperties )\n  {\n    if( instanceDir == null ) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome();\n      log.info(\"new SolrResourceLoader for deduced Solr Home: '{}'\", \n               this.instanceDir);\n    } else{\n      this.instanceDir = normalizeDir(instanceDir);\n      log.info(\"new SolrResourceLoader for directory: '{}'\", \n               this.instanceDir);\n    }\n    \n    this.classLoader = createClassLoader(null, parent);\n    addToClassLoader(\"./lib/\", null);\n    reloadLuceneSPI();\n    this.coreProperties = coreProperties;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * </p>\n   *\n   * @param instanceDir - base directory for this resource loader, if null locateSolrHome() will be used.\n   * @see #locateSolrHome\n   */\n  public SolrResourceLoader( String instanceDir, ClassLoader parent, Properties coreProperties )\n  {\n    if( instanceDir == null ) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome();\n      log.info(\"new SolrResourceLoader for deduced Solr Home: '{}'\", \n               this.instanceDir);\n    } else{\n      this.instanceDir = normalizeDir(instanceDir);\n      log.info(\"new SolrResourceLoader for directory: '{}'\", \n               this.instanceDir);\n    }\n    \n    this.classLoader = createClassLoader(null, parent);\n    addToClassLoader(\"./lib/\", null);\n    \n    this.coreProperties = coreProperties;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(String,ClassLoader,Properties).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(String,ClassLoader,Properties).mjava","sourceNew":"  /**\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * </p>\n   *\n   * @param instanceDir - base directory for this resource loader, if null locateSolrHome() will be used.\n   * @see #locateSolrHome\n   */\n  public SolrResourceLoader( String instanceDir, ClassLoader parent, Properties coreProperties )\n  {\n    if( instanceDir == null ) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome();\n      log.info(\"new SolrResourceLoader for deduced Solr Home: '{}'\", \n               this.instanceDir);\n    } else{\n      this.instanceDir = normalizeDir(instanceDir);\n      log.info(\"new SolrResourceLoader for directory: '{}'\", \n               this.instanceDir);\n    }\n    \n    this.classLoader = createClassLoader(null, parent);\n    addToClassLoader(\"./lib/\", null);\n    reloadLuceneSPI();\n    this.coreProperties = coreProperties;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * </p>\n   *\n   * @param instanceDir - base directory for this resource loader, if null locateSolrHome() will be used.\n   * @see #locateSolrHome\n   */\n  public SolrResourceLoader( String instanceDir, ClassLoader parent, Properties coreProperties )\n  {\n    if( instanceDir == null ) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome();\n      log.info(\"new SolrResourceLoader for deduced Solr Home: '{}'\", \n               this.instanceDir);\n    } else{\n      this.instanceDir = normalizeDir(instanceDir);\n      log.info(\"new SolrResourceLoader for directory: '{}'\", \n               this.instanceDir);\n    }\n    \n    this.classLoader = createClassLoader(null, parent);\n    addToClassLoader(\"./lib/\", null);\n    \n    this.coreProperties = coreProperties;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(String,ClassLoader,Properties).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(String,ClassLoader,Properties).mjava","sourceNew":"  /**\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * </p>\n   *\n   * @param instanceDir - base directory for this resource loader, if null locateSolrHome() will be used.\n   * @see #locateSolrHome\n   */\n  public SolrResourceLoader( String instanceDir, ClassLoader parent, Properties coreProperties )\n  {\n    if( instanceDir == null ) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome();\n      log.info(\"new SolrResourceLoader for deduced Solr Home: '{}'\", \n               this.instanceDir);\n    } else{\n      this.instanceDir = normalizeDir(instanceDir);\n      log.info(\"new SolrResourceLoader for directory: '{}'\",\n               this.instanceDir);\n    }\n    \n    this.classLoader = createClassLoader(null, parent);\n    addToClassLoader(\"./lib/\", null);\n    reloadLuceneSPI();\n    this.coreProperties = coreProperties;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * </p>\n   *\n   * @param instanceDir - base directory for this resource loader, if null locateSolrHome() will be used.\n   * @see #locateSolrHome\n   */\n  public SolrResourceLoader( String instanceDir, ClassLoader parent, Properties coreProperties )\n  {\n    if( instanceDir == null ) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome();\n      log.info(\"new SolrResourceLoader for deduced Solr Home: '{}'\", \n               this.instanceDir);\n    } else{\n      this.instanceDir = normalizeDir(instanceDir);\n      log.info(\"new SolrResourceLoader for directory: '{}'\", \n               this.instanceDir);\n    }\n    \n    this.classLoader = createClassLoader(null, parent);\n    addToClassLoader(\"./lib/\", null);\n    reloadLuceneSPI();\n    this.coreProperties = coreProperties;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"33dd2fc33a7c6ae46d3decff17689539385ef33f","date":1364971259,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(String,ClassLoader,Properties).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(String,ClassLoader,Properties).mjava","sourceNew":"  /**\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * </p>\n   *\n   * @param instanceDir - base directory for this resource loader, if null locateSolrHome() will be used.\n   * @see #locateSolrHome\n   */\n  public SolrResourceLoader( String instanceDir, ClassLoader parent, Properties coreProperties )\n  {\n    if( instanceDir == null ) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome();\n      log.info(\"new SolrResourceLoader for deduced Solr Home: '{}'\", \n               this.instanceDir);\n    } else{\n      this.instanceDir = normalizeDir(instanceDir);\n      log.info(\"new SolrResourceLoader for directory: '{}'\",\n               this.instanceDir);\n    }\n    \n    this.classLoader = createClassLoader(null, parent);\n    addToClassLoader(\"./lib/\", null, true);\n    reloadLuceneSPI();\n    this.coreProperties = coreProperties;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * </p>\n   *\n   * @param instanceDir - base directory for this resource loader, if null locateSolrHome() will be used.\n   * @see #locateSolrHome\n   */\n  public SolrResourceLoader( String instanceDir, ClassLoader parent, Properties coreProperties )\n  {\n    if( instanceDir == null ) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome();\n      log.info(\"new SolrResourceLoader for deduced Solr Home: '{}'\", \n               this.instanceDir);\n    } else{\n      this.instanceDir = normalizeDir(instanceDir);\n      log.info(\"new SolrResourceLoader for directory: '{}'\",\n               this.instanceDir);\n    }\n    \n    this.classLoader = createClassLoader(null, parent);\n    addToClassLoader(\"./lib/\", null);\n    reloadLuceneSPI();\n    this.coreProperties = coreProperties;\n  }\n\n","bugFix":["5dc524639edfdfa4edfb67ae889c2b6029f9314c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6107d8e44c6f3f39d6069015c74930edd1d5d6bd","date":1441804522,"type":3,"author":"Shawn Heisey","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(String,ClassLoader,Properties).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(String,ClassLoader,Properties).mjava","sourceNew":"  /**\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * </p>\n   *\n   * @param instanceDir - base directory for this resource loader, if null locateSolrHome() will be used.\n   * @see #locateSolrHome\n   */\n  public SolrResourceLoader( String instanceDir, ClassLoader parent, Properties coreProperties )\n  {\n    if( instanceDir == null ) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome();\n      log.info(\"new SolrResourceLoader for deduced Solr Home: '{}'\", \n               this.instanceDir);\n    } else{\n      this.instanceDir = normalizeDir(instanceDir);\n      log.info(\"new SolrResourceLoader for directory: '{}'\",\n               this.instanceDir);\n    }\n    \n    this.classLoader = createClassLoader(null, parent);\n    this.coreProperties = coreProperties;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * </p>\n   *\n   * @param instanceDir - base directory for this resource loader, if null locateSolrHome() will be used.\n   * @see #locateSolrHome\n   */\n  public SolrResourceLoader( String instanceDir, ClassLoader parent, Properties coreProperties )\n  {\n    if( instanceDir == null ) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome();\n      log.info(\"new SolrResourceLoader for deduced Solr Home: '{}'\", \n               this.instanceDir);\n    } else{\n      this.instanceDir = normalizeDir(instanceDir);\n      log.info(\"new SolrResourceLoader for directory: '{}'\",\n               this.instanceDir);\n    }\n    \n    this.classLoader = createClassLoader(null, parent);\n    addToClassLoader(\"./lib/\", null, true);\n    reloadLuceneSPI();\n    this.coreProperties = coreProperties;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"081c29a4dbfb15c37f4d8484c83e67e8cec8c44c","date":1441817733,"type":3,"author":"Shawn Heisey","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(String,ClassLoader,Properties).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(String,ClassLoader,Properties).mjava","sourceNew":"  /**\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * </p>\n   *\n   * @param instanceDir - base directory for this resource loader, if null locateSolrHome() will be used.\n   * @see #locateSolrHome\n   */\n  public SolrResourceLoader( String instanceDir, ClassLoader parent, Properties coreProperties )\n  {\n    if( instanceDir == null ) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome();\n      log.info(\"new SolrResourceLoader for deduced Solr Home: '{}'\", \n               this.instanceDir);\n    } else{\n      this.instanceDir = normalizeDir(instanceDir);\n      log.info(\"new SolrResourceLoader for directory: '{}'\",\n               this.instanceDir);\n    }\n    \n    this.classLoader = createClassLoader(null, parent);\n    addToClassLoader(\"./lib/\", null, true);\n    reloadLuceneSPI();\n    this.coreProperties = coreProperties;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * </p>\n   *\n   * @param instanceDir - base directory for this resource loader, if null locateSolrHome() will be used.\n   * @see #locateSolrHome\n   */\n  public SolrResourceLoader( String instanceDir, ClassLoader parent, Properties coreProperties )\n  {\n    if( instanceDir == null ) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome();\n      log.info(\"new SolrResourceLoader for deduced Solr Home: '{}'\", \n               this.instanceDir);\n    } else{\n      this.instanceDir = normalizeDir(instanceDir);\n      log.info(\"new SolrResourceLoader for directory: '{}'\",\n               this.instanceDir);\n    }\n    \n    this.classLoader = createClassLoader(null, parent);\n    this.coreProperties = coreProperties;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc81c307ac306c8f3bbbe945795812e445502cf1","date":1444344053,"type":3,"author":"Shawn Heisey","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(String,ClassLoader,Properties).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(String,ClassLoader,Properties).mjava","sourceNew":"  /**\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * </p>\n   *\n   * @param instanceDir - base directory for this resource loader, if null locateSolrHome() will be used.\n   * @see #locateSolrHome\n   */\n  public SolrResourceLoader( String instanceDir, ClassLoader parent, Properties coreProperties )\n  {\n    if( instanceDir == null ) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome();\n      log.info(\"new SolrResourceLoader for deduced Solr Home: '{}'\", \n               this.instanceDir);\n    } else{\n      this.instanceDir = normalizeDir(instanceDir);\n      log.info(\"new SolrResourceLoader for directory: '{}'\",\n               this.instanceDir);\n    }\n    \n    this.classLoader = createClassLoader(null, parent);\n    /* \n     * Skip the lib subdirectory when we are loading from the solr home.\n     * Otherwise load it, so core lib directories still get loaded.\n     * The default sharedLib will pick this up later, and if the user has\n     * changed sharedLib, then we don't want to load that location anyway.\n     */\n    if (! this.instanceDir.equals(SolrResourceLoader.locateSolrHome())) {\n      addToClassLoader(\"./lib/\", null, true);\n      reloadLuceneSPI();\n    }\n    this.coreProperties = coreProperties;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * </p>\n   *\n   * @param instanceDir - base directory for this resource loader, if null locateSolrHome() will be used.\n   * @see #locateSolrHome\n   */\n  public SolrResourceLoader( String instanceDir, ClassLoader parent, Properties coreProperties )\n  {\n    if( instanceDir == null ) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome();\n      log.info(\"new SolrResourceLoader for deduced Solr Home: '{}'\", \n               this.instanceDir);\n    } else{\n      this.instanceDir = normalizeDir(instanceDir);\n      log.info(\"new SolrResourceLoader for directory: '{}'\",\n               this.instanceDir);\n    }\n    \n    this.classLoader = createClassLoader(null, parent);\n    addToClassLoader(\"./lib/\", null, true);\n    reloadLuceneSPI();\n    this.coreProperties = coreProperties;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(String,ClassLoader,Properties).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(String,ClassLoader,Properties).mjava","sourceNew":"  /**\n   * Use {@link #SolrResourceLoader(Path, ClassLoader, Properties)}\n   */\n  @Deprecated\n  public SolrResourceLoader(String instanceDir, ClassLoader parent, Properties properties) {\n    this(Paths.get(instanceDir), parent, properties);\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * </p>\n   *\n   * @param instanceDir - base directory for this resource loader, if null locateSolrHome() will be used.\n   * @see #locateSolrHome\n   */\n  public SolrResourceLoader( String instanceDir, ClassLoader parent, Properties coreProperties )\n  {\n    if( instanceDir == null ) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome();\n      log.info(\"new SolrResourceLoader for deduced Solr Home: '{}'\", \n               this.instanceDir);\n    } else{\n      this.instanceDir = normalizeDir(instanceDir);\n      log.info(\"new SolrResourceLoader for directory: '{}'\",\n               this.instanceDir);\n    }\n    \n    this.classLoader = createClassLoader(null, parent);\n    /* \n     * Skip the lib subdirectory when we are loading from the solr home.\n     * Otherwise load it, so core lib directories still get loaded.\n     * The default sharedLib will pick this up later, and if the user has\n     * changed sharedLib, then we don't want to load that location anyway.\n     */\n    if (! this.instanceDir.equals(SolrResourceLoader.locateSolrHome())) {\n      addToClassLoader(\"./lib/\", null, true);\n      reloadLuceneSPI();\n    }\n    this.coreProperties = coreProperties;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2702f14716c5d2143479e547ea49b040aa59660","date":1448024160,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(String,ClassLoader,Properties).mjava","sourceNew":null,"sourceOld":"  /**\n   * Use {@link #SolrResourceLoader(Path, ClassLoader, Properties)}\n   */\n  @Deprecated\n  public SolrResourceLoader(String instanceDir, ClassLoader parent, Properties properties) {\n    this(Paths.get(instanceDir), parent, properties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6107d8e44c6f3f39d6069015c74930edd1d5d6bd":["33dd2fc33a7c6ae46d3decff17689539385ef33f"],"33dd2fc33a7c6ae46d3decff17689539385ef33f":["a837c064b67fa63a9394136e31218b908cdcf783"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"083df6f7d2115772bdcf0f53c63aa859e664c69e":["c26f00b574427b55127e869b935845554afde1fa"],"aba371508186796cc6151d8223a5b4e16d02e26e":["083df6f7d2115772bdcf0f53c63aa859e664c69e","9499b09dd7d06d975f31e59a9b00653a86f9cad2"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["cc81c307ac306c8f3bbbe945795812e445502cf1"],"9499b09dd7d06d975f31e59a9b00653a86f9cad2":["083df6f7d2115772bdcf0f53c63aa859e664c69e"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["083df6f7d2115772bdcf0f53c63aa859e664c69e","9499b09dd7d06d975f31e59a9b00653a86f9cad2"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"081c29a4dbfb15c37f4d8484c83e67e8cec8c44c":["6107d8e44c6f3f39d6069015c74930edd1d5d6bd"],"a837c064b67fa63a9394136e31218b908cdcf783":["9499b09dd7d06d975f31e59a9b00653a86f9cad2"],"e2702f14716c5d2143479e547ea49b040aa59660":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"cc81c307ac306c8f3bbbe945795812e445502cf1":["081c29a4dbfb15c37f4d8484c83e67e8cec8c44c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e2702f14716c5d2143479e547ea49b040aa59660"]},"commit2Childs":{"6107d8e44c6f3f39d6069015c74930edd1d5d6bd":["081c29a4dbfb15c37f4d8484c83e67e8cec8c44c"],"33dd2fc33a7c6ae46d3decff17689539385ef33f":["6107d8e44c6f3f39d6069015c74930edd1d5d6bd"],"c26f00b574427b55127e869b935845554afde1fa":["083df6f7d2115772bdcf0f53c63aa859e664c69e"],"083df6f7d2115772bdcf0f53c63aa859e664c69e":["aba371508186796cc6151d8223a5b4e16d02e26e","9499b09dd7d06d975f31e59a9b00653a86f9cad2","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a626ec4d1c92e59fe390724d6220081047b03ce7":["e2702f14716c5d2143479e547ea49b040aa59660"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"9499b09dd7d06d975f31e59a9b00653a86f9cad2":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","a837c064b67fa63a9394136e31218b908cdcf783"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"081c29a4dbfb15c37f4d8484c83e67e8cec8c44c":["cc81c307ac306c8f3bbbe945795812e445502cf1"],"a837c064b67fa63a9394136e31218b908cdcf783":["33dd2fc33a7c6ae46d3decff17689539385ef33f"],"cc81c307ac306c8f3bbbe945795812e445502cf1":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"e2702f14716c5d2143479e547ea49b040aa59660":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}