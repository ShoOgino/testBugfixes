{"path":"lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupsCollector#[T]_create(String,DocValues.Type,boolean,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupsCollector#[T]_create(String,DocValues.Type,boolean,int).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupsCollector#[T]_create(String,DocValues.Type,boolean,int).mjava","sourceNew":"  /**\n   * Expert: Constructs a {@link DVAllGroupsCollector}.\n   * Selects and constructs the most optimal all groups collector implementation for grouping by {@link DocValues}.\n   * \n   *\n   * @param groupField  The field to group by\n   * @param type The {@link Type} which is used to select a concrete implementation.\n   * @param diskResident Whether the values to group by should be disk resident\n   * @param initialSize The initial allocation size of the\n   *                    internal int set and group list\n   *                    which should roughly match the total\n   *                    number of expected unique groups. Be aware that the\n   *                    heap usage is 4 bytes * initialSize. Not all concrete implementions use this!\n   * @return the most optimal all groups collector implementation for grouping by {@link DocValues}\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static <T> DVAllGroupsCollector<T> create(String groupField, DocValues.Type type, boolean diskResident, int initialSize) {\n    switch (type) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new Lng(groupField, type, diskResident);\n      case FLOAT_32:\n      case FLOAT_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new Dbl(groupField, type, diskResident);\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new BR(groupField, type, diskResident);\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new SortedBR(groupField, type, diskResident, initialSize);\n      default:\n        throw new IllegalArgumentException(String.format(\"ValueType %s not supported\", type));\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: Constructs a {@link DVAllGroupsCollector}.\n   * Selects and constructs the most optimal all groups collector implementation for grouping by {@link DocValues}.\n   * \n   *\n   * @param groupField  The field to group by\n   * @param type The {@link Type} which is used to select a concrete implementation.\n   * @param diskResident Whether the values to group by should be disk resident\n   * @param initialSize The initial allocation size of the\n   *                    internal int set and group list\n   *                    which should roughly match the total\n   *                    number of expected unique groups. Be aware that the\n   *                    heap usage is 4 bytes * initialSize. Not all concrete implementions use this!\n   * @return the most optimal all groups collector implementation for grouping by {@link DocValues}\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static <T> DVAllGroupsCollector<T> create(String groupField, DocValues.Type type, boolean diskResident, int initialSize) {\n    switch (type) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new Lng(groupField, type, diskResident);\n      case FLOAT_32:\n      case FLOAT_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new Dbl(groupField, type, diskResident);\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new BR(groupField, type, diskResident);\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new SortedBR(groupField, type, diskResident, initialSize);\n      default:\n        throw new IllegalArgumentException(String.format(\"ValueType %s not supported\", type));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b","date":1341673943,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupsCollector#[T]_create(String,DocValues.Type,boolean,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupsCollector#[T]_create(String,DocValues.Type,boolean,int).mjava","sourceNew":"  /**\n   * Expert: Constructs a {@link DVAllGroupsCollector}.\n   * Selects and constructs the most optimal all groups collector implementation for grouping by {@link DocValues}.\n   * \n   *\n   * @param groupField  The field to group by\n   * @param type The {@link Type} which is used to select a concrete implementation.\n   * @param diskResident Whether the values to group by should be disk resident\n   * @param initialSize The initial allocation size of the\n   *                    internal int set and group list\n   *                    which should roughly match the total\n   *                    number of expected unique groups. Be aware that the\n   *                    heap usage is 4 bytes * initialSize. Not all concrete implementions use this!\n   * @return the most optimal all groups collector implementation for grouping by {@link DocValues}\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static <T> DVAllGroupsCollector<T> create(String groupField, DocValues.Type type, boolean diskResident, int initialSize) {\n    switch (type) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new Lng(groupField, type, diskResident);\n      case FLOAT_32:\n      case FLOAT_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new Dbl(groupField, type, diskResident);\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new BR(groupField, type, diskResident);\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new SortedBR(groupField, type, diskResident, initialSize);\n      default:\n        throw new IllegalArgumentException(String.format(Locale.ROOT, \"ValueType %s not supported\", type));\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: Constructs a {@link DVAllGroupsCollector}.\n   * Selects and constructs the most optimal all groups collector implementation for grouping by {@link DocValues}.\n   * \n   *\n   * @param groupField  The field to group by\n   * @param type The {@link Type} which is used to select a concrete implementation.\n   * @param diskResident Whether the values to group by should be disk resident\n   * @param initialSize The initial allocation size of the\n   *                    internal int set and group list\n   *                    which should roughly match the total\n   *                    number of expected unique groups. Be aware that the\n   *                    heap usage is 4 bytes * initialSize. Not all concrete implementions use this!\n   * @return the most optimal all groups collector implementation for grouping by {@link DocValues}\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static <T> DVAllGroupsCollector<T> create(String groupField, DocValues.Type type, boolean diskResident, int initialSize) {\n    switch (type) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new Lng(groupField, type, diskResident);\n      case FLOAT_32:\n      case FLOAT_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new Dbl(groupField, type, diskResident);\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new BR(groupField, type, diskResident);\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new SortedBR(groupField, type, diskResident, initialSize);\n      default:\n        throw new IllegalArgumentException(String.format(\"ValueType %s not supported\", type));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupsCollector#[T]_create(String,DocValues.Type,boolean,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupsCollector#[T]_create(String,DocValues.Type,boolean,int).mjava","sourceNew":"  /**\n   * Expert: Constructs a {@link DVAllGroupsCollector}.\n   * Selects and constructs the most optimal all groups collector implementation for grouping by {@link DocValues}.\n   * \n   *\n   * @param groupField  The field to group by\n   * @param type The {@link Type} which is used to select a concrete implementation.\n   * @param diskResident Whether the values to group by should be disk resident\n   * @param initialSize The initial allocation size of the\n   *                    internal int set and group list\n   *                    which should roughly match the total\n   *                    number of expected unique groups. Be aware that the\n   *                    heap usage is 4 bytes * initialSize. Not all concrete implementions use this!\n   * @return the most optimal all groups collector implementation for grouping by {@link DocValues}\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static <T> DVAllGroupsCollector<T> create(String groupField, DocValues.Type type, boolean diskResident, int initialSize) {\n    switch (type) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new Lng(groupField, type, diskResident);\n      case FLOAT_32:\n      case FLOAT_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new Dbl(groupField, type, diskResident);\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new BR(groupField, type, diskResident);\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new SortedBR(groupField, type, diskResident, initialSize);\n      default:\n        throw new IllegalArgumentException(String.format(Locale.ROOT, \"ValueType %s not supported\", type));\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: Constructs a {@link DVAllGroupsCollector}.\n   * Selects and constructs the most optimal all groups collector implementation for grouping by {@link DocValues}.\n   * \n   *\n   * @param groupField  The field to group by\n   * @param type The {@link Type} which is used to select a concrete implementation.\n   * @param diskResident Whether the values to group by should be disk resident\n   * @param initialSize The initial allocation size of the\n   *                    internal int set and group list\n   *                    which should roughly match the total\n   *                    number of expected unique groups. Be aware that the\n   *                    heap usage is 4 bytes * initialSize. Not all concrete implementions use this!\n   * @return the most optimal all groups collector implementation for grouping by {@link DocValues}\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static <T> DVAllGroupsCollector<T> create(String groupField, DocValues.Type type, boolean diskResident, int initialSize) {\n    switch (type) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new Lng(groupField, type, diskResident);\n      case FLOAT_32:\n      case FLOAT_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new Dbl(groupField, type, diskResident);\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new BR(groupField, type, diskResident);\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new SortedBR(groupField, type, diskResident, initialSize);\n      default:\n        throw new IllegalArgumentException(String.format(\"ValueType %s not supported\", type));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupsCollector#[T]_create(String,DocValues.Type,boolean,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupsCollector#[T]_create(String,DocValues.Type,boolean,int).mjava","sourceNew":"  /**\n   * Expert: Constructs a {@link DVAllGroupsCollector}.\n   * Selects and constructs the most optimal all groups collector implementation for grouping by {@link DocValues}.\n   * \n   *\n   * @param groupField  The field to group by\n   * @param type The {@link Type} which is used to select a concrete implementation.\n   * @param diskResident Whether the values to group by should be disk resident\n   * @param initialSize The initial allocation size of the\n   *                    internal int set and group list\n   *                    which should roughly match the total\n   *                    number of expected unique groups. Be aware that the\n   *                    heap usage is 4 bytes * initialSize. Not all concrete implementions use this!\n   * @return the most optimal all groups collector implementation for grouping by {@link DocValues}\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static <T> DVAllGroupsCollector<T> create(String groupField, DocValues.Type type, boolean diskResident, int initialSize) {\n    switch (type) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new Lng(groupField, type, diskResident);\n      case FLOAT_32:\n      case FLOAT_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new Dbl(groupField, type, diskResident);\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new BR(groupField, type, diskResident);\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new SortedBR(groupField, type, diskResident, initialSize);\n      default:\n        throw new IllegalArgumentException(String.format(Locale.ROOT, \"ValueType %s not supported\", type));\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: Constructs a {@link DVAllGroupsCollector}.\n   * Selects and constructs the most optimal all groups collector implementation for grouping by {@link DocValues}.\n   * \n   *\n   * @param groupField  The field to group by\n   * @param type The {@link Type} which is used to select a concrete implementation.\n   * @param diskResident Whether the values to group by should be disk resident\n   * @param initialSize The initial allocation size of the\n   *                    internal int set and group list\n   *                    which should roughly match the total\n   *                    number of expected unique groups. Be aware that the\n   *                    heap usage is 4 bytes * initialSize. Not all concrete implementions use this!\n   * @return the most optimal all groups collector implementation for grouping by {@link DocValues}\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static <T> DVAllGroupsCollector<T> create(String groupField, DocValues.Type type, boolean diskResident, int initialSize) {\n    switch (type) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new Lng(groupField, type, diskResident);\n      case FLOAT_32:\n      case FLOAT_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new Dbl(groupField, type, diskResident);\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new BR(groupField, type, diskResident);\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new SortedBR(groupField, type, diskResident, initialSize);\n      default:\n        throw new IllegalArgumentException(String.format(\"ValueType %s not supported\", type));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupsCollector#[T]_create(String,DocValues.Type,boolean,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupsCollector#[T]_create(String,DocValues.Type,boolean,int).mjava","sourceNew":"  /**\n   * Expert: Constructs a {@link DVAllGroupsCollector}.\n   * Selects and constructs the most optimal all groups collector implementation for grouping by {@link DocValues}.\n   * \n   *\n   * @param groupField  The field to group by\n   * @param type The {@link Type} which is used to select a concrete implementation.\n   * @param diskResident Whether the values to group by should be disk resident\n   * @param initialSize The initial allocation size of the\n   *                    internal int set and group list\n   *                    which should roughly match the total\n   *                    number of expected unique groups. Be aware that the\n   *                    heap usage is 4 bytes * initialSize. Not all concrete implementions use this!\n   * @return the most optimal all groups collector implementation for grouping by {@link DocValues}\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static <T> DVAllGroupsCollector<T> create(String groupField, DocValues.Type type, boolean diskResident, int initialSize) {\n    switch (type) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new Lng(groupField, type, diskResident);\n      case FLOAT_32:\n      case FLOAT_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new Dbl(groupField, type, diskResident);\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new BR(groupField, type, diskResident);\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new SortedBR(groupField, type, diskResident, initialSize);\n      default:\n        throw new IllegalArgumentException(String.format(Locale.ROOT, \"ValueType %s not supported\", type));\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: Constructs a {@link DVAllGroupsCollector}.\n   * Selects and constructs the most optimal all groups collector implementation for grouping by {@link DocValues}.\n   * \n   *\n   * @param groupField  The field to group by\n   * @param type The {@link Type} which is used to select a concrete implementation.\n   * @param diskResident Whether the values to group by should be disk resident\n   * @param initialSize The initial allocation size of the\n   *                    internal int set and group list\n   *                    which should roughly match the total\n   *                    number of expected unique groups. Be aware that the\n   *                    heap usage is 4 bytes * initialSize. Not all concrete implementions use this!\n   * @return the most optimal all groups collector implementation for grouping by {@link DocValues}\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static <T> DVAllGroupsCollector<T> create(String groupField, DocValues.Type type, boolean diskResident, int initialSize) {\n    switch (type) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new Lng(groupField, type, diskResident);\n      case FLOAT_32:\n      case FLOAT_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new Dbl(groupField, type, diskResident);\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new BR(groupField, type, diskResident);\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new SortedBR(groupField, type, diskResident, initialSize);\n      default:\n        throw new IllegalArgumentException(String.format(\"ValueType %s not supported\", type));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupsCollector#[T]_create(String,DocValues.Type,boolean,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Expert: Constructs a {@link DVAllGroupsCollector}.\n   * Selects and constructs the most optimal all groups collector implementation for grouping by {@link DocValues}.\n   * \n   *\n   * @param groupField  The field to group by\n   * @param type The {@link Type} which is used to select a concrete implementation.\n   * @param diskResident Whether the values to group by should be disk resident\n   * @param initialSize The initial allocation size of the\n   *                    internal int set and group list\n   *                    which should roughly match the total\n   *                    number of expected unique groups. Be aware that the\n   *                    heap usage is 4 bytes * initialSize. Not all concrete implementions use this!\n   * @return the most optimal all groups collector implementation for grouping by {@link DocValues}\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static <T> DVAllGroupsCollector<T> create(String groupField, DocValues.Type type, boolean diskResident, int initialSize) {\n    switch (type) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new Lng(groupField, type, diskResident);\n      case FLOAT_32:\n      case FLOAT_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new Dbl(groupField, type, diskResident);\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new BR(groupField, type, diskResident);\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new SortedBR(groupField, type, diskResident, initialSize);\n      default:\n        throw new IllegalArgumentException(String.format(Locale.ROOT, \"ValueType %s not supported\", type));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVAllGroupsCollector#[T]_create(String,DocValues.Type,boolean,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Expert: Constructs a {@link DVAllGroupsCollector}.\n   * Selects and constructs the most optimal all groups collector implementation for grouping by {@link DocValues}.\n   * \n   *\n   * @param groupField  The field to group by\n   * @param type The {@link Type} which is used to select a concrete implementation.\n   * @param diskResident Whether the values to group by should be disk resident\n   * @param initialSize The initial allocation size of the\n   *                    internal int set and group list\n   *                    which should roughly match the total\n   *                    number of expected unique groups. Be aware that the\n   *                    heap usage is 4 bytes * initialSize. Not all concrete implementions use this!\n   * @return the most optimal all groups collector implementation for grouping by {@link DocValues}\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static <T> DVAllGroupsCollector<T> create(String groupField, DocValues.Type type, boolean diskResident, int initialSize) {\n    switch (type) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new Lng(groupField, type, diskResident);\n      case FLOAT_32:\n      case FLOAT_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new Dbl(groupField, type, diskResident);\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new BR(groupField, type, diskResident);\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVAllGroupsCollector) new SortedBR(groupField, type, diskResident, initialSize);\n      default:\n        throw new IllegalArgumentException(String.format(Locale.ROOT, \"ValueType %s not supported\", type));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["2acf500f78aa12b92e371fd89c719291986b6b90","0837ab0472feecb3a54260729d845f839e1cbd72"],"b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b","fe33227f6805edab2036cbb80645cc4e2d1fa424","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b":["2acf500f78aa12b92e371fd89c719291986b6b90"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"2acf500f78aa12b92e371fd89c719291986b6b90":["d4d69c535930b5cce125cff868d40f6373dc27d4","fe33227f6805edab2036cbb80645cc4e2d1fa424","0837ab0472feecb3a54260729d845f839e1cbd72","46d8ada1fff8d18cb197c38c7983225162599948"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}