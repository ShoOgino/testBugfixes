{"path":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","commits":[{"id":"79509167584beb75c0b777d2b701adeb1f06d885","date":1441841855,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","pathOld":"/dev/null","sourceNew":"  private void testBasicGroupingFacets() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"sql\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s order by sum(field_i) asc limit 2\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"sql\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where (text='XXXX' AND NOT text='XXXX XXX') group by str_s order by str_s desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getDouble(\"count(*)\") == 4);\n      assert(tuple.getDouble(\"sum(field_i)\") == 180);\n      assert(tuple.getDouble(\"min(field_i)\") == 30);\n      assert(tuple.getDouble(\"max(field_i)\") == 60);\n      assert(tuple.getDouble(\"avg(field_i)\") == 45);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"sql\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having sum(field_i) = 19\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"sql\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"sql\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 0);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36479872320bb00635cb97ca6757614c88562e1b","date":1444426483,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","sourceNew":"  private void testBasicGroupingFacets() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"sql\", \"select 'str_s', 'count(*)', sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by 'str_s' order by 'sum(field_i)' asc limit 2\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"sql\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where (text='XXXX' AND NOT text='XXXX XXX') group by str_s order by str_s desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getDouble(\"count(*)\") == 4);\n      assert(tuple.getDouble(\"sum(field_i)\") == 180);\n      assert(tuple.getDouble(\"min(field_i)\") == 30);\n      assert(tuple.getDouble(\"max(field_i)\") == 60);\n      assert(tuple.getDouble(\"avg(field_i)\") == 45);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"sql\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having sum(field_i) = 19\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"sql\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"sql\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 0);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicGroupingFacets() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"sql\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s order by sum(field_i) asc limit 2\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"sql\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where (text='XXXX' AND NOT text='XXXX XXX') group by str_s order by str_s desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getDouble(\"count(*)\") == 4);\n      assert(tuple.getDouble(\"sum(field_i)\") == 180);\n      assert(tuple.getDouble(\"min(field_i)\") == 30);\n      assert(tuple.getDouble(\"max(field_i)\") == 60);\n      assert(tuple.getDouble(\"avg(field_i)\") == 45);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"sql\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having sum(field_i) = 19\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"sql\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"sql\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 0);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ec71d4701edbd96cfea97384101d13611393552","date":1444686705,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","sourceNew":"  private void testBasicGroupingFacets() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select 'str_s', 'count(*)', sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by 'str_s' order by 'sum(field_i)' asc limit 2\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where (text='XXXX' AND NOT text='XXXX XXX') group by str_s order by str_s desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getDouble(\"count(*)\") == 4);\n      assert(tuple.getDouble(\"sum(field_i)\") == 180);\n      assert(tuple.getDouble(\"min(field_i)\") == 30);\n      assert(tuple.getDouble(\"max(field_i)\") == 60);\n      assert(tuple.getDouble(\"avg(field_i)\") == 45);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having 'sum(field_i)' = 19\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having (('sum(field_i)' = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 0);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicGroupingFacets() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"sql\", \"select 'str_s', 'count(*)', sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by 'str_s' order by 'sum(field_i)' asc limit 2\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"sql\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where (text='XXXX' AND NOT text='XXXX XXX') group by str_s order by str_s desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getDouble(\"count(*)\") == 4);\n      assert(tuple.getDouble(\"sum(field_i)\") == 180);\n      assert(tuple.getDouble(\"min(field_i)\") == 30);\n      assert(tuple.getDouble(\"max(field_i)\") == 60);\n      assert(tuple.getDouble(\"avg(field_i)\") == 45);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"sql\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having sum(field_i) = 19\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"sql\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"sql\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 0);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7","date":1452631653,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","sourceNew":"  private void testBasicGroupingFacets() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select 'str_s', 'count(*)', sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by 'str_s' order by 'sum(field_i)' asc limit 2\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where (text='XXXX' AND NOT text='XXXX XXX') group by str_s order by str_s desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getDouble(\"count(*)\") == 4);\n      assert(tuple.getDouble(\"sum(field_i)\") == 180);\n      assert(tuple.getDouble(\"min(field_i)\") == 30);\n      assert(tuple.getDouble(\"max(field_i)\") == 60);\n      assert(tuple.getDouble(\"avg(field_i)\") == 45);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s as myString, count(*), sum(field_i) as sum, min(field_i), max(field_i), avg(field_i) from collection1 where (text='XXXX' AND NOT text='XXXX XXX') group by myString order by myString desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getDouble(\"count(*)\") == 4);\n      assert(tuple.getDouble(\"sum\") == 180);\n      assert(tuple.getDouble(\"min(field_i)\") == 30);\n      assert(tuple.getDouble(\"max(field_i)\") == 60);\n      assert(tuple.getDouble(\"avg(field_i)\") == 45);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having 'sum(field_i)' = 19\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having (('sum(field_i)' = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s myString, count(*), sum(field_i) as sum, min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by myString having ((sum = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 0);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicGroupingFacets() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select 'str_s', 'count(*)', sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by 'str_s' order by 'sum(field_i)' asc limit 2\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where (text='XXXX' AND NOT text='XXXX XXX') group by str_s order by str_s desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getDouble(\"count(*)\") == 4);\n      assert(tuple.getDouble(\"sum(field_i)\") == 180);\n      assert(tuple.getDouble(\"min(field_i)\") == 30);\n      assert(tuple.getDouble(\"max(field_i)\") == 60);\n      assert(tuple.getDouble(\"avg(field_i)\") == 45);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having 'sum(field_i)' = 19\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having (('sum(field_i)' = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 0);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ea75dee47a56cd5d6997df5198d96cdba08574","date":1461870891,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","sourceNew":"  private void testBasicGroupingFacets() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select 'str_s', 'count(*)', sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by 'str_s' order by 'sum(field_i)' asc limit 2\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where (text='XXXX' AND NOT text='XXXX XXX') group by str_s order by str_s desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getDouble(\"count(*)\") == 4);\n      assert(tuple.getDouble(\"sum(field_i)\") == 180);\n      assert(tuple.getDouble(\"min(field_i)\") == 30);\n      assert(tuple.getDouble(\"max(field_i)\") == 60);\n      assert(tuple.getDouble(\"avg(field_i)\") == 45);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s as myString, count(*), sum(field_i) as mySum, min(field_i), max(field_i), avg(field_i) from collection1 where (text='XXXX' AND NOT text='XXXX XXX') group by myString order by myString desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getDouble(\"count(*)\") == 4);\n      assert(tuple.getDouble(\"mySum\") == 180);\n      assert(tuple.getDouble(\"min(field_i)\") == 30);\n      assert(tuple.getDouble(\"max(field_i)\") == 60);\n      assert(tuple.getDouble(\"avg(field_i)\") == 45);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"mySum\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"mySum\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having 'sum(field_i)' = 19\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having (('sum(field_i)' = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s as myString, count(*), sum(field_i) as mySum, min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by myString having ((sum = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"mySum\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 0);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicGroupingFacets() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select 'str_s', 'count(*)', sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by 'str_s' order by 'sum(field_i)' asc limit 2\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where (text='XXXX' AND NOT text='XXXX XXX') group by str_s order by str_s desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getDouble(\"count(*)\") == 4);\n      assert(tuple.getDouble(\"sum(field_i)\") == 180);\n      assert(tuple.getDouble(\"min(field_i)\") == 30);\n      assert(tuple.getDouble(\"max(field_i)\") == 60);\n      assert(tuple.getDouble(\"avg(field_i)\") == 45);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s as myString, count(*), sum(field_i) as sum, min(field_i), max(field_i), avg(field_i) from collection1 where (text='XXXX' AND NOT text='XXXX XXX') group by myString order by myString desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getDouble(\"count(*)\") == 4);\n      assert(tuple.getDouble(\"sum\") == 180);\n      assert(tuple.getDouble(\"min(field_i)\") == 30);\n      assert(tuple.getDouble(\"max(field_i)\") == 60);\n      assert(tuple.getDouble(\"avg(field_i)\") == 45);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having 'sum(field_i)' = 19\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having (('sum(field_i)' = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s myString, count(*), sum(field_i) as sum, min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by myString having ((sum = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 0);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99c8e9b44b0cdc8162d6e058914bac3148e80da9","date":1461873164,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","sourceNew":"  private void testBasicGroupingFacets() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s order by sum(field_i) asc limit 2\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n//      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 27); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n//      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n\n      // TODO fix test - Cannot apply 'NOT' to arguments of type 'NOT<JAVATYPE(CLASS JAVA.LANG.STRING)>'. Supported form(s): 'NOT<BOOLEAN>'\n      /*\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where (text='XXXX' AND NOT text='XXXX XXX') group by str_s order by str_s desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 4); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 180); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 30); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 60); //max(field_i)\n//      assert(tuple.getDouble(\"EXPR$5\") == 45); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n//      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 27); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n//      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n      */\n\n      // TODO fix test - Cannot apply 'NOT' to arguments of type 'NOT<JAVATYPE(CLASS JAVA.LANG.STRING)>'. Supported form(s): 'NOT<BOOLEAN>'\n      /*\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s as myString, count(*), sum(field_i) as mySum, min(field_i), max(field_i), avg(field_i) from collection1 where (text='XXXX' AND NOT text='XXXX XXX') group by str_s order by myString desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 4); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 180);\n      assert(tuple.getDouble(\"EXPR$3\") == 30); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 60); //max(field_i)\n//      assert(tuple.getDouble(\"EXPR$5\") == 45); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 19);\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n//      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 27);\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n//      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n      */\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having sum(field_i) = 19\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n//      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n//      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i) as mySum, min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 19);\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n//      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 0);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicGroupingFacets() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select 'str_s', 'count(*)', sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by 'str_s' order by 'sum(field_i)' asc limit 2\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where (text='XXXX' AND NOT text='XXXX XXX') group by str_s order by str_s desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getDouble(\"count(*)\") == 4);\n      assert(tuple.getDouble(\"sum(field_i)\") == 180);\n      assert(tuple.getDouble(\"min(field_i)\") == 30);\n      assert(tuple.getDouble(\"max(field_i)\") == 60);\n      assert(tuple.getDouble(\"avg(field_i)\") == 45);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s as myString, count(*), sum(field_i) as mySum, min(field_i), max(field_i), avg(field_i) from collection1 where (text='XXXX' AND NOT text='XXXX XXX') group by myString order by myString desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getDouble(\"count(*)\") == 4);\n      assert(tuple.getDouble(\"mySum\") == 180);\n      assert(tuple.getDouble(\"min(field_i)\") == 30);\n      assert(tuple.getDouble(\"max(field_i)\") == 60);\n      assert(tuple.getDouble(\"avg(field_i)\") == 45);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"mySum\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"mySum\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having 'sum(field_i)' = 19\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having (('sum(field_i)' = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s as myString, count(*), sum(field_i) as mySum, min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by myString having ((sum = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"mySum\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 0);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b67f9cce921a1f94ec0a28c4eb85bcd887c8aa4","date":1461940050,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","sourceNew":"  private void testBasicGroupingFacets() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"order by sum(field_i) asc limit 2\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 27); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n\n      // TODO fix test - Cannot apply 'NOT' to arguments of type 'NOT<JAVATYPE(CLASS JAVA.LANG.STRING)>'. Supported form(s): 'NOT<BOOLEAN>'\n      /*\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \"\n          + \"cast(avg(1.0 * field_i) as float) from collection1 where (text='XXXX' AND NOT text='XXXX XXX') \"\n          + \"group by str_s order by str_s desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 4); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 180); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 30); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 60); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 45); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 27); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n      */\n\n      // TODO fix test - Cannot apply 'NOT' to arguments of type 'NOT<JAVATYPE(CLASS JAVA.LANG.STRING)>'. Supported form(s): 'NOT<BOOLEAN>'\n      /*\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s as myString, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \"\n          + \"cast(avg(1.0 * field_i) as float) from collection1 where (text='XXXX' AND NOT text='XXXX XXX') \"\n          + \"group by str_s order by myString desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 4); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 180);\n      assert(tuple.getDouble(\"EXPR$3\") == 30); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 60); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 45); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 19);\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 27);\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n      */\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having sum(field_i) = 19\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 19);\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 0);\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicGroupingFacets() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s order by sum(field_i) asc limit 2\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n//      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 27); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n//      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n\n      // TODO fix test - Cannot apply 'NOT' to arguments of type 'NOT<JAVATYPE(CLASS JAVA.LANG.STRING)>'. Supported form(s): 'NOT<BOOLEAN>'\n      /*\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where (text='XXXX' AND NOT text='XXXX XXX') group by str_s order by str_s desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 4); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 180); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 30); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 60); //max(field_i)\n//      assert(tuple.getDouble(\"EXPR$5\") == 45); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n//      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 27); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n//      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n      */\n\n      // TODO fix test - Cannot apply 'NOT' to arguments of type 'NOT<JAVATYPE(CLASS JAVA.LANG.STRING)>'. Supported form(s): 'NOT<BOOLEAN>'\n      /*\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s as myString, count(*), sum(field_i) as mySum, min(field_i), max(field_i), avg(field_i) from collection1 where (text='XXXX' AND NOT text='XXXX XXX') group by str_s order by myString desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 4); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 180);\n      assert(tuple.getDouble(\"EXPR$3\") == 30); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 60); //max(field_i)\n//      assert(tuple.getDouble(\"EXPR$5\") == 45); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 19);\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n//      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 27);\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n//      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n      */\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having sum(field_i) = 19\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n//      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n//      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i) as mySum, min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 19);\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n//      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 0);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"908656025e558a536b1b781cf8d02a84e7acb262","date":1461964320,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","sourceNew":"  private void testBasicGroupingFacets() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"order by sum(field_i) asc limit 2\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 27); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n\n      // TODO fix test - Cannot apply 'NOT' to arguments of type 'NOT<JAVATYPE(CLASS JAVA.LANG.STRING)>'. Supported form(s): 'NOT<BOOLEAN>'\n      /*\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \"\n          + \"cast(avg(1.0 * field_i) as float) from collection1 where (text='XXXX' AND NOT (text='XXXX XXX')) \"\n          + \"group by str_s order by str_s desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 4); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 180); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 30); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 60); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 45); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 27); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n\n      // TODO fix test - Cannot apply 'NOT' to arguments of type 'NOT<JAVATYPE(CLASS JAVA.LANG.STRING)>'. Supported form(s): 'NOT<BOOLEAN>'\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s as myString, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \"\n          + \"cast(avg(1.0 * field_i) as float) from collection1 where (text='XXXX' AND NOT (text='XXXX XXX')) \"\n          + \"group by str_s order by myString desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 4); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 180);\n      assert(tuple.getDouble(\"EXPR$3\") == 30); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 60); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 45); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 19);\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 27);\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n      */\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having sum(field_i) = 19\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 19);\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 0);\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicGroupingFacets() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"order by sum(field_i) asc limit 2\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 27); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n\n      // TODO fix test - Cannot apply 'NOT' to arguments of type 'NOT<JAVATYPE(CLASS JAVA.LANG.STRING)>'. Supported form(s): 'NOT<BOOLEAN>'\n      /*\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \"\n          + \"cast(avg(1.0 * field_i) as float) from collection1 where (text='XXXX' AND NOT text='XXXX XXX') \"\n          + \"group by str_s order by str_s desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 4); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 180); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 30); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 60); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 45); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 27); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n      */\n\n      // TODO fix test - Cannot apply 'NOT' to arguments of type 'NOT<JAVATYPE(CLASS JAVA.LANG.STRING)>'. Supported form(s): 'NOT<BOOLEAN>'\n      /*\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s as myString, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \"\n          + \"cast(avg(1.0 * field_i) as float) from collection1 where (text='XXXX' AND NOT text='XXXX XXX') \"\n          + \"group by str_s order by myString desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 4); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 180);\n      assert(tuple.getDouble(\"EXPR$3\") == 30); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 60); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 45); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 19);\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 27);\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n      */\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having sum(field_i) = 19\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 19);\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 0);\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","sourceNew":"  private void testBasicGroupingFacets() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n      \"stmt\", \"select 'str_s', 'count(*)', sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by 'str_s' order by 'sum(field_i)' asc limit 2\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where (text='XXXX' AND NOT text='XXXX XXX') group by str_s order by str_s desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getDouble(\"count(*)\") == 4);\n      assert(tuple.getDouble(\"sum(field_i)\") == 180);\n      assert(tuple.getDouble(\"min(field_i)\") == 30);\n      assert(tuple.getDouble(\"max(field_i)\") == 60);\n      assert(tuple.getDouble(\"avg(field_i)\") == 45);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s as myString, count(*), sum(field_i) as sum, min(field_i), max(field_i), avg(field_i) from collection1 where (text='XXXX' AND NOT text='XXXX XXX') group by myString order by myString desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getDouble(\"count(*)\") == 4);\n      assert(tuple.getDouble(\"sum\") == 180);\n      assert(tuple.getDouble(\"min(field_i)\") == 30);\n      assert(tuple.getDouble(\"max(field_i)\") == 60);\n      assert(tuple.getDouble(\"avg(field_i)\") == 45);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having 'sum(field_i)' = 19\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having (('sum(field_i)' = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s myString, count(*), sum(field_i) as sum, min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by myString having ((sum = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 0);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicGroupingFacets() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select 'str_s', 'count(*)', sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by 'str_s' order by 'sum(field_i)' asc limit 2\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where (text='XXXX' AND NOT text='XXXX XXX') group by str_s order by str_s desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getDouble(\"count(*)\") == 4);\n      assert(tuple.getDouble(\"sum(field_i)\") == 180);\n      assert(tuple.getDouble(\"min(field_i)\") == 30);\n      assert(tuple.getDouble(\"max(field_i)\") == 60);\n      assert(tuple.getDouble(\"avg(field_i)\") == 45);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s as myString, count(*), sum(field_i) as sum, min(field_i), max(field_i), avg(field_i) from collection1 where (text='XXXX' AND NOT text='XXXX XXX') group by myString order by myString desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getDouble(\"count(*)\") == 4);\n      assert(tuple.getDouble(\"sum\") == 180);\n      assert(tuple.getDouble(\"min(field_i)\") == 30);\n      assert(tuple.getDouble(\"max(field_i)\") == 60);\n      assert(tuple.getDouble(\"avg(field_i)\") == 45);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having 'sum(field_i)' = 19\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having (('sum(field_i)' = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s myString, count(*), sum(field_i) as sum, min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by myString having ((sum = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 0);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","sourceNew":"  private void testBasicGroupingFacets() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n      \"stmt\", \"select 'str_s', 'count(*)', sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by 'str_s' order by 'sum(field_i)' asc limit 2\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where (text='XXXX' AND NOT text='XXXX XXX') group by str_s order by str_s desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getDouble(\"count(*)\") == 4);\n      assert(tuple.getDouble(\"sum(field_i)\") == 180);\n      assert(tuple.getDouble(\"min(field_i)\") == 30);\n      assert(tuple.getDouble(\"max(field_i)\") == 60);\n      assert(tuple.getDouble(\"avg(field_i)\") == 45);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s as myString, count(*), sum(field_i) as sum, min(field_i), max(field_i), avg(field_i) from collection1 where (text='XXXX' AND NOT text='XXXX XXX') group by myString order by myString desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getDouble(\"count(*)\") == 4);\n      assert(tuple.getDouble(\"sum\") == 180);\n      assert(tuple.getDouble(\"min(field_i)\") == 30);\n      assert(tuple.getDouble(\"max(field_i)\") == 60);\n      assert(tuple.getDouble(\"avg(field_i)\") == 45);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having 'sum(field_i)' = 19\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having (('sum(field_i)' = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s myString, count(*), sum(field_i) as sum, min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by myString having ((sum = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 0);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicGroupingFacets() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select 'str_s', 'count(*)', sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by 'str_s' order by 'sum(field_i)' asc limit 2\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where (text='XXXX' AND NOT text='XXXX XXX') group by str_s order by str_s desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getDouble(\"count(*)\") == 4);\n      assert(tuple.getDouble(\"sum(field_i)\") == 180);\n      assert(tuple.getDouble(\"min(field_i)\") == 30);\n      assert(tuple.getDouble(\"max(field_i)\") == 60);\n      assert(tuple.getDouble(\"avg(field_i)\") == 45);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s as myString, count(*), sum(field_i) as sum, min(field_i), max(field_i), avg(field_i) from collection1 where (text='XXXX' AND NOT text='XXXX XXX') group by myString order by myString desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getDouble(\"count(*)\") == 4);\n      assert(tuple.getDouble(\"sum\") == 180);\n      assert(tuple.getDouble(\"min(field_i)\") == 30);\n      assert(tuple.getDouble(\"max(field_i)\") == 60);\n      assert(tuple.getDouble(\"avg(field_i)\") == 45);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having 'sum(field_i)' = 19\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having (('sum(field_i)' = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s myString, count(*), sum(field_i) as sum, min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by myString having ((sum = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 0);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","sourceNew":"  private void testBasicGroupingFacets() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n      \"stmt\", \"select 'str_s', 'count(*)', sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by 'str_s' order by 'sum(field_i)' asc limit 2\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where (text='XXXX' AND NOT text='XXXX XXX') group by str_s order by str_s desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getDouble(\"count(*)\") == 4);\n      assert(tuple.getDouble(\"sum(field_i)\") == 180);\n      assert(tuple.getDouble(\"min(field_i)\") == 30);\n      assert(tuple.getDouble(\"max(field_i)\") == 60);\n      assert(tuple.getDouble(\"avg(field_i)\") == 45);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s as myString, count(*), sum(field_i) as sum, min(field_i), max(field_i), avg(field_i) from collection1 where (text='XXXX' AND NOT text='XXXX XXX') group by myString order by myString desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getDouble(\"count(*)\") == 4);\n      assert(tuple.getDouble(\"sum\") == 180);\n      assert(tuple.getDouble(\"min(field_i)\") == 30);\n      assert(tuple.getDouble(\"max(field_i)\") == 60);\n      assert(tuple.getDouble(\"avg(field_i)\") == 45);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having 'sum(field_i)' = 19\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having (('sum(field_i)' = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s myString, count(*), sum(field_i) as sum, min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by myString having ((sum = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 0);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicGroupingFacets() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select 'str_s', 'count(*)', sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by 'str_s' order by 'sum(field_i)' asc limit 2\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where (text='XXXX' AND NOT text='XXXX XXX') group by str_s order by str_s desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getDouble(\"count(*)\") == 4);\n      assert(tuple.getDouble(\"sum(field_i)\") == 180);\n      assert(tuple.getDouble(\"min(field_i)\") == 30);\n      assert(tuple.getDouble(\"max(field_i)\") == 60);\n      assert(tuple.getDouble(\"avg(field_i)\") == 45);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s as myString, count(*), sum(field_i) as sum, min(field_i), max(field_i), avg(field_i) from collection1 where (text='XXXX' AND NOT text='XXXX XXX') group by myString order by myString desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getDouble(\"count(*)\") == 4);\n      assert(tuple.getDouble(\"sum\") == 180);\n      assert(tuple.getDouble(\"min(field_i)\") == 30);\n      assert(tuple.getDouble(\"max(field_i)\") == 60);\n      assert(tuple.getDouble(\"avg(field_i)\") == 45);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having 'sum(field_i)' = 19\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having (('sum(field_i)' = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s myString, count(*), sum(field_i) as sum, min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by myString having ((sum = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 0);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","sourceNew":"  private void testBasicGroupingFacets() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"order by sum(field_i) asc limit 2\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 27); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n\n      // TODO fix test - Cannot apply 'NOT' to arguments of type 'NOT<JAVATYPE(CLASS JAVA.LANG.STRING)>'. Supported form(s): 'NOT<BOOLEAN>'\n      /*\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \"\n          + \"cast(avg(1.0 * field_i) as float) from collection1 where (text='XXXX' AND NOT (text='XXXX XXX')) \"\n          + \"group by str_s order by str_s desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 4); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 180); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 30); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 60); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 45); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 27); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n\n      // TODO fix test - Cannot apply 'NOT' to arguments of type 'NOT<JAVATYPE(CLASS JAVA.LANG.STRING)>'. Supported form(s): 'NOT<BOOLEAN>'\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s as myString, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \"\n          + \"cast(avg(1.0 * field_i) as float) from collection1 where (text='XXXX' AND NOT (text='XXXX XXX')) \"\n          + \"group by str_s order by myString desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 4); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 180);\n      assert(tuple.getDouble(\"EXPR$3\") == 30); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 60); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 45); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 19);\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 27);\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n      */\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having sum(field_i) = 19\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\",  \"select str_s, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 19);\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 0);\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicGroupingFacets() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"order by sum(field_i) asc limit 2\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 27); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n\n      // TODO fix test - Cannot apply 'NOT' to arguments of type 'NOT<JAVATYPE(CLASS JAVA.LANG.STRING)>'. Supported form(s): 'NOT<BOOLEAN>'\n      /*\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \"\n          + \"cast(avg(1.0 * field_i) as float) from collection1 where (text='XXXX' AND NOT (text='XXXX XXX')) \"\n          + \"group by str_s order by str_s desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 4); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 180); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 30); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 60); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 45); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 27); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n\n      // TODO fix test - Cannot apply 'NOT' to arguments of type 'NOT<JAVATYPE(CLASS JAVA.LANG.STRING)>'. Supported form(s): 'NOT<BOOLEAN>'\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s as myString, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \"\n          + \"cast(avg(1.0 * field_i) as float) from collection1 where (text='XXXX' AND NOT (text='XXXX XXX')) \"\n          + \"group by str_s order by myString desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 4); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 180);\n      assert(tuple.getDouble(\"EXPR$3\") == 30); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 60); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 45); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 19);\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 27);\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n      */\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having sum(field_i) = 19\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 19);\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"aggregationMode\", \"facet\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 0);\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"612da0a0a2d5f4409da55729b9833e799f905ac5","date":1479142562,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","sourceNew":"  private void testBasicGroupingFacets() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      indexr(\"id\", \"9\", \"text\", \"XXXX XXXY\", \"str_s\", \"d\", \"field_i\", \"70\");\n      commit();\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"order by sum(field_i) asc limit 2\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 27); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \"\n          + \"cast(avg(1.0 * field_i) as float) from collection1 where (text='XXXX' AND NOT (text='XXXY')) \"\n          + \"group by str_s order by str_s desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 4); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 180); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 30); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 60); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 45); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 27); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s as myString, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \"\n          + \"cast(avg(1.0 * field_i) as float) from collection1 where (text='XXXX' AND NOT (text='XXXY')) \"\n          + \"group by str_s order by myString desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 4); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 180);\n      assert(tuple.getDouble(\"EXPR$3\") == 30); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 60); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 45); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 19);\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 27);\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having sum(field_i) = 19\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\",  \"select str_s, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 19);\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 0);\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicGroupingFacets() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"order by sum(field_i) asc limit 2\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 27); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n\n      // TODO fix test - Cannot apply 'NOT' to arguments of type 'NOT<JAVATYPE(CLASS JAVA.LANG.STRING)>'. Supported form(s): 'NOT<BOOLEAN>'\n      /*\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \"\n          + \"cast(avg(1.0 * field_i) as float) from collection1 where (text='XXXX' AND NOT (text='XXXX XXX')) \"\n          + \"group by str_s order by str_s desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 4); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 180); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 30); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 60); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 45); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 27); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n\n      // TODO fix test - Cannot apply 'NOT' to arguments of type 'NOT<JAVATYPE(CLASS JAVA.LANG.STRING)>'. Supported form(s): 'NOT<BOOLEAN>'\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s as myString, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \"\n          + \"cast(avg(1.0 * field_i) as float) from collection1 where (text='XXXX' AND NOT (text='XXXX XXX')) \"\n          + \"group by str_s order by myString desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 4); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 180);\n      assert(tuple.getDouble(\"EXPR$3\") == 30); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 60); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 45); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 19);\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 27);\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n      */\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having sum(field_i) = 19\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\",  \"select str_s, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 19);\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 0);\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":3,"author":"Joel Bernstein","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","sourceNew":"  private void testBasicGroupingFacets() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      indexr(\"id\", \"9\", \"text\", \"XXXX XXXY\", \"str_s\", \"d\", \"field_i\", \"70\");\n      commit();\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"order by sum(field_i) asc limit 2\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 27); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \"\n          + \"cast(avg(1.0 * field_i) as float) from collection1 where (text='XXXX' AND NOT (text='XXXY')) \"\n          + \"group by str_s order by str_s desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 4); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 180); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 30); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 60); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 45); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 27); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s as myString, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \"\n          + \"cast(avg(1.0 * field_i) as float) from collection1 where (text='XXXX' AND NOT (text='XXXY')) \"\n          + \"group by str_s order by myString desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 4); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 180);\n      assert(tuple.getDouble(\"EXPR$3\") == 30); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 60); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 45); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 19);\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 27);\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having sum(field_i) = 19\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\",  \"select str_s, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 19);\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 0);\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicGroupingFacets() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n      \"stmt\", \"select 'str_s', 'count(*)', sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by 'str_s' order by 'sum(field_i)' asc limit 2\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where (text='XXXX' AND NOT text='XXXX XXX') group by str_s order by str_s desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getDouble(\"count(*)\") == 4);\n      assert(tuple.getDouble(\"sum(field_i)\") == 180);\n      assert(tuple.getDouble(\"min(field_i)\") == 30);\n      assert(tuple.getDouble(\"max(field_i)\") == 60);\n      assert(tuple.getDouble(\"avg(field_i)\") == 45);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s as myString, count(*), sum(field_i) as sum, min(field_i), max(field_i), avg(field_i) from collection1 where (text='XXXX' AND NOT text='XXXX XXX') group by myString order by myString desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getDouble(\"count(*)\") == 4);\n      assert(tuple.getDouble(\"sum\") == 180);\n      assert(tuple.getDouble(\"min(field_i)\") == 30);\n      assert(tuple.getDouble(\"max(field_i)\") == 60);\n      assert(tuple.getDouble(\"avg(field_i)\") == 45);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum\") == 27);\n      assert(tuple.getDouble(\"min(field_i)\") == 7);\n      assert(tuple.getDouble(\"max(field_i)\") == 20);\n      assert(tuple.getDouble(\"avg(field_i)\") == 13.5D);\n\n\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having 'sum(field_i)' = 19\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having (('sum(field_i)' = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum(field_i)\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s myString, count(*), sum(field_i) as sum, min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by myString having ((sum = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getDouble(\"count(*)\") == 2);\n      assert(tuple.getDouble(\"sum\") == 19);\n      assert(tuple.getDouble(\"min(field_i)\") == 8);\n      assert(tuple.getDouble(\"max(field_i)\") == 11);\n      assert(tuple.getDouble(\"avg(field_i)\") == 9.5D);\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 0);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9fe3175bbaa122d67f736a75c2984617c502cc0","date":1490722938,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","sourceNew":"  private void testBasicGroupingFacets() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      indexr(\"id\", \"9\", \"text\", \"XXXX XXXY\", \"str_s\", \"d\", \"field_i\", \"70\");\n      commit();\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"order by sum(field_i) asc limit 2\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 27); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n              \"avg(field_i) from collection1 where text='XXXX' group by str_s \" +\n              \"order by sum(field_i) asc limit 2\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 10); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 27); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 14); //avg(field_i)\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \"\n          + \"cast(avg(1.0 * field_i) as float) from collection1 where (text='XXXX' AND NOT (text='XXXY')) \"\n          + \"group by str_s order by str_s desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 4); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 180); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 30); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 60); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 45); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 27); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s as myString, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \"\n          + \"cast(avg(1.0 * field_i) as float) from collection1 where (text='XXXX' AND NOT (text='XXXY')) \"\n          + \"group by str_s order by myString desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 4); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 180);\n      assert(tuple.getDouble(\"EXPR$3\") == 30); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 60); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 45); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 19);\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 27);\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having sum(field_i) = 19\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\",  \"select str_s, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 19);\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 0);\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicGroupingFacets() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      indexr(\"id\", \"9\", \"text\", \"XXXX XXXY\", \"str_s\", \"d\", \"field_i\", \"70\");\n      commit();\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"order by sum(field_i) asc limit 2\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 27); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \"\n          + \"cast(avg(1.0 * field_i) as float) from collection1 where (text='XXXX' AND NOT (text='XXXY')) \"\n          + \"group by str_s order by str_s desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 4); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 180); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 30); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 60); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 45); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 27); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s as myString, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \"\n          + \"cast(avg(1.0 * field_i) as float) from collection1 where (text='XXXX' AND NOT (text='XXXY')) \"\n          + \"group by str_s order by myString desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 4); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 180);\n      assert(tuple.getDouble(\"EXPR$3\") == 30); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 60); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 45); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 19);\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 27);\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having sum(field_i) = 19\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\",  \"select str_s, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 19);\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 0);\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9b741b54c163686a5fd077895a797daa9b0b95f","date":1490873946,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","sourceNew":"  private void testBasicGroupingFacets() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      indexr(\"id\", \"9\", \"text\", \"XXXX XXXY\", \"str_s\", \"d\", \"field_i\", \"70\");\n      commit();\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"order by sum(field_i) asc limit 2\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 27); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n              \"avg(field_i) from collection1 where text='XXXX' group by str_s \" +\n              \"order by sum(field_i) asc limit 2\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 10); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 27); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 14); //avg(field_i)\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \"\n          + \"cast(avg(1.0 * field_i) as float) from collection1 where (text='XXXX' AND NOT (text='XXXY')) \"\n          + \"group by str_s order by str_s desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 4); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 180); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 30); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 60); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 45); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 27); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s as myString, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \"\n          + \"cast(avg(1.0 * field_i) as float) from collection1 where (text='XXXX' AND NOT (text='XXXY')) \"\n          + \"group by str_s order by myString desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 4); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 180);\n      assert(tuple.getDouble(\"EXPR$3\") == 30); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 60); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 45); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 19);\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 27);\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having sum(field_i) = 19\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\",  \"select str_s, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 19);\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 0);\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testBasicGroupingFacets() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      indexr(\"id\", \"9\", \"text\", \"XXXX XXXY\", \"str_s\", \"d\", \"field_i\", \"70\");\n      commit();\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"order by sum(field_i) asc limit 2\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 27); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \"\n          + \"cast(avg(1.0 * field_i) as float) from collection1 where (text='XXXX' AND NOT (text='XXXY')) \"\n          + \"group by str_s order by str_s desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 4); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 180); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 30); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 60); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 45); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 27); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s as myString, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \"\n          + \"cast(avg(1.0 * field_i) as float) from collection1 where (text='XXXX' AND NOT (text='XXXY')) \"\n          + \"group by str_s order by myString desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 4); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 180);\n      assert(tuple.getDouble(\"EXPR$3\") == 30); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 60); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 45); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 19);\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 27);\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having sum(field_i) = 19\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\",  \"select str_s, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 19);\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 0);\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c58a62203315881cce5089ef67ffee6b8a988a75","date":1544601986,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","sourceNew":"  private void testBasicGroupingFacets() throws Exception {\n\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n    indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n    indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n    indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n    indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n    indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n    indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n    indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n    indexr(\"id\", \"9\", \"text\", \"XXXX XXXY\", \"str_s\", \"d\", \"field_i\", \"70\");\n    commit();\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n            \"order by sum(field_i) asc limit 2\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, sParams);\n    List<Tuple> tuples = getTuples(solrStream);\n\n    // Only two results because of the limit.\n    assert (tuples.size() == 2);\n\n    Tuple tuple;\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 27); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 13.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"avg(field_i) from collection1 where text='XXXX' group by str_s \" +\n            \"order by sum(field_i) asc limit 2\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    // Only two results because of the limit.\n    assert (tuples.size() == 2);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 10); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 27); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 14); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \"\n            + \"cast(avg(1.0 * field_i) as float) from collection1 where (text='XXXX' AND NOT (text='XXXY')) \"\n            + \"group by str_s order by str_s desc\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    // The sort by and order by match and no limit is applied. All the Tuples should be returned in\n    // this scenario.\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 4); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 180); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 30); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 60); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 45); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 27); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 13.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s as myString, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \"\n            + \"cast(avg(1.0 * field_i) as float) from collection1 where (text='XXXX' AND NOT (text='XXXY')) \"\n            + \"group by str_s order by myString desc\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    // The sort by and order by match and no limit is applied. All the Tuples should be returned in\n    // this scenario.\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"myString\").equals(\"c\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 4); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 180);\n    assert (tuple.getDouble(\"EXPR$3\") == 30); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 60); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 45); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 19);\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 27);\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 13.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having sum(field_i) = 19\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n            \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n            \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 19);\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n            \"having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 0);\n\n  }\n\n","sourceOld":"  private void testBasicGroupingFacets() throws Exception {\n    try {\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      indexr(\"id\", \"9\", \"text\", \"XXXX XXXY\", \"str_s\", \"d\", \"field_i\", \"70\");\n      commit();\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"order by sum(field_i) asc limit 2\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 27); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n              \"avg(field_i) from collection1 where text='XXXX' group by str_s \" +\n              \"order by sum(field_i) asc limit 2\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 10); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 27); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 14); //avg(field_i)\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \"\n          + \"cast(avg(1.0 * field_i) as float) from collection1 where (text='XXXX' AND NOT (text='XXXY')) \"\n          + \"group by str_s order by str_s desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 4); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 180); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 30); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 60); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 45); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 27); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s as myString, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \"\n          + \"cast(avg(1.0 * field_i) as float) from collection1 where (text='XXXX' AND NOT (text='XXXY')) \"\n          + \"group by str_s order by myString desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      //The sort by and order by match and no limit is applied. All the Tuples should be returned in\n      //this scenario.\n\n      assert(tuples.size() == 3);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 4); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 180);\n      assert(tuple.getDouble(\"EXPR$3\") == 30); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 60); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 45); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 19);\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 27);\n      assert(tuple.getDouble(\"EXPR$3\") == 7); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 20); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 13.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having sum(field_i) = 19\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"EXPR$2\") == 19); //sum(field_i)\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\",  \"select str_s, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 1);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getDouble(\"EXPR$1\") == 2); //count(*)\n      assert(tuple.getDouble(\"mySum\") == 19);\n      assert(tuple.getDouble(\"EXPR$3\") == 8); //min(field_i)\n      assert(tuple.getDouble(\"EXPR$4\") == 11); //max(field_i)\n      assert(tuple.getDouble(\"EXPR$5\") == 9.5D); //avg(field_i)\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n          \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n          \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n          \"having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 0);\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"600937be95b5a041815220371fa7882e73031d56","date":1551734162,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","sourceNew":"  private void testBasicGroupingFacets() throws Exception {\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n    indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n    indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n    indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n    indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n    indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n    indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n    indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n    indexr(\"id\", \"9\", \"text\", \"XXXX XXXY\", \"str_s\", \"d\", \"field_i\", \"70\");\n    commit();\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n            \"order by sum(field_i) asc limit 2\");\n\n    List<Tuple> tuples = getTuples(sParams);\n\n    // Only two results because of the limit.\n    assert (tuples.size() == 2);\n\n    Tuple tuple;\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 27); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 13.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"avg(field_i) from collection1 where text='XXXX' group by str_s \" +\n            \"order by sum(field_i) asc limit 2\");\n\n    tuples = getTuples(sParams);\n\n    // Only two results because of the limit.\n    assert (tuples.size() == 2);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 10); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 27); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 14); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \"\n            + \"cast(avg(1.0 * field_i) as float) from collection1 where (text='XXXX' AND NOT (text='XXXY')) \"\n            + \"group by str_s order by str_s desc\");\n\n    tuples = getTuples(sParams);\n\n    // The sort by and order by match and no limit is applied. All the Tuples should be returned in\n    // this scenario.\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 4); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 180); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 30); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 60); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 45); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 27); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 13.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s as myString, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \"\n            + \"cast(avg(1.0 * field_i) as float) from collection1 where (text='XXXX' AND NOT (text='XXXY')) \"\n            + \"group by str_s order by myString desc\");\n\n    tuples = getTuples(sParams);\n\n    // The sort by and order by match and no limit is applied. All the Tuples should be returned in\n    // this scenario.\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"myString\").equals(\"c\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 4); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 180);\n    assert (tuple.getDouble(\"EXPR$3\") == 30); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 60); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 45); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 19);\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 27);\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 13.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having sum(field_i) = 19\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n            \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n            \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 19);\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n            \"having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 0);\n\n  }\n\n","sourceOld":"  private void testBasicGroupingFacets() throws Exception {\n\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n    indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n    indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n    indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n    indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n    indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n    indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n    indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n    indexr(\"id\", \"9\", \"text\", \"XXXX XXXY\", \"str_s\", \"d\", \"field_i\", \"70\");\n    commit();\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n            \"order by sum(field_i) asc limit 2\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, sParams);\n    List<Tuple> tuples = getTuples(solrStream);\n\n    // Only two results because of the limit.\n    assert (tuples.size() == 2);\n\n    Tuple tuple;\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 27); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 13.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"avg(field_i) from collection1 where text='XXXX' group by str_s \" +\n            \"order by sum(field_i) asc limit 2\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    // Only two results because of the limit.\n    assert (tuples.size() == 2);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 10); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 27); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 14); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \"\n            + \"cast(avg(1.0 * field_i) as float) from collection1 where (text='XXXX' AND NOT (text='XXXY')) \"\n            + \"group by str_s order by str_s desc\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    // The sort by and order by match and no limit is applied. All the Tuples should be returned in\n    // this scenario.\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 4); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 180); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 30); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 60); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 45); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 27); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 13.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s as myString, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \"\n            + \"cast(avg(1.0 * field_i) as float) from collection1 where (text='XXXX' AND NOT (text='XXXY')) \"\n            + \"group by str_s order by myString desc\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    // The sort by and order by match and no limit is applied. All the Tuples should be returned in\n    // this scenario.\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"myString\").equals(\"c\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 4); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 180);\n    assert (tuple.getDouble(\"EXPR$3\") == 30); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 60); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 45); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 19);\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 27);\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 13.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having sum(field_i) = 19\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n            \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n            \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 19);\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n            \"having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22191e72f6c40dec88c9b94f9bb55c7527772a47","date":1553715407,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler2[TestSQLHandler]#testBasicGroupingFacets().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","sourceNew":"  @Test\n  public void testBasicGroupingFacets() throws Exception {\n\n    new UpdateRequest()\n        .add(\"id\", \"1\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\")\n        .add(\"id\", \"2\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\")\n        .add(\"id\", \"3\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\")\n        .add(\"id\", \"4\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\")\n        .add(\"id\", \"5\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\")\n        .add(\"id\", \"6\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\")\n        .add(\"id\", \"7\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\")\n        .add(\"id\", \"8\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\")\n        .add(\"id\", \"9\", \"text_t\", \"XXXX XXXY\", \"str_s\", \"d\", \"field_i\", \"70\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s \" +\n            \"order by sum(field_i) asc limit 2\");\n\n    List<Tuple> tuples = getTuples(sParams, baseUrl);\n\n    // Only two results because of the limit.\n    assert (tuples.size() == 2);\n\n    Tuple tuple;\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 27); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 13.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"avg(field_i) from collection1 where text_t='XXXX' group by str_s \" +\n            \"order by sum(field_i) asc limit 2\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    // Only two results because of the limit.\n    assert (tuples.size() == 2);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 10); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 27); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 14); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \"\n            + \"cast(avg(1.0 * field_i) as float) from collection1 where (text_t='XXXX' AND NOT (text_t='XXXY')) \"\n            + \"group by str_s order by str_s desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    // The sort by and order by match and no limit is applied. All the Tuples should be returned in\n    // this scenario.\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 4); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 180); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 30); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 60); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 45); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 27); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 13.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s as myString, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \"\n            + \"cast(avg(1.0 * field_i) as float) from collection1 where (text_t='XXXX' AND NOT (text_t='XXXY')) \"\n            + \"group by str_s order by myString desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    // The sort by and order by match and no limit is applied. All the Tuples should be returned in\n    // this scenario.\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"myString\").equals(\"c\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 4); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 180);\n    assert (tuple.getDouble(\"EXPR$3\") == 30); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 60); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 45); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 19);\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 27);\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 13.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s having sum(field_i) = 19\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s \" +\n            \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s \" +\n            \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 19);\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s \" +\n            \"having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 0);\n\n  }\n\n","sourceOld":"  private void testBasicGroupingFacets() throws Exception {\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n    indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n    indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n    indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n    indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n    indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n    indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n    indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n    indexr(\"id\", \"9\", \"text\", \"XXXX XXXY\", \"str_s\", \"d\", \"field_i\", \"70\");\n    commit();\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n            \"order by sum(field_i) asc limit 2\");\n\n    List<Tuple> tuples = getTuples(sParams);\n\n    // Only two results because of the limit.\n    assert (tuples.size() == 2);\n\n    Tuple tuple;\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 27); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 13.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"avg(field_i) from collection1 where text='XXXX' group by str_s \" +\n            \"order by sum(field_i) asc limit 2\");\n\n    tuples = getTuples(sParams);\n\n    // Only two results because of the limit.\n    assert (tuples.size() == 2);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 10); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 27); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 14); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \"\n            + \"cast(avg(1.0 * field_i) as float) from collection1 where (text='XXXX' AND NOT (text='XXXY')) \"\n            + \"group by str_s order by str_s desc\");\n\n    tuples = getTuples(sParams);\n\n    // The sort by and order by match and no limit is applied. All the Tuples should be returned in\n    // this scenario.\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 4); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 180); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 30); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 60); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 45); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 27); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 13.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s as myString, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \"\n            + \"cast(avg(1.0 * field_i) as float) from collection1 where (text='XXXX' AND NOT (text='XXXY')) \"\n            + \"group by str_s order by myString desc\");\n\n    tuples = getTuples(sParams);\n\n    // The sort by and order by match and no limit is applied. All the Tuples should be returned in\n    // this scenario.\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"myString\").equals(\"c\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 4); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 180);\n    assert (tuple.getDouble(\"EXPR$3\") == 30); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 60); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 45); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 19);\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 27);\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 13.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having sum(field_i) = 19\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n            \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n            \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 19);\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n            \"having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94e31112925a65b1d36f9064772080e25b5ef373","date":1553715407,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler2[TestSQLHandler]#testBasicGroupingFacets().mjava","sourceNew":"  @Test\n  public void testBasicGroupingFacets() throws Exception {\n\n    new UpdateRequest()\n        .add(\"id\", \"1\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\")\n        .add(\"id\", \"2\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\")\n        .add(\"id\", \"3\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\")\n        .add(\"id\", \"4\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\")\n        .add(\"id\", \"5\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\")\n        .add(\"id\", \"6\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\")\n        .add(\"id\", \"7\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\")\n        .add(\"id\", \"8\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\")\n        .add(\"id\", \"9\", \"text_t\", \"XXXX XXXY\", \"str_s\", \"d\", \"field_i\", \"70\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s \" +\n            \"order by sum(field_i) asc limit 2\");\n\n    List<Tuple> tuples = getTuples(sParams, baseUrl);\n\n    // Only two results because of the limit.\n    assert (tuples.size() == 2);\n\n    Tuple tuple;\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 27); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 13.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"avg(field_i) from collection1 where text_t='XXXX' group by str_s \" +\n            \"order by sum(field_i) asc limit 2\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    // Only two results because of the limit.\n    assert (tuples.size() == 2);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 10); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 27); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 14); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \"\n            + \"cast(avg(1.0 * field_i) as float) from collection1 where (text_t='XXXX' AND NOT (text_t='XXXY')) \"\n            + \"group by str_s order by str_s desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    // The sort by and order by match and no limit is applied. All the Tuples should be returned in\n    // this scenario.\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 4); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 180); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 30); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 60); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 45); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 27); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 13.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s as myString, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \"\n            + \"cast(avg(1.0 * field_i) as float) from collection1 where (text_t='XXXX' AND NOT (text_t='XXXY')) \"\n            + \"group by str_s order by myString desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    // The sort by and order by match and no limit is applied. All the Tuples should be returned in\n    // this scenario.\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"myString\").equals(\"c\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 4); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 180);\n    assert (tuple.getDouble(\"EXPR$3\") == 30); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 60); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 45); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 19);\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 27);\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 13.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s having sum(field_i) = 19\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s \" +\n            \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s \" +\n            \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 19);\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s \" +\n            \"having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 0);\n\n  }\n\n","sourceOld":"  @Test\n  public void testBasicGroupingFacets() throws Exception {\n\n    new UpdateRequest()\n        .add(\"id\", \"1\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\")\n        .add(\"id\", \"2\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\")\n        .add(\"id\", \"3\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\")\n        .add(\"id\", \"4\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\")\n        .add(\"id\", \"5\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\")\n        .add(\"id\", \"6\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\")\n        .add(\"id\", \"7\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\")\n        .add(\"id\", \"8\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\")\n        .add(\"id\", \"9\", \"text_t\", \"XXXX XXXY\", \"str_s\", \"d\", \"field_i\", \"70\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s \" +\n            \"order by sum(field_i) asc limit 2\");\n\n    List<Tuple> tuples = getTuples(sParams, baseUrl);\n\n    // Only two results because of the limit.\n    assert (tuples.size() == 2);\n\n    Tuple tuple;\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 27); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 13.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"avg(field_i) from collection1 where text_t='XXXX' group by str_s \" +\n            \"order by sum(field_i) asc limit 2\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    // Only two results because of the limit.\n    assert (tuples.size() == 2);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 10); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 27); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 14); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \"\n            + \"cast(avg(1.0 * field_i) as float) from collection1 where (text_t='XXXX' AND NOT (text_t='XXXY')) \"\n            + \"group by str_s order by str_s desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    // The sort by and order by match and no limit is applied. All the Tuples should be returned in\n    // this scenario.\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 4); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 180); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 30); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 60); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 45); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 27); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 13.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s as myString, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \"\n            + \"cast(avg(1.0 * field_i) as float) from collection1 where (text_t='XXXX' AND NOT (text_t='XXXY')) \"\n            + \"group by str_s order by myString desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    // The sort by and order by match and no limit is applied. All the Tuples should be returned in\n    // this scenario.\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"myString\").equals(\"c\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 4); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 180);\n    assert (tuple.getDouble(\"EXPR$3\") == 30); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 60); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 45); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 19);\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 27);\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 13.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s having sum(field_i) = 19\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s \" +\n            \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s \" +\n            \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 19);\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s \" +\n            \"having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"22191e72f6c40dec88c9b94f9bb55c7527772a47":["600937be95b5a041815220371fa7882e73031d56"],"612da0a0a2d5f4409da55729b9833e799f905ac5":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"29ea75dee47a56cd5d6997df5198d96cdba08574":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7"],"79509167584beb75c0b777d2b701adeb1f06d885":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7":["3ec71d4701edbd96cfea97384101d13611393552"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["908656025e558a536b1b781cf8d02a84e7acb262","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"99c8e9b44b0cdc8162d6e058914bac3148e80da9":["29ea75dee47a56cd5d6997df5198d96cdba08574"],"3ec71d4701edbd96cfea97384101d13611393552":["36479872320bb00635cb97ca6757614c88562e1b"],"36479872320bb00635cb97ca6757614c88562e1b":["79509167584beb75c0b777d2b701adeb1f06d885"],"908656025e558a536b1b781cf8d02a84e7acb262":["7b67f9cce921a1f94ec0a28c4eb85bcd887c8aa4"],"a9b741b54c163686a5fd077895a797daa9b0b95f":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"7b67f9cce921a1f94ec0a28c4eb85bcd887c8aa4":["99c8e9b44b0cdc8162d6e058914bac3148e80da9"],"600937be95b5a041815220371fa7882e73031d56":["c58a62203315881cce5089ef67ffee6b8a988a75"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["d470c8182e92b264680e34081b75e70a9f2b3c89","612da0a0a2d5f4409da55729b9833e799f905ac5"],"d9fe3175bbaa122d67f736a75c2984617c502cc0":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c58a62203315881cce5089ef67ffee6b8a988a75":["d9fe3175bbaa122d67f736a75c2984617c502cc0"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["94e31112925a65b1d36f9064772080e25b5ef373"],"94e31112925a65b1d36f9064772080e25b5ef373":["22191e72f6c40dec88c9b94f9bb55c7527772a47"]},"commit2Childs":{"22191e72f6c40dec88c9b94f9bb55c7527772a47":["94e31112925a65b1d36f9064772080e25b5ef373"],"612da0a0a2d5f4409da55729b9833e799f905ac5":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"29ea75dee47a56cd5d6997df5198d96cdba08574":["99c8e9b44b0cdc8162d6e058914bac3148e80da9"],"79509167584beb75c0b777d2b701adeb1f06d885":["36479872320bb00635cb97ca6757614c88562e1b"],"5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7":["29ea75dee47a56cd5d6997df5198d96cdba08574","826d15444ddf61716dc768c229cd54b2c2ccce1c","d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["612da0a0a2d5f4409da55729b9833e799f905ac5"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"99c8e9b44b0cdc8162d6e058914bac3148e80da9":["7b67f9cce921a1f94ec0a28c4eb85bcd887c8aa4"],"3ec71d4701edbd96cfea97384101d13611393552":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7"],"908656025e558a536b1b781cf8d02a84e7acb262":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"36479872320bb00635cb97ca6757614c88562e1b":["3ec71d4701edbd96cfea97384101d13611393552"],"a9b741b54c163686a5fd077895a797daa9b0b95f":[],"7b67f9cce921a1f94ec0a28c4eb85bcd887c8aa4":["908656025e558a536b1b781cf8d02a84e7acb262"],"600937be95b5a041815220371fa7882e73031d56":["22191e72f6c40dec88c9b94f9bb55c7527772a47"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["a9b741b54c163686a5fd077895a797daa9b0b95f","d9fe3175bbaa122d67f736a75c2984617c502cc0"],"d9fe3175bbaa122d67f736a75c2984617c502cc0":["c58a62203315881cce5089ef67ffee6b8a988a75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["79509167584beb75c0b777d2b701adeb1f06d885"],"c58a62203315881cce5089ef67ffee6b8a988a75":["600937be95b5a041815220371fa7882e73031d56"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"94e31112925a65b1d36f9064772080e25b5ef373":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a9b741b54c163686a5fd077895a797daa9b0b95f","e66a459d38c1c4a2f97128433dab546f683a9fed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}