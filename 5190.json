{"path":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexOutput#writeBytes(byte[],int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexOutput#writeBytes(byte[],int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/BufferedIndexOutput#writeBytes(byte[],int,int).mjava","sourceNew":"  /** Writes an array of bytes.\n   * @param b the bytes to write\n   * @param length the number of bytes to write\n   * @see IndexInput#readBytes(byte[],int,int)\n   */\n  @Override\n  public void writeBytes(byte[] b, int offset, int length) throws IOException {\n    int bytesLeft = BUFFER_SIZE - bufferPosition;\n    // is there enough space in the buffer?\n    if (bytesLeft >= length) {\n      // we add the data to the end of the buffer\n      System.arraycopy(b, offset, buffer, bufferPosition, length);\n      bufferPosition += length;\n      // if the buffer is full, flush it\n      if (BUFFER_SIZE - bufferPosition == 0)\n        flush();\n    } else {\n      // is data larger then buffer?\n      if (length > BUFFER_SIZE) {\n        // we flush the buffer\n        if (bufferPosition > 0)\n          flush();\n        // and write data at once\n        flushBuffer(b, offset, length);\n        bufferStart += length;\n      } else {\n        // we fill/flush the buffer (until the input is written)\n        int pos = 0; // position in the input data\n        int pieceLength;\n        while (pos < length) {\n          pieceLength = (length - pos < bytesLeft) ? length - pos : bytesLeft;\n          System.arraycopy(b, pos + offset, buffer, bufferPosition, pieceLength);\n          pos += pieceLength;\n          bufferPosition += pieceLength;\n          // if the buffer is full, flush it\n          bytesLeft = BUFFER_SIZE - bufferPosition;\n          if (bytesLeft == 0) {\n            flush();\n            bytesLeft = BUFFER_SIZE;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Writes an array of bytes.\n   * @param b the bytes to write\n   * @param length the number of bytes to write\n   * @see IndexInput#readBytes(byte[],int,int)\n   */\n  @Override\n  public void writeBytes(byte[] b, int offset, int length) throws IOException {\n    int bytesLeft = BUFFER_SIZE - bufferPosition;\n    // is there enough space in the buffer?\n    if (bytesLeft >= length) {\n      // we add the data to the end of the buffer\n      System.arraycopy(b, offset, buffer, bufferPosition, length);\n      bufferPosition += length;\n      // if the buffer is full, flush it\n      if (BUFFER_SIZE - bufferPosition == 0)\n        flush();\n    } else {\n      // is data larger then buffer?\n      if (length > BUFFER_SIZE) {\n        // we flush the buffer\n        if (bufferPosition > 0)\n          flush();\n        // and write data at once\n        flushBuffer(b, offset, length);\n        bufferStart += length;\n      } else {\n        // we fill/flush the buffer (until the input is written)\n        int pos = 0; // position in the input data\n        int pieceLength;\n        while (pos < length) {\n          pieceLength = (length - pos < bytesLeft) ? length - pos : bytesLeft;\n          System.arraycopy(b, pos + offset, buffer, bufferPosition, pieceLength);\n          pos += pieceLength;\n          bufferPosition += pieceLength;\n          // if the buffer is full, flush it\n          bytesLeft = BUFFER_SIZE - bufferPosition;\n          if (bytesLeft == 0) {\n            flush();\n            bytesLeft = BUFFER_SIZE;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bfcba4bd0c8918a6db1993d4e7818f08cc2a827","date":1349788355,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexOutput#writeBytes(byte[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexOutput#writeBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int length) throws IOException {\n    int bytesLeft = BUFFER_SIZE - bufferPosition;\n    // is there enough space in the buffer?\n    if (bytesLeft >= length) {\n      // we add the data to the end of the buffer\n      System.arraycopy(b, offset, buffer, bufferPosition, length);\n      bufferPosition += length;\n      // if the buffer is full, flush it\n      if (BUFFER_SIZE - bufferPosition == 0)\n        flush();\n    } else {\n      // is data larger then buffer?\n      if (length > BUFFER_SIZE) {\n        // we flush the buffer\n        if (bufferPosition > 0)\n          flush();\n        // and write data at once\n        flushBuffer(b, offset, length);\n        bufferStart += length;\n      } else {\n        // we fill/flush the buffer (until the input is written)\n        int pos = 0; // position in the input data\n        int pieceLength;\n        while (pos < length) {\n          pieceLength = (length - pos < bytesLeft) ? length - pos : bytesLeft;\n          System.arraycopy(b, pos + offset, buffer, bufferPosition, pieceLength);\n          pos += pieceLength;\n          bufferPosition += pieceLength;\n          // if the buffer is full, flush it\n          bytesLeft = BUFFER_SIZE - bufferPosition;\n          if (bytesLeft == 0) {\n            flush();\n            bytesLeft = BUFFER_SIZE;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Writes an array of bytes.\n   * @param b the bytes to write\n   * @param length the number of bytes to write\n   * @see IndexInput#readBytes(byte[],int,int)\n   */\n  @Override\n  public void writeBytes(byte[] b, int offset, int length) throws IOException {\n    int bytesLeft = BUFFER_SIZE - bufferPosition;\n    // is there enough space in the buffer?\n    if (bytesLeft >= length) {\n      // we add the data to the end of the buffer\n      System.arraycopy(b, offset, buffer, bufferPosition, length);\n      bufferPosition += length;\n      // if the buffer is full, flush it\n      if (BUFFER_SIZE - bufferPosition == 0)\n        flush();\n    } else {\n      // is data larger then buffer?\n      if (length > BUFFER_SIZE) {\n        // we flush the buffer\n        if (bufferPosition > 0)\n          flush();\n        // and write data at once\n        flushBuffer(b, offset, length);\n        bufferStart += length;\n      } else {\n        // we fill/flush the buffer (until the input is written)\n        int pos = 0; // position in the input data\n        int pieceLength;\n        while (pos < length) {\n          pieceLength = (length - pos < bytesLeft) ? length - pos : bytesLeft;\n          System.arraycopy(b, pos + offset, buffer, bufferPosition, pieceLength);\n          pos += pieceLength;\n          bufferPosition += pieceLength;\n          // if the buffer is full, flush it\n          bytesLeft = BUFFER_SIZE - bufferPosition;\n          if (bytesLeft == 0) {\n            flush();\n            bytesLeft = BUFFER_SIZE;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb29b298ad7651ee722a0f5491b689232c26d2b4","date":1358930559,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexOutput#writeBytes(byte[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexOutput#writeBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int length) throws IOException {\n    int bytesLeft = bufferSize - bufferPosition;\n    // is there enough space in the buffer?\n    if (bytesLeft >= length) {\n      // we add the data to the end of the buffer\n      System.arraycopy(b, offset, buffer, bufferPosition, length);\n      bufferPosition += length;\n      // if the buffer is full, flush it\n      if (bufferSize - bufferPosition == 0)\n        flush();\n    } else {\n      // is data larger then buffer?\n      if (length > bufferSize) {\n        // we flush the buffer\n        if (bufferPosition > 0)\n          flush();\n        // and write data at once\n        flushBuffer(b, offset, length);\n        bufferStart += length;\n      } else {\n        // we fill/flush the buffer (until the input is written)\n        int pos = 0; // position in the input data\n        int pieceLength;\n        while (pos < length) {\n          pieceLength = (length - pos < bytesLeft) ? length - pos : bytesLeft;\n          System.arraycopy(b, pos + offset, buffer, bufferPosition, pieceLength);\n          pos += pieceLength;\n          bufferPosition += pieceLength;\n          // if the buffer is full, flush it\n          bytesLeft = bufferSize - bufferPosition;\n          if (bytesLeft == 0) {\n            flush();\n            bytesLeft = bufferSize;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeBytes(byte[] b, int offset, int length) throws IOException {\n    int bytesLeft = BUFFER_SIZE - bufferPosition;\n    // is there enough space in the buffer?\n    if (bytesLeft >= length) {\n      // we add the data to the end of the buffer\n      System.arraycopy(b, offset, buffer, bufferPosition, length);\n      bufferPosition += length;\n      // if the buffer is full, flush it\n      if (BUFFER_SIZE - bufferPosition == 0)\n        flush();\n    } else {\n      // is data larger then buffer?\n      if (length > BUFFER_SIZE) {\n        // we flush the buffer\n        if (bufferPosition > 0)\n          flush();\n        // and write data at once\n        flushBuffer(b, offset, length);\n        bufferStart += length;\n      } else {\n        // we fill/flush the buffer (until the input is written)\n        int pos = 0; // position in the input data\n        int pieceLength;\n        while (pos < length) {\n          pieceLength = (length - pos < bytesLeft) ? length - pos : bytesLeft;\n          System.arraycopy(b, pos + offset, buffer, bufferPosition, pieceLength);\n          pos += pieceLength;\n          bufferPosition += pieceLength;\n          // if the buffer is full, flush it\n          bytesLeft = BUFFER_SIZE - bufferPosition;\n          if (bytesLeft == 0) {\n            flush();\n            bytesLeft = BUFFER_SIZE;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2d5244a676b83c2d551c3746e8181588ba619e1","date":1359031414,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexOutput#writeBytes(byte[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexOutput#writeBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int length) throws IOException {\n    int bytesLeft = bufferSize - bufferPosition;\n    // is there enough space in the buffer?\n    if (bytesLeft >= length) {\n      // we add the data to the end of the buffer\n      System.arraycopy(b, offset, buffer, bufferPosition, length);\n      bufferPosition += length;\n      // if the buffer is full, flush it\n      if (bufferSize - bufferPosition == 0)\n        flush();\n    } else {\n      // is data larger then buffer?\n      if (length > bufferSize) {\n        // we flush the buffer\n        if (bufferPosition > 0)\n          flush();\n        // and write data at once\n        flushBuffer(b, offset, length);\n        bufferStart += length;\n      } else {\n        // we fill/flush the buffer (until the input is written)\n        int pos = 0; // position in the input data\n        int pieceLength;\n        while (pos < length) {\n          pieceLength = (length - pos < bytesLeft) ? length - pos : bytesLeft;\n          System.arraycopy(b, pos + offset, buffer, bufferPosition, pieceLength);\n          pos += pieceLength;\n          bufferPosition += pieceLength;\n          // if the buffer is full, flush it\n          bytesLeft = bufferSize - bufferPosition;\n          if (bytesLeft == 0) {\n            flush();\n            bytesLeft = bufferSize;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeBytes(byte[] b, int offset, int length) throws IOException {\n    int bytesLeft = BUFFER_SIZE - bufferPosition;\n    // is there enough space in the buffer?\n    if (bytesLeft >= length) {\n      // we add the data to the end of the buffer\n      System.arraycopy(b, offset, buffer, bufferPosition, length);\n      bufferPosition += length;\n      // if the buffer is full, flush it\n      if (BUFFER_SIZE - bufferPosition == 0)\n        flush();\n    } else {\n      // is data larger then buffer?\n      if (length > BUFFER_SIZE) {\n        // we flush the buffer\n        if (bufferPosition > 0)\n          flush();\n        // and write data at once\n        flushBuffer(b, offset, length);\n        bufferStart += length;\n      } else {\n        // we fill/flush the buffer (until the input is written)\n        int pos = 0; // position in the input data\n        int pieceLength;\n        while (pos < length) {\n          pieceLength = (length - pos < bytesLeft) ? length - pos : bytesLeft;\n          System.arraycopy(b, pos + offset, buffer, bufferPosition, pieceLength);\n          pos += pieceLength;\n          bufferPosition += pieceLength;\n          // if the buffer is full, flush it\n          bytesLeft = BUFFER_SIZE - bufferPosition;\n          if (bytesLeft == 0) {\n            flush();\n            bytesLeft = BUFFER_SIZE;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexOutput#writeBytes(byte[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexOutput#writeBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int length) throws IOException {\n    int bytesLeft = bufferSize - bufferPosition;\n    // is there enough space in the buffer?\n    if (bytesLeft >= length) {\n      // we add the data to the end of the buffer\n      System.arraycopy(b, offset, buffer, bufferPosition, length);\n      bufferPosition += length;\n      // if the buffer is full, flush it\n      if (bufferSize - bufferPosition == 0)\n        flush();\n    } else {\n      // is data larger then buffer?\n      if (length > bufferSize) {\n        // we flush the buffer\n        if (bufferPosition > 0)\n          flush();\n        // and write data at once\n        crc.update(b, offset, length);\n        flushBuffer(b, offset, length);\n        bufferStart += length;\n      } else {\n        // we fill/flush the buffer (until the input is written)\n        int pos = 0; // position in the input data\n        int pieceLength;\n        while (pos < length) {\n          pieceLength = (length - pos < bytesLeft) ? length - pos : bytesLeft;\n          System.arraycopy(b, pos + offset, buffer, bufferPosition, pieceLength);\n          pos += pieceLength;\n          bufferPosition += pieceLength;\n          // if the buffer is full, flush it\n          bytesLeft = bufferSize - bufferPosition;\n          if (bytesLeft == 0) {\n            flush();\n            bytesLeft = bufferSize;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeBytes(byte[] b, int offset, int length) throws IOException {\n    int bytesLeft = bufferSize - bufferPosition;\n    // is there enough space in the buffer?\n    if (bytesLeft >= length) {\n      // we add the data to the end of the buffer\n      System.arraycopy(b, offset, buffer, bufferPosition, length);\n      bufferPosition += length;\n      // if the buffer is full, flush it\n      if (bufferSize - bufferPosition == 0)\n        flush();\n    } else {\n      // is data larger then buffer?\n      if (length > bufferSize) {\n        // we flush the buffer\n        if (bufferPosition > 0)\n          flush();\n        // and write data at once\n        flushBuffer(b, offset, length);\n        bufferStart += length;\n      } else {\n        // we fill/flush the buffer (until the input is written)\n        int pos = 0; // position in the input data\n        int pieceLength;\n        while (pos < length) {\n          pieceLength = (length - pos < bytesLeft) ? length - pos : bytesLeft;\n          System.arraycopy(b, pos + offset, buffer, bufferPosition, pieceLength);\n          pos += pieceLength;\n          bufferPosition += pieceLength;\n          // if the buffer is full, flush it\n          bytesLeft = bufferSize - bufferPosition;\n          if (bytesLeft == 0) {\n            flush();\n            bytesLeft = bufferSize;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexOutput#writeBytes(byte[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexOutput#writeBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int length) throws IOException {\n    int bytesLeft = bufferSize - bufferPosition;\n    // is there enough space in the buffer?\n    if (bytesLeft >= length) {\n      // we add the data to the end of the buffer\n      System.arraycopy(b, offset, buffer, bufferPosition, length);\n      bufferPosition += length;\n      // if the buffer is full, flush it\n      if (bufferSize - bufferPosition == 0)\n        flush();\n    } else {\n      // is data larger then buffer?\n      if (length > bufferSize) {\n        // we flush the buffer\n        if (bufferPosition > 0)\n          flush();\n        // and write data at once\n        crc.update(b, offset, length);\n        flushBuffer(b, offset, length);\n        bufferStart += length;\n      } else {\n        // we fill/flush the buffer (until the input is written)\n        int pos = 0; // position in the input data\n        int pieceLength;\n        while (pos < length) {\n          pieceLength = (length - pos < bytesLeft) ? length - pos : bytesLeft;\n          System.arraycopy(b, pos + offset, buffer, bufferPosition, pieceLength);\n          pos += pieceLength;\n          bufferPosition += pieceLength;\n          // if the buffer is full, flush it\n          bytesLeft = bufferSize - bufferPosition;\n          if (bytesLeft == 0) {\n            flush();\n            bytesLeft = bufferSize;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeBytes(byte[] b, int offset, int length) throws IOException {\n    int bytesLeft = bufferSize - bufferPosition;\n    // is there enough space in the buffer?\n    if (bytesLeft >= length) {\n      // we add the data to the end of the buffer\n      System.arraycopy(b, offset, buffer, bufferPosition, length);\n      bufferPosition += length;\n      // if the buffer is full, flush it\n      if (bufferSize - bufferPosition == 0)\n        flush();\n    } else {\n      // is data larger then buffer?\n      if (length > bufferSize) {\n        // we flush the buffer\n        if (bufferPosition > 0)\n          flush();\n        // and write data at once\n        flushBuffer(b, offset, length);\n        bufferStart += length;\n      } else {\n        // we fill/flush the buffer (until the input is written)\n        int pos = 0; // position in the input data\n        int pieceLength;\n        while (pos < length) {\n          pieceLength = (length - pos < bytesLeft) ? length - pos : bytesLeft;\n          System.arraycopy(b, pos + offset, buffer, bufferPosition, pieceLength);\n          pos += pieceLength;\n          bufferPosition += pieceLength;\n          // if the buffer is full, flush it\n          bytesLeft = bufferSize - bufferPosition;\n          if (bytesLeft == 0) {\n            flush();\n            bytesLeft = bufferSize;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bce1e2aee8b16573bc0d091471e4660d140b5823","date":1400533696,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexOutput#writeBytes(byte[],int,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeBytes(byte[] b, int offset, int length) throws IOException {\n    int bytesLeft = bufferSize - bufferPosition;\n    // is there enough space in the buffer?\n    if (bytesLeft >= length) {\n      // we add the data to the end of the buffer\n      System.arraycopy(b, offset, buffer, bufferPosition, length);\n      bufferPosition += length;\n      // if the buffer is full, flush it\n      if (bufferSize - bufferPosition == 0)\n        flush();\n    } else {\n      // is data larger then buffer?\n      if (length > bufferSize) {\n        // we flush the buffer\n        if (bufferPosition > 0)\n          flush();\n        // and write data at once\n        crc.update(b, offset, length);\n        flushBuffer(b, offset, length);\n        bufferStart += length;\n      } else {\n        // we fill/flush the buffer (until the input is written)\n        int pos = 0; // position in the input data\n        int pieceLength;\n        while (pos < length) {\n          pieceLength = (length - pos < bytesLeft) ? length - pos : bytesLeft;\n          System.arraycopy(b, pos + offset, buffer, bufferPosition, pieceLength);\n          pos += pieceLength;\n          bufferPosition += pieceLength;\n          // if the buffer is full, flush it\n          bytesLeft = bufferSize - bufferPosition;\n          if (bytesLeft == 0) {\n            flush();\n            bytesLeft = bufferSize;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexOutput#writeBytes(byte[],int,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeBytes(byte[] b, int offset, int length) throws IOException {\n    int bytesLeft = bufferSize - bufferPosition;\n    // is there enough space in the buffer?\n    if (bytesLeft >= length) {\n      // we add the data to the end of the buffer\n      System.arraycopy(b, offset, buffer, bufferPosition, length);\n      bufferPosition += length;\n      // if the buffer is full, flush it\n      if (bufferSize - bufferPosition == 0)\n        flush();\n    } else {\n      // is data larger then buffer?\n      if (length > bufferSize) {\n        // we flush the buffer\n        if (bufferPosition > 0)\n          flush();\n        // and write data at once\n        crc.update(b, offset, length);\n        flushBuffer(b, offset, length);\n        bufferStart += length;\n      } else {\n        // we fill/flush the buffer (until the input is written)\n        int pos = 0; // position in the input data\n        int pieceLength;\n        while (pos < length) {\n          pieceLength = (length - pos < bytesLeft) ? length - pos : bytesLeft;\n          System.arraycopy(b, pos + offset, buffer, bufferPosition, pieceLength);\n          pos += pieceLength;\n          bufferPosition += pieceLength;\n          // if the buffer is full, flush it\n          bytesLeft = bufferSize - bufferPosition;\n          if (bytesLeft == 0) {\n            flush();\n            bytesLeft = bufferSize;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bce1e2aee8b16573bc0d091471e4660d140b5823":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"5eb2511ababf862ea11e10761c70ee560cd84510":["fb29b298ad7651ee722a0f5491b689232c26d2b4","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["fb29b298ad7651ee722a0f5491b689232c26d2b4"],"fb29b298ad7651ee722a0f5491b689232c26d2b4":["5bfcba4bd0c8918a6db1993d4e7818f08cc2a827"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7605579001505896d48b07160075a5c8b8e128e":["1f3b037cd083286b2af89f96e768f85dcd8072d6","bce1e2aee8b16573bc0d091471e4660d140b5823"],"5bfcba4bd0c8918a6db1993d4e7818f08cc2a827":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bce1e2aee8b16573bc0d091471e4660d140b5823"],"b2d5244a676b83c2d551c3746e8181588ba619e1":["5bfcba4bd0c8918a6db1993d4e7818f08cc2a827","fb29b298ad7651ee722a0f5491b689232c26d2b4"]},"commit2Childs":{"bce1e2aee8b16573bc0d091471e4660d140b5823":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["bce1e2aee8b16573bc0d091471e4660d140b5823","5eb2511ababf862ea11e10761c70ee560cd84510","b7605579001505896d48b07160075a5c8b8e128e"],"fb29b298ad7651ee722a0f5491b689232c26d2b4":["5eb2511ababf862ea11e10761c70ee560cd84510","1f3b037cd083286b2af89f96e768f85dcd8072d6","b2d5244a676b83c2d551c3746e8181588ba619e1"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5bfcba4bd0c8918a6db1993d4e7818f08cc2a827"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7605579001505896d48b07160075a5c8b8e128e":[],"5bfcba4bd0c8918a6db1993d4e7818f08cc2a827":["fb29b298ad7651ee722a0f5491b689232c26d2b4","b2d5244a676b83c2d551c3746e8181588ba619e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b2d5244a676b83c2d551c3746e8181588ba619e1":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817","b2d5244a676b83c2d551c3746e8181588ba619e1"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}