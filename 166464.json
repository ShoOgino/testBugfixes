{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection commits = IndexReader.listCommits(dir);\n    assertEquals(6, commits.size());\n    IndexCommit lastCommit = null;\n    Iterator it = commits.iterator();\n    while(it.hasNext()) {\n      IndexCommit commit = (IndexCommit) it.next();\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(7, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(8, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), new KeepOnlyLastCommitDeletionPolicy(), IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection commits = IndexReader.listCommits(dir);\n    assertEquals(6, commits.size());\n    IndexCommit lastCommit = null;\n    Iterator it = commits.iterator();\n    while(it.hasNext()) {\n      IndexCommit commit = (IndexCommit) it.next();\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(7, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(8, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), new KeepOnlyLastCommitDeletionPolicy(), IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9","date":1270985469,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection commits = IndexReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    Iterator it = commits.iterator();\n    while(it.hasNext()) {\n      IndexCommit commit = (IndexCommit) it.next();\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(6, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), new KeepOnlyLastCommitDeletionPolicy(), IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection commits = IndexReader.listCommits(dir);\n    assertEquals(6, commits.size());\n    IndexCommit lastCommit = null;\n    Iterator it = commits.iterator();\n    while(it.hasNext()) {\n      IndexCommit commit = (IndexCommit) it.next();\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(7, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(8, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), new KeepOnlyLastCommitDeletionPolicy(), IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10","date":1270996866,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection commits = IndexReader.listCommits(dir);\n    assertEquals(6, commits.size());\n    IndexCommit lastCommit = null;\n    Iterator it = commits.iterator();\n    while(it.hasNext()) {\n      IndexCommit commit = (IndexCommit) it.next();\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(7, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(8, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), new KeepOnlyLastCommitDeletionPolicy(), IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection commits = IndexReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    Iterator it = commits.iterator();\n    while(it.hasNext()) {\n      IndexCommit commit = (IndexCommit) it.next();\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(6, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), new KeepOnlyLastCommitDeletionPolicy(), IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4","date":1271167458,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection commits = IndexReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    Iterator it = commits.iterator();\n    while(it.hasNext()) {\n      IndexCommit commit = (IndexCommit) it.next();\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(6, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), new KeepOnlyLastCommitDeletionPolicy(), IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection commits = IndexReader.listCommits(dir);\n    assertEquals(6, commits.size());\n    IndexCommit lastCommit = null;\n    Iterator it = commits.iterator();\n    while(it.hasNext()) {\n      IndexCommit commit = (IndexCommit) it.next();\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(7, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(8, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), new KeepOnlyLastCommitDeletionPolicy(), IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":null,"sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n  \n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = new MockRAMDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection commits = IndexReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    Iterator it = commits.iterator();\n    while(it.hasNext()) {\n      IndexCommit commit = (IndexCommit) it.next();\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and optimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.optimize();\n    writer.close();\n\n    assertEquals(6, IndexReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before optimize:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    IndexReader r = IndexReader.open(dir, true);\n    // Still optimized, still 11 docs\n    assertTrue(r.isOptimized());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, IndexReader.listCommits(dir).size());\n    \n    r = IndexReader.open(dir, true);\n    // Not optimized because we rolled it back, and now only\n    // 10 docs\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Reoptimize\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), policy, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    writer.close();\n\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before optimize,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), new KeepOnlyLastCommitDeletionPolicy(), IndexWriter.MaxFieldLength.LIMITED, lastCommit);\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees optimized index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir, true);\n    assertTrue(r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees unoptimized index:\n    r = IndexReader.open(dir, true);\n    assertTrue(!r.isOptimized());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}