{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BufferingTermFreqIteratorWrapper#BufferingTermFreqIteratorWrapper(TermFreqIterator).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BufferingTermFreqIteratorWrapper#BufferingTermFreqIteratorWrapper(TermFreqIterator).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/BufferingTermFreqIteratorWrapper#BufferingTermFreqIteratorWrapper(TermFreqIterator).mjava","sourceNew":"  public BufferingTermFreqIteratorWrapper(TermFreqIterator source) throws IOException {\n    this.comp = source.getComparator();\n    BytesRef spare;\n    int freqIndex = 0;\n    while((spare = source.next()) != null) {\n      entries.append(spare);\n      if (freqIndex >= freqs.length) {\n        freqs = ArrayUtil.grow(freqs, freqs.length+1);\n      }\n      freqs[freqIndex++] = source.weight();\n    }\n   \n  }\n\n","sourceOld":"  public BufferingTermFreqIteratorWrapper(TermFreqIterator source) throws IOException {\n    this.comp = source.getComparator();\n    BytesRef spare;\n    int freqIndex = 0;\n    while((spare = source.next()) != null) {\n      entries.append(spare);\n      if (freqIndex >= freqs.length) {\n        freqs = ArrayUtil.grow(freqs, freqs.length+1);\n      }\n      freqs[freqIndex++] = source.weight();\n    }\n   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cc849e9f232bea7495964477fb7bfd25aeb7173","date":1348236542,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BufferingTermFreqIteratorWrapper#BufferingTermFreqIteratorWrapper(TermFreqIterator).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BufferingTermFreqIteratorWrapper#BufferingTermFreqIteratorWrapper(TermFreqIterator).mjava","sourceNew":"  /** Creates a new iterator, buffering entries from the specified iterator */\n  public BufferingTermFreqIteratorWrapper(TermFreqIterator source) throws IOException {\n    this.comp = source.getComparator();\n    BytesRef spare;\n    int freqIndex = 0;\n    while((spare = source.next()) != null) {\n      entries.append(spare);\n      if (freqIndex >= freqs.length) {\n        freqs = ArrayUtil.grow(freqs, freqs.length+1);\n      }\n      freqs[freqIndex++] = source.weight();\n    }\n   \n  }\n\n","sourceOld":"  public BufferingTermFreqIteratorWrapper(TermFreqIterator source) throws IOException {\n    this.comp = source.getComparator();\n    BytesRef spare;\n    int freqIndex = 0;\n    while((spare = source.next()) != null) {\n      entries.append(spare);\n      if (freqIndex >= freqs.length) {\n        freqs = ArrayUtil.grow(freqs, freqs.length+1);\n      }\n      freqs[freqIndex++] = source.weight();\n    }\n   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BufferingTermFreqIteratorWrapper#BufferingTermFreqIteratorWrapper(TermFreqIterator).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BufferingTermFreqIteratorWrapper#BufferingTermFreqIteratorWrapper(TermFreqIterator).mjava","sourceNew":"  /** Creates a new iterator, buffering entries from the specified iterator */\n  public BufferingTermFreqIteratorWrapper(TermFreqIterator source) throws IOException {\n    BytesRef spare;\n    int freqIndex = 0;\n    while((spare = source.next()) != null) {\n      entries.append(spare);\n      if (freqIndex >= freqs.length) {\n        freqs = ArrayUtil.grow(freqs, freqs.length+1);\n      }\n      freqs[freqIndex++] = source.weight();\n    }\n   \n  }\n\n","sourceOld":"  /** Creates a new iterator, buffering entries from the specified iterator */\n  public BufferingTermFreqIteratorWrapper(TermFreqIterator source) throws IOException {\n    this.comp = source.getComparator();\n    BytesRef spare;\n    int freqIndex = 0;\n    while((spare = source.next()) != null) {\n      entries.append(spare);\n      if (freqIndex >= freqs.length) {\n        freqs = ArrayUtil.grow(freqs, freqs.length+1);\n      }\n      freqs[freqIndex++] = source.weight();\n    }\n   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ada2f7352a7f964fe49bccd13227c4ec38563d39","date":1381659982,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BufferingTermFreqPayloadIteratorWrapper#BufferingTermFreqPayloadIteratorWrapper(TermFreqPayloadIterator).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BufferingTermFreqIteratorWrapper#BufferingTermFreqIteratorWrapper(TermFreqIterator).mjava","sourceNew":"  /** Creates a new iterator, buffering entries from the specified iterator */\n  public BufferingTermFreqPayloadIteratorWrapper(TermFreqPayloadIterator source) throws IOException {\n    BytesRef spare;\n    int freqIndex = 0;\n    hasPayloads = source.hasPayloads();\n    while((spare = source.next()) != null) {\n      entries.append(spare);\n      if (hasPayloads) {\n        payloads.append(source.payload());\n      }\n      if (freqIndex >= freqs.length) {\n        freqs = ArrayUtil.grow(freqs, freqs.length+1);\n      }\n      freqs[freqIndex++] = source.weight();\n    }\n   \n  }\n\n","sourceOld":"  /** Creates a new iterator, buffering entries from the specified iterator */\n  public BufferingTermFreqIteratorWrapper(TermFreqIterator source) throws IOException {\n    BytesRef spare;\n    int freqIndex = 0;\n    while((spare = source.next()) != null) {\n      entries.append(spare);\n      if (freqIndex >= freqs.length) {\n        freqs = ArrayUtil.grow(freqs, freqs.length+1);\n      }\n      freqs[freqIndex++] = source.weight();\n    }\n   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1cc849e9f232bea7495964477fb7bfd25aeb7173":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["1cc849e9f232bea7495964477fb7bfd25aeb7173"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["1cc849e9f232bea7495964477fb7bfd25aeb7173"],"1cc849e9f232bea7495964477fb7bfd25aeb7173":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}