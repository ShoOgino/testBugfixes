{"path":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T]_grow(T[],int).mjava","commits":[{"id":"f2e0b693f44c4d48acb66e289f04ec7309118a1a","date":1437989791,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T]_grow(T[],int).mjava","pathOld":"/dev/null","sourceNew":"  public static <T> T[] grow(T[] array, int minSize) {\n    assert minSize >= 0: \"size must be positive (got \" + minSize + \"): likely integer overflow?\";\n    if (array.length < minSize) {\n      return Arrays.copyOf(array, oversize(minSize, RamUsageEstimator.NUM_BYTES_OBJECT_REF));\n    } else\n      return array;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9798d0818e7a880546802b509792d3f3d57babd2","date":1528358901,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T]_grow(T[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T]_grow(T[],int).mjava","sourceNew":"  /** Returns an array whose size is at least {@code minSize}, generally over-allocating exponentially */\n  public static <T> T[] grow(T[] array, int minSize) {\n    assert minSize >= 0 : \"size must be positive (got \" + minSize + \"): likely integer overflow?\";\n    if (array.length < minSize) {\n      final int newLength = oversize(minSize, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      return growExact(array, newLength);\n    } else\n      return array;\n  }\n\n","sourceOld":"  public static <T> T[] grow(T[] array, int minSize) {\n    assert minSize >= 0: \"size must be positive (got \" + minSize + \"): likely integer overflow?\";\n    if (array.length < minSize) {\n      return Arrays.copyOf(array, oversize(minSize, RamUsageEstimator.NUM_BYTES_OBJECT_REF));\n    } else\n      return array;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T]_grow(T[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T]_grow(T[],int).mjava","sourceNew":"  /** Returns an array whose size is at least {@code minSize}, generally over-allocating exponentially */\n  public static <T> T[] grow(T[] array, int minSize) {\n    assert minSize >= 0 : \"size must be positive (got \" + minSize + \"): likely integer overflow?\";\n    if (array.length < minSize) {\n      final int newLength = oversize(minSize, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      return growExact(array, newLength);\n    } else\n      return array;\n  }\n\n","sourceOld":"  public static <T> T[] grow(T[] array, int minSize) {\n    assert minSize >= 0: \"size must be positive (got \" + minSize + \"): likely integer overflow?\";\n    if (array.length < minSize) {\n      return Arrays.copyOf(array, oversize(minSize, RamUsageEstimator.NUM_BYTES_OBJECT_REF));\n    } else\n      return array;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T]_grow(T[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T]_grow(T[],int).mjava","sourceNew":"  /** Returns an array whose size is at least {@code minSize}, generally over-allocating exponentially */\n  public static <T> T[] grow(T[] array, int minSize) {\n    assert minSize >= 0 : \"size must be positive (got \" + minSize + \"): likely integer overflow?\";\n    if (array.length < minSize) {\n      final int newLength = oversize(minSize, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      return growExact(array, newLength);\n    } else\n      return array;\n  }\n\n","sourceOld":"  public static <T> T[] grow(T[] array, int minSize) {\n    assert minSize >= 0: \"size must be positive (got \" + minSize + \"): likely integer overflow?\";\n    if (array.length < minSize) {\n      return Arrays.copyOf(array, oversize(minSize, RamUsageEstimator.NUM_BYTES_OBJECT_REF));\n    } else\n      return array;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["f2e0b693f44c4d48acb66e289f04ec7309118a1a","9798d0818e7a880546802b509792d3f3d57babd2"],"f2e0b693f44c4d48acb66e289f04ec7309118a1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9798d0818e7a880546802b509792d3f3d57babd2":["f2e0b693f44c4d48acb66e289f04ec7309118a1a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9798d0818e7a880546802b509792d3f3d57babd2"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["f2e0b693f44c4d48acb66e289f04ec7309118a1a","9798d0818e7a880546802b509792d3f3d57babd2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f2e0b693f44c4d48acb66e289f04ec7309118a1a"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"f2e0b693f44c4d48acb66e289f04ec7309118a1a":["b70042a8a492f7054d480ccdd2be9796510d4327","9798d0818e7a880546802b509792d3f3d57babd2","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"9798d0818e7a880546802b509792d3f3d57babd2":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}