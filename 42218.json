{"path":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String]).mjava","commits":[{"id":"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","date":1448892165,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters) {\n\n    CoreDescriptor cd = new CoreDescriptor(this, coreName, instancePath, parameters);\n\n    // TODO: There's a race here, isn't there?\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader().getClusterProps())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      SolrCore core = create(cd, true);\n\n      // only write out the descriptor if the core is successfully created\n      coresLocator.create(this, cd);\n\n      return core;\n    }\n    catch (Exception ex) {\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56","004ec9e26487ae9b6205e790f8f77ef5e98d8daf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"115923bc88e5b1dc4bef049b1ded8486723052ed","date":1463216796,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String]).mjava","sourceNew":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters) {\n\n    CoreDescriptor cd = new CoreDescriptor(this, coreName, instancePath, parameters);\n\n    // TODO: There's a race here, isn't there?\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      SolrCore core = create(cd, true);\n\n      // only write out the descriptor if the core is successfully created\n      coresLocator.create(this, cd);\n\n      return core;\n    }\n    catch (Exception ex) {\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters) {\n\n    CoreDescriptor cd = new CoreDescriptor(this, coreName, instancePath, parameters);\n\n    // TODO: There's a race here, isn't there?\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader().getClusterProps())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      SolrCore core = create(cd, true);\n\n      // only write out the descriptor if the core is successfully created\n      coresLocator.create(this, cd);\n\n      return core;\n    }\n    catch (Exception ex) {\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String]).mjava","sourceNew":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters) {\n\n    CoreDescriptor cd = new CoreDescriptor(this, coreName, instancePath, parameters);\n\n    // TODO: There's a race here, isn't there?\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      SolrCore core = create(cd, true);\n\n      // only write out the descriptor if the core is successfully created\n      coresLocator.create(this, cd);\n\n      return core;\n    }\n    catch (Exception ex) {\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters) {\n\n    CoreDescriptor cd = new CoreDescriptor(this, coreName, instancePath, parameters);\n\n    // TODO: There's a race here, isn't there?\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader().getClusterProps())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      SolrCore core = create(cd, true);\n\n      // only write out the descriptor if the core is successfully created\n      coresLocator.create(this, cd);\n\n      return core;\n    }\n    catch (Exception ex) {\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String]).mjava","sourceNew":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters) {\n\n    CoreDescriptor cd = new CoreDescriptor(this, coreName, instancePath, parameters);\n\n    // TODO: There's a race here, isn't there?\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      SolrCore core = create(cd, true);\n\n      // only write out the descriptor if the core is successfully created\n      coresLocator.create(this, cd);\n\n      return core;\n    }\n    catch (Exception ex) {\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters) {\n\n    CoreDescriptor cd = new CoreDescriptor(this, coreName, instancePath, parameters);\n\n    // TODO: There's a race here, isn't there?\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader().getClusterProps())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      SolrCore core = create(cd, true);\n\n      // only write out the descriptor if the core is successfully created\n      coresLocator.create(this, cd);\n\n      return core;\n    }\n    catch (Exception ex) {\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d528fd7ae22865015b756e0a03832e2051de2a9c","date":1476721105,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String]).mjava","sourceNew":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters, boolean newCollection) {\n\n    CoreDescriptor cd = new CoreDescriptor(this, coreName, instancePath, parameters);\n\n    // TODO: There's a race here, isn't there?\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      SolrCore core = create(cd, true, newCollection);\n\n      // only write out the descriptor if the core is successfully created\n      coresLocator.create(this, cd);\n\n      return core;\n    }\n    catch (Exception ex) {\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters) {\n\n    CoreDescriptor cd = new CoreDescriptor(this, coreName, instancePath, parameters);\n\n    // TODO: There's a race here, isn't there?\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      SolrCore core = create(cd, true);\n\n      // only write out the descriptor if the core is successfully created\n      coresLocator.create(this, cd);\n\n      return core;\n    }\n    catch (Exception ex) {\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(String,Path,Map[String,String]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a new core in a specified instance directory, publishing the core state to the cluster\n   * @param coreName the core name\n   * @param instancePath the instance directory\n   * @param parameters the core parameters\n   * @return the newly created core\n   */\n  public SolrCore create(String coreName, Path instancePath, Map<String, String> parameters) {\n\n    CoreDescriptor cd = new CoreDescriptor(this, coreName, instancePath, parameters);\n\n    // TODO: There's a race here, isn't there?\n    if (getAllCoreNames().contains(coreName)) {\n      log.warn(\"Creating a core with existing name is not allowed\");\n      // TODO: Shouldn't this be a BAD_REQUEST?\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Core with name '\" + coreName + \"' already exists.\");\n    }\n\n    boolean preExisitingZkEntry = false;\n    try {\n      if (getZkController() != null) {\n        if (!Overseer.isLegacy(getZkController().getZkStateReader().getClusterProps())) {\n          if (cd.getCloudDescriptor().getCoreNodeName() == null) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"non legacy mode coreNodeName missing \" + parameters.toString());\n\n          }\n        }\n        preExisitingZkEntry = getZkController().checkIfCoreNodeNameAlreadyExists(cd);\n      }\n\n      SolrCore core = create(cd, true);\n\n      // only write out the descriptor if the core is successfully created\n      coresLocator.create(this, cd);\n\n      return core;\n    }\n    catch (Exception ex) {\n      if (isZooKeeperAware() && !preExisitingZkEntry) {\n        try {\n          getZkController().unregister(coreName, cd);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          SolrException.log(log, null, e);\n        } catch (KeeperException e) {\n          SolrException.log(log, null, e);\n        }\n      }\n\n      Throwable tc = ex;\n      Throwable c = null;\n      do {\n        tc = tc.getCause();\n        if (tc != null) {\n          c = tc;\n        }\n      } while (tc != null);\n\n      String rootMsg = \"\";\n      if (c != null) {\n        rootMsg = \" Caused by: \" + c.getMessage();\n      }\n\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Error CREATEing SolrCore '\" + coreName + \"': \" + ex.getMessage() + rootMsg, ex);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"115923bc88e5b1dc4bef049b1ded8486723052ed":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ad30c6a479e764150a3316e57263319775f1df2":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","115923bc88e5b1dc4bef049b1ded8486723052ed"],"d528fd7ae22865015b756e0a03832e2051de2a9c":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","d528fd7ae22865015b756e0a03832e2051de2a9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d528fd7ae22865015b756e0a03832e2051de2a9c"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["115923bc88e5b1dc4bef049b1ded8486723052ed","0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"115923bc88e5b1dc4bef049b1ded8486723052ed":["0ad30c6a479e764150a3316e57263319775f1df2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d528fd7ae22865015b756e0a03832e2051de2a9c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["d528fd7ae22865015b756e0a03832e2051de2a9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}