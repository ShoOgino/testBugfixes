{"path":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#SolrExtendedUnifiedHighlighter(SolrQueryRequest).mjava","commits":[{"id":"8868b7c4fbf215c41e7b4ea2cfc40d1970672910","date":1480034167,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#SolrExtendedUnifiedHighlighter(SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"        public SolrExtendedUnifiedHighlighter(SolrQueryRequest req) {\n            super(req.getSearcher(), req.getSchema().getIndexAnalyzer());\n            this.params = req.getParams();\n            this.schema = req.getSchema();\n            this.setMaxLength(\n                    params.getInt(HighlightParams.MAX_CHARS, UnifiedHighlighter.DEFAULT_MAX_LENGTH));\n            this.setCacheFieldValCharsThreshold(\n                    params.getInt(HighlightParams.CACHE_FIELD_VAL_CHARS_THRESHOLD, DEFAULT_CACHE_CHARS_THRESHOLD));\n\n            // SolrRequestInfo is a thread-local singleton providing access to the ResponseBuilder to code that\n            //   otherwise can't get it in a nicer way.\n            SolrQueryRequest request = SolrRequestInfo.getRequestInfo().getReq();\n            final RTimerTree timerTree;\n            if (request.getRequestTimer() != null) { //It may be null if not used in a search context.\n                timerTree = request.getRequestTimer();\n            } else {\n                timerTree = new RTimerTree(); // since null checks are annoying\n            }\n            loadFieldValuesTimer = timerTree.sub(\"loadFieldValues\"); // we assume a new timer, state of STARTED\n            loadFieldValuesTimer.pause(); // state of PAUSED now with about zero time. Will fail if state isn't STARTED.\n        }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75babd1dfc2521603bfeb0968042e921d8c6c652","date":1480042089,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#SolrExtendedUnifiedHighlighter(SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"        public SolrExtendedUnifiedHighlighter(SolrQueryRequest req) {\n            super(req.getSearcher(), req.getSchema().getIndexAnalyzer());\n            this.params = req.getParams();\n            this.schema = req.getSchema();\n            this.setMaxLength(\n                    params.getInt(HighlightParams.MAX_CHARS, UnifiedHighlighter.DEFAULT_MAX_LENGTH));\n            this.setCacheFieldValCharsThreshold(\n                    params.getInt(HighlightParams.CACHE_FIELD_VAL_CHARS_THRESHOLD, DEFAULT_CACHE_CHARS_THRESHOLD));\n\n            // SolrRequestInfo is a thread-local singleton providing access to the ResponseBuilder to code that\n            //   otherwise can't get it in a nicer way.\n            SolrQueryRequest request = SolrRequestInfo.getRequestInfo().getReq();\n            final RTimerTree timerTree;\n            if (request.getRequestTimer() != null) { //It may be null if not used in a search context.\n                timerTree = request.getRequestTimer();\n            } else {\n                timerTree = new RTimerTree(); // since null checks are annoying\n            }\n            loadFieldValuesTimer = timerTree.sub(\"loadFieldValues\"); // we assume a new timer, state of STARTED\n            loadFieldValuesTimer.pause(); // state of PAUSED now with about zero time. Will fail if state isn't STARTED.\n        }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#SolrExtendedUnifiedHighlighter(SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"        public SolrExtendedUnifiedHighlighter(SolrQueryRequest req) {\n            super(req.getSearcher(), req.getSchema().getIndexAnalyzer());\n            this.params = req.getParams();\n            this.schema = req.getSchema();\n            this.setMaxLength(\n                    params.getInt(HighlightParams.MAX_CHARS, UnifiedHighlighter.DEFAULT_MAX_LENGTH));\n            this.setCacheFieldValCharsThreshold(\n                    params.getInt(HighlightParams.CACHE_FIELD_VAL_CHARS_THRESHOLD, DEFAULT_CACHE_CHARS_THRESHOLD));\n\n            // SolrRequestInfo is a thread-local singleton providing access to the ResponseBuilder to code that\n            //   otherwise can't get it in a nicer way.\n            SolrQueryRequest request = SolrRequestInfo.getRequestInfo().getReq();\n            final RTimerTree timerTree;\n            if (request.getRequestTimer() != null) { //It may be null if not used in a search context.\n                timerTree = request.getRequestTimer();\n            } else {\n                timerTree = new RTimerTree(); // since null checks are annoying\n            }\n            loadFieldValuesTimer = timerTree.sub(\"loadFieldValues\"); // we assume a new timer, state of STARTED\n            loadFieldValuesTimer.pause(); // state of PAUSED now with about zero time. Will fail if state isn't STARTED.\n        }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fee424905e7d55c01f551853e7da496662f8722f","date":1482870873,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#SolrExtendedUnifiedHighlighter(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#SolrExtendedUnifiedHighlighter(SolrQueryRequest).mjava","sourceNew":"    public SolrExtendedUnifiedHighlighter(SolrQueryRequest req) {\n      super(req.getSearcher(), req.getSchema().getIndexAnalyzer());\n      this.params = req.getParams();\n      this.schema = req.getSchema();\n      this.setMaxLength(\n          params.getInt(HighlightParams.MAX_CHARS, UnifiedHighlighter.DEFAULT_MAX_LENGTH));\n      this.setCacheFieldValCharsThreshold(\n          params.getInt(HighlightParams.CACHE_FIELD_VAL_CHARS_THRESHOLD, DEFAULT_CACHE_CHARS_THRESHOLD));\n\n      // SolrRequestInfo is a thread-local singleton providing access to the ResponseBuilder to code that\n      //   otherwise can't get it in a nicer way.\n      SolrQueryRequest request = SolrRequestInfo.getRequestInfo().getReq();\n      final RTimerTree timerTree;\n      if (request.getRequestTimer() != null) { //It may be null if not used in a search context.\n        timerTree = request.getRequestTimer();\n      } else {\n        timerTree = new RTimerTree(); // since null checks are annoying\n      }\n      loadFieldValuesTimer = timerTree.sub(\"loadFieldValues\"); // we assume a new timer, state of STARTED\n      loadFieldValuesTimer.pause(); // state of PAUSED now with about zero time. Will fail if state isn't STARTED.\n    }\n\n","sourceOld":"        public SolrExtendedUnifiedHighlighter(SolrQueryRequest req) {\n            super(req.getSearcher(), req.getSchema().getIndexAnalyzer());\n            this.params = req.getParams();\n            this.schema = req.getSchema();\n            this.setMaxLength(\n                    params.getInt(HighlightParams.MAX_CHARS, UnifiedHighlighter.DEFAULT_MAX_LENGTH));\n            this.setCacheFieldValCharsThreshold(\n                    params.getInt(HighlightParams.CACHE_FIELD_VAL_CHARS_THRESHOLD, DEFAULT_CACHE_CHARS_THRESHOLD));\n\n            // SolrRequestInfo is a thread-local singleton providing access to the ResponseBuilder to code that\n            //   otherwise can't get it in a nicer way.\n            SolrQueryRequest request = SolrRequestInfo.getRequestInfo().getReq();\n            final RTimerTree timerTree;\n            if (request.getRequestTimer() != null) { //It may be null if not used in a search context.\n                timerTree = request.getRequestTimer();\n            } else {\n                timerTree = new RTimerTree(); // since null checks are annoying\n            }\n            loadFieldValuesTimer = timerTree.sub(\"loadFieldValues\"); // we assume a new timer, state of STARTED\n            loadFieldValuesTimer.pause(); // state of PAUSED now with about zero time. Will fail if state isn't STARTED.\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#SolrExtendedUnifiedHighlighter(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#SolrExtendedUnifiedHighlighter(SolrQueryRequest).mjava","sourceNew":"    public SolrExtendedUnifiedHighlighter(SolrQueryRequest req) {\n      super(req.getSearcher(), req.getSchema().getIndexAnalyzer());\n      this.params = req.getParams();\n      this.schema = req.getSchema();\n      this.setMaxLength(\n          params.getInt(HighlightParams.MAX_CHARS, UnifiedHighlighter.DEFAULT_MAX_LENGTH));\n      this.setCacheFieldValCharsThreshold(\n          params.getInt(HighlightParams.CACHE_FIELD_VAL_CHARS_THRESHOLD, DEFAULT_CACHE_CHARS_THRESHOLD));\n\n      // SolrRequestInfo is a thread-local singleton providing access to the ResponseBuilder to code that\n      //   otherwise can't get it in a nicer way.\n      SolrQueryRequest request = SolrRequestInfo.getRequestInfo().getReq();\n      final RTimerTree timerTree;\n      if (request.getRequestTimer() != null) { //It may be null if not used in a search context.\n        timerTree = request.getRequestTimer();\n      } else {\n        timerTree = new RTimerTree(); // since null checks are annoying\n      }\n      loadFieldValuesTimer = timerTree.sub(\"loadFieldValues\"); // we assume a new timer, state of STARTED\n      loadFieldValuesTimer.pause(); // state of PAUSED now with about zero time. Will fail if state isn't STARTED.\n    }\n\n","sourceOld":"        public SolrExtendedUnifiedHighlighter(SolrQueryRequest req) {\n            super(req.getSearcher(), req.getSchema().getIndexAnalyzer());\n            this.params = req.getParams();\n            this.schema = req.getSchema();\n            this.setMaxLength(\n                    params.getInt(HighlightParams.MAX_CHARS, UnifiedHighlighter.DEFAULT_MAX_LENGTH));\n            this.setCacheFieldValCharsThreshold(\n                    params.getInt(HighlightParams.CACHE_FIELD_VAL_CHARS_THRESHOLD, DEFAULT_CACHE_CHARS_THRESHOLD));\n\n            // SolrRequestInfo is a thread-local singleton providing access to the ResponseBuilder to code that\n            //   otherwise can't get it in a nicer way.\n            SolrQueryRequest request = SolrRequestInfo.getRequestInfo().getReq();\n            final RTimerTree timerTree;\n            if (request.getRequestTimer() != null) { //It may be null if not used in a search context.\n                timerTree = request.getRequestTimer();\n            } else {\n                timerTree = new RTimerTree(); // since null checks are annoying\n            }\n            loadFieldValuesTimer = timerTree.sub(\"loadFieldValues\"); // we assume a new timer, state of STARTED\n            loadFieldValuesTimer.pause(); // state of PAUSED now with about zero time. Will fail if state isn't STARTED.\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2a846001bbec14e653bf0dda99d628b86ee8fd8","date":1486061499,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#SolrExtendedUnifiedHighlighter(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#SolrExtendedUnifiedHighlighter(SolrQueryRequest).mjava","sourceNew":"    public SolrExtendedUnifiedHighlighter(SolrQueryRequest req) {\n      super(req.getSearcher(), req.getSchema().getIndexAnalyzer());\n      this.params = req.getParams();\n      this.schema = req.getSchema();\n      this.setMaxLength(\n          params.getInt(HighlightParams.MAX_CHARS, DEFAULT_MAX_CHARS));\n      this.setCacheFieldValCharsThreshold(\n          params.getInt(HighlightParams.CACHE_FIELD_VAL_CHARS_THRESHOLD, DEFAULT_CACHE_CHARS_THRESHOLD));\n\n      // SolrRequestInfo is a thread-local singleton providing access to the ResponseBuilder to code that\n      //   otherwise can't get it in a nicer way.\n      SolrQueryRequest request = SolrRequestInfo.getRequestInfo().getReq();\n      final RTimerTree timerTree;\n      if (request.getRequestTimer() != null) { //It may be null if not used in a search context.\n        timerTree = request.getRequestTimer();\n      } else {\n        timerTree = new RTimerTree(); // since null checks are annoying\n      }\n      loadFieldValuesTimer = timerTree.sub(\"loadFieldValues\"); // we assume a new timer, state of STARTED\n      loadFieldValuesTimer.pause(); // state of PAUSED now with about zero time. Will fail if state isn't STARTED.\n    }\n\n","sourceOld":"    public SolrExtendedUnifiedHighlighter(SolrQueryRequest req) {\n      super(req.getSearcher(), req.getSchema().getIndexAnalyzer());\n      this.params = req.getParams();\n      this.schema = req.getSchema();\n      this.setMaxLength(\n          params.getInt(HighlightParams.MAX_CHARS, UnifiedHighlighter.DEFAULT_MAX_LENGTH));\n      this.setCacheFieldValCharsThreshold(\n          params.getInt(HighlightParams.CACHE_FIELD_VAL_CHARS_THRESHOLD, DEFAULT_CACHE_CHARS_THRESHOLD));\n\n      // SolrRequestInfo is a thread-local singleton providing access to the ResponseBuilder to code that\n      //   otherwise can't get it in a nicer way.\n      SolrQueryRequest request = SolrRequestInfo.getRequestInfo().getReq();\n      final RTimerTree timerTree;\n      if (request.getRequestTimer() != null) { //It may be null if not used in a search context.\n        timerTree = request.getRequestTimer();\n      } else {\n        timerTree = new RTimerTree(); // since null checks are annoying\n      }\n      loadFieldValuesTimer = timerTree.sub(\"loadFieldValues\"); // we assume a new timer, state of STARTED\n      loadFieldValuesTimer.pause(); // state of PAUSED now with about zero time. Will fail if state isn't STARTED.\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca00abebe9d8dab3cb9508f534a7fc6abae73247","date":1540315690,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#SolrExtendedUnifiedHighlighter(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter#SolrExtendedUnifiedHighlighter(SolrQueryRequest).mjava","sourceNew":"    public SolrExtendedUnifiedHighlighter(SolrQueryRequest req) {\n      super(req.getSearcher(), req.getSchema().getIndexAnalyzer());\n      this.params = req.getParams();\n      this.schema = req.getSchema();\n      this.setMaxLength(\n          params.getInt(HighlightParams.MAX_CHARS, DEFAULT_MAX_CHARS));\n      this.setCacheFieldValCharsThreshold(\n          params.getInt(HighlightParams.CACHE_FIELD_VAL_CHARS_THRESHOLD, DEFAULT_CACHE_CHARS_THRESHOLD));\n\n      final RTimerTree timerTree;\n      if (req.getRequestTimer() != null) { //It may be null if not used in a search context.\n        timerTree = req.getRequestTimer();\n      } else {\n        timerTree = new RTimerTree(); // since null checks are annoying\n      }\n      loadFieldValuesTimer = timerTree.sub(\"loadFieldValues\"); // we assume a new timer, state of STARTED\n      loadFieldValuesTimer.pause(); // state of PAUSED now with about zero time. Will fail if state isn't STARTED.\n    }\n\n","sourceOld":"    public SolrExtendedUnifiedHighlighter(SolrQueryRequest req) {\n      super(req.getSearcher(), req.getSchema().getIndexAnalyzer());\n      this.params = req.getParams();\n      this.schema = req.getSchema();\n      this.setMaxLength(\n          params.getInt(HighlightParams.MAX_CHARS, DEFAULT_MAX_CHARS));\n      this.setCacheFieldValCharsThreshold(\n          params.getInt(HighlightParams.CACHE_FIELD_VAL_CHARS_THRESHOLD, DEFAULT_CACHE_CHARS_THRESHOLD));\n\n      // SolrRequestInfo is a thread-local singleton providing access to the ResponseBuilder to code that\n      //   otherwise can't get it in a nicer way.\n      SolrQueryRequest request = SolrRequestInfo.getRequestInfo().getReq();\n      final RTimerTree timerTree;\n      if (request.getRequestTimer() != null) { //It may be null if not used in a search context.\n        timerTree = request.getRequestTimer();\n      } else {\n        timerTree = new RTimerTree(); // since null checks are annoying\n      }\n      loadFieldValuesTimer = timerTree.sub(\"loadFieldValues\"); // we assume a new timer, state of STARTED\n      loadFieldValuesTimer.pause(); // state of PAUSED now with about zero time. Will fail if state isn't STARTED.\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f2a846001bbec14e653bf0dda99d628b86ee8fd8":["fee424905e7d55c01f551853e7da496662f8722f"],"fee424905e7d55c01f551853e7da496662f8722f":["75babd1dfc2521603bfeb0968042e921d8c6c652"],"727bb765ff2542275f6d31f67be18d7104bae148":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","75babd1dfc2521603bfeb0968042e921d8c6c652"],"8868b7c4fbf215c41e7b4ea2cfc40d1970672910":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"75babd1dfc2521603bfeb0968042e921d8c6c652":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8868b7c4fbf215c41e7b4ea2cfc40d1970672910"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ca00abebe9d8dab3cb9508f534a7fc6abae73247":["f2a846001bbec14e653bf0dda99d628b86ee8fd8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ca00abebe9d8dab3cb9508f534a7fc6abae73247"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["727bb765ff2542275f6d31f67be18d7104bae148","fee424905e7d55c01f551853e7da496662f8722f"]},"commit2Childs":{"f2a846001bbec14e653bf0dda99d628b86ee8fd8":["ca00abebe9d8dab3cb9508f534a7fc6abae73247"],"fee424905e7d55c01f551853e7da496662f8722f":["f2a846001bbec14e653bf0dda99d628b86ee8fd8","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"727bb765ff2542275f6d31f67be18d7104bae148":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"8868b7c4fbf215c41e7b4ea2cfc40d1970672910":["75babd1dfc2521603bfeb0968042e921d8c6c652"],"75babd1dfc2521603bfeb0968042e921d8c6c652":["fee424905e7d55c01f551853e7da496662f8722f","727bb765ff2542275f6d31f67be18d7104bae148"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["727bb765ff2542275f6d31f67be18d7104bae148","8868b7c4fbf215c41e7b4ea2cfc40d1970672910","75babd1dfc2521603bfeb0968042e921d8c6c652"],"ca00abebe9d8dab3cb9508f534a7fc6abae73247":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}