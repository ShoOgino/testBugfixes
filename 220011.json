{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleSloppyPhraseQueryMaker#prepareQueries().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleSloppyPhraseQueryMaker#prepareQueries().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleSloppyPhraseQueryMaker#prepareQueries().mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker#prepareQueries()\n   */\n  @Override\n  protected Query[] prepareQueries() throws Exception {\n    // extract some 100 words from doc text to an array\n    String words[];\n    ArrayList<String> w = new ArrayList<String>();\n    StringTokenizer st = new StringTokenizer(SingleDocSource.DOC_TEXT);\n    while (st.hasMoreTokens() && w.size()<100) {\n      w.add(st.nextToken());\n    }\n    words = w.toArray(new String[0]);\n\n    // create queries (that would find stuff) with varying slops\n    ArrayList<Query> queries = new ArrayList<Query>(); \n    for (int slop=0; slop<8; slop++) {\n      for (int qlen=2; qlen<6; qlen++) {\n        for (int wd=0; wd<words.length-qlen-slop; wd++) {\n          // ordered\n          int remainedSlop = slop;\n          PhraseQuery q = new PhraseQuery();\n          q.setSlop(slop);\n          int wind = wd;\n          for (int i=0; i<qlen; i++) {\n            q.add(new Term(DocMaker.BODY_FIELD,words[wind++]));\n            if (remainedSlop>0) {\n              remainedSlop--;\n              wind++;\n            }\n          }\n          queries.add(q);\n          // reversed\n          remainedSlop = slop;\n          q = new PhraseQuery();\n          q.setSlop(slop+2*qlen);\n          wind = wd+qlen+remainedSlop-1;\n          for (int i=0; i<qlen; i++) {\n            q.add(new Term(DocMaker.BODY_FIELD,words[wind--]));\n            if (remainedSlop>0) {\n              remainedSlop--;\n              wind--;\n            }\n          }\n          queries.add(q);\n        }\n      }\n    }\n    return queries.toArray(new Query[0]);\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker#prepareQueries()\n   */\n  @Override\n  protected Query[] prepareQueries() throws Exception {\n    // extract some 100 words from doc text to an array\n    String words[];\n    ArrayList<String> w = new ArrayList<String>();\n    StringTokenizer st = new StringTokenizer(SingleDocSource.DOC_TEXT);\n    while (st.hasMoreTokens() && w.size()<100) {\n      w.add(st.nextToken());\n    }\n    words = w.toArray(new String[0]);\n\n    // create queries (that would find stuff) with varying slops\n    ArrayList<Query> queries = new ArrayList<Query>(); \n    for (int slop=0; slop<8; slop++) {\n      for (int qlen=2; qlen<6; qlen++) {\n        for (int wd=0; wd<words.length-qlen-slop; wd++) {\n          // ordered\n          int remainedSlop = slop;\n          PhraseQuery q = new PhraseQuery();\n          q.setSlop(slop);\n          int wind = wd;\n          for (int i=0; i<qlen; i++) {\n            q.add(new Term(DocMaker.BODY_FIELD,words[wind++]));\n            if (remainedSlop>0) {\n              remainedSlop--;\n              wind++;\n            }\n          }\n          queries.add(q);\n          // reversed\n          remainedSlop = slop;\n          q = new PhraseQuery();\n          q.setSlop(slop+2*qlen);\n          wind = wd+qlen+remainedSlop-1;\n          for (int i=0; i<qlen; i++) {\n            q.add(new Term(DocMaker.BODY_FIELD,words[wind--]));\n            if (remainedSlop>0) {\n              remainedSlop--;\n              wind--;\n            }\n          }\n          queries.add(q);\n        }\n      }\n    }\n    return queries.toArray(new Query[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleSloppyPhraseQueryMaker#prepareQueries().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleSloppyPhraseQueryMaker#prepareQueries().mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker#prepareQueries()\n   */\n  @Override\n  protected Query[] prepareQueries() throws Exception {\n    // extract some 100 words from doc text to an array\n    String words[];\n    ArrayList<String> w = new ArrayList<>();\n    StringTokenizer st = new StringTokenizer(SingleDocSource.DOC_TEXT);\n    while (st.hasMoreTokens() && w.size()<100) {\n      w.add(st.nextToken());\n    }\n    words = w.toArray(new String[0]);\n\n    // create queries (that would find stuff) with varying slops\n    ArrayList<Query> queries = new ArrayList<>();\n    for (int slop=0; slop<8; slop++) {\n      for (int qlen=2; qlen<6; qlen++) {\n        for (int wd=0; wd<words.length-qlen-slop; wd++) {\n          // ordered\n          int remainedSlop = slop;\n          PhraseQuery q = new PhraseQuery();\n          q.setSlop(slop);\n          int wind = wd;\n          for (int i=0; i<qlen; i++) {\n            q.add(new Term(DocMaker.BODY_FIELD,words[wind++]));\n            if (remainedSlop>0) {\n              remainedSlop--;\n              wind++;\n            }\n          }\n          queries.add(q);\n          // reversed\n          remainedSlop = slop;\n          q = new PhraseQuery();\n          q.setSlop(slop+2*qlen);\n          wind = wd+qlen+remainedSlop-1;\n          for (int i=0; i<qlen; i++) {\n            q.add(new Term(DocMaker.BODY_FIELD,words[wind--]));\n            if (remainedSlop>0) {\n              remainedSlop--;\n              wind--;\n            }\n          }\n          queries.add(q);\n        }\n      }\n    }\n    return queries.toArray(new Query[0]);\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker#prepareQueries()\n   */\n  @Override\n  protected Query[] prepareQueries() throws Exception {\n    // extract some 100 words from doc text to an array\n    String words[];\n    ArrayList<String> w = new ArrayList<String>();\n    StringTokenizer st = new StringTokenizer(SingleDocSource.DOC_TEXT);\n    while (st.hasMoreTokens() && w.size()<100) {\n      w.add(st.nextToken());\n    }\n    words = w.toArray(new String[0]);\n\n    // create queries (that would find stuff) with varying slops\n    ArrayList<Query> queries = new ArrayList<Query>(); \n    for (int slop=0; slop<8; slop++) {\n      for (int qlen=2; qlen<6; qlen++) {\n        for (int wd=0; wd<words.length-qlen-slop; wd++) {\n          // ordered\n          int remainedSlop = slop;\n          PhraseQuery q = new PhraseQuery();\n          q.setSlop(slop);\n          int wind = wd;\n          for (int i=0; i<qlen; i++) {\n            q.add(new Term(DocMaker.BODY_FIELD,words[wind++]));\n            if (remainedSlop>0) {\n              remainedSlop--;\n              wind++;\n            }\n          }\n          queries.add(q);\n          // reversed\n          remainedSlop = slop;\n          q = new PhraseQuery();\n          q.setSlop(slop+2*qlen);\n          wind = wd+qlen+remainedSlop-1;\n          for (int i=0; i<qlen; i++) {\n            q.add(new Term(DocMaker.BODY_FIELD,words[wind--]));\n            if (remainedSlop>0) {\n              remainedSlop--;\n              wind--;\n            }\n          }\n          queries.add(q);\n        }\n      }\n    }\n    return queries.toArray(new Query[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleSloppyPhraseQueryMaker#prepareQueries().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleSloppyPhraseQueryMaker#prepareQueries().mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker#prepareQueries()\n   */\n  @Override\n  protected Query[] prepareQueries() throws Exception {\n    // extract some 100 words from doc text to an array\n    String words[];\n    ArrayList<String> w = new ArrayList<>();\n    StringTokenizer st = new StringTokenizer(SingleDocSource.DOC_TEXT);\n    while (st.hasMoreTokens() && w.size()<100) {\n      w.add(st.nextToken());\n    }\n    words = w.toArray(new String[0]);\n\n    // create queries (that would find stuff) with varying slops\n    ArrayList<Query> queries = new ArrayList<>();\n    for (int slop=0; slop<8; slop++) {\n      for (int qlen=2; qlen<6; qlen++) {\n        for (int wd=0; wd<words.length-qlen-slop; wd++) {\n          // ordered\n          int remainedSlop = slop;\n          int wind = wd;\n          PhraseQuery.Builder builder = new PhraseQuery.Builder();\n          for (int i=0; i<qlen; i++) {\n            builder.add(new Term(DocMaker.BODY_FIELD, words[wind++]), i);\n            if (remainedSlop>0) {\n              remainedSlop--;\n              wind++;\n            }\n          }\n          builder.setSlop(slop);\n          PhraseQuery q = builder.build();\n          queries.add(q);\n          // reversed\n          remainedSlop = slop;\n          wind = wd+qlen+remainedSlop-1;\n          builder = new PhraseQuery.Builder();\n          for (int i=0; i<qlen; i++) {\n            builder.add(new Term(DocMaker.BODY_FIELD, words[wind--]), i);\n            if (remainedSlop>0) {\n              remainedSlop--;\n              wind--;\n            }\n          }\n          builder.setSlop(slop + 2 * qlen);\n          q = builder.build();\n          queries.add(q);\n        }\n      }\n    }\n    return queries.toArray(new Query[0]);\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker#prepareQueries()\n   */\n  @Override\n  protected Query[] prepareQueries() throws Exception {\n    // extract some 100 words from doc text to an array\n    String words[];\n    ArrayList<String> w = new ArrayList<>();\n    StringTokenizer st = new StringTokenizer(SingleDocSource.DOC_TEXT);\n    while (st.hasMoreTokens() && w.size()<100) {\n      w.add(st.nextToken());\n    }\n    words = w.toArray(new String[0]);\n\n    // create queries (that would find stuff) with varying slops\n    ArrayList<Query> queries = new ArrayList<>();\n    for (int slop=0; slop<8; slop++) {\n      for (int qlen=2; qlen<6; qlen++) {\n        for (int wd=0; wd<words.length-qlen-slop; wd++) {\n          // ordered\n          int remainedSlop = slop;\n          PhraseQuery q = new PhraseQuery();\n          q.setSlop(slop);\n          int wind = wd;\n          for (int i=0; i<qlen; i++) {\n            q.add(new Term(DocMaker.BODY_FIELD,words[wind++]));\n            if (remainedSlop>0) {\n              remainedSlop--;\n              wind++;\n            }\n          }\n          queries.add(q);\n          // reversed\n          remainedSlop = slop;\n          q = new PhraseQuery();\n          q.setSlop(slop+2*qlen);\n          wind = wd+qlen+remainedSlop-1;\n          for (int i=0; i<qlen; i++) {\n            q.add(new Term(DocMaker.BODY_FIELD,words[wind--]));\n            if (remainedSlop>0) {\n              remainedSlop--;\n              wind--;\n            }\n          }\n          queries.add(q);\n        }\n      }\n    }\n    return queries.toArray(new Query[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9e1499c5d26c936238506df90a3c02c76707722":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e9e1499c5d26c936238506df90a3c02c76707722"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["e9e1499c5d26c936238506df90a3c02c76707722"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"e9e1499c5d26c936238506df90a3c02c76707722":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}