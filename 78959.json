{"path":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/TestXLSXResponseWriter#testStructuredDataViaBaseWriters().mjava","commits":[{"id":"056868364d4e4a9ab9351ae5cc55e0506fe19769","date":1473148338,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/TestXLSXResponseWriter#testStructuredDataViaBaseWriters().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testStructuredDataViaBaseWriters() throws IOException, Exception {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    // Don't send a ContentStream back, this will fall back to the configured base writer.\n    // But abuse the CONTENT key to ensure writer is also checking type\n    rsp.add(RawResponseWriter.CONTENT, \"test\");\n    rsp.add(\"foo\", \"bar\");\n\n    SolrQueryRequest r = req();\n\n    // check Content-Type\n    assertEquals(\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\", writerXlsx.getContentType(r, rsp));\n\n    // test our basic types,and that fields come back in the requested order\n    XSSFSheet resultSheet = getWSResultForQuery(req(\"q\",\"id:1\", \"wt\",\"xlsx\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt1\"));\n\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt1\\n1,hi,-1,12345678987654321,F,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n        , getStringFromSheet(resultSheet));\n\n    resultSheet = getWSResultForQuery(req(\"q\",\"id:1^0\", \"wt\",\"xlsx\", \"fl\",\"id,score,foo_s\"));\n    // test retrieving score\n    assertEquals(\"id,score,foo_s\\n1,0.0,hi\\n\", getStringFromSheet(resultSheet));\n\n    resultSheet = getWSResultForQuery(req(\"q\",\"id:1^0\", \"wt\",\"xlsx\", \"colname.id\", \"I.D.\", \"colwidth.id\", \"10\",\n                                      \"fl\",\"id,score,foo_s\"));\n    // test override colname/width\n    assertEquals(\"I.D.,score,foo_s\\n1,0.0,hi\\n\", getStringFromSheet(resultSheet));\n    // test colwidth (value returned is in 256ths of a character as per excel standard)\n    assertEquals(10*256, resultSheet.getColumnWidth(0));\n\n    resultSheet = getWSResultForQuery(req(\"q\",\"id:2\", \"wt\",\"xlsx\", \"fl\",\"id,v_ss\"));\n    // test multivalued\n    assertEquals(\"id,v_ss\\n2,hi; there\\n\", getStringFromSheet(resultSheet));\n\n    // test retrieving fields from index\n    resultSheet = getWSResultForQuery(req(\"q\",\"*:*\", \"wt\",\"xslx\", \"fl\",\"*,score\"));\n    String result = getStringFromSheet(resultSheet);\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt1,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    resultSheet = getWSResultForQuery(req(\"q\",\"id:2\", \"wt\",\"xlsx\", \"fl\",\"id,foo_s,v_ss\"));\n    assertEquals(\"id,foo_s,v_ss\\n2,,hi; there\\n\", getStringFromSheet(resultSheet));\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt1\", new Date(Instant.parse(\"2000-01-02T03:04:05Z\").toEpochMilli()));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n    d.addField(\"shouldbeunstored\",\"foo\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    rsp = new SolrQueryResponse();\n    rsp.addResponse(sdl);\n\n    rsp.setReturnFields( new SolrReturnFields(\"id,foo_s\", req) );\n\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", getStringFromSheet(resultSheet));\n\n    // try scores\n    rsp.setReturnFields( new SolrReturnFields(\"id,score,foo_s\", req) );\n\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", getStringFromSheet(resultSheet));\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new SolrReturnFields(\"*\", req) );\n\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt1,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,hi; there,nice; output\\n\", getStringFromSheet(resultSheet));\n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new SolrReturnFields(\"*,score\", req) );\n    resultSheet = getWSResultForQuery(req, rsp);\n    String s = getStringFromSheet(resultSheet);\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n    \n    // Test field globs\n    rsp.setReturnFields( new SolrReturnFields(\"id,foo*\", req) );\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt1\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,,,,,,\\n\", getStringFromSheet(resultSheet));\n\n    rsp.setReturnFields( new SolrReturnFields(\"id,*_d*\", req) );\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"id,foo_d,foo_dt1\\n\" +\n        \"1,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,\\n\", getStringFromSheet(resultSheet));\n\n    // Test function queries\n    rsp.setReturnFields( new SolrReturnFields(\"sum(1,1),id,exists(foo_s1),div(9,1),foo_f\", req) );\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"sum(1,1),id,exists(foo_s1),div(9,1),foo_f\\n\" +\n        \",1,,,1.414\\n\" +\n        \",2,,,\\n\", getStringFromSheet(resultSheet));\n\n    // Test transformers\n    rsp.setReturnFields( new SolrReturnFields(\"mydocid:[docid],[explain]\", req) );\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"mydocid,[explain]\\n\" +\n        \",\\n\" +\n        \",\\n\", getStringFromSheet(resultSheet));\n\n    req.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["080177034f0f8c5fc458255dbe1e84334b531ade"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/TestXLSXResponseWriter#testStructuredDataViaBaseWriters().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testStructuredDataViaBaseWriters() throws IOException, Exception {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    // Don't send a ContentStream back, this will fall back to the configured base writer.\n    // But abuse the CONTENT key to ensure writer is also checking type\n    rsp.add(RawResponseWriter.CONTENT, \"test\");\n    rsp.add(\"foo\", \"bar\");\n\n    SolrQueryRequest r = req();\n\n    // check Content-Type\n    assertEquals(\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\", writerXlsx.getContentType(r, rsp));\n\n    // test our basic types,and that fields come back in the requested order\n    XSSFSheet resultSheet = getWSResultForQuery(req(\"q\",\"id:1\", \"wt\",\"xlsx\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt1\"));\n\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt1\\n1,hi,-1,12345678987654321,F,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n        , getStringFromSheet(resultSheet));\n\n    resultSheet = getWSResultForQuery(req(\"q\",\"id:1^0\", \"wt\",\"xlsx\", \"fl\",\"id,score,foo_s\"));\n    // test retrieving score\n    assertEquals(\"id,score,foo_s\\n1,0.0,hi\\n\", getStringFromSheet(resultSheet));\n\n    resultSheet = getWSResultForQuery(req(\"q\",\"id:1^0\", \"wt\",\"xlsx\", \"colname.id\", \"I.D.\", \"colwidth.id\", \"10\",\n                                      \"fl\",\"id,score,foo_s\"));\n    // test override colname/width\n    assertEquals(\"I.D.,score,foo_s\\n1,0.0,hi\\n\", getStringFromSheet(resultSheet));\n    // test colwidth (value returned is in 256ths of a character as per excel standard)\n    assertEquals(10*256, resultSheet.getColumnWidth(0));\n\n    resultSheet = getWSResultForQuery(req(\"q\",\"id:2\", \"wt\",\"xlsx\", \"fl\",\"id,v_ss\"));\n    // test multivalued\n    assertEquals(\"id,v_ss\\n2,hi; there\\n\", getStringFromSheet(resultSheet));\n\n    // test retrieving fields from index\n    resultSheet = getWSResultForQuery(req(\"q\",\"*:*\", \"wt\",\"xslx\", \"fl\",\"*,score\"));\n    String result = getStringFromSheet(resultSheet);\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt1,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    resultSheet = getWSResultForQuery(req(\"q\",\"id:2\", \"wt\",\"xlsx\", \"fl\",\"id,foo_s,v_ss\"));\n    assertEquals(\"id,foo_s,v_ss\\n2,,hi; there\\n\", getStringFromSheet(resultSheet));\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt1\", new Date(Instant.parse(\"2000-01-02T03:04:05Z\").toEpochMilli()));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n    d.addField(\"shouldbeunstored\",\"foo\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    rsp = new SolrQueryResponse();\n    rsp.addResponse(sdl);\n\n    rsp.setReturnFields( new SolrReturnFields(\"id,foo_s\", req) );\n\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", getStringFromSheet(resultSheet));\n\n    // try scores\n    rsp.setReturnFields( new SolrReturnFields(\"id,score,foo_s\", req) );\n\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", getStringFromSheet(resultSheet));\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new SolrReturnFields(\"*\", req) );\n\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt1,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,hi; there,nice; output\\n\", getStringFromSheet(resultSheet));\n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new SolrReturnFields(\"*,score\", req) );\n    resultSheet = getWSResultForQuery(req, rsp);\n    String s = getStringFromSheet(resultSheet);\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n    \n    // Test field globs\n    rsp.setReturnFields( new SolrReturnFields(\"id,foo*\", req) );\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt1\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,,,,,,\\n\", getStringFromSheet(resultSheet));\n\n    rsp.setReturnFields( new SolrReturnFields(\"id,*_d*\", req) );\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"id,foo_d,foo_dt1\\n\" +\n        \"1,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,\\n\", getStringFromSheet(resultSheet));\n\n    // Test function queries\n    rsp.setReturnFields( new SolrReturnFields(\"sum(1,1),id,exists(foo_s1),div(9,1),foo_f\", req) );\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"sum(1,1),id,exists(foo_s1),div(9,1),foo_f\\n\" +\n        \",1,,,1.414\\n\" +\n        \",2,,,\\n\", getStringFromSheet(resultSheet));\n\n    // Test transformers\n    rsp.setReturnFields( new SolrReturnFields(\"mydocid:[docid],[explain]\", req) );\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"mydocid,[explain]\\n\" +\n        \",\\n\" +\n        \",\\n\", getStringFromSheet(resultSheet));\n\n    req.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/TestXLSXResponseWriter#testStructuredDataViaBaseWriters().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testStructuredDataViaBaseWriters() throws IOException, Exception {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    // Don't send a ContentStream back, this will fall back to the configured base writer.\n    // But abuse the CONTENT key to ensure writer is also checking type\n    rsp.add(RawResponseWriter.CONTENT, \"test\");\n    rsp.add(\"foo\", \"bar\");\n\n    SolrQueryRequest r = req();\n\n    // check Content-Type\n    assertEquals(\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\", writerXlsx.getContentType(r, rsp));\n\n    // test our basic types,and that fields come back in the requested order\n    XSSFSheet resultSheet = getWSResultForQuery(req(\"q\",\"id:1\", \"wt\",\"xlsx\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt1\"));\n\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt1\\n1,hi,-1,12345678987654321,F,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n        , getStringFromSheet(resultSheet));\n\n    resultSheet = getWSResultForQuery(req(\"q\",\"id:1^0\", \"wt\",\"xlsx\", \"fl\",\"id,score,foo_s\"));\n    // test retrieving score\n    assertEquals(\"id,score,foo_s\\n1,0.0,hi\\n\", getStringFromSheet(resultSheet));\n\n    resultSheet = getWSResultForQuery(req(\"q\",\"id:1^0\", \"wt\",\"xlsx\", \"colname.id\", \"I.D.\", \"colwidth.id\", \"10\",\n                                      \"fl\",\"id,score,foo_s\"));\n    // test override colname/width\n    assertEquals(\"I.D.,score,foo_s\\n1,0.0,hi\\n\", getStringFromSheet(resultSheet));\n    // test colwidth (value returned is in 256ths of a character as per excel standard)\n    assertEquals(10*256, resultSheet.getColumnWidth(0));\n\n    resultSheet = getWSResultForQuery(req(\"q\",\"id:2\", \"wt\",\"xlsx\", \"fl\",\"id,v_ss\"));\n    // test multivalued\n    assertEquals(\"id,v_ss\\n2,hi; there\\n\", getStringFromSheet(resultSheet));\n\n    // test retrieving fields from index\n    resultSheet = getWSResultForQuery(req(\"q\",\"*:*\", \"wt\",\"xslx\", \"fl\",\"*,score\"));\n    String result = getStringFromSheet(resultSheet);\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt1,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    resultSheet = getWSResultForQuery(req(\"q\",\"id:2\", \"wt\",\"xlsx\", \"fl\",\"id,foo_s,v_ss\"));\n    assertEquals(\"id,foo_s,v_ss\\n2,,hi; there\\n\", getStringFromSheet(resultSheet));\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt1\", new Date(Instant.parse(\"2000-01-02T03:04:05Z\").toEpochMilli()));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n    d.addField(\"shouldbeunstored\",\"foo\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    rsp = new SolrQueryResponse();\n    rsp.addResponse(sdl);\n\n    rsp.setReturnFields( new SolrReturnFields(\"id,foo_s\", req) );\n\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", getStringFromSheet(resultSheet));\n\n    // try scores\n    rsp.setReturnFields( new SolrReturnFields(\"id,score,foo_s\", req) );\n\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", getStringFromSheet(resultSheet));\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new SolrReturnFields(\"*\", req) );\n\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt1,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,hi; there,nice; output\\n\", getStringFromSheet(resultSheet));\n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new SolrReturnFields(\"*,score\", req) );\n    resultSheet = getWSResultForQuery(req, rsp);\n    String s = getStringFromSheet(resultSheet);\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n    \n    // Test field globs\n    rsp.setReturnFields( new SolrReturnFields(\"id,foo*\", req) );\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt1\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,,,,,,\\n\", getStringFromSheet(resultSheet));\n\n    rsp.setReturnFields( new SolrReturnFields(\"id,*_d*\", req) );\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"id,foo_d,foo_dt1\\n\" +\n        \"1,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,\\n\", getStringFromSheet(resultSheet));\n\n    // Test function queries\n    rsp.setReturnFields( new SolrReturnFields(\"sum(1,1),id,exists(foo_s1),div(9,1),foo_f\", req) );\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"sum(1,1),id,exists(foo_s1),div(9,1),foo_f\\n\" +\n        \",1,,,1.414\\n\" +\n        \",2,,,\\n\", getStringFromSheet(resultSheet));\n\n    // Test transformers\n    rsp.setReturnFields( new SolrReturnFields(\"mydocid:[docid],[explain]\", req) );\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"mydocid,[explain]\\n\" +\n        \",\\n\" +\n        \",\\n\", getStringFromSheet(resultSheet));\n\n    req.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/TestXLSXResponseWriter#testStructuredDataViaBaseWriters().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testStructuredDataViaBaseWriters() throws IOException, Exception {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    // Don't send a ContentStream back, this will fall back to the configured base writer.\n    // But abuse the CONTENT key to ensure writer is also checking type\n    rsp.add(RawResponseWriter.CONTENT, \"test\");\n    rsp.add(\"foo\", \"bar\");\n\n    SolrQueryRequest r = req();\n\n    // check Content-Type\n    assertEquals(\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\", writerXlsx.getContentType(r, rsp));\n\n    // test our basic types,and that fields come back in the requested order\n    XSSFSheet resultSheet = getWSResultForQuery(req(\"q\",\"id:1\", \"wt\",\"xlsx\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt1\"));\n\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt1\\n1,hi,-1,12345678987654321,F,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n        , getStringFromSheet(resultSheet));\n\n    resultSheet = getWSResultForQuery(req(\"q\",\"id:1^0\", \"wt\",\"xlsx\", \"fl\",\"id,score,foo_s\"));\n    // test retrieving score\n    assertEquals(\"id,score,foo_s\\n1,0.0,hi\\n\", getStringFromSheet(resultSheet));\n\n    resultSheet = getWSResultForQuery(req(\"q\",\"id:1^0\", \"wt\",\"xlsx\", \"colname.id\", \"I.D.\", \"colwidth.id\", \"10\",\n                                      \"fl\",\"id,score,foo_s\"));\n    // test override colname/width\n    assertEquals(\"I.D.,score,foo_s\\n1,0.0,hi\\n\", getStringFromSheet(resultSheet));\n    // test colwidth (value returned is in 256ths of a character as per excel standard)\n    assertEquals(10*256, resultSheet.getColumnWidth(0));\n\n    resultSheet = getWSResultForQuery(req(\"q\",\"id:2\", \"wt\",\"xlsx\", \"fl\",\"id,v_ss\"));\n    // test multivalued\n    assertEquals(\"id,v_ss\\n2,hi; there\\n\", getStringFromSheet(resultSheet));\n\n    // test retrieving fields from index\n    resultSheet = getWSResultForQuery(req(\"q\",\"*:*\", \"wt\",\"xslx\", \"fl\",\"*,score\"));\n    String result = getStringFromSheet(resultSheet);\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt1,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    resultSheet = getWSResultForQuery(req(\"q\",\"id:2\", \"wt\",\"xlsx\", \"fl\",\"id,foo_s,v_ss\"));\n    assertEquals(\"id,foo_s,v_ss\\n2,,hi; there\\n\", getStringFromSheet(resultSheet));\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt1\", new Date(Instant.parse(\"2000-01-02T03:04:05Z\").toEpochMilli()));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n    d.addField(\"shouldbeunstored\",\"foo\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    rsp = new SolrQueryResponse();\n    rsp.addResponse(sdl);\n\n    rsp.setReturnFields( new SolrReturnFields(\"id,foo_s\", req) );\n\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", getStringFromSheet(resultSheet));\n\n    // try scores\n    rsp.setReturnFields( new SolrReturnFields(\"id,score,foo_s\", req) );\n\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", getStringFromSheet(resultSheet));\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new SolrReturnFields(\"*\", req) );\n\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt1,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,hi; there,nice; output\\n\", getStringFromSheet(resultSheet));\n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new SolrReturnFields(\"*,score\", req) );\n    resultSheet = getWSResultForQuery(req, rsp);\n    String s = getStringFromSheet(resultSheet);\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n    \n    // Test field globs\n    rsp.setReturnFields( new SolrReturnFields(\"id,foo*\", req) );\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt1\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,,,,,,\\n\", getStringFromSheet(resultSheet));\n\n    rsp.setReturnFields( new SolrReturnFields(\"id,*_d*\", req) );\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"id,foo_d,foo_dt1\\n\" +\n        \"1,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,\\n\", getStringFromSheet(resultSheet));\n\n    // Test function queries\n    rsp.setReturnFields( new SolrReturnFields(\"sum(1,1),id,exists(foo_s1),div(9,1),foo_f\", req) );\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"sum(1,1),id,exists(foo_s1),div(9,1),foo_f\\n\" +\n        \",1,,,1.414\\n\" +\n        \",2,,,\\n\", getStringFromSheet(resultSheet));\n\n    // Test transformers\n    rsp.setReturnFields( new SolrReturnFields(\"mydocid:[docid],[explain]\", req) );\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"mydocid,[explain]\\n\" +\n        \",\\n\" +\n        \",\\n\", getStringFromSheet(resultSheet));\n\n    req.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"080177034f0f8c5fc458255dbe1e84334b531ade","date":1553677716,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/TestXLSXResponseWriter#testStructuredDataViaBaseWriters().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/TestXLSXResponseWriter#testStructuredDataViaBaseWriters().mjava","sourceNew":"  @Test\n  public void testStructuredDataViaBaseWriters() throws Exception {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    // Don't send a ContentStream back, this will fall back to the configured base writer.\n    // But abuse the CONTENT key to ensure writer is also checking type\n    rsp.add(RawResponseWriter.CONTENT, \"test\");\n    rsp.add(\"foo\", \"bar\");\n\n    SolrQueryRequest r = req();\n\n    // check Content-Type\n    assertEquals(\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\", writerXlsx.getContentType(r, rsp));\n\n    // test our basic types,and that fields come back in the requested order\n    XSSFSheet resultSheet = getWSResultForQuery(req(\"q\",\"id:1\", \"wt\",\"xlsx\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt1\"));\n\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt1\\n1,hi,-1,12345678987654321,F,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n        , getStringFromSheet(resultSheet));\n\n    resultSheet = getWSResultForQuery(req(\"q\",\"id:1^0\", \"wt\",\"xlsx\", \"fl\",\"id,score,foo_s\"));\n    // test retrieving score\n    assertEquals(\"id,score,foo_s\\n1,0.0,hi\\n\", getStringFromSheet(resultSheet));\n\n    resultSheet = getWSResultForQuery(req(\"q\",\"id:1^0\", \"wt\",\"xlsx\", \"colname.id\", \"I.D.\", \"colwidth.id\", \"10\",\n                                      \"fl\",\"id,score,foo_s\"));\n    // test override colname/width\n    assertEquals(\"I.D.,score,foo_s\\n1,0.0,hi\\n\", getStringFromSheet(resultSheet));\n    // test colwidth (value returned is in 256ths of a character as per excel standard)\n    assertEquals(10*256, resultSheet.getColumnWidth(0));\n\n    resultSheet = getWSResultForQuery(req(\"q\",\"id:2\", \"wt\",\"xlsx\", \"fl\",\"id,v_ss\"));\n    // test multivalued\n    assertEquals(\"id,v_ss\\n2,hi; there\\n\", getStringFromSheet(resultSheet));\n\n    // test retrieving fields from index\n    resultSheet = getWSResultForQuery(req(\"q\",\"*:*\", \"wt\",\"xslx\", \"fl\",\"*,score\"));\n    String result = getStringFromSheet(resultSheet);\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt1,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    resultSheet = getWSResultForQuery(req(\"q\",\"id:2\", \"wt\",\"xlsx\", \"fl\",\"id,foo_s,v_ss\"));\n    assertEquals(\"id,foo_s,v_ss\\n2,,hi; there\\n\", getStringFromSheet(resultSheet));\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt1\", new Date(Instant.parse(\"2000-01-02T03:04:05Z\").toEpochMilli()));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n    d.addField(\"shouldbeunstored\",\"foo\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    rsp = new SolrQueryResponse();\n    rsp.addResponse(sdl);\n\n    rsp.setReturnFields( new SolrReturnFields(\"id,foo_s\", req) );\n\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", getStringFromSheet(resultSheet));\n\n    // try scores\n    rsp.setReturnFields( new SolrReturnFields(\"id,score,foo_s\", req) );\n\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", getStringFromSheet(resultSheet));\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new SolrReturnFields(\"*\", req) );\n\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt1,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,hi; there,nice; output\\n\", getStringFromSheet(resultSheet));\n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new SolrReturnFields(\"*,score\", req) );\n    resultSheet = getWSResultForQuery(req, rsp);\n    String s = getStringFromSheet(resultSheet);\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n    \n    // Test field globs\n    rsp.setReturnFields( new SolrReturnFields(\"id,foo*\", req) );\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt1\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,,,,,,\\n\", getStringFromSheet(resultSheet));\n\n    rsp.setReturnFields( new SolrReturnFields(\"id,*_d*\", req) );\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"id,foo_d,foo_dt1\\n\" +\n        \"1,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,\\n\", getStringFromSheet(resultSheet));\n\n    // Test function queries\n    rsp.setReturnFields( new SolrReturnFields(\"sum(1,1),id,exists(foo_s1),div(9,1),foo_f\", req) );\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"sum(1,1),id,exists(foo_s1),div(9,1),foo_f\\n\" +\n        \",1,,,1.414\\n\" +\n        \",2,,,\\n\", getStringFromSheet(resultSheet));\n\n    // Test transformers\n    rsp.setReturnFields( new SolrReturnFields(\"mydocid:[docid],[explain]\", req) );\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"mydocid,[explain]\\n\" +\n        \",\\n\" +\n        \",\\n\", getStringFromSheet(resultSheet));\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStructuredDataViaBaseWriters() throws IOException, Exception {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    // Don't send a ContentStream back, this will fall back to the configured base writer.\n    // But abuse the CONTENT key to ensure writer is also checking type\n    rsp.add(RawResponseWriter.CONTENT, \"test\");\n    rsp.add(\"foo\", \"bar\");\n\n    SolrQueryRequest r = req();\n\n    // check Content-Type\n    assertEquals(\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\", writerXlsx.getContentType(r, rsp));\n\n    // test our basic types,and that fields come back in the requested order\n    XSSFSheet resultSheet = getWSResultForQuery(req(\"q\",\"id:1\", \"wt\",\"xlsx\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt1\"));\n\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt1\\n1,hi,-1,12345678987654321,F,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n        , getStringFromSheet(resultSheet));\n\n    resultSheet = getWSResultForQuery(req(\"q\",\"id:1^0\", \"wt\",\"xlsx\", \"fl\",\"id,score,foo_s\"));\n    // test retrieving score\n    assertEquals(\"id,score,foo_s\\n1,0.0,hi\\n\", getStringFromSheet(resultSheet));\n\n    resultSheet = getWSResultForQuery(req(\"q\",\"id:1^0\", \"wt\",\"xlsx\", \"colname.id\", \"I.D.\", \"colwidth.id\", \"10\",\n                                      \"fl\",\"id,score,foo_s\"));\n    // test override colname/width\n    assertEquals(\"I.D.,score,foo_s\\n1,0.0,hi\\n\", getStringFromSheet(resultSheet));\n    // test colwidth (value returned is in 256ths of a character as per excel standard)\n    assertEquals(10*256, resultSheet.getColumnWidth(0));\n\n    resultSheet = getWSResultForQuery(req(\"q\",\"id:2\", \"wt\",\"xlsx\", \"fl\",\"id,v_ss\"));\n    // test multivalued\n    assertEquals(\"id,v_ss\\n2,hi; there\\n\", getStringFromSheet(resultSheet));\n\n    // test retrieving fields from index\n    resultSheet = getWSResultForQuery(req(\"q\",\"*:*\", \"wt\",\"xslx\", \"fl\",\"*,score\"));\n    String result = getStringFromSheet(resultSheet);\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt1,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    resultSheet = getWSResultForQuery(req(\"q\",\"id:2\", \"wt\",\"xlsx\", \"fl\",\"id,foo_s,v_ss\"));\n    assertEquals(\"id,foo_s,v_ss\\n2,,hi; there\\n\", getStringFromSheet(resultSheet));\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt1\", new Date(Instant.parse(\"2000-01-02T03:04:05Z\").toEpochMilli()));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n    d.addField(\"shouldbeunstored\",\"foo\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    rsp = new SolrQueryResponse();\n    rsp.addResponse(sdl);\n\n    rsp.setReturnFields( new SolrReturnFields(\"id,foo_s\", req) );\n\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", getStringFromSheet(resultSheet));\n\n    // try scores\n    rsp.setReturnFields( new SolrReturnFields(\"id,score,foo_s\", req) );\n\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", getStringFromSheet(resultSheet));\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new SolrReturnFields(\"*\", req) );\n\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt1,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,hi; there,nice; output\\n\", getStringFromSheet(resultSheet));\n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new SolrReturnFields(\"*,score\", req) );\n    resultSheet = getWSResultForQuery(req, rsp);\n    String s = getStringFromSheet(resultSheet);\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n    \n    // Test field globs\n    rsp.setReturnFields( new SolrReturnFields(\"id,foo*\", req) );\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt1\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,,,,,,\\n\", getStringFromSheet(resultSheet));\n\n    rsp.setReturnFields( new SolrReturnFields(\"id,*_d*\", req) );\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"id,foo_d,foo_dt1\\n\" +\n        \"1,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,\\n\", getStringFromSheet(resultSheet));\n\n    // Test function queries\n    rsp.setReturnFields( new SolrReturnFields(\"sum(1,1),id,exists(foo_s1),div(9,1),foo_f\", req) );\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"sum(1,1),id,exists(foo_s1),div(9,1),foo_f\\n\" +\n        \",1,,,1.414\\n\" +\n        \",2,,,\\n\", getStringFromSheet(resultSheet));\n\n    // Test transformers\n    rsp.setReturnFields( new SolrReturnFields(\"mydocid:[docid],[explain]\", req) );\n    resultSheet = getWSResultForQuery(req, rsp);\n    assertEquals(\"mydocid,[explain]\\n\" +\n        \",\\n\" +\n        \",\\n\", getStringFromSheet(resultSheet));\n\n    req.close();\n  }\n\n","bugFix":["056868364d4e4a9ab9351ae5cc55e0506fe19769"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"056868364d4e4a9ab9351ae5cc55e0506fe19769":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"080177034f0f8c5fc458255dbe1e84334b531ade":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89424def13674ea17829b41c5883c54ecc31a132"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["080177034f0f8c5fc458255dbe1e84334b531ade"],"89424def13674ea17829b41c5883c54ecc31a132":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","056868364d4e4a9ab9351ae5cc55e0506fe19769"]},"commit2Childs":{"056868364d4e4a9ab9351ae5cc55e0506fe19769":["89424def13674ea17829b41c5883c54ecc31a132"],"080177034f0f8c5fc458255dbe1e84334b531ade":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["056868364d4e4a9ab9351ae5cc55e0506fe19769","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89424def13674ea17829b41c5883c54ecc31a132"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["080177034f0f8c5fc458255dbe1e84334b531ade","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}