{"path":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest.ShapePair#relate(Shape).mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest.ShapePair#relate(Shape).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest.ShapePair#relate(Shape).mjava","sourceNew":"    @Override\n    public SpatialRelation relate(Shape other) {\n      SpatialRelation r = relateApprox(other);\n      if (r == DISJOINT)\n        return r;\n      if (r == CONTAINS)\n        return r;\n      if (r == WITHIN && !biasContainsThenWithin)\n        return r;\n\n      //See if the correct answer is actually Contains, when the indexed shapes are adjacent,\n      // creating a larger shape that contains the input shape.\n      boolean pairTouches = shape1.relate(shape2).intersects();\n      if (!pairTouches)\n        return r;\n      //test all 4 corners\n      // Note: awkwardly, we use a non-geo context for this because in geo, -180 & +180 are the same place, which means\n      //  that \"other\" might wrap the world horizontally and yet all its corners could be in shape1 (or shape2) even\n      //  though shape1 is only adjacent to the dateline. I couldn't think of a better way to handle this.\n      Rectangle oRect = (Rectangle)other;\n      if (cornerContainsNonGeo(oRect.getMinX(), oRect.getMinY())\n          && cornerContainsNonGeo(oRect.getMinX(), oRect.getMaxY())\n          && cornerContainsNonGeo(oRect.getMaxX(), oRect.getMinY())\n          && cornerContainsNonGeo(oRect.getMaxX(), oRect.getMaxY()) )\n        return CONTAINS;\n      return r;\n    }\n\n","sourceOld":"    @Override\n    public SpatialRelation relate(Shape other) {\n      SpatialRelation r = relateApprox(other);\n      if (r == DISJOINT)\n        return r;\n      if (r == CONTAINS)\n        return r;\n      if (r == WITHIN && !biasContainsThenWithin)\n        return r;\n\n      //See if the correct answer is actually Contains, when the indexed shapes are adjacent,\n      // creating a larger shape that contains the input shape.\n      boolean pairTouches = shape1.relate(shape2).intersects();\n      if (!pairTouches)\n        return r;\n      //test all 4 corners\n      // Note: awkwardly, we use a non-geo context for this because in geo, -180 & +180 are the same place, which means\n      //  that \"other\" might wrap the world horizontally and yet all its corners could be in shape1 (or shape2) even\n      //  though shape1 is only adjacent to the dateline. I couldn't think of a better way to handle this.\n      Rectangle oRect = (Rectangle)other;\n      if (cornerContainsNonGeo(oRect.getMinX(), oRect.getMinY())\n          && cornerContainsNonGeo(oRect.getMinX(), oRect.getMaxY())\n          && cornerContainsNonGeo(oRect.getMaxX(), oRect.getMinY())\n          && cornerContainsNonGeo(oRect.getMaxX(), oRect.getMaxY()) )\n        return CONTAINS;\n      return r;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest.ShapePair#relate(Shape).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest.ShapePair#relate(Shape).mjava","sourceNew":"    @Override\n    public SpatialRelation relate(Shape other) {\n      SpatialRelation r = relateApprox(other);\n      if (r == DISJOINT)\n        return r;\n      if (r == CONTAINS)\n        return r;\n      if (r == WITHIN && !biasContainsThenWithin)\n        return r;\n\n      //See if the correct answer is actually Contains, when the indexed shapes are adjacent,\n      // creating a larger shape that contains the input shape.\n      boolean pairTouches = shape1.relate(shape2).intersects();\n      if (!pairTouches)\n        return r;\n      //test all 4 corners\n      // Note: awkwardly, we use a non-geo context for this because in geo, -180 & +180 are the same place, which means\n      //  that \"other\" might wrap the world horizontally and yet all its corners could be in shape1 (or shape2) even\n      //  though shape1 is only adjacent to the dateline. I couldn't think of a better way to handle this.\n      Rectangle oRect = (Rectangle)other;\n      if (cornerContainsNonGeo(oRect.getMinX(), oRect.getMinY())\n          && cornerContainsNonGeo(oRect.getMinX(), oRect.getMaxY())\n          && cornerContainsNonGeo(oRect.getMaxX(), oRect.getMinY())\n          && cornerContainsNonGeo(oRect.getMaxX(), oRect.getMaxY()) )\n        return CONTAINS;\n      return r;\n    }\n\n","sourceOld":"    @Override\n    public SpatialRelation relate(Shape other) {\n      SpatialRelation r = relateApprox(other);\n      if (r == DISJOINT)\n        return r;\n      if (r == CONTAINS)\n        return r;\n      if (r == WITHIN && !biasContainsThenWithin)\n        return r;\n\n      //See if the correct answer is actually Contains, when the indexed shapes are adjacent,\n      // creating a larger shape that contains the input shape.\n      boolean pairTouches = shape1.relate(shape2).intersects();\n      if (!pairTouches)\n        return r;\n      //test all 4 corners\n      // Note: awkwardly, we use a non-geo context for this because in geo, -180 & +180 are the same place, which means\n      //  that \"other\" might wrap the world horizontally and yet all its corners could be in shape1 (or shape2) even\n      //  though shape1 is only adjacent to the dateline. I couldn't think of a better way to handle this.\n      Rectangle oRect = (Rectangle)other;\n      if (cornerContainsNonGeo(oRect.getMinX(), oRect.getMinY())\n          && cornerContainsNonGeo(oRect.getMinX(), oRect.getMaxY())\n          && cornerContainsNonGeo(oRect.getMaxX(), oRect.getMinY())\n          && cornerContainsNonGeo(oRect.getMaxX(), oRect.getMaxY()) )\n        return CONTAINS;\n      return r;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}