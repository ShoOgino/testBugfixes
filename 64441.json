{"path":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.CountingCollector#setSubScorers(Scorer,String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.CountingCollector#setSubScorers(Scorer,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSubScorerFreqs.CountingCollector#setSubScorers(Scorer,String).mjava","sourceNew":"    public void setSubScorers(Scorer scorer, String relationship) {\n      for (ChildScorer child : scorer.getChildren()) {\n        if (relationships.contains(child.relationship)) {\n          setSubScorers(child.child, child.relationship);\n        }\n      }\n      subScorers.put(scorer.getWeight().getQuery(), scorer);\n    }\n\n","sourceOld":"    public void setSubScorers(Scorer scorer, String relationship) {\n      for (ChildScorer child : scorer.getChildren()) {\n        if (relationships.contains(child.relationship)) {\n          setSubScorers(child.child, child.relationship);\n        }\n      }\n      subScorers.put(scorer.getWeight().getQuery(), scorer);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea","date":1390928346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.CountingCollector#setSubScorers(Scorer,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.CountingCollector#setSubScorers(Scorer,String).mjava","sourceNew":"    public void setSubScorers(Scorer scorer, String relationship) {\n      for (ChildScorer child : scorer.getChildren()) {\n        if (scorer instanceof AssertingScorer || relationships.contains(child.relationship)) {\n          setSubScorers(child.child, child.relationship);\n        }\n      }\n      subScorers.put(scorer.getWeight().getQuery(), scorer);\n    }\n\n","sourceOld":"    public void setSubScorers(Scorer scorer, String relationship) {\n      for (ChildScorer child : scorer.getChildren()) {\n        if (relationships.contains(child.relationship)) {\n          setSubScorers(child.child, child.relationship);\n        }\n      }\n      subScorers.put(scorer.getWeight().getQuery(), scorer);\n    }\n\n","bugFix":["89c5555e75149b469a7756e82bd740777cfb584a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26ae065817023d886f3de2bc162e9e1ad71c7a02","date":1485164116,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.CountingCollector#getSubScorers(Scorer).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.CountingCollector#setSubScorers(Scorer,String).mjava","sourceNew":"    private Map<Query, Scorer> getSubScorers(Scorer scorer) throws IOException {\n      Map<Query, Scorer> collected = new HashMap<>();\n      for (ChildScorer child : scorer.getChildren()) {\n        if (scorer instanceof AssertingScorer || relationships.contains(child.relationship)) {\n          collected.put(scorer.getWeight().getQuery(), scorer);\n        }\n        collected.putAll(getSubScorers(child.child));\n      }\n      return collected;\n    }\n\n","sourceOld":"    public void setSubScorers(Scorer scorer, String relationship) {\n      for (ChildScorer child : scorer.getChildren()) {\n        if (scorer instanceof AssertingScorer || relationships.contains(child.relationship)) {\n          setSubScorers(child.child, child.relationship);\n        }\n      }\n      subScorers.put(scorer.getWeight().getQuery(), scorer);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d88f2d3d3107907144cec6455db31ccebd65475a","date":1485171003,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.CountingCollector#setSubScorers(Scorer,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.CountingCollector#getSubScorers(Scorer).mjava","sourceNew":"    public void setSubScorers(Scorer scorer, String relationship) {\n      for (ChildScorer child : scorer.getChildren()) {\n        if (scorer instanceof AssertingScorer || relationships.contains(child.relationship)) {\n          setSubScorers(child.child, child.relationship);\n        }\n      }\n      subScorers.put(scorer.getWeight().getQuery(), scorer);\n    }\n\n","sourceOld":"    private Map<Query, Scorer> getSubScorers(Scorer scorer) throws IOException {\n      Map<Query, Scorer> collected = new HashMap<>();\n      for (ChildScorer child : scorer.getChildren()) {\n        if (scorer instanceof AssertingScorer || relationships.contains(child.relationship)) {\n          collected.put(scorer.getWeight().getQuery(), scorer);\n        }\n        collected.putAll(getSubScorers(child.child));\n      }\n      return collected;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c9e07c6618087aa30ff83c3a54818165e76c3a8","date":1487684665,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.CountingCollector#setSubScorers(Scorer,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.CountingCollector#setSubScorers(Scorer,String).mjava","sourceNew":"    public void setSubScorers(Scorer scorer, String relationship) throws IOException {\n      for (ChildScorer child : scorer.getChildren()) {\n        if (scorer instanceof AssertingScorer || relationships.contains(child.relationship)) {\n          setSubScorers(child.child, child.relationship);\n        }\n      }\n      subScorers.put(scorer.getWeight().getQuery(), scorer);\n    }\n\n","sourceOld":"    public void setSubScorers(Scorer scorer, String relationship) {\n      for (ChildScorer child : scorer.getChildren()) {\n        if (scorer instanceof AssertingScorer || relationships.contains(child.relationship)) {\n          setSubScorers(child.child, child.relationship);\n        }\n      }\n      subScorers.put(scorer.getWeight().getQuery(), scorer);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285244982ce6aa163d1e60a707f0e6e121736ce5","date":1536055304,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.CountingCollector#setSubScorers(Scorer,String).mjava","sourceNew":null,"sourceOld":"    public void setSubScorers(Scorer scorer, String relationship) throws IOException {\n      for (ChildScorer child : scorer.getChildren()) {\n        if (scorer instanceof AssertingScorer || relationships.contains(child.relationship)) {\n          setSubScorers(child.child, child.relationship);\n        }\n      }\n      subScorers.put(scorer.getWeight().getQuery(), scorer);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"285244982ce6aa163d1e60a707f0e6e121736ce5":["2c9e07c6618087aa30ff83c3a54818165e76c3a8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c9e07c6618087aa30ff83c3a54818165e76c3a8":["d88f2d3d3107907144cec6455db31ccebd65475a"],"ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d88f2d3d3107907144cec6455db31ccebd65475a":["26ae065817023d886f3de2bc162e9e1ad71c7a02"],"26ae065817023d886f3de2bc162e9e1ad71c7a02":["ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["285244982ce6aa163d1e60a707f0e6e121736ce5"]},"commit2Childs":{"285244982ce6aa163d1e60a707f0e6e121736ce5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2c9e07c6618087aa30ff83c3a54818165e76c3a8":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea":["26ae065817023d886f3de2bc162e9e1ad71c7a02"],"d88f2d3d3107907144cec6455db31ccebd65475a":["2c9e07c6618087aa30ff83c3a54818165e76c3a8"],"26ae065817023d886f3de2bc162e9e1ad71c7a02":["d88f2d3d3107907144cec6455db31ccebd65475a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}