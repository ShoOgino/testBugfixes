{"path":"solr/core/src/java/org/apache/solr/core/ConfigOverlay#ConfigOverlay(Map[String,Object],int).mjava","commits":[{"id":"531fe719c7218235a679452eb3d137bfd8fc6af1","date":1415191086,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigOverlay#ConfigOverlay(Map[String,Object],int).mjava","pathOld":"/dev/null","sourceNew":"  public ConfigOverlay(Map<String,Object> jsonObj, int znodeVersion){\n    if(jsonObj == null) jsonObj= Collections.EMPTY_MAP;\n    this.znodeVersion = znodeVersion;\n    data = Collections.unmodifiableMap(jsonObj);\n    props = (Map<String, Object>) data.get(\"props\");\n    if(props == null) props= Collections.EMPTY_MAP;\n    userProps = (Map<String, Object>) data.get(\"userProps\");\n    if(userProps == null) userProps= Collections.EMPTY_MAP;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8d1f2c78f560980e5822db6905bb3b2f52fdbe5","date":1417094182,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigOverlay#ConfigOverlay(Map[String,Object],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigOverlay#ConfigOverlay(Map[String,Object],int).mjava","sourceNew":"  public ConfigOverlay(Map<String,Object> jsonObj, int znodeVersion){\n    if(jsonObj == null) jsonObj= Collections.EMPTY_MAP;\n    this.znodeVersion = znodeVersion;\n    data = Collections.unmodifiableMap(jsonObj);\n    props = (Map<String, Object>) data.get(\"props\");\n    if(props == null) props= Collections.EMPTY_MAP;\n    userProps = (Map<String, Object>) data.get(\"userProps\");\n    if(userProps == null) userProps= Collections.EMPTY_MAP;\n    reqHandlers = (Map<String, Map>) data.get(SolrRequestHandler.TYPE);\n    if(reqHandlers == null) reqHandlers = new LinkedHashMap<>();\n\n  }\n\n","sourceOld":"  public ConfigOverlay(Map<String,Object> jsonObj, int znodeVersion){\n    if(jsonObj == null) jsonObj= Collections.EMPTY_MAP;\n    this.znodeVersion = znodeVersion;\n    data = Collections.unmodifiableMap(jsonObj);\n    props = (Map<String, Object>) data.get(\"props\");\n    if(props == null) props= Collections.EMPTY_MAP;\n    userProps = (Map<String, Object>) data.get(\"userProps\");\n    if(userProps == null) userProps= Collections.EMPTY_MAP;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1","date":1423220905,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigOverlay#ConfigOverlay(Map[String,Object],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigOverlay#ConfigOverlay(Map[String,Object],int).mjava","sourceNew":"  public ConfigOverlay(Map<String,Object> jsonObj, int znodeVersion){\n    if(jsonObj == null) jsonObj= Collections.EMPTY_MAP;\n    this.znodeVersion = znodeVersion;\n    data = Collections.unmodifiableMap(jsonObj);\n    props = (Map<String, Object>) data.get(\"props\");\n    if(props == null) props= Collections.EMPTY_MAP;\n    userProps = (Map<String, Object>) data.get(\"userProps\");\n    if(userProps == null) userProps= Collections.EMPTY_MAP;\n  }\n\n","sourceOld":"  public ConfigOverlay(Map<String,Object> jsonObj, int znodeVersion){\n    if(jsonObj == null) jsonObj= Collections.EMPTY_MAP;\n    this.znodeVersion = znodeVersion;\n    data = Collections.unmodifiableMap(jsonObj);\n    props = (Map<String, Object>) data.get(\"props\");\n    if(props == null) props= Collections.EMPTY_MAP;\n    userProps = (Map<String, Object>) data.get(\"userProps\");\n    if(userProps == null) userProps= Collections.EMPTY_MAP;\n    reqHandlers = (Map<String, Map>) data.get(SolrRequestHandler.TYPE);\n    if(reqHandlers == null) reqHandlers = new LinkedHashMap<>();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae2f5be890d26585d438eba0b9cc7d3c0a9775be","date":1427387954,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigOverlay#ConfigOverlay(Map[String,Object],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigOverlay#ConfigOverlay(Map[String,Object],int).mjava","sourceNew":"  public ConfigOverlay(Map<String, Object> jsonObj, int znodeVersion) {\n    if (jsonObj == null) jsonObj = Collections.EMPTY_MAP;\n    this.znodeVersion = znodeVersion;\n    data = Collections.unmodifiableMap(jsonObj);\n    props = (Map<String, Object>) data.get(\"props\");\n    if (props == null) props = Collections.EMPTY_MAP;\n    userProps = (Map<String, Object>) data.get(\"userProps\");\n    if (userProps == null) userProps = Collections.EMPTY_MAP;\n  }\n\n","sourceOld":"  public ConfigOverlay(Map<String,Object> jsonObj, int znodeVersion){\n    if(jsonObj == null) jsonObj= Collections.EMPTY_MAP;\n    this.znodeVersion = znodeVersion;\n    data = Collections.unmodifiableMap(jsonObj);\n    props = (Map<String, Object>) data.get(\"props\");\n    if(props == null) props= Collections.EMPTY_MAP;\n    userProps = (Map<String, Object>) data.get(\"userProps\");\n    if(userProps == null) userProps= Collections.EMPTY_MAP;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigOverlay#ConfigOverlay(Map[String,Object],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigOverlay#ConfigOverlay(Map[String,Object],int).mjava","sourceNew":"  public ConfigOverlay(Map<String, Object> jsonObj, int znodeVersion) {\n    if (jsonObj == null) jsonObj = Collections.EMPTY_MAP;\n    this.znodeVersion = znodeVersion;\n    data = Collections.unmodifiableMap(jsonObj);\n    props = (Map<String, Object>) data.get(\"props\");\n    if (props == null) props = Collections.EMPTY_MAP;\n    userProps = (Map<String, Object>) data.get(\"userProps\");\n    if (userProps == null) userProps = Collections.EMPTY_MAP;\n  }\n\n","sourceOld":"  public ConfigOverlay(Map<String,Object> jsonObj, int znodeVersion){\n    if(jsonObj == null) jsonObj= Collections.EMPTY_MAP;\n    this.znodeVersion = znodeVersion;\n    data = Collections.unmodifiableMap(jsonObj);\n    props = (Map<String, Object>) data.get(\"props\");\n    if(props == null) props= Collections.EMPTY_MAP;\n    userProps = (Map<String, Object>) data.get(\"userProps\");\n    if(userProps == null) userProps= Collections.EMPTY_MAP;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75237075d8425856bf4bbf52a6be4f9162b8187d","date":1591103291,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigOverlay#ConfigOverlay(Map[String,Object],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigOverlay#ConfigOverlay(Map[String,Object],int).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public ConfigOverlay(Map<String, Object> jsonObj, int znodeVersion) {\n    if (jsonObj == null) jsonObj = Collections.EMPTY_MAP;\n    this.znodeVersion = znodeVersion;\n    data = Collections.unmodifiableMap(jsonObj);\n    props = (Map<String, Object>) data.get(\"props\");\n    if (props == null) props = Collections.EMPTY_MAP;\n    userProps = (Map<String, Object>) data.get(\"userProps\");\n    if (userProps == null) userProps = Collections.EMPTY_MAP;\n  }\n\n","sourceOld":"  public ConfigOverlay(Map<String, Object> jsonObj, int znodeVersion) {\n    if (jsonObj == null) jsonObj = Collections.EMPTY_MAP;\n    this.znodeVersion = znodeVersion;\n    data = Collections.unmodifiableMap(jsonObj);\n    props = (Map<String, Object>) data.get(\"props\");\n    if (props == null) props = Collections.EMPTY_MAP;\n    userProps = (Map<String, Object>) data.get(\"userProps\");\n    if (userProps == null) userProps = Collections.EMPTY_MAP;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1","ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"75237075d8425856bf4bbf52a6be4f9162b8187d":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1":["d8d1f2c78f560980e5822db6905bb3b2f52fdbe5"],"d8d1f2c78f560980e5822db6905bb3b2f52fdbe5":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["75237075d8425856bf4bbf52a6be4f9162b8187d"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"75237075d8425856bf4bbf52a6be4f9162b8187d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["d8d1f2c78f560980e5822db6905bb3b2f52fdbe5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"d8d1f2c78f560980e5822db6905bb3b2f52fdbe5":["c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","75237075d8425856bf4bbf52a6be4f9162b8187d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}