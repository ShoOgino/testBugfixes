{"path":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader#getLiveDocs().mjava","commits":[{"id":"cb767289784b682dea51f9e6d7222add811edb77","date":1362902138,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader#getLiveDocs().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Bits getLiveDocs() {\n    ensureOpen();\n    return mappedLiveDocs;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87ac1f6aeca005a4532bea348c9a2c416eb0b4ec","date":1363331426,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader#getLiveDocs().mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader#getLiveDocs().mjava","sourceNew":"  @Override\n  public Bits getLiveDocs() {\n    final Bits inLiveDocs = in.getLiveDocs();\n    if (inLiveDocs == null) {\n      return null;\n    }\n    return new Bits() {\n\n      @Override\n      public boolean get(int index) {\n        return inLiveDocs.get(docMap.newToOld(index));\n      }\n\n      @Override\n      public int length() {\n        return inLiveDocs.length();\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Bits getLiveDocs() {\n    ensureOpen();\n    return mappedLiveDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9faa42f41b6adb98daf009cf99a4ee239189e469","date":1376648738,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader#getLiveDocs().mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader#getLiveDocs().mjava","sourceNew":"  @Override\n  public Bits getLiveDocs() {\n    final Bits inLiveDocs = in.getLiveDocs();\n    if (inLiveDocs == null) {\n      return null;\n    } else {\n      return new SortingBits(inLiveDocs, docMap);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Bits getLiveDocs() {\n    final Bits inLiveDocs = in.getLiveDocs();\n    if (inLiveDocs == null) {\n      return null;\n    }\n    return new Bits() {\n\n      @Override\n      public boolean get(int index) {\n        return inLiveDocs.get(docMap.newToOld(index));\n      }\n\n      @Override\n      public int length() {\n        return inLiveDocs.length();\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader#getLiveDocs().mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader#getLiveDocs().mjava","sourceNew":"  @Override\n  public Bits getLiveDocs() {\n    final Bits inLiveDocs = in.getLiveDocs();\n    if (inLiveDocs == null) {\n      return null;\n    } else {\n      return new SortingBits(inLiveDocs, docMap);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Bits getLiveDocs() {\n    final Bits inLiveDocs = in.getLiveDocs();\n    if (inLiveDocs == null) {\n      return null;\n    }\n    return new Bits() {\n\n      @Override\n      public boolean get(int index) {\n        return inLiveDocs.get(docMap.newToOld(index));\n      }\n\n      @Override\n      public int length() {\n        return inLiveDocs.length();\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader#getLiveDocs().mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader#getLiveDocs().mjava","sourceNew":"  @Override\n  public Bits getLiveDocs() {\n    final Bits inLiveDocs = in.getLiveDocs();\n    if (inLiveDocs == null) {\n      return null;\n    } else {\n      return new SortingBits(inLiveDocs, docMap);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Bits getLiveDocs() {\n    final Bits inLiveDocs = in.getLiveDocs();\n    if (inLiveDocs == null) {\n      return null;\n    }\n    return new Bits() {\n\n      @Override\n      public boolean get(int index) {\n        return inLiveDocs.get(docMap.newToOld(index));\n      }\n\n      @Override\n      public int length() {\n        return inLiveDocs.length();\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingLeafReader#getLiveDocs().mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader#getLiveDocs().mjava","sourceNew":"  @Override\n  public Bits getLiveDocs() {\n    final Bits inLiveDocs = in.getLiveDocs();\n    if (inLiveDocs == null) {\n      return null;\n    } else {\n      return new SortingBits(inLiveDocs, docMap);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Bits getLiveDocs() {\n    final Bits inLiveDocs = in.getLiveDocs();\n    if (inLiveDocs == null) {\n      return null;\n    } else {\n      return new SortingBits(inLiveDocs, docMap);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9faa42f41b6adb98daf009cf99a4ee239189e469":["87ac1f6aeca005a4532bea348c9a2c416eb0b4ec"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["87ac1f6aeca005a4532bea348c9a2c416eb0b4ec","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb767289784b682dea51f9e6d7222add811edb77":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["87ac1f6aeca005a4532bea348c9a2c416eb0b4ec","9faa42f41b6adb98daf009cf99a4ee239189e469"],"87ac1f6aeca005a4532bea348c9a2c416eb0b4ec":["cb767289784b682dea51f9e6d7222add811edb77"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"9faa42f41b6adb98daf009cf99a4ee239189e469":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cb767289784b682dea51f9e6d7222add811edb77"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"cb767289784b682dea51f9e6d7222add811edb77":["87ac1f6aeca005a4532bea348c9a2c416eb0b4ec"],"87ac1f6aeca005a4532bea348c9a2c416eb0b4ec":["9faa42f41b6adb98daf009cf99a4ee239189e469","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}