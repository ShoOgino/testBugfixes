{"path":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.CommitVersionInfo#build(IndexCommit).mjava","commits":[{"id":"8191177d7e99590f340be1dbfb1cb0f01bf2f993","date":1366233200,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.CommitVersionInfo#build(IndexCommit).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * builds a CommitVersionInfo data for the specified IndexCommit.  \n     * Will never be null, ut version and generation may be zero if \n     * there are problems extracting them from the commit data\n     */\n    public static CommitVersionInfo build(IndexCommit commit) {\n      long generation = commit.getGeneration();\n      long version = 0;\n      try {\n        final Map<String,String> commitData = commit.getUserData();\n        String commitTime = commitData.get(SolrIndexWriter.COMMIT_TIME_MSEC_KEY);\n        if (commitTime != null) {\n          try {\n            version = Long.parseLong(commitTime);\n          } catch (NumberFormatException e) {\n            LOG.warn(\"Version in commitData was not formated correctly: \" + commitTime, e);\n          }\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Unable to get version from commitData, commit: \" + commit, e);\n      }\n      return new CommitVersionInfo(generation, version);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.CommitVersionInfo#build(IndexCommit).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.CommitVersionInfo#build(IndexCommit).mjava","sourceNew":"    /**\n     * builds a CommitVersionInfo data for the specified IndexCommit.\n     * Will never be null, ut version and generation may be zero if\n     * there are problems extracting them from the commit data\n     */\n    public static CommitVersionInfo build(IndexCommit commit) {\n      long generation = commit.getGeneration();\n      long version = 0;\n      try {\n        final Map<String,String> commitData = commit.getUserData();\n        String commitTime = commitData.get(SolrIndexWriter.COMMIT_TIME_MSEC_KEY);\n        if (commitTime != null) {\n          try {\n            version = Long.parseLong(commitTime);\n          } catch (NumberFormatException e) {\n            LOG.warn(\"Version in commitData was not formated correctly: \" + commitTime, e);\n          }\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Unable to get version from commitData, commit: \" + commit, e);\n      }\n      return new CommitVersionInfo(generation, version);\n    }\n\n","sourceOld":"    /**\n     * builds a CommitVersionInfo data for the specified IndexCommit.  \n     * Will never be null, ut version and generation may be zero if \n     * there are problems extracting them from the commit data\n     */\n    public static CommitVersionInfo build(IndexCommit commit) {\n      long generation = commit.getGeneration();\n      long version = 0;\n      try {\n        final Map<String,String> commitData = commit.getUserData();\n        String commitTime = commitData.get(SolrIndexWriter.COMMIT_TIME_MSEC_KEY);\n        if (commitTime != null) {\n          try {\n            version = Long.parseLong(commitTime);\n          } catch (NumberFormatException e) {\n            LOG.warn(\"Version in commitData was not formated correctly: \" + commitTime, e);\n          }\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Unable to get version from commitData, commit: \" + commit, e);\n      }\n      return new CommitVersionInfo(generation, version);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz Krasi≈Ñski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.CommitVersionInfo#build(IndexCommit).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.CommitVersionInfo#build(IndexCommit).mjava","sourceNew":"    /**\n     * builds a CommitVersionInfo data for the specified IndexCommit.\n     * Will never be null, ut version and generation may be zero if\n     * there are problems extracting them from the commit data\n     */\n    public static CommitVersionInfo build(IndexCommit commit) {\n      long generation = commit.getGeneration();\n      long version = 0;\n      try {\n        final Map<String,String> commitData = commit.getUserData();\n        String commitTime = commitData.get(SolrIndexWriter.COMMIT_TIME_MSEC_KEY);\n        if (commitTime != null) {\n          try {\n            version = Long.parseLong(commitTime);\n          } catch (NumberFormatException e) {\n            LOG.warn(\"Version in commitData was not formatted correctly: \" + commitTime, e);\n          }\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Unable to get version from commitData, commit: \" + commit, e);\n      }\n      return new CommitVersionInfo(generation, version);\n    }\n\n","sourceOld":"    /**\n     * builds a CommitVersionInfo data for the specified IndexCommit.\n     * Will never be null, ut version and generation may be zero if\n     * there are problems extracting them from the commit data\n     */\n    public static CommitVersionInfo build(IndexCommit commit) {\n      long generation = commit.getGeneration();\n      long version = 0;\n      try {\n        final Map<String,String> commitData = commit.getUserData();\n        String commitTime = commitData.get(SolrIndexWriter.COMMIT_TIME_MSEC_KEY);\n        if (commitTime != null) {\n          try {\n            version = Long.parseLong(commitTime);\n          } catch (NumberFormatException e) {\n            LOG.warn(\"Version in commitData was not formated correctly: \" + commitTime, e);\n          }\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Unable to get version from commitData, commit: \" + commit, e);\n      }\n      return new CommitVersionInfo(generation, version);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.CommitVersionInfo#build(IndexCommit).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.CommitVersionInfo#build(IndexCommit).mjava","sourceNew":"    /**\n     * builds a CommitVersionInfo data for the specified IndexCommit.\n     * Will never be null, ut version and generation may be zero if\n     * there are problems extracting them from the commit data\n     */\n    public static CommitVersionInfo build(IndexCommit commit) {\n      long generation = commit.getGeneration();\n      long version = 0;\n      try {\n        final Map<String,String> commitData = commit.getUserData();\n        String commitTime = commitData.get(SolrIndexWriter.COMMIT_TIME_MSEC_KEY);\n        if (commitTime != null) {\n          try {\n            version = Long.parseLong(commitTime);\n          } catch (NumberFormatException e) {\n            LOG.warn(\"Version in commitData was not formatted correctly: \" + commitTime, e);\n          }\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Unable to get version from commitData, commit: \" + commit, e);\n      }\n      return new CommitVersionInfo(generation, version);\n    }\n\n","sourceOld":"    /**\n     * builds a CommitVersionInfo data for the specified IndexCommit.\n     * Will never be null, ut version and generation may be zero if\n     * there are problems extracting them from the commit data\n     */\n    public static CommitVersionInfo build(IndexCommit commit) {\n      long generation = commit.getGeneration();\n      long version = 0;\n      try {\n        final Map<String,String> commitData = commit.getUserData();\n        String commitTime = commitData.get(SolrIndexWriter.COMMIT_TIME_MSEC_KEY);\n        if (commitTime != null) {\n          try {\n            version = Long.parseLong(commitTime);\n          } catch (NumberFormatException e) {\n            LOG.warn(\"Version in commitData was not formated correctly: \" + commitTime, e);\n          }\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Unable to get version from commitData, commit: \" + commit, e);\n      }\n      return new CommitVersionInfo(generation, version);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.CommitVersionInfo#build(IndexCommit).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.CommitVersionInfo#build(IndexCommit).mjava","sourceNew":"    /**\n     * builds a CommitVersionInfo data for the specified IndexCommit.\n     * Will never be null, ut version and generation may be zero if\n     * there are problems extracting them from the commit data\n     */\n    public static CommitVersionInfo build(IndexCommit commit) {\n      long generation = commit.getGeneration();\n      long version = 0;\n      try {\n        final Map<String,String> commitData = commit.getUserData();\n        String commitTime = commitData.get(SolrIndexWriter.COMMIT_TIME_MSEC_KEY);\n        if (commitTime != null) {\n          try {\n            version = Long.parseLong(commitTime);\n          } catch (NumberFormatException e) {\n            LOG.warn(\"Version in commitData was not formatted correctly: \" + commitTime, e);\n          }\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Unable to get version from commitData, commit: \" + commit, e);\n      }\n      return new CommitVersionInfo(generation, version);\n    }\n\n","sourceOld":"    /**\n     * builds a CommitVersionInfo data for the specified IndexCommit.\n     * Will never be null, ut version and generation may be zero if\n     * there are problems extracting them from the commit data\n     */\n    public static CommitVersionInfo build(IndexCommit commit) {\n      long generation = commit.getGeneration();\n      long version = 0;\n      try {\n        final Map<String,String> commitData = commit.getUserData();\n        String commitTime = commitData.get(SolrIndexWriter.COMMIT_TIME_MSEC_KEY);\n        if (commitTime != null) {\n          try {\n            version = Long.parseLong(commitTime);\n          } catch (NumberFormatException e) {\n            LOG.warn(\"Version in commitData was not formated correctly: \" + commitTime, e);\n          }\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Unable to get version from commitData, commit: \" + commit, e);\n      }\n      return new CommitVersionInfo(generation, version);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.CommitVersionInfo#build(IndexCommit).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.CommitVersionInfo#build(IndexCommit).mjava","sourceNew":"    /**\n     * builds a CommitVersionInfo data for the specified IndexCommit.\n     * Will never be null, ut version and generation may be zero if\n     * there are problems extracting them from the commit data\n     */\n    public static CommitVersionInfo build(IndexCommit commit) {\n      long generation = commit.getGeneration();\n      long version = 0;\n      try {\n        final Map<String,String> commitData = commit.getUserData();\n        String commitTime = commitData.get(SolrIndexWriter.COMMIT_TIME_MSEC_KEY);\n        if (commitTime != null) {\n          try {\n            version = Long.parseLong(commitTime);\n          } catch (NumberFormatException e) {\n            log.warn(\"Version in commitData was not formatted correctly: \" + commitTime, e);\n          }\n        }\n      } catch (IOException e) {\n        log.warn(\"Unable to get version from commitData, commit: \" + commit, e);\n      }\n      return new CommitVersionInfo(generation, version);\n    }\n\n","sourceOld":"    /**\n     * builds a CommitVersionInfo data for the specified IndexCommit.\n     * Will never be null, ut version and generation may be zero if\n     * there are problems extracting them from the commit data\n     */\n    public static CommitVersionInfo build(IndexCommit commit) {\n      long generation = commit.getGeneration();\n      long version = 0;\n      try {\n        final Map<String,String> commitData = commit.getUserData();\n        String commitTime = commitData.get(SolrIndexWriter.COMMIT_TIME_MSEC_KEY);\n        if (commitTime != null) {\n          try {\n            version = Long.parseLong(commitTime);\n          } catch (NumberFormatException e) {\n            LOG.warn(\"Version in commitData was not formatted correctly: \" + commitTime, e);\n          }\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Unable to get version from commitData, commit: \" + commit, e);\n      }\n      return new CommitVersionInfo(generation, version);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.CommitVersionInfo#build(IndexCommit).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.CommitVersionInfo#build(IndexCommit).mjava","sourceNew":"    /**\n     * builds a CommitVersionInfo data for the specified IndexCommit.\n     * Will never be null, ut version and generation may be zero if\n     * there are problems extracting them from the commit data\n     */\n    public static CommitVersionInfo build(IndexCommit commit) {\n      long generation = commit.getGeneration();\n      long version = 0;\n      try {\n        final Map<String,String> commitData = commit.getUserData();\n        String commitTime = commitData.get(SolrIndexWriter.COMMIT_TIME_MSEC_KEY);\n        if (commitTime != null) {\n          try {\n            version = Long.parseLong(commitTime);\n          } catch (NumberFormatException e) {\n            log.warn(\"Version in commitData was not formatted correctly: {}\", commitTime, e);\n          }\n        }\n      } catch (IOException e) {\n        log.warn(\"Unable to get version from commitData, commit: {}\", commit, e);\n      }\n      return new CommitVersionInfo(generation, version);\n    }\n\n","sourceOld":"    /**\n     * builds a CommitVersionInfo data for the specified IndexCommit.\n     * Will never be null, ut version and generation may be zero if\n     * there are problems extracting them from the commit data\n     */\n    public static CommitVersionInfo build(IndexCommit commit) {\n      long generation = commit.getGeneration();\n      long version = 0;\n      try {\n        final Map<String,String> commitData = commit.getUserData();\n        String commitTime = commitData.get(SolrIndexWriter.COMMIT_TIME_MSEC_KEY);\n        if (commitTime != null) {\n          try {\n            version = Long.parseLong(commitTime);\n          } catch (NumberFormatException e) {\n            log.warn(\"Version in commitData was not formatted correctly: \" + commitTime, e);\n          }\n        }\n      } catch (IOException e) {\n        log.warn(\"Unable to get version from commitData, commit: \" + commit, e);\n      }\n      return new CommitVersionInfo(generation, version);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["8191177d7e99590f340be1dbfb1cb0f01bf2f993"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8191177d7e99590f340be1dbfb1cb0f01bf2f993":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["86290366cefc1b9d4eced13b430858c4a4c0421d","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["86290366cefc1b9d4eced13b430858c4a4c0421d","0158ced21948b6626f733c1c42c1e18d94449789"],"0158ced21948b6626f733c1c42c1e18d94449789":["86290366cefc1b9d4eced13b430858c4a4c0421d"]},"commit2Childs":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","0158ced21948b6626f733c1c42c1e18d94449789"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8191177d7e99590f340be1dbfb1cb0f01bf2f993"],"8191177d7e99590f340be1dbfb1cb0f01bf2f993":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}