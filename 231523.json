{"path":"src/java/org/apache/lucene/analysis/Token#resizeTermBuffer(int).mjava","commits":[{"id":"6864413dbc0c12104c978c05456f3da1d45adb03","date":1186770873,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/Token#resizeTermBuffer(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Grows the termBuffer to at least size newSize.\n   *  @param newSize minimum size of the new termBuffer\n   *  @return newly created termBuffer with length >= newSize\n   */\n  public char[] resizeTermBuffer(int newSize) {\n    initTermBuffer();\n    if (newSize > termBuffer.length) {\n      int size = termBuffer.length;\n      while(size < newSize)\n        size *= 2;\n      char[] newBuffer = new char[size];\n      System.arraycopy(termBuffer, 0, newBuffer, 0, termBuffer.length);\n      termBuffer = newBuffer;\n    }\n    return termBuffer;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/Token#resizeTermBuffer(int).mjava","pathOld":"src/java/org/apache/lucene/analysis/Token#resizeTermBuffer(int).mjava","sourceNew":"  /** Grows the termBuffer to at least size newSize, preserving the\n   *  existing content. Note: If the next operation is to change\n   *  the contents of the term buffer use\n   *  {@link #setTermBuffer(char[], int, int)},\n   *  {@link #setTermBuffer(String)}, or\n   *  {@link #setTermBuffer(String, int, int)}\n   *  to optimally combine the resize with the setting of the termBuffer.\n   *  @param newSize minimum size of the new termBuffer\n   *  @return newly created termBuffer with length >= newSize\n   */\n  public char[] resizeTermBuffer(int newSize) {\n    char[] newCharBuffer = growTermBuffer(newSize);\n    if (termBuffer == null) {\n      // If there were termText, then preserve it.\n      // note that if termBuffer is null then newCharBuffer cannot be null\n      assert newCharBuffer != null;\n      if (termText != null) {\n        termText.getChars(0, termText.length(), newCharBuffer, 0);\n      }\n      termBuffer = newCharBuffer;\n    } else if (newCharBuffer != null) {\n      // Note: if newCharBuffer != null then termBuffer needs to grow.\n      // If there were a termBuffer, then preserve it\n      System.arraycopy(termBuffer, 0, newCharBuffer, 0, termBuffer.length);\n      termBuffer = newCharBuffer;      \n    }\n    termText = null;\n    return termBuffer;\n  }\n\n","sourceOld":"  /** Grows the termBuffer to at least size newSize.\n   *  @param newSize minimum size of the new termBuffer\n   *  @return newly created termBuffer with length >= newSize\n   */\n  public char[] resizeTermBuffer(int newSize) {\n    initTermBuffer();\n    if (newSize > termBuffer.length) {\n      int size = termBuffer.length;\n      while(size < newSize)\n        size *= 2;\n      char[] newBuffer = new char[size];\n      System.arraycopy(termBuffer, 0, newBuffer, 0, termBuffer.length);\n      termBuffer = newBuffer;\n    }\n    return termBuffer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"881f3cbef4fe1d74529367acf824c7394e2dd11c","date":1248894847,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/Token#resizeTermBuffer(int).mjava","pathOld":"src/java/org/apache/lucene/analysis/Token#resizeTermBuffer(int).mjava","sourceNew":"  /** Grows the termBuffer to at least size newSize, preserving the\n   *  existing content. Note: If the next operation is to change\n   *  the contents of the term buffer use\n   *  {@link #setTermBuffer(char[], int, int)},\n   *  {@link #setTermBuffer(String)}, or\n   *  {@link #setTermBuffer(String, int, int)}\n   *  to optimally combine the resize with the setting of the termBuffer.\n   *  @param newSize minimum size of the new termBuffer\n   *  @return newly created termBuffer with length >= newSize\n   */\n  public char[] resizeTermBuffer(int newSize) {\n    if (termBuffer == null) {\n      // The buffer is always at least MIN_BUFFER_SIZE\n      newSize = newSize < MIN_BUFFER_SIZE ? MIN_BUFFER_SIZE : newSize;\n      //Preserve termText \n      if (termText != null) {\n        final int ttLen = termText.length();\n        newSize = newSize < ttLen ? ttLen : newSize;\n        termBuffer = new char[ArrayUtil.getNextSize(newSize)];\n        termText.getChars(0, termText.length(), termBuffer, 0);\n        termText = null;\n      } else { // no term Text, the first allocation\n        termBuffer = new char[ArrayUtil.getNextSize(newSize)];\n      }    \n    } else {\n      if(termBuffer.length < newSize){\n        // Not big enough; create a new array with slight\n        // over allocation and preserve content\n        final char[] newCharBuffer = new char[ArrayUtil.getNextSize(newSize)];\n        System.arraycopy(termBuffer, 0, newCharBuffer, 0, termBuffer.length);\n        termBuffer = newCharBuffer;\n      }\n    } \n    return termBuffer;   \n  }\n\n","sourceOld":"  /** Grows the termBuffer to at least size newSize, preserving the\n   *  existing content. Note: If the next operation is to change\n   *  the contents of the term buffer use\n   *  {@link #setTermBuffer(char[], int, int)},\n   *  {@link #setTermBuffer(String)}, or\n   *  {@link #setTermBuffer(String, int, int)}\n   *  to optimally combine the resize with the setting of the termBuffer.\n   *  @param newSize minimum size of the new termBuffer\n   *  @return newly created termBuffer with length >= newSize\n   */\n  public char[] resizeTermBuffer(int newSize) {\n    char[] newCharBuffer = growTermBuffer(newSize);\n    if (termBuffer == null) {\n      // If there were termText, then preserve it.\n      // note that if termBuffer is null then newCharBuffer cannot be null\n      assert newCharBuffer != null;\n      if (termText != null) {\n        termText.getChars(0, termText.length(), newCharBuffer, 0);\n      }\n      termBuffer = newCharBuffer;\n    } else if (newCharBuffer != null) {\n      // Note: if newCharBuffer != null then termBuffer needs to grow.\n      // If there were a termBuffer, then preserve it\n      System.arraycopy(termBuffer, 0, newCharBuffer, 0, termBuffer.length);\n      termBuffer = newCharBuffer;      \n    }\n    termText = null;\n    return termBuffer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64af8690a948c97feaa9e2844a0c7051034f153d","date":1255862276,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/Token#resizeTermBuffer(int).mjava","pathOld":"src/java/org/apache/lucene/analysis/Token#resizeTermBuffer(int).mjava","sourceNew":"  /** Grows the termBuffer to at least size newSize, preserving the\n   *  existing content. Note: If the next operation is to change\n   *  the contents of the term buffer use\n   *  {@link #setTermBuffer(char[], int, int)},\n   *  {@link #setTermBuffer(String)}, or\n   *  {@link #setTermBuffer(String, int, int)}\n   *  to optimally combine the resize with the setting of the termBuffer.\n   *  @param newSize minimum size of the new termBuffer\n   *  @return newly created termBuffer with length >= newSize\n   */\n  public char[] resizeTermBuffer(int newSize) {\n    if (termBuffer == null) {\n      // The buffer is always at least MIN_BUFFER_SIZE\n      termBuffer = new char[ArrayUtil.getNextSize(newSize < MIN_BUFFER_SIZE ? MIN_BUFFER_SIZE : newSize)]; \n    } else {\n      if(termBuffer.length < newSize){\n        // Not big enough; create a new array with slight\n        // over allocation and preserve content\n        final char[] newCharBuffer = new char[ArrayUtil.getNextSize(newSize)];\n        System.arraycopy(termBuffer, 0, newCharBuffer, 0, termBuffer.length);\n        termBuffer = newCharBuffer;\n      }\n    } \n    return termBuffer;   \n  }\n\n","sourceOld":"  /** Grows the termBuffer to at least size newSize, preserving the\n   *  existing content. Note: If the next operation is to change\n   *  the contents of the term buffer use\n   *  {@link #setTermBuffer(char[], int, int)},\n   *  {@link #setTermBuffer(String)}, or\n   *  {@link #setTermBuffer(String, int, int)}\n   *  to optimally combine the resize with the setting of the termBuffer.\n   *  @param newSize minimum size of the new termBuffer\n   *  @return newly created termBuffer with length >= newSize\n   */\n  public char[] resizeTermBuffer(int newSize) {\n    if (termBuffer == null) {\n      // The buffer is always at least MIN_BUFFER_SIZE\n      newSize = newSize < MIN_BUFFER_SIZE ? MIN_BUFFER_SIZE : newSize;\n      //Preserve termText \n      if (termText != null) {\n        final int ttLen = termText.length();\n        newSize = newSize < ttLen ? ttLen : newSize;\n        termBuffer = new char[ArrayUtil.getNextSize(newSize)];\n        termText.getChars(0, termText.length(), termBuffer, 0);\n        termText = null;\n      } else { // no term Text, the first allocation\n        termBuffer = new char[ArrayUtil.getNextSize(newSize)];\n      }    \n    } else {\n      if(termBuffer.length < newSize){\n        // Not big enough; create a new array with slight\n        // over allocation and preserve content\n        final char[] newCharBuffer = new char[ArrayUtil.getNextSize(newSize)];\n        System.arraycopy(termBuffer, 0, newCharBuffer, 0, termBuffer.length);\n        termBuffer = newCharBuffer;\n      }\n    } \n    return termBuffer;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38c26570a4fd6cf0856801c977a2bc9c28a5424c","date":1264074890,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/Token#resizeTermBuffer(int).mjava","pathOld":"src/java/org/apache/lucene/analysis/Token#resizeTermBuffer(int).mjava","sourceNew":"  /** Grows the termBuffer to at least size newSize, preserving the\n   *  existing content. Note: If the next operation is to change\n   *  the contents of the term buffer use\n   *  {@link #setTermBuffer(char[], int, int)},\n   *  {@link #setTermBuffer(String)}, or\n   *  {@link #setTermBuffer(String, int, int)}\n   *  to optimally combine the resize with the setting of the termBuffer.\n   *  @param newSize minimum size of the new termBuffer\n   *  @return newly created termBuffer with length >= newSize\n   */\n  public char[] resizeTermBuffer(int newSize) {\n    if (termBuffer == null) {\n      // The buffer is always at least MIN_BUFFER_SIZE\n      termBuffer = new char[ArrayUtil.oversize(newSize < MIN_BUFFER_SIZE ? MIN_BUFFER_SIZE : newSize, RamUsageEstimator.NUM_BYTES_CHAR)]; \n    } else {\n      if(termBuffer.length < newSize){\n        // Not big enough; create a new array with slight\n        // over allocation and preserve content\n        final char[] newCharBuffer = new char[ArrayUtil.oversize(newSize, RamUsageEstimator.NUM_BYTES_CHAR)];\n        System.arraycopy(termBuffer, 0, newCharBuffer, 0, termBuffer.length);\n        termBuffer = newCharBuffer;\n      }\n    } \n    return termBuffer;   \n  }\n\n","sourceOld":"  /** Grows the termBuffer to at least size newSize, preserving the\n   *  existing content. Note: If the next operation is to change\n   *  the contents of the term buffer use\n   *  {@link #setTermBuffer(char[], int, int)},\n   *  {@link #setTermBuffer(String)}, or\n   *  {@link #setTermBuffer(String, int, int)}\n   *  to optimally combine the resize with the setting of the termBuffer.\n   *  @param newSize minimum size of the new termBuffer\n   *  @return newly created termBuffer with length >= newSize\n   */\n  public char[] resizeTermBuffer(int newSize) {\n    if (termBuffer == null) {\n      // The buffer is always at least MIN_BUFFER_SIZE\n      termBuffer = new char[ArrayUtil.getNextSize(newSize < MIN_BUFFER_SIZE ? MIN_BUFFER_SIZE : newSize)]; \n    } else {\n      if(termBuffer.length < newSize){\n        // Not big enough; create a new array with slight\n        // over allocation and preserve content\n        final char[] newCharBuffer = new char[ArrayUtil.getNextSize(newSize)];\n        System.arraycopy(termBuffer, 0, newCharBuffer, 0, termBuffer.length);\n        termBuffer = newCharBuffer;\n      }\n    } \n    return termBuffer;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66dab5a56cf3f9a3724b15a119a30fd77cbcb662","date":1268038828,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/analysis/Token#resizeTermBuffer(int).mjava","sourceNew":null,"sourceOld":"  /** Grows the termBuffer to at least size newSize, preserving the\n   *  existing content. Note: If the next operation is to change\n   *  the contents of the term buffer use\n   *  {@link #setTermBuffer(char[], int, int)},\n   *  {@link #setTermBuffer(String)}, or\n   *  {@link #setTermBuffer(String, int, int)}\n   *  to optimally combine the resize with the setting of the termBuffer.\n   *  @param newSize minimum size of the new termBuffer\n   *  @return newly created termBuffer with length >= newSize\n   */\n  public char[] resizeTermBuffer(int newSize) {\n    if (termBuffer == null) {\n      // The buffer is always at least MIN_BUFFER_SIZE\n      termBuffer = new char[ArrayUtil.oversize(newSize < MIN_BUFFER_SIZE ? MIN_BUFFER_SIZE : newSize, RamUsageEstimator.NUM_BYTES_CHAR)]; \n    } else {\n      if(termBuffer.length < newSize){\n        // Not big enough; create a new array with slight\n        // over allocation and preserve content\n        final char[] newCharBuffer = new char[ArrayUtil.oversize(newSize, RamUsageEstimator.NUM_BYTES_CHAR)];\n        System.arraycopy(termBuffer, 0, newCharBuffer, 0, termBuffer.length);\n        termBuffer = newCharBuffer;\n      }\n    } \n    return termBuffer;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["6864413dbc0c12104c978c05456f3da1d45adb03"],"881f3cbef4fe1d74529367acf824c7394e2dd11c":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"6864413dbc0c12104c978c05456f3da1d45adb03":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"64af8690a948c97feaa9e2844a0c7051034f153d":["881f3cbef4fe1d74529367acf824c7394e2dd11c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66dab5a56cf3f9a3724b15a119a30fd77cbcb662":["38c26570a4fd6cf0856801c977a2bc9c28a5424c"],"38c26570a4fd6cf0856801c977a2bc9c28a5424c":["64af8690a948c97feaa9e2844a0c7051034f153d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["66dab5a56cf3f9a3724b15a119a30fd77cbcb662"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["881f3cbef4fe1d74529367acf824c7394e2dd11c"],"6864413dbc0c12104c978c05456f3da1d45adb03":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"881f3cbef4fe1d74529367acf824c7394e2dd11c":["64af8690a948c97feaa9e2844a0c7051034f153d"],"64af8690a948c97feaa9e2844a0c7051034f153d":["38c26570a4fd6cf0856801c977a2bc9c28a5424c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6864413dbc0c12104c978c05456f3da1d45adb03"],"66dab5a56cf3f9a3724b15a119a30fd77cbcb662":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"38c26570a4fd6cf0856801c977a2bc9c28a5424c":["66dab5a56cf3f9a3724b15a119a30fd77cbcb662"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}