{"path":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testFieldSelector().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testFieldSelector().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testFieldSelector().mjava","sourceNew":"  public void testFieldSelector() throws Exception {\n    RAMDirectory ramDirectory1, ramDirectory2;\n    IndexSearcher indexSearcher1, indexSearcher2;\n\n    ramDirectory1 = new RAMDirectory();\n    ramDirectory2 = new RAMDirectory();\n    Query query = new TermQuery(new Term(\"contents\", \"doc0\"));\n\n    // Now put the documents in a different index\n    initIndex(ramDirectory1, 10, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n    initIndex(ramDirectory2, 10, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n\n    indexSearcher1 = new IndexSearcher(ramDirectory1, true);\n    indexSearcher2 = new IndexSearcher(ramDirectory2, true);\n\n    MultiSearcher searcher = getMultiSearcherInstance(new Searcher[]{indexSearcher1, indexSearcher2});\n    assertTrue(\"searcher is null and it shouldn't be\", searcher != null);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(hits.length + \" does not equal: \" + 2, hits.length == 2);\n    Document document = searcher.doc(hits[0].doc);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 2, document.getFields().size() == 2);\n    //Should be one document from each directory\n    //they both have two fields, contents and other\n    Set<String> ftl = new HashSet<String>();\n    ftl.add(\"other\");\n    SetBasedFieldSelector fs = new SetBasedFieldSelector(ftl, Collections. <String> emptySet());\n    document = searcher.doc(hits[0].doc, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n    String value = document.get(\"contents\");\n    assertTrue(\"value is not null and it should be\", value == null);\n    value = document.get(\"other\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    ftl.clear();\n    ftl.add(\"contents\");\n    fs = new SetBasedFieldSelector(ftl, Collections. <String> emptySet());\n    document = searcher.doc(hits[1].doc, fs);\n    value = document.get(\"contents\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);    \n    value = document.get(\"other\");\n    assertTrue(\"value is not null and it should be\", value == null);\n  }\n\n","sourceOld":"  public void testFieldSelector() throws Exception {\n    RAMDirectory ramDirectory1, ramDirectory2;\n    IndexSearcher indexSearcher1, indexSearcher2;\n\n    ramDirectory1 = new RAMDirectory();\n    ramDirectory2 = new RAMDirectory();\n    Query query = new TermQuery(new Term(\"contents\", \"doc0\"));\n\n    // Now put the documents in a different index\n    initIndex(ramDirectory1, 10, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n    initIndex(ramDirectory2, 10, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n\n    indexSearcher1 = new IndexSearcher(ramDirectory1, true);\n    indexSearcher2 = new IndexSearcher(ramDirectory2, true);\n\n    MultiSearcher searcher = getMultiSearcherInstance(new Searcher[]{indexSearcher1, indexSearcher2});\n    assertTrue(\"searcher is null and it shouldn't be\", searcher != null);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(hits.length + \" does not equal: \" + 2, hits.length == 2);\n    Document document = searcher.doc(hits[0].doc);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 2, document.getFields().size() == 2);\n    //Should be one document from each directory\n    //they both have two fields, contents and other\n    Set<String> ftl = new HashSet<String>();\n    ftl.add(\"other\");\n    SetBasedFieldSelector fs = new SetBasedFieldSelector(ftl, Collections. <String> emptySet());\n    document = searcher.doc(hits[0].doc, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n    String value = document.get(\"contents\");\n    assertTrue(\"value is not null and it should be\", value == null);\n    value = document.get(\"other\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    ftl.clear();\n    ftl.add(\"contents\");\n    fs = new SetBasedFieldSelector(ftl, Collections. <String> emptySet());\n    document = searcher.doc(hits[1].doc, fs);\n    value = document.get(\"contents\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);    \n    value = document.get(\"other\");\n    assertTrue(\"value is not null and it should be\", value == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testFieldSelector().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testFieldSelector().mjava","sourceNew":"  public void testFieldSelector() throws Exception {\n    MockRAMDirectory ramDirectory1, ramDirectory2;\n    IndexSearcher indexSearcher1, indexSearcher2;\n\n    ramDirectory1 = new MockRAMDirectory();\n    ramDirectory2 = new MockRAMDirectory();\n    Query query = new TermQuery(new Term(\"contents\", \"doc0\"));\n\n    // Now put the documents in a different index\n    initIndex(ramDirectory1, 10, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n    initIndex(ramDirectory2, 10, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n\n    indexSearcher1 = new IndexSearcher(ramDirectory1, true);\n    indexSearcher2 = new IndexSearcher(ramDirectory2, true);\n\n    MultiSearcher searcher = getMultiSearcherInstance(new Searcher[]{indexSearcher1, indexSearcher2});\n    assertTrue(\"searcher is null and it shouldn't be\", searcher != null);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(hits.length + \" does not equal: \" + 2, hits.length == 2);\n    Document document = searcher.doc(hits[0].doc);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 2, document.getFields().size() == 2);\n    //Should be one document from each directory\n    //they both have two fields, contents and other\n    Set<String> ftl = new HashSet<String>();\n    ftl.add(\"other\");\n    SetBasedFieldSelector fs = new SetBasedFieldSelector(ftl, Collections. <String> emptySet());\n    document = searcher.doc(hits[0].doc, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n    String value = document.get(\"contents\");\n    assertTrue(\"value is not null and it should be\", value == null);\n    value = document.get(\"other\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    ftl.clear();\n    ftl.add(\"contents\");\n    fs = new SetBasedFieldSelector(ftl, Collections. <String> emptySet());\n    document = searcher.doc(hits[1].doc, fs);\n    value = document.get(\"contents\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);    \n    value = document.get(\"other\");\n    assertTrue(\"value is not null and it should be\", value == null);\n  }\n\n","sourceOld":"  public void testFieldSelector() throws Exception {\n    RAMDirectory ramDirectory1, ramDirectory2;\n    IndexSearcher indexSearcher1, indexSearcher2;\n\n    ramDirectory1 = new RAMDirectory();\n    ramDirectory2 = new RAMDirectory();\n    Query query = new TermQuery(new Term(\"contents\", \"doc0\"));\n\n    // Now put the documents in a different index\n    initIndex(ramDirectory1, 10, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n    initIndex(ramDirectory2, 10, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n\n    indexSearcher1 = new IndexSearcher(ramDirectory1, true);\n    indexSearcher2 = new IndexSearcher(ramDirectory2, true);\n\n    MultiSearcher searcher = getMultiSearcherInstance(new Searcher[]{indexSearcher1, indexSearcher2});\n    assertTrue(\"searcher is null and it shouldn't be\", searcher != null);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(hits.length + \" does not equal: \" + 2, hits.length == 2);\n    Document document = searcher.doc(hits[0].doc);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 2, document.getFields().size() == 2);\n    //Should be one document from each directory\n    //they both have two fields, contents and other\n    Set<String> ftl = new HashSet<String>();\n    ftl.add(\"other\");\n    SetBasedFieldSelector fs = new SetBasedFieldSelector(ftl, Collections. <String> emptySet());\n    document = searcher.doc(hits[0].doc, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n    String value = document.get(\"contents\");\n    assertTrue(\"value is not null and it should be\", value == null);\n    value = document.get(\"other\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    ftl.clear();\n    ftl.add(\"contents\");\n    fs = new SetBasedFieldSelector(ftl, Collections. <String> emptySet());\n    document = searcher.doc(hits[1].doc, fs);\n    value = document.get(\"contents\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);    \n    value = document.get(\"other\");\n    assertTrue(\"value is not null and it should be\", value == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testFieldSelector().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testFieldSelector().mjava","sourceNew":"  public void testFieldSelector() throws Exception {\n    MockRAMDirectory ramDirectory1, ramDirectory2;\n    IndexSearcher indexSearcher1, indexSearcher2;\n\n    ramDirectory1 = newDirectory(random);\n    ramDirectory2 = newDirectory(random);\n    Query query = new TermQuery(new Term(\"contents\", \"doc0\"));\n\n    // Now put the documents in a different index\n    initIndex(random, ramDirectory1, 10, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n    initIndex(random, ramDirectory2, 10, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n\n    indexSearcher1 = new IndexSearcher(ramDirectory1, true);\n    indexSearcher2 = new IndexSearcher(ramDirectory2, true);\n\n    MultiSearcher searcher = getMultiSearcherInstance(new Searcher[]{indexSearcher1, indexSearcher2});\n    assertTrue(\"searcher is null and it shouldn't be\", searcher != null);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(hits.length + \" does not equal: \" + 2, hits.length == 2);\n    Document document = searcher.doc(hits[0].doc);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 2, document.getFields().size() == 2);\n    //Should be one document from each directory\n    //they both have two fields, contents and other\n    Set<String> ftl = new HashSet<String>();\n    ftl.add(\"other\");\n    SetBasedFieldSelector fs = new SetBasedFieldSelector(ftl, Collections. <String> emptySet());\n    document = searcher.doc(hits[0].doc, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n    String value = document.get(\"contents\");\n    assertTrue(\"value is not null and it should be\", value == null);\n    value = document.get(\"other\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    ftl.clear();\n    ftl.add(\"contents\");\n    fs = new SetBasedFieldSelector(ftl, Collections. <String> emptySet());\n    document = searcher.doc(hits[1].doc, fs);\n    value = document.get(\"contents\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);    \n    value = document.get(\"other\");\n    assertTrue(\"value is not null and it should be\", value == null);\n    indexSearcher1.close();\n    indexSearcher2.close();\n    ramDirectory1.close();\n    ramDirectory2.close();\n  }\n\n","sourceOld":"  public void testFieldSelector() throws Exception {\n    MockRAMDirectory ramDirectory1, ramDirectory2;\n    IndexSearcher indexSearcher1, indexSearcher2;\n\n    ramDirectory1 = new MockRAMDirectory();\n    ramDirectory2 = new MockRAMDirectory();\n    Query query = new TermQuery(new Term(\"contents\", \"doc0\"));\n\n    // Now put the documents in a different index\n    initIndex(ramDirectory1, 10, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n    initIndex(ramDirectory2, 10, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n\n    indexSearcher1 = new IndexSearcher(ramDirectory1, true);\n    indexSearcher2 = new IndexSearcher(ramDirectory2, true);\n\n    MultiSearcher searcher = getMultiSearcherInstance(new Searcher[]{indexSearcher1, indexSearcher2});\n    assertTrue(\"searcher is null and it shouldn't be\", searcher != null);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(hits.length + \" does not equal: \" + 2, hits.length == 2);\n    Document document = searcher.doc(hits[0].doc);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 2, document.getFields().size() == 2);\n    //Should be one document from each directory\n    //they both have two fields, contents and other\n    Set<String> ftl = new HashSet<String>();\n    ftl.add(\"other\");\n    SetBasedFieldSelector fs = new SetBasedFieldSelector(ftl, Collections. <String> emptySet());\n    document = searcher.doc(hits[0].doc, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n    String value = document.get(\"contents\");\n    assertTrue(\"value is not null and it should be\", value == null);\n    value = document.get(\"other\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    ftl.clear();\n    ftl.add(\"contents\");\n    fs = new SetBasedFieldSelector(ftl, Collections. <String> emptySet());\n    document = searcher.doc(hits[1].doc, fs);\n    value = document.get(\"contents\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);    \n    value = document.get(\"other\");\n    assertTrue(\"value is not null and it should be\", value == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testFieldSelector().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testFieldSelector().mjava","sourceNew":"  public void testFieldSelector() throws Exception {\n    Directory ramDirectory1, ramDirectory2;\n    IndexSearcher indexSearcher1, indexSearcher2;\n\n    ramDirectory1 = newDirectory(random);\n    ramDirectory2 = newDirectory(random);\n    Query query = new TermQuery(new Term(\"contents\", \"doc0\"));\n\n    // Now put the documents in a different index\n    initIndex(random, ramDirectory1, 10, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n    initIndex(random, ramDirectory2, 10, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n\n    indexSearcher1 = new IndexSearcher(ramDirectory1, true);\n    indexSearcher2 = new IndexSearcher(ramDirectory2, true);\n\n    MultiSearcher searcher = getMultiSearcherInstance(new Searcher[]{indexSearcher1, indexSearcher2});\n    assertTrue(\"searcher is null and it shouldn't be\", searcher != null);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(hits.length + \" does not equal: \" + 2, hits.length == 2);\n    Document document = searcher.doc(hits[0].doc);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 2, document.getFields().size() == 2);\n    //Should be one document from each directory\n    //they both have two fields, contents and other\n    Set<String> ftl = new HashSet<String>();\n    ftl.add(\"other\");\n    SetBasedFieldSelector fs = new SetBasedFieldSelector(ftl, Collections. <String> emptySet());\n    document = searcher.doc(hits[0].doc, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n    String value = document.get(\"contents\");\n    assertTrue(\"value is not null and it should be\", value == null);\n    value = document.get(\"other\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    ftl.clear();\n    ftl.add(\"contents\");\n    fs = new SetBasedFieldSelector(ftl, Collections. <String> emptySet());\n    document = searcher.doc(hits[1].doc, fs);\n    value = document.get(\"contents\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);    \n    value = document.get(\"other\");\n    assertTrue(\"value is not null and it should be\", value == null);\n    indexSearcher1.close();\n    indexSearcher2.close();\n    ramDirectory1.close();\n    ramDirectory2.close();\n  }\n\n","sourceOld":"  public void testFieldSelector() throws Exception {\n    MockRAMDirectory ramDirectory1, ramDirectory2;\n    IndexSearcher indexSearcher1, indexSearcher2;\n\n    ramDirectory1 = newDirectory(random);\n    ramDirectory2 = newDirectory(random);\n    Query query = new TermQuery(new Term(\"contents\", \"doc0\"));\n\n    // Now put the documents in a different index\n    initIndex(random, ramDirectory1, 10, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n    initIndex(random, ramDirectory2, 10, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n\n    indexSearcher1 = new IndexSearcher(ramDirectory1, true);\n    indexSearcher2 = new IndexSearcher(ramDirectory2, true);\n\n    MultiSearcher searcher = getMultiSearcherInstance(new Searcher[]{indexSearcher1, indexSearcher2});\n    assertTrue(\"searcher is null and it shouldn't be\", searcher != null);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(hits.length + \" does not equal: \" + 2, hits.length == 2);\n    Document document = searcher.doc(hits[0].doc);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 2, document.getFields().size() == 2);\n    //Should be one document from each directory\n    //they both have two fields, contents and other\n    Set<String> ftl = new HashSet<String>();\n    ftl.add(\"other\");\n    SetBasedFieldSelector fs = new SetBasedFieldSelector(ftl, Collections. <String> emptySet());\n    document = searcher.doc(hits[0].doc, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n    String value = document.get(\"contents\");\n    assertTrue(\"value is not null and it should be\", value == null);\n    value = document.get(\"other\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    ftl.clear();\n    ftl.add(\"contents\");\n    fs = new SetBasedFieldSelector(ftl, Collections. <String> emptySet());\n    document = searcher.doc(hits[1].doc, fs);\n    value = document.get(\"contents\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);    \n    value = document.get(\"other\");\n    assertTrue(\"value is not null and it should be\", value == null);\n    indexSearcher1.close();\n    indexSearcher2.close();\n    ramDirectory1.close();\n    ramDirectory2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testFieldSelector().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testFieldSelector().mjava","sourceNew":"  public void testFieldSelector() throws Exception {\n    Directory ramDirectory1, ramDirectory2;\n    IndexSearcher indexSearcher1, indexSearcher2;\n\n    ramDirectory1 = newDirectory();\n    ramDirectory2 = newDirectory();\n    Query query = new TermQuery(new Term(\"contents\", \"doc0\"));\n\n    // Now put the documents in a different index\n    initIndex(random, ramDirectory1, 10, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n    initIndex(random, ramDirectory2, 10, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n\n    indexSearcher1 = new IndexSearcher(ramDirectory1, true);\n    indexSearcher2 = new IndexSearcher(ramDirectory2, true);\n\n    MultiSearcher searcher = getMultiSearcherInstance(new Searcher[]{indexSearcher1, indexSearcher2});\n    assertTrue(\"searcher is null and it shouldn't be\", searcher != null);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(hits.length + \" does not equal: \" + 2, hits.length == 2);\n    Document document = searcher.doc(hits[0].doc);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 2, document.getFields().size() == 2);\n    //Should be one document from each directory\n    //they both have two fields, contents and other\n    Set<String> ftl = new HashSet<String>();\n    ftl.add(\"other\");\n    SetBasedFieldSelector fs = new SetBasedFieldSelector(ftl, Collections. <String> emptySet());\n    document = searcher.doc(hits[0].doc, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n    String value = document.get(\"contents\");\n    assertTrue(\"value is not null and it should be\", value == null);\n    value = document.get(\"other\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    ftl.clear();\n    ftl.add(\"contents\");\n    fs = new SetBasedFieldSelector(ftl, Collections. <String> emptySet());\n    document = searcher.doc(hits[1].doc, fs);\n    value = document.get(\"contents\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);    \n    value = document.get(\"other\");\n    assertTrue(\"value is not null and it should be\", value == null);\n    indexSearcher1.close();\n    indexSearcher2.close();\n    ramDirectory1.close();\n    ramDirectory2.close();\n  }\n\n","sourceOld":"  public void testFieldSelector() throws Exception {\n    Directory ramDirectory1, ramDirectory2;\n    IndexSearcher indexSearcher1, indexSearcher2;\n\n    ramDirectory1 = newDirectory(random);\n    ramDirectory2 = newDirectory(random);\n    Query query = new TermQuery(new Term(\"contents\", \"doc0\"));\n\n    // Now put the documents in a different index\n    initIndex(random, ramDirectory1, 10, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n    initIndex(random, ramDirectory2, 10, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n\n    indexSearcher1 = new IndexSearcher(ramDirectory1, true);\n    indexSearcher2 = new IndexSearcher(ramDirectory2, true);\n\n    MultiSearcher searcher = getMultiSearcherInstance(new Searcher[]{indexSearcher1, indexSearcher2});\n    assertTrue(\"searcher is null and it shouldn't be\", searcher != null);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(hits.length + \" does not equal: \" + 2, hits.length == 2);\n    Document document = searcher.doc(hits[0].doc);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 2, document.getFields().size() == 2);\n    //Should be one document from each directory\n    //they both have two fields, contents and other\n    Set<String> ftl = new HashSet<String>();\n    ftl.add(\"other\");\n    SetBasedFieldSelector fs = new SetBasedFieldSelector(ftl, Collections. <String> emptySet());\n    document = searcher.doc(hits[0].doc, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n    String value = document.get(\"contents\");\n    assertTrue(\"value is not null and it should be\", value == null);\n    value = document.get(\"other\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    ftl.clear();\n    ftl.add(\"contents\");\n    fs = new SetBasedFieldSelector(ftl, Collections. <String> emptySet());\n    document = searcher.doc(hits[1].doc, fs);\n    value = document.get(\"contents\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);    \n    value = document.get(\"other\");\n    assertTrue(\"value is not null and it should be\", value == null);\n    indexSearcher1.close();\n    indexSearcher2.close();\n    ramDirectory1.close();\n    ramDirectory2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7fc5a2665a7fa1b9450097ae658193a11ee4d02c","date":1292699695,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testFieldSelector().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testFieldSelector().mjava","sourceNew":"  public void testFieldSelector() throws Exception {\n    Directory ramDirectory1, ramDirectory2;\n    IndexSearcher indexSearcher1, indexSearcher2;\n\n    ramDirectory1 = newDirectory();\n    ramDirectory2 = newDirectory();\n    Query query = new TermQuery(new Term(\"contents\", \"doc0\"));\n\n    // Now put the documents in a different index\n    initIndex(random, ramDirectory1, 10, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n    initIndex(random, ramDirectory2, 10, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n\n    indexSearcher1 = new IndexSearcher(ramDirectory1, true);\n    indexSearcher2 = new IndexSearcher(ramDirectory2, true);\n\n    MultiSearcher searcher = getMultiSearcherInstance(new Searcher[]{indexSearcher1, indexSearcher2});\n    assertTrue(\"searcher is null and it shouldn't be\", searcher != null);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(hits.length + \" does not equal: \" + 2, hits.length == 2);\n    Document document = searcher.doc(hits[0].doc);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 2, document.getFields().size() == 2);\n    //Should be one document from each directory\n    //they both have two fields, contents and other\n    Set<String> ftl = new HashSet<String>();\n    ftl.add(\"other\");\n    SetBasedFieldSelector fs = new SetBasedFieldSelector(ftl, Collections. <String> emptySet());\n    document = searcher.doc(hits[0].doc, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n    String value = document.get(\"contents\");\n    assertTrue(\"value is not null and it should be\", value == null);\n    value = document.get(\"other\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    ftl.clear();\n    ftl.add(\"contents\");\n    fs = new SetBasedFieldSelector(ftl, Collections. <String> emptySet());\n    document = searcher.doc(hits[1].doc, fs);\n    value = document.get(\"contents\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);    \n    value = document.get(\"other\");\n    assertTrue(\"value is not null and it should be\", value == null);\n    indexSearcher1.close();\n    indexSearcher2.close();\n    ramDirectory1.close();\n    ramDirectory2.close();\n    searcher.close();\n  }\n\n","sourceOld":"  public void testFieldSelector() throws Exception {\n    Directory ramDirectory1, ramDirectory2;\n    IndexSearcher indexSearcher1, indexSearcher2;\n\n    ramDirectory1 = newDirectory();\n    ramDirectory2 = newDirectory();\n    Query query = new TermQuery(new Term(\"contents\", \"doc0\"));\n\n    // Now put the documents in a different index\n    initIndex(random, ramDirectory1, 10, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n    initIndex(random, ramDirectory2, 10, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n\n    indexSearcher1 = new IndexSearcher(ramDirectory1, true);\n    indexSearcher2 = new IndexSearcher(ramDirectory2, true);\n\n    MultiSearcher searcher = getMultiSearcherInstance(new Searcher[]{indexSearcher1, indexSearcher2});\n    assertTrue(\"searcher is null and it shouldn't be\", searcher != null);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(hits.length + \" does not equal: \" + 2, hits.length == 2);\n    Document document = searcher.doc(hits[0].doc);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 2, document.getFields().size() == 2);\n    //Should be one document from each directory\n    //they both have two fields, contents and other\n    Set<String> ftl = new HashSet<String>();\n    ftl.add(\"other\");\n    SetBasedFieldSelector fs = new SetBasedFieldSelector(ftl, Collections. <String> emptySet());\n    document = searcher.doc(hits[0].doc, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n    String value = document.get(\"contents\");\n    assertTrue(\"value is not null and it should be\", value == null);\n    value = document.get(\"other\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    ftl.clear();\n    ftl.add(\"contents\");\n    fs = new SetBasedFieldSelector(ftl, Collections. <String> emptySet());\n    document = searcher.doc(hits[1].doc, fs);\n    value = document.get(\"contents\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);    \n    value = document.get(\"other\");\n    assertTrue(\"value is not null and it should be\", value == null);\n    indexSearcher1.close();\n    indexSearcher2.close();\n    ramDirectory1.close();\n    ramDirectory2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testFieldSelector().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testFieldSelector().mjava","sourceNew":"  public void testFieldSelector() throws Exception {\n    Directory ramDirectory1, ramDirectory2;\n    IndexSearcher indexSearcher1, indexSearcher2;\n\n    ramDirectory1 = newDirectory();\n    ramDirectory2 = newDirectory();\n    Query query = new TermQuery(new Term(\"contents\", \"doc0\"));\n\n    // Now put the documents in a different index\n    initIndex(random, ramDirectory1, 10, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n    initIndex(random, ramDirectory2, 10, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n\n    indexSearcher1 = new IndexSearcher(ramDirectory1, true);\n    indexSearcher2 = new IndexSearcher(ramDirectory2, true);\n\n    MultiSearcher searcher = getMultiSearcherInstance(new Searcher[]{indexSearcher1, indexSearcher2});\n    assertTrue(\"searcher is null and it shouldn't be\", searcher != null);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(hits.length + \" does not equal: \" + 2, hits.length == 2);\n    Document document = searcher.doc(hits[0].doc);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 2, document.getFields().size() == 2);\n    //Should be one document from each directory\n    //they both have two fields, contents and other\n    Set<String> ftl = new HashSet<String>();\n    ftl.add(\"other\");\n    SetBasedFieldSelector fs = new SetBasedFieldSelector(ftl, Collections. <String> emptySet());\n    document = searcher.doc(hits[0].doc, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n    String value = document.get(\"contents\");\n    assertTrue(\"value is not null and it should be\", value == null);\n    value = document.get(\"other\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    ftl.clear();\n    ftl.add(\"contents\");\n    fs = new SetBasedFieldSelector(ftl, Collections. <String> emptySet());\n    document = searcher.doc(hits[1].doc, fs);\n    value = document.get(\"contents\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);    \n    value = document.get(\"other\");\n    assertTrue(\"value is not null and it should be\", value == null);\n    indexSearcher1.close();\n    indexSearcher2.close();\n    ramDirectory1.close();\n    ramDirectory2.close();\n    searcher.close();\n  }\n\n","sourceOld":"  public void testFieldSelector() throws Exception {\n    Directory ramDirectory1, ramDirectory2;\n    IndexSearcher indexSearcher1, indexSearcher2;\n\n    ramDirectory1 = newDirectory();\n    ramDirectory2 = newDirectory();\n    Query query = new TermQuery(new Term(\"contents\", \"doc0\"));\n\n    // Now put the documents in a different index\n    initIndex(random, ramDirectory1, 10, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n    initIndex(random, ramDirectory2, 10, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n\n    indexSearcher1 = new IndexSearcher(ramDirectory1, true);\n    indexSearcher2 = new IndexSearcher(ramDirectory2, true);\n\n    MultiSearcher searcher = getMultiSearcherInstance(new Searcher[]{indexSearcher1, indexSearcher2});\n    assertTrue(\"searcher is null and it shouldn't be\", searcher != null);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(hits.length + \" does not equal: \" + 2, hits.length == 2);\n    Document document = searcher.doc(hits[0].doc);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 2, document.getFields().size() == 2);\n    //Should be one document from each directory\n    //they both have two fields, contents and other\n    Set<String> ftl = new HashSet<String>();\n    ftl.add(\"other\");\n    SetBasedFieldSelector fs = new SetBasedFieldSelector(ftl, Collections. <String> emptySet());\n    document = searcher.doc(hits[0].doc, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n    String value = document.get(\"contents\");\n    assertTrue(\"value is not null and it should be\", value == null);\n    value = document.get(\"other\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    ftl.clear();\n    ftl.add(\"contents\");\n    fs = new SetBasedFieldSelector(ftl, Collections. <String> emptySet());\n    document = searcher.doc(hits[1].doc, fs);\n    value = document.get(\"contents\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);    \n    value = document.get(\"other\");\n    assertTrue(\"value is not null and it should be\", value == null);\n    indexSearcher1.close();\n    indexSearcher2.close();\n    ramDirectory1.close();\n    ramDirectory2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testFieldSelector().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testFieldSelector().mjava","sourceNew":"  public void testFieldSelector() throws Exception {\n    Directory ramDirectory1, ramDirectory2;\n    IndexSearcher indexSearcher1, indexSearcher2;\n\n    ramDirectory1 = newDirectory();\n    ramDirectory2 = newDirectory();\n    Query query = new TermQuery(new Term(\"contents\", \"doc0\"));\n\n    // Now put the documents in a different index\n    initIndex(random, ramDirectory1, 10, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n    initIndex(random, ramDirectory2, 10, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n\n    indexSearcher1 = new IndexSearcher(ramDirectory1, true);\n    indexSearcher2 = new IndexSearcher(ramDirectory2, true);\n\n    MultiSearcher searcher = getMultiSearcherInstance(new Searcher[]{indexSearcher1, indexSearcher2});\n    assertTrue(\"searcher is null and it shouldn't be\", searcher != null);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(hits.length + \" does not equal: \" + 2, hits.length == 2);\n    Document document = searcher.doc(hits[0].doc);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 2, document.getFields().size() == 2);\n    //Should be one document from each directory\n    //they both have two fields, contents and other\n    Set<String> ftl = new HashSet<String>();\n    ftl.add(\"other\");\n    SetBasedFieldSelector fs = new SetBasedFieldSelector(ftl, Collections. <String> emptySet());\n    document = searcher.doc(hits[0].doc, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n    String value = document.get(\"contents\");\n    assertTrue(\"value is not null and it should be\", value == null);\n    value = document.get(\"other\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    ftl.clear();\n    ftl.add(\"contents\");\n    fs = new SetBasedFieldSelector(ftl, Collections. <String> emptySet());\n    document = searcher.doc(hits[1].doc, fs);\n    value = document.get(\"contents\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);    \n    value = document.get(\"other\");\n    assertTrue(\"value is not null and it should be\", value == null);\n    indexSearcher1.close();\n    indexSearcher2.close();\n    ramDirectory1.close();\n    ramDirectory2.close();\n    searcher.close();\n  }\n\n","sourceOld":"  public void testFieldSelector() throws Exception {\n    RAMDirectory ramDirectory1, ramDirectory2;\n    IndexSearcher indexSearcher1, indexSearcher2;\n\n    ramDirectory1 = new RAMDirectory();\n    ramDirectory2 = new RAMDirectory();\n    Query query = new TermQuery(new Term(\"contents\", \"doc0\"));\n\n    // Now put the documents in a different index\n    initIndex(ramDirectory1, 10, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n    initIndex(ramDirectory2, 10, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n\n    indexSearcher1 = new IndexSearcher(ramDirectory1, true);\n    indexSearcher2 = new IndexSearcher(ramDirectory2, true);\n\n    MultiSearcher searcher = getMultiSearcherInstance(new Searcher[]{indexSearcher1, indexSearcher2});\n    assertTrue(\"searcher is null and it shouldn't be\", searcher != null);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(hits.length + \" does not equal: \" + 2, hits.length == 2);\n    Document document = searcher.doc(hits[0].doc);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 2, document.getFields().size() == 2);\n    //Should be one document from each directory\n    //they both have two fields, contents and other\n    Set<String> ftl = new HashSet<String>();\n    ftl.add(\"other\");\n    SetBasedFieldSelector fs = new SetBasedFieldSelector(ftl, Collections. <String> emptySet());\n    document = searcher.doc(hits[0].doc, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n    String value = document.get(\"contents\");\n    assertTrue(\"value is not null and it should be\", value == null);\n    value = document.get(\"other\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    ftl.clear();\n    ftl.add(\"contents\");\n    fs = new SetBasedFieldSelector(ftl, Collections. <String> emptySet());\n    document = searcher.doc(hits[1].doc, fs);\n    value = document.get(\"contents\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);    \n    value = document.get(\"other\");\n    assertTrue(\"value is not null and it should be\", value == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testFieldSelector().mjava","sourceNew":null,"sourceOld":"  public void testFieldSelector() throws Exception {\n    Directory ramDirectory1, ramDirectory2;\n    IndexSearcher indexSearcher1, indexSearcher2;\n\n    ramDirectory1 = newDirectory();\n    ramDirectory2 = newDirectory();\n    Query query = new TermQuery(new Term(\"contents\", \"doc0\"));\n\n    // Now put the documents in a different index\n    initIndex(random, ramDirectory1, 10, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n    initIndex(random, ramDirectory2, 10, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n\n    indexSearcher1 = new IndexSearcher(ramDirectory1, true);\n    indexSearcher2 = new IndexSearcher(ramDirectory2, true);\n\n    MultiSearcher searcher = getMultiSearcherInstance(new Searcher[]{indexSearcher1, indexSearcher2});\n    assertTrue(\"searcher is null and it shouldn't be\", searcher != null);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(hits.length + \" does not equal: \" + 2, hits.length == 2);\n    Document document = searcher.doc(hits[0].doc);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 2, document.getFields().size() == 2);\n    //Should be one document from each directory\n    //they both have two fields, contents and other\n    Set<String> ftl = new HashSet<String>();\n    ftl.add(\"other\");\n    SetBasedFieldSelector fs = new SetBasedFieldSelector(ftl, Collections. <String> emptySet());\n    document = searcher.doc(hits[0].doc, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n    String value = document.get(\"contents\");\n    assertTrue(\"value is not null and it should be\", value == null);\n    value = document.get(\"other\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    ftl.clear();\n    ftl.add(\"contents\");\n    fs = new SetBasedFieldSelector(ftl, Collections. <String> emptySet());\n    document = searcher.doc(hits[1].doc, fs);\n    value = document.get(\"contents\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);    \n    value = document.get(\"other\");\n    assertTrue(\"value is not null and it should be\", value == null);\n    indexSearcher1.close();\n    indexSearcher2.close();\n    ramDirectory1.close();\n    ramDirectory2.close();\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testFieldSelector().mjava","sourceNew":null,"sourceOld":"  public void testFieldSelector() throws Exception {\n    Directory ramDirectory1, ramDirectory2;\n    IndexSearcher indexSearcher1, indexSearcher2;\n\n    ramDirectory1 = newDirectory();\n    ramDirectory2 = newDirectory();\n    Query query = new TermQuery(new Term(\"contents\", \"doc0\"));\n\n    // Now put the documents in a different index\n    initIndex(random, ramDirectory1, 10, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n    initIndex(random, ramDirectory2, 10, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n\n    indexSearcher1 = new IndexSearcher(ramDirectory1, true);\n    indexSearcher2 = new IndexSearcher(ramDirectory2, true);\n\n    MultiSearcher searcher = getMultiSearcherInstance(new Searcher[]{indexSearcher1, indexSearcher2});\n    assertTrue(\"searcher is null and it shouldn't be\", searcher != null);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(hits.length + \" does not equal: \" + 2, hits.length == 2);\n    Document document = searcher.doc(hits[0].doc);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 2, document.getFields().size() == 2);\n    //Should be one document from each directory\n    //they both have two fields, contents and other\n    Set<String> ftl = new HashSet<String>();\n    ftl.add(\"other\");\n    SetBasedFieldSelector fs = new SetBasedFieldSelector(ftl, Collections. <String> emptySet());\n    document = searcher.doc(hits[0].doc, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n    String value = document.get(\"contents\");\n    assertTrue(\"value is not null and it should be\", value == null);\n    value = document.get(\"other\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    ftl.clear();\n    ftl.add(\"contents\");\n    fs = new SetBasedFieldSelector(ftl, Collections. <String> emptySet());\n    document = searcher.doc(hits[1].doc, fs);\n    value = document.get(\"contents\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);    \n    value = document.get(\"other\");\n    assertTrue(\"value is not null and it should be\", value == null);\n    indexSearcher1.close();\n    indexSearcher2.close();\n    ramDirectory1.close();\n    ramDirectory2.close();\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testFieldSelector().mjava","sourceNew":null,"sourceOld":"  public void testFieldSelector() throws Exception {\n    Directory ramDirectory1, ramDirectory2;\n    IndexSearcher indexSearcher1, indexSearcher2;\n\n    ramDirectory1 = newDirectory();\n    ramDirectory2 = newDirectory();\n    Query query = new TermQuery(new Term(\"contents\", \"doc0\"));\n\n    // Now put the documents in a different index\n    initIndex(random, ramDirectory1, 10, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n    initIndex(random, ramDirectory2, 10, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n\n    indexSearcher1 = new IndexSearcher(ramDirectory1, true);\n    indexSearcher2 = new IndexSearcher(ramDirectory2, true);\n\n    MultiSearcher searcher = getMultiSearcherInstance(new Searcher[]{indexSearcher1, indexSearcher2});\n    assertTrue(\"searcher is null and it shouldn't be\", searcher != null);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(hits.length + \" does not equal: \" + 2, hits.length == 2);\n    Document document = searcher.doc(hits[0].doc);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 2, document.getFields().size() == 2);\n    //Should be one document from each directory\n    //they both have two fields, contents and other\n    Set<String> ftl = new HashSet<String>();\n    ftl.add(\"other\");\n    SetBasedFieldSelector fs = new SetBasedFieldSelector(ftl, Collections. <String> emptySet());\n    document = searcher.doc(hits[0].doc, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n    String value = document.get(\"contents\");\n    assertTrue(\"value is not null and it should be\", value == null);\n    value = document.get(\"other\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    ftl.clear();\n    ftl.add(\"contents\");\n    fs = new SetBasedFieldSelector(ftl, Collections. <String> emptySet());\n    document = searcher.doc(hits[1].doc, fs);\n    value = document.get(\"contents\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);    \n    value = document.get(\"other\");\n    assertTrue(\"value is not null and it should be\", value == null);\n    indexSearcher1.close();\n    indexSearcher2.close();\n    ramDirectory1.close();\n    ramDirectory2.close();\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7fc5a2665a7fa1b9450097ae658193a11ee4d02c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"70ad682703b8585f5d0a637efec044d57ec05efb":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["1f653cfcf159baeaafe5d01682a911e95bba4012","7fc5a2665a7fa1b9450097ae658193a11ee4d02c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","7fc5a2665a7fa1b9450097ae658193a11ee4d02c"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["7fc5a2665a7fa1b9450097ae658193a11ee4d02c"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7fc5a2665a7fa1b9450097ae658193a11ee4d02c":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["70ad682703b8585f5d0a637efec044d57ec05efb"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["7fc5a2665a7fa1b9450097ae658193a11ee4d02c","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}