{"path":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testNesting().mjava","commits":[{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testNesting().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testNesting().mjava","sourceNew":"  public void testNesting() throws IOException {\n    IntervalsSource source = Intervals.unordered(\n        Intervals.term(\"pease\"),\n        Intervals.term(\"porridge\"),\n        Intervals.or(Intervals.term(\"hot\"), Intervals.term(\"cold\")));\n    checkIntervals(source, \"field1\", 3, new int[][]{\n        {},\n        { 0, 2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 17 },\n        { 0, 2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 17 },\n        {},\n        { 0, 2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 17 },\n        {}\n    });\n    assertEquals(3, source.minExtent());\n\n    assertNull(getMatches(source, 0, \"field1\"));\n    MatchesIterator mi = getMatches(source, 1, \"field1\");\n    assertMatch(mi, 0, 2, 0, 18);\n    assertMatch(mi, 1, 3, 6, 25);\n    assertMatch(mi, 2, 4, 15, 34);\n    assertMatch(mi, 3, 5, 20, 39);\n    MatchesIterator sub = mi.getSubMatches();\n    assertMatch(sub, 3, 3, 20, 25);\n    assertMatch(sub, 4, 4, 26, 34);\n    assertMatch(sub, 5, 5, 35, 39);\n    assertFalse(sub.next());\n    assertMatch(mi, 4, 6, 26, 46);\n    assertMatch(mi, 5, 7, 35, 55);\n    assertMatch(mi, 6, 17, 41, 99);\n    assertFalse(mi.next());\n\n    assertGaps(source, 1, \"field1\", new int[]{\n        0, 0, 0, 0, 0, 0, 9\n    });\n\n  }\n\n","sourceOld":"  public void testNesting() throws IOException {\n    IntervalsSource source = Intervals.unordered(\n        Intervals.term(\"pease\"),\n        Intervals.term(\"porridge\"),\n        Intervals.or(Intervals.term(\"hot\"), Intervals.term(\"cold\")));\n    checkIntervals(source, \"field1\", 3, new int[][]{\n        {},\n        { 0, 2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 17 },\n        { 0, 2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 17 },\n        {},\n        { 0, 2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 17 },\n        {}\n    });\n    assertEquals(3, source.minExtent());\n\n    assertNull(getMatches(source, 0, \"field1\"));\n    MatchesIterator mi = getMatches(source, 1, \"field1\");\n    assertMatch(mi, 0, 2, 0, 18);\n    assertMatch(mi, 1, 3, 6, 25);\n    assertMatch(mi, 2, 4, 15, 34);\n    assertMatch(mi, 3, 5, 20, 39);\n    MatchesIterator sub = mi.getSubMatches();\n    assertMatch(sub, 3, 3, 20, 25);\n    assertMatch(sub, 4, 4, 26, 34);\n    assertMatch(sub, 5, 5, 35, 39);\n    assertFalse(sub.next());\n    assertMatch(mi, 4, 6, 26, 46);\n    assertMatch(mi, 5, 7, 35, 55);\n    assertMatch(mi, 6, 17, 41, 99);\n    assertFalse(mi.next());\n\n    assertGaps(source, 1, \"field1\", new int[]{\n        0, 0, 0, 0, 0, 0, 9\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}