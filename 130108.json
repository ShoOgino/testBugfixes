{"path":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testAnalyzerReturningNull().mjava","commits":[{"id":"c8a1d441aebbbc08d78769b753795e0d44163a3a","date":1119995027,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testAnalyzerReturningNull().mjava","pathOld":"/dev/null","sourceNew":"  public void testAnalyzerReturningNull() throws ParseException {\n    String[] fields = new String[] { \"f1\", \"f2\", \"f3\" };\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(fields, new AnalyzerReturningNull());\n    Query q = parser.parse(\"bla AND blo\");\n    assertEquals(\"+(f2:bla f3:bla) +(f2:blo f3:blo)\", q.toString());\n    // the following queries are not affected as their terms are not analyzed anyway:\n    q = parser.parse(\"bla*\");\n    assertEquals(\"f1:bla* f2:bla* f3:bla*\", q.toString());\n    q = parser.parse(\"bla~\");\n    assertEquals(\"f1:bla~0.5 f2:bla~0.5 f3:bla~0.5\", q.toString());\n    q = parser.parse(\"[a TO c]\");\n    assertEquals(\"f1:[a TO c] f2:[a TO c] f3:[a TO c]\", q.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testAnalyzerReturningNull().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testAnalyzerReturningNull().mjava","sourceNew":"  public void testAnalyzerReturningNull() throws ParseException {\n    String[] fields = new String[] { \"f1\", \"f2\", \"f3\" };\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(Version.LUCENE_CURRENT, fields, new AnalyzerReturningNull());\n    Query q = parser.parse(\"bla AND blo\");\n    assertEquals(\"+(f2:bla f3:bla) +(f2:blo f3:blo)\", q.toString());\n    // the following queries are not affected as their terms are not analyzed anyway:\n    q = parser.parse(\"bla*\");\n    assertEquals(\"f1:bla* f2:bla* f3:bla*\", q.toString());\n    q = parser.parse(\"bla~\");\n    assertEquals(\"f1:bla~0.5 f2:bla~0.5 f3:bla~0.5\", q.toString());\n    q = parser.parse(\"[a TO c]\");\n    assertEquals(\"f1:[a TO c] f2:[a TO c] f3:[a TO c]\", q.toString());\n  }\n\n","sourceOld":"  public void testAnalyzerReturningNull() throws ParseException {\n    String[] fields = new String[] { \"f1\", \"f2\", \"f3\" };\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(fields, new AnalyzerReturningNull());\n    Query q = parser.parse(\"bla AND blo\");\n    assertEquals(\"+(f2:bla f3:bla) +(f2:blo f3:blo)\", q.toString());\n    // the following queries are not affected as their terms are not analyzed anyway:\n    q = parser.parse(\"bla*\");\n    assertEquals(\"f1:bla* f2:bla* f3:bla*\", q.toString());\n    q = parser.parse(\"bla~\");\n    assertEquals(\"f1:bla~0.5 f2:bla~0.5 f3:bla~0.5\", q.toString());\n    q = parser.parse(\"[a TO c]\");\n    assertEquals(\"f1:[a TO c] f2:[a TO c] f3:[a TO c]\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testAnalyzerReturningNull().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testAnalyzerReturningNull().mjava","sourceNew":"  public void testAnalyzerReturningNull() throws ParseException {\n    String[] fields = new String[] { \"f1\", \"f2\", \"f3\" };\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new AnalyzerReturningNull());\n    Query q = parser.parse(\"bla AND blo\");\n    assertEquals(\"+(f2:bla f3:bla) +(f2:blo f3:blo)\", q.toString());\n    // the following queries are not affected as their terms are not analyzed anyway:\n    q = parser.parse(\"bla*\");\n    assertEquals(\"f1:bla* f2:bla* f3:bla*\", q.toString());\n    q = parser.parse(\"bla~\");\n    assertEquals(\"f1:bla~0.5 f2:bla~0.5 f3:bla~0.5\", q.toString());\n    q = parser.parse(\"[a TO c]\");\n    assertEquals(\"f1:[a TO c] f2:[a TO c] f3:[a TO c]\", q.toString());\n  }\n\n","sourceOld":"  public void testAnalyzerReturningNull() throws ParseException {\n    String[] fields = new String[] { \"f1\", \"f2\", \"f3\" };\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(Version.LUCENE_CURRENT, fields, new AnalyzerReturningNull());\n    Query q = parser.parse(\"bla AND blo\");\n    assertEquals(\"+(f2:bla f3:bla) +(f2:blo f3:blo)\", q.toString());\n    // the following queries are not affected as their terms are not analyzed anyway:\n    q = parser.parse(\"bla*\");\n    assertEquals(\"f1:bla* f2:bla* f3:bla*\", q.toString());\n    q = parser.parse(\"bla~\");\n    assertEquals(\"f1:bla~0.5 f2:bla~0.5 f3:bla~0.5\", q.toString());\n    q = parser.parse(\"[a TO c]\");\n    assertEquals(\"f1:[a TO c] f2:[a TO c] f3:[a TO c]\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testAnalyzerReturningNull().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testAnalyzerReturningNull().mjava","sourceNew":"  public void testAnalyzerReturningNull() throws ParseException {\n    String[] fields = new String[] { \"f1\", \"f2\", \"f3\" };\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new AnalyzerReturningNull());\n    Query q = parser.parse(\"bla AND blo\");\n    assertEquals(\"+(f2:bla f3:bla) +(f2:blo f3:blo)\", q.toString());\n    // the following queries are not affected as their terms are not analyzed anyway:\n    q = parser.parse(\"bla*\");\n    assertEquals(\"f1:bla* f2:bla* f3:bla*\", q.toString());\n    q = parser.parse(\"bla~\");\n    assertEquals(\"f1:bla~0.5 f2:bla~0.5 f3:bla~0.5\", q.toString());\n    q = parser.parse(\"[a TO c]\");\n    assertEquals(\"f1:[a TO c] f2:[a TO c] f3:[a TO c]\", q.toString());\n  }\n\n","sourceOld":"  public void testAnalyzerReturningNull() throws ParseException {\n    String[] fields = new String[] { \"f1\", \"f2\", \"f3\" };\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new AnalyzerReturningNull());\n    Query q = parser.parse(\"bla AND blo\");\n    assertEquals(\"+(f2:bla f3:bla) +(f2:blo f3:blo)\", q.toString());\n    // the following queries are not affected as their terms are not analyzed anyway:\n    q = parser.parse(\"bla*\");\n    assertEquals(\"f1:bla* f2:bla* f3:bla*\", q.toString());\n    q = parser.parse(\"bla~\");\n    assertEquals(\"f1:bla~0.5 f2:bla~0.5 f3:bla~0.5\", q.toString());\n    q = parser.parse(\"[a TO c]\");\n    assertEquals(\"f1:[a TO c] f2:[a TO c] f3:[a TO c]\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["ba1116b3450a9c1642c89445d131b37344055245"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8a1d441aebbbc08d78769b753795e0d44163a3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"ba1116b3450a9c1642c89445d131b37344055245":["c8a1d441aebbbc08d78769b753795e0d44163a3a"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c8a1d441aebbbc08d78769b753795e0d44163a3a"],"c8a1d441aebbbc08d78769b753795e0d44163a3a":["ba1116b3450a9c1642c89445d131b37344055245"],"ba1116b3450a9c1642c89445d131b37344055245":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}