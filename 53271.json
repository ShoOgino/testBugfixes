{"path":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/DoubleMetaphoneFilterTest#testRandom().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/DoubleMetaphoneFilterTest#testRandom().mjava","pathOld":"modules/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/DoubleMetaphoneFilterTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    final int codeLen = _TestUtil.nextInt(random(), 1, 8);\n    Analyzer a = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new DoubleMetaphoneFilter(tokenizer, codeLen, false));\n      }\n      \n    };\n    checkRandomData(random(), a, 1000 * RANDOM_MULTIPLIER);\n    \n    Analyzer b = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new DoubleMetaphoneFilter(tokenizer, codeLen, true));\n      }\n      \n    };\n    checkRandomData(random(), b, 1000 * RANDOM_MULTIPLIER); \n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    final int codeLen = _TestUtil.nextInt(random(), 1, 8);\n    Analyzer a = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new DoubleMetaphoneFilter(tokenizer, codeLen, false));\n      }\n      \n    };\n    checkRandomData(random(), a, 1000 * RANDOM_MULTIPLIER);\n    \n    Analyzer b = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new DoubleMetaphoneFilter(tokenizer, codeLen, true));\n      }\n      \n    };\n    checkRandomData(random(), b, 1000 * RANDOM_MULTIPLIER); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/DoubleMetaphoneFilterTest#testRandom().mjava","pathOld":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/DoubleMetaphoneFilterTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    final int codeLen = _TestUtil.nextInt(random(), 1, 8);\n    Analyzer a = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new DoubleMetaphoneFilter(tokenizer, codeLen, false));\n      }\n      \n    };\n    checkRandomData(random(), a, 1000 * RANDOM_MULTIPLIER);\n    \n    Analyzer b = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new DoubleMetaphoneFilter(tokenizer, codeLen, true));\n      }\n      \n    };\n    checkRandomData(random(), b, 1000 * RANDOM_MULTIPLIER); \n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    final int codeLen = _TestUtil.nextInt(random(), 1, 8);\n    Analyzer a = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new DoubleMetaphoneFilter(tokenizer, codeLen, false));\n      }\n      \n    };\n    checkRandomData(random(), a, 1000 * RANDOM_MULTIPLIER);\n    \n    Analyzer b = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new DoubleMetaphoneFilter(tokenizer, codeLen, true));\n      }\n      \n    };\n    checkRandomData(random(), b, 1000 * RANDOM_MULTIPLIER); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/DoubleMetaphoneFilterTest#testRandom().mjava","pathOld":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/DoubleMetaphoneFilterTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    final int codeLen = TestUtil.nextInt(random(), 1, 8);\n    Analyzer a = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new DoubleMetaphoneFilter(tokenizer, codeLen, false));\n      }\n      \n    };\n    checkRandomData(random(), a, 1000 * RANDOM_MULTIPLIER);\n    \n    Analyzer b = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new DoubleMetaphoneFilter(tokenizer, codeLen, true));\n      }\n      \n    };\n    checkRandomData(random(), b, 1000 * RANDOM_MULTIPLIER); \n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    final int codeLen = _TestUtil.nextInt(random(), 1, 8);\n    Analyzer a = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new DoubleMetaphoneFilter(tokenizer, codeLen, false));\n      }\n      \n    };\n    checkRandomData(random(), a, 1000 * RANDOM_MULTIPLIER);\n    \n    Analyzer b = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new DoubleMetaphoneFilter(tokenizer, codeLen, true));\n      }\n      \n    };\n    checkRandomData(random(), b, 1000 * RANDOM_MULTIPLIER); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/DoubleMetaphoneFilterTest#testRandom().mjava","pathOld":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/DoubleMetaphoneFilterTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    final int codeLen = TestUtil.nextInt(random(), 1, 8);\n    Analyzer a = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new DoubleMetaphoneFilter(tokenizer, codeLen, false));\n      }\n      \n    };\n    checkRandomData(random(), a, 1000 * RANDOM_MULTIPLIER);\n    a.close();\n    \n    Analyzer b = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new DoubleMetaphoneFilter(tokenizer, codeLen, true));\n      }\n      \n    };\n    checkRandomData(random(), b, 1000 * RANDOM_MULTIPLIER); \n    b.close();\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    final int codeLen = TestUtil.nextInt(random(), 1, 8);\n    Analyzer a = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new DoubleMetaphoneFilter(tokenizer, codeLen, false));\n      }\n      \n    };\n    checkRandomData(random(), a, 1000 * RANDOM_MULTIPLIER);\n    \n    Analyzer b = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new DoubleMetaphoneFilter(tokenizer, codeLen, true));\n      }\n      \n    };\n    checkRandomData(random(), b, 1000 * RANDOM_MULTIPLIER); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/DoubleMetaphoneFilterTest#testRandom().mjava","pathOld":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/DoubleMetaphoneFilterTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    final int codeLen = TestUtil.nextInt(random(), 1, 8);\n    Analyzer a = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new DoubleMetaphoneFilter(tokenizer, codeLen, false));\n      }\n      \n    };\n    checkRandomData(random(), a, 1000 * RANDOM_MULTIPLIER);\n    a.close();\n    \n    Analyzer b = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new DoubleMetaphoneFilter(tokenizer, codeLen, true));\n      }\n      \n    };\n    checkRandomData(random(), b, 1000 * RANDOM_MULTIPLIER); \n    b.close();\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    final int codeLen = TestUtil.nextInt(random(), 1, 8);\n    Analyzer a = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new DoubleMetaphoneFilter(tokenizer, codeLen, false));\n      }\n      \n    };\n    checkRandomData(random(), a, 1000 * RANDOM_MULTIPLIER);\n    \n    Analyzer b = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new DoubleMetaphoneFilter(tokenizer, codeLen, true));\n      }\n      \n    };\n    checkRandomData(random(), b, 1000 * RANDOM_MULTIPLIER); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["6613659748fe4411a7dcf85266e55db1f95f7315","a56958d7f71a28824f20031ffbb2e13502a0274e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56958d7f71a28824f20031ffbb2e13502a0274e"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}