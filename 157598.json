{"path":"lucene/core/src/java/org/apache/lucene/index/MergedPrefixCodedTermsIterator#next().mjava","commits":[{"id":"7e4c214a1f904dde76f5611b56d4081533055b3b","date":1421938451,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergedPrefixCodedTermsIterator#next().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean next() {\n    if (termQueue.size() == 0) {\n      // Current field is done:\n      if (fieldQueue.size() == 0) {\n        // No more fields:\n        field = null;\n        return true;\n      }\n\n      // Transfer all iterators on the next field into the term queue:\n      TermIterator top = fieldQueue.pop();\n      termQueue.add(top);\n      assert top.field() != null;\n\n      while (fieldQueue.size() != 0 && fieldQueue.top().field.equals(top.field)) {\n        termQueue.add(fieldQueue.pop());\n      }\n\n      field = top.field;\n      return true;\n    } else {\n      TermIterator top = termQueue.top();\n      if (top.next()) {\n        // New field\n        termQueue.pop();\n        if (top.field() != null) {\n          fieldQueue.add(top);\n        }\n      } else {\n        termQueue.updateTop();\n      }\n\n      if (termQueue.size() != 0) {\n        // Still terms left in this field\n        return false;\n      } else {\n        // Recurse (just once) to go to next field:                                                                                                                                        \n        return next();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"258f227b48a4dbfc180f6ec70f172469d6a2bef8","date":1428687213,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergedPrefixCodedTermsIterator#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergedPrefixCodedTermsIterator#next().mjava","sourceNew":"  @Override\n  public BytesRef next() {\n    if (termQueue.size() == 0) {\n      // No more terms in current field:\n      if (fieldQueue.size() == 0) {\n        // No more fields:\n        field = null;\n        return null;\n      }\n\n      // Transfer all iterators on the next field into the term queue:\n      TermIterator top = fieldQueue.pop();\n      termQueue.add(top);\n      field = top.field;\n      assert field != null;\n\n      while (fieldQueue.size() != 0 && fieldQueue.top().field.equals(top.field)) {\n        TermIterator iter = fieldQueue.pop();\n        assert iter.field.equals(field);\n        // TODO: a little bit evil; we do this so we can == on field down below:\n        iter.field = field;\n        termQueue.add(iter);\n      }\n\n      return termQueue.top().bytes;\n    } else {\n      TermIterator top = termQueue.top();\n      if (top.next() == null) {\n        termQueue.pop();\n      } else if (top.field() != field) {\n        // Field changed\n        termQueue.pop();\n        fieldQueue.add(top);\n      } else {\n        termQueue.updateTop();\n      }\n      if (termQueue.size() == 0) {\n        // Recurse (just once) to go to next field:                                                                                                                                        \n        return next();\n      } else {\n        // Still terms left in this field\n        return termQueue.top().bytes;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean next() {\n    if (termQueue.size() == 0) {\n      // Current field is done:\n      if (fieldQueue.size() == 0) {\n        // No more fields:\n        field = null;\n        return true;\n      }\n\n      // Transfer all iterators on the next field into the term queue:\n      TermIterator top = fieldQueue.pop();\n      termQueue.add(top);\n      assert top.field() != null;\n\n      while (fieldQueue.size() != 0 && fieldQueue.top().field.equals(top.field)) {\n        termQueue.add(fieldQueue.pop());\n      }\n\n      field = top.field;\n      return true;\n    } else {\n      TermIterator top = termQueue.top();\n      if (top.next()) {\n        // New field\n        termQueue.pop();\n        if (top.field() != null) {\n          fieldQueue.add(top);\n        }\n      } else {\n        termQueue.updateTop();\n      }\n\n      if (termQueue.size() != 0) {\n        // Still terms left in this field\n        return false;\n      } else {\n        // Recurse (just once) to go to next field:                                                                                                                                        \n        return next();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergedPrefixCodedTermsIterator#next().mjava","sourceNew":null,"sourceOld":"  @Override\n  public BytesRef next() {\n    if (termQueue.size() == 0) {\n      // No more terms in current field:\n      if (fieldQueue.size() == 0) {\n        // No more fields:\n        field = null;\n        return null;\n      }\n\n      // Transfer all iterators on the next field into the term queue:\n      TermIterator top = fieldQueue.pop();\n      termQueue.add(top);\n      field = top.field;\n      assert field != null;\n\n      while (fieldQueue.size() != 0 && fieldQueue.top().field.equals(top.field)) {\n        TermIterator iter = fieldQueue.pop();\n        assert iter.field.equals(field);\n        // TODO: a little bit evil; we do this so we can == on field down below:\n        iter.field = field;\n        termQueue.add(iter);\n      }\n\n      return termQueue.top().bytes;\n    } else {\n      TermIterator top = termQueue.top();\n      if (top.next() == null) {\n        termQueue.pop();\n      } else if (top.field() != field) {\n        // Field changed\n        termQueue.pop();\n        fieldQueue.add(top);\n      } else {\n        termQueue.updateTop();\n      }\n      if (termQueue.size() == 0) {\n        // Recurse (just once) to go to next field:                                                                                                                                        \n        return next();\n      } else {\n        // Still terms left in this field\n        return termQueue.top().bytes;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergedPrefixCodedTermsIterator#next().mjava","sourceNew":null,"sourceOld":"  @Override\n  public BytesRef next() {\n    if (termQueue.size() == 0) {\n      // No more terms in current field:\n      if (fieldQueue.size() == 0) {\n        // No more fields:\n        field = null;\n        return null;\n      }\n\n      // Transfer all iterators on the next field into the term queue:\n      TermIterator top = fieldQueue.pop();\n      termQueue.add(top);\n      field = top.field;\n      assert field != null;\n\n      while (fieldQueue.size() != 0 && fieldQueue.top().field.equals(top.field)) {\n        TermIterator iter = fieldQueue.pop();\n        assert iter.field.equals(field);\n        // TODO: a little bit evil; we do this so we can == on field down below:\n        iter.field = field;\n        termQueue.add(iter);\n      }\n\n      return termQueue.top().bytes;\n    } else {\n      TermIterator top = termQueue.top();\n      if (top.next() == null) {\n        termQueue.pop();\n      } else if (top.field() != field) {\n        // Field changed\n        termQueue.pop();\n        fieldQueue.add(top);\n      } else {\n        termQueue.updateTop();\n      }\n      if (termQueue.size() == 0) {\n        // Recurse (just once) to go to next field:                                                                                                                                        \n        return next();\n      } else {\n        // Still terms left in this field\n        return termQueue.top().bytes;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergedPrefixCodedTermsIterator#next().mjava","sourceNew":null,"sourceOld":"  @Override\n  public BytesRef next() {\n    if (termQueue.size() == 0) {\n      // No more terms in current field:\n      if (fieldQueue.size() == 0) {\n        // No more fields:\n        field = null;\n        return null;\n      }\n\n      // Transfer all iterators on the next field into the term queue:\n      TermIterator top = fieldQueue.pop();\n      termQueue.add(top);\n      field = top.field;\n      assert field != null;\n\n      while (fieldQueue.size() != 0 && fieldQueue.top().field.equals(top.field)) {\n        TermIterator iter = fieldQueue.pop();\n        assert iter.field.equals(field);\n        // TODO: a little bit evil; we do this so we can == on field down below:\n        iter.field = field;\n        termQueue.add(iter);\n      }\n\n      return termQueue.top().bytes;\n    } else {\n      TermIterator top = termQueue.top();\n      if (top.next() == null) {\n        termQueue.pop();\n      } else if (top.field() != field) {\n        // Field changed\n        termQueue.pop();\n        fieldQueue.add(top);\n      } else {\n        termQueue.updateTop();\n      }\n      if (termQueue.size() == 0) {\n        // Recurse (just once) to go to next field:                                                                                                                                        \n        return next();\n      } else {\n        // Still terms left in this field\n        return termQueue.top().bytes;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"258f227b48a4dbfc180f6ec70f172469d6a2bef8":["7e4c214a1f904dde76f5611b56d4081533055b3b"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["258f227b48a4dbfc180f6ec70f172469d6a2bef8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7e4c214a1f904dde76f5611b56d4081533055b3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["258f227b48a4dbfc180f6ec70f172469d6a2bef8","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["258f227b48a4dbfc180f6ec70f172469d6a2bef8","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"258f227b48a4dbfc180f6ec70f172469d6a2bef8":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7e4c214a1f904dde76f5611b56d4081533055b3b"],"7e4c214a1f904dde76f5611b56d4081533055b3b":["258f227b48a4dbfc180f6ec70f172469d6a2bef8"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}