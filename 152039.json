{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#addMissingReplicas(SolrCloudManager,Suggestion.Ctx).mjava","commits":[{"id":"549864a5317b87de2dd7d4a7d4f8d88eae2c7e58","date":1538573878,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#addMissingReplicas(SolrCloudManager,Suggestion.Ctx).mjava","pathOld":"/dev/null","sourceNew":"  private static void addMissingReplicas(SolrCloudManager cloudManager, Suggestion.Ctx ctx) throws IOException {\n    cloudManager.getClusterStateProvider().getClusterState().forEachCollection(coll -> coll.forEach(slice -> {\n          ReplicaCount replicaCount = new ReplicaCount();\n          slice.forEach(replica -> {\n            if (replica.getState() == Replica.State.ACTIVE || replica.getState() == Replica.State.RECOVERING) {\n              replicaCount.increment(replica.getType());\n            }\n          });\n          addMissingReplicas(replicaCount, coll, slice.getName(), Replica.Type.NRT, ctx);\n          addMissingReplicas(replicaCount, coll, slice.getName(), Replica.Type.PULL, ctx);\n          addMissingReplicas(replicaCount, coll, slice.getName(), Replica.Type.TLOG, ctx);\n        }\n    ));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58e890cd5653ae8550bc6088d739f4eaaf950aff","date":1547036285,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#addMissingReplicas(SolrCloudManager,Suggestion.Ctx).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#addMissingReplicas(SolrCloudManager,Suggestion.Ctx).mjava","sourceNew":"  private static void addMissingReplicas(SolrCloudManager cloudManager, Suggestion.Ctx ctx) throws IOException {\n    cloudManager.getClusterStateProvider().getClusterState().forEachCollection(coll -> coll.forEach(slice -> {\n      if (!ctx.needMore()) return;\n          ReplicaCount replicaCount = new ReplicaCount();\n          slice.forEach(replica -> {\n            if (replica.getState() == Replica.State.ACTIVE || replica.getState() == Replica.State.RECOVERING) {\n              replicaCount.increment(replica.getType());\n            }\n          });\n          addMissingReplicas(replicaCount, coll, slice.getName(), Replica.Type.NRT, ctx);\n          addMissingReplicas(replicaCount, coll, slice.getName(), Replica.Type.PULL, ctx);\n          addMissingReplicas(replicaCount, coll, slice.getName(), Replica.Type.TLOG, ctx);\n        }\n    ));\n  }\n\n","sourceOld":"  private static void addMissingReplicas(SolrCloudManager cloudManager, Suggestion.Ctx ctx) throws IOException {\n    cloudManager.getClusterStateProvider().getClusterState().forEachCollection(coll -> coll.forEach(slice -> {\n          ReplicaCount replicaCount = new ReplicaCount();\n          slice.forEach(replica -> {\n            if (replica.getState() == Replica.State.ACTIVE || replica.getState() == Replica.State.RECOVERING) {\n              replicaCount.increment(replica.getType());\n            }\n          });\n          addMissingReplicas(replicaCount, coll, slice.getName(), Replica.Type.NRT, ctx);\n          addMissingReplicas(replicaCount, coll, slice.getName(), Replica.Type.PULL, ctx);\n          addMissingReplicas(replicaCount, coll, slice.getName(), Replica.Type.TLOG, ctx);\n        }\n    ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#addMissingReplicas(SolrCloudManager,Suggestion.Ctx).mjava","sourceNew":null,"sourceOld":"  private static void addMissingReplicas(SolrCloudManager cloudManager, Suggestion.Ctx ctx) throws IOException {\n    cloudManager.getClusterStateProvider().getClusterState().forEachCollection(coll -> coll.forEach(slice -> {\n      if (!ctx.needMore()) return;\n          ReplicaCount replicaCount = new ReplicaCount();\n          slice.forEach(replica -> {\n            if (replica.getState() == Replica.State.ACTIVE || replica.getState() == Replica.State.RECOVERING) {\n              replicaCount.increment(replica.getType());\n            }\n          });\n          addMissingReplicas(replicaCount, coll, slice.getName(), Replica.Type.NRT, ctx);\n          addMissingReplicas(replicaCount, coll, slice.getName(), Replica.Type.PULL, ctx);\n          addMissingReplicas(replicaCount, coll, slice.getName(), Replica.Type.TLOG, ctx);\n        }\n    ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58e890cd5653ae8550bc6088d739f4eaaf950aff":["549864a5317b87de2dd7d4a7d4f8d88eae2c7e58"],"3f504512a03d978990cbff30db0522b354e846db":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"549864a5317b87de2dd7d4a7d4f8d88eae2c7e58":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"58e890cd5653ae8550bc6088d739f4eaaf950aff":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"549864a5317b87de2dd7d4a7d4f8d88eae2c7e58":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["549864a5317b87de2dd7d4a7d4f8d88eae2c7e58"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}