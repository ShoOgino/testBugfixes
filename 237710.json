{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDecimalDigitFilter#testRandom().mjava","commits":[{"id":"6fe8aa71069c95e278b630015ea5d34aad0ed2dd","date":1439557976,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDecimalDigitFilter#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * test all digits in different locations of strings.\n   */\n  public void testRandom() throws Exception {\n    for (int codepoint = Character.MIN_CODE_POINT; codepoint < Character.MAX_CODE_POINT; codepoint++) {\n      if (Character.isDigit(codepoint)) {\n        // add some a-z before/after the string\n        String prefix = TestUtil.randomSimpleString(random());\n        String suffix = TestUtil.randomSimpleString(random());\n        \n        StringBuilder expected = new StringBuilder();\n        expected.append(prefix);\n        int value = Character.getNumericValue(codepoint);\n        assert value >= 0 && value <= 9;\n        expected.append(Integer.toString(value));\n        expected.append(suffix);\n        \n        StringBuilder actual = new StringBuilder();\n        actual.append(prefix);\n        actual.appendCodePoint(codepoint);\n        actual.append(suffix);\n        \n        checkOneTerm(keyword, actual.toString(), expected.toString());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aae05b52a79e8b9df9f7ea8b383820f98d2fed7e","date":1476779931,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDecimalDigitFilter#testRandom().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDecimalDigitFilter#testRandom().mjava","sourceNew":"  /**\n   * test each individual digit in different locations of strings.\n   */\n  public void testRandom() throws Exception {\n    int numCodePointsChecked = 0; // sanity check\n    for (int codepoint = DECIMAL_DIGIT_CODEPOINTS.nextSetBit(0);\n         codepoint != DocIdSetIterator.NO_MORE_DOCS;\n         codepoint = DECIMAL_DIGIT_CODEPOINTS.nextSetBit(codepoint+1)) {\n      \n      assert Character.isDigit(codepoint);\n      \n      // add some a-z before/after the string\n      String prefix = TestUtil.randomSimpleString(random());\n      String suffix = TestUtil.randomSimpleString(random());\n      \n      StringBuilder expected = new StringBuilder();\n      expected.append(prefix);\n      int value = Character.getNumericValue(codepoint);\n      assert value >= 0 && value <= 9;\n      expected.append(Integer.toString(value));\n      expected.append(suffix);\n      \n      StringBuilder actual = new StringBuilder();\n      actual.append(prefix);\n      actual.appendCodePoint(codepoint);\n      actual.append(suffix);\n      \n      checkOneTerm(keyword, actual.toString(), expected.toString());\n      \n      numCodePointsChecked++;\n    }\n    assert DECIMAL_DIGIT_CODEPOINTS.cardinality() == numCodePointsChecked;\n  }\n\n","sourceOld":"  /**\n   * test all digits in different locations of strings.\n   */\n  public void testRandom() throws Exception {\n    for (int codepoint = Character.MIN_CODE_POINT; codepoint < Character.MAX_CODE_POINT; codepoint++) {\n      if (Character.isDigit(codepoint)) {\n        // add some a-z before/after the string\n        String prefix = TestUtil.randomSimpleString(random());\n        String suffix = TestUtil.randomSimpleString(random());\n        \n        StringBuilder expected = new StringBuilder();\n        expected.append(prefix);\n        int value = Character.getNumericValue(codepoint);\n        assert value >= 0 && value <= 9;\n        expected.append(Integer.toString(value));\n        expected.append(suffix);\n        \n        StringBuilder actual = new StringBuilder();\n        actual.append(prefix);\n        actual.appendCodePoint(codepoint);\n        actual.append(suffix);\n        \n        checkOneTerm(keyword, actual.toString(), expected.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDecimalDigitFilter#testRandom().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDecimalDigitFilter#testRandom().mjava","sourceNew":"  /**\n   * test each individual digit in different locations of strings.\n   */\n  public void testRandom() throws Exception {\n    int numCodePointsChecked = 0; // sanity check\n    for (int codepoint = DECIMAL_DIGIT_CODEPOINTS.nextSetBit(0);\n         codepoint != DocIdSetIterator.NO_MORE_DOCS;\n         codepoint = DECIMAL_DIGIT_CODEPOINTS.nextSetBit(codepoint+1)) {\n      \n      assert Character.isDigit(codepoint);\n      \n      // add some a-z before/after the string\n      String prefix = TestUtil.randomSimpleString(random());\n      String suffix = TestUtil.randomSimpleString(random());\n      \n      StringBuilder expected = new StringBuilder();\n      expected.append(prefix);\n      int value = Character.getNumericValue(codepoint);\n      assert value >= 0 && value <= 9;\n      expected.append(Integer.toString(value));\n      expected.append(suffix);\n      \n      StringBuilder actual = new StringBuilder();\n      actual.append(prefix);\n      actual.appendCodePoint(codepoint);\n      actual.append(suffix);\n      \n      checkOneTerm(keyword, actual.toString(), expected.toString());\n      \n      numCodePointsChecked++;\n    }\n    assert DECIMAL_DIGIT_CODEPOINTS.cardinality() == numCodePointsChecked;\n  }\n\n","sourceOld":"  /**\n   * test all digits in different locations of strings.\n   */\n  public void testRandom() throws Exception {\n    for (int codepoint = Character.MIN_CODE_POINT; codepoint < Character.MAX_CODE_POINT; codepoint++) {\n      if (Character.isDigit(codepoint)) {\n        // add some a-z before/after the string\n        String prefix = TestUtil.randomSimpleString(random());\n        String suffix = TestUtil.randomSimpleString(random());\n        \n        StringBuilder expected = new StringBuilder();\n        expected.append(prefix);\n        int value = Character.getNumericValue(codepoint);\n        assert value >= 0 && value <= 9;\n        expected.append(Integer.toString(value));\n        expected.append(suffix);\n        \n        StringBuilder actual = new StringBuilder();\n        actual.append(prefix);\n        actual.appendCodePoint(codepoint);\n        actual.append(suffix);\n        \n        checkOneTerm(keyword, actual.toString(), expected.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6fe8aa71069c95e278b630015ea5d34aad0ed2dd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aae05b52a79e8b9df9f7ea8b383820f98d2fed7e":["6fe8aa71069c95e278b630015ea5d34aad0ed2dd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6fe8aa71069c95e278b630015ea5d34aad0ed2dd","aae05b52a79e8b9df9f7ea8b383820f98d2fed7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aae05b52a79e8b9df9f7ea8b383820f98d2fed7e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6fe8aa71069c95e278b630015ea5d34aad0ed2dd"],"6fe8aa71069c95e278b630015ea5d34aad0ed2dd":["aae05b52a79e8b9df9f7ea8b383820f98d2fed7e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"aae05b52a79e8b9df9f7ea8b383820f98d2fed7e":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}