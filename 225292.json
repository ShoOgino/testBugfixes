{"path":"solr/core/src/java/org/apache/solr/handler/sql/SolrAggregate#toSolrMetric(Implementor,AggregateCall,List[String]).mjava","commits":[{"id":"b35c86a7787a532402f49557ac05fe2596fa73b9","date":1462399837,"type":1,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrAggregate#toSolrMetric(Implementor,AggregateCall,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrAggregate#toSolrMetric(SqlAggFunction,List[String],List[Integer]).mjava","sourceNew":"  private Pair<String, String> toSolrMetric(Implementor implementor, AggregateCall aggCall, List<String> inNames) {\n    SqlAggFunction aggregation = aggCall.getAggregation();\n    List<Integer> args = aggCall.getArgList();\n    switch (args.size()) {\n      case 0:\n        if (aggregation.equals(SqlStdOperatorTable.COUNT)) {\n          return new Pair<>(aggregation.getName(), \"*\");\n        }\n      case 1:\n        String inName = inNames.get(args.get(0));\n        String name = implementor.fieldMappings.getOrDefault(inName, inName);\n        if(SUPPORTED_AGGREGATIONS.contains(aggregation)) {\n          return new Pair<>(aggregation.getName(), name);\n        }\n      default:\n        throw new AssertionError(\"Invalid aggregation \" + aggregation + \" with args \" + args + \" with names\" + inNames);\n    }\n  }\n\n","sourceOld":"  private Pair<String, String> toSolrMetric(SqlAggFunction aggregation, List<String> inNames, List<Integer> args) {\n    switch (args.size()) {\n      case 0:\n        if (aggregation.equals(SqlStdOperatorTable.COUNT)) {\n          return new Pair<>(aggregation.getName(), \"*\");\n        }\n      case 1:\n        final String inName = inNames.get(args.get(0));\n        if(SUPPORTED_AGGREGATIONS.contains(aggregation)) {\n          return new Pair<>(aggregation.getName(), inName);\n        }\n      default:\n        throw new AssertionError(\"Invalid aggregation \" + aggregation + \" with args \" + args + \" with names\" + inNames);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":0,"author":"Joel Bernstein","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrAggregate#toSolrMetric(Implementor,AggregateCall,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  private Pair<String, String> toSolrMetric(Implementor implementor, AggregateCall aggCall, List<String> inNames) {\n    SqlAggFunction aggregation = aggCall.getAggregation();\n    List<Integer> args = aggCall.getArgList();\n    switch (args.size()) {\n      case 0:\n        if (aggregation.equals(SqlStdOperatorTable.COUNT)) {\n          return new Pair<>(aggregation.getName(), \"*\");\n        }\n      case 1:\n        String inName = inNames.get(args.get(0));\n        String name = implementor.fieldMappings.getOrDefault(inName, inName);\n        if(SUPPORTED_AGGREGATIONS.contains(aggregation)) {\n          return new Pair<>(aggregation.getName(), name);\n        }\n      default:\n        throw new AssertionError(\"Invalid aggregation \" + aggregation + \" with args \" + args + \" with names\" + inNames);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8582f07e9350eaeb33bf6c4617b8c9895d99c839","date":1591307386,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrAggregate#toSolrMetric(Implementor,AggregateCall,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrAggregate#toSolrMetric(Implementor,AggregateCall,List[String]).mjava","sourceNew":"  @SuppressWarnings({\"fallthrough\"})\n  private Pair<String, String> toSolrMetric(Implementor implementor, AggregateCall aggCall, List<String> inNames) {\n    SqlAggFunction aggregation = aggCall.getAggregation();\n    List<Integer> args = aggCall.getArgList();\n    switch (args.size()) {\n      case 0:\n        if (aggregation.equals(SqlStdOperatorTable.COUNT)) {\n          return new Pair<>(aggregation.getName(), \"*\");\n        }\n      case 1:\n        String inName = inNames.get(args.get(0));\n        String name = implementor.fieldMappings.getOrDefault(inName, inName);\n        if(SUPPORTED_AGGREGATIONS.contains(aggregation)) {\n          return new Pair<>(aggregation.getName(), name);\n        }\n      default:\n        throw new AssertionError(\"Invalid aggregation \" + aggregation + \" with args \" + args + \" with names\" + inNames);\n    }\n  }\n\n","sourceOld":"  private Pair<String, String> toSolrMetric(Implementor implementor, AggregateCall aggCall, List<String> inNames) {\n    SqlAggFunction aggregation = aggCall.getAggregation();\n    List<Integer> args = aggCall.getArgList();\n    switch (args.size()) {\n      case 0:\n        if (aggregation.equals(SqlStdOperatorTable.COUNT)) {\n          return new Pair<>(aggregation.getName(), \"*\");\n        }\n      case 1:\n        String inName = inNames.get(args.get(0));\n        String name = implementor.fieldMappings.getOrDefault(inName, inName);\n        if(SUPPORTED_AGGREGATIONS.contains(aggregation)) {\n          return new Pair<>(aggregation.getName(), name);\n        }\n      default:\n        throw new AssertionError(\"Invalid aggregation \" + aggregation + \" with args \" + args + \" with names\" + inNames);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b35c86a7787a532402f49557ac05fe2596fa73b9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b35c86a7787a532402f49557ac05fe2596fa73b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"]},"commit2Childs":{"b35c86a7787a532402f49557ac05fe2596fa73b9":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b35c86a7787a532402f49557ac05fe2596fa73b9","116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}