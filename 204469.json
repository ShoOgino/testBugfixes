{"path":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestPlainTextDictionary#testBuild().mjava","commits":[{"id":"96308b901685e8ec12a3856f788a7d9d98c22e50","date":1180177598,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestPlainTextDictionary#testBuild().mjava","pathOld":"/dev/null","sourceNew":"  public void testBuild() throws IOException {\n    final String LF = System.getProperty(\"line.separator\");\n    String input = \"oneword\" + LF + \"twoword\" + LF + \"threeword\";\n    PlainTextDictionary ptd = new PlainTextDictionary(new StringReader(input));\n    RAMDirectory ramDir = new RAMDirectory();\n    SpellChecker spellChecker = new SpellChecker(ramDir);\n    spellChecker.indexDictionary(ptd);\n    String[] similar = spellChecker.suggestSimilar(\"treeword\", 2);\n    assertEquals(2, similar.length);\n    assertEquals(similar[0], \"threeword\");\n    assertEquals(similar[1], \"twoword\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["61ab4111d25902ca08254bd3935ec801fbd3885f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestPlainTextDictionary#testBuild().mjava","pathOld":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestPlainTextDictionary#testBuild().mjava","sourceNew":"  public void testBuild() throws IOException {\n    final String LF = System.getProperty(\"line.separator\");\n    String input = \"oneword\" + LF + \"twoword\" + LF + \"threeword\";\n    PlainTextDictionary ptd = new PlainTextDictionary(new StringReader(input));\n    RAMDirectory ramDir = new RAMDirectory();\n    SpellChecker spellChecker = new SpellChecker(ramDir);\n    spellChecker.indexDictionary(ptd);\n    String[] similar = spellChecker.suggestSimilar(\"treeword\", 2);\n    assertEquals(2, similar.length);\n    assertEquals(similar[0], \"threeword\");\n    assertEquals(similar[1], \"twoword\");\n  }\n\n","sourceOld":"  public void testBuild() throws IOException {\n    final String LF = System.getProperty(\"line.separator\");\n    String input = \"oneword\" + LF + \"twoword\" + LF + \"threeword\";\n    PlainTextDictionary ptd = new PlainTextDictionary(new StringReader(input));\n    RAMDirectory ramDir = new RAMDirectory();\n    SpellChecker spellChecker = new SpellChecker(ramDir);\n    spellChecker.indexDictionary(ptd);\n    String[] similar = spellChecker.suggestSimilar(\"treeword\", 2);\n    assertEquals(2, similar.length);\n    assertEquals(similar[0], \"threeword\");\n    assertEquals(similar[1], \"twoword\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"96308b901685e8ec12a3856f788a7d9d98c22e50":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["96308b901685e8ec12a3856f788a7d9d98c22e50"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["96308b901685e8ec12a3856f788a7d9d98c22e50"],"96308b901685e8ec12a3856f788a7d9d98c22e50":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}