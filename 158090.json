{"path":"lucene/core/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#verifyVector(TermsEnum,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#verifyVector(TermsEnum,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#verifyVector(TermsEnum,int).mjava","sourceNew":"  private void verifyVector(TermsEnum vector, int num) throws IOException {\n    StringBuilder temp = new StringBuilder();\n    while(vector.next() != null) {\n      temp.append(vector.term().utf8ToString());\n    }\n    if (!English.intToEnglish(num).trim().equals(temp.toString().trim()))\n        System.out.println(\"wrong term result\");\n  }\n\n","sourceOld":"  private void verifyVector(TermsEnum vector, int num) throws IOException {\n    StringBuilder temp = new StringBuilder();\n    while(vector.next() != null) {\n      temp.append(vector.term().utf8ToString());\n    }\n    if (!English.intToEnglish(num).trim().equals(temp.toString().trim()))\n        System.out.println(\"wrong term result\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4208ed8e426ae5f75a41d8b4ae53f4587e413061","date":1580475454,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiThreadTermVectors#verifyVector(TermsEnum,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#verifyVector(TermsEnum,int).mjava","sourceNew":"  static void verifyVector(TermsEnum vector, int num) throws IOException {\n    StringBuilder temp = new StringBuilder();\n    while(vector.next() != null) {\n      temp.append(vector.term().utf8ToString());\n    }\n    assertEquals(English.intToEnglish(num).trim(), temp.toString().trim());\n  }\n\n","sourceOld":"  private void verifyVector(TermsEnum vector, int num) throws IOException {\n    StringBuilder temp = new StringBuilder();\n    while(vector.next() != null) {\n      temp.append(vector.term().utf8ToString());\n    }\n    if (!English.intToEnglish(num).trim().equals(temp.toString().trim()))\n        System.out.println(\"wrong term result\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}