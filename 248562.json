{"path":"solr/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertEquals(\"quick lazy\", request.getQuery());\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertFalse(request.isShowMatch());\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertTrue(request.isShowMatch());\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertNull(request.getQuery());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","sourceNew":null,"sourceOld":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertEquals(\"quick lazy\", request.getQuery());\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertFalse(request.isShowMatch());\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertTrue(request.isShowMatch());\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertNull(request.getQuery());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","sourceNew":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertEquals(\"quick lazy\", request.getQuery());\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertFalse(request.isShowMatch());\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertTrue(request.isShowMatch());\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertNull(request.getQuery());\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertEquals(\"quick lazy\", request.getQuery());\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertFalse(request.isShowMatch());\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertTrue(request.isShowMatch());\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertNull(request.getQuery());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertEquals(\"quick lazy\", request.getQuery());\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertFalse(request.isShowMatch());\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertTrue(request.isShowMatch());\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertNull(request.getQuery());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd0a7f04b5a49a00149b867e7d51f632fb8a4664","date":1279497978,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"solr/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","sourceNew":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertEquals(\"quick lazy\", request.getQuery());\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertFalse(request.isShowMatch());\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertTrue(request.isShowMatch());\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertNull(request.getQuery());\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertEquals(\"quick lazy\", request.getQuery());\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertFalse(request.isShowMatch());\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertTrue(request.isShowMatch());\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertNull(request.getQuery());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"solr/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","sourceNew":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertEquals(\"quick lazy\", request.getQuery());\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertFalse(request.isShowMatch());\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertTrue(request.isShowMatch());\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertNull(request.getQuery());\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertEquals(\"quick lazy\", request.getQuery());\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertFalse(request.isShowMatch());\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertTrue(request.isShowMatch());\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertNull(request.getQuery());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c2259fe3a1b586b9661b4f079f69c8ad9411c85","date":1287360271,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"solr/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","sourceNew":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), params);\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertTrue(request.isShowMatch());\n    req.close();\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertNull(request.getQuery());\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertEquals(\"quick lazy\", request.getQuery());\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertFalse(request.isShowMatch());\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertTrue(request.isShowMatch());\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertNull(request.getQuery());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"solr/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","sourceNew":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), params);\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertTrue(request.isShowMatch());\n    req.close();\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertNull(request.getQuery());\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertEquals(\"quick lazy\", request.getQuery());\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertFalse(request.isShowMatch());\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertTrue(request.isShowMatch());\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertNull(request.getQuery());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"solr/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","sourceNew":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), params);\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertTrue(request.isShowMatch());\n    req.close();\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertNull(request.getQuery());\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertEquals(\"quick lazy\", request.getQuery());\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertFalse(request.isShowMatch());\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertTrue(request.isShowMatch());\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    request = handler.resolveAnalysisRequest(new LocalSolrQueryRequest(h.getCore(), params));\n    assertNull(request.getQuery());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"solr/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","sourceNew":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), params);\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertTrue(request.isShowMatch());\n    req.close();\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertNull(request.getQuery());\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), params);\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertTrue(request.isShowMatch());\n    req.close();\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertNull(request.getQuery());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"solr/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","sourceNew":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), params);\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertTrue(request.isShowMatch());\n    req.close();\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertNull(request.getQuery());\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), params);\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertTrue(request.isShowMatch());\n    req.close();\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertNull(request.getQuery());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"solr/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","sourceNew":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), params);\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertTrue(request.isShowMatch());\n    req.close();\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertNull(request.getQuery());\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), params);\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertTrue(request.isShowMatch());\n    req.close();\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertNull(request.getQuery());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["0c2259fe3a1b586b9661b4f079f69c8ad9411c85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"0c2259fe3a1b586b9661b4f079f69c8ad9411c85":["bd0a7f04b5a49a00149b867e7d51f632fb8a4664"],"5f4e87790277826a2aea119328600dfb07761f32":["1da8d55113b689b06716246649de6f62430f15c0","bd0a7f04b5a49a00149b867e7d51f632fb8a4664"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","0c2259fe3a1b586b9661b4f079f69c8ad9411c85"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["0c2259fe3a1b586b9661b4f079f69c8ad9411c85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["0c2259fe3a1b586b9661b4f079f69c8ad9411c85"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["bd0a7f04b5a49a00149b867e7d51f632fb8a4664","0c2259fe3a1b586b9661b4f079f69c8ad9411c85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"bd0a7f04b5a49a00149b867e7d51f632fb8a4664":["1da8d55113b689b06716246649de6f62430f15c0"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"0c2259fe3a1b586b9661b4f079f69c8ad9411c85":["c26f00b574427b55127e869b935845554afde1fa","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"1da8d55113b689b06716246649de6f62430f15c0":["5f4e87790277826a2aea119328600dfb07761f32","bd0a7f04b5a49a00149b867e7d51f632fb8a4664"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"bd0a7f04b5a49a00149b867e7d51f632fb8a4664":["0c2259fe3a1b586b9661b4f079f69c8ad9411c85","5f4e87790277826a2aea119328600dfb07761f32","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a258fbb26824fd104ed795e5d9033d2d040049ee","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}