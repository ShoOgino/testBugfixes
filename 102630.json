{"path":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplayVsRecovery#assertDocExists(String,HttpSolrClient,String).mjava","commits":[{"id":"df06aa21e6f41b678afd8f30568ebadd781be717","date":1578089543,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplayVsRecovery#assertDocExists(String,HttpSolrClient,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * uses distrib=false RTG requests to verify that the specified docId can be found using the \n   * specified solr client\n   */\n  private void assertDocExists(final String clientName, final HttpSolrClient client, final String docId) throws Exception {\n    final QueryResponse rsp = (new QueryRequest(params(\"qt\", \"/get\",\n                                                       \"id\", docId,\n                                                       \"_trace\", clientName,\n                                                       \"distrib\", \"false\")))\n      .process(client, COLLECTION);\n    assertEquals(0, rsp.getStatus());\n    \n    String match = JSONTestUtil.matchObj(\"/id\", rsp.getResponse().get(\"doc\"), docId);\n    assertTrue(\"Doc with id=\" + docId + \" not found in \" + clientName\n               + \" due to: \" + match + \"; rsp=\"+rsp, match == null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca62564055241632cd20d65b5ecb8c8e93bd60c4","date":1578383112,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplayVsRecovery#assertDocExists(String,HttpSolrClient,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * uses distrib=false RTG requests to verify that the specified docId can be found using the \n   * specified solr client\n   */\n  private void assertDocExists(final String clientName, final HttpSolrClient client, final String docId) throws Exception {\n    final QueryResponse rsp = (new QueryRequest(params(\"qt\", \"/get\",\n                                                       \"id\", docId,\n                                                       \"_trace\", clientName,\n                                                       \"distrib\", \"false\")))\n      .process(client, COLLECTION);\n    assertEquals(0, rsp.getStatus());\n    \n    String match = JSONTestUtil.matchObj(\"/id\", rsp.getResponse().get(\"doc\"), docId);\n    assertTrue(\"Doc with id=\" + docId + \" not found in \" + clientName\n               + \" due to: \" + match + \"; rsp=\"+rsp, match == null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df06aa21e6f41b678afd8f30568ebadd781be717":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","df06aa21e6f41b678afd8f30568ebadd781be717"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df06aa21e6f41b678afd8f30568ebadd781be717"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["df06aa21e6f41b678afd8f30568ebadd781be717","ca62564055241632cd20d65b5ecb8c8e93bd60c4"],"df06aa21e6f41b678afd8f30568ebadd781be717":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}