{"path":"lucene/core/src/java/org/apache/lucene/index/NumericFieldUpdates.PackedNumericFieldUpdates#add(int,Long).mjava","commits":[{"id":"1bae040fd1d5e03e0d8d695a9c25cf4f402e7ffe","date":1381909398,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NumericFieldUpdates.PackedNumericFieldUpdates#add(int,Long).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void add(int doc, Long value) {\n      assert value != null;\n      // TODO: if the Sorter interface changes to take long indexes, we can remove that limitation\n      if (size == Integer.MAX_VALUE) {\n        throw new IllegalStateException(\"cannot support more than Integer.MAX_VALUE doc/value entries\");\n      }\n\n      // grow the structures to have room for more elements\n      if (docs.size() == size) {\n        docs = docs.grow(size + 1);\n        values = values.grow(size + 1);\n        int numWords = (int) (docs.size() >> 6);\n        if (docsWithField.getBits().length <= numWords) {\n          numWords = ArrayUtil.oversize(numWords + 1, RamUsageEstimator.NUM_BYTES_LONG);\n          docsWithField = new FixedBitSet(docsWithField, numWords << 6);\n        }\n      }\n      \n      if (value != NumericUpdate.MISSING) {\n        // only mark the document as having a value in that field if the value wasn't set to null (MISSING)\n        docsWithField.set(size);\n      }\n      \n      docs.set(size, doc);\n      values.set(size, value.longValue());\n      ++size;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3995f83351082af8ae83bb017e63c56818fc1568","date":1392047063,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NumericFieldUpdates.PackedNumericFieldUpdates#add(int,Long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NumericFieldUpdates.PackedNumericFieldUpdates#add(int,Long).mjava","sourceNew":"    @Override\n    public void add(int doc, Long value) {\n      assert value != null;\n      // TODO: if the Sorter interface changes to take long indexes, we can remove that limitation\n      if (size == Integer.MAX_VALUE) {\n        throw new IllegalStateException(\"cannot support more than Integer.MAX_VALUE doc/value entries\");\n      }\n\n      // grow the structures to have room for more elements\n      if (docs.size() == size) {\n        docs = docs.grow(size + 1);\n        values = values.grow(size + 1);\n        docsWithField = FixedBitSet.ensureCapacity(docsWithField, (int) docs.size());\n      }\n      \n      if (value != NumericUpdate.MISSING) {\n        // only mark the document as having a value in that field if the value wasn't set to null (MISSING)\n        docsWithField.set(size);\n      }\n      \n      docs.set(size, doc);\n      values.set(size, value.longValue());\n      ++size;\n    }\n\n","sourceOld":"    @Override\n    public void add(int doc, Long value) {\n      assert value != null;\n      // TODO: if the Sorter interface changes to take long indexes, we can remove that limitation\n      if (size == Integer.MAX_VALUE) {\n        throw new IllegalStateException(\"cannot support more than Integer.MAX_VALUE doc/value entries\");\n      }\n\n      // grow the structures to have room for more elements\n      if (docs.size() == size) {\n        docs = docs.grow(size + 1);\n        values = values.grow(size + 1);\n        int numWords = (int) (docs.size() >> 6);\n        if (docsWithField.getBits().length <= numWords) {\n          numWords = ArrayUtil.oversize(numWords + 1, RamUsageEstimator.NUM_BYTES_LONG);\n          docsWithField = new FixedBitSet(docsWithField, numWords << 6);\n        }\n      }\n      \n      if (value != NumericUpdate.MISSING) {\n        // only mark the document as having a value in that field if the value wasn't set to null (MISSING)\n        docsWithField.set(size);\n      }\n      \n      docs.set(size, doc);\n      values.set(size, value.longValue());\n      ++size;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06805da26538ed636bd89b10c2699cc3834032ae","date":1395132972,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/NumericFieldUpdates.PackedNumericFieldUpdates#add(int,Long).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void add(int doc, Long value) {\n      assert value != null;\n      // TODO: if the Sorter interface changes to take long indexes, we can remove that limitation\n      if (size == Integer.MAX_VALUE) {\n        throw new IllegalStateException(\"cannot support more than Integer.MAX_VALUE doc/value entries\");\n      }\n\n      // grow the structures to have room for more elements\n      if (docs.size() == size) {\n        docs = docs.grow(size + 1);\n        values = values.grow(size + 1);\n        docsWithField = FixedBitSet.ensureCapacity(docsWithField, (int) docs.size());\n      }\n      \n      if (value != NumericUpdate.MISSING) {\n        // only mark the document as having a value in that field if the value wasn't set to null (MISSING)\n        docsWithField.set(size);\n      }\n      \n      docs.set(size, doc);\n      values.set(size, value.longValue());\n      ++size;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1bae040fd1d5e03e0d8d695a9c25cf4f402e7ffe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06805da26538ed636bd89b10c2699cc3834032ae":["3995f83351082af8ae83bb017e63c56818fc1568"],"3995f83351082af8ae83bb017e63c56818fc1568":["1bae040fd1d5e03e0d8d695a9c25cf4f402e7ffe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06805da26538ed636bd89b10c2699cc3834032ae"]},"commit2Childs":{"1bae040fd1d5e03e0d8d695a9c25cf4f402e7ffe":["3995f83351082af8ae83bb017e63c56818fc1568"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1bae040fd1d5e03e0d8d695a9c25cf4f402e7ffe"],"06805da26538ed636bd89b10c2699cc3834032ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3995f83351082af8ae83bb017e63c56818fc1568":["06805da26538ed636bd89b10c2699cc3834032ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}