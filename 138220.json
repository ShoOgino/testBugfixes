{"path":"lucene/demo/src/java/org/apache/lucene/demo/facet/simple/SimpleSearcher#searchWithDrillDown(IndexReader,TaxonomyReader).mjava","commits":[{"id":"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc","date":1359570667,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/simple/SimpleSearcher#searchWithDrillDown(IndexReader,TaxonomyReader).mjava","pathOld":"lucene/facet/src/examples/org/apache/lucene/facet/example/simple/SimpleSearcher#searchWithDrillDown(IndexReader,TaxonomyReader).mjava","sourceNew":"  /**\n   * Search an index with facets drill-down.\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithDrillDown(IndexReader indexReader,\n      TaxonomyReader taxoReader) throws Exception {\n\n    final FacetIndexingParams indexingParams = FacetIndexingParams.ALL_PARENTS;\n    \n    // base query the user is interested in\n    Query baseQuery = new TermQuery(new Term(SimpleUtils.TEXT, \"white\"));\n\n    // facet of interest\n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10);\n    \n    // initial search - all docs matching the base query will contribute to the accumulation \n    List<FacetResult> res1 = searchWithRequest(indexReader, taxoReader, indexingParams, facetRequest);\n    \n    // a single result (because there was a single request) \n    FacetResult fres = res1.get(0);\n    \n    // assume the user is interested in the second sub-result\n    // (just take the second sub-result returned by the iterator - we know there are 3 results!)\n    Iterator<? extends FacetResultNode> resIterator = fres.getFacetResultNode().subResults.iterator();\n    resIterator.next(); // skip first result\n    CategoryPath categoryOfInterest = resIterator.next().label;\n    \n    // drill-down preparation: turn the base query into a drill-down query for the category of interest\n    Query q2 = DrillDown.query(indexingParams, baseQuery, Occur.MUST, categoryOfInterest);\n    \n    // that's it - search with the new query and we're done!\n    // only documents both matching the base query AND containing the \n    // category of interest will contribute to the new accumulation\n    return searchWithRequestAndQuery(q2, indexReader, taxoReader, indexingParams, facetRequest);\n  }\n\n","sourceOld":"  /**\n   * Search an index with facets drill-down.\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithDrillDown(IndexReader indexReader,\n      TaxonomyReader taxoReader) throws Exception {\n\n    final FacetIndexingParams indexingParams = FacetIndexingParams.ALL_PARENTS;\n    \n    // base query the user is interested in\n    Query baseQuery = new TermQuery(new Term(SimpleUtils.TEXT, \"white\"));\n\n    // facet of interest\n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10);\n    \n    // initial search - all docs matching the base query will contribute to the accumulation \n    List<FacetResult> res1 = searchWithRequest(indexReader, taxoReader, indexingParams, facetRequest);\n    \n    // a single result (because there was a single request) \n    FacetResult fres = res1.get(0);\n    \n    // assume the user is interested in the second sub-result\n    // (just take the second sub-result returned by the iterator - we know there are 3 results!)\n    Iterator<? extends FacetResultNode> resIterator = fres.getFacetResultNode().subResults.iterator();\n    resIterator.next(); // skip first result\n    CategoryPath categoryOfInterest = resIterator.next().label;\n    \n    // drill-down preparation: turn the base query into a drill-down query for the category of interest\n    Query q2 = DrillDown.query(indexingParams, baseQuery, Occur.MUST, categoryOfInterest);\n    \n    // that's it - search with the new query and we're done!\n    // only documents both matching the base query AND containing the \n    // category of interest will contribute to the new accumulation\n    return searchWithRequestAndQuery(q2, indexReader, taxoReader, indexingParams, facetRequest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d5f95d14e5b9b046998c51e16709a398c15226","date":1359603451,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/simple/SimpleSearcher#searchWithDrillDown(IndexReader,TaxonomyReader).mjava","pathOld":"lucene/facet/src/examples/org/apache/lucene/facet/example/simple/SimpleSearcher#searchWithDrillDown(IndexReader,TaxonomyReader).mjava","sourceNew":"  /**\n   * Search an index with facets drill-down.\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithDrillDown(IndexReader indexReader,\n      TaxonomyReader taxoReader) throws Exception {\n\n    final FacetIndexingParams indexingParams = FacetIndexingParams.ALL_PARENTS;\n    \n    // base query the user is interested in\n    Query baseQuery = new TermQuery(new Term(SimpleUtils.TEXT, \"white\"));\n\n    // facet of interest\n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10);\n    \n    // initial search - all docs matching the base query will contribute to the accumulation \n    List<FacetResult> res1 = searchWithRequest(indexReader, taxoReader, indexingParams, facetRequest);\n    \n    // a single result (because there was a single request) \n    FacetResult fres = res1.get(0);\n    \n    // assume the user is interested in the second sub-result\n    // (just take the second sub-result returned by the iterator - we know there are 3 results!)\n    Iterator<? extends FacetResultNode> resIterator = fres.getFacetResultNode().subResults.iterator();\n    resIterator.next(); // skip first result\n    CategoryPath categoryOfInterest = resIterator.next().label;\n    \n    // drill-down preparation: turn the base query into a drill-down query for the category of interest\n    Query q2 = DrillDown.query(indexingParams, baseQuery, Occur.MUST, categoryOfInterest);\n    \n    // that's it - search with the new query and we're done!\n    // only documents both matching the base query AND containing the \n    // category of interest will contribute to the new accumulation\n    return searchWithRequestAndQuery(q2, indexReader, taxoReader, indexingParams, facetRequest);\n  }\n\n","sourceOld":"  /**\n   * Search an index with facets drill-down.\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithDrillDown(IndexReader indexReader,\n      TaxonomyReader taxoReader) throws Exception {\n\n    final FacetIndexingParams indexingParams = FacetIndexingParams.ALL_PARENTS;\n    \n    // base query the user is interested in\n    Query baseQuery = new TermQuery(new Term(SimpleUtils.TEXT, \"white\"));\n\n    // facet of interest\n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10);\n    \n    // initial search - all docs matching the base query will contribute to the accumulation \n    List<FacetResult> res1 = searchWithRequest(indexReader, taxoReader, indexingParams, facetRequest);\n    \n    // a single result (because there was a single request) \n    FacetResult fres = res1.get(0);\n    \n    // assume the user is interested in the second sub-result\n    // (just take the second sub-result returned by the iterator - we know there are 3 results!)\n    Iterator<? extends FacetResultNode> resIterator = fres.getFacetResultNode().subResults.iterator();\n    resIterator.next(); // skip first result\n    CategoryPath categoryOfInterest = resIterator.next().label;\n    \n    // drill-down preparation: turn the base query into a drill-down query for the category of interest\n    Query q2 = DrillDown.query(indexingParams, baseQuery, Occur.MUST, categoryOfInterest);\n    \n    // that's it - search with the new query and we're done!\n    // only documents both matching the base query AND containing the \n    // category of interest will contribute to the new accumulation\n    return searchWithRequestAndQuery(q2, indexReader, taxoReader, indexingParams, facetRequest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f793470bad5ce8422502e33eaae65fc6a3271bd2","date":1360479442,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/simple/SimpleSearcher#searchWithDrillDown(IndexReader,TaxonomyReader).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/simple/SimpleSearcher#searchWithDrillDown(IndexReader,TaxonomyReader).mjava","sourceNew":"  /**\n   * Search an index with facets drill-down.\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithDrillDown(IndexReader indexReader,\n      TaxonomyReader taxoReader) throws Exception {\n\n    final FacetIndexingParams indexingParams = FacetIndexingParams.ALL_PARENTS;\n    \n    // base query the user is interested in\n    Query baseQuery = new TermQuery(new Term(SimpleUtils.TEXT, \"white\"));\n\n    // facet of interest\n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10);\n    \n    // initial search - all docs matching the base query will contribute to the accumulation \n    List<FacetResult> res1 = searchWithRequest(indexReader, taxoReader, indexingParams, facetRequest);\n    \n    // a single result (because there was a single request) \n    FacetResult fres = res1.get(0);\n    \n    // assume the user is interested in the second sub-result\n    // (just take the second sub-result returned by the iterator - we know there are 3 results!)\n    Iterator<? extends FacetResultNode> resIterator = fres.getFacetResultNode().subResults.iterator();\n    resIterator.next(); // skip first result\n    CategoryPath categoryOfInterest = resIterator.next().label;\n    \n    // drill-down preparation: turn the base query into a drill-down query for the category of interest\n    DrillDownQuery q2 = new DrillDownQuery(indexingParams, baseQuery);\n    q2.add(categoryOfInterest);\n    \n    // that's it - search with the new query and we're done!\n    // only documents both matching the base query AND containing the \n    // category of interest will contribute to the new accumulation\n    return searchWithRequestAndQuery(q2, indexReader, taxoReader, indexingParams, facetRequest);\n  }\n\n","sourceOld":"  /**\n   * Search an index with facets drill-down.\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithDrillDown(IndexReader indexReader,\n      TaxonomyReader taxoReader) throws Exception {\n\n    final FacetIndexingParams indexingParams = FacetIndexingParams.ALL_PARENTS;\n    \n    // base query the user is interested in\n    Query baseQuery = new TermQuery(new Term(SimpleUtils.TEXT, \"white\"));\n\n    // facet of interest\n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10);\n    \n    // initial search - all docs matching the base query will contribute to the accumulation \n    List<FacetResult> res1 = searchWithRequest(indexReader, taxoReader, indexingParams, facetRequest);\n    \n    // a single result (because there was a single request) \n    FacetResult fres = res1.get(0);\n    \n    // assume the user is interested in the second sub-result\n    // (just take the second sub-result returned by the iterator - we know there are 3 results!)\n    Iterator<? extends FacetResultNode> resIterator = fres.getFacetResultNode().subResults.iterator();\n    resIterator.next(); // skip first result\n    CategoryPath categoryOfInterest = resIterator.next().label;\n    \n    // drill-down preparation: turn the base query into a drill-down query for the category of interest\n    Query q2 = DrillDown.query(indexingParams, baseQuery, Occur.MUST, categoryOfInterest);\n    \n    // that's it - search with the new query and we're done!\n    // only documents both matching the base query AND containing the \n    // category of interest will contribute to the new accumulation\n    return searchWithRequestAndQuery(q2, indexReader, taxoReader, indexingParams, facetRequest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31703f98041a9e7086254ed134d8f91c22ac933f","date":1360500940,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/simple/SimpleSearcher#searchWithDrillDown(IndexReader,TaxonomyReader).mjava","sourceNew":null,"sourceOld":"  /**\n   * Search an index with facets drill-down.\n   * @param indexReader index reader.\n   * @param taxoReader taxonomy reader.\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   * @return facet results\n   */\n  public static List<FacetResult> searchWithDrillDown(IndexReader indexReader,\n      TaxonomyReader taxoReader) throws Exception {\n\n    final FacetIndexingParams indexingParams = FacetIndexingParams.ALL_PARENTS;\n    \n    // base query the user is interested in\n    Query baseQuery = new TermQuery(new Term(SimpleUtils.TEXT, \"white\"));\n\n    // facet of interest\n    CountFacetRequest facetRequest = new CountFacetRequest(new CategoryPath(\"root\",\"a\"), 10);\n    \n    // initial search - all docs matching the base query will contribute to the accumulation \n    List<FacetResult> res1 = searchWithRequest(indexReader, taxoReader, indexingParams, facetRequest);\n    \n    // a single result (because there was a single request) \n    FacetResult fres = res1.get(0);\n    \n    // assume the user is interested in the second sub-result\n    // (just take the second sub-result returned by the iterator - we know there are 3 results!)\n    Iterator<? extends FacetResultNode> resIterator = fres.getFacetResultNode().subResults.iterator();\n    resIterator.next(); // skip first result\n    CategoryPath categoryOfInterest = resIterator.next().label;\n    \n    // drill-down preparation: turn the base query into a drill-down query for the category of interest\n    DrillDownQuery q2 = new DrillDownQuery(indexingParams, baseQuery);\n    q2.add(categoryOfInterest);\n    \n    // that's it - search with the new query and we're done!\n    // only documents both matching the base query AND containing the \n    // category of interest will contribute to the new accumulation\n    return searchWithRequestAndQuery(q2, indexReader, taxoReader, indexingParams, facetRequest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"61d5f95d14e5b9b046998c51e16709a398c15226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"],"31703f98041a9e7086254ed134d8f91c22ac933f":["f793470bad5ce8422502e33eaae65fc6a3271bd2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f793470bad5ce8422502e33eaae65fc6a3271bd2":["1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["31703f98041a9e7086254ed134d8f91c22ac933f"]},"commit2Childs":{"61d5f95d14e5b9b046998c51e16709a398c15226":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["61d5f95d14e5b9b046998c51e16709a398c15226","1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc"],"31703f98041a9e7086254ed134d8f91c22ac933f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1289047c4a6e31121c9d3a8f4c7a3fb30179f0fc":["61d5f95d14e5b9b046998c51e16709a398c15226","f793470bad5ce8422502e33eaae65fc6a3271bd2"],"f793470bad5ce8422502e33eaae65fc6a3271bd2":["31703f98041a9e7086254ed134d8f91c22ac933f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["61d5f95d14e5b9b046998c51e16709a398c15226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}