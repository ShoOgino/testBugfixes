{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#writeDocsWithValue(Iterable[Number],long).mjava","commits":[{"id":"e15c57be968dbcac6fd3f87af0bd26a8f023e069","date":1413564565,"type":2,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#writeDocsWithValue(Iterable[Number],long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#addIndirect(FieldInfo,Iterable[Number],int,int).mjava","sourceNew":"  private void writeDocsWithValue(final Iterable<Number> values, long commonValue) throws IOException {\n    data.writeLong(commonValue);\n    data.writeVInt(PackedInts.VERSION_CURRENT);\n    data.writeVInt(BLOCK_SIZE);\n    \n    // write docs with value\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    int doc = 0;\n    for (Number n : values) {\n      long v = n.longValue();\n      if (v != commonValue) {\n        writer.add(doc);\n      }\n      doc++;\n    }\n    writer.finish();\n  }\n\n","sourceOld":"  private void addIndirect(FieldInfo field, final Iterable<Number> values, int count, int missingCount) throws IOException {\n    meta.writeVInt(count - missingCount);\n    meta.writeByte(INDIRECT);\n    meta.writeLong(data.getFilePointer());\n    data.writeVInt(PackedInts.VERSION_CURRENT);\n    data.writeVInt(BLOCK_SIZE);\n    \n    // write docs with value\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    int doc = 0;\n    for (Number n : values) {\n      long v = n.longValue();\n      if (v != 0) {\n        writer.add(doc);\n      }\n      doc++;\n    }\n    writer.finish();\n    \n    // write actual values\n    addNormsField(field, new Iterable<Number>() {\n      @Override\n      public Iterator<Number> iterator() {\n        return new FilterIterator<Number,Number>(values.iterator()) {\n          @Override\n          protected boolean predicateFunction(Number value) {\n            return value.longValue() != 0;\n          }\n        };\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":2,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#writeDocsWithValue(Iterable[Number],long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#addIndirect(FieldInfo,Iterable[Number],int,int).mjava","sourceNew":"  private void writeDocsWithValue(final Iterable<Number> values, long commonValue) throws IOException {\n    data.writeLong(commonValue);\n    data.writeVInt(PackedInts.VERSION_CURRENT);\n    data.writeVInt(BLOCK_SIZE);\n    \n    // write docs with value\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    int doc = 0;\n    for (Number n : values) {\n      long v = n.longValue();\n      if (v != commonValue) {\n        writer.add(doc);\n      }\n      doc++;\n    }\n    writer.finish();\n  }\n\n","sourceOld":"  private void addIndirect(FieldInfo field, final Iterable<Number> values, int count, int missingCount) throws IOException {\n    meta.writeVInt(count - missingCount);\n    meta.writeByte(INDIRECT);\n    meta.writeLong(data.getFilePointer());\n    data.writeVInt(PackedInts.VERSION_CURRENT);\n    data.writeVInt(BLOCK_SIZE);\n    \n    // write docs with value\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    int doc = 0;\n    for (Number n : values) {\n      long v = n.longValue();\n      if (v != 0) {\n        writer.add(doc);\n      }\n      doc++;\n    }\n    writer.finish();\n    \n    // write actual values\n    addNormsField(field, new Iterable<Number>() {\n      @Override\n      public Iterator<Number> iterator() {\n        return new FilterIterator<Number,Number>(values.iterator()) {\n          @Override\n          protected boolean predicateFunction(Number value) {\n            return value.longValue() != 0;\n          }\n        };\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c3fae32338d82a0710e1756793faba13dcb598b","date":1414786590,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#writeDocsWithValue(Iterable[Number],NormMap,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#writeDocsWithValue(Iterable[Number],long).mjava","sourceNew":"  private void writeDocsWithValue(final Iterable<Number> values, NormMap uniqueValues, int minOrd) throws IOException {\n    data.writeLong(uniqueValues.values[minOrd]);\n    data.writeVInt(PackedInts.VERSION_CURRENT);\n    data.writeVInt(BLOCK_SIZE);\n    \n    // write docs with value\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    int doc = 0;\n    for (Number n : values) {\n      int ord = uniqueValues.ord(n.byteValue());\n      if (ord > minOrd) {\n        writer.add(doc);\n      }\n      doc++;\n    }\n    writer.finish();\n  }\n\n","sourceOld":"  private void writeDocsWithValue(final Iterable<Number> values, long commonValue) throws IOException {\n    data.writeLong(commonValue);\n    data.writeVInt(PackedInts.VERSION_CURRENT);\n    data.writeVInt(BLOCK_SIZE);\n    \n    // write docs with value\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    int doc = 0;\n    for (Number n : values) {\n      long v = n.longValue();\n      if (v != commonValue) {\n        writer.add(doc);\n      }\n      doc++;\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0c3fae32338d82a0710e1756793faba13dcb598b":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"e15c57be968dbcac6fd3f87af0bd26a8f023e069":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e15c57be968dbcac6fd3f87af0bd26a8f023e069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0c3fae32338d82a0710e1756793faba13dcb598b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e15c57be968dbcac6fd3f87af0bd26a8f023e069","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"0c3fae32338d82a0710e1756793faba13dcb598b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e15c57be968dbcac6fd3f87af0bd26a8f023e069":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["0c3fae32338d82a0710e1756793faba13dcb598b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}