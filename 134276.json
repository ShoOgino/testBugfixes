{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetTest#countTest().mjava","commits":[{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetTest#countTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetTest#countTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void countTest() throws Exception { \n    //Int Date\n    Collection<Long> intDate = getLongList(\"countn\", \"fieldFacets\", \"date_dtd\", \"long\", \"int\");\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateStat(intDateTestStart, \"count\");\n    assertEquals(getRawResponse(),intDate,intDateTest);\n    \n    //Int String\n    Collection<Long> intString = getLongList(\"countn\", \"fieldFacets\", \"string_sd\", \"long\", \"int\");\n    ArrayList<Long> intStringTest = (ArrayList<Long>)calculateStat(intStringTestStart, \"count\");\n    assertEquals(getRawResponse(),intString,intStringTest);\n\n    //Long Date\n    Collection<Long> longDate = getLongList(\"countn\", \"fieldFacets\", \"date_dtd\", \"long\", \"long\");\n    ArrayList<Long> longDateTest = (ArrayList<Long>)calculateStat(longDateTestStart, \"count\");\n    assertEquals(getRawResponse(),longDate,longDateTest);\n    \n    //Long String\n    Collection<Long> longString = getLongList(\"countn\", \"fieldFacets\", \"string_sd\", \"long\", \"long\");\n    ArrayList<Long> longStringTest = (ArrayList<Long>)calculateStat(longStringTestStart, \"count\");\n    assertEquals(getRawResponse(),longString,longStringTest);\n\n    //Float Date\n    Collection<Long> floatDate = getLongList(\"countn\", \"fieldFacets\", \"date_dtd\", \"long\", \"float\");\n    ArrayList<Long> floatDateTest = (ArrayList<Long>)calculateStat(floatDateTestStart, \"count\");\n    assertEquals(getRawResponse(),floatDate,floatDateTest);\n    \n    //Float String\n    Collection<Long> floatString = getLongList(\"countn\", \"fieldFacets\", \"string_sd\", \"long\", \"float\");\n    ArrayList<Long> floatStringTest = (ArrayList<Long>)calculateStat(floatStringTestStart, \"count\");\n    assertEquals(getRawResponse(),floatString,floatStringTest);\n\n    //Double Date\n    Collection<Long> doubleDate = getLongList(\"countn\", \"fieldFacets\", \"date_dtd\", \"long\", \"double\");\n    ArrayList<Long> doubleDateTest = (ArrayList<Long>)calculateStat(doubleDateTestStart, \"count\");\n    assertEquals(getRawResponse(),doubleDate,doubleDateTest);\n    \n    //Double String\n    Collection<Long> doubleString = getLongList(\"countn\", \"fieldFacets\", \"string_sd\", \"long\", \"double\");\n    ArrayList<Long> doubleStringTest = (ArrayList<Long>)calculateStat(doubleStringTestStart, \"count\");\n    assertEquals(getRawResponse(),doubleString,doubleStringTest);\n\n    //Date Int\n    Collection<Long> dateInt = getLongList(\"count\", \"fieldFacets\", \"int_id\", \"long\", \"date\");\n    ArrayList<Long> dateIntTest = (ArrayList<Long>)calculateStat(dateIntTestStart, \"count\");\n    assertEquals(getRawResponse(),dateIntTest,dateInt);\n    \n    //Date Long\n    Collection<Long> dateLong = getLongList(\"count\", \"fieldFacets\", \"long_ld\", \"long\", \"date\");\n    ArrayList<Long> dateLongTest = (ArrayList<Long>)calculateStat(dateLongTestStart, \"count\");\n    assertEquals(getRawResponse(),dateLong,dateLongTest);\n\n    //String Int\n    Collection<Long> stringInt = getLongList(\"count\", \"fieldFacets\", \"int_id\", \"long\", \"str\");\n    ArrayList<Long> stringIntTest = (ArrayList<Long>)calculateStat(stringIntTestStart, \"count\");\n    assertEquals(getRawResponse(),stringInt,stringIntTest);\n    \n    //String Long\n    Collection<Long> stringLong = getLongList(\"count\", \"fieldFacets\", \"long_ld\", \"long\", \"str\");\n    ArrayList<Long> stringLongTest = (ArrayList<Long>)calculateStat(stringLongTestStart, \"count\");\n    assertEquals(getRawResponse(),stringLong,stringLongTest);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void countTest() throws Exception { \n    //Int Date\n    Collection<Long> intDate = getLongList(\"countn\", \"fieldFacets\", \"date_dtd\", \"long\", \"int\");\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateStat(intDateTestStart, \"count\");\n    assertEquals(getRawResponse(),intDate,intDateTest);\n    \n    //Int String\n    Collection<Long> intString = getLongList(\"countn\", \"fieldFacets\", \"string_sd\", \"long\", \"int\");\n    ArrayList<Long> intStringTest = (ArrayList<Long>)calculateStat(intStringTestStart, \"count\");\n    assertEquals(getRawResponse(),intString,intStringTest);\n\n    //Long Date\n    Collection<Long> longDate = getLongList(\"countn\", \"fieldFacets\", \"date_dtd\", \"long\", \"long\");\n    ArrayList<Long> longDateTest = (ArrayList<Long>)calculateStat(longDateTestStart, \"count\");\n    assertEquals(getRawResponse(),longDate,longDateTest);\n    \n    //Long String\n    Collection<Long> longString = getLongList(\"countn\", \"fieldFacets\", \"string_sd\", \"long\", \"long\");\n    ArrayList<Long> longStringTest = (ArrayList<Long>)calculateStat(longStringTestStart, \"count\");\n    assertEquals(getRawResponse(),longString,longStringTest);\n\n    //Float Date\n    Collection<Long> floatDate = getLongList(\"countn\", \"fieldFacets\", \"date_dtd\", \"long\", \"float\");\n    ArrayList<Long> floatDateTest = (ArrayList<Long>)calculateStat(floatDateTestStart, \"count\");\n    assertEquals(getRawResponse(),floatDate,floatDateTest);\n    \n    //Float String\n    Collection<Long> floatString = getLongList(\"countn\", \"fieldFacets\", \"string_sd\", \"long\", \"float\");\n    ArrayList<Long> floatStringTest = (ArrayList<Long>)calculateStat(floatStringTestStart, \"count\");\n    assertEquals(getRawResponse(),floatString,floatStringTest);\n\n    //Double Date\n    Collection<Long> doubleDate = getLongList(\"countn\", \"fieldFacets\", \"date_dtd\", \"long\", \"double\");\n    ArrayList<Long> doubleDateTest = (ArrayList<Long>)calculateStat(doubleDateTestStart, \"count\");\n    assertEquals(getRawResponse(),doubleDate,doubleDateTest);\n    \n    //Double String\n    Collection<Long> doubleString = getLongList(\"countn\", \"fieldFacets\", \"string_sd\", \"long\", \"double\");\n    ArrayList<Long> doubleStringTest = (ArrayList<Long>)calculateStat(doubleStringTestStart, \"count\");\n    assertEquals(getRawResponse(),doubleString,doubleStringTest);\n\n    //Date Int\n    Collection<Long> dateInt = getLongList(\"count\", \"fieldFacets\", \"int_id\", \"long\", \"date\");\n    ArrayList<Long> dateIntTest = (ArrayList<Long>)calculateStat(dateIntTestStart, \"count\");\n    assertEquals(getRawResponse(),dateIntTest,dateInt);\n    \n    //Date Long\n    Collection<Long> dateLong = getLongList(\"count\", \"fieldFacets\", \"long_ld\", \"long\", \"date\");\n    ArrayList<Long> dateLongTest = (ArrayList<Long>)calculateStat(dateLongTestStart, \"count\");\n    assertEquals(getRawResponse(),dateLong,dateLongTest);\n\n    //String Int\n    Collection<Long> stringInt = getLongList(\"count\", \"fieldFacets\", \"int_id\", \"long\", \"str\");\n    ArrayList<Long> stringIntTest = (ArrayList<Long>)calculateStat(stringIntTestStart, \"count\");\n    assertEquals(getRawResponse(),stringInt,stringIntTest);\n    \n    //String Long\n    Collection<Long> stringLong = getLongList(\"count\", \"fieldFacets\", \"long_ld\", \"long\", \"str\");\n    ArrayList<Long> stringLongTest = (ArrayList<Long>)calculateStat(stringLongTestStart, \"count\");\n    assertEquals(getRawResponse(),stringLong,stringLongTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":5,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetTest#countTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetTest#countTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void countTest() throws Exception { \n    //Int Date\n    Collection<Long> intDate = getLongList(\"countn\", \"fieldFacets\", \"date_dtd\", \"long\", \"int\");\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateStat(intDateTestStart, \"count\");\n    assertEquals(getRawResponse(),intDate,intDateTest);\n    \n    //Int String\n    Collection<Long> intString = getLongList(\"countn\", \"fieldFacets\", \"string_sd\", \"long\", \"int\");\n    ArrayList<Long> intStringTest = (ArrayList<Long>)calculateStat(intStringTestStart, \"count\");\n    assertEquals(getRawResponse(),intString,intStringTest);\n\n    //Long Date\n    Collection<Long> longDate = getLongList(\"countn\", \"fieldFacets\", \"date_dtd\", \"long\", \"long\");\n    ArrayList<Long> longDateTest = (ArrayList<Long>)calculateStat(longDateTestStart, \"count\");\n    assertEquals(getRawResponse(),longDate,longDateTest);\n    \n    //Long String\n    Collection<Long> longString = getLongList(\"countn\", \"fieldFacets\", \"string_sd\", \"long\", \"long\");\n    ArrayList<Long> longStringTest = (ArrayList<Long>)calculateStat(longStringTestStart, \"count\");\n    assertEquals(getRawResponse(),longString,longStringTest);\n\n    //Float Date\n    Collection<Long> floatDate = getLongList(\"countn\", \"fieldFacets\", \"date_dtd\", \"long\", \"float\");\n    ArrayList<Long> floatDateTest = (ArrayList<Long>)calculateStat(floatDateTestStart, \"count\");\n    assertEquals(getRawResponse(),floatDate,floatDateTest);\n    \n    //Float String\n    Collection<Long> floatString = getLongList(\"countn\", \"fieldFacets\", \"string_sd\", \"long\", \"float\");\n    ArrayList<Long> floatStringTest = (ArrayList<Long>)calculateStat(floatStringTestStart, \"count\");\n    assertEquals(getRawResponse(),floatString,floatStringTest);\n\n    //Double Date\n    Collection<Long> doubleDate = getLongList(\"countn\", \"fieldFacets\", \"date_dtd\", \"long\", \"double\");\n    ArrayList<Long> doubleDateTest = (ArrayList<Long>)calculateStat(doubleDateTestStart, \"count\");\n    assertEquals(getRawResponse(),doubleDate,doubleDateTest);\n    \n    //Double String\n    Collection<Long> doubleString = getLongList(\"countn\", \"fieldFacets\", \"string_sd\", \"long\", \"double\");\n    ArrayList<Long> doubleStringTest = (ArrayList<Long>)calculateStat(doubleStringTestStart, \"count\");\n    assertEquals(getRawResponse(),doubleString,doubleStringTest);\n\n    //Date Int\n    Collection<Long> dateInt = getLongList(\"count\", \"fieldFacets\", \"int_id\", \"long\", \"date\");\n    ArrayList<Long> dateIntTest = (ArrayList<Long>)calculateStat(dateIntTestStart, \"count\");\n    assertEquals(getRawResponse(),dateIntTest,dateInt);\n    \n    //Date Long\n    Collection<Long> dateLong = getLongList(\"count\", \"fieldFacets\", \"long_ld\", \"long\", \"date\");\n    ArrayList<Long> dateLongTest = (ArrayList<Long>)calculateStat(dateLongTestStart, \"count\");\n    assertEquals(getRawResponse(),dateLong,dateLongTest);\n\n    //String Int\n    Collection<Long> stringInt = getLongList(\"count\", \"fieldFacets\", \"int_id\", \"long\", \"str\");\n    ArrayList<Long> stringIntTest = (ArrayList<Long>)calculateStat(stringIntTestStart, \"count\");\n    assertEquals(getRawResponse(),stringInt,stringIntTest);\n    \n    //String Long\n    Collection<Long> stringLong = getLongList(\"count\", \"fieldFacets\", \"long_ld\", \"long\", \"str\");\n    ArrayList<Long> stringLongTest = (ArrayList<Long>)calculateStat(stringLongTestStart, \"count\");\n    assertEquals(getRawResponse(),stringLong,stringLongTest);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void countTest() throws Exception { \n    //Int Date\n    Collection<Long> intDate = getLongList(\"countn\", \"fieldFacets\", \"date_dtd\", \"long\", \"int\");\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateStat(intDateTestStart, \"count\");\n    assertEquals(getRawResponse(),intDate,intDateTest);\n    \n    //Int String\n    Collection<Long> intString = getLongList(\"countn\", \"fieldFacets\", \"string_sd\", \"long\", \"int\");\n    ArrayList<Long> intStringTest = (ArrayList<Long>)calculateStat(intStringTestStart, \"count\");\n    assertEquals(getRawResponse(),intString,intStringTest);\n\n    //Long Date\n    Collection<Long> longDate = getLongList(\"countn\", \"fieldFacets\", \"date_dtd\", \"long\", \"long\");\n    ArrayList<Long> longDateTest = (ArrayList<Long>)calculateStat(longDateTestStart, \"count\");\n    assertEquals(getRawResponse(),longDate,longDateTest);\n    \n    //Long String\n    Collection<Long> longString = getLongList(\"countn\", \"fieldFacets\", \"string_sd\", \"long\", \"long\");\n    ArrayList<Long> longStringTest = (ArrayList<Long>)calculateStat(longStringTestStart, \"count\");\n    assertEquals(getRawResponse(),longString,longStringTest);\n\n    //Float Date\n    Collection<Long> floatDate = getLongList(\"countn\", \"fieldFacets\", \"date_dtd\", \"long\", \"float\");\n    ArrayList<Long> floatDateTest = (ArrayList<Long>)calculateStat(floatDateTestStart, \"count\");\n    assertEquals(getRawResponse(),floatDate,floatDateTest);\n    \n    //Float String\n    Collection<Long> floatString = getLongList(\"countn\", \"fieldFacets\", \"string_sd\", \"long\", \"float\");\n    ArrayList<Long> floatStringTest = (ArrayList<Long>)calculateStat(floatStringTestStart, \"count\");\n    assertEquals(getRawResponse(),floatString,floatStringTest);\n\n    //Double Date\n    Collection<Long> doubleDate = getLongList(\"countn\", \"fieldFacets\", \"date_dtd\", \"long\", \"double\");\n    ArrayList<Long> doubleDateTest = (ArrayList<Long>)calculateStat(doubleDateTestStart, \"count\");\n    assertEquals(getRawResponse(),doubleDate,doubleDateTest);\n    \n    //Double String\n    Collection<Long> doubleString = getLongList(\"countn\", \"fieldFacets\", \"string_sd\", \"long\", \"double\");\n    ArrayList<Long> doubleStringTest = (ArrayList<Long>)calculateStat(doubleStringTestStart, \"count\");\n    assertEquals(getRawResponse(),doubleString,doubleStringTest);\n\n    //Date Int\n    Collection<Long> dateInt = getLongList(\"count\", \"fieldFacets\", \"int_id\", \"long\", \"date\");\n    ArrayList<Long> dateIntTest = (ArrayList<Long>)calculateStat(dateIntTestStart, \"count\");\n    assertEquals(getRawResponse(),dateIntTest,dateInt);\n    \n    //Date Long\n    Collection<Long> dateLong = getLongList(\"count\", \"fieldFacets\", \"long_ld\", \"long\", \"date\");\n    ArrayList<Long> dateLongTest = (ArrayList<Long>)calculateStat(dateLongTestStart, \"count\");\n    assertEquals(getRawResponse(),dateLong,dateLongTest);\n\n    //String Int\n    Collection<Long> stringInt = getLongList(\"count\", \"fieldFacets\", \"int_id\", \"long\", \"str\");\n    ArrayList<Long> stringIntTest = (ArrayList<Long>)calculateStat(stringIntTestStart, \"count\");\n    assertEquals(getRawResponse(),stringInt,stringIntTest);\n    \n    //String Long\n    Collection<Long> stringLong = getLongList(\"count\", \"fieldFacets\", \"long_ld\", \"long\", \"str\");\n    ArrayList<Long> stringLongTest = (ArrayList<Long>)calculateStat(stringLongTestStart, \"count\");\n    assertEquals(getRawResponse(),stringLong,stringLongTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["0f719faa74f7213d4a395510dbc1f1b7cb178484"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}