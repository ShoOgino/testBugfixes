{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,int,ZkClientConnectionStrategy,OnReconnect,BeforeReconnect).mjava","commits":[{"id":"9e6c873b95174ff04c895232927baa76a95925eb","date":1385054916,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,int,ZkClientConnectionStrategy,OnReconnect,BeforeReconnect).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,ZkClientConnectionStrategy,OnReconnect,int).mjava","sourceNew":"  public SolrZkClient(String zkServerAddress, int zkClientTimeout, int clientConnectTimeout, \n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, BeforeReconnect beforeReconnect) {\n    this.zkClientConnectionStrategy = strat;\n    this.zkClientTimeout = zkClientTimeout;\n    // we must retry at least as long as the session timeout\n    zkCmdExecutor = new ZkCmdExecutor(zkClientTimeout);\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect, beforeReconnect);\n    try {\n      strat.connect(zkServerAddress, zkClientTimeout, connManager,\n          new ZkUpdate() {\n            @Override\n            public void update(SolrZooKeeper zooKeeper) {\n              SolrZooKeeper oldKeeper = keeper;\n              keeper = zooKeeper;\n              try {\n                closeKeeper(oldKeeper);\n              } finally {\n                if (isClosed) {\n                  // we may have been closed\n                  closeKeeper(SolrZkClient.this.keeper);\n                }\n              }\n            }\n          });\n    } catch (Throwable e) {\n      connManager.close();\n      if (keeper != null) {\n        try {\n          keeper.close();\n        } catch (InterruptedException e1) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      throw new RuntimeException(e);\n    }\n    \n    try {\n      connManager.waitForConnected(clientConnectTimeout);\n    } catch (Throwable e) {\n      connManager.close();\n      try {\n        keeper.close();\n      } catch (InterruptedException e1) {\n        Thread.currentThread().interrupt();\n      }\n      throw new RuntimeException(e);\n    }\n    numOpens.incrementAndGet();\n  }\n\n","sourceOld":"  public SolrZkClient(String zkServerAddress, int zkClientTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, int clientConnectTimeout) {\n    this.zkClientConnectionStrategy = strat;\n    this.zkClientTimeout = zkClientTimeout;\n    // we must retry at least as long as the session timeout\n    zkCmdExecutor = new ZkCmdExecutor(zkClientTimeout);\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect);\n    try {\n      strat.connect(zkServerAddress, zkClientTimeout, connManager,\n          new ZkUpdate() {\n            @Override\n            public void update(SolrZooKeeper zooKeeper) {\n              SolrZooKeeper oldKeeper = keeper;\n              keeper = zooKeeper;\n              try {\n                closeKeeper(oldKeeper);\n              } finally {\n                if (isClosed) {\n                  // we may have been closed\n                  closeKeeper(SolrZkClient.this.keeper);\n                }\n              }\n            }\n          });\n    } catch (Throwable e) {\n      connManager.close();\n      if (keeper != null) {\n        try {\n          keeper.close();\n        } catch (InterruptedException e1) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      throw new RuntimeException(e);\n    }\n    \n    try {\n      connManager.waitForConnected(clientConnectTimeout);\n    } catch (Throwable e) {\n      connManager.close();\n      try {\n        keeper.close();\n      } catch (InterruptedException e1) {\n        Thread.currentThread().interrupt();\n      }\n      throw new RuntimeException(e);\n    }\n    numOpens.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,int,ZkClientConnectionStrategy,OnReconnect,BeforeReconnect).mjava","pathOld":"/dev/null","sourceNew":"  public SolrZkClient(String zkServerAddress, int zkClientTimeout, int clientConnectTimeout, \n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, BeforeReconnect beforeReconnect) {\n    this.zkClientConnectionStrategy = strat;\n    this.zkClientTimeout = zkClientTimeout;\n    // we must retry at least as long as the session timeout\n    zkCmdExecutor = new ZkCmdExecutor(zkClientTimeout);\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect, beforeReconnect);\n    try {\n      strat.connect(zkServerAddress, zkClientTimeout, connManager,\n          new ZkUpdate() {\n            @Override\n            public void update(SolrZooKeeper zooKeeper) {\n              SolrZooKeeper oldKeeper = keeper;\n              keeper = zooKeeper;\n              try {\n                closeKeeper(oldKeeper);\n              } finally {\n                if (isClosed) {\n                  // we may have been closed\n                  closeKeeper(SolrZkClient.this.keeper);\n                }\n              }\n            }\n          });\n    } catch (Throwable e) {\n      connManager.close();\n      if (keeper != null) {\n        try {\n          keeper.close();\n        } catch (InterruptedException e1) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      throw new RuntimeException(e);\n    }\n    \n    try {\n      connManager.waitForConnected(clientConnectTimeout);\n    } catch (Throwable e) {\n      connManager.close();\n      try {\n        keeper.close();\n      } catch (InterruptedException e1) {\n        Thread.currentThread().interrupt();\n      }\n      throw new RuntimeException(e);\n    }\n    numOpens.incrementAndGet();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b85d2aa862c6ff17c9930e80591ab781c0b87579","date":1388263753,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,int,ZkClientConnectionStrategy,OnReconnect,BeforeReconnect).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,int,ZkClientConnectionStrategy,OnReconnect,BeforeReconnect).mjava","sourceNew":"  public SolrZkClient(String zkServerAddress, int zkClientTimeout, int clientConnectTimeout, \n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, BeforeReconnect beforeReconnect) {\n    this.zkClientConnectionStrategy = strat;\n    this.zkClientTimeout = zkClientTimeout;\n    // we must retry at least as long as the session timeout\n    zkCmdExecutor = new ZkCmdExecutor(zkClientTimeout);\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, strat, onReconnect, beforeReconnect);\n    try {\n      strat.connect(zkServerAddress, zkClientTimeout, connManager,\n          new ZkUpdate() {\n            @Override\n            public void update(SolrZooKeeper zooKeeper) {\n              SolrZooKeeper oldKeeper = keeper;\n              keeper = zooKeeper;\n              try {\n                closeKeeper(oldKeeper);\n              } finally {\n                if (isClosed) {\n                  // we may have been closed\n                  closeKeeper(SolrZkClient.this.keeper);\n                }\n              }\n            }\n          });\n    } catch (Throwable e) {\n      connManager.close();\n      if (keeper != null) {\n        try {\n          keeper.close();\n        } catch (InterruptedException e1) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      throw new RuntimeException(e);\n    }\n    \n    try {\n      connManager.waitForConnected(clientConnectTimeout);\n    } catch (Throwable e) {\n      connManager.close();\n      try {\n        keeper.close();\n      } catch (InterruptedException e1) {\n        Thread.currentThread().interrupt();\n      }\n      throw new RuntimeException(e);\n    }\n    numOpens.incrementAndGet();\n  }\n\n","sourceOld":"  public SolrZkClient(String zkServerAddress, int zkClientTimeout, int clientConnectTimeout, \n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, BeforeReconnect beforeReconnect) {\n    this.zkClientConnectionStrategy = strat;\n    this.zkClientTimeout = zkClientTimeout;\n    // we must retry at least as long as the session timeout\n    zkCmdExecutor = new ZkCmdExecutor(zkClientTimeout);\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, zkClientTimeout, strat, onReconnect, beforeReconnect);\n    try {\n      strat.connect(zkServerAddress, zkClientTimeout, connManager,\n          new ZkUpdate() {\n            @Override\n            public void update(SolrZooKeeper zooKeeper) {\n              SolrZooKeeper oldKeeper = keeper;\n              keeper = zooKeeper;\n              try {\n                closeKeeper(oldKeeper);\n              } finally {\n                if (isClosed) {\n                  // we may have been closed\n                  closeKeeper(SolrZkClient.this.keeper);\n                }\n              }\n            }\n          });\n    } catch (Throwable e) {\n      connManager.close();\n      if (keeper != null) {\n        try {\n          keeper.close();\n        } catch (InterruptedException e1) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      throw new RuntimeException(e);\n    }\n    \n    try {\n      connManager.waitForConnected(clientConnectTimeout);\n    } catch (Throwable e) {\n      connManager.close();\n      try {\n        keeper.close();\n      } catch (InterruptedException e1) {\n        Thread.currentThread().interrupt();\n      }\n      throw new RuntimeException(e);\n    }\n    numOpens.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","date":1389633998,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,int,ZkClientConnectionStrategy,OnReconnect,BeforeReconnect).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,int,ZkClientConnectionStrategy,OnReconnect,BeforeReconnect).mjava","sourceNew":"  public SolrZkClient(String zkServerAddress, int zkClientTimeout, int clientConnectTimeout, \n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, BeforeReconnect beforeReconnect) {\n    this.zkClientConnectionStrategy = strat;\n    this.zkClientTimeout = zkClientTimeout;\n    // we must retry at least as long as the session timeout\n    zkCmdExecutor = new ZkCmdExecutor(zkClientTimeout);\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, strat, onReconnect, beforeReconnect);\n    try {\n      strat.connect(zkServerAddress, zkClientTimeout, connManager,\n          new ZkUpdate() {\n            @Override\n            public void update(SolrZooKeeper zooKeeper) {\n              SolrZooKeeper oldKeeper = keeper;\n              keeper = zooKeeper;\n              try {\n                closeKeeper(oldKeeper);\n              } finally {\n                if (isClosed) {\n                  // we may have been closed\n                  closeKeeper(SolrZkClient.this.keeper);\n                }\n              }\n            }\n          });\n    } catch (Exception e) {\n      connManager.close();\n      if (keeper != null) {\n        try {\n          keeper.close();\n        } catch (InterruptedException e1) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      throw new RuntimeException(e);\n    }\n    \n    try {\n      connManager.waitForConnected(clientConnectTimeout);\n    } catch (Exception e) {\n      connManager.close();\n      try {\n        keeper.close();\n      } catch (InterruptedException e1) {\n        Thread.currentThread().interrupt();\n      }\n      throw new RuntimeException(e);\n    }\n    numOpens.incrementAndGet();\n  }\n\n","sourceOld":"  public SolrZkClient(String zkServerAddress, int zkClientTimeout, int clientConnectTimeout, \n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, BeforeReconnect beforeReconnect) {\n    this.zkClientConnectionStrategy = strat;\n    this.zkClientTimeout = zkClientTimeout;\n    // we must retry at least as long as the session timeout\n    zkCmdExecutor = new ZkCmdExecutor(zkClientTimeout);\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, strat, onReconnect, beforeReconnect);\n    try {\n      strat.connect(zkServerAddress, zkClientTimeout, connManager,\n          new ZkUpdate() {\n            @Override\n            public void update(SolrZooKeeper zooKeeper) {\n              SolrZooKeeper oldKeeper = keeper;\n              keeper = zooKeeper;\n              try {\n                closeKeeper(oldKeeper);\n              } finally {\n                if (isClosed) {\n                  // we may have been closed\n                  closeKeeper(SolrZkClient.this.keeper);\n                }\n              }\n            }\n          });\n    } catch (Throwable e) {\n      connManager.close();\n      if (keeper != null) {\n        try {\n          keeper.close();\n        } catch (InterruptedException e1) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      throw new RuntimeException(e);\n    }\n    \n    try {\n      connManager.waitForConnected(clientConnectTimeout);\n    } catch (Throwable e) {\n      connManager.close();\n      try {\n        keeper.close();\n      } catch (InterruptedException e1) {\n        Thread.currentThread().interrupt();\n      }\n      throw new RuntimeException(e);\n    }\n    numOpens.incrementAndGet();\n  }\n\n","bugFix":["6013b4c7388f1627659c8f96c44abd10a294d3a6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44e7a433bcde006012d6f8cd8a1db402bd9da2b7","date":1391655696,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,int,ZkClientConnectionStrategy,OnReconnect,BeforeReconnect).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,int,ZkClientConnectionStrategy,OnReconnect,BeforeReconnect).mjava","sourceNew":"  public SolrZkClient(String zkServerAddress, int zkClientTimeout, int clientConnectTimeout, \n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, BeforeReconnect beforeReconnect) {\n    this.zkClientConnectionStrategy = strat;\n    this.zkClientTimeout = zkClientTimeout;\n    // we must retry at least as long as the session timeout\n    zkCmdExecutor = new ZkCmdExecutor(zkClientTimeout);\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, strat, onReconnect, beforeReconnect);\n    try {\n      strat.connect(zkServerAddress, zkClientTimeout, connManager,\n          new ZkUpdate() {\n            @Override\n            public void update(SolrZooKeeper zooKeeper) {\n              SolrZooKeeper oldKeeper = keeper;\n              keeper = zooKeeper;\n              try {\n                closeKeeper(oldKeeper);\n              } finally {\n                if (isClosed) {\n                  // we may have been closed\n                  closeKeeper(SolrZkClient.this.keeper);\n                }\n              }\n            }\n          });\n    } catch (Exception e) {\n      connManager.close();\n      if (keeper != null) {\n        try {\n          keeper.close();\n        } catch (InterruptedException e1) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n    \n    try {\n      connManager.waitForConnected(clientConnectTimeout);\n    } catch (Exception e) {\n      connManager.close();\n      try {\n        keeper.close();\n      } catch (InterruptedException e1) {\n        Thread.currentThread().interrupt();\n      }\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n    numOpens.incrementAndGet();\n  }\n\n","sourceOld":"  public SolrZkClient(String zkServerAddress, int zkClientTimeout, int clientConnectTimeout, \n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, BeforeReconnect beforeReconnect) {\n    this.zkClientConnectionStrategy = strat;\n    this.zkClientTimeout = zkClientTimeout;\n    // we must retry at least as long as the session timeout\n    zkCmdExecutor = new ZkCmdExecutor(zkClientTimeout);\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, strat, onReconnect, beforeReconnect);\n    try {\n      strat.connect(zkServerAddress, zkClientTimeout, connManager,\n          new ZkUpdate() {\n            @Override\n            public void update(SolrZooKeeper zooKeeper) {\n              SolrZooKeeper oldKeeper = keeper;\n              keeper = zooKeeper;\n              try {\n                closeKeeper(oldKeeper);\n              } finally {\n                if (isClosed) {\n                  // we may have been closed\n                  closeKeeper(SolrZkClient.this.keeper);\n                }\n              }\n            }\n          });\n    } catch (Exception e) {\n      connManager.close();\n      if (keeper != null) {\n        try {\n          keeper.close();\n        } catch (InterruptedException e1) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      throw new RuntimeException(e);\n    }\n    \n    try {\n      connManager.waitForConnected(clientConnectTimeout);\n    } catch (Exception e) {\n      connManager.close();\n      try {\n        keeper.close();\n      } catch (InterruptedException e1) {\n        Thread.currentThread().interrupt();\n      }\n      throw new RuntimeException(e);\n    }\n    numOpens.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c83f985d9828d30801541f1eed26aa3169646baf","date":1409315453,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,int,ZkClientConnectionStrategy,OnReconnect,BeforeReconnect).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,int,ZkClientConnectionStrategy,OnReconnect,BeforeReconnect).mjava","sourceNew":"  public SolrZkClient(String zkServerAddress, int zkClientTimeout, int clientConnectTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, BeforeReconnect beforeReconnect) {\n    this(zkServerAddress, zkClientTimeout, clientConnectTimeout, strat, onReconnect, beforeReconnect, null);\n  }\n\n","sourceOld":"  public SolrZkClient(String zkServerAddress, int zkClientTimeout, int clientConnectTimeout, \n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, BeforeReconnect beforeReconnect) {\n    this.zkClientConnectionStrategy = strat;\n    this.zkClientTimeout = zkClientTimeout;\n    // we must retry at least as long as the session timeout\n    zkCmdExecutor = new ZkCmdExecutor(zkClientTimeout);\n    connManager = new ConnectionManager(\"ZooKeeperConnection Watcher:\"\n        + zkServerAddress, this, zkServerAddress, strat, onReconnect, beforeReconnect);\n    try {\n      strat.connect(zkServerAddress, zkClientTimeout, connManager,\n          new ZkUpdate() {\n            @Override\n            public void update(SolrZooKeeper zooKeeper) {\n              SolrZooKeeper oldKeeper = keeper;\n              keeper = zooKeeper;\n              try {\n                closeKeeper(oldKeeper);\n              } finally {\n                if (isClosed) {\n                  // we may have been closed\n                  closeKeeper(SolrZkClient.this.keeper);\n                }\n              }\n            }\n          });\n    } catch (Exception e) {\n      connManager.close();\n      if (keeper != null) {\n        try {\n          keeper.close();\n        } catch (InterruptedException e1) {\n          Thread.currentThread().interrupt();\n        }\n      }\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n    \n    try {\n      connManager.waitForConnected(clientConnectTimeout);\n    } catch (Exception e) {\n      connManager.close();\n      try {\n        keeper.close();\n      } catch (InterruptedException e1) {\n        Thread.currentThread().interrupt();\n      }\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n    numOpens.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,int,ZkClientConnectionStrategy,OnReconnect,BeforeReconnect).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#SolrZkClient(String,int,int,ZkClientConnectionStrategy,OnReconnect,BeforeReconnect).mjava","sourceNew":"  public SolrZkClient(String zkServerAddress, int zkClientTimeout, int clientConnectTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, BeforeReconnect beforeReconnect) {\n    this(zkServerAddress, zkClientTimeout, clientConnectTimeout, strat, onReconnect, beforeReconnect, null, null);\n  }\n\n","sourceOld":"  public SolrZkClient(String zkServerAddress, int zkClientTimeout, int clientConnectTimeout,\n      ZkClientConnectionStrategy strat, final OnReconnect onReconnect, BeforeReconnect beforeReconnect) {\n    this(zkServerAddress, zkClientTimeout, clientConnectTimeout, strat, onReconnect, beforeReconnect, null);\n  }\n\n","bugFix":["c83f985d9828d30801541f1eed26aa3169646baf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["c83f985d9828d30801541f1eed26aa3169646baf"],"9e6c873b95174ff04c895232927baa76a95925eb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b85d2aa862c6ff17c9930e80591ab781c0b87579":["9e6c873b95174ff04c895232927baa76a95925eb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9e6c873b95174ff04c895232927baa76a95925eb"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["b85d2aa862c6ff17c9930e80591ab781c0b87579"],"c83f985d9828d30801541f1eed26aa3169646baf":["44e7a433bcde006012d6f8cd8a1db402bd9da2b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"44e7a433bcde006012d6f8cd8a1db402bd9da2b7":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9e6c873b95174ff04c895232927baa76a95925eb":["b85d2aa862c6ff17c9930e80591ab781c0b87579","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"b85d2aa862c6ff17c9930e80591ab781c0b87579":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9e6c873b95174ff04c895232927baa76a95925eb","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["44e7a433bcde006012d6f8cd8a1db402bd9da2b7"],"c83f985d9828d30801541f1eed26aa3169646baf":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"44e7a433bcde006012d6f8cd8a1db402bd9da2b7":["c83f985d9828d30801541f1eed26aa3169646baf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}