{"path":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#createCollectionZkNode(SolrZkClient,String,Map[String,String]).mjava","commits":[{"id":"f291d2d430e8149d24fdd06b0bcdab0941ec9144","date":1481216635,"type":1,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#createCollectionZkNode(SolrZkClient,String,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","sourceNew":"  public static void createCollectionZkNode(SolrZkClient zkClient, String collection, Map<String,String> params) {\n    log.debug(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n\n    try {\n      if (!zkClient.exists(collectionPath, true)) {\n        log.debug(\"Creating collection in ZooKeeper:\" + collection);\n\n        try {\n          Map<String,Object> collectionProps = new HashMap<>();\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX + ZkController.CONFIGNAME_PROP, collection);\n\n          if (params.size() > 0) {\n            collectionProps.putAll(params);\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(ZkController.CONFIGNAME_PROP)) {\n              // users can create the collection node and conf link ahead of time, or this may return another option\n              getConfName(zkClient, collection, collectionPath, collectionProps);\n            }\n\n          } else if (System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(ZkController.COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(ZkController.COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(ZkController.CONFIGNAME_PROP))\n              collectionProps.put(ZkController.CONFIGNAME_PROP, defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(ZkController.CONFIGNAME_PROP, collection);\n          } else {\n            getConfName(zkClient, collection, collectionPath, collectionProps);\n          }\n\n          collectionProps.remove(ZkStateReader.NUM_SHARDS_PROP);  // we don't put numShards in the collections properties\n\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, Utils.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // it's okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.debug(\"Collection zkNode exists\");\n      }\n\n    } catch (KeeperException e) {\n      // it's okay if another beats us creating the node\n      if (e.code() == KeeperException.Code.NODEEXISTS) {\n        return;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    }\n\n  }\n\n","sourceOld":"  public void createCollectionZkNode(CloudDescriptor cd) {\n    String collection = cd.getCollectionName();\n\n    log.debug(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n\n    try {\n      if (!zkClient.exists(collectionPath, true)) {\n        log.debug(\"Creating collection in ZooKeeper:\" + collection);\n\n        try {\n          Map<String, Object> collectionProps = new HashMap<>();\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX + CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (cd.getParams().size() > 0) {\n            collectionProps.putAll(cd.getParams());\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP)) {\n              // TODO: getting the configName from the collectionPath should fail since we already know it doesn't exist?\n              getConfName(collection, collectionPath, collectionProps);\n            }\n\n          } else if (System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP, defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP, cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n\n          collectionProps.remove(ZkStateReader.NUM_SHARDS_PROP);  // we don't put numShards in the collections properties\n\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, Utils.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // it's okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.debug(\"Collection zkNode exists\");\n      }\n\n    } catch (KeeperException e) {\n      // it's okay if another beats us creating the node\n      if (e.code() == KeeperException.Code.NODEEXISTS) {\n        return;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#createCollectionZkNode(SolrZkClient,String,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","sourceNew":"  public static void createCollectionZkNode(SolrZkClient zkClient, String collection, Map<String,String> params) {\n    log.debug(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n\n    try {\n      if (!zkClient.exists(collectionPath, true)) {\n        log.debug(\"Creating collection in ZooKeeper:\" + collection);\n\n        try {\n          Map<String,Object> collectionProps = new HashMap<>();\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX + ZkController.CONFIGNAME_PROP, collection);\n\n          if (params.size() > 0) {\n            collectionProps.putAll(params);\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(ZkController.CONFIGNAME_PROP)) {\n              // users can create the collection node and conf link ahead of time, or this may return another option\n              getConfName(zkClient, collection, collectionPath, collectionProps);\n            }\n\n          } else if (System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(ZkController.COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(ZkController.COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(ZkController.CONFIGNAME_PROP))\n              collectionProps.put(ZkController.CONFIGNAME_PROP, defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(ZkController.CONFIGNAME_PROP, collection);\n          } else {\n            getConfName(zkClient, collection, collectionPath, collectionProps);\n          }\n\n          collectionProps.remove(ZkStateReader.NUM_SHARDS_PROP);  // we don't put numShards in the collections properties\n\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, Utils.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // it's okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.debug(\"Collection zkNode exists\");\n      }\n\n    } catch (KeeperException e) {\n      // it's okay if another beats us creating the node\n      if (e.code() == KeeperException.Code.NODEEXISTS) {\n        return;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    }\n\n  }\n\n","sourceOld":"  public void createCollectionZkNode(CloudDescriptor cd) {\n    String collection = cd.getCollectionName();\n\n    log.debug(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n\n    try {\n      if (!zkClient.exists(collectionPath, true)) {\n        log.debug(\"Creating collection in ZooKeeper:\" + collection);\n\n        try {\n          Map<String, Object> collectionProps = new HashMap<>();\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX + CONFIGNAME_PROP, collection);\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (cd.getParams().size() > 0) {\n            collectionProps.putAll(cd.getParams());\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP)) {\n              // TODO: getting the configName from the collectionPath should fail since we already know it doesn't exist?\n              getConfName(collection, collectionPath, collectionProps);\n            }\n\n          } else if (System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP, defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(CONFIGNAME_PROP, cd.getCollectionName());\n          } else {\n            getConfName(collection, collectionPath, collectionProps);\n          }\n\n          collectionProps.remove(ZkStateReader.NUM_SHARDS_PROP);  // we don't put numShards in the collections properties\n\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, Utils.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // it's okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.debug(\"Collection zkNode exists\");\n      }\n\n    } catch (KeeperException e) {\n      // it's okay if another beats us creating the node\n      if (e.code() == KeeperException.Code.NODEEXISTS) {\n        return;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#createCollectionZkNode(DistribStateManager,String,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#createCollectionZkNode(SolrZkClient,String,Map[String,String]).mjava","sourceNew":"  public static void createCollectionZkNode(DistribStateManager stateManager, String collection, Map<String,String> params) {\n    log.debug(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n\n    try {\n      if (!stateManager.hasData(collectionPath)) {\n        log.debug(\"Creating collection in ZooKeeper:\" + collection);\n\n        try {\n          Map<String,Object> collectionProps = new HashMap<>();\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX + ZkController.CONFIGNAME_PROP, collection);\n\n          if (params.size() > 0) {\n            collectionProps.putAll(params);\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(ZkController.CONFIGNAME_PROP)) {\n              // users can create the collection node and conf link ahead of time, or this may return another option\n              getConfName(stateManager, collection, collectionPath, collectionProps);\n            }\n\n          } else if (System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(ZkController.COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(ZkController.COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(ZkController.CONFIGNAME_PROP))\n              collectionProps.put(ZkController.CONFIGNAME_PROP, defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(ZkController.CONFIGNAME_PROP, collection);\n          } else {\n            getConfName(stateManager, collection, collectionPath, collectionProps);\n          }\n\n          collectionProps.remove(ZkStateReader.NUM_SHARDS_PROP);  // we don't put numShards in the collections properties\n\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          stateManager.makePath(collectionPath, Utils.toJSON(zkProps), CreateMode.PERSISTENT, false);\n\n        } catch (KeeperException e) {\n          // it's okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        } catch (AlreadyExistsException e) {\n          // it's okay if the node already exists\n        }\n      } else {\n        log.debug(\"Collection zkNode exists\");\n      }\n\n    } catch (KeeperException e) {\n      // it's okay if another beats us creating the node\n      if (e.code() == KeeperException.Code.NODEEXISTS) {\n        return;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    }\n\n  }\n\n","sourceOld":"  public static void createCollectionZkNode(SolrZkClient zkClient, String collection, Map<String,String> params) {\n    log.debug(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n\n    try {\n      if (!zkClient.exists(collectionPath, true)) {\n        log.debug(\"Creating collection in ZooKeeper:\" + collection);\n\n        try {\n          Map<String,Object> collectionProps = new HashMap<>();\n\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX + ZkController.CONFIGNAME_PROP, collection);\n\n          if (params.size() > 0) {\n            collectionProps.putAll(params);\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(ZkController.CONFIGNAME_PROP)) {\n              // users can create the collection node and conf link ahead of time, or this may return another option\n              getConfName(zkClient, collection, collectionPath, collectionProps);\n            }\n\n          } else if (System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(ZkController.COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(ZkController.COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(ZkController.CONFIGNAME_PROP))\n              collectionProps.put(ZkController.CONFIGNAME_PROP, defaultConfigName);\n\n          } else if (Boolean.getBoolean(\"bootstrap_conf\")) {\n            // the conf name should should be the collection name of this core\n            collectionProps.put(ZkController.CONFIGNAME_PROP, collection);\n          } else {\n            getConfName(zkClient, collection, collectionPath, collectionProps);\n          }\n\n          collectionProps.remove(ZkStateReader.NUM_SHARDS_PROP);  // we don't put numShards in the collections properties\n\n          ZkNodeProps zkProps = new ZkNodeProps(collectionProps);\n          zkClient.makePath(collectionPath, Utils.toJSON(zkProps), CreateMode.PERSISTENT, null, true);\n\n        } catch (KeeperException e) {\n          // it's okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.debug(\"Collection zkNode exists\");\n      }\n\n    } catch (KeeperException e) {\n      // it's okay if another beats us creating the node\n      if (e.code() == KeeperException.Code.NODEEXISTS) {\n        return;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error creating collection node in Zookeeper\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f291d2d430e8149d24fdd06b0bcdab0941ec9144":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"]},"commit2Childs":{"f291d2d430e8149d24fdd06b0bcdab0941ec9144":["9856095f7afb5a607bf5e65077615ed91273508c","1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f291d2d430e8149d24fdd06b0bcdab0941ec9144","9856095f7afb5a607bf5e65077615ed91273508c"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}