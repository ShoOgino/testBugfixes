{"path":"contrib/wordnet/src/java/org/apache/lucene/wordnet/AnalyzerUtil#getMaxTokenAnalyzer(Analyzer,int).mjava","commits":[{"id":"d68e5c46e6a5ebdf4dafec4a123344092b915cc0","date":1256752193,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/wordnet/src/java/org/apache/lucene/wordnet/AnalyzerUtil#getMaxTokenAnalyzer(Analyzer,int).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/AnalyzerUtil#getMaxTokenAnalyzer(Analyzer,int).mjava","sourceNew":"  /**\n   * Returns an analyzer wrapper that returns at most the first\n   * <code>maxTokens</code> tokens from the underlying child analyzer,\n   * ignoring all remaining tokens.\n   * \n   * @param child\n   *            the underlying child analyzer\n   * @param maxTokens\n   *            the maximum number of tokens to return from the underlying\n   *            analyzer (a value of Integer.MAX_VALUE indicates unlimited)\n   * @return an analyzer wrapper\n   */\n  public static Analyzer getMaxTokenAnalyzer(\n      final Analyzer child, final int maxTokens) {\n    \n    if (child == null) \n      throw new IllegalArgumentException(\"child analyzer must not be null\");\n    if (maxTokens < 0) \n      throw new IllegalArgumentException(\"maxTokens must not be negative\");\n    if (maxTokens == Integer.MAX_VALUE) \n      return child; // no need to wrap\n  \n    return new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(child.tokenStream(fieldName, reader)) {\n          private int todo = maxTokens;\n          \n          public boolean incrementToken() throws IOException {\n            return --todo >= 0 ? input.incrementToken() : false;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Returns an analyzer wrapper that returns at most the first\n   * <code>maxTokens</code> tokens from the underlying child analyzer,\n   * ignoring all remaining tokens.\n   * \n   * @param child\n   *            the underlying child analyzer\n   * @param maxTokens\n   *            the maximum number of tokens to return from the underlying\n   *            analyzer (a value of Integer.MAX_VALUE indicates unlimited)\n   * @return an analyzer wrapper\n   */\n  public static Analyzer getMaxTokenAnalyzer(\n      final Analyzer child, final int maxTokens) {\n    \n    if (child == null) \n      throw new IllegalArgumentException(\"child analyzer must not be null\");\n    if (maxTokens < 0) \n      throw new IllegalArgumentException(\"maxTokens must not be negative\");\n    if (maxTokens == Integer.MAX_VALUE) \n      return child; // no need to wrap\n  \n    return new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(child.tokenStream(fieldName, reader)) {\n          private int todo = maxTokens;\n          \n          public boolean incrementToken() throws IOException {\n            return --todo >= 0 ? input.incrementToken() : false;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/wordnet/src/java/org/apache/lucene/wordnet/AnalyzerUtil#getMaxTokenAnalyzer(Analyzer,int).mjava","pathOld":"contrib/wordnet/src/java/org/apache/lucene/wordnet/AnalyzerUtil#getMaxTokenAnalyzer(Analyzer,int).mjava","sourceNew":"  /**\n   * Returns an analyzer wrapper that returns at most the first\n   * <code>maxTokens</code> tokens from the underlying child analyzer,\n   * ignoring all remaining tokens.\n   * \n   * @param child\n   *            the underlying child analyzer\n   * @param maxTokens\n   *            the maximum number of tokens to return from the underlying\n   *            analyzer (a value of Integer.MAX_VALUE indicates unlimited)\n   * @return an analyzer wrapper\n   */\n  public static Analyzer getMaxTokenAnalyzer(\n      final Analyzer child, final int maxTokens) {\n    \n    if (child == null) \n      throw new IllegalArgumentException(\"child analyzer must not be null\");\n    if (maxTokens < 0) \n      throw new IllegalArgumentException(\"maxTokens must not be negative\");\n    if (maxTokens == Integer.MAX_VALUE) \n      return child; // no need to wrap\n  \n    return new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(child.tokenStream(fieldName, reader)) {\n          private int todo = maxTokens;\n          \n          @Override\n          public boolean incrementToken() throws IOException {\n            return --todo >= 0 ? input.incrementToken() : false;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Returns an analyzer wrapper that returns at most the first\n   * <code>maxTokens</code> tokens from the underlying child analyzer,\n   * ignoring all remaining tokens.\n   * \n   * @param child\n   *            the underlying child analyzer\n   * @param maxTokens\n   *            the maximum number of tokens to return from the underlying\n   *            analyzer (a value of Integer.MAX_VALUE indicates unlimited)\n   * @return an analyzer wrapper\n   */\n  public static Analyzer getMaxTokenAnalyzer(\n      final Analyzer child, final int maxTokens) {\n    \n    if (child == null) \n      throw new IllegalArgumentException(\"child analyzer must not be null\");\n    if (maxTokens < 0) \n      throw new IllegalArgumentException(\"maxTokens must not be negative\");\n    if (maxTokens == Integer.MAX_VALUE) \n      return child; // no need to wrap\n  \n    return new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(child.tokenStream(fieldName, reader)) {\n          private int todo = maxTokens;\n          \n          public boolean incrementToken() throws IOException {\n            return --todo >= 0 ? input.incrementToken() : false;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/AnalyzerUtil#getMaxTokenAnalyzer(Analyzer,int).mjava","pathOld":"contrib/wordnet/src/java/org/apache/lucene/wordnet/AnalyzerUtil#getMaxTokenAnalyzer(Analyzer,int).mjava","sourceNew":"  /**\n   * Returns an analyzer wrapper that returns at most the first\n   * <code>maxTokens</code> tokens from the underlying child analyzer,\n   * ignoring all remaining tokens.\n   * \n   * @param child\n   *            the underlying child analyzer\n   * @param maxTokens\n   *            the maximum number of tokens to return from the underlying\n   *            analyzer (a value of Integer.MAX_VALUE indicates unlimited)\n   * @return an analyzer wrapper\n   */\n  public static Analyzer getMaxTokenAnalyzer(\n      final Analyzer child, final int maxTokens) {\n    \n    if (child == null) \n      throw new IllegalArgumentException(\"child analyzer must not be null\");\n    if (maxTokens < 0) \n      throw new IllegalArgumentException(\"maxTokens must not be negative\");\n    if (maxTokens == Integer.MAX_VALUE) \n      return child; // no need to wrap\n  \n    return new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(child.tokenStream(fieldName, reader)) {\n          private int todo = maxTokens;\n          \n          @Override\n          public boolean incrementToken() throws IOException {\n            return --todo >= 0 ? input.incrementToken() : false;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Returns an analyzer wrapper that returns at most the first\n   * <code>maxTokens</code> tokens from the underlying child analyzer,\n   * ignoring all remaining tokens.\n   * \n   * @param child\n   *            the underlying child analyzer\n   * @param maxTokens\n   *            the maximum number of tokens to return from the underlying\n   *            analyzer (a value of Integer.MAX_VALUE indicates unlimited)\n   * @return an analyzer wrapper\n   */\n  public static Analyzer getMaxTokenAnalyzer(\n      final Analyzer child, final int maxTokens) {\n    \n    if (child == null) \n      throw new IllegalArgumentException(\"child analyzer must not be null\");\n    if (maxTokens < 0) \n      throw new IllegalArgumentException(\"maxTokens must not be negative\");\n    if (maxTokens == Integer.MAX_VALUE) \n      return child; // no need to wrap\n  \n    return new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(child.tokenStream(fieldName, reader)) {\n          private int todo = maxTokens;\n          \n          @Override\n          public boolean incrementToken() throws IOException {\n            return --todo >= 0 ? input.incrementToken() : false;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["d68e5c46e6a5ebdf4dafec4a123344092b915cc0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"d68e5c46e6a5ebdf4dafec4a123344092b915cc0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d68e5c46e6a5ebdf4dafec4a123344092b915cc0"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d68e5c46e6a5ebdf4dafec4a123344092b915cc0":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}