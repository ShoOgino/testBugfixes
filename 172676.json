{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#setupQuadGrid(int).mjava","commits":[{"id":"0521546db127e358ced1772a9d696dbdd255b203","date":1403202289,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#setupQuadGrid(int).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest#setupQuadGrid(int).mjava","sourceNew":"  private void setupQuadGrid(int maxLevels) {\n    //non-geospatial makes this test a little easier (in gridSnap), and using boundary values 2^X raises\n    // the prospect of edge conditions we want to test, plus makes for simpler numbers (no decimals).\n    SpatialContextFactory factory = new SpatialContextFactory();\n    factory.geo = false;\n    factory.worldBounds = new RectangleImpl(0, 256, -128, 128, null);\n    this.ctx = factory.newSpatialContext();\n    //A fairly shallow grid, and default 2.5% distErrPct\n    if (maxLevels == -1)\n      maxLevels = randomIntBetween(1, 8);//max 64k cells (4^8), also 256*256\n    this.grid = new QuadPrefixTree(ctx, maxLevels);\n    this.strategy = new RecursivePrefixTreeStrategy(grid, getClass().getSimpleName());\n  }\n\n","sourceOld":"  private void setupQuadGrid(int maxLevels) {\n    //non-geospatial makes this test a little easier (in gridSnap), and using boundary values 2^X raises\n    // the prospect of edge conditions we want to test, plus makes for simpler numbers (no decimals).\n    SpatialContextFactory factory = new SpatialContextFactory();\n    factory.geo = false;\n    factory.worldBounds = new RectangleImpl(0, 256, -128, 128, null);\n    this.ctx = factory.newSpatialContext();\n    //A fairly shallow grid, and default 2.5% distErrPct\n    if (maxLevels == -1)\n      maxLevels = randomIntBetween(1, 8);//max 64k cells (4^8), also 256*256\n    this.grid = new QuadPrefixTree(ctx, maxLevels);\n    this.strategy = new RecursivePrefixTreeStrategy(grid, getClass().getSimpleName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0","date":1426015524,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#setupQuadGrid(int).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#setupQuadGrid(int).mjava","sourceNew":"  private void setupQuadGrid(int maxLevels) {\n    //non-geospatial makes this test a little easier (in gridSnap), and using boundary values 2^X raises\n    // the prospect of edge conditions we want to test, plus makes for simpler numbers (no decimals).\n    SpatialContextFactory factory = new SpatialContextFactory();\n    factory.geo = false;\n    factory.worldBounds = new RectangleImpl(0, 256, -128, 128, null);\n    this.ctx = factory.newSpatialContext();\n    //A fairly shallow grid, and default 2.5% distErrPct\n    if (maxLevels == -1)\n      maxLevels = randomIntBetween(1, 8);//max 64k cells (4^8), also 256*256\n    this.grid = new QuadPrefixTree(ctx, maxLevels);\n    this.strategy = newRPT();\n  }\n\n","sourceOld":"  private void setupQuadGrid(int maxLevels) {\n    //non-geospatial makes this test a little easier (in gridSnap), and using boundary values 2^X raises\n    // the prospect of edge conditions we want to test, plus makes for simpler numbers (no decimals).\n    SpatialContextFactory factory = new SpatialContextFactory();\n    factory.geo = false;\n    factory.worldBounds = new RectangleImpl(0, 256, -128, 128, null);\n    this.ctx = factory.newSpatialContext();\n    //A fairly shallow grid, and default 2.5% distErrPct\n    if (maxLevels == -1)\n      maxLevels = randomIntBetween(1, 8);//max 64k cells (4^8), also 256*256\n    this.grid = new QuadPrefixTree(ctx, maxLevels);\n    this.strategy = new RecursivePrefixTreeStrategy(grid, getClass().getSimpleName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#setupQuadGrid(int).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#setupQuadGrid(int).mjava","sourceNew":"  private void setupQuadGrid(int maxLevels) {\n    //non-geospatial makes this test a little easier (in gridSnap), and using boundary values 2^X raises\n    // the prospect of edge conditions we want to test, plus makes for simpler numbers (no decimals).\n    SpatialContextFactory factory = new SpatialContextFactory();\n    factory.geo = false;\n    factory.worldBounds = new RectangleImpl(0, 256, -128, 128, null);\n    this.ctx = factory.newSpatialContext();\n    //A fairly shallow grid, and default 2.5% distErrPct\n    if (maxLevels == -1)\n      maxLevels = randomIntBetween(1, 8);//max 64k cells (4^8), also 256*256\n    this.grid = new QuadPrefixTree(ctx, maxLevels);\n    this.strategy = newRPT();\n  }\n\n","sourceOld":"  private void setupQuadGrid(int maxLevels) {\n    //non-geospatial makes this test a little easier (in gridSnap), and using boundary values 2^X raises\n    // the prospect of edge conditions we want to test, plus makes for simpler numbers (no decimals).\n    SpatialContextFactory factory = new SpatialContextFactory();\n    factory.geo = false;\n    factory.worldBounds = new RectangleImpl(0, 256, -128, 128, null);\n    this.ctx = factory.newSpatialContext();\n    //A fairly shallow grid, and default 2.5% distErrPct\n    if (maxLevels == -1)\n      maxLevels = randomIntBetween(1, 8);//max 64k cells (4^8), also 256*256\n    this.grid = new QuadPrefixTree(ctx, maxLevels);\n    this.strategy = new RecursivePrefixTreeStrategy(grid, getClass().getSimpleName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3854546d75fdc5a4c3b13d0c67b6b331185945","date":1429762111,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#setupQuadGrid(int,boolean).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#setupQuadGrid(int).mjava","sourceNew":"  private void setupQuadGrid(int maxLevels, boolean packedQuadPrefixTree) {\n    //non-geospatial makes this test a little easier (in gridSnap), and using boundary values 2^X raises\n    // the prospect of edge conditions we want to test, plus makes for simpler numbers (no decimals).\n    SpatialContextFactory factory = new SpatialContextFactory();\n    factory.geo = false;\n    factory.worldBounds = new RectangleImpl(0, 256, -128, 128, null);\n    this.ctx = factory.newSpatialContext();\n    //A fairly shallow grid, and default 2.5% distErrPct\n    if (maxLevels == -1)\n      maxLevels = randomIntBetween(1, 8);//max 64k cells (4^8), also 256*256\n    if (packedQuadPrefixTree) {\n      this.grid = new PackedQuadPrefixTree(ctx, maxLevels);\n    } else {\n      this.grid = new QuadPrefixTree(ctx, maxLevels);\n    }\n    this.strategy = newRPT();\n  }\n\n","sourceOld":"  private void setupQuadGrid(int maxLevels) {\n    //non-geospatial makes this test a little easier (in gridSnap), and using boundary values 2^X raises\n    // the prospect of edge conditions we want to test, plus makes for simpler numbers (no decimals).\n    SpatialContextFactory factory = new SpatialContextFactory();\n    factory.geo = false;\n    factory.worldBounds = new RectangleImpl(0, 256, -128, 128, null);\n    this.ctx = factory.newSpatialContext();\n    //A fairly shallow grid, and default 2.5% distErrPct\n    if (maxLevels == -1)\n      maxLevels = randomIntBetween(1, 8);//max 64k cells (4^8), also 256*256\n    this.grid = new QuadPrefixTree(ctx, maxLevels);\n    this.strategy = newRPT();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["0521546db127e358ced1772a9d696dbdd255b203","11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"9d3854546d75fdc5a4c3b13d0c67b6b331185945":["11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0":["0521546db127e358ced1772a9d696dbdd255b203"],"0521546db127e358ced1772a9d696dbdd255b203":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9d3854546d75fdc5a4c3b13d0c67b6b331185945"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"9d3854546d75fdc5a4c3b13d0c67b6b331185945":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0521546db127e358ced1772a9d696dbdd255b203"],"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9d3854546d75fdc5a4c3b13d0c67b6b331185945"],"0521546db127e358ced1772a9d696dbdd255b203":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}