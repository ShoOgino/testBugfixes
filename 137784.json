{"path":"lucene/misc/src/test/org/apache/lucene/search/TestInetAddressRangeQueries#nextInetaddress().mjava","commits":[{"id":"4a52b01a73cacbd2d360240e72d64c0ba353618f","date":1489389749,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestInetAddressRangeQueries#nextInetaddress().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestIpRangeFieldQueries#nextInetaddress().mjava","sourceNew":"  /** return random IPv4 or IPv6 address */\n  private InetAddress nextInetaddress() throws UnknownHostException {\n    byte[] b;\n    switch (ipVersion) {\n      case IPv4:\n        b = new byte[4];\n        break;\n      case IPv6:\n        b = new byte[16];\n        break;\n      default:\n        throw new IllegalArgumentException(\"incorrect IP version: \" + ipVersion);\n    }\n    random().nextBytes(b);\n    return InetAddress.getByAddress(b);\n  }\n\n","sourceOld":"  /** return random IPv4 or IPv6 address */\n  private InetAddress nextInetaddress() throws UnknownHostException {\n    byte[] b;\n    switch (ipVersion) {\n      case IPv4:\n        b = new byte[4];\n        break;\n      case IPv6:\n        b = new byte[16];\n        break;\n      default:\n        throw new IllegalArgumentException(\"incorrect IP version: \" + ipVersion);\n    }\n    random().nextBytes(b);\n    return InetAddress.getByAddress(b);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9572f6b79d80c6f76bff7d6835c27320c7c2e9f4","date":1491408615,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestInetAddressRangeQueries#nextInetaddress().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestInetAddressRangeQueries#nextInetaddress().mjava","sourceNew":"  /** return random IPv4 or IPv6 address */\n  private InetAddress nextInetaddress() throws UnknownHostException {\n    byte[] b = random().nextBoolean() ? new byte[4] : new byte[16];\n    random().nextBytes(b);\n    return InetAddress.getByAddress(b);\n  }\n\n","sourceOld":"  /** return random IPv4 or IPv6 address */\n  private InetAddress nextInetaddress() throws UnknownHostException {\n    byte[] b;\n    switch (ipVersion) {\n      case IPv4:\n        b = new byte[4];\n        break;\n      case IPv6:\n        b = new byte[16];\n        break;\n      default:\n        throw new IllegalArgumentException(\"incorrect IP version: \" + ipVersion);\n    }\n    random().nextBytes(b);\n    return InetAddress.getByAddress(b);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestInetAddressRangeQueries#nextInetaddress().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestInetAddressRangeQueries#nextInetaddress().mjava","sourceNew":"  /** return random IPv4 or IPv6 address */\n  private InetAddress nextInetaddress() throws UnknownHostException {\n    byte[] b = random().nextBoolean() ? new byte[4] : new byte[16];\n    random().nextBytes(b);\n    return InetAddress.getByAddress(b);\n  }\n\n","sourceOld":"  /** return random IPv4 or IPv6 address */\n  private InetAddress nextInetaddress() throws UnknownHostException {\n    byte[] b;\n    switch (ipVersion) {\n      case IPv4:\n        b = new byte[4];\n        break;\n      case IPv6:\n        b = new byte[16];\n        break;\n      default:\n        throw new IllegalArgumentException(\"incorrect IP version: \" + ipVersion);\n    }\n    random().nextBytes(b);\n    return InetAddress.getByAddress(b);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"91e78d339fc63f8487cc36dbc676582553f5e622","date":1495558010,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestInetAddressRangeQueries#nextInetaddress().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestInetAddressRangeQueries#nextInetaddress().mjava","sourceNew":"  /** return random IPv4 or IPv6 address */\n  private InetAddress nextInetaddress() throws UnknownHostException {\n    byte[] b = random().nextBoolean() ? new byte[4] : new byte[16];\n    switch (random().nextInt(5)) {\n      case 0:\n        return InetAddress.getByAddress(b);\n      case 1:\n        Arrays.fill(b, (byte) 0xff);\n        return InetAddress.getByAddress(b);\n      case 2:\n        Arrays.fill(b, (byte) 42);\n        return InetAddress.getByAddress(b);\n      default:\n        random().nextBytes(b);\n        return InetAddress.getByAddress(b);\n    }\n  }\n\n","sourceOld":"  /** return random IPv4 or IPv6 address */\n  private InetAddress nextInetaddress() throws UnknownHostException {\n    byte[] b = random().nextBoolean() ? new byte[4] : new byte[16];\n    random().nextBytes(b);\n    return InetAddress.getByAddress(b);\n  }\n\n","bugFix":["590098436706368b9121b3e55af3dec662f60a32"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestInetAddressRangeQueries#nextInetaddress().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestInetAddressRangeQueries#nextInetaddress().mjava","sourceNew":"  /** return random IPv4 or IPv6 address */\n  private InetAddress nextInetaddress() throws UnknownHostException {\n    byte[] b = random().nextBoolean() ? new byte[4] : new byte[16];\n    switch (random().nextInt(5)) {\n      case 0:\n        return InetAddress.getByAddress(b);\n      case 1:\n        Arrays.fill(b, (byte) 0xff);\n        return InetAddress.getByAddress(b);\n      case 2:\n        Arrays.fill(b, (byte) 42);\n        return InetAddress.getByAddress(b);\n      default:\n        random().nextBytes(b);\n        return InetAddress.getByAddress(b);\n    }\n  }\n\n","sourceOld":"  /** return random IPv4 or IPv6 address */\n  private InetAddress nextInetaddress() throws UnknownHostException {\n    byte[] b = random().nextBoolean() ? new byte[4] : new byte[16];\n    random().nextBytes(b);\n    return InetAddress.getByAddress(b);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["4a52b01a73cacbd2d360240e72d64c0ba353618f"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","91e78d339fc63f8487cc36dbc676582553f5e622"],"9572f6b79d80c6f76bff7d6835c27320c7c2e9f4":["4a52b01a73cacbd2d360240e72d64c0ba353618f"],"4a52b01a73cacbd2d360240e72d64c0ba353618f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"91e78d339fc63f8487cc36dbc676582553f5e622":["9572f6b79d80c6f76bff7d6835c27320c7c2e9f4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91e78d339fc63f8487cc36dbc676582553f5e622"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"9572f6b79d80c6f76bff7d6835c27320c7c2e9f4":["91e78d339fc63f8487cc36dbc676582553f5e622"],"4a52b01a73cacbd2d360240e72d64c0ba353618f":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","9572f6b79d80c6f76bff7d6835c27320c7c2e9f4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a52b01a73cacbd2d360240e72d64c0ba353618f"],"91e78d339fc63f8487cc36dbc676582553f5e622":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}