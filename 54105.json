{"path":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSubsetOf(Query,Query).mjava","commits":[{"id":"92749b51992f15c9e464fd464baf3372bd5573a2","date":1330019010,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSubsetOf(Query,Query).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Asserts that the documents returned by <code>q1</code>\n   * are a subset of those returned by <code>q2</code>\n   */\n  public void assertSubsetOf(Query q1, Query q2) throws Exception {   \n    // test without a filter\n    assertSubsetOf(q1, q2, null);\n    \n    // test with a filter (this will sometimes cause advance'ing enough to test it)\n    assertSubsetOf(q1, q2, randomFilter());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSubsetOf(Query,Query).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Asserts that the documents returned by <code>q1</code>\n   * are a subset of those returned by <code>q2</code>\n   */\n  public void assertSubsetOf(Query q1, Query q2) throws Exception {   \n    // test without a filter\n    assertSubsetOf(q1, q2, null);\n    \n    // test with a filter (this will sometimes cause advance'ing enough to test it)\n    assertSubsetOf(q1, q2, randomFilter());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e8701e5b46d362735e000a65f451ad8cab75fd4","date":1424530754,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSubsetOf(Query,Query).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSubsetOf(Query,Query).mjava","sourceNew":"  /**\n   * Asserts that the documents returned by <code>q1</code>\n   * are a subset of those returned by <code>q2</code>\n   */\n  public void assertSubsetOf(Query q1, Query q2) throws Exception {   \n    // test without a filter\n    assertSubsetOf(q1, q2, null);\n    \n    // test with some filters (this will sometimes cause advance'ing enough to test it)\n    int numFilters = atLeast(10);\n    for (int i = 0; i < numFilters; i++) {\n      Filter filter = randomFilter();\n      // incorporate the filter in different ways.\n      assertSubsetOf(q1, q2, filter);\n      assertSubsetOf(filteredQuery(q1, filter), filteredQuery(q2, filter), null);\n      assertSubsetOf(filteredQuery(q1, filter), filteredBooleanQuery(q2, filter), null);\n      assertSubsetOf(filteredBooleanQuery(q1, filter), filteredBooleanQuery(q2, filter), null);\n      assertSubsetOf(filteredBooleanQuery(q1, filter), filteredQuery(q2, filter), null);\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that the documents returned by <code>q1</code>\n   * are a subset of those returned by <code>q2</code>\n   */\n  public void assertSubsetOf(Query q1, Query q2) throws Exception {   \n    // test without a filter\n    assertSubsetOf(q1, q2, null);\n    \n    // test with a filter (this will sometimes cause advance'ing enough to test it)\n    assertSubsetOf(q1, q2, randomFilter());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7ac93f1b4f66dba87b555cd5815ecbfe0060dae","date":1429483620,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSubsetOf(Query,Query).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSubsetOf(Query,Query).mjava","sourceNew":"  /**\n   * Asserts that the documents returned by <code>q1</code>\n   * are a subset of those returned by <code>q2</code>\n   */\n  public void assertSubsetOf(Query q1, Query q2) throws Exception {   \n    // test without a filter\n    assertSubsetOf(q1, q2, null);\n    \n    // test with some filters (this will sometimes cause advance'ing enough to test it)\n    int numFilters = TEST_NIGHTLY ? atLeast(10) : atLeast(3);\n    for (int i = 0; i < numFilters; i++) {\n      Filter filter = randomFilter();\n      // incorporate the filter in different ways.\n      assertSubsetOf(q1, q2, filter);\n      assertSubsetOf(filteredQuery(q1, filter), filteredQuery(q2, filter), null);\n      assertSubsetOf(filteredQuery(q1, filter), filteredBooleanQuery(q2, filter), null);\n      assertSubsetOf(filteredBooleanQuery(q1, filter), filteredBooleanQuery(q2, filter), null);\n      assertSubsetOf(filteredBooleanQuery(q1, filter), filteredQuery(q2, filter), null);\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that the documents returned by <code>q1</code>\n   * are a subset of those returned by <code>q2</code>\n   */\n  public void assertSubsetOf(Query q1, Query q2) throws Exception {   \n    // test without a filter\n    assertSubsetOf(q1, q2, null);\n    \n    // test with some filters (this will sometimes cause advance'ing enough to test it)\n    int numFilters = atLeast(10);\n    for (int i = 0; i < numFilters; i++) {\n      Filter filter = randomFilter();\n      // incorporate the filter in different ways.\n      assertSubsetOf(q1, q2, filter);\n      assertSubsetOf(filteredQuery(q1, filter), filteredQuery(q2, filter), null);\n      assertSubsetOf(filteredQuery(q1, filter), filteredBooleanQuery(q2, filter), null);\n      assertSubsetOf(filteredBooleanQuery(q1, filter), filteredBooleanQuery(q2, filter), null);\n      assertSubsetOf(filteredBooleanQuery(q1, filter), filteredQuery(q2, filter), null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e91a2d9ed80172872da0f517870da6756289554","date":1436431140,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSubsetOf(Query,Query).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSubsetOf(Query,Query).mjava","sourceNew":"  /**\n   * Asserts that the documents returned by <code>q1</code>\n   * are a subset of those returned by <code>q2</code>\n   */\n  public void assertSubsetOf(Query q1, Query q2) throws Exception {   \n    // test without a filter\n    assertSubsetOf(q1, q2, null);\n    \n    // test with some filters (this will sometimes cause advance'ing enough to test it)\n    int numFilters = TEST_NIGHTLY ? atLeast(10) : atLeast(3);\n    for (int i = 0; i < numFilters; i++) {\n      Query filter = randomFilter();\n      // incorporate the filter in different ways.\n      assertSubsetOf(q1, q2, filter);\n      assertSubsetOf(filteredQuery(q1, filter), filteredQuery(q2, filter), null);\n    }\n  }\n\n","sourceOld":"  /**\n   * Asserts that the documents returned by <code>q1</code>\n   * are a subset of those returned by <code>q2</code>\n   */\n  public void assertSubsetOf(Query q1, Query q2) throws Exception {   \n    // test without a filter\n    assertSubsetOf(q1, q2, null);\n    \n    // test with some filters (this will sometimes cause advance'ing enough to test it)\n    int numFilters = TEST_NIGHTLY ? atLeast(10) : atLeast(3);\n    for (int i = 0; i < numFilters; i++) {\n      Filter filter = randomFilter();\n      // incorporate the filter in different ways.\n      assertSubsetOf(q1, q2, filter);\n      assertSubsetOf(filteredQuery(q1, filter), filteredQuery(q2, filter), null);\n      assertSubsetOf(filteredQuery(q1, filter), filteredBooleanQuery(q2, filter), null);\n      assertSubsetOf(filteredBooleanQuery(q1, filter), filteredBooleanQuery(q2, filter), null);\n      assertSubsetOf(filteredBooleanQuery(q1, filter), filteredQuery(q2, filter), null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","92749b51992f15c9e464fd464baf3372bd5573a2"],"e7ac93f1b4f66dba87b555cd5815ecbfe0060dae":["6e8701e5b46d362735e000a65f451ad8cab75fd4"],"0e91a2d9ed80172872da0f517870da6756289554":["e7ac93f1b4f66dba87b555cd5815ecbfe0060dae"],"6e8701e5b46d362735e000a65f451ad8cab75fd4":["92749b51992f15c9e464fd464baf3372bd5573a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92749b51992f15c9e464fd464baf3372bd5573a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e91a2d9ed80172872da0f517870da6756289554"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"e7ac93f1b4f66dba87b555cd5815ecbfe0060dae":["0e91a2d9ed80172872da0f517870da6756289554"],"0e91a2d9ed80172872da0f517870da6756289554":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","92749b51992f15c9e464fd464baf3372bd5573a2"],"6e8701e5b46d362735e000a65f451ad8cab75fd4":["e7ac93f1b4f66dba87b555cd5815ecbfe0060dae"],"92749b51992f15c9e464fd464baf3372bd5573a2":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","6e8701e5b46d362735e000a65f451ad8cab75fd4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}