{"path":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#parse(String,Map).mjava","commits":[{"id":"653c1ca305e0065ee988a09e59c8316b8cde02fd","date":1492506780,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#parse(String,Map).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/Clause#parse(String,Map).mjava","sourceNew":"  static Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    Object val = m.get(s);\n    try {\n      String conditionName = s.trim();\n      String value = val == null ? null : String.valueOf(val).trim();\n      Operand operand = null;\n      if ((expectedVal = WILDCARD.parse(value)) != null) {\n        operand = WILDCARD;\n      } else if ((expectedVal = NOT_EQUAL.parse(value)) != null) {\n        operand = NOT_EQUAL;\n      } else if ((expectedVal = GREATER_THAN.parse(value)) != null) {\n        operand = GREATER_THAN;\n      } else if ((expectedVal = LESS_THAN.parse(value)) != null) {\n        operand = LESS_THAN;\n      } else {\n        operand = EQUAL;\n        expectedVal = EQUAL.parse(value);\n      }\n\n      return new Condition(conditionName, expectedVal, operand);\n\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","sourceOld":"  static Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    Object val = m.get(s);\n    try {\n      String conditionName = s.trim();\n      String value = val == null ? null : String.valueOf(val).trim();\n      Operand operand = null;\n      if ((expectedVal = WILDCARD.parse(value)) != null) {\n        operand = WILDCARD;\n      } else if ((expectedVal = NOT_EQUAL.parse(value)) != null) {\n        operand = NOT_EQUAL;\n      } else if ((expectedVal = GREATER_THAN.parse(value)) != null) {\n        operand = GREATER_THAN;\n      } else if ((expectedVal = LESS_THAN.parse(value)) != null) {\n        operand = LESS_THAN;\n      } else {\n        operand = EQUAL;\n        expectedVal = EQUAL.parse(value);\n      }\n\n      return new Condition(conditionName, expectedVal, operand);\n\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#parse(String,Map).mjava","pathOld":"/dev/null","sourceNew":"  static Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    Object val = m.get(s);\n    try {\n      String conditionName = s.trim();\n      String value = val == null ? null : String.valueOf(val).trim();\n      Operand operand = null;\n      if ((expectedVal = WILDCARD.parse(value)) != null) {\n        operand = WILDCARD;\n      } else if ((expectedVal = NOT_EQUAL.parse(value)) != null) {\n        operand = NOT_EQUAL;\n      } else if ((expectedVal = GREATER_THAN.parse(value)) != null) {\n        operand = GREATER_THAN;\n      } else if ((expectedVal = LESS_THAN.parse(value)) != null) {\n        operand = LESS_THAN;\n      } else {\n        operand = EQUAL;\n        expectedVal = EQUAL.parse(value);\n      }\n\n      return new Condition(conditionName, expectedVal, operand);\n\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15","date":1496411842,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#parse(String,Map).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#parse(String,Map).mjava","sourceNew":"  static Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    Object val = m.get(s);\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        if (Policy.ANY.equals(strVal) || Policy.EACH.equals(strVal)) operand = WILDCARD;\n        else if (strVal.startsWith(NOT_EQUAL.operand)) operand = NOT_EQUAL;\n        else if (strVal.startsWith(GREATER_THAN.operand)) operand = GREATER_THAN;\n        else if (strVal.startsWith(LESS_THAN.operand)) operand = LESS_THAN;\n        else operand = EQUAL;\n        expectedVal = validate(s, strVal.substring(EQUAL == operand || WILDCARD == operand ? 0 : 1), true);\n      } else if (val instanceof Number) {\n        operand = EQUAL;\n        expectedVal = validate(s, val, true);\n      }\n/*\n\n\n        String value = val == null ? null : String.valueOf(val).trim();\n      if(WILDCARD)\n\n      if ((expectedVal = WILDCARD.parse(value)) != null) {\n        operand = WILDCARD;\n      } else if ((expectedVal = NOT_EQUAL.parse(value)) != null) {\n        operand = NOT_EQUAL;\n      } else if ((expectedVal = GREATER_THAN.parse(value)) != null) {\n        operand = GREATER_THAN;\n      } else if ((expectedVal = LESS_THAN.parse(value)) != null) {\n        operand = LESS_THAN;\n      } else {\n        operand = EQUAL;\n        expectedVal = EQUAL.parse(value);\n      }\n*/\n\n      return new Condition(conditionName, expectedVal, operand);\n\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","sourceOld":"  static Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    Object val = m.get(s);\n    try {\n      String conditionName = s.trim();\n      String value = val == null ? null : String.valueOf(val).trim();\n      Operand operand = null;\n      if ((expectedVal = WILDCARD.parse(value)) != null) {\n        operand = WILDCARD;\n      } else if ((expectedVal = NOT_EQUAL.parse(value)) != null) {\n        operand = NOT_EQUAL;\n      } else if ((expectedVal = GREATER_THAN.parse(value)) != null) {\n        operand = GREATER_THAN;\n      } else if ((expectedVal = LESS_THAN.parse(value)) != null) {\n        operand = LESS_THAN;\n      } else {\n        operand = EQUAL;\n        expectedVal = EQUAL.parse(value);\n      }\n\n      return new Condition(conditionName, expectedVal, operand);\n\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db505911df79fefd49f29212e44226b35e9e02e1","date":1496414878,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#parse(String,Map).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#parse(String,Map).mjava","sourceNew":"  static Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    Object val = m.get(s);\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        if (Policy.ANY.equals(strVal) || Policy.EACH.equals(strVal)) operand = WILDCARD;\n        else if (strVal.startsWith(NOT_EQUAL.operand)) operand = NOT_EQUAL;\n        else if (strVal.startsWith(GREATER_THAN.operand)) operand = GREATER_THAN;\n        else if (strVal.startsWith(LESS_THAN.operand)) operand = LESS_THAN;\n        else operand = EQUAL;\n        expectedVal = validate(s, strVal.substring(EQUAL == operand || WILDCARD == operand ? 0 : 1), true);\n      } else if (val instanceof Number) {\n        operand = EQUAL;\n        expectedVal = validate(s, val, true);\n      }\n      return new Condition(conditionName, expectedVal, operand);\n\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","sourceOld":"  static Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    Object val = m.get(s);\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        if (Policy.ANY.equals(strVal) || Policy.EACH.equals(strVal)) operand = WILDCARD;\n        else if (strVal.startsWith(NOT_EQUAL.operand)) operand = NOT_EQUAL;\n        else if (strVal.startsWith(GREATER_THAN.operand)) operand = GREATER_THAN;\n        else if (strVal.startsWith(LESS_THAN.operand)) operand = LESS_THAN;\n        else operand = EQUAL;\n        expectedVal = validate(s, strVal.substring(EQUAL == operand || WILDCARD == operand ? 0 : 1), true);\n      } else if (val instanceof Number) {\n        operand = EQUAL;\n        expectedVal = validate(s, val, true);\n      }\n/*\n\n\n        String value = val == null ? null : String.valueOf(val).trim();\n      if(WILDCARD)\n\n      if ((expectedVal = WILDCARD.parse(value)) != null) {\n        operand = WILDCARD;\n      } else if ((expectedVal = NOT_EQUAL.parse(value)) != null) {\n        operand = NOT_EQUAL;\n      } else if ((expectedVal = GREATER_THAN.parse(value)) != null) {\n        operand = GREATER_THAN;\n      } else if ((expectedVal = LESS_THAN.parse(value)) != null) {\n        operand = LESS_THAN;\n      } else {\n        operand = EQUAL;\n        expectedVal = EQUAL.parse(value);\n      }\n*/\n\n      return new Condition(conditionName, expectedVal, operand);\n\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#parse(String,Map).mjava","pathOld":"/dev/null","sourceNew":"  static Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    Object val = m.get(s);\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        if (Policy.ANY.equals(strVal) || Policy.EACH.equals(strVal)) operand = WILDCARD;\n        else if (strVal.startsWith(NOT_EQUAL.operand)) operand = NOT_EQUAL;\n        else if (strVal.startsWith(GREATER_THAN.operand)) operand = GREATER_THAN;\n        else if (strVal.startsWith(LESS_THAN.operand)) operand = LESS_THAN;\n        else operand = EQUAL;\n        expectedVal = validate(s, strVal.substring(EQUAL == operand || WILDCARD == operand ? 0 : 1), true);\n      } else if (val instanceof Number) {\n        operand = EQUAL;\n        expectedVal = validate(s, val, true);\n      }\n      return new Condition(conditionName, expectedVal, operand);\n\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#parse(String,Map).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#parse(String,Map).mjava","sourceNew":"  static Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    Object val = m.get(s);\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        if (Policy.ANY.equals(strVal) || Policy.EACH.equals(strVal)) operand = WILDCARD;\n        else if (strVal.startsWith(NOT_EQUAL.operand)) operand = NOT_EQUAL;\n        else if (strVal.startsWith(GREATER_THAN.operand)) operand = GREATER_THAN;\n        else if (strVal.startsWith(LESS_THAN.operand)) operand = LESS_THAN;\n        else operand = EQUAL;\n        expectedVal = validate(s, strVal.substring(EQUAL == operand || WILDCARD == operand ? 0 : 1), true);\n      } else if (val instanceof Number) {\n        operand = EQUAL;\n        expectedVal = validate(s, val, true);\n      }\n      return new Condition(conditionName, expectedVal, operand);\n\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","sourceOld":"  static Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    Object val = m.get(s);\n    try {\n      String conditionName = s.trim();\n      String value = val == null ? null : String.valueOf(val).trim();\n      Operand operand = null;\n      if ((expectedVal = WILDCARD.parse(value)) != null) {\n        operand = WILDCARD;\n      } else if ((expectedVal = NOT_EQUAL.parse(value)) != null) {\n        operand = NOT_EQUAL;\n      } else if ((expectedVal = GREATER_THAN.parse(value)) != null) {\n        operand = GREATER_THAN;\n      } else if ((expectedVal = LESS_THAN.parse(value)) != null) {\n        operand = LESS_THAN;\n      } else {\n        operand = EQUAL;\n        expectedVal = EQUAL.parse(value);\n      }\n\n      return new Condition(conditionName, expectedVal, operand);\n\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1852ff897aecd2f7c8376a02aedfd44104533f28","date":1498224361,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#parse(String,Map).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#parse(String,Map).mjava","sourceNew":"  Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    Object val = m.get(s);\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        if (Policy.ANY.equals(strVal) || Policy.EACH.equals(strVal)) operand = WILDCARD;\n        else if (strVal.startsWith(NOT_EQUAL.operand)) operand = NOT_EQUAL;\n        else if (strVal.startsWith(GREATER_THAN.operand)) operand = GREATER_THAN;\n        else if (strVal.startsWith(LESS_THAN.operand)) operand = LESS_THAN;\n        else operand = EQUAL;\n        expectedVal = validate(s, strVal.substring(EQUAL == operand || WILDCARD == operand ? 0 : 1), true);\n      } else if (val instanceof Number) {\n        operand = EQUAL;\n        expectedVal = validate(s, val, true);\n      }\n      return new Condition(conditionName, expectedVal, operand);\n\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","sourceOld":"  static Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    Object val = m.get(s);\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        if (Policy.ANY.equals(strVal) || Policy.EACH.equals(strVal)) operand = WILDCARD;\n        else if (strVal.startsWith(NOT_EQUAL.operand)) operand = NOT_EQUAL;\n        else if (strVal.startsWith(GREATER_THAN.operand)) operand = GREATER_THAN;\n        else if (strVal.startsWith(LESS_THAN.operand)) operand = LESS_THAN;\n        else operand = EQUAL;\n        expectedVal = validate(s, strVal.substring(EQUAL == operand || WILDCARD == operand ? 0 : 1), true);\n      } else if (val instanceof Number) {\n        operand = EQUAL;\n        expectedVal = validate(s, val, true);\n      }\n      return new Condition(conditionName, expectedVal, operand);\n\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":5,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#parse(String,Map).mjava","sourceNew":"  static Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    Object val = m.get(s);\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        if (Policy.ANY.equals(strVal) || Policy.EACH.equals(strVal)) operand = WILDCARD;\n        else if (strVal.startsWith(NOT_EQUAL.operand)) operand = NOT_EQUAL;\n        else if (strVal.startsWith(GREATER_THAN.operand)) operand = GREATER_THAN;\n        else if (strVal.startsWith(LESS_THAN.operand)) operand = LESS_THAN;\n        else operand = EQUAL;\n        expectedVal = validate(s, strVal.substring(EQUAL == operand || WILDCARD == operand ? 0 : 1), true);\n      } else if (val instanceof Number) {\n        operand = EQUAL;\n        expectedVal = validate(s, val, true);\n      }\n      return new Condition(conditionName, expectedVal, operand);\n\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","sourceOld":"  static Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    Object val = m.get(s);\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        if (Policy.ANY.equals(strVal) || Policy.EACH.equals(strVal)) operand = WILDCARD;\n        else if (strVal.startsWith(NOT_EQUAL.operand)) operand = NOT_EQUAL;\n        else if (strVal.startsWith(GREATER_THAN.operand)) operand = GREATER_THAN;\n        else if (strVal.startsWith(LESS_THAN.operand)) operand = LESS_THAN;\n        else operand = EQUAL;\n        expectedVal = validate(s, strVal.substring(EQUAL == operand || WILDCARD == operand ? 0 : 1), true);\n      } else if (val instanceof Number) {\n        operand = EQUAL;\n        expectedVal = validate(s, val, true);\n      }\n      return new Condition(conditionName, expectedVal, operand);\n\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parse(String,Map).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#parse(String,Map).mjava","sourceNew":"  static Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    Object val = m.get(s);\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        if (Policy.ANY.equals(strVal) || Policy.EACH.equals(strVal)) operand = WILDCARD;\n        else if (strVal.startsWith(NOT_EQUAL.operand)) operand = NOT_EQUAL;\n        else if (strVal.startsWith(GREATER_THAN.operand)) operand = GREATER_THAN;\n        else if (strVal.startsWith(LESS_THAN.operand)) operand = LESS_THAN;\n        else operand = EQUAL;\n        expectedVal = validate(s, strVal.substring(EQUAL == operand || WILDCARD == operand ? 0 : 1), true);\n      } else if (val instanceof Number) {\n        operand = EQUAL;\n        expectedVal = validate(s, val, true);\n      }\n      return new Condition(conditionName, expectedVal, operand);\n\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","sourceOld":"  Condition parse(String s, Map m) {\n    Object expectedVal = null;\n    Object val = m.get(s);\n    try {\n      String conditionName = s.trim();\n      Operand operand = null;\n      if (val == null) {\n        operand = WILDCARD;\n        expectedVal = Policy.ANY;\n      } else if (val instanceof String) {\n        String strVal = ((String) val).trim();\n        if (Policy.ANY.equals(strVal) || Policy.EACH.equals(strVal)) operand = WILDCARD;\n        else if (strVal.startsWith(NOT_EQUAL.operand)) operand = NOT_EQUAL;\n        else if (strVal.startsWith(GREATER_THAN.operand)) operand = GREATER_THAN;\n        else if (strVal.startsWith(LESS_THAN.operand)) operand = LESS_THAN;\n        else operand = EQUAL;\n        expectedVal = validate(s, strVal.substring(EQUAL == operand || WILDCARD == operand ? 0 : 1), true);\n      } else if (val instanceof Number) {\n        operand = EQUAL;\n        expectedVal = validate(s, val, true);\n      }\n      return new Condition(conditionName, expectedVal, operand);\n\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid tag : \" + s + \":\" + val, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["653c1ca305e0065ee988a09e59c8316b8cde02fd","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"1852ff897aecd2f7c8376a02aedfd44104533f28":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","db505911df79fefd49f29212e44226b35e9e02e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15":["a513b6a92751e54c76fb5447948c9e7d437163a7"],"db505911df79fefd49f29212e44226b35e9e02e1":["0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15"],"98f11c416d30e556e0004a9a84960702d12d35b1":["1852ff897aecd2f7c8376a02aedfd44104533f28","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["1852ff897aecd2f7c8376a02aedfd44104533f28"],"1852ff897aecd2f7c8376a02aedfd44104533f28":["98f11c416d30e556e0004a9a84960702d12d35b1"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["98f11c416d30e556e0004a9a84960702d12d35b1"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["e9017cf144952056066919f1ebc7897ff9bd71b1","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","653c1ca305e0065ee988a09e59c8316b8cde02fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15":["db505911df79fefd49f29212e44226b35e9e02e1"],"db505911df79fefd49f29212e44226b35e9e02e1":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}