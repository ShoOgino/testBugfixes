{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#getMergingSegments().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#getMergingSegments().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#getMergingSegments().mjava","sourceNew":"  /** Expert: to be used by a {@link MergePolicy} to avoid\n   *  selecting merges for segments already being merged.\n   *  The returned collection is not cloned, and thus is\n   *  only safe to access if you hold IndexWriter's lock\n   *  (which you do when IndexWriter invokes the\n   *  MergePolicy).\n   *\n   *  <p>Do not alter the returned collection! */\n  public synchronized Collection<SegmentInfo> getMergingSegments() {\n    return mergingSegments;\n  }\n\n","sourceOld":"  /** Expert: to be used by a {@link MergePolicy} to avoid\n   *  selecting merges for segments already being merged.\n   *  The returned collection is not cloned, and thus is\n   *  only safe to access if you hold IndexWriter's lock\n   *  (which you do when IndexWriter invokes the\n   *  MergePolicy).\n   *\n   *  <p>Do not alter the returned collection! */\n  public synchronized Collection<SegmentInfo> getMergingSegments() {\n    return mergingSegments;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#getMergingSegments().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#getMergingSegments().mjava","sourceNew":"  /** Expert: to be used by a {@link MergePolicy} to avoid\n   *  selecting merges for segments already being merged.\n   *  The returned collection is not cloned, and thus is\n   *  only safe to access if you hold IndexWriter's lock\n   *  (which you do when IndexWriter invokes the\n   *  MergePolicy).\n   *\n   *  <p>Do not alter the returned collection! */\n  public synchronized Collection<SegmentInfoPerCommit> getMergingSegments() {\n    return mergingSegments;\n  }\n\n","sourceOld":"  /** Expert: to be used by a {@link MergePolicy} to avoid\n   *  selecting merges for segments already being merged.\n   *  The returned collection is not cloned, and thus is\n   *  only safe to access if you hold IndexWriter's lock\n   *  (which you do when IndexWriter invokes the\n   *  MergePolicy).\n   *\n   *  <p>Do not alter the returned collection! */\n  public synchronized Collection<SegmentInfo> getMergingSegments() {\n    return mergingSegments;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#getMergingSegments().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#getMergingSegments().mjava","sourceNew":"  /** Expert: to be used by a {@link MergePolicy} to avoid\n   *  selecting merges for segments already being merged.\n   *  The returned collection is not cloned, and thus is\n   *  only safe to access if you hold IndexWriter's lock\n   *  (which you do when IndexWriter invokes the\n   *  MergePolicy).\n   *\n   *  <p>Do not alter the returned collection! */\n  public synchronized Collection<SegmentInfoPerCommit> getMergingSegments() {\n    return mergingSegments;\n  }\n\n","sourceOld":"  /** Expert: to be used by a {@link MergePolicy} to avoid\n   *  selecting merges for segments already being merged.\n   *  The returned collection is not cloned, and thus is\n   *  only safe to access if you hold IndexWriter's lock\n   *  (which you do when IndexWriter invokes the\n   *  MergePolicy).\n   *\n   *  <p>Do not alter the returned collection! */\n  public synchronized Collection<SegmentInfo> getMergingSegments() {\n    return mergingSegments;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#getMergingSegments().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#getMergingSegments().mjava","sourceNew":"  /** Expert: to be used by a {@link MergePolicy} to avoid\n   *  selecting merges for segments already being merged.\n   *  The returned collection is not cloned, and thus is\n   *  only safe to access if you hold IndexWriter's lock\n   *  (which you do when IndexWriter invokes the\n   *  MergePolicy).\n   *\n   *  <p>Do not alter the returned collection! */\n  public synchronized Collection<SegmentCommitInfo> getMergingSegments() {\n    return mergingSegments;\n  }\n\n","sourceOld":"  /** Expert: to be used by a {@link MergePolicy} to avoid\n   *  selecting merges for segments already being merged.\n   *  The returned collection is not cloned, and thus is\n   *  only safe to access if you hold IndexWriter's lock\n   *  (which you do when IndexWriter invokes the\n   *  MergePolicy).\n   *\n   *  <p>Do not alter the returned collection! */\n  public synchronized Collection<SegmentInfoPerCommit> getMergingSegments() {\n    return mergingSegments;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5399733c0eeb73827ff5b8aee51c110ec540e6f0","date":1511756706,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#getMergingSegments().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#getMergingSegments().mjava","sourceNew":"  /** Expert: to be used by a {@link MergePolicy} to avoid\n   *  selecting merges for segments already being merged.\n   *  The returned collection is not cloned, and thus is\n   *  only safe to access if you hold IndexWriter's lock\n   *  (which you do when IndexWriter invokes the\n   *  MergePolicy).\n   *\n   *  <p>The Set is unmodifiable. */\n  public synchronized Set<SegmentCommitInfo> getMergingSegments() {\n    return Collections.unmodifiableSet(mergingSegments);\n  }\n\n","sourceOld":"  /** Expert: to be used by a {@link MergePolicy} to avoid\n   *  selecting merges for segments already being merged.\n   *  The returned collection is not cloned, and thus is\n   *  only safe to access if you hold IndexWriter's lock\n   *  (which you do when IndexWriter invokes the\n   *  MergePolicy).\n   *\n   *  <p>Do not alter the returned collection! */\n  public synchronized Collection<SegmentCommitInfo> getMergingSegments() {\n    return mergingSegments;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0e53d133180083c87dcb8114b087cfe6bfc7bce","date":1511856078,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#getMergingSegments().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#getMergingSegments().mjava","sourceNew":"  /** Expert: to be used by a {@link MergePolicy} to avoid\n   *  selecting merges for segments already being merged.\n   *  The returned collection is not cloned, and thus is\n   *  only safe to access if you hold IndexWriter's lock\n   *  (which you do when IndexWriter invokes the\n   *  MergePolicy).\n   *\n   *  <p>The Set is unmodifiable. */\n  public synchronized Set<SegmentCommitInfo> getMergingSegments() {\n    return Collections.unmodifiableSet(mergingSegments);\n  }\n\n","sourceOld":"  /** Expert: to be used by a {@link MergePolicy} to avoid\n   *  selecting merges for segments already being merged.\n   *  The returned collection is not cloned, and thus is\n   *  only safe to access if you hold IndexWriter's lock\n   *  (which you do when IndexWriter invokes the\n   *  MergePolicy).\n   *\n   *  <p>Do not alter the returned collection! */\n  public synchronized Collection<SegmentCommitInfo> getMergingSegments() {\n    return mergingSegments;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","9d153abcf92dc5329d98571a8c3035df9bd80648"],"5399733c0eeb73827ff5b8aee51c110ec540e6f0":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f0e53d133180083c87dcb8114b087cfe6bfc7bce":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","5399733c0eeb73827ff5b8aee51c110ec540e6f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0e53d133180083c87dcb8114b087cfe6bfc7bce"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["5399733c0eeb73827ff5b8aee51c110ec540e6f0","f0e53d133180083c87dcb8114b087cfe6bfc7bce"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"5399733c0eeb73827ff5b8aee51c110ec540e6f0":["f0e53d133180083c87dcb8114b087cfe6bfc7bce"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","9d153abcf92dc5329d98571a8c3035df9bd80648"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f0e53d133180083c87dcb8114b087cfe6bfc7bce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}