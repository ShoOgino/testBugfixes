{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testFiniteStringsBasic().mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testFiniteStringsBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#testFiniteStringsBasic().mjava","sourceNew":"  /**\n   * Basic test for getFiniteStrings\n   */\n  public void testFiniteStringsBasic() {\n    Automaton a = Operations.union(Automata.makeString(\"dog\"), Automata.makeString(\"duck\"));\n    a = MinimizationOperations.minimize(a);\n    Set<IntsRef> strings = getFiniteStrings(a, -1, true);\n    assertEquals(2, strings.size());\n    IntsRef dog = new IntsRef();\n    Util.toIntsRef(new BytesRef(\"dog\"), dog);\n    assertTrue(strings.contains(dog));\n    IntsRef duck = new IntsRef();\n    Util.toIntsRef(new BytesRef(\"duck\"), duck);\n    assertTrue(strings.contains(duck));\n  }\n\n","sourceOld":"  /**\n   * Basic test for getFiniteStrings\n   */\n  public void testFiniteStringsBasic() {\n    LightAutomaton a = BasicOperations.unionLight(BasicAutomata.makeStringLight(\"dog\"), BasicAutomata.makeStringLight(\"duck\"));\n    a = MinimizationOperationsLight.minimize(a);\n    Set<IntsRef> strings = getFiniteStrings(a, -1, true);\n    assertEquals(2, strings.size());\n    IntsRef dog = new IntsRef();\n    Util.toIntsRef(new BytesRef(\"dog\"), dog);\n    assertTrue(strings.contains(dog));\n    IntsRef duck = new IntsRef();\n    Util.toIntsRef(new BytesRef(\"duck\"), duck);\n    assertTrue(strings.contains(duck));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testFiniteStringsBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#testFiniteStringsBasic().mjava","sourceNew":"  /**\n   * Basic test for getFiniteStrings\n   */\n  public void testFiniteStringsBasic() {\n    Automaton a = Operations.union(Automata.makeString(\"dog\"), Automata.makeString(\"duck\"));\n    a = MinimizationOperations.minimize(a);\n    Set<IntsRef> strings = getFiniteStrings(a, -1, true);\n    assertEquals(2, strings.size());\n    IntsRef dog = new IntsRef();\n    Util.toIntsRef(new BytesRef(\"dog\"), dog);\n    assertTrue(strings.contains(dog));\n    IntsRef duck = new IntsRef();\n    Util.toIntsRef(new BytesRef(\"duck\"), duck);\n    assertTrue(strings.contains(duck));\n  }\n\n","sourceOld":"  /**\n   * Basic test for getFiniteStrings\n   */\n  public void testFiniteStringsBasic() {\n    Automaton a = BasicOperations.union(BasicAutomata.makeString(\"dog\"), BasicAutomata.makeString(\"duck\"));\n    MinimizationOperations.minimize(a);\n    Set<IntsRef> strings = getFiniteStrings(a, -1, true);\n    assertEquals(2, strings.size());\n    IntsRef dog = new IntsRef();\n    Util.toIntsRef(new BytesRef(\"dog\"), dog);\n    assertTrue(strings.contains(dog));\n    IntsRef duck = new IntsRef();\n    Util.toIntsRef(new BytesRef(\"duck\"), duck);\n    assertTrue(strings.contains(duck));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testFiniteStringsBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testFiniteStringsBasic().mjava","sourceNew":"  /**\n   * Basic test for getFiniteStrings\n   */\n  public void testFiniteStringsBasic() {\n    Automaton a = Operations.union(Automata.makeString(\"dog\"), Automata.makeString(\"duck\"));\n    a = MinimizationOperations.minimize(a);\n    Set<IntsRef> strings = getFiniteStrings(a, -1, true);\n    assertEquals(2, strings.size());\n    IntsRefBuilder dog = new IntsRefBuilder();\n    Util.toIntsRef(new BytesRef(\"dog\"), dog);\n    assertTrue(strings.contains(dog.get()));\n    IntsRefBuilder duck = new IntsRefBuilder();\n    Util.toIntsRef(new BytesRef(\"duck\"), duck);\n    assertTrue(strings.contains(duck.get()));\n  }\n\n","sourceOld":"  /**\n   * Basic test for getFiniteStrings\n   */\n  public void testFiniteStringsBasic() {\n    Automaton a = Operations.union(Automata.makeString(\"dog\"), Automata.makeString(\"duck\"));\n    a = MinimizationOperations.minimize(a);\n    Set<IntsRef> strings = getFiniteStrings(a, -1, true);\n    assertEquals(2, strings.size());\n    IntsRef dog = new IntsRef();\n    Util.toIntsRef(new BytesRef(\"dog\"), dog);\n    assertTrue(strings.contains(dog));\n    IntsRef duck = new IntsRef();\n    Util.toIntsRef(new BytesRef(\"duck\"), duck);\n    assertTrue(strings.contains(duck));\n  }\n\n","bugFix":["6ce825e9276493231308229152c48f755ce1a0a5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testFiniteStringsBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testFiniteStringsBasic().mjava","sourceNew":"  /**\n   * Basic test for getFiniteStrings\n   */\n  public void testFiniteStringsBasic() {\n    Automaton a = Operations.union(Automata.makeString(\"dog\"), Automata.makeString(\"duck\"));\n    a = MinimizationOperations.minimize(a, DEFAULT_MAX_DETERMINIZED_STATES);\n    Set<IntsRef> strings = getFiniteStrings(a, -1, true);\n    assertEquals(2, strings.size());\n    IntsRefBuilder dog = new IntsRefBuilder();\n    Util.toIntsRef(new BytesRef(\"dog\"), dog);\n    assertTrue(strings.contains(dog.get()));\n    IntsRefBuilder duck = new IntsRefBuilder();\n    Util.toIntsRef(new BytesRef(\"duck\"), duck);\n    assertTrue(strings.contains(duck.get()));\n  }\n\n","sourceOld":"  /**\n   * Basic test for getFiniteStrings\n   */\n  public void testFiniteStringsBasic() {\n    Automaton a = Operations.union(Automata.makeString(\"dog\"), Automata.makeString(\"duck\"));\n    a = MinimizationOperations.minimize(a);\n    Set<IntsRef> strings = getFiniteStrings(a, -1, true);\n    assertEquals(2, strings.size());\n    IntsRefBuilder dog = new IntsRefBuilder();\n    Util.toIntsRef(new BytesRef(\"dog\"), dog);\n    assertTrue(strings.contains(dog.get()));\n    IntsRefBuilder duck = new IntsRefBuilder();\n    Util.toIntsRef(new BytesRef(\"duck\"), duck);\n    assertTrue(strings.contains(duck.get()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35fa550f45857d99d3d6d743420ee54b4d0c37f8","date":1436039255,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/FiniteStringsIteratorTest#testFiniteStringsBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testFiniteStringsBasic().mjava","sourceNew":"  /**\n   * Basic test for getFiniteStrings\n   */\n  public void testFiniteStringsBasic() {\n    Automaton a = Operations.union(Automata.makeString(\"dog\"), Automata.makeString(\"duck\"));\n    a = MinimizationOperations.minimize(a, DEFAULT_MAX_DETERMINIZED_STATES);\n    FiniteStringsIterator iterator = new FiniteStringsIterator(a);\n    List<IntsRef> actual = getFiniteStrings(iterator);\n    assertFiniteStringsRecursive(a, actual);\n    assertEquals(2, actual.size());\n    IntsRefBuilder dog = new IntsRefBuilder();\n    Util.toIntsRef(new BytesRef(\"dog\"), dog);\n    assertTrue(actual.contains(dog.get()));\n    IntsRefBuilder duck = new IntsRefBuilder();\n    Util.toIntsRef(new BytesRef(\"duck\"), duck);\n    assertTrue(actual.contains(duck.get()));\n  }\n\n","sourceOld":"  /**\n   * Basic test for getFiniteStrings\n   */\n  public void testFiniteStringsBasic() {\n    Automaton a = Operations.union(Automata.makeString(\"dog\"), Automata.makeString(\"duck\"));\n    a = MinimizationOperations.minimize(a, DEFAULT_MAX_DETERMINIZED_STATES);\n    Set<IntsRef> strings = getFiniteStrings(a, -1, true);\n    assertEquals(2, strings.size());\n    IntsRefBuilder dog = new IntsRefBuilder();\n    Util.toIntsRef(new BytesRef(\"dog\"), dog);\n    assertTrue(strings.contains(dog.get()));\n    IntsRefBuilder duck = new IntsRefBuilder();\n    Util.toIntsRef(new BytesRef(\"duck\"), duck);\n    assertTrue(strings.contains(duck.get()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"35fa550f45857d99d3d6d743420ee54b4d0c37f8":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["35fa550f45857d99d3d6d743420ee54b4d0c37f8"]},"commit2Childs":{"35fa550f45857d99d3d6d743420ee54b4d0c37f8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["35fa550f45857d99d3d6d743420ee54b4d0c37f8"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"5c84485629d80d203608e8975a1139de9933cc38":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}