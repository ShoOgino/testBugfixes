{"path":"solr/core/src/test/org/apache/solr/spelling/ConjunctionSolrSpellCheckerTest#test().mjava","commits":[{"id":"018154532bcbac1068a66011cafb190e2b42fed3","date":1449250877,"type":0,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/ConjunctionSolrSpellCheckerTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    ConjunctionSolrSpellChecker cssc = new ConjunctionSolrSpellChecker();\n    MockSolrSpellChecker levenstein1 = new MockSolrSpellChecker(new LevensteinDistance());\n    MockSolrSpellChecker levenstein2 = new MockSolrSpellChecker(new LevensteinDistance());\n    MockSolrSpellChecker ngram = new MockSolrSpellChecker(new NGramDistance());\n    \n    cssc.addChecker(levenstein1);\n    cssc.addChecker(levenstein2);\n    try {\n      cssc.addChecker(ngram);\n      fail(\"ConjunctionSolrSpellChecker should have thrown an exception about non-identical StringDistances.\");\n    } catch (IllegalArgumentException iae) {\n      // correct behavior\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8a5b40aa0e4052014f868a1f29d5e611c9dd9603","d042843368f0d289e28164525546259d89d6dbb6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d042843368f0d289e28164525546259d89d6dbb6","date":1512577756,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/ConjunctionSolrSpellCheckerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/ConjunctionSolrSpellCheckerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    ConjunctionSolrSpellChecker cssc = new ConjunctionSolrSpellChecker();\n    MockSolrSpellChecker levenstein1 = new MockSolrSpellChecker(new LevenshteinDistance());\n    MockSolrSpellChecker levenstein2 = new MockSolrSpellChecker(new LevenshteinDistance());\n    MockSolrSpellChecker ngram = new MockSolrSpellChecker(new NGramDistance());\n    \n    cssc.addChecker(levenstein1);\n    cssc.addChecker(levenstein2);\n    try {\n      cssc.addChecker(ngram);\n      fail(\"ConjunctionSolrSpellChecker should have thrown an exception about non-identical StringDistances.\");\n    } catch (IllegalArgumentException iae) {\n      // correct behavior\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    ConjunctionSolrSpellChecker cssc = new ConjunctionSolrSpellChecker();\n    MockSolrSpellChecker levenstein1 = new MockSolrSpellChecker(new LevensteinDistance());\n    MockSolrSpellChecker levenstein2 = new MockSolrSpellChecker(new LevensteinDistance());\n    MockSolrSpellChecker ngram = new MockSolrSpellChecker(new NGramDistance());\n    \n    cssc.addChecker(levenstein1);\n    cssc.addChecker(levenstein2);\n    try {\n      cssc.addChecker(ngram);\n      fail(\"ConjunctionSolrSpellChecker should have thrown an exception about non-identical StringDistances.\");\n    } catch (IllegalArgumentException iae) {\n      // correct behavior\n    }\n  }\n\n","bugFix":["018154532bcbac1068a66011cafb190e2b42fed3"],"bugIntro":["8a5b40aa0e4052014f868a1f29d5e611c9dd9603"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a5b40aa0e4052014f868a1f29d5e611c9dd9603","date":1523635966,"type":3,"author":"jdyer1","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/ConjunctionSolrSpellCheckerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/ConjunctionSolrSpellCheckerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    ConjunctionSolrSpellChecker cssc = new ConjunctionSolrSpellChecker();\n    @SuppressWarnings(\"unchecked\")\n    Class<StringDistance> sameDistance = (Class<StringDistance>) AVAILABLE_DISTANCES[random().nextInt(AVAILABLE_DISTANCES.length)];\n    \n    StringDistance sameDistance1 = sameDistance.newInstance();\n    StringDistance sameDistance2 = sameDistance.newInstance();\n    \n    //NGramDistance defaults to 2, so we'll try 3 or 4 to ensure we have one that is not-equal.\n    StringDistance differentDistance = new NGramDistance(3);\n    if(sameDistance1.equals(differentDistance)) {\n      differentDistance = new NGramDistance(4);\n      if(sameDistance1.equals(differentDistance)) {\n        fail(\"Cannot set up test.  2 NGramDistances with different gram sizes should not be equal.\");\n      }\n    }\n    Assert.assertEquals(\"The distance \" + sameDistance + \" does not properly implement equals.\", sameDistance1, sameDistance2);\n    \n    \n    MockSolrSpellChecker checker1 = new MockSolrSpellChecker(sameDistance1);\n    MockSolrSpellChecker checker2 = new MockSolrSpellChecker(sameDistance2);\n    MockSolrSpellChecker checker3 = new MockSolrSpellChecker(differentDistance);\n    \n    cssc.addChecker(checker1);\n    cssc.addChecker(checker2);\n    try {\n      cssc.addChecker(checker3);\n      fail(\"ConjunctionSolrSpellChecker should have thrown an exception about non-identical StringDistances.\");\n    } catch (IllegalArgumentException iae) {\n      // correct behavior\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    ConjunctionSolrSpellChecker cssc = new ConjunctionSolrSpellChecker();\n    MockSolrSpellChecker levenstein1 = new MockSolrSpellChecker(new LevenshteinDistance());\n    MockSolrSpellChecker levenstein2 = new MockSolrSpellChecker(new LevenshteinDistance());\n    MockSolrSpellChecker ngram = new MockSolrSpellChecker(new NGramDistance());\n    \n    cssc.addChecker(levenstein1);\n    cssc.addChecker(levenstein2);\n    try {\n      cssc.addChecker(ngram);\n      fail(\"ConjunctionSolrSpellChecker should have thrown an exception about non-identical StringDistances.\");\n    } catch (IllegalArgumentException iae) {\n      // correct behavior\n    }\n  }\n\n","bugFix":["d042843368f0d289e28164525546259d89d6dbb6","018154532bcbac1068a66011cafb190e2b42fed3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cc17990871fe421019acbdd0ed59c8644b9154c","date":1523636883,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/ConjunctionSolrSpellCheckerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/ConjunctionSolrSpellCheckerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    ConjunctionSolrSpellChecker cssc = new ConjunctionSolrSpellChecker();\n    @SuppressWarnings(\"unchecked\")\n    Class<StringDistance> sameDistance = (Class<StringDistance>) AVAILABLE_DISTANCES[random().nextInt(AVAILABLE_DISTANCES.length)];\n    \n    StringDistance sameDistance1 = sameDistance.newInstance();\n    StringDistance sameDistance2 = sameDistance.newInstance();\n    \n    //NGramDistance defaults to 2, so we'll try 3 or 4 to ensure we have one that is not-equal.\n    StringDistance differentDistance = new NGramDistance(3);\n    if(sameDistance1.equals(differentDistance)) {\n      differentDistance = new NGramDistance(4);\n      if(sameDistance1.equals(differentDistance)) {\n        fail(\"Cannot set up test.  2 NGramDistances with different gram sizes should not be equal.\");\n      }\n    }\n    Assert.assertEquals(\"The distance \" + sameDistance + \" does not properly implement equals.\", sameDistance1, sameDistance2);\n    \n    \n    MockSolrSpellChecker checker1 = new MockSolrSpellChecker(sameDistance1);\n    MockSolrSpellChecker checker2 = new MockSolrSpellChecker(sameDistance2);\n    MockSolrSpellChecker checker3 = new MockSolrSpellChecker(differentDistance);\n    \n    cssc.addChecker(checker1);\n    cssc.addChecker(checker2);\n    try {\n      cssc.addChecker(checker3);\n      fail(\"ConjunctionSolrSpellChecker should have thrown an exception about non-identical StringDistances.\");\n    } catch (IllegalArgumentException iae) {\n      // correct behavior\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    ConjunctionSolrSpellChecker cssc = new ConjunctionSolrSpellChecker();\n    MockSolrSpellChecker levenstein1 = new MockSolrSpellChecker(new LevenshteinDistance());\n    MockSolrSpellChecker levenstein2 = new MockSolrSpellChecker(new LevenshteinDistance());\n    MockSolrSpellChecker ngram = new MockSolrSpellChecker(new NGramDistance());\n    \n    cssc.addChecker(levenstein1);\n    cssc.addChecker(levenstein2);\n    try {\n      cssc.addChecker(ngram);\n      fail(\"ConjunctionSolrSpellChecker should have thrown an exception about non-identical StringDistances.\");\n    } catch (IllegalArgumentException iae) {\n      // correct behavior\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/ConjunctionSolrSpellCheckerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/ConjunctionSolrSpellCheckerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    ConjunctionSolrSpellChecker cssc = new ConjunctionSolrSpellChecker();\n    @SuppressWarnings(\"unchecked\")\n    Class<StringDistance> sameDistance = (Class<StringDistance>) AVAILABLE_DISTANCES[random().nextInt(AVAILABLE_DISTANCES.length)];\n    \n    StringDistance sameDistance1 = sameDistance.getConstructor().newInstance();\n    StringDistance sameDistance2 = sameDistance.getConstructor().newInstance();\n    \n    //NGramDistance defaults to 2, so we'll try 3 or 4 to ensure we have one that is not-equal.\n    StringDistance differentDistance = new NGramDistance(3);\n    if(sameDistance1.equals(differentDistance)) {\n      differentDistance = new NGramDistance(4);\n      if(sameDistance1.equals(differentDistance)) {\n        fail(\"Cannot set up test.  2 NGramDistances with different gram sizes should not be equal.\");\n      }\n    }\n    Assert.assertEquals(\"The distance \" + sameDistance + \" does not properly implement equals.\", sameDistance1, sameDistance2);\n    \n    \n    MockSolrSpellChecker checker1 = new MockSolrSpellChecker(sameDistance1);\n    MockSolrSpellChecker checker2 = new MockSolrSpellChecker(sameDistance2);\n    MockSolrSpellChecker checker3 = new MockSolrSpellChecker(differentDistance);\n    \n    cssc.addChecker(checker1);\n    cssc.addChecker(checker2);\n    try {\n      cssc.addChecker(checker3);\n      fail(\"ConjunctionSolrSpellChecker should have thrown an exception about non-identical StringDistances.\");\n    } catch (IllegalArgumentException iae) {\n      // correct behavior\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    ConjunctionSolrSpellChecker cssc = new ConjunctionSolrSpellChecker();\n    @SuppressWarnings(\"unchecked\")\n    Class<StringDistance> sameDistance = (Class<StringDistance>) AVAILABLE_DISTANCES[random().nextInt(AVAILABLE_DISTANCES.length)];\n    \n    StringDistance sameDistance1 = sameDistance.newInstance();\n    StringDistance sameDistance2 = sameDistance.newInstance();\n    \n    //NGramDistance defaults to 2, so we'll try 3 or 4 to ensure we have one that is not-equal.\n    StringDistance differentDistance = new NGramDistance(3);\n    if(sameDistance1.equals(differentDistance)) {\n      differentDistance = new NGramDistance(4);\n      if(sameDistance1.equals(differentDistance)) {\n        fail(\"Cannot set up test.  2 NGramDistances with different gram sizes should not be equal.\");\n      }\n    }\n    Assert.assertEquals(\"The distance \" + sameDistance + \" does not properly implement equals.\", sameDistance1, sameDistance2);\n    \n    \n    MockSolrSpellChecker checker1 = new MockSolrSpellChecker(sameDistance1);\n    MockSolrSpellChecker checker2 = new MockSolrSpellChecker(sameDistance2);\n    MockSolrSpellChecker checker3 = new MockSolrSpellChecker(differentDistance);\n    \n    cssc.addChecker(checker1);\n    cssc.addChecker(checker2);\n    try {\n      cssc.addChecker(checker3);\n      fail(\"ConjunctionSolrSpellChecker should have thrown an exception about non-identical StringDistances.\");\n    } catch (IllegalArgumentException iae) {\n      // correct behavior\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/ConjunctionSolrSpellCheckerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/ConjunctionSolrSpellCheckerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    ConjunctionSolrSpellChecker cssc = new ConjunctionSolrSpellChecker();\n    @SuppressWarnings(\"unchecked\")\n    Class<StringDistance> sameDistance = (Class<StringDistance>) AVAILABLE_DISTANCES[random().nextInt(AVAILABLE_DISTANCES.length)];\n    \n    StringDistance sameDistance1 = sameDistance.getConstructor().newInstance();\n    StringDistance sameDistance2 = sameDistance.getConstructor().newInstance();\n    \n    //NGramDistance defaults to 2, so we'll try 3 or 4 to ensure we have one that is not-equal.\n    StringDistance differentDistance = new NGramDistance(3);\n    if(sameDistance1.equals(differentDistance)) {\n      differentDistance = new NGramDistance(4);\n      if(sameDistance1.equals(differentDistance)) {\n        fail(\"Cannot set up test.  2 NGramDistances with different gram sizes should not be equal.\");\n      }\n    }\n    Assert.assertEquals(\"The distance \" + sameDistance + \" does not properly implement equals.\", sameDistance1, sameDistance2);\n    \n    \n    MockSolrSpellChecker checker1 = new MockSolrSpellChecker(sameDistance1);\n    MockSolrSpellChecker checker2 = new MockSolrSpellChecker(sameDistance2);\n    MockSolrSpellChecker checker3 = new MockSolrSpellChecker(differentDistance);\n    \n    cssc.addChecker(checker1);\n    cssc.addChecker(checker2);\n    expectThrows(IllegalArgumentException.class, () -> cssc.addChecker(checker3));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    ConjunctionSolrSpellChecker cssc = new ConjunctionSolrSpellChecker();\n    @SuppressWarnings(\"unchecked\")\n    Class<StringDistance> sameDistance = (Class<StringDistance>) AVAILABLE_DISTANCES[random().nextInt(AVAILABLE_DISTANCES.length)];\n    \n    StringDistance sameDistance1 = sameDistance.getConstructor().newInstance();\n    StringDistance sameDistance2 = sameDistance.getConstructor().newInstance();\n    \n    //NGramDistance defaults to 2, so we'll try 3 or 4 to ensure we have one that is not-equal.\n    StringDistance differentDistance = new NGramDistance(3);\n    if(sameDistance1.equals(differentDistance)) {\n      differentDistance = new NGramDistance(4);\n      if(sameDistance1.equals(differentDistance)) {\n        fail(\"Cannot set up test.  2 NGramDistances with different gram sizes should not be equal.\");\n      }\n    }\n    Assert.assertEquals(\"The distance \" + sameDistance + \" does not properly implement equals.\", sameDistance1, sameDistance2);\n    \n    \n    MockSolrSpellChecker checker1 = new MockSolrSpellChecker(sameDistance1);\n    MockSolrSpellChecker checker2 = new MockSolrSpellChecker(sameDistance2);\n    MockSolrSpellChecker checker3 = new MockSolrSpellChecker(differentDistance);\n    \n    cssc.addChecker(checker1);\n    cssc.addChecker(checker2);\n    try {\n      cssc.addChecker(checker3);\n      fail(\"ConjunctionSolrSpellChecker should have thrown an exception about non-identical StringDistances.\");\n    } catch (IllegalArgumentException iae) {\n      // correct behavior\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/ConjunctionSolrSpellCheckerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/ConjunctionSolrSpellCheckerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    ConjunctionSolrSpellChecker cssc = new ConjunctionSolrSpellChecker();\n    @SuppressWarnings(\"unchecked\")\n    Class<StringDistance> sameDistance = (Class<StringDistance>) AVAILABLE_DISTANCES[random().nextInt(AVAILABLE_DISTANCES.length)];\n    \n    StringDistance sameDistance1 = sameDistance.getConstructor().newInstance();\n    StringDistance sameDistance2 = sameDistance.getConstructor().newInstance();\n    \n    //NGramDistance defaults to 2, so we'll try 3 or 4 to ensure we have one that is not-equal.\n    StringDistance differentDistance = new NGramDistance(3);\n    if(sameDistance1.equals(differentDistance)) {\n      differentDistance = new NGramDistance(4);\n      if(sameDistance1.equals(differentDistance)) {\n        fail(\"Cannot set up test.  2 NGramDistances with different gram sizes should not be equal.\");\n      }\n    }\n    Assert.assertEquals(\"The distance \" + sameDistance + \" does not properly implement equals.\", sameDistance1, sameDistance2);\n    \n    \n    MockSolrSpellChecker checker1 = new MockSolrSpellChecker(sameDistance1);\n    MockSolrSpellChecker checker2 = new MockSolrSpellChecker(sameDistance2);\n    MockSolrSpellChecker checker3 = new MockSolrSpellChecker(differentDistance);\n    \n    cssc.addChecker(checker1);\n    cssc.addChecker(checker2);\n    expectThrows(IllegalArgumentException.class, () -> cssc.addChecker(checker3));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    ConjunctionSolrSpellChecker cssc = new ConjunctionSolrSpellChecker();\n    @SuppressWarnings(\"unchecked\")\n    Class<StringDistance> sameDistance = (Class<StringDistance>) AVAILABLE_DISTANCES[random().nextInt(AVAILABLE_DISTANCES.length)];\n    \n    StringDistance sameDistance1 = sameDistance.getConstructor().newInstance();\n    StringDistance sameDistance2 = sameDistance.getConstructor().newInstance();\n    \n    //NGramDistance defaults to 2, so we'll try 3 or 4 to ensure we have one that is not-equal.\n    StringDistance differentDistance = new NGramDistance(3);\n    if(sameDistance1.equals(differentDistance)) {\n      differentDistance = new NGramDistance(4);\n      if(sameDistance1.equals(differentDistance)) {\n        fail(\"Cannot set up test.  2 NGramDistances with different gram sizes should not be equal.\");\n      }\n    }\n    Assert.assertEquals(\"The distance \" + sameDistance + \" does not properly implement equals.\", sameDistance1, sameDistance2);\n    \n    \n    MockSolrSpellChecker checker1 = new MockSolrSpellChecker(sameDistance1);\n    MockSolrSpellChecker checker2 = new MockSolrSpellChecker(sameDistance2);\n    MockSolrSpellChecker checker3 = new MockSolrSpellChecker(differentDistance);\n    \n    cssc.addChecker(checker1);\n    cssc.addChecker(checker2);\n    try {\n      cssc.addChecker(checker3);\n      fail(\"ConjunctionSolrSpellChecker should have thrown an exception about non-identical StringDistances.\");\n    } catch (IllegalArgumentException iae) {\n      // correct behavior\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/ConjunctionSolrSpellCheckerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/ConjunctionSolrSpellCheckerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    ConjunctionSolrSpellChecker cssc = new ConjunctionSolrSpellChecker();\n    @SuppressWarnings(\"unchecked\")\n    Class<StringDistance> sameDistance = (Class<StringDistance>) AVAILABLE_DISTANCES[random().nextInt(AVAILABLE_DISTANCES.length)];\n    \n    StringDistance sameDistance1 = sameDistance.getConstructor().newInstance();\n    StringDistance sameDistance2 = sameDistance.getConstructor().newInstance();\n    \n    //NGramDistance defaults to 2, so we'll try 3 or 4 to ensure we have one that is not-equal.\n    StringDistance differentDistance = new NGramDistance(3);\n    if(sameDistance1.equals(differentDistance)) {\n      differentDistance = new NGramDistance(4);\n      if(sameDistance1.equals(differentDistance)) {\n        fail(\"Cannot set up test.  2 NGramDistances with different gram sizes should not be equal.\");\n      }\n    }\n    Assert.assertEquals(\"The distance \" + sameDistance + \" does not properly implement equals.\", sameDistance1, sameDistance2);\n    \n    \n    MockSolrSpellChecker checker1 = new MockSolrSpellChecker(sameDistance1);\n    MockSolrSpellChecker checker2 = new MockSolrSpellChecker(sameDistance2);\n    MockSolrSpellChecker checker3 = new MockSolrSpellChecker(differentDistance);\n    \n    cssc.addChecker(checker1);\n    cssc.addChecker(checker2);\n    expectThrows(IllegalArgumentException.class, () -> cssc.addChecker(checker3));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    ConjunctionSolrSpellChecker cssc = new ConjunctionSolrSpellChecker();\n    @SuppressWarnings(\"unchecked\")\n    Class<StringDistance> sameDistance = (Class<StringDistance>) AVAILABLE_DISTANCES[random().nextInt(AVAILABLE_DISTANCES.length)];\n    \n    StringDistance sameDistance1 = sameDistance.getConstructor().newInstance();\n    StringDistance sameDistance2 = sameDistance.getConstructor().newInstance();\n    \n    //NGramDistance defaults to 2, so we'll try 3 or 4 to ensure we have one that is not-equal.\n    StringDistance differentDistance = new NGramDistance(3);\n    if(sameDistance1.equals(differentDistance)) {\n      differentDistance = new NGramDistance(4);\n      if(sameDistance1.equals(differentDistance)) {\n        fail(\"Cannot set up test.  2 NGramDistances with different gram sizes should not be equal.\");\n      }\n    }\n    Assert.assertEquals(\"The distance \" + sameDistance + \" does not properly implement equals.\", sameDistance1, sameDistance2);\n    \n    \n    MockSolrSpellChecker checker1 = new MockSolrSpellChecker(sameDistance1);\n    MockSolrSpellChecker checker2 = new MockSolrSpellChecker(sameDistance2);\n    MockSolrSpellChecker checker3 = new MockSolrSpellChecker(differentDistance);\n    \n    cssc.addChecker(checker1);\n    cssc.addChecker(checker2);\n    try {\n      cssc.addChecker(checker3);\n      fail(\"ConjunctionSolrSpellChecker should have thrown an exception about non-identical StringDistances.\");\n    } catch (IllegalArgumentException iae) {\n      // correct behavior\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1cc17990871fe421019acbdd0ed59c8644b9154c":["d042843368f0d289e28164525546259d89d6dbb6","8a5b40aa0e4052014f868a1f29d5e611c9dd9603"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["1cc17990871fe421019acbdd0ed59c8644b9154c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a5b40aa0e4052014f868a1f29d5e611c9dd9603":["d042843368f0d289e28164525546259d89d6dbb6"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["b88a121b875f9ae2ac50f85cf46dcb680f126357","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"d042843368f0d289e28164525546259d89d6dbb6":["018154532bcbac1068a66011cafb190e2b42fed3"],"f8061ddd97f3352007d927dae445884a6f3d857b":["b88a121b875f9ae2ac50f85cf46dcb680f126357","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"],"018154532bcbac1068a66011cafb190e2b42fed3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1cc17990871fe421019acbdd0ed59c8644b9154c":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"8a5b40aa0e4052014f868a1f29d5e611c9dd9603":["1cc17990871fe421019acbdd0ed59c8644b9154c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["018154532bcbac1068a66011cafb190e2b42fed3"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"d042843368f0d289e28164525546259d89d6dbb6":["1cc17990871fe421019acbdd0ed59c8644b9154c","8a5b40aa0e4052014f868a1f29d5e611c9dd9603"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"018154532bcbac1068a66011cafb190e2b42fed3":["d042843368f0d289e28164525546259d89d6dbb6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}