{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#publishState(CoreDescriptor,String,String,Map[String,String]).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publishState(CoreDescriptor,String,String,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  private void publishState(CoreDescriptor cd, String shardZkNodeName, String coreName,\n      Map<String,String> props) {\n    CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n    \n    if (cloudDesc.getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getCloudState(), shardZkNodeName)) {\n      // publish with no shard id so we are assigned one, and then look for it\n      doPublish(shardZkNodeName, coreName, props, cloudDesc);\n      String shardId;\n      try {\n        shardId = doGetShardIdProcess(coreName, cloudDesc);\n      } catch (InterruptedException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n      }\n      cloudDesc.setShardId(shardId);\n    }\n   \n    \n    if (!props.containsKey(ZkStateReader.SHARD_ID_PROP) && cloudDesc.getShardId() != null) {\n      props.put(ZkStateReader.SHARD_ID_PROP, cloudDesc.getShardId());\n    }\n    \n    doPublish(shardZkNodeName, coreName, props, cloudDesc);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publishState(CoreDescriptor,String,String,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  private void publishState(CoreDescriptor cd, String shardZkNodeName, String coreName,\n      Map<String,String> props) {\n    CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n    \n    if (cloudDesc.getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getCloudState(), shardZkNodeName)) {\n      // publish with no shard id so we are assigned one, and then look for it\n      doPublish(shardZkNodeName, coreName, props, cloudDesc);\n      String shardId;\n      try {\n        shardId = doGetShardIdProcess(coreName, cloudDesc);\n      } catch (InterruptedException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n      }\n      cloudDesc.setShardId(shardId);\n    }\n   \n    \n    if (!props.containsKey(ZkStateReader.SHARD_ID_PROP) && cloudDesc.getShardId() != null) {\n      props.put(ZkStateReader.SHARD_ID_PROP, cloudDesc.getShardId());\n    }\n    \n    doPublish(shardZkNodeName, coreName, props, cloudDesc);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publishState(CoreDescriptor,String,String,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  private void publishState(CoreDescriptor cd, String shardZkNodeName, String coreName,\n      Map<String,String> props) {\n    CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n    \n    if (cloudDesc.getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getCloudState(), shardZkNodeName)) {\n      // publish with no shard id so we are assigned one, and then look for it\n      doPublish(shardZkNodeName, coreName, props, cloudDesc);\n      String shardId;\n      try {\n        shardId = doGetShardIdProcess(coreName, cloudDesc);\n      } catch (InterruptedException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n      }\n      cloudDesc.setShardId(shardId);\n    }\n   \n    \n    if (!props.containsKey(ZkStateReader.SHARD_ID_PROP) && cloudDesc.getShardId() != null) {\n      props.put(ZkStateReader.SHARD_ID_PROP, cloudDesc.getShardId());\n    }\n    \n    doPublish(shardZkNodeName, coreName, props, cloudDesc);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea4018996a4853ecfb1c797beede737c90da6c3b","date":1329429759,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publishState(CoreDescriptor,String,String,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publishState(CoreDescriptor,String,String,Map[String,String]).mjava","sourceNew":"  private void publishState(CoreDescriptor cd, String shardZkNodeName, String coreName,\n      Map<String,String> props) {\n    CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n    if (cloudDesc.getRoles() != null) {\n      props.put(ZkStateReader.ROLES_PROP, cloudDesc.getRoles());\n    }\n    \n    if (cloudDesc.getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getCloudState(), shardZkNodeName)) {\n      // publish with no shard id so we are assigned one, and then look for it\n      doPublish(shardZkNodeName, coreName, props, cloudDesc);\n      String shardId;\n      try {\n        shardId = doGetShardIdProcess(coreName, cloudDesc);\n      } catch (InterruptedException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n      }\n      cloudDesc.setShardId(shardId);\n    }\n   \n    \n    if (!props.containsKey(ZkStateReader.SHARD_ID_PROP) && cloudDesc.getShardId() != null) {\n      props.put(ZkStateReader.SHARD_ID_PROP, cloudDesc.getShardId());\n    }\n    \n    doPublish(shardZkNodeName, coreName, props, cloudDesc);\n  }\n\n","sourceOld":"  private void publishState(CoreDescriptor cd, String shardZkNodeName, String coreName,\n      Map<String,String> props) {\n    CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n    \n    if (cloudDesc.getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getCloudState(), shardZkNodeName)) {\n      // publish with no shard id so we are assigned one, and then look for it\n      doPublish(shardZkNodeName, coreName, props, cloudDesc);\n      String shardId;\n      try {\n        shardId = doGetShardIdProcess(coreName, cloudDesc);\n      } catch (InterruptedException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n      }\n      cloudDesc.setShardId(shardId);\n    }\n   \n    \n    if (!props.containsKey(ZkStateReader.SHARD_ID_PROP) && cloudDesc.getShardId() != null) {\n      props.put(ZkStateReader.SHARD_ID_PROP, cloudDesc.getShardId());\n    }\n    \n    doPublish(shardZkNodeName, coreName, props, cloudDesc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":4,"author":"Sami Siren","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publishState(CoreDescriptor,String,String,Map[String,String]).mjava","sourceNew":null,"sourceOld":"  private void publishState(CoreDescriptor cd, String shardZkNodeName, String coreName,\n      Map<String,String> props) {\n    CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n    if (cloudDesc.getRoles() != null) {\n      props.put(ZkStateReader.ROLES_PROP, cloudDesc.getRoles());\n    }\n    \n    if (cloudDesc.getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getCloudState(), shardZkNodeName)) {\n      // publish with no shard id so we are assigned one, and then look for it\n      doPublish(shardZkNodeName, coreName, props, cloudDesc);\n      String shardId;\n      try {\n        shardId = doGetShardIdProcess(coreName, cloudDesc);\n      } catch (InterruptedException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n      }\n      cloudDesc.setShardId(shardId);\n    }\n   \n    \n    if (!props.containsKey(ZkStateReader.SHARD_ID_PROP) && cloudDesc.getShardId() != null) {\n      props.put(ZkStateReader.SHARD_ID_PROP, cloudDesc.getShardId());\n    }\n    \n    doPublish(shardZkNodeName, coreName, props, cloudDesc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ea4018996a4853ecfb1c797beede737c90da6c3b":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5093a9e893633cc091cf2f729d7863671c2b715":["ea4018996a4853ecfb1c797beede737c90da6c3b"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a5093a9e893633cc091cf2f729d7863671c2b715"]},"commit2Childs":{"ea4018996a4853ecfb1c797beede737c90da6c3b":["a5093a9e893633cc091cf2f729d7863671c2b715"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a5093a9e893633cc091cf2f729d7863671c2b715":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["ea4018996a4853ecfb1c797beede737c90da6c3b","0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}