{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#writeNormsField(FieldInfo,Iterable[Number],int).mjava","commits":[{"id":"e15c57be968dbcac6fd3f87af0bd26a8f023e069","date":1413564565,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#writeNormsField(FieldInfo,Iterable[Number],int).mjava","pathOld":"/dev/null","sourceNew":"  private void writeNormsField(FieldInfo field, Iterable<Number> values, int level) throws IOException {\n    assert level <= 1; // we only \"recurse\" once in the indirect case\n    meta.writeVInt(field.number);\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    // TODO: more efficient?\n    NormMap uniqueValues = new NormMap();\n    \n    int count = 0;\n    \n    for (Number nv : values) {\n      if (nv == null) {\n        throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", got null for value: \" + count);\n      }\n      final long v = nv.longValue();\n      \n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      \n      if (uniqueValues != null) {\n        if (uniqueValues.add(v)) {\n          if (uniqueValues.size > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n      count++;\n    }\n    if (uniqueValues != null && uniqueValues.size == 1) {\n      // 0 bpv\n      addConstant(minValue);\n    } else if (level == 0 && count > 256 && uniqueValues != null && uniqueValues.maxFreq() > count * INDIRECT_THRESHOLD) {\n      long commonValue = uniqueValues.getDecodeTable()[uniqueValues.maxOrd()];\n      if (commonValue == 0) {\n        // if the common value is missing, don't waste RAM on a bitset, since we won't be searching those docs\n        addIndirect(field, values, count, uniqueValues);\n      } else {\n        // otherwise, write a sparse bitset, where 1 indicates 'uncommon value'.\n        addPatched(field, values, count, uniqueValues);\n      }\n    } else if (uniqueValues != null) {\n      // small number of unique values: this is the typical case:\n      FormatAndBits compression = fastestFormatAndBits(uniqueValues.size-1);\n      \n      if (compression.bitsPerValue == 8 && minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE) {\n        addUncompressed(values, count);\n      } else {\n        addTableCompressed(values, compression, count, uniqueValues);\n      }\n    } else {\n      addDeltaCompressed(values, count);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#writeNormsField(FieldInfo,Iterable[Number],int).mjava","pathOld":"/dev/null","sourceNew":"  private void writeNormsField(FieldInfo field, Iterable<Number> values, int level) throws IOException {\n    assert level <= 1; // we only \"recurse\" once in the indirect case\n    meta.writeVInt(field.number);\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    // TODO: more efficient?\n    NormMap uniqueValues = new NormMap();\n    \n    int count = 0;\n    \n    for (Number nv : values) {\n      if (nv == null) {\n        throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", got null for value: \" + count);\n      }\n      final long v = nv.longValue();\n      \n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      \n      if (uniqueValues != null) {\n        if (uniqueValues.add(v)) {\n          if (uniqueValues.size > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n      count++;\n    }\n    if (uniqueValues != null && uniqueValues.size == 1) {\n      // 0 bpv\n      addConstant(minValue);\n    } else if (level == 0 && count > 256 && uniqueValues != null && uniqueValues.maxFreq() > count * INDIRECT_THRESHOLD) {\n      long commonValue = uniqueValues.getDecodeTable()[uniqueValues.maxOrd()];\n      if (commonValue == 0) {\n        // if the common value is missing, don't waste RAM on a bitset, since we won't be searching those docs\n        addIndirect(field, values, count, uniqueValues);\n      } else {\n        // otherwise, write a sparse bitset, where 1 indicates 'uncommon value'.\n        addPatched(field, values, count, uniqueValues);\n      }\n    } else if (uniqueValues != null) {\n      // small number of unique values: this is the typical case:\n      FormatAndBits compression = fastestFormatAndBits(uniqueValues.size-1);\n      \n      if (compression.bitsPerValue == 8 && minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE) {\n        addUncompressed(values, count);\n      } else {\n        addTableCompressed(values, compression, count, uniqueValues);\n      }\n    } else {\n      addDeltaCompressed(values, count);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c3fae32338d82a0710e1756793faba13dcb598b","date":1414786590,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#writeNormsField(FieldInfo,Iterable[Number],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#writeNormsField(FieldInfo,Iterable[Number],int).mjava","sourceNew":"  private void writeNormsField(FieldInfo field, Iterable<Number> values, int level) throws IOException {\n    assert level <= 1; // we only \"recurse\" once in the indirect case\n    meta.writeVInt(field.number);\n    NormMap uniqueValues = new NormMap();\n    int count = 0;\n    \n    for (Number nv : values) {\n      if (nv == null) {\n        throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", got null for value: \" + count);\n      }\n      final long v = nv.longValue();\n\n      if (uniqueValues != null) {\n        if (v >= Byte.MIN_VALUE && v <= Byte.MAX_VALUE) {\n          if (uniqueValues.add((byte) v)) {\n            if (uniqueValues.size > 256) {\n              uniqueValues = null;\n            }\n          }\n        } else {\n          // anything outside an 8 bit float comes from a custom scorer, which is an extreme edge case\n          uniqueValues = null;\n        }\n      }\n      count++;\n    }\n\n    if (uniqueValues == null) {\n      addDeltaCompressed(values, count);\n    } else if (uniqueValues.size == 1) {\n      // 0 bpv\n      addConstant(uniqueValues.values[0]);\n    } else {\n      // small number of unique values: this is the typical case\n      uniqueValues.optimizeOrdinals();\n      \n      int numCommonValues = -1;\n      int commonValuesCount = 0;\n      if (level == 0 && count > 256) {\n        float threshold_count = count * INDIRECT_THRESHOLD;\n        if (uniqueValues.freqs[0] > threshold_count) {\n          numCommonValues = 1;\n        } else if ((commonValuesCount = sum(uniqueValues.freqs, 0, 3)) > threshold_count && uniqueValues.size > 4) {\n          numCommonValues = 3;\n        } else if ((commonValuesCount = sum(uniqueValues.freqs, 0, 15)) > threshold_count && uniqueValues.size > 16) {\n          numCommonValues = 15;\n        }\n      }\n\n      if (numCommonValues == -1) {\n        // no pattern in values, just find the most efficient way to pack the values\n        FormatAndBits compression = fastestFormatAndBits(uniqueValues.size - 1);\n        if (compression.bitsPerValue == 8) {\n          addUncompressed(values, count);\n        } else {\n          addTableCompressed(values, compression, count, uniqueValues);\n        }\n        \n      } else if (numCommonValues == 1) {\n        byte commonValue = uniqueValues.values[0];\n        if (commonValue == 0) {\n          // if the common value is missing, don't waste RAM on a bitset, since we won't be searching those docs\n          addIndirect(field, values, count, uniqueValues, 0);\n        } else {\n          // otherwise, write a sparse bitset, where 1 indicates 'uncommon value'.\n          addPatchedBitset(field, values, count, uniqueValues);\n        }\n      } else {\n        addPatchedTable(field, values, numCommonValues, commonValuesCount, count, uniqueValues);\n      }\n    }\n  }\n\n","sourceOld":"  private void writeNormsField(FieldInfo field, Iterable<Number> values, int level) throws IOException {\n    assert level <= 1; // we only \"recurse\" once in the indirect case\n    meta.writeVInt(field.number);\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    // TODO: more efficient?\n    NormMap uniqueValues = new NormMap();\n    \n    int count = 0;\n    \n    for (Number nv : values) {\n      if (nv == null) {\n        throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", got null for value: \" + count);\n      }\n      final long v = nv.longValue();\n      \n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      \n      if (uniqueValues != null) {\n        if (uniqueValues.add(v)) {\n          if (uniqueValues.size > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n      count++;\n    }\n    if (uniqueValues != null && uniqueValues.size == 1) {\n      // 0 bpv\n      addConstant(minValue);\n    } else if (level == 0 && count > 256 && uniqueValues != null && uniqueValues.maxFreq() > count * INDIRECT_THRESHOLD) {\n      long commonValue = uniqueValues.getDecodeTable()[uniqueValues.maxOrd()];\n      if (commonValue == 0) {\n        // if the common value is missing, don't waste RAM on a bitset, since we won't be searching those docs\n        addIndirect(field, values, count, uniqueValues);\n      } else {\n        // otherwise, write a sparse bitset, where 1 indicates 'uncommon value'.\n        addPatched(field, values, count, uniqueValues);\n      }\n    } else if (uniqueValues != null) {\n      // small number of unique values: this is the typical case:\n      FormatAndBits compression = fastestFormatAndBits(uniqueValues.size-1);\n      \n      if (compression.bitsPerValue == 8 && minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE) {\n        addUncompressed(values, count);\n      } else {\n        addTableCompressed(values, compression, count, uniqueValues);\n      }\n    } else {\n      addDeltaCompressed(values, count);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","date":1434069165,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#writeNormsField(FieldInfo,Iterable[Number],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#writeNormsField(FieldInfo,Iterable[Number],int).mjava","sourceNew":"  private void writeNormsField(FieldInfo field, Iterable<Number> values, int level) throws IOException {\n    assert level <= 1; // we only \"recurse\" once in the indirect case\n    meta.writeVInt(field.number);\n    NormMap uniqueValues = new NormMap();\n    int count = 0;\n    \n    for (Number nv : values) {\n      if (nv == null) {\n        throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", got null for value: \" + count);\n      }\n      final long v = nv.longValue();\n\n      if (uniqueValues != null) {\n        if (v >= Byte.MIN_VALUE && v <= Byte.MAX_VALUE) {\n          if (uniqueValues.add((byte) v)) {\n            if (uniqueValues.size > 256) {\n              uniqueValues = null;\n            }\n          }\n        } else {\n          // anything outside an 8 bit float comes from a custom scorer, which is an extreme edge case\n          uniqueValues = null;\n        }\n      }\n      count++;\n    }\n\n    if (uniqueValues == null) {\n      addDeltaCompressed(values, count);\n    } else if (uniqueValues.size == 1) {\n      // 0 bpv\n      addConstant(uniqueValues.values[0]);\n    } else {\n      // small number of unique values: this is the typical case\n      uniqueValues.optimizeOrdinals();\n      \n      int numCommonValues = -1;\n      int commonValuesCount = 0;\n      if (level == 0 && count > 256) {\n        float threshold_count = count * INDIRECT_THRESHOLD;\n        if (uniqueValues.freqs[0] > threshold_count) {\n          numCommonValues = 1;\n        } else if ((commonValuesCount = sum(uniqueValues.freqs, 0, 3)) > threshold_count && uniqueValues.size > 4) {\n          numCommonValues = 3;\n        } else if ((commonValuesCount = sum(uniqueValues.freqs, 0, 15)) > threshold_count && uniqueValues.size > 16) {\n          numCommonValues = 15;\n        }\n      }\n\n      if (numCommonValues == -1) {\n        // no pattern in values, just find the most efficient way to pack the values\n        FormatAndBits compression = fastestFormatAndBits(uniqueValues.size - 1);\n        if (compression.bitsPerValue == 8) {\n          addUncompressed(values, count);\n        } else {\n          addTableCompressed(values, compression, count, uniqueValues);\n        }\n        \n      } else if (numCommonValues == 1) {\n        byte commonValue = uniqueValues.values[0];\n        if (commonValue == 0) {\n          // if the common value is missing, don't waste RAM on a bitset, since we won't be searching those docs\n          addIndirect(field, values, count, uniqueValues, 0);\n        } else {\n          // otherwise, write a sparse bitset, where 1 indicates 'uncommon value'.\n          addPatchedBitset(field, values, count, uniqueValues);\n        }\n      } else {\n        addPatchedTable(field, values, numCommonValues, commonValuesCount, count, uniqueValues);\n      }\n    }\n  }\n\n","sourceOld":"  private void writeNormsField(FieldInfo field, Iterable<Number> values, int level) throws IOException {\n    assert level <= 1; // we only \"recurse\" once in the indirect case\n    meta.writeVInt(field.number);\n    NormMap uniqueValues = new NormMap();\n    int count = 0;\n    \n    for (Number nv : values) {\n      if (nv == null) {\n        throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", got null for value: \" + count);\n      }\n      final long v = nv.longValue();\n\n      if (uniqueValues != null) {\n        if (v >= Byte.MIN_VALUE && v <= Byte.MAX_VALUE) {\n          if (uniqueValues.add((byte) v)) {\n            if (uniqueValues.size > 256) {\n              uniqueValues = null;\n            }\n          }\n        } else {\n          // anything outside an 8 bit float comes from a custom scorer, which is an extreme edge case\n          uniqueValues = null;\n        }\n      }\n      count++;\n    }\n\n    if (uniqueValues == null) {\n      addDeltaCompressed(values, count);\n    } else if (uniqueValues.size == 1) {\n      // 0 bpv\n      addConstant(uniqueValues.values[0]);\n    } else {\n      // small number of unique values: this is the typical case\n      uniqueValues.optimizeOrdinals();\n      \n      int numCommonValues = -1;\n      int commonValuesCount = 0;\n      if (level == 0 && count > 256) {\n        float threshold_count = count * INDIRECT_THRESHOLD;\n        if (uniqueValues.freqs[0] > threshold_count) {\n          numCommonValues = 1;\n        } else if ((commonValuesCount = sum(uniqueValues.freqs, 0, 3)) > threshold_count && uniqueValues.size > 4) {\n          numCommonValues = 3;\n        } else if ((commonValuesCount = sum(uniqueValues.freqs, 0, 15)) > threshold_count && uniqueValues.size > 16) {\n          numCommonValues = 15;\n        }\n      }\n\n      if (numCommonValues == -1) {\n        // no pattern in values, just find the most efficient way to pack the values\n        FormatAndBits compression = fastestFormatAndBits(uniqueValues.size - 1);\n        if (compression.bitsPerValue == 8) {\n          addUncompressed(values, count);\n        } else {\n          addTableCompressed(values, compression, count, uniqueValues);\n        }\n        \n      } else if (numCommonValues == 1) {\n        byte commonValue = uniqueValues.values[0];\n        if (commonValue == 0) {\n          // if the common value is missing, don't waste RAM on a bitset, since we won't be searching those docs\n          addIndirect(field, values, count, uniqueValues, 0);\n        } else {\n          // otherwise, write a sparse bitset, where 1 indicates 'uncommon value'.\n          addPatchedBitset(field, values, count, uniqueValues);\n        }\n      } else {\n        addPatchedTable(field, values, numCommonValues, commonValuesCount, count, uniqueValues);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["0c3fae32338d82a0710e1756793faba13dcb598b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0c3fae32338d82a0710e1756793faba13dcb598b":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"e15c57be968dbcac6fd3f87af0bd26a8f023e069":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e15c57be968dbcac6fd3f87af0bd26a8f023e069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"]},"commit2Childs":{"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e15c57be968dbcac6fd3f87af0bd26a8f023e069","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"0c3fae32338d82a0710e1756793faba13dcb598b":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"],"e15c57be968dbcac6fd3f87af0bd26a8f023e069":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["0c3fae32338d82a0710e1756793faba13dcb598b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}