{"path":"modules/facet/src/examples/org/apache/lucene/facet/example/multiCL/MultiCLIndexer#index(Directory,Directory).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/examples/org/apache/lucene/facet/example/multiCL/MultiCLIndexer#index(Directory,Directory).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create an index, and adds to it sample documents and facets.\n   * @param indexDir Directory in which the index should be created.\n   * @param taxoDir Directory in which the taxonomy index should be created.\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   */\n  public static void index(Directory indexDir, Directory taxoDir)\n      throws Exception {\n\n    Random random = new Random(2003);\n\n    String[] docTitles = new String[NUM_DOCS];\n    String[] docTexts = new String[NUM_DOCS];\n    CategoryPath[][] cPaths = new CategoryPath[NUM_DOCS][NUM_FACETS_PER_DOC];\n\n    String[] tokens = words.split(\" \");\n    for (int docNum = 0; docNum < NUM_DOCS; docNum++) {\n      String title = \"\";\n      String text = \"\";\n      for (int j = 0; j < TITLE_LENGTH; j++) {\n        title = title + tokens[random.nextInt(tokens.length)] + \" \";\n      }\n      docTitles[docNum] = title;\n\n      for (int j = 0; j < TEXT_LENGTH; j++) {\n        text = text + tokens[random.nextInt(tokens.length)] + \" \";\n      }\n      docTexts[docNum] = text;\n\n      for (int facetNum = 0; facetNum < NUM_FACETS_PER_DOC; facetNum++) {\n        cPaths[docNum][facetNum] = new CategoryPath(Integer\n            .toString(random.nextInt(7)), Integer.toString(random.nextInt(10)));\n      }\n    }\n    index(indexDir, taxoDir, MULTI_IPARAMS, docTitles, docTexts, cPaths);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/examples/org/apache/lucene/facet/example/multiCL/MultiCLIndexer#index(Directory,Directory).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create an index, and adds to it sample documents and facets.\n   * @param indexDir Directory in which the index should be created.\n   * @param taxoDir Directory in which the taxonomy index should be created.\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   */\n  public static void index(Directory indexDir, Directory taxoDir)\n      throws Exception {\n\n    Random random = new Random(2003);\n\n    String[] docTitles = new String[NUM_DOCS];\n    String[] docTexts = new String[NUM_DOCS];\n    CategoryPath[][] cPaths = new CategoryPath[NUM_DOCS][NUM_FACETS_PER_DOC];\n\n    String[] tokens = words.split(\" \");\n    for (int docNum = 0; docNum < NUM_DOCS; docNum++) {\n      String title = \"\";\n      String text = \"\";\n      for (int j = 0; j < TITLE_LENGTH; j++) {\n        title = title + tokens[random.nextInt(tokens.length)] + \" \";\n      }\n      docTitles[docNum] = title;\n\n      for (int j = 0; j < TEXT_LENGTH; j++) {\n        text = text + tokens[random.nextInt(tokens.length)] + \" \";\n      }\n      docTexts[docNum] = text;\n\n      for (int facetNum = 0; facetNum < NUM_FACETS_PER_DOC; facetNum++) {\n        cPaths[docNum][facetNum] = new CategoryPath(Integer\n            .toString(random.nextInt(7)), Integer.toString(random.nextInt(10)));\n      }\n    }\n    index(indexDir, taxoDir, MULTI_IPARAMS, docTitles, docTexts, cPaths);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/examples/org/apache/lucene/facet/example/multiCL/MultiCLIndexer#index(Directory,Directory).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create an index, and adds to it sample documents and facets.\n   * @param indexDir Directory in which the index should be created.\n   * @param taxoDir Directory in which the taxonomy index should be created.\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   */\n  public static void index(Directory indexDir, Directory taxoDir)\n      throws Exception {\n\n    Random random = new Random(2003);\n\n    String[] docTitles = new String[NUM_DOCS];\n    String[] docTexts = new String[NUM_DOCS];\n    CategoryPath[][] cPaths = new CategoryPath[NUM_DOCS][NUM_FACETS_PER_DOC];\n\n    String[] tokens = words.split(\" \");\n    for (int docNum = 0; docNum < NUM_DOCS; docNum++) {\n      String title = \"\";\n      String text = \"\";\n      for (int j = 0; j < TITLE_LENGTH; j++) {\n        title = title + tokens[random.nextInt(tokens.length)] + \" \";\n      }\n      docTitles[docNum] = title;\n\n      for (int j = 0; j < TEXT_LENGTH; j++) {\n        text = text + tokens[random.nextInt(tokens.length)] + \" \";\n      }\n      docTexts[docNum] = text;\n\n      for (int facetNum = 0; facetNum < NUM_FACETS_PER_DOC; facetNum++) {\n        cPaths[docNum][facetNum] = new CategoryPath(Integer\n            .toString(random.nextInt(7)), Integer.toString(random.nextInt(10)));\n      }\n    }\n    index(indexDir, taxoDir, MULTI_IPARAMS, docTitles, docTexts, cPaths);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/examples/org/apache/lucene/facet/example/multiCL/MultiCLIndexer#index(Directory,Directory).mjava","pathOld":"modules/facet/src/examples/org/apache/lucene/facet/example/multiCL/MultiCLIndexer#index(Directory,Directory).mjava","sourceNew":"  /**\n   * Create an index, and adds to it sample documents and facets.\n   * @param indexDir Directory in which the index should be created.\n   * @param taxoDir Directory in which the taxonomy index should be created.\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   */\n  public static void index(Directory indexDir, Directory taxoDir)\n      throws Exception {\n\n    Random random = new Random(2003);\n\n    String[] docTitles = new String[NUM_DOCS];\n    String[] docTexts = new String[NUM_DOCS];\n    CategoryPath[][] cPaths = new CategoryPath[NUM_DOCS][NUM_FACETS_PER_DOC];\n\n    String[] tokens = words.split(\" \");\n    for (int docNum = 0; docNum < NUM_DOCS; docNum++) {\n      String title = \"\";\n      String text = \"\";\n      for (int j = 0; j < TITLE_LENGTH; j++) {\n        title = title + tokens[random.nextInt(tokens.length)] + \" \";\n      }\n      docTitles[docNum] = title;\n\n      for (int j = 0; j < TEXT_LENGTH; j++) {\n        text = text + tokens[random.nextInt(tokens.length)] + \" \";\n      }\n      docTexts[docNum] = text;\n\n      for (int facetNum = 0; facetNum < NUM_FACETS_PER_DOC; facetNum++) {\n        cPaths[docNum][facetNum] = new CategoryPath(Integer\n            .toString(random.nextInt(7)), Integer.toString(random.nextInt(10)));\n      }\n    }\n    index(indexDir, taxoDir, MULTI_IPARAMS, docTitles, docTexts, cPaths);\n  }\n\n","sourceOld":"  /**\n   * Create an index, and adds to it sample documents and facets.\n   * @param indexDir Directory in which the index should be created.\n   * @param taxoDir Directory in which the taxonomy index should be created.\n   * @throws Exception on error (no detailed exception handling here for sample simplicity\n   */\n  public static void index(Directory indexDir, Directory taxoDir)\n      throws Exception {\n\n    Random random = new Random(2003);\n\n    String[] docTitles = new String[NUM_DOCS];\n    String[] docTexts = new String[NUM_DOCS];\n    CategoryPath[][] cPaths = new CategoryPath[NUM_DOCS][NUM_FACETS_PER_DOC];\n\n    String[] tokens = words.split(\" \");\n    for (int docNum = 0; docNum < NUM_DOCS; docNum++) {\n      String title = \"\";\n      String text = \"\";\n      for (int j = 0; j < TITLE_LENGTH; j++) {\n        title = title + tokens[random.nextInt(tokens.length)] + \" \";\n      }\n      docTitles[docNum] = title;\n\n      for (int j = 0; j < TEXT_LENGTH; j++) {\n        text = text + tokens[random.nextInt(tokens.length)] + \" \";\n      }\n      docTexts[docNum] = text;\n\n      for (int facetNum = 0; facetNum < NUM_FACETS_PER_DOC; facetNum++) {\n        cPaths[docNum][facetNum] = new CategoryPath(Integer\n            .toString(random.nextInt(7)), Integer.toString(random.nextInt(10)));\n      }\n    }\n    index(indexDir, taxoDir, MULTI_IPARAMS, docTitles, docTexts, cPaths);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}