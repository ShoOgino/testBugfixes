{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/function/BooleanConsumer#andThen(BooleanConsumer).mjava","commits":[{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/function/BooleanConsumer#andThen(BooleanConsumer).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a composed {@code DoubleConsumer} that performs, in sequence, this\n   * operation followed by the {@code after} operation. If performing either\n   * operation throws an exception, it is relayed to the caller of the\n   * composed operation.  If performing this operation throws an exception,\n   * the {@code after} operation will not be performed.\n   *\n   * @param after the operation to perform after this operation\n   * @return a composed {@code DoubleConsumer} that performs in sequence this\n   * operation followed by the {@code after} operation\n   * @throws NullPointerException if {@code after} is null\n   */\n  default BooleanConsumer andThen(BooleanConsumer after) {\n    Objects.requireNonNull(after);\n    return (boolean t) -> { accept(t); after.accept(t); };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/function/BooleanConsumer#andThen(BooleanConsumer).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a composed {@code DoubleConsumer} that performs, in sequence, this\n   * operation followed by the {@code after} operation. If performing either\n   * operation throws an exception, it is relayed to the caller of the\n   * composed operation.  If performing this operation throws an exception,\n   * the {@code after} operation will not be performed.\n   *\n   * @param after the operation to perform after this operation\n   * @return a composed {@code DoubleConsumer} that performs in sequence this\n   * operation followed by the {@code after} operation\n   * @throws NullPointerException if {@code after} is null\n   */\n  default BooleanConsumer andThen(BooleanConsumer after) {\n    Objects.requireNonNull(after);\n    return (boolean t) -> { accept(t); after.accept(t); };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/function/BooleanConsumer#andThen(BooleanConsumer).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a composed {@code DoubleConsumer} that performs, in sequence, this\n   * operation followed by the {@code after} operation. If performing either\n   * operation throws an exception, it is relayed to the caller of the\n   * composed operation.  If performing this operation throws an exception,\n   * the {@code after} operation will not be performed.\n   *\n   * @param after the operation to perform after this operation\n   * @return a composed {@code DoubleConsumer} that performs in sequence this\n   * operation followed by the {@code after} operation\n   * @throws NullPointerException if {@code after} is null\n   */\n  default BooleanConsumer andThen(BooleanConsumer after) {\n    Objects.requireNonNull(after);\n    return (boolean t) -> { accept(t); after.accept(t); };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}