{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(LeafReaderContext,Bits,boolean).mjava","commits":[{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(LeafReaderContext,Bits,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs, boolean needsScores) throws IOException {\n      // initially the user provided value,\n      // but if minNrShouldMatch == optional.size(),\n      // we will optimize and move these to required, making this 0\n      int minShouldMatch = minNrShouldMatch;\n\n      List<Scorer> required = new ArrayList<>();\n      List<Scorer> prohibited = new ArrayList<>();\n      List<Scorer> optional = new ArrayList<>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        Scorer subScorer = w.scorer(context, acceptDocs, needsScores && c.isProhibited() == false);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n      \n      // scorer simplifications:\n      \n      if (optional.size() == minShouldMatch) {\n        // any optional clauses are in fact required\n        required.addAll(optional);\n        optional.clear();\n        minShouldMatch = 0;\n      }\n      \n      if (required.isEmpty() && optional.isEmpty()) {\n        // no required and optional clauses.\n        return null;\n      } else if (optional.size() < minShouldMatch) {\n        // either >1 req scorer, or there are 0 req scorers and at least 1\n        // optional scorer. Therefore if there are not enough optional scorers\n        // no documents will be matched by the query\n        return null;\n      }\n      \n      // we don't need scores, so if we have required clauses, drop optional clauses completely\n      if (!needsScores && minShouldMatch == 0 && required.size() > 0) {\n        optional.clear();\n      }\n      \n      // three cases: conjunction, disjunction, or mix\n      \n      // pure conjunction\n      if (optional.isEmpty()) {\n        return excl(req(required, disableCoord), prohibited);\n      }\n      \n      // pure disjunction\n      if (required.isEmpty()) {\n        return excl(opt(optional, minShouldMatch, disableCoord), prohibited);\n      }\n      \n      // conjunction-disjunction mix:\n      // we create the required and optional pieces with coord disabled, and then\n      // combine the two: if minNrShouldMatch > 0, then it's a conjunction: because the\n      // optional side must match. otherwise it's required + optional, factoring the\n      // number of optional terms into the coord calculation\n      \n      Scorer req = excl(req(required, true), prohibited);\n      Scorer opt = opt(optional, minShouldMatch, true);\n\n      // TODO: clean this up: it's horrible\n      if (disableCoord) {\n        if (minShouldMatch > 0) {\n          return new ConjunctionScorer(this, new Scorer[] { req, opt }, 1F);\n        } else {\n          return new ReqOptSumScorer(req, opt);          \n        }\n      } else if (optional.size() == 1) {\n        if (minShouldMatch > 0) {\n          return new ConjunctionScorer(this, new Scorer[] { req, opt }, coord(required.size()+1, maxCoord));\n        } else {\n          float coordReq = coord(required.size(), maxCoord);\n          float coordBoth = coord(required.size() + 1, maxCoord);\n          return new BooleanTopLevelScorers.ReqSingleOptScorer(req, opt, coordReq, coordBoth);\n        }\n      } else {\n        if (minShouldMatch > 0) {\n          return new BooleanTopLevelScorers.CoordinatingConjunctionScorer(this, coords(), req, required.size(), opt);\n        } else {\n          return new BooleanTopLevelScorers.ReqMultiOptScorer(req, opt, required.size(), coords()); \n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs)\n        throws IOException {\n      // initially the user provided value,\n      // but if minNrShouldMatch == optional.size(),\n      // we will optimize and move these to required, making this 0\n      int minShouldMatch = minNrShouldMatch;\n\n      List<Scorer> required = new ArrayList<>();\n      List<Scorer> prohibited = new ArrayList<>();\n      List<Scorer> optional = new ArrayList<>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        Scorer subScorer = w.scorer(context, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n      \n      // scorer simplifications:\n      \n      if (optional.size() == minShouldMatch) {\n        // any optional clauses are in fact required\n        required.addAll(optional);\n        optional.clear();\n        minShouldMatch = 0;\n      }\n      \n      if (required.isEmpty() && optional.isEmpty()) {\n        // no required and optional clauses.\n        return null;\n      } else if (optional.size() < minShouldMatch) {\n        // either >1 req scorer, or there are 0 req scorers and at least 1\n        // optional scorer. Therefore if there are not enough optional scorers\n        // no documents will be matched by the query\n        return null;\n      }\n      \n      // three cases: conjunction, disjunction, or mix\n      \n      // pure conjunction\n      if (optional.isEmpty()) {\n        return excl(req(required, disableCoord), prohibited);\n      }\n      \n      // pure disjunction\n      if (required.isEmpty()) {\n        return excl(opt(optional, minShouldMatch, disableCoord), prohibited);\n      }\n      \n      // conjunction-disjunction mix:\n      // we create the required and optional pieces with coord disabled, and then\n      // combine the two: if minNrShouldMatch > 0, then it's a conjunction: because the\n      // optional side must match. otherwise it's required + optional, factoring the\n      // number of optional terms into the coord calculation\n      \n      Scorer req = excl(req(required, true), prohibited);\n      Scorer opt = opt(optional, minShouldMatch, true);\n\n      // TODO: clean this up: it's horrible\n      if (disableCoord) {\n        if (minShouldMatch > 0) {\n          return new ConjunctionScorer(this, new Scorer[] { req, opt }, 1F);\n        } else {\n          return new ReqOptSumScorer(req, opt);          \n        }\n      } else if (optional.size() == 1) {\n        if (minShouldMatch > 0) {\n          return new ConjunctionScorer(this, new Scorer[] { req, opt }, coord(required.size()+1, maxCoord));\n        } else {\n          float coordReq = coord(required.size(), maxCoord);\n          float coordBoth = coord(required.size() + 1, maxCoord);\n          return new BooleanTopLevelScorers.ReqSingleOptScorer(req, opt, coordReq, coordBoth);\n        }\n      } else {\n        if (minShouldMatch > 0) {\n          return new BooleanTopLevelScorers.CoordinatingConjunctionScorer(this, coords(), req, required.size(), opt);\n        } else {\n          return new BooleanTopLevelScorers.ReqMultiOptScorer(req, opt, required.size(), coords()); \n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(LeafReaderContext,Bits,boolean).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      // initially the user provided value,\n      // but if minNrShouldMatch == optional.size(),\n      // we will optimize and move these to required, making this 0\n      int minShouldMatch = minNrShouldMatch;\n\n      List<Scorer> required = new ArrayList<>();\n      List<Scorer> prohibited = new ArrayList<>();\n      List<Scorer> optional = new ArrayList<>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        Scorer subScorer = w.scorer(context, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n      \n      // scorer simplifications:\n      \n      if (optional.size() == minShouldMatch) {\n        // any optional clauses are in fact required\n        required.addAll(optional);\n        optional.clear();\n        minShouldMatch = 0;\n      }\n      \n      if (required.isEmpty() && optional.isEmpty()) {\n        // no required and optional clauses.\n        return null;\n      } else if (optional.size() < minShouldMatch) {\n        // either >1 req scorer, or there are 0 req scorers and at least 1\n        // optional scorer. Therefore if there are not enough optional scorers\n        // no documents will be matched by the query\n        return null;\n      }\n      \n      // we don't need scores, so if we have required clauses, drop optional clauses completely\n      if (!needsScores && minShouldMatch == 0 && required.size() > 0) {\n        optional.clear();\n      }\n      \n      // three cases: conjunction, disjunction, or mix\n      \n      // pure conjunction\n      if (optional.isEmpty()) {\n        return excl(req(required, disableCoord), prohibited);\n      }\n      \n      // pure disjunction\n      if (required.isEmpty()) {\n        return excl(opt(optional, minShouldMatch, disableCoord), prohibited);\n      }\n      \n      // conjunction-disjunction mix:\n      // we create the required and optional pieces with coord disabled, and then\n      // combine the two: if minNrShouldMatch > 0, then it's a conjunction: because the\n      // optional side must match. otherwise it's required + optional, factoring the\n      // number of optional terms into the coord calculation\n      \n      Scorer req = excl(req(required, true), prohibited);\n      Scorer opt = opt(optional, minShouldMatch, true);\n\n      // TODO: clean this up: it's horrible\n      if (disableCoord) {\n        if (minShouldMatch > 0) {\n          return new ConjunctionScorer(this, new Scorer[] { req, opt }, 1F);\n        } else {\n          return new ReqOptSumScorer(req, opt);          \n        }\n      } else if (optional.size() == 1) {\n        if (minShouldMatch > 0) {\n          return new ConjunctionScorer(this, new Scorer[] { req, opt }, coord(required.size()+1, maxCoord));\n        } else {\n          float coordReq = coord(required.size(), maxCoord);\n          float coordBoth = coord(required.size() + 1, maxCoord);\n          return new BooleanTopLevelScorers.ReqSingleOptScorer(req, opt, coordReq, coordBoth);\n        }\n      } else {\n        if (minShouldMatch > 0) {\n          return new BooleanTopLevelScorers.CoordinatingConjunctionScorer(this, coords(), req, required.size(), opt);\n        } else {\n          return new BooleanTopLevelScorers.ReqMultiOptScorer(req, opt, required.size(), coords()); \n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs, boolean needsScores) throws IOException {\n      // initially the user provided value,\n      // but if minNrShouldMatch == optional.size(),\n      // we will optimize and move these to required, making this 0\n      int minShouldMatch = minNrShouldMatch;\n\n      List<Scorer> required = new ArrayList<>();\n      List<Scorer> prohibited = new ArrayList<>();\n      List<Scorer> optional = new ArrayList<>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        Scorer subScorer = w.scorer(context, acceptDocs, needsScores && c.isProhibited() == false);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n      \n      // scorer simplifications:\n      \n      if (optional.size() == minShouldMatch) {\n        // any optional clauses are in fact required\n        required.addAll(optional);\n        optional.clear();\n        minShouldMatch = 0;\n      }\n      \n      if (required.isEmpty() && optional.isEmpty()) {\n        // no required and optional clauses.\n        return null;\n      } else if (optional.size() < minShouldMatch) {\n        // either >1 req scorer, or there are 0 req scorers and at least 1\n        // optional scorer. Therefore if there are not enough optional scorers\n        // no documents will be matched by the query\n        return null;\n      }\n      \n      // we don't need scores, so if we have required clauses, drop optional clauses completely\n      if (!needsScores && minShouldMatch == 0 && required.size() > 0) {\n        optional.clear();\n      }\n      \n      // three cases: conjunction, disjunction, or mix\n      \n      // pure conjunction\n      if (optional.isEmpty()) {\n        return excl(req(required, disableCoord), prohibited);\n      }\n      \n      // pure disjunction\n      if (required.isEmpty()) {\n        return excl(opt(optional, minShouldMatch, disableCoord), prohibited);\n      }\n      \n      // conjunction-disjunction mix:\n      // we create the required and optional pieces with coord disabled, and then\n      // combine the two: if minNrShouldMatch > 0, then it's a conjunction: because the\n      // optional side must match. otherwise it's required + optional, factoring the\n      // number of optional terms into the coord calculation\n      \n      Scorer req = excl(req(required, true), prohibited);\n      Scorer opt = opt(optional, minShouldMatch, true);\n\n      // TODO: clean this up: it's horrible\n      if (disableCoord) {\n        if (minShouldMatch > 0) {\n          return new ConjunctionScorer(this, new Scorer[] { req, opt }, 1F);\n        } else {\n          return new ReqOptSumScorer(req, opt);          \n        }\n      } else if (optional.size() == 1) {\n        if (minShouldMatch > 0) {\n          return new ConjunctionScorer(this, new Scorer[] { req, opt }, coord(required.size()+1, maxCoord));\n        } else {\n          float coordReq = coord(required.size(), maxCoord);\n          float coordBoth = coord(required.size() + 1, maxCoord);\n          return new BooleanTopLevelScorers.ReqSingleOptScorer(req, opt, coordReq, coordBoth);\n        }\n      } else {\n        if (minShouldMatch > 0) {\n          return new BooleanTopLevelScorers.CoordinatingConjunctionScorer(this, coords(), req, required.size(), opt);\n        } else {\n          return new BooleanTopLevelScorers.ReqMultiOptScorer(req, opt, required.size(), coords()); \n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb17639909a369c1e64866842e5c213440acc17e":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb17639909a369c1e64866842e5c213440acc17e"]},"commit2Childs":{"fb17639909a369c1e64866842e5c213440acc17e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["fb17639909a369c1e64866842e5c213440acc17e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}