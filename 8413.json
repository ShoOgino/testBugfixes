{"path":"src/java/org/apache/lucene/index/IndexWriter#setMaxBufferedDocs(int).mjava","commits":[{"id":"3d5335b75378451628ea2c59d34e446d476a78a8","date":1097529879,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMaxBufferedDocs(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Determines the minimal number of documents required before the buffered\n   * in-memory documents are merging and a new Segment is created.\n   * Since Documents are merged in a {@link org.apache.lucene.store.RAMDirectory},\n   * large value gives faster indexing.  At the same time, mergeFactor limits\n   * the number of files open in a FSDirectory.\n   *\n   * <p> The default value is 10.\n   */\n  public void setMaxBufferedDocs(int maxBufferedDocs) {\n    this.minMergeDocs = maxBufferedDocs;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb09268ef7b6bce9e51c3d62902795e8f2cf67bd","date":1108584458,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMaxBufferedDocs(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMaxBufferedDocs(int).mjava","sourceNew":"  /** Determines the minimal number of documents required before the buffered\n   * in-memory documents are merging and a new Segment is created.\n   * Since Documents are merged in a {@link org.apache.lucene.store.RAMDirectory},\n   * large value gives faster indexing.  At the same time, mergeFactor limits\n   * the number of files open in a FSDirectory.\n   *\n   * <p> The default value is 10.\n   * \n   * @throws IllegalArgumentException if maxBufferedDocs is smaller than 1 \n   */\n  public void setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs < 1)\n      throw new IllegalArgumentException(\"maxBufferedDocs must at least be 1\");\n    this.minMergeDocs = maxBufferedDocs;\n  }\n\n","sourceOld":"  /** Determines the minimal number of documents required before the buffered\n   * in-memory documents are merging and a new Segment is created.\n   * Since Documents are merged in a {@link org.apache.lucene.store.RAMDirectory},\n   * large value gives faster indexing.  At the same time, mergeFactor limits\n   * the number of files open in a FSDirectory.\n   *\n   * <p> The default value is 10.\n   */\n  public void setMaxBufferedDocs(int maxBufferedDocs) {\n    this.minMergeDocs = maxBufferedDocs;\n  }\n\n","bugFix":null,"bugIntro":["1507a324c1f939ed71e01297733a49b9c36e5688"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d88b840642a1a2b6100c70abf822281914ca249","date":1140964805,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMaxBufferedDocs(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMaxBufferedDocs(int).mjava","sourceNew":"  /** Determines the minimal number of documents required before the buffered\n   * in-memory documents are merging and a new Segment is created.\n   * Since Documents are merged in a {@link org.apache.lucene.store.RAMDirectory},\n   * large value gives faster indexing.  At the same time, mergeFactor limits\n   * the number of files open in a FSDirectory.\n   *\n   * <p> The default value is 10.\n   * \n   * @throws IllegalArgumentException if maxBufferedDocs is smaller than 2\n   */\n  public void setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\"maxBufferedDocs must at least be 2\");\n    this.minMergeDocs = maxBufferedDocs;\n  }\n\n","sourceOld":"  /** Determines the minimal number of documents required before the buffered\n   * in-memory documents are merging and a new Segment is created.\n   * Since Documents are merged in a {@link org.apache.lucene.store.RAMDirectory},\n   * large value gives faster indexing.  At the same time, mergeFactor limits\n   * the number of files open in a FSDirectory.\n   *\n   * <p> The default value is 10.\n   * \n   * @throws IllegalArgumentException if maxBufferedDocs is smaller than 1 \n   */\n  public void setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs < 1)\n      throw new IllegalArgumentException(\"maxBufferedDocs must at least be 1\");\n    this.minMergeDocs = maxBufferedDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1507a324c1f939ed71e01297733a49b9c36e5688","date":1155783141,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMaxBufferedDocs(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMaxBufferedDocs(int).mjava","sourceNew":"  /** Determines the minimal number of documents required before the buffered\n   * in-memory documents are merging and a new Segment is created.\n   * Since Documents are merged in a {@link org.apache.lucene.store.RAMDirectory},\n   * large value gives faster indexing.  At the same time, mergeFactor limits\n   * the number of files open in a FSDirectory.\n   *\n   * <p> The default value is 10.\n   *\n   * @throws IllegalArgumentException if maxBufferedDocs is smaller than 2\n   */\n  public void setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\"maxBufferedDocs must at least be 2\");\n    this.minMergeDocs = maxBufferedDocs;\n  }\n\n","sourceOld":"  /** Determines the minimal number of documents required before the buffered\n   * in-memory documents are merging and a new Segment is created.\n   * Since Documents are merged in a {@link org.apache.lucene.store.RAMDirectory},\n   * large value gives faster indexing.  At the same time, mergeFactor limits\n   * the number of files open in a FSDirectory.\n   *\n   * <p> The default value is 10.\n   * \n   * @throws IllegalArgumentException if maxBufferedDocs is smaller than 2\n   */\n  public void setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\"maxBufferedDocs must at least be 2\");\n    this.minMergeDocs = maxBufferedDocs;\n  }\n\n","bugFix":["cb09268ef7b6bce9e51c3d62902795e8f2cf67bd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f7478f1d67a81bf80f28067595be0383022d65b","date":1167857941,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMaxBufferedDocs(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMaxBufferedDocs(int).mjava","sourceNew":"  /** Determines the minimal number of documents required before the buffered\n   * in-memory documents are merged and a new Segment is created.\n   * Since Documents are merged in a {@link org.apache.lucene.store.RAMDirectory},\n   * large value gives faster indexing.  At the same time, mergeFactor limits\n   * the number of files open in a FSDirectory.\n   *\n   * <p> The default value is 10.\n   *\n   * @throws IllegalArgumentException if maxBufferedDocs is smaller than 2\n   */\n  public void setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\"maxBufferedDocs must at least be 2\");\n    this.minMergeDocs = maxBufferedDocs;\n  }\n\n","sourceOld":"  /** Determines the minimal number of documents required before the buffered\n   * in-memory documents are merging and a new Segment is created.\n   * Since Documents are merged in a {@link org.apache.lucene.store.RAMDirectory},\n   * large value gives faster indexing.  At the same time, mergeFactor limits\n   * the number of files open in a FSDirectory.\n   *\n   * <p> The default value is 10.\n   *\n   * @throws IllegalArgumentException if maxBufferedDocs is smaller than 2\n   */\n  public void setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\"maxBufferedDocs must at least be 2\");\n    this.minMergeDocs = maxBufferedDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"328c1568e471f0c6eaa49ec00334ca59e573710f","date":1173897963,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMaxBufferedDocs(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMaxBufferedDocs(int).mjava","sourceNew":"  /** Determines the minimal number of documents required before the buffered\n   * in-memory documents are merged and a new Segment is created.\n   * Since Documents are merged in a {@link org.apache.lucene.store.RAMDirectory},\n   * large value gives faster indexing.  At the same time, mergeFactor limits\n   * the number of files open in a FSDirectory.\n   *\n   * <p> The default value is 10.\n   *\n   * @throws IllegalArgumentException if maxBufferedDocs is smaller than 2\n   */\n  public void setMaxBufferedDocs(int maxBufferedDocs) {\n    ensureOpen();\n    if (maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\"maxBufferedDocs must at least be 2\");\n    this.minMergeDocs = maxBufferedDocs;\n  }\n\n","sourceOld":"  /** Determines the minimal number of documents required before the buffered\n   * in-memory documents are merged and a new Segment is created.\n   * Since Documents are merged in a {@link org.apache.lucene.store.RAMDirectory},\n   * large value gives faster indexing.  At the same time, mergeFactor limits\n   * the number of files open in a FSDirectory.\n   *\n   * <p> The default value is 10.\n   *\n   * @throws IllegalArgumentException if maxBufferedDocs is smaller than 2\n   */\n  public void setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\"maxBufferedDocs must at least be 2\");\n    this.minMergeDocs = maxBufferedDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMaxBufferedDocs(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMaxBufferedDocs(int).mjava","sourceNew":"  /** Determines the minimal number of documents required\n   * before the buffered in-memory documents are flushed as\n   * a new Segment.  Large values generally gives faster\n   * indexing.\n   *\n   * <p>When this is set, the writer will flush every\n   * maxBufferedDocs added documents and never flush by RAM\n   * usage.</p>\n   *\n   * <p> The default value is 0 (writer flushes by RAM\n   * usage).</p>\n   *\n   * @throws IllegalArgumentException if maxBufferedDocs is\n   * smaller than 2\n   * @see #setRAMBufferSizeMB\n   */\n  public void setMaxBufferedDocs(int maxBufferedDocs) {\n    ensureOpen();\n    if (maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\"maxBufferedDocs must at least be 2\");\n    docWriter.setMaxBufferedDocs(maxBufferedDocs);\n  }\n\n","sourceOld":"  /** Determines the minimal number of documents required before the buffered\n   * in-memory documents are merged and a new Segment is created.\n   * Since Documents are merged in a {@link org.apache.lucene.store.RAMDirectory},\n   * large value gives faster indexing.  At the same time, mergeFactor limits\n   * the number of files open in a FSDirectory.\n   *\n   * <p> The default value is 10.\n   *\n   * @throws IllegalArgumentException if maxBufferedDocs is smaller than 2\n   */\n  public void setMaxBufferedDocs(int maxBufferedDocs) {\n    ensureOpen();\n    if (maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\"maxBufferedDocs must at least be 2\");\n    this.minMergeDocs = maxBufferedDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMaxBufferedDocs(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMaxBufferedDocs(int).mjava","sourceNew":"  /** Determines the minimal number of documents required\n   * before the buffered in-memory documents are flushed as\n   * a new Segment.  Large values generally gives faster\n   * indexing.\n   *\n   * <p>When this is set, the writer will flush every\n   * maxBufferedDocs added documents and never flush by RAM\n   * usage.</p>\n   *\n   * <p> The default value is 0 (writer flushes by RAM\n   * usage).</p>\n   *\n   * @throws IllegalArgumentException if maxBufferedDocs is\n   * smaller than 2\n   * @see #setRAMBufferSizeMB\n   */\n  public void setMaxBufferedDocs(int maxBufferedDocs) {\n    ensureOpen();\n    if (maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\"maxBufferedDocs must at least be 2\");\n    docWriter.setMaxBufferedDocs(maxBufferedDocs);\n    pushMaxBufferedDocs();\n  }\n\n","sourceOld":"  /** Determines the minimal number of documents required\n   * before the buffered in-memory documents are flushed as\n   * a new Segment.  Large values generally gives faster\n   * indexing.\n   *\n   * <p>When this is set, the writer will flush every\n   * maxBufferedDocs added documents and never flush by RAM\n   * usage.</p>\n   *\n   * <p> The default value is 0 (writer flushes by RAM\n   * usage).</p>\n   *\n   * @throws IllegalArgumentException if maxBufferedDocs is\n   * smaller than 2\n   * @see #setRAMBufferSizeMB\n   */\n  public void setMaxBufferedDocs(int maxBufferedDocs) {\n    ensureOpen();\n    if (maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\"maxBufferedDocs must at least be 2\");\n    docWriter.setMaxBufferedDocs(maxBufferedDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e","date":1191352543,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMaxBufferedDocs(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMaxBufferedDocs(int).mjava","sourceNew":"  /** Determines the minimal number of documents required\n   * before the buffered in-memory documents are flushed as\n   * a new Segment.  Large values generally gives faster\n   * indexing.\n   *\n   * <p>When this is set, the writer will flush every\n   * maxBufferedDocs added documents.  Pass in {@link\n   * #DISABLE_AUTO_FLUSH} to prevent triggering a flush due\n   * to number of buffered documents.  Note that if flushing\n   * by RAM usage is also enabled, then the flush will be\n   * triggered by whichever comes first.</p>\n   *\n   * <p>Disabled by default (writer flushes by RAM usage).</p>\n   *\n   * @throws IllegalArgumentException if maxBufferedDocs is\n   * enabled but smaller than 2, or it disables maxBufferedDocs\n   * when ramBufferSize is already disabled\n   * @see #setRAMBufferSizeMB\n   */\n  public void setMaxBufferedDocs(int maxBufferedDocs) {\n    ensureOpen();\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && getRAMBufferSizeMB() == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    docWriter.setMaxBufferedDocs(maxBufferedDocs);\n    pushMaxBufferedDocs();\n  }\n\n","sourceOld":"  /** Determines the minimal number of documents required\n   * before the buffered in-memory documents are flushed as\n   * a new Segment.  Large values generally gives faster\n   * indexing.\n   *\n   * <p>When this is set, the writer will flush every\n   * maxBufferedDocs added documents and never flush by RAM\n   * usage.</p>\n   *\n   * <p> The default value is 0 (writer flushes by RAM\n   * usage).</p>\n   *\n   * @throws IllegalArgumentException if maxBufferedDocs is\n   * smaller than 2\n   * @see #setRAMBufferSizeMB\n   */\n  public void setMaxBufferedDocs(int maxBufferedDocs) {\n    ensureOpen();\n    if (maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\"maxBufferedDocs must at least be 2\");\n    docWriter.setMaxBufferedDocs(maxBufferedDocs);\n    pushMaxBufferedDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67006a60923e2124212d3baa0d29b444bcbd8373","date":1191425052,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMaxBufferedDocs(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMaxBufferedDocs(int).mjava","sourceNew":"  /** Determines the minimal number of documents required\n   * before the buffered in-memory documents are flushed as\n   * a new Segment.  Large values generally gives faster\n   * indexing.\n   *\n   * <p>When this is set, the writer will flush every\n   * maxBufferedDocs added documents.  Pass in {@link\n   * #DISABLE_AUTO_FLUSH} to prevent triggering a flush due\n   * to number of buffered documents.  Note that if flushing\n   * by RAM usage is also enabled, then the flush will be\n   * triggered by whichever comes first.</p>\n   *\n   * <p>Disabled by default (writer flushes by RAM usage).</p>\n   *\n   * @throws IllegalArgumentException if maxBufferedDocs is\n   * enabled but smaller than 2, or it disables maxBufferedDocs\n   * when ramBufferSize is already disabled\n   * @see #setRAMBufferSizeMB\n   */\n  public void setMaxBufferedDocs(int maxBufferedDocs) {\n    ensureOpen();\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && getRAMBufferSizeMB() == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    docWriter.setMaxBufferedDocs(maxBufferedDocs);\n    pushMaxBufferedDocs();\n    if (infoStream != null)\n      message(\"setMaxBufferedDocs \" + maxBufferedDocs);\n  }\n\n","sourceOld":"  /** Determines the minimal number of documents required\n   * before the buffered in-memory documents are flushed as\n   * a new Segment.  Large values generally gives faster\n   * indexing.\n   *\n   * <p>When this is set, the writer will flush every\n   * maxBufferedDocs added documents.  Pass in {@link\n   * #DISABLE_AUTO_FLUSH} to prevent triggering a flush due\n   * to number of buffered documents.  Note that if flushing\n   * by RAM usage is also enabled, then the flush will be\n   * triggered by whichever comes first.</p>\n   *\n   * <p>Disabled by default (writer flushes by RAM usage).</p>\n   *\n   * @throws IllegalArgumentException if maxBufferedDocs is\n   * enabled but smaller than 2, or it disables maxBufferedDocs\n   * when ramBufferSize is already disabled\n   * @see #setRAMBufferSizeMB\n   */\n  public void setMaxBufferedDocs(int maxBufferedDocs) {\n    ensureOpen();\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && getRAMBufferSizeMB() == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    docWriter.setMaxBufferedDocs(maxBufferedDocs);\n    pushMaxBufferedDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMaxBufferedDocs(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMaxBufferedDocs(int).mjava","sourceNew":"  /** Determines the minimal number of documents required\n   * before the buffered in-memory documents are flushed as\n   * a new Segment.  Large values generally gives faster\n   * indexing.\n   *\n   * <p>When this is set, the writer will flush every\n   * maxBufferedDocs added documents.  Pass in {@link\n   * #DISABLE_AUTO_FLUSH} to prevent triggering a flush due\n   * to number of buffered documents.  Note that if flushing\n   * by RAM usage is also enabled, then the flush will be\n   * triggered by whichever comes first.</p>\n   *\n   * <p>Disabled by default (writer flushes by RAM usage).</p>\n   *\n   * @throws IllegalArgumentException if maxBufferedDocs is\n   * enabled but smaller than 2, or it disables maxBufferedDocs\n   * when ramBufferSize is already disabled\n   * @see #setRAMBufferSizeMB\n   * @deprecated use {@link IndexWriterConfig#setMaxBufferedDocs(int)} instead.\n   */\n  public void setMaxBufferedDocs(int maxBufferedDocs) {\n    ensureOpen();\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && getRAMBufferSizeMB() == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    docWriter.setMaxBufferedDocs(maxBufferedDocs);\n    pushMaxBufferedDocs();\n    if (infoStream != null)\n      message(\"setMaxBufferedDocs \" + maxBufferedDocs);\n    // Required so config.getSimilarity returns the right value. But this will\n    // go away together with the method in 4.0.\n    config.setMaxBufferedDocs(maxBufferedDocs);\n  }\n\n","sourceOld":"  /** Determines the minimal number of documents required\n   * before the buffered in-memory documents are flushed as\n   * a new Segment.  Large values generally gives faster\n   * indexing.\n   *\n   * <p>When this is set, the writer will flush every\n   * maxBufferedDocs added documents.  Pass in {@link\n   * #DISABLE_AUTO_FLUSH} to prevent triggering a flush due\n   * to number of buffered documents.  Note that if flushing\n   * by RAM usage is also enabled, then the flush will be\n   * triggered by whichever comes first.</p>\n   *\n   * <p>Disabled by default (writer flushes by RAM usage).</p>\n   *\n   * @throws IllegalArgumentException if maxBufferedDocs is\n   * enabled but smaller than 2, or it disables maxBufferedDocs\n   * when ramBufferSize is already disabled\n   * @see #setRAMBufferSizeMB\n   */\n  public void setMaxBufferedDocs(int maxBufferedDocs) {\n    ensureOpen();\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && getRAMBufferSizeMB() == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    docWriter.setMaxBufferedDocs(maxBufferedDocs);\n    pushMaxBufferedDocs();\n    if (infoStream != null)\n      message(\"setMaxBufferedDocs \" + maxBufferedDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMaxBufferedDocs(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMaxBufferedDocs(int).mjava","sourceNew":"  /** Determines the minimal number of documents required\n   * before the buffered in-memory documents are flushed as\n   * a new Segment.  Large values generally gives faster\n   * indexing.\n   *\n   * <p>When this is set, the writer will flush every\n   * maxBufferedDocs added documents.  Pass in {@link\n   * #DISABLE_AUTO_FLUSH} to prevent triggering a flush due\n   * to number of buffered documents.  Note that if flushing\n   * by RAM usage is also enabled, then the flush will be\n   * triggered by whichever comes first.</p>\n   *\n   * <p>Disabled by default (writer flushes by RAM usage).</p>\n   *\n   * @throws IllegalArgumentException if maxBufferedDocs is\n   * enabled but smaller than 2, or it disables maxBufferedDocs\n   * when ramBufferSize is already disabled\n   * @see #setRAMBufferSizeMB\n   */\n  public void setMaxBufferedDocs(int maxBufferedDocs) {\n    ensureOpen();\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && getRAMBufferSizeMB() == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    docWriter.setMaxBufferedDocs(maxBufferedDocs);\n    pushMaxBufferedDocs();\n    if (infoStream != null)\n      message(\"setMaxBufferedDocs \" + maxBufferedDocs);\n  }\n\n","sourceOld":"  /** Determines the minimal number of documents required\n   * before the buffered in-memory documents are flushed as\n   * a new Segment.  Large values generally gives faster\n   * indexing.\n   *\n   * <p>When this is set, the writer will flush every\n   * maxBufferedDocs added documents.  Pass in {@link\n   * #DISABLE_AUTO_FLUSH} to prevent triggering a flush due\n   * to number of buffered documents.  Note that if flushing\n   * by RAM usage is also enabled, then the flush will be\n   * triggered by whichever comes first.</p>\n   *\n   * <p>Disabled by default (writer flushes by RAM usage).</p>\n   *\n   * @throws IllegalArgumentException if maxBufferedDocs is\n   * enabled but smaller than 2, or it disables maxBufferedDocs\n   * when ramBufferSize is already disabled\n   * @see #setRAMBufferSizeMB\n   * @deprecated use {@link IndexWriterConfig#setMaxBufferedDocs(int)} instead.\n   */\n  public void setMaxBufferedDocs(int maxBufferedDocs) {\n    ensureOpen();\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && getRAMBufferSizeMB() == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    docWriter.setMaxBufferedDocs(maxBufferedDocs);\n    pushMaxBufferedDocs();\n    if (infoStream != null)\n      message(\"setMaxBufferedDocs \" + maxBufferedDocs);\n    // Required so config.getSimilarity returns the right value. But this will\n    // go away together with the method in 4.0.\n    config.setMaxBufferedDocs(maxBufferedDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#setMaxBufferedDocs(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMaxBufferedDocs(int).mjava","sourceNew":"  /** Determines the minimal number of documents required\n   * before the buffered in-memory documents are flushed as\n   * a new Segment.  Large values generally gives faster\n   * indexing.\n   *\n   * <p>When this is set, the writer will flush every\n   * maxBufferedDocs added documents.  Pass in {@link\n   * #DISABLE_AUTO_FLUSH} to prevent triggering a flush due\n   * to number of buffered documents.  Note that if flushing\n   * by RAM usage is also enabled, then the flush will be\n   * triggered by whichever comes first.</p>\n   *\n   * <p>Disabled by default (writer flushes by RAM usage).</p>\n   *\n   * @throws IllegalArgumentException if maxBufferedDocs is\n   * enabled but smaller than 2, or it disables maxBufferedDocs\n   * when ramBufferSize is already disabled\n   * @see #setRAMBufferSizeMB\n   * @deprecated use {@link IndexWriterConfig#setMaxBufferedDocs(int)} instead.\n   */\n  public void setMaxBufferedDocs(int maxBufferedDocs) {\n    ensureOpen();\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && getRAMBufferSizeMB() == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    docWriter.setMaxBufferedDocs(maxBufferedDocs);\n    pushMaxBufferedDocs();\n    if (infoStream != null)\n      message(\"setMaxBufferedDocs \" + maxBufferedDocs);\n    // Required so config.getSimilarity returns the right value. But this will\n    // go away together with the method in 4.0.\n    config.setMaxBufferedDocs(maxBufferedDocs);\n  }\n\n","sourceOld":"  /** Determines the minimal number of documents required\n   * before the buffered in-memory documents are flushed as\n   * a new Segment.  Large values generally gives faster\n   * indexing.\n   *\n   * <p>When this is set, the writer will flush every\n   * maxBufferedDocs added documents.  Pass in {@link\n   * #DISABLE_AUTO_FLUSH} to prevent triggering a flush due\n   * to number of buffered documents.  Note that if flushing\n   * by RAM usage is also enabled, then the flush will be\n   * triggered by whichever comes first.</p>\n   *\n   * <p>Disabled by default (writer flushes by RAM usage).</p>\n   *\n   * @throws IllegalArgumentException if maxBufferedDocs is\n   * enabled but smaller than 2, or it disables maxBufferedDocs\n   * when ramBufferSize is already disabled\n   * @see #setRAMBufferSizeMB\n   */\n  public void setMaxBufferedDocs(int maxBufferedDocs) {\n    ensureOpen();\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && getRAMBufferSizeMB() == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    docWriter.setMaxBufferedDocs(maxBufferedDocs);\n    pushMaxBufferedDocs();\n    if (infoStream != null)\n      message(\"setMaxBufferedDocs \" + maxBufferedDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#setMaxBufferedDocs(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMaxBufferedDocs(int).mjava","sourceNew":"  /** Determines the minimal number of documents required\n   * before the buffered in-memory documents are flushed as\n   * a new Segment.  Large values generally gives faster\n   * indexing.\n   *\n   * <p>When this is set, the writer will flush every\n   * maxBufferedDocs added documents.  Pass in {@link\n   * #DISABLE_AUTO_FLUSH} to prevent triggering a flush due\n   * to number of buffered documents.  Note that if flushing\n   * by RAM usage is also enabled, then the flush will be\n   * triggered by whichever comes first.</p>\n   *\n   * <p>Disabled by default (writer flushes by RAM usage).</p>\n   *\n   * @throws IllegalArgumentException if maxBufferedDocs is\n   * enabled but smaller than 2, or it disables maxBufferedDocs\n   * when ramBufferSize is already disabled\n   * @see #setRAMBufferSizeMB\n   * @deprecated use {@link IndexWriterConfig#setMaxBufferedDocs(int)} instead.\n   */\n  public void setMaxBufferedDocs(int maxBufferedDocs) {\n    ensureOpen();\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && getRAMBufferSizeMB() == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    docWriter.setMaxBufferedDocs(maxBufferedDocs);\n    pushMaxBufferedDocs();\n    if (infoStream != null)\n      message(\"setMaxBufferedDocs \" + maxBufferedDocs);\n    // Required so config.getSimilarity returns the right value. But this will\n    // go away together with the method in 4.0.\n    config.setMaxBufferedDocs(maxBufferedDocs);\n  }\n\n","sourceOld":"  /** Determines the minimal number of documents required\n   * before the buffered in-memory documents are flushed as\n   * a new Segment.  Large values generally gives faster\n   * indexing.\n   *\n   * <p>When this is set, the writer will flush every\n   * maxBufferedDocs added documents.  Pass in {@link\n   * #DISABLE_AUTO_FLUSH} to prevent triggering a flush due\n   * to number of buffered documents.  Note that if flushing\n   * by RAM usage is also enabled, then the flush will be\n   * triggered by whichever comes first.</p>\n   *\n   * <p>Disabled by default (writer flushes by RAM usage).</p>\n   *\n   * @throws IllegalArgumentException if maxBufferedDocs is\n   * enabled but smaller than 2, or it disables maxBufferedDocs\n   * when ramBufferSize is already disabled\n   * @see #setRAMBufferSizeMB\n   * @deprecated use {@link IndexWriterConfig#setMaxBufferedDocs(int)} instead.\n   */\n  public void setMaxBufferedDocs(int maxBufferedDocs) {\n    ensureOpen();\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && getRAMBufferSizeMB() == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    docWriter.setMaxBufferedDocs(maxBufferedDocs);\n    pushMaxBufferedDocs();\n    if (infoStream != null)\n      message(\"setMaxBufferedDocs \" + maxBufferedDocs);\n    // Required so config.getSimilarity returns the right value. But this will\n    // go away together with the method in 4.0.\n    config.setMaxBufferedDocs(maxBufferedDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["8f7478f1d67a81bf80f28067595be0383022d65b"],"3d5335b75378451628ea2c59d34e446d476a78a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"67006a60923e2124212d3baa0d29b444bcbd8373":["2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["67006a60923e2124212d3baa0d29b444bcbd8373"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"1507a324c1f939ed71e01297733a49b9c36e5688":["1d88b840642a1a2b6100c70abf822281914ca249"],"8f7478f1d67a81bf80f28067595be0383022d65b":["1507a324c1f939ed71e01297733a49b9c36e5688"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"cb09268ef7b6bce9e51c3d62902795e8f2cf67bd":["3d5335b75378451628ea2c59d34e446d476a78a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"1d88b840642a1a2b6100c70abf822281914ca249":["cb09268ef7b6bce9e51c3d62902795e8f2cf67bd"]},"commit2Childs":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"3d5335b75378451628ea2c59d34e446d476a78a8":["cb09268ef7b6bce9e51c3d62902795e8f2cf67bd"],"67006a60923e2124212d3baa0d29b444bcbd8373":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1507a324c1f939ed71e01297733a49b9c36e5688":["8f7478f1d67a81bf80f28067595be0383022d65b"],"8f7478f1d67a81bf80f28067595be0383022d65b":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3d5335b75378451628ea2c59d34e446d476a78a8"],"2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e":["67006a60923e2124212d3baa0d29b444bcbd8373"],"cb09268ef7b6bce9e51c3d62902795e8f2cf67bd":["1d88b840642a1a2b6100c70abf822281914ca249"],"1d88b840642a1a2b6100c70abf822281914ca249":["1507a324c1f939ed71e01297733a49b9c36e5688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}