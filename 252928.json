{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#toExpression(StreamFactory).mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#toExpression(StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n    for(Entry<String,String> param : params.entrySet()){\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), param.getValue()));\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // aliases\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3fa3e2efe14a21ebcb7d24e05ff8cd926af501c0","79928d4d67ab9d5faf2e0da4d3b0c4def3c42be8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3fa3e2efe14a21ebcb7d24e05ff8cd926af501c0","date":1454550168,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n    for(Entry<String,String> param : params.entrySet()){\n      String value = param.getValue();\n      \n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n      \n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // aliases\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n\n","sourceOld":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n    for(Entry<String,String> param : params.entrySet()){\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), param.getValue()));\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // aliases\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n\n","bugFix":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"bugIntro":["79928d4d67ab9d5faf2e0da4d3b0c4def3c42be8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b1704c078ec59838c9d95d5bf5738b393b537494","date":1454693901,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n    for(Entry<String,String> param : params.entrySet()){\n      String value = param.getValue();\n      \n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n      \n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // aliases\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n\n","sourceOld":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n    for(Entry<String,String> param : params.entrySet()){\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), param.getValue()));\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // aliases\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n    for(Entry<String,String> param : params.entrySet()){\n      String value = param.getValue();\n      \n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n      \n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // aliases\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n\n","sourceOld":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n    for(Entry<String,String> param : params.entrySet()){\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), param.getValue()));\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // aliases\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941","date":1461079048,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n    for(Entry<String,String> param : params.entrySet()){\n      String value = param.getValue();\n      \n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n      \n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // aliases\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n\n","sourceOld":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n    for(Entry<String,String> param : params.entrySet()){\n      String value = param.getValue();\n      \n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n      \n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // aliases\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b71fe681187ac8552caaff9d5a7f1f3cac47b56","date":1461081992,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n    for(Entry<String,String> param : params.entrySet()){\n      String value = param.getValue();\n      \n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n      \n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // aliases\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n\n","sourceOld":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n    for(Entry<String,String> param : params.entrySet()){\n      String value = param.getValue();\n      \n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n      \n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // aliases\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams(SolrParams.toMultiMap(params.toNamedList()));\n    for (Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      String value = String.join(\",\", param.getValue());\n      \n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // aliases\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n\n","sourceOld":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n    for(Entry<String,String> param : params.entrySet()){\n      String value = param.getValue();\n      \n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n      \n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // aliases\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":["79928d4d67ab9d5faf2e0da4d3b0c4def3c42be8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams(SolrParams.toMultiMap(params.toNamedList()));\n    for (Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      String value = String.join(\",\", param.getValue());\n      \n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // aliases\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n\n","sourceOld":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n    for(Entry<String,String> param : params.entrySet()){\n      String value = param.getValue();\n      \n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n      \n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // aliases\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams(SolrParams.toMultiMap(params.toNamedList()));\n    for (Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      String value = String.join(\",\", param.getValue());\n      \n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // aliases\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n\n","sourceOld":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n    for(Entry<String,String> param : params.entrySet()){\n      String value = param.getValue();\n      \n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n      \n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // aliases\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams(SolrParams.toMultiMap(params.toNamedList()));\n    for (Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      String value = String.join(\",\", param.getValue());\n      \n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // aliases\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n\n","sourceOld":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n    for(Entry<String,String> param : params.entrySet()){\n      String value = param.getValue();\n      \n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n      \n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // aliases\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11e5446472f245825b6f1cc220252acaab5990cf","date":1491429444,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams(SolrParams.toMultiMap(params.toNamedList()));\n    for (Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      String value = String.join(\",\", param.getValue());\n      \n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // aliases\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n\n","sourceOld":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams(SolrParams.toMultiMap(params.toNamedList()));\n    for (Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      String value = String.join(\",\", param.getValue());\n      \n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // aliases\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams(SolrParams.toMultiMap(params.toNamedList()));\n    for (Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      String value = String.join(\",\", param.getValue());\n      \n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // aliases\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n\n","sourceOld":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams(SolrParams.toMultiMap(params.toNamedList()));\n    for (Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      String value = String.join(\",\", param.getValue());\n      \n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // aliases\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"79928d4d67ab9d5faf2e0da4d3b0c4def3c42be8","date":1499970586,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    ModifiableSolrParams mParams = new ModifiableSolrParams(SolrParams.toMultiMap(params.toNamedList()));\n    for (Entry<String, String[]> param : mParams.getMap().entrySet()) {\n\n      if(param.getKey().equals(\"fq\")) {\n        for(String fqParam : param.getValue()) {\n          // See comment below for params containg a \" character\n          expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), \n              fqParam.replace(\"\\\"\", \"\\\\\\\"\")));\n        }\n       } else {\n        String value = String.join(\",\", param.getValue());\n\n        // SOLR-8409: This is a special case where the params contain a \" character\n        // Do note that in any other BASE streams with parameters where a \" might come into play\n        // that this same replacement needs to take place.\n        value = value.replace(\"\\\"\", \"\\\\\\\"\");\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n      }\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // aliases\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n\n","sourceOld":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams(SolrParams.toMultiMap(params.toNamedList()));\n    for (Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      String value = String.join(\",\", param.getValue());\n      \n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // aliases\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n\n","bugFix":["3fa3e2efe14a21ebcb7d24e05ff8cd926af501c0","f00f1c5fad501b66705121feb623f8cfbb6712f9","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3660ef111aa270bdbc5d665a05dfb9b13edb268","date":1500221107,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    for (Entry<String, String[]> param : params.getMap().entrySet()) {\n      for (String val : param.getValue()) {\n        // SOLR-8409: Escaping the \" is a special case.\n        // Do note that in any other BASE streams with parameters where a \" might come into play\n        // that this same replacement needs to take place.\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n            val.replace(\"\\\"\", \"\\\\\\\"\")));\n      }\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // aliases\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n\n","sourceOld":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    ModifiableSolrParams mParams = new ModifiableSolrParams(SolrParams.toMultiMap(params.toNamedList()));\n    for (Entry<String, String[]> param : mParams.getMap().entrySet()) {\n\n      if(param.getKey().equals(\"fq\")) {\n        for(String fqParam : param.getValue()) {\n          // See comment below for params containg a \" character\n          expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), \n              fqParam.replace(\"\\\"\", \"\\\\\\\"\")));\n        }\n       } else {\n        String value = String.join(\",\", param.getValue());\n\n        // SOLR-8409: This is a special case where the params contain a \" character\n        // Do note that in any other BASE streams with parameters where a \" might come into play\n        // that this same replacement needs to take place.\n        value = value.replace(\"\\\"\", \"\\\\\\\"\");\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n      }\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // aliases\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    for (Entry<String, String[]> param : params.getMap().entrySet()) {\n      for (String val : param.getValue()) {\n        // SOLR-8409: Escaping the \" is a special case.\n        // Do note that in any other BASE streams with parameters where a \" might come into play\n        // that this same replacement needs to take place.\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n            val.replace(\"\\\"\", \"\\\\\\\"\")));\n      }\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // aliases\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n\n","sourceOld":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    // parameters\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams(SolrParams.toMultiMap(params.toNamedList()));\n    for (Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      String value = String.join(\",\", param.getValue());\n      \n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // aliases\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233","date":1543335722,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(\"search\");\n    \n    // collection\n    expression.addParameter(collection);\n    \n    for (Entry<String, String[]> param : params.getMap().entrySet()) {\n      for (String val : param.getValue()) {\n        // SOLR-8409: Escaping the \" is a special case.\n        // Do note that in any other BASE streams with parameters where a \" might come into play\n        // that this same replacement needs to take place.\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n            val.replace(\"\\\"\", \"\\\\\\\"\")));\n      }\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // aliases\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n\n","sourceOld":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(getClass()));\n    \n    // collection\n    expression.addParameter(collection);\n    \n    for (Entry<String, String[]> param : params.getMap().entrySet()) {\n      for (String val : param.getValue()) {\n        // SOLR-8409: Escaping the \" is a special case.\n        // Do note that in any other BASE streams with parameters where a \" might come into play\n        // that this same replacement needs to take place.\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n            val.replace(\"\\\"\", \"\\\\\\\"\")));\n      }\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // aliases\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a209db4770770843a101e5dfe46086a63507fd3","date":1544624168,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(\"search\");\n    \n    // collection\n    if(collection.indexOf(',') > -1) {\n      expression.addParameter(\"\\\"\"+collection+\"\\\"\");\n    } else {\n      expression.addParameter(collection);\n    }\n    \n    for (Entry<String, String[]> param : params.getMap().entrySet()) {\n      for (String val : param.getValue()) {\n        // SOLR-8409: Escaping the \" is a special case.\n        // Do note that in any other BASE streams with parameters where a \" might come into play\n        // that this same replacement needs to take place.\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n            val.replace(\"\\\"\", \"\\\\\\\"\")));\n      }\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // aliases\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n\n","sourceOld":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(\"search\");\n    \n    // collection\n    expression.addParameter(collection);\n    \n    for (Entry<String, String[]> param : params.getMap().entrySet()) {\n      for (String val : param.getValue()) {\n        // SOLR-8409: Escaping the \" is a special case.\n        // Do note that in any other BASE streams with parameters where a \" might come into play\n        // that this same replacement needs to take place.\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n            val.replace(\"\\\"\", \"\\\\\\\"\")));\n      }\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // aliases\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70d9c44f68e848648da304352cf7c045c33148f4","date":1557331987,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n\n    // function name\n    StreamExpression expression = new StreamExpression(\"search\");\n\n    // collection\n    if(collection.indexOf(',') > -1) {\n      expression.addParameter(\"\\\"\"+collection+\"\\\"\");\n    } else {\n      expression.addParameter(collection);\n    }\n\n    for (Entry<String, String[]> param : params.getMap().entrySet()) {\n      for (String val : param.getValue()) {\n        // SOLR-8409: Escaping the \" is a special case.\n        // Do note that in any other BASE streams with parameters where a \" might come into play\n        // that this same replacement needs to take place.\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n            val.replace(\"\\\"\", \"\\\\\\\"\")));\n      }\n    }\n\n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n\n    // aliases\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n\n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n\n    return expression;\n  }\n\n","sourceOld":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    // functionName(collectionName, param1, param2, ..., paramN, sort=\"comp\", [aliases=\"field=alias,...\"])\n    \n    // function name\n    StreamExpression expression = new StreamExpression(\"search\");\n    \n    // collection\n    if(collection.indexOf(',') > -1) {\n      expression.addParameter(\"\\\"\"+collection+\"\\\"\");\n    } else {\n      expression.addParameter(collection);\n    }\n    \n    for (Entry<String, String[]> param : params.getMap().entrySet()) {\n      for (String val : param.getValue()) {\n        // SOLR-8409: Escaping the \" is a special case.\n        // Do note that in any other BASE streams with parameters where a \" might come into play\n        // that this same replacement needs to take place.\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n            val.replace(\"\\\"\", \"\\\\\\\"\")));\n      }\n    }\n    \n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    // aliases\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"3b71fe681187ac8552caaff9d5a7f1f3cac47b56":["3fa3e2efe14a21ebcb7d24e05ff8cd926af501c0","e81b63c9ecb10b3cb98b3cc5e255b8d91021b941"],"c3660ef111aa270bdbc5d665a05dfb9b13edb268":["79928d4d67ab9d5faf2e0da4d3b0c4def3c42be8"],"3fa3e2efe14a21ebcb7d24e05ff8cd926af501c0":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["f00f1c5fad501b66705121feb623f8cfbb6712f9","3fa3e2efe14a21ebcb7d24e05ff8cd926af501c0"],"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941":["3fa3e2efe14a21ebcb7d24e05ff8cd926af501c0"],"5a209db4770770843a101e5dfe46086a63507fd3":["b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233"],"79928d4d67ab9d5faf2e0da4d3b0c4def3c42be8":["11e5446472f245825b6f1cc220252acaab5990cf"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"11e5446472f245825b6f1cc220252acaab5990cf":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","c3660ef111aa270bdbc5d665a05dfb9b13edb268"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e66a459d38c1c4a2f97128433dab546f683a9fed":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"b1704c078ec59838c9d95d5bf5738b393b537494":["f00f1c5fad501b66705121feb623f8cfbb6712f9","3fa3e2efe14a21ebcb7d24e05ff8cd926af501c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70d9c44f68e848648da304352cf7c045c33148f4"],"70d9c44f68e848648da304352cf7c045c33148f4":["5a209db4770770843a101e5dfe46086a63507fd3"],"b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233":["c3660ef111aa270bdbc5d665a05dfb9b13edb268"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["3fa3e2efe14a21ebcb7d24e05ff8cd926af501c0","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b1704c078ec59838c9d95d5bf5738b393b537494"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["aaf90fc29510e72665ac7934f34c3d1c25efad64"],"3b71fe681187ac8552caaff9d5a7f1f3cac47b56":["826d15444ddf61716dc768c229cd54b2c2ccce1c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"c3660ef111aa270bdbc5d665a05dfb9b13edb268":["aaf90fc29510e72665ac7934f34c3d1c25efad64","b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233"],"3fa3e2efe14a21ebcb7d24e05ff8cd926af501c0":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56","1e6acbaae7af722f17204ceccf0f7db5753eccf3","e81b63c9ecb10b3cb98b3cc5e255b8d91021b941","b1704c078ec59838c9d95d5bf5738b393b537494"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56"],"5a209db4770770843a101e5dfe46086a63507fd3":["70d9c44f68e848648da304352cf7c045c33148f4"],"79928d4d67ab9d5faf2e0da4d3b0c4def3c42be8":["c3660ef111aa270bdbc5d665a05dfb9b13edb268"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","11e5446472f245825b6f1cc220252acaab5990cf"],"11e5446472f245825b6f1cc220252acaab5990cf":["79928d4d67ab9d5faf2e0da4d3b0c4def3c42be8"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"b1704c078ec59838c9d95d5bf5738b393b537494":[],"b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233":["5a209db4770770843a101e5dfe46086a63507fd3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"70d9c44f68e848648da304352cf7c045c33148f4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","aaf90fc29510e72665ac7934f34c3d1c25efad64","e66a459d38c1c4a2f97128433dab546f683a9fed","b1704c078ec59838c9d95d5bf5738b393b537494","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}