{"path":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.SV#setNextReader(AtomicReaderContext).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.SV#setNextReader(AtomicReaderContext).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.SV#setNextReader(AtomicReaderContext).mjava","sourceNew":"    public void setNextReader(AtomicReaderContext context) throws IOException {\n      if (segmentFacetCounts != null) {\n        segmentResults.add(createSegmentResult());\n      }\n\n      groupFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      facetFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), facetField);\n      segmentFacetCounts = new int[facetFieldTermsIndex.numOrd()];\n      segmentTotalCount = 0;\n\n      segmentGroupedFacetHits.clear();\n      for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n        int facetOrd = facetFieldTermsIndex.binarySearchLookup(groupedFacetHit.facetValue, spare);\n        if (facetOrd < 0) {\n          continue;\n        }\n\n        int groupOrd = groupFieldTermsIndex.binarySearchLookup(groupedFacetHit.groupValue, spare);\n        if (groupOrd < 0) {\n          continue;\n        }\n\n        int segmentGroupedFacetsIndex = (groupOrd * facetFieldTermsIndex.numOrd()) + facetOrd;\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n      }\n\n      if (facetPrefix != null) {\n        startFacetOrd = facetFieldTermsIndex.binarySearchLookup(facetPrefix, spare);\n        if (startFacetOrd < 0) {\n          // Points to the ord one higher than facetPrefix\n          startFacetOrd = -startFacetOrd - 1;\n        }\n        BytesRef facetEndPrefix = BytesRef.deepCopyOf(facetPrefix);\n        facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n        endFacetOrd = facetFieldTermsIndex.binarySearchLookup(facetEndPrefix, spare);\n        endFacetOrd = -endFacetOrd - 1; // Points to the ord one higher than facetEndPrefix\n      } else {\n        startFacetOrd = 0;\n        endFacetOrd = facetFieldTermsIndex.numOrd();\n      }\n    }\n\n","sourceOld":"    public void setNextReader(AtomicReaderContext context) throws IOException {\n      if (segmentFacetCounts != null) {\n        segmentResults.add(createSegmentResult());\n      }\n\n      groupFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      facetFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), facetField);\n      segmentFacetCounts = new int[facetFieldTermsIndex.numOrd()];\n      segmentTotalCount = 0;\n\n      segmentGroupedFacetHits.clear();\n      for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n        int facetOrd = facetFieldTermsIndex.binarySearchLookup(groupedFacetHit.facetValue, spare);\n        if (facetOrd < 0) {\n          continue;\n        }\n\n        int groupOrd = groupFieldTermsIndex.binarySearchLookup(groupedFacetHit.groupValue, spare);\n        if (groupOrd < 0) {\n          continue;\n        }\n\n        int segmentGroupedFacetsIndex = (groupOrd * facetFieldTermsIndex.numOrd()) + facetOrd;\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n      }\n\n      if (facetPrefix != null) {\n        startFacetOrd = facetFieldTermsIndex.binarySearchLookup(facetPrefix, spare);\n        if (startFacetOrd < 0) {\n          // Points to the ord one higher than facetPrefix\n          startFacetOrd = -startFacetOrd - 1;\n        }\n        BytesRef facetEndPrefix = BytesRef.deepCopyOf(facetPrefix);\n        facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n        endFacetOrd = facetFieldTermsIndex.binarySearchLookup(facetEndPrefix, spare);\n        endFacetOrd = -endFacetOrd - 1; // Points to the ord one higher than facetEndPrefix\n      } else {\n        startFacetOrd = 0;\n        endFacetOrd = facetFieldTermsIndex.numOrd();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"854f97cd3613b9579fba83755c80b697e2f3993f","date":1353527621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.SV#setNextReader(AtomicReaderContext).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.SV#setNextReader(AtomicReaderContext).mjava","sourceNew":"    public void setNextReader(AtomicReaderContext context) throws IOException {\n      if (segmentFacetCounts != null) {\n        segmentResults.add(createSegmentResult());\n      }\n\n      groupFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      facetFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), facetField);\n\n      // 1+ to allow for the -1 \"not set\":\n      segmentFacetCounts = new int[facetFieldTermsIndex.numOrd()+1];\n      segmentTotalCount = 0;\n\n      segmentGroupedFacetHits.clear();\n      for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n        int facetOrd = groupedFacetHit.facetValue == null ? -1 : facetFieldTermsIndex.binarySearchLookup(groupedFacetHit.facetValue, spare);\n        if (groupedFacetHit.facetValue != null && facetOrd < 0) {\n          continue;\n        }\n\n        int groupOrd = groupedFacetHit.groupValue == null ? -1 : groupFieldTermsIndex.binarySearchLookup(groupedFacetHit.groupValue, spare);\n        if (groupedFacetHit.groupValue != null && groupOrd < 0) {\n          continue;\n        }\n\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldTermsIndex.numOrd()+1) + facetOrd;\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n      }\n\n      if (facetPrefix != null) {\n        startFacetOrd = facetFieldTermsIndex.binarySearchLookup(facetPrefix, spare);\n        if (startFacetOrd < 0) {\n          // Points to the ord one higher than facetPrefix\n          startFacetOrd = -startFacetOrd - 1;\n        }\n        BytesRef facetEndPrefix = BytesRef.deepCopyOf(facetPrefix);\n        facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n        endFacetOrd = facetFieldTermsIndex.binarySearchLookup(facetEndPrefix, spare);\n        assert endFacetOrd < 0;\n        endFacetOrd = -endFacetOrd - 1; // Points to the ord one higher than facetEndPrefix\n      } else {\n        startFacetOrd = -1;\n        endFacetOrd = facetFieldTermsIndex.numOrd();\n      }\n    }\n\n","sourceOld":"    public void setNextReader(AtomicReaderContext context) throws IOException {\n      if (segmentFacetCounts != null) {\n        segmentResults.add(createSegmentResult());\n      }\n\n      groupFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      facetFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), facetField);\n      segmentFacetCounts = new int[facetFieldTermsIndex.numOrd()];\n      segmentTotalCount = 0;\n\n      segmentGroupedFacetHits.clear();\n      for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n        int facetOrd = facetFieldTermsIndex.binarySearchLookup(groupedFacetHit.facetValue, spare);\n        if (facetOrd < 0) {\n          continue;\n        }\n\n        int groupOrd = groupFieldTermsIndex.binarySearchLookup(groupedFacetHit.groupValue, spare);\n        if (groupOrd < 0) {\n          continue;\n        }\n\n        int segmentGroupedFacetsIndex = (groupOrd * facetFieldTermsIndex.numOrd()) + facetOrd;\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n      }\n\n      if (facetPrefix != null) {\n        startFacetOrd = facetFieldTermsIndex.binarySearchLookup(facetPrefix, spare);\n        if (startFacetOrd < 0) {\n          // Points to the ord one higher than facetPrefix\n          startFacetOrd = -startFacetOrd - 1;\n        }\n        BytesRef facetEndPrefix = BytesRef.deepCopyOf(facetPrefix);\n        facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n        endFacetOrd = facetFieldTermsIndex.binarySearchLookup(facetEndPrefix, spare);\n        endFacetOrd = -endFacetOrd - 1; // Points to the ord one higher than facetEndPrefix\n      } else {\n        startFacetOrd = 0;\n        endFacetOrd = facetFieldTermsIndex.numOrd();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d7e5f3aa5935964617824d1f9b2599ddb334464","date":1353762831,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.SV#setNextReader(AtomicReaderContext).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.SV#setNextReader(AtomicReaderContext).mjava","sourceNew":"    public void setNextReader(AtomicReaderContext context) throws IOException {\n      if (segmentFacetCounts != null) {\n        segmentResults.add(createSegmentResult());\n      }\n\n      groupFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      facetFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), facetField);\n\n      // 1+ to allow for the -1 \"not set\":\n      segmentFacetCounts = new int[facetFieldTermsIndex.getValueCount()+1];\n      segmentTotalCount = 0;\n\n      segmentGroupedFacetHits.clear();\n      for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n        int facetOrd = groupedFacetHit.facetValue == null ? -1 : facetFieldTermsIndex.lookupTerm(groupedFacetHit.facetValue, spare);\n        if (groupedFacetHit.facetValue != null && facetOrd < 0) {\n          continue;\n        }\n\n        int groupOrd = groupedFacetHit.groupValue == null ? -1 : groupFieldTermsIndex.lookupTerm(groupedFacetHit.groupValue, spare);\n        if (groupedFacetHit.groupValue != null && groupOrd < 0) {\n          continue;\n        }\n\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldTermsIndex.getValueCount()+1) + facetOrd;\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n      }\n\n      if (facetPrefix != null) {\n        startFacetOrd = facetFieldTermsIndex.lookupTerm(facetPrefix, spare);\n        if (startFacetOrd < 0) {\n          // Points to the ord one higher than facetPrefix\n          startFacetOrd = -startFacetOrd - 1;\n        }\n        BytesRef facetEndPrefix = BytesRef.deepCopyOf(facetPrefix);\n        facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n        endFacetOrd = facetFieldTermsIndex.lookupTerm(facetEndPrefix, spare);\n        assert endFacetOrd < 0;\n        endFacetOrd = -endFacetOrd - 1; // Points to the ord one higher than facetEndPrefix\n      } else {\n        startFacetOrd = -1;\n        endFacetOrd = facetFieldTermsIndex.getValueCount();\n      }\n    }\n\n","sourceOld":"    public void setNextReader(AtomicReaderContext context) throws IOException {\n      if (segmentFacetCounts != null) {\n        segmentResults.add(createSegmentResult());\n      }\n\n      groupFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      facetFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), facetField);\n\n      // 1+ to allow for the -1 \"not set\":\n      segmentFacetCounts = new int[facetFieldTermsIndex.numOrd()+1];\n      segmentTotalCount = 0;\n\n      segmentGroupedFacetHits.clear();\n      for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n        int facetOrd = groupedFacetHit.facetValue == null ? -1 : facetFieldTermsIndex.binarySearchLookup(groupedFacetHit.facetValue, spare);\n        if (groupedFacetHit.facetValue != null && facetOrd < 0) {\n          continue;\n        }\n\n        int groupOrd = groupedFacetHit.groupValue == null ? -1 : groupFieldTermsIndex.binarySearchLookup(groupedFacetHit.groupValue, spare);\n        if (groupedFacetHit.groupValue != null && groupOrd < 0) {\n          continue;\n        }\n\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldTermsIndex.numOrd()+1) + facetOrd;\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n      }\n\n      if (facetPrefix != null) {\n        startFacetOrd = facetFieldTermsIndex.binarySearchLookup(facetPrefix, spare);\n        if (startFacetOrd < 0) {\n          // Points to the ord one higher than facetPrefix\n          startFacetOrd = -startFacetOrd - 1;\n        }\n        BytesRef facetEndPrefix = BytesRef.deepCopyOf(facetPrefix);\n        facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n        endFacetOrd = facetFieldTermsIndex.binarySearchLookup(facetEndPrefix, spare);\n        assert endFacetOrd < 0;\n        endFacetOrd = -endFacetOrd - 1; // Points to the ord one higher than facetEndPrefix\n      } else {\n        startFacetOrd = -1;\n        endFacetOrd = facetFieldTermsIndex.numOrd();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.SV#setNextReader(AtomicReaderContext).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.SV#setNextReader(AtomicReaderContext).mjava","sourceNew":"    @Override\n    public void setNextReader(AtomicReaderContext context) throws IOException {\n      if (segmentFacetCounts != null) {\n        segmentResults.add(createSegmentResult());\n      }\n\n      groupFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      facetFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), facetField);\n      segmentFacetCounts = new int[facetFieldTermsIndex.numOrd()];\n      segmentTotalCount = 0;\n\n      segmentGroupedFacetHits.clear();\n      for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n        int facetOrd = facetFieldTermsIndex.binarySearchLookup(groupedFacetHit.facetValue, spare);\n        if (facetOrd < 0) {\n          continue;\n        }\n\n        int groupOrd = groupFieldTermsIndex.binarySearchLookup(groupedFacetHit.groupValue, spare);\n        if (groupOrd < 0) {\n          continue;\n        }\n\n        int segmentGroupedFacetsIndex = (groupOrd * facetFieldTermsIndex.numOrd()) + facetOrd;\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n      }\n\n      if (facetPrefix != null) {\n        startFacetOrd = facetFieldTermsIndex.binarySearchLookup(facetPrefix, spare);\n        if (startFacetOrd < 0) {\n          // Points to the ord one higher than facetPrefix\n          startFacetOrd = -startFacetOrd - 1;\n        }\n        BytesRef facetEndPrefix = BytesRef.deepCopyOf(facetPrefix);\n        facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n        endFacetOrd = facetFieldTermsIndex.binarySearchLookup(facetEndPrefix, spare);\n        endFacetOrd = -endFacetOrd - 1; // Points to the ord one higher than facetEndPrefix\n      } else {\n        startFacetOrd = 0;\n        endFacetOrd = facetFieldTermsIndex.numOrd();\n      }\n    }\n\n","sourceOld":"    public void setNextReader(AtomicReaderContext context) throws IOException {\n      if (segmentFacetCounts != null) {\n        segmentResults.add(createSegmentResult());\n      }\n\n      groupFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      facetFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), facetField);\n      segmentFacetCounts = new int[facetFieldTermsIndex.numOrd()];\n      segmentTotalCount = 0;\n\n      segmentGroupedFacetHits.clear();\n      for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n        int facetOrd = facetFieldTermsIndex.binarySearchLookup(groupedFacetHit.facetValue, spare);\n        if (facetOrd < 0) {\n          continue;\n        }\n\n        int groupOrd = groupFieldTermsIndex.binarySearchLookup(groupedFacetHit.groupValue, spare);\n        if (groupOrd < 0) {\n          continue;\n        }\n\n        int segmentGroupedFacetsIndex = (groupOrd * facetFieldTermsIndex.numOrd()) + facetOrd;\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n      }\n\n      if (facetPrefix != null) {\n        startFacetOrd = facetFieldTermsIndex.binarySearchLookup(facetPrefix, spare);\n        if (startFacetOrd < 0) {\n          // Points to the ord one higher than facetPrefix\n          startFacetOrd = -startFacetOrd - 1;\n        }\n        BytesRef facetEndPrefix = BytesRef.deepCopyOf(facetPrefix);\n        facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n        endFacetOrd = facetFieldTermsIndex.binarySearchLookup(facetEndPrefix, spare);\n        endFacetOrd = -endFacetOrd - 1; // Points to the ord one higher than facetEndPrefix\n      } else {\n        startFacetOrd = 0;\n        endFacetOrd = facetFieldTermsIndex.numOrd();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.SV#setNextReader(AtomicReaderContext).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.SV#setNextReader(AtomicReaderContext).mjava","sourceNew":"    @Override\n    public void setNextReader(AtomicReaderContext context) throws IOException {\n      if (segmentFacetCounts != null) {\n        segmentResults.add(createSegmentResult());\n      }\n\n      groupFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      facetFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), facetField);\n\n      // 1+ to allow for the -1 \"not set\":\n      segmentFacetCounts = new int[facetFieldTermsIndex.getValueCount()+1];\n      segmentTotalCount = 0;\n\n      segmentGroupedFacetHits.clear();\n      for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n        int facetOrd = groupedFacetHit.facetValue == null ? -1 : facetFieldTermsIndex.lookupTerm(groupedFacetHit.facetValue, spare);\n        if (groupedFacetHit.facetValue != null && facetOrd < 0) {\n          continue;\n        }\n\n        int groupOrd = groupedFacetHit.groupValue == null ? -1 : groupFieldTermsIndex.lookupTerm(groupedFacetHit.groupValue, spare);\n        if (groupedFacetHit.groupValue != null && groupOrd < 0) {\n          continue;\n        }\n\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldTermsIndex.getValueCount()+1) + facetOrd;\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n      }\n\n      if (facetPrefix != null) {\n        startFacetOrd = facetFieldTermsIndex.lookupTerm(facetPrefix, spare);\n        if (startFacetOrd < 0) {\n          // Points to the ord one higher than facetPrefix\n          startFacetOrd = -startFacetOrd - 1;\n        }\n        BytesRef facetEndPrefix = BytesRef.deepCopyOf(facetPrefix);\n        facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n        endFacetOrd = facetFieldTermsIndex.lookupTerm(facetEndPrefix, spare);\n        assert endFacetOrd < 0;\n        endFacetOrd = -endFacetOrd - 1; // Points to the ord one higher than facetEndPrefix\n      } else {\n        startFacetOrd = -1;\n        endFacetOrd = facetFieldTermsIndex.getValueCount();\n      }\n    }\n\n","sourceOld":"    public void setNextReader(AtomicReaderContext context) throws IOException {\n      if (segmentFacetCounts != null) {\n        segmentResults.add(createSegmentResult());\n      }\n\n      groupFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      facetFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), facetField);\n\n      // 1+ to allow for the -1 \"not set\":\n      segmentFacetCounts = new int[facetFieldTermsIndex.getValueCount()+1];\n      segmentTotalCount = 0;\n\n      segmentGroupedFacetHits.clear();\n      for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n        int facetOrd = groupedFacetHit.facetValue == null ? -1 : facetFieldTermsIndex.lookupTerm(groupedFacetHit.facetValue, spare);\n        if (groupedFacetHit.facetValue != null && facetOrd < 0) {\n          continue;\n        }\n\n        int groupOrd = groupedFacetHit.groupValue == null ? -1 : groupFieldTermsIndex.lookupTerm(groupedFacetHit.groupValue, spare);\n        if (groupedFacetHit.groupValue != null && groupOrd < 0) {\n          continue;\n        }\n\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldTermsIndex.getValueCount()+1) + facetOrd;\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n      }\n\n      if (facetPrefix != null) {\n        startFacetOrd = facetFieldTermsIndex.lookupTerm(facetPrefix, spare);\n        if (startFacetOrd < 0) {\n          // Points to the ord one higher than facetPrefix\n          startFacetOrd = -startFacetOrd - 1;\n        }\n        BytesRef facetEndPrefix = BytesRef.deepCopyOf(facetPrefix);\n        facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n        endFacetOrd = facetFieldTermsIndex.lookupTerm(facetEndPrefix, spare);\n        assert endFacetOrd < 0;\n        endFacetOrd = -endFacetOrd - 1; // Points to the ord one higher than facetEndPrefix\n      } else {\n        startFacetOrd = -1;\n        endFacetOrd = facetFieldTermsIndex.getValueCount();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b","date":1359664357,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.SV#setNextReader(AtomicReaderContext).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.SV#setNextReader(AtomicReaderContext).mjava","sourceNew":"    @Override\n    public void setNextReader(AtomicReaderContext context) throws IOException {\n      if (segmentFacetCounts != null) {\n        segmentResults.add(createSegmentResult());\n      }\n\n      groupFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      facetFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), facetField);\n\n      // 1+ to allow for the -1 \"not set\":\n      segmentFacetCounts = new int[facetFieldTermsIndex.getValueCount()+1];\n      segmentTotalCount = 0;\n\n      segmentGroupedFacetHits.clear();\n      for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n        int facetOrd = groupedFacetHit.facetValue == null ? -1 : facetFieldTermsIndex.lookupTerm(groupedFacetHit.facetValue);\n        if (groupedFacetHit.facetValue != null && facetOrd < 0) {\n          continue;\n        }\n\n        int groupOrd = groupedFacetHit.groupValue == null ? -1 : groupFieldTermsIndex.lookupTerm(groupedFacetHit.groupValue);\n        if (groupedFacetHit.groupValue != null && groupOrd < 0) {\n          continue;\n        }\n\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldTermsIndex.getValueCount()+1) + facetOrd;\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n      }\n\n      if (facetPrefix != null) {\n        startFacetOrd = facetFieldTermsIndex.lookupTerm(facetPrefix);\n        if (startFacetOrd < 0) {\n          // Points to the ord one higher than facetPrefix\n          startFacetOrd = -startFacetOrd - 1;\n        }\n        BytesRef facetEndPrefix = BytesRef.deepCopyOf(facetPrefix);\n        facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n        endFacetOrd = facetFieldTermsIndex.lookupTerm(facetEndPrefix);\n        assert endFacetOrd < 0;\n        endFacetOrd = -endFacetOrd - 1; // Points to the ord one higher than facetEndPrefix\n      } else {\n        startFacetOrd = -1;\n        endFacetOrd = facetFieldTermsIndex.getValueCount();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setNextReader(AtomicReaderContext context) throws IOException {\n      if (segmentFacetCounts != null) {\n        segmentResults.add(createSegmentResult());\n      }\n\n      groupFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      facetFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), facetField);\n\n      // 1+ to allow for the -1 \"not set\":\n      segmentFacetCounts = new int[facetFieldTermsIndex.getValueCount()+1];\n      segmentTotalCount = 0;\n\n      segmentGroupedFacetHits.clear();\n      for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n        int facetOrd = groupedFacetHit.facetValue == null ? -1 : facetFieldTermsIndex.lookupTerm(groupedFacetHit.facetValue, spare);\n        if (groupedFacetHit.facetValue != null && facetOrd < 0) {\n          continue;\n        }\n\n        int groupOrd = groupedFacetHit.groupValue == null ? -1 : groupFieldTermsIndex.lookupTerm(groupedFacetHit.groupValue, spare);\n        if (groupedFacetHit.groupValue != null && groupOrd < 0) {\n          continue;\n        }\n\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldTermsIndex.getValueCount()+1) + facetOrd;\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n      }\n\n      if (facetPrefix != null) {\n        startFacetOrd = facetFieldTermsIndex.lookupTerm(facetPrefix, spare);\n        if (startFacetOrd < 0) {\n          // Points to the ord one higher than facetPrefix\n          startFacetOrd = -startFacetOrd - 1;\n        }\n        BytesRef facetEndPrefix = BytesRef.deepCopyOf(facetPrefix);\n        facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n        endFacetOrd = facetFieldTermsIndex.lookupTerm(facetEndPrefix, spare);\n        assert endFacetOrd < 0;\n        endFacetOrd = -endFacetOrd - 1; // Points to the ord one higher than facetEndPrefix\n      } else {\n        startFacetOrd = -1;\n        endFacetOrd = facetFieldTermsIndex.getValueCount();\n      }\n    }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.SV#setNextReader(AtomicReaderContext).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.SV#setNextReader(AtomicReaderContext).mjava","sourceNew":"    @Override\n    public void setNextReader(AtomicReaderContext context) throws IOException {\n      if (segmentFacetCounts != null) {\n        segmentResults.add(createSegmentResult());\n      }\n\n      groupFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      facetFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), facetField);\n\n      // 1+ to allow for the -1 \"not set\":\n      segmentFacetCounts = new int[facetFieldTermsIndex.getValueCount()+1];\n      segmentTotalCount = 0;\n\n      segmentGroupedFacetHits.clear();\n      for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n        int facetOrd = groupedFacetHit.facetValue == null ? -1 : facetFieldTermsIndex.lookupTerm(groupedFacetHit.facetValue);\n        if (groupedFacetHit.facetValue != null && facetOrd < 0) {\n          continue;\n        }\n\n        int groupOrd = groupedFacetHit.groupValue == null ? -1 : groupFieldTermsIndex.lookupTerm(groupedFacetHit.groupValue);\n        if (groupedFacetHit.groupValue != null && groupOrd < 0) {\n          continue;\n        }\n\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldTermsIndex.getValueCount()+1) + facetOrd;\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n      }\n\n      if (facetPrefix != null) {\n        startFacetOrd = facetFieldTermsIndex.lookupTerm(facetPrefix);\n        if (startFacetOrd < 0) {\n          // Points to the ord one higher than facetPrefix\n          startFacetOrd = -startFacetOrd - 1;\n        }\n        BytesRef facetEndPrefix = BytesRef.deepCopyOf(facetPrefix);\n        facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n        endFacetOrd = facetFieldTermsIndex.lookupTerm(facetEndPrefix);\n        assert endFacetOrd < 0;\n        endFacetOrd = -endFacetOrd - 1; // Points to the ord one higher than facetEndPrefix\n      } else {\n        startFacetOrd = -1;\n        endFacetOrd = facetFieldTermsIndex.getValueCount();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setNextReader(AtomicReaderContext context) throws IOException {\n      if (segmentFacetCounts != null) {\n        segmentResults.add(createSegmentResult());\n      }\n\n      groupFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      facetFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), facetField);\n      segmentFacetCounts = new int[facetFieldTermsIndex.numOrd()];\n      segmentTotalCount = 0;\n\n      segmentGroupedFacetHits.clear();\n      for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n        int facetOrd = facetFieldTermsIndex.binarySearchLookup(groupedFacetHit.facetValue, spare);\n        if (facetOrd < 0) {\n          continue;\n        }\n\n        int groupOrd = groupFieldTermsIndex.binarySearchLookup(groupedFacetHit.groupValue, spare);\n        if (groupOrd < 0) {\n          continue;\n        }\n\n        int segmentGroupedFacetsIndex = (groupOrd * facetFieldTermsIndex.numOrd()) + facetOrd;\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n      }\n\n      if (facetPrefix != null) {\n        startFacetOrd = facetFieldTermsIndex.binarySearchLookup(facetPrefix, spare);\n        if (startFacetOrd < 0) {\n          // Points to the ord one higher than facetPrefix\n          startFacetOrd = -startFacetOrd - 1;\n        }\n        BytesRef facetEndPrefix = BytesRef.deepCopyOf(facetPrefix);\n        facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n        endFacetOrd = facetFieldTermsIndex.binarySearchLookup(facetEndPrefix, spare);\n        endFacetOrd = -endFacetOrd - 1; // Points to the ord one higher than facetEndPrefix\n      } else {\n        startFacetOrd = 0;\n        endFacetOrd = facetFieldTermsIndex.numOrd();\n      }\n    }\n\n","bugFix":["369f44b665973d5aa5fc7d0f2a75ffad475d21ee"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.SV#doSetNextReader(AtomicReaderContext).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.SV#setNextReader(AtomicReaderContext).mjava","sourceNew":"    @Override\n    protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n      if (segmentFacetCounts != null) {\n        segmentResults.add(createSegmentResult());\n      }\n\n      groupFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      facetFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), facetField);\n\n      // 1+ to allow for the -1 \"not set\":\n      segmentFacetCounts = new int[facetFieldTermsIndex.getValueCount()+1];\n      segmentTotalCount = 0;\n\n      segmentGroupedFacetHits.clear();\n      for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n        int facetOrd = groupedFacetHit.facetValue == null ? -1 : facetFieldTermsIndex.lookupTerm(groupedFacetHit.facetValue);\n        if (groupedFacetHit.facetValue != null && facetOrd < 0) {\n          continue;\n        }\n\n        int groupOrd = groupedFacetHit.groupValue == null ? -1 : groupFieldTermsIndex.lookupTerm(groupedFacetHit.groupValue);\n        if (groupedFacetHit.groupValue != null && groupOrd < 0) {\n          continue;\n        }\n\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldTermsIndex.getValueCount()+1) + facetOrd;\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n      }\n\n      if (facetPrefix != null) {\n        startFacetOrd = facetFieldTermsIndex.lookupTerm(facetPrefix);\n        if (startFacetOrd < 0) {\n          // Points to the ord one higher than facetPrefix\n          startFacetOrd = -startFacetOrd - 1;\n        }\n        BytesRef facetEndPrefix = BytesRef.deepCopyOf(facetPrefix);\n        facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n        endFacetOrd = facetFieldTermsIndex.lookupTerm(facetEndPrefix);\n        assert endFacetOrd < 0;\n        endFacetOrd = -endFacetOrd - 1; // Points to the ord one higher than facetEndPrefix\n      } else {\n        startFacetOrd = -1;\n        endFacetOrd = facetFieldTermsIndex.getValueCount();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setNextReader(AtomicReaderContext context) throws IOException {\n      if (segmentFacetCounts != null) {\n        segmentResults.add(createSegmentResult());\n      }\n\n      groupFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      facetFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), facetField);\n\n      // 1+ to allow for the -1 \"not set\":\n      segmentFacetCounts = new int[facetFieldTermsIndex.getValueCount()+1];\n      segmentTotalCount = 0;\n\n      segmentGroupedFacetHits.clear();\n      for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n        int facetOrd = groupedFacetHit.facetValue == null ? -1 : facetFieldTermsIndex.lookupTerm(groupedFacetHit.facetValue);\n        if (groupedFacetHit.facetValue != null && facetOrd < 0) {\n          continue;\n        }\n\n        int groupOrd = groupedFacetHit.groupValue == null ? -1 : groupFieldTermsIndex.lookupTerm(groupedFacetHit.groupValue);\n        if (groupedFacetHit.groupValue != null && groupOrd < 0) {\n          continue;\n        }\n\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldTermsIndex.getValueCount()+1) + facetOrd;\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n      }\n\n      if (facetPrefix != null) {\n        startFacetOrd = facetFieldTermsIndex.lookupTerm(facetPrefix);\n        if (startFacetOrd < 0) {\n          // Points to the ord one higher than facetPrefix\n          startFacetOrd = -startFacetOrd - 1;\n        }\n        BytesRef facetEndPrefix = BytesRef.deepCopyOf(facetPrefix);\n        facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n        endFacetOrd = facetFieldTermsIndex.lookupTerm(facetEndPrefix);\n        assert endFacetOrd < 0;\n        endFacetOrd = -endFacetOrd - 1; // Points to the ord one higher than facetEndPrefix\n      } else {\n        startFacetOrd = -1;\n        endFacetOrd = facetFieldTermsIndex.getValueCount();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":5,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.SV#doSetNextReader(AtomicReaderContext).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.SV#setNextReader(AtomicReaderContext).mjava","sourceNew":"    @Override\n    protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n      if (segmentFacetCounts != null) {\n        segmentResults.add(createSegmentResult());\n      }\n\n      groupFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      facetFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), facetField);\n\n      // 1+ to allow for the -1 \"not set\":\n      segmentFacetCounts = new int[facetFieldTermsIndex.getValueCount()+1];\n      segmentTotalCount = 0;\n\n      segmentGroupedFacetHits.clear();\n      for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n        int facetOrd = groupedFacetHit.facetValue == null ? -1 : facetFieldTermsIndex.lookupTerm(groupedFacetHit.facetValue);\n        if (groupedFacetHit.facetValue != null && facetOrd < 0) {\n          continue;\n        }\n\n        int groupOrd = groupedFacetHit.groupValue == null ? -1 : groupFieldTermsIndex.lookupTerm(groupedFacetHit.groupValue);\n        if (groupedFacetHit.groupValue != null && groupOrd < 0) {\n          continue;\n        }\n\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldTermsIndex.getValueCount()+1) + facetOrd;\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n      }\n\n      if (facetPrefix != null) {\n        startFacetOrd = facetFieldTermsIndex.lookupTerm(facetPrefix);\n        if (startFacetOrd < 0) {\n          // Points to the ord one higher than facetPrefix\n          startFacetOrd = -startFacetOrd - 1;\n        }\n        BytesRef facetEndPrefix = BytesRef.deepCopyOf(facetPrefix);\n        facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n        endFacetOrd = facetFieldTermsIndex.lookupTerm(facetEndPrefix);\n        assert endFacetOrd < 0;\n        endFacetOrd = -endFacetOrd - 1; // Points to the ord one higher than facetEndPrefix\n      } else {\n        startFacetOrd = -1;\n        endFacetOrd = facetFieldTermsIndex.getValueCount();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setNextReader(AtomicReaderContext context) throws IOException {\n      if (segmentFacetCounts != null) {\n        segmentResults.add(createSegmentResult());\n      }\n\n      groupFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      facetFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), facetField);\n\n      // 1+ to allow for the -1 \"not set\":\n      segmentFacetCounts = new int[facetFieldTermsIndex.getValueCount()+1];\n      segmentTotalCount = 0;\n\n      segmentGroupedFacetHits.clear();\n      for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n        int facetOrd = groupedFacetHit.facetValue == null ? -1 : facetFieldTermsIndex.lookupTerm(groupedFacetHit.facetValue);\n        if (groupedFacetHit.facetValue != null && facetOrd < 0) {\n          continue;\n        }\n\n        int groupOrd = groupedFacetHit.groupValue == null ? -1 : groupFieldTermsIndex.lookupTerm(groupedFacetHit.groupValue);\n        if (groupedFacetHit.groupValue != null && groupOrd < 0) {\n          continue;\n        }\n\n        int segmentGroupedFacetsIndex = groupOrd * (facetFieldTermsIndex.getValueCount()+1) + facetOrd;\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n      }\n\n      if (facetPrefix != null) {\n        startFacetOrd = facetFieldTermsIndex.lookupTerm(facetPrefix);\n        if (startFacetOrd < 0) {\n          // Points to the ord one higher than facetPrefix\n          startFacetOrd = -startFacetOrd - 1;\n        }\n        BytesRef facetEndPrefix = BytesRef.deepCopyOf(facetPrefix);\n        facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n        endFacetOrd = facetFieldTermsIndex.lookupTerm(facetEndPrefix);\n        assert endFacetOrd < 0;\n        endFacetOrd = -endFacetOrd - 1; // Points to the ord one higher than facetEndPrefix\n      } else {\n        startFacetOrd = -1;\n        endFacetOrd = facetFieldTermsIndex.getValueCount();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["9d7e5f3aa5935964617824d1f9b2599ddb334464","7530de27b87b961b51f01bd1299b7004d46e8823"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["7530de27b87b961b51f01bd1299b7004d46e8823","3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["d4d69c535930b5cce125cff868d40f6373dc27d4","ae73da626f97850c922c42736f808d0378e165f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"ae73da626f97850c922c42736f808d0378e165f0":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["854f97cd3613b9579fba83755c80b697e2f3993f"],"854f97cd3613b9579fba83755c80b697e2f3993f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7530de27b87b961b51f01bd1299b7004d46e8823":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ae73da626f97850c922c42736f808d0378e165f0"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["854f97cd3613b9579fba83755c80b697e2f3993f","7530de27b87b961b51f01bd1299b7004d46e8823"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"ae73da626f97850c922c42736f808d0378e165f0":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"854f97cd3613b9579fba83755c80b697e2f3993f":["9d7e5f3aa5935964617824d1f9b2599ddb334464"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}