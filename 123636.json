{"path":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testUserProp().mjava","commits":[{"id":"531fe719c7218235a679452eb3d137bfd8fc6af1","date":1415191086,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testUserProp().mjava","pathOld":"/dev/null","sourceNew":"  public void testUserProp() throws Exception{\n    String payload= \"{\\n\" +\n        \" 'set-user-property' : { 'my.custom.variable.a':'MODIFIEDA',\" +\n        \" 'my.custom.variable.b':'MODIFIEDB' } \\n\" +\n        \" }\";\n    RestTestHarness harness = restTestHarness;\n    String response = harness.post(\"/config?wt=json\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response,  map.get(\"errors\"));\n\n    Map m = (Map) getRespMap(\"/config/overlay?wt=json\" ,harness).get(\"overlay\");\n    Map props = (Map) m.get(\"userProps\");\n    assertNotNull(props);\n    assertEquals(props.get(\"my.custom.variable.a\"), \"MODIFIEDA\");\n    assertEquals(props.get(\"my.custom.variable.b\"),\"MODIFIEDB\");\n\n    m = (Map) getRespMap(\"/dump?wt=json&json.nl=map&initArgs=true\" ,harness).get(\"initArgs\");\n\n    m = (Map) m.get(PluginInfo.DEFAULTS);\n    assertEquals(\"MODIFIEDA\", m.get(\"a\"));\n    assertEquals(\"MODIFIEDB\", m.get(\"b\"));\n\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8d1f2c78f560980e5822db6905bb3b2f52fdbe5","date":1417094182,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testUserProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testUserProp().mjava","sourceNew":"  public void testUserProp() throws Exception{\n    RestTestHarness harness = restTestHarness;\n    String payload= \"{\\n\" +\n        \" 'set-user-property' : { 'my.custom.variable.a':'MODIFIEDA',\" +\n        \" 'my.custom.variable.b':'MODIFIEDB' } \\n\" +\n        \" }\";\n    runConfigCommand(harness,\"/config?wt=json\", payload);\n\n    Map m = (Map) getRespMap(\"/config/overlay?wt=json\" ,harness).get(\"overlay\");\n    Map props = (Map) m.get(\"userProps\");\n    assertNotNull(props);\n    assertEquals(props.get(\"my.custom.variable.a\"), \"MODIFIEDA\");\n    assertEquals(props.get(\"my.custom.variable.b\"),\"MODIFIEDB\");\n\n    m = (Map) getRespMap(\"/dump?wt=json&json.nl=map&initArgs=true\" ,harness).get(\"initArgs\");\n\n    m = (Map) m.get(PluginInfo.DEFAULTS);\n    assertEquals(\"MODIFIEDA\", m.get(\"a\"));\n    assertEquals(\"MODIFIEDB\", m.get(\"b\"));\n\n  }\n\n","sourceOld":"  public void testUserProp() throws Exception{\n    String payload= \"{\\n\" +\n        \" 'set-user-property' : { 'my.custom.variable.a':'MODIFIEDA',\" +\n        \" 'my.custom.variable.b':'MODIFIEDB' } \\n\" +\n        \" }\";\n    RestTestHarness harness = restTestHarness;\n    String response = harness.post(\"/config?wt=json\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response,  map.get(\"errors\"));\n\n    Map m = (Map) getRespMap(\"/config/overlay?wt=json\" ,harness).get(\"overlay\");\n    Map props = (Map) m.get(\"userProps\");\n    assertNotNull(props);\n    assertEquals(props.get(\"my.custom.variable.a\"), \"MODIFIEDA\");\n    assertEquals(props.get(\"my.custom.variable.b\"),\"MODIFIEDB\");\n\n    m = (Map) getRespMap(\"/dump?wt=json&json.nl=map&initArgs=true\" ,harness).get(\"initArgs\");\n\n    m = (Map) m.get(PluginInfo.DEFAULTS);\n    assertEquals(\"MODIFIEDA\", m.get(\"a\"));\n    assertEquals(\"MODIFIEDB\", m.get(\"b\"));\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae2f5be890d26585d438eba0b9cc7d3c0a9775be","date":1427387954,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testUserProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testUserProp().mjava","sourceNew":"  public void testUserProp() throws Exception {\n    RestTestHarness harness = restTestHarness;\n    String payload = \"{\\n\" +\n        \" 'set-user-property' : { 'my.custom.variable.a':'MODIFIEDA',\" +\n        \" 'my.custom.variable.b':'MODIFIEDB' } \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config?wt=json\", payload);\n\n    Map m = (Map) getRespMap(\"/config/overlay?wt=json\", harness).get(\"overlay\");\n    Map props = (Map) m.get(\"userProps\");\n    assertNotNull(props);\n    assertEquals(props.get(\"my.custom.variable.a\"), \"MODIFIEDA\");\n    assertEquals(props.get(\"my.custom.variable.b\"), \"MODIFIEDB\");\n\n    m = (Map) getRespMap(\"/dump?wt=json&json.nl=map&initArgs=true\", harness).get(\"initArgs\");\n\n    m = (Map) m.get(PluginInfo.DEFAULTS);\n    assertEquals(\"MODIFIEDA\", m.get(\"a\"));\n    assertEquals(\"MODIFIEDB\", m.get(\"b\"));\n\n  }\n\n","sourceOld":"  public void testUserProp() throws Exception{\n    RestTestHarness harness = restTestHarness;\n    String payload= \"{\\n\" +\n        \" 'set-user-property' : { 'my.custom.variable.a':'MODIFIEDA',\" +\n        \" 'my.custom.variable.b':'MODIFIEDB' } \\n\" +\n        \" }\";\n    runConfigCommand(harness,\"/config?wt=json\", payload);\n\n    Map m = (Map) getRespMap(\"/config/overlay?wt=json\" ,harness).get(\"overlay\");\n    Map props = (Map) m.get(\"userProps\");\n    assertNotNull(props);\n    assertEquals(props.get(\"my.custom.variable.a\"), \"MODIFIEDA\");\n    assertEquals(props.get(\"my.custom.variable.b\"),\"MODIFIEDB\");\n\n    m = (Map) getRespMap(\"/dump?wt=json&json.nl=map&initArgs=true\" ,harness).get(\"initArgs\");\n\n    m = (Map) m.get(PluginInfo.DEFAULTS);\n    assertEquals(\"MODIFIEDA\", m.get(\"a\"));\n    assertEquals(\"MODIFIEDB\", m.get(\"b\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testUserProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testUserProp().mjava","sourceNew":"  public void testUserProp() throws Exception {\n    RestTestHarness harness = restTestHarness;\n    String payload = \"{\\n\" +\n        \" 'set-user-property' : { 'my.custom.variable.a':'MODIFIEDA',\" +\n        \" 'my.custom.variable.b':'MODIFIEDB' } \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config?wt=json\", payload);\n\n    Map m = (Map) getRespMap(\"/config/overlay?wt=json\", harness).get(\"overlay\");\n    Map props = (Map) m.get(\"userProps\");\n    assertNotNull(props);\n    assertEquals(props.get(\"my.custom.variable.a\"), \"MODIFIEDA\");\n    assertEquals(props.get(\"my.custom.variable.b\"), \"MODIFIEDB\");\n\n    m = (Map) getRespMap(\"/dump?wt=json&json.nl=map&initArgs=true\", harness).get(\"initArgs\");\n\n    m = (Map) m.get(PluginInfo.DEFAULTS);\n    assertEquals(\"MODIFIEDA\", m.get(\"a\"));\n    assertEquals(\"MODIFIEDB\", m.get(\"b\"));\n\n  }\n\n","sourceOld":"  public void testUserProp() throws Exception{\n    RestTestHarness harness = restTestHarness;\n    String payload= \"{\\n\" +\n        \" 'set-user-property' : { 'my.custom.variable.a':'MODIFIEDA',\" +\n        \" 'my.custom.variable.b':'MODIFIEDB' } \\n\" +\n        \" }\";\n    runConfigCommand(harness,\"/config?wt=json\", payload);\n\n    Map m = (Map) getRespMap(\"/config/overlay?wt=json\" ,harness).get(\"overlay\");\n    Map props = (Map) m.get(\"userProps\");\n    assertNotNull(props);\n    assertEquals(props.get(\"my.custom.variable.a\"), \"MODIFIEDA\");\n    assertEquals(props.get(\"my.custom.variable.b\"),\"MODIFIEDB\");\n\n    m = (Map) getRespMap(\"/dump?wt=json&json.nl=map&initArgs=true\" ,harness).get(\"initArgs\");\n\n    m = (Map) m.get(PluginInfo.DEFAULTS);\n    assertEquals(\"MODIFIEDA\", m.get(\"a\"));\n    assertEquals(\"MODIFIEDB\", m.get(\"b\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac1e7fa558287a811ea07634d815ee7b1c541284","date":1500910922,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testUserProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testUserProp().mjava","sourceNew":"  public void testUserProp() throws Exception {\n    RestTestHarness harness = restTestHarness;\n    String payload = \"{\\n\" +\n        \" 'set-user-property' : { 'my.custom.variable.a':'MODIFIEDA',\" +\n        \" 'my.custom.variable.b':'MODIFIEDB' } \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config\", payload);\n\n    Map m = (Map) getRespMap(\"/config/overlay\", harness).get(\"overlay\");\n    Map props = (Map) m.get(\"userProps\");\n    assertNotNull(props);\n    assertEquals(props.get(\"my.custom.variable.a\"), \"MODIFIEDA\");\n    assertEquals(props.get(\"my.custom.variable.b\"), \"MODIFIEDB\");\n\n    m = (Map) getRespMap(\"/dump?json.nl=map&initArgs=true\", harness).get(\"initArgs\");\n\n    m = (Map) m.get(PluginInfo.DEFAULTS);\n    assertEquals(\"MODIFIEDA\", m.get(\"a\"));\n    assertEquals(\"MODIFIEDB\", m.get(\"b\"));\n\n  }\n\n","sourceOld":"  public void testUserProp() throws Exception {\n    RestTestHarness harness = restTestHarness;\n    String payload = \"{\\n\" +\n        \" 'set-user-property' : { 'my.custom.variable.a':'MODIFIEDA',\" +\n        \" 'my.custom.variable.b':'MODIFIEDB' } \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config?wt=json\", payload);\n\n    Map m = (Map) getRespMap(\"/config/overlay?wt=json\", harness).get(\"overlay\");\n    Map props = (Map) m.get(\"userProps\");\n    assertNotNull(props);\n    assertEquals(props.get(\"my.custom.variable.a\"), \"MODIFIEDA\");\n    assertEquals(props.get(\"my.custom.variable.b\"), \"MODIFIEDB\");\n\n    m = (Map) getRespMap(\"/dump?wt=json&json.nl=map&initArgs=true\", harness).get(\"initArgs\");\n\n    m = (Map) m.get(PluginInfo.DEFAULTS);\n    assertEquals(\"MODIFIEDA\", m.get(\"a\"));\n    assertEquals(\"MODIFIEDB\", m.get(\"b\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testUserProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testUserProp().mjava","sourceNew":"  public void testUserProp() throws Exception {\n    RestTestHarness harness = restTestHarness;\n    String payload = \"{\\n\" +\n        \" 'set-user-property' : { 'my.custom.variable.a':'MODIFIEDA',\" +\n        \" 'my.custom.variable.b':'MODIFIEDB' } \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config\", payload);\n\n    Map m = (Map) getRespMap(\"/config/overlay\", harness).get(\"overlay\");\n    Map props = (Map) m.get(\"userProps\");\n    assertNotNull(props);\n    assertEquals(props.get(\"my.custom.variable.a\"), \"MODIFIEDA\");\n    assertEquals(props.get(\"my.custom.variable.b\"), \"MODIFIEDB\");\n\n    m = (Map) getRespMap(\"/dump?json.nl=map&initArgs=true\", harness).get(\"initArgs\");\n\n    m = (Map) m.get(PluginInfo.DEFAULTS);\n    assertEquals(\"MODIFIEDA\", m.get(\"a\"));\n    assertEquals(\"MODIFIEDB\", m.get(\"b\"));\n\n  }\n\n","sourceOld":"  public void testUserProp() throws Exception {\n    RestTestHarness harness = restTestHarness;\n    String payload = \"{\\n\" +\n        \" 'set-user-property' : { 'my.custom.variable.a':'MODIFIEDA',\" +\n        \" 'my.custom.variable.b':'MODIFIEDB' } \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config?wt=json\", payload);\n\n    Map m = (Map) getRespMap(\"/config/overlay?wt=json\", harness).get(\"overlay\");\n    Map props = (Map) m.get(\"userProps\");\n    assertNotNull(props);\n    assertEquals(props.get(\"my.custom.variable.a\"), \"MODIFIEDA\");\n    assertEquals(props.get(\"my.custom.variable.b\"), \"MODIFIEDB\");\n\n    m = (Map) getRespMap(\"/dump?wt=json&json.nl=map&initArgs=true\", harness).get(\"initArgs\");\n\n    m = (Map) m.get(PluginInfo.DEFAULTS);\n    assertEquals(\"MODIFIEDA\", m.get(\"a\"));\n    assertEquals(\"MODIFIEDB\", m.get(\"b\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testUserProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testUserProp().mjava","sourceNew":"  public void testUserProp() throws Exception {\n    RestTestHarness harness = restTestHarness;\n    String payload = \"{\\n\" +\n        \" 'set-user-property' : { 'my.custom.variable.a':'MODIFIEDA',\" +\n        \" 'my.custom.variable.b':'MODIFIEDB' } \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config\", payload);\n\n    Map m = (Map) getRespMap(\"/config/overlay\", harness).get(\"overlay\");\n    Map props = (Map) m.get(\"userProps\");\n    assertNotNull(props);\n    assertEquals(props.get(\"my.custom.variable.a\"), \"MODIFIEDA\");\n    assertEquals(props.get(\"my.custom.variable.b\"), \"MODIFIEDB\");\n\n    m = (Map) getRespMap(\"/dump?json.nl=map&initArgs=true\", harness).get(\"initArgs\");\n\n    m = (Map) m.get(PluginInfo.DEFAULTS);\n    assertEquals(\"MODIFIEDA\", m.get(\"a\"));\n    assertEquals(\"MODIFIEDB\", m.get(\"b\"));\n\n  }\n\n","sourceOld":"  public void testUserProp() throws Exception {\n    RestTestHarness harness = restTestHarness;\n    String payload = \"{\\n\" +\n        \" 'set-user-property' : { 'my.custom.variable.a':'MODIFIEDA',\" +\n        \" 'my.custom.variable.b':'MODIFIEDB' } \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config?wt=json\", payload);\n\n    Map m = (Map) getRespMap(\"/config/overlay?wt=json\", harness).get(\"overlay\");\n    Map props = (Map) m.get(\"userProps\");\n    assertNotNull(props);\n    assertEquals(props.get(\"my.custom.variable.a\"), \"MODIFIEDA\");\n    assertEquals(props.get(\"my.custom.variable.b\"), \"MODIFIEDB\");\n\n    m = (Map) getRespMap(\"/dump?wt=json&json.nl=map&initArgs=true\", harness).get(\"initArgs\");\n\n    m = (Map) m.get(PluginInfo.DEFAULTS);\n    assertEquals(\"MODIFIEDA\", m.get(\"a\"));\n    assertEquals(\"MODIFIEDB\", m.get(\"b\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c9780b447ddf847479e7fa9978cb7809a15a0bf","date":1538692320,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testUserProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#testUserProp().mjava","sourceNew":"  public void testUserProp() throws Exception {\n    RestTestHarness harness = restTestHarness;\n    String payload = \"{\\n\" +\n        \" 'set-user-property' : { 'my.custom.variable.a':'MODIFIEDA',\" +\n        \" 'my.custom.variable.b':'MODIFIEDB' } \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config\", payload);\n\n    MapWriter m =  getRespMap(\"/config/overlay\", harness);//.get(\"overlay\");\n    assertEquals(m._get(\"overlay/userProps/my.custom.variable.a\",null), \"MODIFIEDA\");\n    assertEquals(m._get(\"overlay/userProps/my.custom.variable.b\",null), \"MODIFIEDB\");\n\n    m = getRespMap(\"/dump?json.nl=map&initArgs=true\", harness);//.get(\"initArgs\");\n\n    assertEquals(\"MODIFIEDA\", m._get(\"initArgs/defaults/a\",null));\n    assertEquals(\"MODIFIEDB\", m._get(\"initArgs/defaults/b\",null));\n\n  }\n\n","sourceOld":"  public void testUserProp() throws Exception {\n    RestTestHarness harness = restTestHarness;\n    String payload = \"{\\n\" +\n        \" 'set-user-property' : { 'my.custom.variable.a':'MODIFIEDA',\" +\n        \" 'my.custom.variable.b':'MODIFIEDB' } \\n\" +\n        \" }\";\n    runConfigCommand(harness, \"/config\", payload);\n\n    Map m = (Map) getRespMap(\"/config/overlay\", harness).get(\"overlay\");\n    Map props = (Map) m.get(\"userProps\");\n    assertNotNull(props);\n    assertEquals(props.get(\"my.custom.variable.a\"), \"MODIFIEDA\");\n    assertEquals(props.get(\"my.custom.variable.b\"), \"MODIFIEDB\");\n\n    m = (Map) getRespMap(\"/dump?json.nl=map&initArgs=true\", harness).get(\"initArgs\");\n\n    m = (Map) m.get(PluginInfo.DEFAULTS);\n    assertEquals(\"MODIFIEDA\", m.get(\"a\"));\n    assertEquals(\"MODIFIEDB\", m.get(\"b\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d8d1f2c78f560980e5822db6905bb3b2f52fdbe5","ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a52341299179de5479672f7cf518bf4b173f34b3":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be","ac1e7fa558287a811ea07634d815ee7b1c541284"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"936cdd5882761db3b844afd6f84ab81cbb011a75":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be","ac1e7fa558287a811ea07634d815ee7b1c541284"],"d8d1f2c78f560980e5822db6905bb3b2f52fdbe5":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"9c9780b447ddf847479e7fa9978cb7809a15a0bf":["a52341299179de5479672f7cf518bf4b173f34b3"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["d8d1f2c78f560980e5822db6905bb3b2f52fdbe5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9c9780b447ddf847479e7fa9978cb7809a15a0bf"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"531fe719c7218235a679452eb3d137bfd8fc6af1":["d8d1f2c78f560980e5822db6905bb3b2f52fdbe5"],"a52341299179de5479672f7cf518bf4b173f34b3":["9c9780b447ddf847479e7fa9978cb7809a15a0bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"d8d1f2c78f560980e5822db6905bb3b2f52fdbe5":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"9c9780b447ddf847479e7fa9978cb7809a15a0bf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75","ac1e7fa558287a811ea07634d815ee7b1c541284"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}