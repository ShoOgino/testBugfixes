{"path":"lucene/src/java/org/apache/lucene/util/BitVector#BitVector(Directory,String,IOContext).mjava","commits":[{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BitVector#BitVector(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#BitVector(Directory,String).mjava","sourceNew":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    IndexInput input = d.openInput(name, context);\n    try {\n      size = input.readInt();       // read size\n      if (size == -1) {\n        readDgaps(input);\n      } else {\n        readBits(input);\n      }\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name) throws IOException {\n    IndexInput input = d.openInput(name);\n    try {\n      size = input.readInt();       // read size\n      if (size == -1) {\n        readDgaps(input);\n      } else {\n        readBits(input);\n      }\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/BitVector#BitVector(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#BitVector(Directory,String,IOContext).mjava","sourceNew":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    IndexInput input = d.openInput(name, context);\n\n    try {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        version = VERSION_PRE;\n        size = firstInt;\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    IndexInput input = d.openInput(name, context);\n    try {\n      size = input.readInt();       // read size\n      if (size == -1) {\n        readDgaps(input);\n      } else {\n        readBits(input);\n      }\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/BitVector#BitVector(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#BitVector(Directory,String).mjava","sourceNew":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    IndexInput input = d.openInput(name, context);\n\n    try {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        version = VERSION_PRE;\n        size = firstInt;\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name) throws IOException {\n    IndexInput input = d.openInput(name);\n\n    try {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        version = VERSION_PRE;\n        size = firstInt;\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/BitVector#BitVector(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#BitVector(Directory,String).mjava","sourceNew":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    IndexInput input = d.openInput(name, context);\n\n    try {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        version = VERSION_PRE;\n        size = firstInt;\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name) throws IOException {\n    IndexInput input = d.openInput(name);\n\n    try {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        version = VERSION_PRE;\n        size = firstInt;\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0f277693790b6ff2e44509d1b5a1ca5a18f16de","date":1310325911,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BitVector#BitVector(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#BitVector(Directory,String,IOContext).mjava","sourceNew":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    IndexInput input = d.openInput(name, context);\n\n    try {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        version = VERSION_PRE;\n        size = firstInt;\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n      assert verifyCount();\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    IndexInput input = d.openInput(name, context);\n\n    try {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        version = VERSION_PRE;\n        size = firstInt;\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0061262413ecc163d6eebba1b5c43ab91a0c2dc5","date":1311195279,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BitVector#BitVector(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#BitVector(Directory,String,IOContext).mjava","sourceNew":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    IndexInput input = d.openInput(name, context);\n\n    try {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        version = VERSION_PRE;\n        size = firstInt;\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n\n      if (version < VERSION_DGAPS_CLEARED) {\n        invertAll();\n      }\n\n      assert verifyCount();\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    IndexInput input = d.openInput(name, context);\n\n    try {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        version = VERSION_PRE;\n        size = firstInt;\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n      assert verifyCount();\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3a73b15d807e41306466aec106b4cb85b8d5335","date":1326993385,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/BitVector#BitVector(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#BitVector(Directory,String,IOContext).mjava","sourceNew":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    IndexInput input = d.openInput(name, context);\n\n    try {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        version = VERSION_PRE;\n        size = firstInt;\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n\n      if (version < VERSION_DGAPS_CLEARED) {\n        invertAll();\n      }\n\n      assert verifyCount();\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    IndexInput input = d.openInput(name, context);\n\n    try {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        version = VERSION_PRE;\n        size = firstInt;\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n\n      if (version < VERSION_DGAPS_CLEARED) {\n        invertAll();\n      }\n\n      assert verifyCount();\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31","date":1327836826,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/BitVector#BitVector(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#BitVector(Directory,String,IOContext).mjava","sourceNew":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    IndexInput input = d.openInput(name, context);\n\n    try {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        version = VERSION_PRE;\n        size = firstInt;\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n\n      if (version < VERSION_DGAPS_CLEARED) {\n        invertAll();\n      }\n\n      assert verifyCount();\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    IndexInput input = d.openInput(name, context);\n\n    try {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        version = VERSION_PRE;\n        size = firstInt;\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n\n      if (version < VERSION_DGAPS_CLEARED) {\n        invertAll();\n      }\n\n      assert verifyCount();\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/BitVector#BitVector(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#BitVector(Directory,String,IOContext).mjava","sourceNew":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    IndexInput input = d.openInput(name, context);\n\n    try {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        version = VERSION_PRE;\n        size = firstInt;\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n\n      if (version < VERSION_DGAPS_CLEARED) {\n        invertAll();\n      }\n\n      assert verifyCount();\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    IndexInput input = d.openInput(name, context);\n\n    try {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        version = VERSION_PRE;\n        size = firstInt;\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n\n      if (version < VERSION_DGAPS_CLEARED) {\n        invertAll();\n      }\n\n      assert verifyCount();\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f0f277693790b6ff2e44509d1b5a1ca5a18f16de":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["f0f277693790b6ff2e44509d1b5a1ca5a18f16de"],"e3a73b15d807e41306466aec106b4cb85b8d5335":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd92b8bcc88e969302510acf77bd6970da3994c4":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5","e3a73b15d807e41306466aec106b4cb85b8d5335"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"]},"commit2Childs":{"f0f277693790b6ff2e44509d1b5a1ca5a18f16de":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5"],"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["e3a73b15d807e41306466aec106b4cb85b8d5335","fd92b8bcc88e969302510acf77bd6970da3994c4","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"e3a73b15d807e41306466aec106b4cb85b8d5335":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","5d004d0e0b3f65bb40da76d476d659d7888270e8","ddc4c914be86e34b54f70023f45a60fa7f04e929","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["d083e83f225b11e5fdd900e83d26ddb385b6955c"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["f0f277693790b6ff2e44509d1b5a1ca5a18f16de","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["fd92b8bcc88e969302510acf77bd6970da3994c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fd92b8bcc88e969302510acf77bd6970da3994c4","5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}