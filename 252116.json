{"path":"lucene/src/java/org/apache/lucene/index/ParallelReader#ParallelReader(boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#ParallelReader(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/ParallelReader#ParallelReader(boolean).mjava","sourceNew":" /** Construct a ParallelReader. \n  * @param closeSubReaders indicates whether the subreaders should be closed\n  * when this ParallelReader is closed\n  */\n  public ParallelReader(boolean closeSubReaders) throws IOException {\n    super();\n    this.incRefReaders = !closeSubReaders;\n  }\n\n","sourceOld":" /** Construct a ParallelReader. \n  * @param closeSubReaders indicates whether the subreaders should be closed\n  * when this ParallelReader is closed\n  */\n  public ParallelReader(boolean closeSubReaders) throws IOException {\n    super();\n    this.incRefReaders = !closeSubReaders;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340","date":1295995357,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#ParallelReader(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#ParallelReader(boolean).mjava","sourceNew":" /** Construct a ParallelReader. \n  * @param closeSubReaders indicates whether the subreaders should be closed\n  * when this ParallelReader is closed\n  */\n  public ParallelReader(boolean closeSubReaders) throws IOException {\n    super();\n    this.incRefReaders = !closeSubReaders;\n    readerFinishedListeners = Collections.synchronizedSet(new HashSet<ReaderFinishedListener>());\n  }\n\n","sourceOld":" /** Construct a ParallelReader. \n  * @param closeSubReaders indicates whether the subreaders should be closed\n  * when this ParallelReader is closed\n  */\n  public ParallelReader(boolean closeSubReaders) throws IOException {\n    super();\n    this.incRefReaders = !closeSubReaders;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed47693b1e536083c1fa52f3c2994098f3154d3c","date":1296080277,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#ParallelReader(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#ParallelReader(boolean).mjava","sourceNew":" /** Construct a ParallelReader. \n  * @param closeSubReaders indicates whether the subreaders should be closed\n  * when this ParallelReader is closed\n  */\n  public ParallelReader(boolean closeSubReaders) throws IOException {\n    super();\n    this.incRefReaders = !closeSubReaders;\n    readerFinishedListeners = new MapBackedSet<ReaderFinishedListener>(new ConcurrentHashMap<ReaderFinishedListener,Boolean>());\n  }\n\n","sourceOld":" /** Construct a ParallelReader. \n  * @param closeSubReaders indicates whether the subreaders should be closed\n  * when this ParallelReader is closed\n  */\n  public ParallelReader(boolean closeSubReaders) throws IOException {\n    super();\n    this.incRefReaders = !closeSubReaders;\n    readerFinishedListeners = Collections.synchronizedSet(new HashSet<ReaderFinishedListener>());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#ParallelReader(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#ParallelReader(boolean).mjava","sourceNew":" /** Construct a ParallelReader. \n  * @param closeSubReaders indicates whether the subreaders should be closed\n  * when this ParallelReader is closed\n  */\n  public ParallelReader(boolean closeSubReaders) throws IOException {\n    super();\n    this.incRefReaders = !closeSubReaders;\n    readerFinishedListeners = new MapBackedSet<ReaderFinishedListener>(new ConcurrentHashMap<ReaderFinishedListener,Boolean>());\n  }\n\n","sourceOld":" /** Construct a ParallelReader. \n  * @param closeSubReaders indicates whether the subreaders should be closed\n  * when this ParallelReader is closed\n  */\n  public ParallelReader(boolean closeSubReaders) throws IOException {\n    super();\n    this.incRefReaders = !closeSubReaders;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#ParallelReader(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#ParallelReader(boolean).mjava","sourceNew":" /** Construct a ParallelReader. \n  * @param closeSubReaders indicates whether the subreaders should be closed\n  * when this ParallelReader is closed\n  */\n  public ParallelReader(boolean closeSubReaders) throws IOException {\n    super();\n    this.incRefReaders = !closeSubReaders;\n    readerFinishedListeners = new MapBackedSet<ReaderFinishedListener>(new ConcurrentHashMap<ReaderFinishedListener,Boolean>());\n  }\n\n","sourceOld":" /** Construct a ParallelReader. \n  * @param closeSubReaders indicates whether the subreaders should be closed\n  * when this ParallelReader is closed\n  */\n  public ParallelReader(boolean closeSubReaders) throws IOException {\n    super();\n    this.incRefReaders = !closeSubReaders;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeb24fe119d55091148e2a3d94e80c9e349d886c","date":1323807643,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#ParallelReader(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#ParallelReader(boolean).mjava","sourceNew":" /** Construct a ParallelReader. \n  * @param closeSubReaders indicates whether the subreaders should be closed\n  * when this ParallelReader is closed\n  */\n  public ParallelReader(boolean closeSubReaders) throws IOException {\n    super();\n    this.incRefReaders = !closeSubReaders;\n  }\n\n","sourceOld":" /** Construct a ParallelReader. \n  * @param closeSubReaders indicates whether the subreaders should be closed\n  * when this ParallelReader is closed\n  */\n  public ParallelReader(boolean closeSubReaders) throws IOException {\n    super();\n    this.incRefReaders = !closeSubReaders;\n    readerFinishedListeners = new MapBackedSet<ReaderFinishedListener>(new ConcurrentHashMap<ReaderFinishedListener,Boolean>());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06","date":1326148180,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#ParallelReader(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#ParallelReader(boolean).mjava","sourceNew":" /** Construct a ParallelReader. \n  * @param closeSubReaders indicates whether the subreaders should be closed\n  * when this ParallelReader is closed\n  */\n  public ParallelReader(boolean closeSubReaders) throws IOException {\n    super();\n    this.incRefReaders = !closeSubReaders;\n    fieldInfos = new FieldInfos();\n  }\n\n","sourceOld":" /** Construct a ParallelReader. \n  * @param closeSubReaders indicates whether the subreaders should be closed\n  * when this ParallelReader is closed\n  */\n  public ParallelReader(boolean closeSubReaders) throws IOException {\n    super();\n    this.incRefReaders = !closeSubReaders;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ecf541c11d0df215aa1ea806f826d88fb9b5b9b","date":1328624680,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#ParallelReader(boolean).mjava","sourceNew":null,"sourceOld":" /** Construct a ParallelReader. \n  * @param closeSubReaders indicates whether the subreaders should be closed\n  * when this ParallelReader is closed\n  */\n  public ParallelReader(boolean closeSubReaders) throws IOException {\n    super();\n    this.incRefReaders = !closeSubReaders;\n    fieldInfos = new FieldInfos();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08b385e33541f6749e71618c9ab36fad908a7ed0","date":1328629771,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#ParallelReader(boolean).mjava","pathOld":"/dev/null","sourceNew":" /** Construct a ParallelReader. \n  * @param closeSubReaders indicates whether the subreaders should be closed\n  * when this ParallelReader is closed\n  */\n  public ParallelReader(boolean closeSubReaders) throws IOException {\n    super();\n    this.incRefReaders = !closeSubReaders;\n    fieldInfos = new FieldInfos();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ParallelReader#ParallelReader(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#ParallelReader(boolean).mjava","sourceNew":" /** Construct a ParallelReader. \n  * @param closeSubReaders indicates whether the subreaders should be closed\n  * when this ParallelReader is closed\n  */\n  public ParallelReader(boolean closeSubReaders) throws IOException {\n    super();\n    this.incRefReaders = !closeSubReaders;\n    fieldInfos = new FieldInfos();\n  }\n\n","sourceOld":" /** Construct a ParallelReader. \n  * @param closeSubReaders indicates whether the subreaders should be closed\n  * when this ParallelReader is closed\n  */\n  public ParallelReader(boolean closeSubReaders) throws IOException {\n    super();\n    this.incRefReaders = !closeSubReaders;\n    fieldInfos = new FieldInfos();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"08b385e33541f6749e71618c9ab36fad908a7ed0":["9ecf541c11d0df215aa1ea806f826d88fb9b5b9b"],"cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["08b385e33541f6749e71618c9ab36fad908a7ed0"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9454a6510e2db155fb01faa5c049b06ece95fab9","ed47693b1e536083c1fa52f3c2994098f3154d3c"],"9ecf541c11d0df215aa1ea806f826d88fb9b5b9b":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eeb24fe119d55091148e2a3d94e80c9e349d886c":["ed47693b1e536083c1fa52f3c2994098f3154d3c"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["eeb24fe119d55091148e2a3d94e80c9e349d886c"],"ed47693b1e536083c1fa52f3c2994098f3154d3c":["cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["9454a6510e2db155fb01faa5c049b06ece95fab9","ed47693b1e536083c1fa52f3c2994098f3154d3c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"08b385e33541f6749e71618c9ab36fad908a7ed0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340":["ed47693b1e536083c1fa52f3c2994098f3154d3c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"9ecf541c11d0df215aa1ea806f826d88fb9b5b9b":["08b385e33541f6749e71618c9ab36fad908a7ed0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"eeb24fe119d55091148e2a3d94e80c9e349d886c":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"ed47693b1e536083c1fa52f3c2994098f3154d3c":["29ef99d61cda9641b6250bf9567329a6e65f901d","eeb24fe119d55091148e2a3d94e80c9e349d886c","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["9ecf541c11d0df215aa1ea806f826d88fb9b5b9b"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}