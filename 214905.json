{"path":"solr/core/src/test/org/apache/solr/update/UpdateLogTest#testApplyPartialUpdatesWithDelete().mjava","commits":[{"id":"415bbbe7da8065dd3c477bdc3c703c6425622998","date":1485393793,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/UpdateLogTest#testApplyPartialUpdatesWithDelete().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testApplyPartialUpdatesWithDelete() throws Exception {\n    ulogAdd(ulog, null, sdoc(\"id\", \"1\", \"title_s\", \"title1\", \"val1_i_dvo\", \"1\", \"_version_\", \"100\"));\n    ulogAdd(ulog, 100L, sdoc(\"id\", \"1\", \"val1_i_dvo\", \"2\", \"_version_\", \"101\")); // in-place update\n    ulogAdd(ulog, 101L, sdoc(\"id\", \"1\", \"val1_i_dvo\", \"3\", \"_version_\", \"102\")); // in-place update\n    \n    // sanity check that the update log has one document, and RTG returns the document\n    assertEquals(1, ulog.map.size());\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\")\n             , \"=={'doc':{ 'id':'1', 'val1_i_dvo':3, '_version_':102, 'title_s':'title1', \"\n             // fields with default values\n             + \"'inplace_updatable_int_with_default':666, 'inplace_updatable_float_with_default':42.0}}\");\n    \n    boolean dbq = random().nextBoolean();\n    ulogDelete(ulog, \"1\", 200L, dbq); // delete id:1 document\n    if (dbq) {\n      assertNull(ulog.lookup(DOC_1_INDEXED_ID)); // any DBQ clears out the ulog, so this document shouldn't exist\n      assertEquals(0, ulog.map.size());\n      assertTrue(String.valueOf(ulog.prevMap), ulog.prevMap == null || ulog.prevMap.size() == 0);\n      assertTrue(String.valueOf(ulog.prevMap2), ulog.prevMap2 == null || ulog.prevMap2.size() == 0);\n      // verify that the document is deleted, by doing an RTG call\n      assertJQ(req(\"qt\",\"/get\", \"id\",\"1\"), \"=={'doc':null}\");\n    } else { // dbi\n      List entry = ((List)ulog.lookup(DOC_1_INDEXED_ID));\n      assertEquals(UpdateLog.DELETE, (int)entry.get(UpdateLog.FLAGS_IDX) & UpdateLog.OPERATION_MASK);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/UpdateLogTest#testApplyPartialUpdatesWithDelete().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testApplyPartialUpdatesWithDelete() throws Exception {\n    ulogAdd(ulog, null, sdoc(\"id\", \"1\", \"title_s\", \"title1\", \"val1_i_dvo\", \"1\", \"_version_\", \"100\"));\n    ulogAdd(ulog, 100L, sdoc(\"id\", \"1\", \"val1_i_dvo\", \"2\", \"_version_\", \"101\")); // in-place update\n    ulogAdd(ulog, 101L, sdoc(\"id\", \"1\", \"val1_i_dvo\", \"3\", \"_version_\", \"102\")); // in-place update\n    \n    // sanity check that the update log has one document, and RTG returns the document\n    assertEquals(1, ulog.map.size());\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\")\n             , \"=={'doc':{ 'id':'1', 'val1_i_dvo':3, '_version_':102, 'title_s':'title1', \"\n             // fields with default values\n             + \"'inplace_updatable_int_with_default':666, 'inplace_updatable_float_with_default':42.0}}\");\n    \n    boolean dbq = random().nextBoolean();\n    ulogDelete(ulog, \"1\", 200L, dbq); // delete id:1 document\n    if (dbq) {\n      assertNull(ulog.lookup(DOC_1_INDEXED_ID)); // any DBQ clears out the ulog, so this document shouldn't exist\n      assertEquals(0, ulog.map.size());\n      assertTrue(String.valueOf(ulog.prevMap), ulog.prevMap == null || ulog.prevMap.size() == 0);\n      assertTrue(String.valueOf(ulog.prevMap2), ulog.prevMap2 == null || ulog.prevMap2.size() == 0);\n      // verify that the document is deleted, by doing an RTG call\n      assertJQ(req(\"qt\",\"/get\", \"id\",\"1\"), \"=={'doc':null}\");\n    } else { // dbi\n      List entry = ((List)ulog.lookup(DOC_1_INDEXED_ID));\n      assertEquals(UpdateLog.DELETE, (int)entry.get(UpdateLog.FLAGS_IDX) & UpdateLog.OPERATION_MASK);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/UpdateLogTest#testApplyPartialUpdatesWithDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/UpdateLogTest#testApplyPartialUpdatesWithDelete().mjava","sourceNew":"  @Test\n  public void testApplyPartialUpdatesWithDelete() throws Exception {\n    ulogAdd(ulog, null, sdoc(\"id\", \"1\", \"title_s\", \"title1\", \"val1_i_dvo\", \"1\", \"_version_\", \"100\"));\n    ulogAdd(ulog, 100L, sdoc(\"id\", \"1\", \"val1_i_dvo\", \"2\", \"_version_\", \"101\")); // in-place update\n    ulogAdd(ulog, 101L, sdoc(\"id\", \"1\", \"val1_i_dvo\", \"3\", \"_version_\", \"102\")); // in-place update\n    \n    // sanity check that the update log has one document, and RTG returns the document\n    assertEquals(1, ulog.map.size());\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\")\n             , \"=={'doc':{ 'id':'1', 'val1_i_dvo':3, '_version_':102, 'title_s':'title1', \"\n             // fields with default values\n             + \"'inplace_updatable_int_with_default':666, 'inplace_updatable_float_with_default':42.0}}\");\n    \n    boolean dbq = random().nextBoolean();\n    ulogDelete(ulog, \"1\", 200L, dbq); // delete id:1 document\n    if (dbq) {\n      assertNull(ulog.lookup(DOC_1_INDEXED_ID)); // any DBQ clears out the ulog, so this document shouldn't exist\n      assertEquals(0, ulog.map.size());\n      assertTrue(String.valueOf(ulog.prevMap), ulog.prevMap == null || ulog.prevMap.size() == 0);\n      assertTrue(String.valueOf(ulog.prevMap2), ulog.prevMap2 == null || ulog.prevMap2.size() == 0);\n      // verify that the document is deleted, by doing an RTG call\n      assertJQ(req(\"qt\",\"/get\", \"id\",\"1\"), \"=={'doc':null}\");\n    } else { // dbi\n      @SuppressWarnings({\"rawtypes\"})\n      List entry = ((List)ulog.lookup(DOC_1_INDEXED_ID));\n      assertEquals(UpdateLog.DELETE, (int)entry.get(UpdateLog.FLAGS_IDX) & UpdateLog.OPERATION_MASK);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testApplyPartialUpdatesWithDelete() throws Exception {\n    ulogAdd(ulog, null, sdoc(\"id\", \"1\", \"title_s\", \"title1\", \"val1_i_dvo\", \"1\", \"_version_\", \"100\"));\n    ulogAdd(ulog, 100L, sdoc(\"id\", \"1\", \"val1_i_dvo\", \"2\", \"_version_\", \"101\")); // in-place update\n    ulogAdd(ulog, 101L, sdoc(\"id\", \"1\", \"val1_i_dvo\", \"3\", \"_version_\", \"102\")); // in-place update\n    \n    // sanity check that the update log has one document, and RTG returns the document\n    assertEquals(1, ulog.map.size());\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\")\n             , \"=={'doc':{ 'id':'1', 'val1_i_dvo':3, '_version_':102, 'title_s':'title1', \"\n             // fields with default values\n             + \"'inplace_updatable_int_with_default':666, 'inplace_updatable_float_with_default':42.0}}\");\n    \n    boolean dbq = random().nextBoolean();\n    ulogDelete(ulog, \"1\", 200L, dbq); // delete id:1 document\n    if (dbq) {\n      assertNull(ulog.lookup(DOC_1_INDEXED_ID)); // any DBQ clears out the ulog, so this document shouldn't exist\n      assertEquals(0, ulog.map.size());\n      assertTrue(String.valueOf(ulog.prevMap), ulog.prevMap == null || ulog.prevMap.size() == 0);\n      assertTrue(String.valueOf(ulog.prevMap2), ulog.prevMap2 == null || ulog.prevMap2.size() == 0);\n      // verify that the document is deleted, by doing an RTG call\n      assertJQ(req(\"qt\",\"/get\", \"id\",\"1\"), \"=={'doc':null}\");\n    } else { // dbi\n      List entry = ((List)ulog.lookup(DOC_1_INDEXED_ID));\n      assertEquals(UpdateLog.DELETE, (int)entry.get(UpdateLog.FLAGS_IDX) & UpdateLog.OPERATION_MASK);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","415bbbe7da8065dd3c477bdc3c703c6425622998"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["415bbbe7da8065dd3c477bdc3c703c6425622998"]},"commit2Childs":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["598b5d23aa7c9732bf473c21a9cd309c44599394","e98520789adb1d5ad05afb4956eca0944a929688"],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["415bbbe7da8065dd3c477bdc3c703c6425622998","598b5d23aa7c9732bf473c21a9cd309c44599394"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}