{"path":"solr/core/src/test/org/apache/solr/servlet/CacheHeaderTestBase#getSelectMethod(String,String...).mjava","commits":[{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":0,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/CacheHeaderTestBase#getSelectMethod(String,String...).mjava","pathOld":"/dev/null","sourceNew":"  protected HttpRequestBase getSelectMethod(String method, String... params) throws URISyntaxException {\n    HttpSolrServer httpserver = (HttpSolrServer)getSolrServer();\n    HttpRequestBase m = null;\n    \n    ArrayList<BasicNameValuePair> qparams = new ArrayList<BasicNameValuePair>();\n    if(params.length==0) {\n      qparams.add(new BasicNameValuePair(\"q\", \"solr\"));\n      qparams.add(new BasicNameValuePair(\"qt\", \"standard\"));\n    }\n    for (int i = 0; i < params.length / 2; i++) {\n      qparams.add(new BasicNameValuePair(params[i * 2], params[i * 2 + 1]));\n    }\n\n    java.net.URI uri = URIUtils.createURI(\"http\",\n        new URI(httpserver.getBaseURL()).getHost(),\n        new URI(httpserver.getBaseURL()).getPort(), \"/solr/select\",\n        URLEncodedUtils.format(qparams, \"UTF-8\"), null);\n   \n    if (\"GET\".equals(method)) {\n      m = new HttpGet(uri);\n    } else if (\"HEAD\".equals(method)) {\n      m = new HttpHead(uri);\n    } else if (\"POST\".equals(method)) {\n      m = new HttpPost(uri);\n    }\n    \n    return m;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa11c355cd3b3b9207608b85fbd33b34f6f1966e","date":1361303536,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/CacheHeaderTestBase#getSelectMethod(String,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/CacheHeaderTestBase#getSelectMethod(String,String...).mjava","sourceNew":"  protected HttpRequestBase getSelectMethod(String method, String... params) throws URISyntaxException {\n    HttpSolrServer httpserver = (HttpSolrServer)getSolrServer();\n    HttpRequestBase m = null;\n    \n    ArrayList<BasicNameValuePair> qparams = new ArrayList<BasicNameValuePair>();\n    if(params.length==0) {\n      qparams.add(new BasicNameValuePair(\"q\", \"solr\"));\n      qparams.add(new BasicNameValuePair(\"qt\", \"standard\"));\n    }\n    for (int i = 0; i < params.length / 2; i++) {\n      qparams.add(new BasicNameValuePair(params[i * 2], params[i * 2 + 1]));\n    }\n\n    URI uri = URI.create(httpserver.getBaseURL() + \"/select?\" +\n                         URLEncodedUtils.format(qparams, \"UTF-8\"));\n   \n    if (\"GET\".equals(method)) {\n      m = new HttpGet(uri);\n    } else if (\"HEAD\".equals(method)) {\n      m = new HttpHead(uri);\n    } else if (\"POST\".equals(method)) {\n      m = new HttpPost(uri);\n    }\n    \n    return m;\n  }\n\n","sourceOld":"  protected HttpRequestBase getSelectMethod(String method, String... params) throws URISyntaxException {\n    HttpSolrServer httpserver = (HttpSolrServer)getSolrServer();\n    HttpRequestBase m = null;\n    \n    ArrayList<BasicNameValuePair> qparams = new ArrayList<BasicNameValuePair>();\n    if(params.length==0) {\n      qparams.add(new BasicNameValuePair(\"q\", \"solr\"));\n      qparams.add(new BasicNameValuePair(\"qt\", \"standard\"));\n    }\n    for (int i = 0; i < params.length / 2; i++) {\n      qparams.add(new BasicNameValuePair(params[i * 2], params[i * 2 + 1]));\n    }\n\n    java.net.URI uri = URIUtils.createURI(\"http\",\n        new URI(httpserver.getBaseURL()).getHost(),\n        new URI(httpserver.getBaseURL()).getPort(), \"/solr/select\",\n        URLEncodedUtils.format(qparams, \"UTF-8\"), null);\n   \n    if (\"GET\".equals(method)) {\n      m = new HttpGet(uri);\n    } else if (\"HEAD\".equals(method)) {\n      m = new HttpHead(uri);\n    } else if (\"POST\".equals(method)) {\n      m = new HttpPost(uri);\n    }\n    \n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/CacheHeaderTestBase#getSelectMethod(String,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/CacheHeaderTestBase#getSelectMethod(String,String...).mjava","sourceNew":"  protected HttpRequestBase getSelectMethod(String method, String... params) throws URISyntaxException {\n    HttpSolrServer httpserver = (HttpSolrServer)getSolrServer();\n    HttpRequestBase m = null;\n    \n    ArrayList<BasicNameValuePair> qparams = new ArrayList<>();\n    if(params.length==0) {\n      qparams.add(new BasicNameValuePair(\"q\", \"solr\"));\n      qparams.add(new BasicNameValuePair(\"qt\", \"standard\"));\n    }\n    for (int i = 0; i < params.length / 2; i++) {\n      qparams.add(new BasicNameValuePair(params[i * 2], params[i * 2 + 1]));\n    }\n\n    URI uri = URI.create(httpserver.getBaseURL() + \"/select?\" +\n                         URLEncodedUtils.format(qparams, \"UTF-8\"));\n   \n    if (\"GET\".equals(method)) {\n      m = new HttpGet(uri);\n    } else if (\"HEAD\".equals(method)) {\n      m = new HttpHead(uri);\n    } else if (\"POST\".equals(method)) {\n      m = new HttpPost(uri);\n    }\n    \n    return m;\n  }\n\n","sourceOld":"  protected HttpRequestBase getSelectMethod(String method, String... params) throws URISyntaxException {\n    HttpSolrServer httpserver = (HttpSolrServer)getSolrServer();\n    HttpRequestBase m = null;\n    \n    ArrayList<BasicNameValuePair> qparams = new ArrayList<BasicNameValuePair>();\n    if(params.length==0) {\n      qparams.add(new BasicNameValuePair(\"q\", \"solr\"));\n      qparams.add(new BasicNameValuePair(\"qt\", \"standard\"));\n    }\n    for (int i = 0; i < params.length / 2; i++) {\n      qparams.add(new BasicNameValuePair(params[i * 2], params[i * 2 + 1]));\n    }\n\n    URI uri = URI.create(httpserver.getBaseURL() + \"/select?\" +\n                         URLEncodedUtils.format(qparams, \"UTF-8\"));\n   \n    if (\"GET\".equals(method)) {\n      m = new HttpGet(uri);\n    } else if (\"HEAD\".equals(method)) {\n      m = new HttpHead(uri);\n    } else if (\"POST\".equals(method)) {\n      m = new HttpPost(uri);\n    }\n    \n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/CacheHeaderTestBase#getSelectMethod(String,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/CacheHeaderTestBase#getSelectMethod(String,String...).mjava","sourceNew":"  protected HttpRequestBase getSelectMethod(String method, String... params) throws URISyntaxException {\n    HttpSolrServer httpserver = (HttpSolrServer)getSolrServer();\n    HttpRequestBase m = null;\n    \n    ArrayList<BasicNameValuePair> qparams = new ArrayList<>();\n    if(params.length==0) {\n      qparams.add(new BasicNameValuePair(\"q\", \"solr\"));\n      qparams.add(new BasicNameValuePair(\"qt\", \"standard\"));\n    }\n    for (int i = 0; i < params.length / 2; i++) {\n      qparams.add(new BasicNameValuePair(params[i * 2], params[i * 2 + 1]));\n    }\n\n    URI uri = URI.create(httpserver.getBaseURL() + \"/select?\" +\n                         URLEncodedUtils.format(qparams, StandardCharsets.UTF_8));\n   \n    if (\"GET\".equals(method)) {\n      m = new HttpGet(uri);\n    } else if (\"HEAD\".equals(method)) {\n      m = new HttpHead(uri);\n    } else if (\"POST\".equals(method)) {\n      m = new HttpPost(uri);\n    }\n    \n    return m;\n  }\n\n","sourceOld":"  protected HttpRequestBase getSelectMethod(String method, String... params) throws URISyntaxException {\n    HttpSolrServer httpserver = (HttpSolrServer)getSolrServer();\n    HttpRequestBase m = null;\n    \n    ArrayList<BasicNameValuePair> qparams = new ArrayList<>();\n    if(params.length==0) {\n      qparams.add(new BasicNameValuePair(\"q\", \"solr\"));\n      qparams.add(new BasicNameValuePair(\"qt\", \"standard\"));\n    }\n    for (int i = 0; i < params.length / 2; i++) {\n      qparams.add(new BasicNameValuePair(params[i * 2], params[i * 2 + 1]));\n    }\n\n    URI uri = URI.create(httpserver.getBaseURL() + \"/select?\" +\n                         URLEncodedUtils.format(qparams, \"UTF-8\"));\n   \n    if (\"GET\".equals(method)) {\n      m = new HttpGet(uri);\n    } else if (\"HEAD\".equals(method)) {\n      m = new HttpHead(uri);\n    } else if (\"POST\".equals(method)) {\n      m = new HttpPost(uri);\n    }\n    \n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/servlet/CacheHeaderTestBase#getSelectMethod(String,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/CacheHeaderTestBase#getSelectMethod(String,String...).mjava","sourceNew":"  protected HttpRequestBase getSelectMethod(String method, String... params) throws URISyntaxException {\n    HttpSolrServer httpserver = (HttpSolrServer)getSolrServer();\n    HttpRequestBase m = null;\n    \n    ArrayList<BasicNameValuePair> qparams = new ArrayList<>();\n    if(params.length==0) {\n      qparams.add(new BasicNameValuePair(\"q\", \"solr\"));\n      qparams.add(new BasicNameValuePair(\"qt\", \"standard\"));\n    }\n    for (int i = 0; i < params.length / 2; i++) {\n      qparams.add(new BasicNameValuePair(params[i * 2], params[i * 2 + 1]));\n    }\n\n    URI uri = URI.create(httpserver.getBaseURL() + \"/select?\" +\n                         URLEncodedUtils.format(qparams, StandardCharsets.UTF_8));\n   \n    if (\"GET\".equals(method)) {\n      m = new HttpGet(uri);\n    } else if (\"HEAD\".equals(method)) {\n      m = new HttpHead(uri);\n    } else if (\"POST\".equals(method)) {\n      m = new HttpPost(uri);\n    }\n    \n    return m;\n  }\n\n","sourceOld":"  protected HttpRequestBase getSelectMethod(String method, String... params) throws URISyntaxException {\n    HttpSolrServer httpserver = (HttpSolrServer)getSolrServer();\n    HttpRequestBase m = null;\n    \n    ArrayList<BasicNameValuePair> qparams = new ArrayList<>();\n    if(params.length==0) {\n      qparams.add(new BasicNameValuePair(\"q\", \"solr\"));\n      qparams.add(new BasicNameValuePair(\"qt\", \"standard\"));\n    }\n    for (int i = 0; i < params.length / 2; i++) {\n      qparams.add(new BasicNameValuePair(params[i * 2], params[i * 2 + 1]));\n    }\n\n    URI uri = URI.create(httpserver.getBaseURL() + \"/select?\" +\n                         URLEncodedUtils.format(qparams, \"UTF-8\"));\n   \n    if (\"GET\".equals(method)) {\n      m = new HttpGet(uri);\n    } else if (\"HEAD\".equals(method)) {\n      m = new HttpHead(uri);\n    } else if (\"POST\".equals(method)) {\n      m = new HttpPost(uri);\n    }\n    \n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/CacheHeaderTestBase#getSelectMethod(String,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/CacheHeaderTestBase#getSelectMethod(String,String...).mjava","sourceNew":"  protected HttpRequestBase getSelectMethod(String method, String... params) throws URISyntaxException {\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n    HttpRequestBase m = null;\n    \n    ArrayList<BasicNameValuePair> qparams = new ArrayList<>();\n    if(params.length==0) {\n      qparams.add(new BasicNameValuePair(\"q\", \"solr\"));\n      qparams.add(new BasicNameValuePair(\"qt\", \"standard\"));\n    }\n    for (int i = 0; i < params.length / 2; i++) {\n      qparams.add(new BasicNameValuePair(params[i * 2], params[i * 2 + 1]));\n    }\n\n    URI uri = URI.create(client.getBaseURL() + \"/select?\" +\n                         URLEncodedUtils.format(qparams, StandardCharsets.UTF_8));\n   \n    if (\"GET\".equals(method)) {\n      m = new HttpGet(uri);\n    } else if (\"HEAD\".equals(method)) {\n      m = new HttpHead(uri);\n    } else if (\"POST\".equals(method)) {\n      m = new HttpPost(uri);\n    }\n    \n    return m;\n  }\n\n","sourceOld":"  protected HttpRequestBase getSelectMethod(String method, String... params) throws URISyntaxException {\n    HttpSolrServer httpserver = (HttpSolrServer)getSolrServer();\n    HttpRequestBase m = null;\n    \n    ArrayList<BasicNameValuePair> qparams = new ArrayList<>();\n    if(params.length==0) {\n      qparams.add(new BasicNameValuePair(\"q\", \"solr\"));\n      qparams.add(new BasicNameValuePair(\"qt\", \"standard\"));\n    }\n    for (int i = 0; i < params.length / 2; i++) {\n      qparams.add(new BasicNameValuePair(params[i * 2], params[i * 2 + 1]));\n    }\n\n    URI uri = URI.create(httpserver.getBaseURL() + \"/select?\" +\n                         URLEncodedUtils.format(qparams, StandardCharsets.UTF_8));\n   \n    if (\"GET\".equals(method)) {\n      m = new HttpGet(uri);\n    } else if (\"HEAD\".equals(method)) {\n      m = new HttpHead(uri);\n    } else if (\"POST\".equals(method)) {\n      m = new HttpPost(uri);\n    }\n    \n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fa11c355cd3b3b9207608b85fbd33b34f6f1966e":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"5eb2511ababf862ea11e10761c70ee560cd84510":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","9d3d365762604952e436b51980101dfc84cc1b3e"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["fa11c355cd3b3b9207608b85fbd33b34f6f1966e"],"9d3d365762604952e436b51980101dfc84cc1b3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bafca15d8e408346a67f4282ad1143b88023893b":["9d3d365762604952e436b51980101dfc84cc1b3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"fa11c355cd3b3b9207608b85fbd33b34f6f1966e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5eb2511ababf862ea11e10761c70ee560cd84510","9d3d365762604952e436b51980101dfc84cc1b3e"],"9d3d365762604952e436b51980101dfc84cc1b3e":["5eb2511ababf862ea11e10761c70ee560cd84510","bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["fa11c355cd3b3b9207608b85fbd33b34f6f1966e"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}