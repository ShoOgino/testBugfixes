{"path":"solr/core/src/java/org/apache/solr/search/SurroundQParserPlugin.SurroundQParser#parse().mjava","commits":[{"id":"9367dbf5b00d7764583d991c1888f4acc9c9991a","date":1449048142,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SurroundQParserPlugin.SurroundQParser#parse().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Query parse()\n        throws SyntaxError {\n      SrndQuery sq;\n      String qstr = getString();\n      if (qstr == null)\n        return null;\n      String mbqparam = getParam(MBQParam);\n      if (mbqparam == null) {\n        this.maxBasicQueries = DEFMAXBASICQUERIES;\n      } else {\n        try {\n          this.maxBasicQueries = Integer.parseInt(mbqparam);\n        } catch (Exception e) {\n          LOG.warn(\"Couldn't parse maxBasicQueries value \" + mbqparam +\", using default of 1000\");\n          this.maxBasicQueries = DEFMAXBASICQUERIES;\n        }\n      }\n      // ugh .. colliding ParseExceptions\n      try {\n        sq = org.apache.lucene.queryparser.surround.parser.QueryParser\n            .parse(qstr);\n      } catch (org.apache.lucene.queryparser.surround.parser.ParseException pe) {\n        throw new SyntaxError(pe);\n      }\n      \n      // so what do we do with the SrndQuery ??\n      // processing based on example in LIA Ch 9\n\n      BasicQueryFactory bqFactory = new BasicQueryFactory(this.maxBasicQueries);\n      String defaultField = QueryParsing.getDefaultField(getReq().getSchema(),getParam(CommonParams.DF));\n      Query lquery = sq.makeLuceneQueryField(defaultField, bqFactory);\n      return lquery;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d057970b5f9fcaabc49d2f54c59a5d2a09da1769","date":1495200448,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SurroundQParserPlugin.SurroundQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SurroundQParserPlugin.SurroundQParser#parse().mjava","sourceNew":"    @Override\n    public Query parse()\n        throws SyntaxError {\n      SrndQuery sq;\n      String qstr = getString();\n      if (qstr == null)\n        return null;\n      String mbqparam = getParam(MBQParam);\n      if (mbqparam == null) {\n        this.maxBasicQueries = DEFMAXBASICQUERIES;\n      } else {\n        try {\n          this.maxBasicQueries = Integer.parseInt(mbqparam);\n        } catch (Exception e) {\n          LOG.warn(\"Couldn't parse maxBasicQueries value \" + mbqparam +\", using default of 1000\");\n          this.maxBasicQueries = DEFMAXBASICQUERIES;\n        }\n      }\n      // ugh .. colliding ParseExceptions\n      try {\n        sq = org.apache.lucene.queryparser.surround.parser.QueryParser\n            .parse(qstr);\n      } catch (org.apache.lucene.queryparser.surround.parser.ParseException pe) {\n        throw new SyntaxError(pe);\n      }\n      \n      // so what do we do with the SrndQuery ??\n      // processing based on example in LIA Ch 9\n\n      BasicQueryFactory bqFactory = new BasicQueryFactory(this.maxBasicQueries);\n      String defaultField = getParam(CommonParams.DF);\n      Query lquery = sq.makeLuceneQueryField(defaultField, bqFactory);\n      return lquery;\n    }\n\n","sourceOld":"    @Override\n    public Query parse()\n        throws SyntaxError {\n      SrndQuery sq;\n      String qstr = getString();\n      if (qstr == null)\n        return null;\n      String mbqparam = getParam(MBQParam);\n      if (mbqparam == null) {\n        this.maxBasicQueries = DEFMAXBASICQUERIES;\n      } else {\n        try {\n          this.maxBasicQueries = Integer.parseInt(mbqparam);\n        } catch (Exception e) {\n          LOG.warn(\"Couldn't parse maxBasicQueries value \" + mbqparam +\", using default of 1000\");\n          this.maxBasicQueries = DEFMAXBASICQUERIES;\n        }\n      }\n      // ugh .. colliding ParseExceptions\n      try {\n        sq = org.apache.lucene.queryparser.surround.parser.QueryParser\n            .parse(qstr);\n      } catch (org.apache.lucene.queryparser.surround.parser.ParseException pe) {\n        throw new SyntaxError(pe);\n      }\n      \n      // so what do we do with the SrndQuery ??\n      // processing based on example in LIA Ch 9\n\n      BasicQueryFactory bqFactory = new BasicQueryFactory(this.maxBasicQueries);\n      String defaultField = QueryParsing.getDefaultField(getReq().getSchema(),getParam(CommonParams.DF));\n      Query lquery = sq.makeLuceneQueryField(defaultField, bqFactory);\n      return lquery;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SurroundQParserPlugin.SurroundQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SurroundQParserPlugin.SurroundQParser#parse().mjava","sourceNew":"    @Override\n    public Query parse()\n        throws SyntaxError {\n      SrndQuery sq;\n      String qstr = getString();\n      if (qstr == null)\n        return null;\n      String mbqparam = getParam(MBQParam);\n      if (mbqparam == null) {\n        this.maxBasicQueries = DEFMAXBASICQUERIES;\n      } else {\n        try {\n          this.maxBasicQueries = Integer.parseInt(mbqparam);\n        } catch (Exception e) {\n          LOG.warn(\"Couldn't parse maxBasicQueries value \" + mbqparam +\", using default of 1000\");\n          this.maxBasicQueries = DEFMAXBASICQUERIES;\n        }\n      }\n      // ugh .. colliding ParseExceptions\n      try {\n        sq = org.apache.lucene.queryparser.surround.parser.QueryParser\n            .parse(qstr);\n      } catch (org.apache.lucene.queryparser.surround.parser.ParseException pe) {\n        throw new SyntaxError(pe);\n      }\n      \n      // so what do we do with the SrndQuery ??\n      // processing based on example in LIA Ch 9\n\n      BasicQueryFactory bqFactory = new BasicQueryFactory(this.maxBasicQueries);\n      String defaultField = getParam(CommonParams.DF);\n      Query lquery = sq.makeLuceneQueryField(defaultField, bqFactory);\n      return lquery;\n    }\n\n","sourceOld":"    @Override\n    public Query parse()\n        throws SyntaxError {\n      SrndQuery sq;\n      String qstr = getString();\n      if (qstr == null)\n        return null;\n      String mbqparam = getParam(MBQParam);\n      if (mbqparam == null) {\n        this.maxBasicQueries = DEFMAXBASICQUERIES;\n      } else {\n        try {\n          this.maxBasicQueries = Integer.parseInt(mbqparam);\n        } catch (Exception e) {\n          LOG.warn(\"Couldn't parse maxBasicQueries value \" + mbqparam +\", using default of 1000\");\n          this.maxBasicQueries = DEFMAXBASICQUERIES;\n        }\n      }\n      // ugh .. colliding ParseExceptions\n      try {\n        sq = org.apache.lucene.queryparser.surround.parser.QueryParser\n            .parse(qstr);\n      } catch (org.apache.lucene.queryparser.surround.parser.ParseException pe) {\n        throw new SyntaxError(pe);\n      }\n      \n      // so what do we do with the SrndQuery ??\n      // processing based on example in LIA Ch 9\n\n      BasicQueryFactory bqFactory = new BasicQueryFactory(this.maxBasicQueries);\n      String defaultField = QueryParsing.getDefaultField(getReq().getSchema(),getParam(CommonParams.DF));\n      Query lquery = sq.makeLuceneQueryField(defaultField, bqFactory);\n      return lquery;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SurroundQParserPlugin.SurroundQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SurroundQParserPlugin.SurroundQParser#parse().mjava","sourceNew":"    @Override\n    public Query parse()\n        throws SyntaxError {\n      SrndQuery sq;\n      String qstr = getString();\n      if (qstr == null)\n        return null;\n      String mbqparam = getParam(MBQParam);\n      if (mbqparam == null) {\n        this.maxBasicQueries = DEFMAXBASICQUERIES;\n      } else {\n        try {\n          this.maxBasicQueries = Integer.parseInt(mbqparam);\n        } catch (Exception e) {\n          log.warn(\"Couldn't parse maxBasicQueries value \" + mbqparam +\", using default of 1000\");\n          this.maxBasicQueries = DEFMAXBASICQUERIES;\n        }\n      }\n      // ugh .. colliding ParseExceptions\n      try {\n        sq = org.apache.lucene.queryparser.surround.parser.QueryParser\n            .parse(qstr);\n      } catch (org.apache.lucene.queryparser.surround.parser.ParseException pe) {\n        throw new SyntaxError(pe);\n      }\n      \n      // so what do we do with the SrndQuery ??\n      // processing based on example in LIA Ch 9\n\n      BasicQueryFactory bqFactory = new BasicQueryFactory(this.maxBasicQueries);\n      String defaultField = getParam(CommonParams.DF);\n      Query lquery = sq.makeLuceneQueryField(defaultField, bqFactory);\n      return lquery;\n    }\n\n","sourceOld":"    @Override\n    public Query parse()\n        throws SyntaxError {\n      SrndQuery sq;\n      String qstr = getString();\n      if (qstr == null)\n        return null;\n      String mbqparam = getParam(MBQParam);\n      if (mbqparam == null) {\n        this.maxBasicQueries = DEFMAXBASICQUERIES;\n      } else {\n        try {\n          this.maxBasicQueries = Integer.parseInt(mbqparam);\n        } catch (Exception e) {\n          LOG.warn(\"Couldn't parse maxBasicQueries value \" + mbqparam +\", using default of 1000\");\n          this.maxBasicQueries = DEFMAXBASICQUERIES;\n        }\n      }\n      // ugh .. colliding ParseExceptions\n      try {\n        sq = org.apache.lucene.queryparser.surround.parser.QueryParser\n            .parse(qstr);\n      } catch (org.apache.lucene.queryparser.surround.parser.ParseException pe) {\n        throw new SyntaxError(pe);\n      }\n      \n      // so what do we do with the SrndQuery ??\n      // processing based on example in LIA Ch 9\n\n      BasicQueryFactory bqFactory = new BasicQueryFactory(this.maxBasicQueries);\n      String defaultField = getParam(CommonParams.DF);\n      Query lquery = sq.makeLuceneQueryField(defaultField, bqFactory);\n      return lquery;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SurroundQParserPlugin.SurroundQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SurroundQParserPlugin.SurroundQParser#parse().mjava","sourceNew":"    @Override\n    public Query parse()\n        throws SyntaxError {\n      SrndQuery sq;\n      String qstr = getString();\n      if (qstr == null)\n        return null;\n      String mbqparam = getParam(MBQParam);\n      if (mbqparam == null) {\n        this.maxBasicQueries = DEFMAXBASICQUERIES;\n      } else {\n        try {\n          this.maxBasicQueries = Integer.parseInt(mbqparam);\n        } catch (Exception e) {\n          log.warn(\"Couldn't parse maxBasicQueries value {}, using default of 1000\", mbqparam);\n          this.maxBasicQueries = DEFMAXBASICQUERIES;\n        }\n      }\n      // ugh .. colliding ParseExceptions\n      try {\n        sq = org.apache.lucene.queryparser.surround.parser.QueryParser\n            .parse(qstr);\n      } catch (org.apache.lucene.queryparser.surround.parser.ParseException pe) {\n        throw new SyntaxError(pe);\n      }\n      \n      // so what do we do with the SrndQuery ??\n      // processing based on example in LIA Ch 9\n\n      BasicQueryFactory bqFactory = new BasicQueryFactory(this.maxBasicQueries);\n      String defaultField = getParam(CommonParams.DF);\n      Query lquery = sq.makeLuceneQueryField(defaultField, bqFactory);\n      return lquery;\n    }\n\n","sourceOld":"    @Override\n    public Query parse()\n        throws SyntaxError {\n      SrndQuery sq;\n      String qstr = getString();\n      if (qstr == null)\n        return null;\n      String mbqparam = getParam(MBQParam);\n      if (mbqparam == null) {\n        this.maxBasicQueries = DEFMAXBASICQUERIES;\n      } else {\n        try {\n          this.maxBasicQueries = Integer.parseInt(mbqparam);\n        } catch (Exception e) {\n          log.warn(\"Couldn't parse maxBasicQueries value \" + mbqparam +\", using default of 1000\");\n          this.maxBasicQueries = DEFMAXBASICQUERIES;\n        }\n      }\n      // ugh .. colliding ParseExceptions\n      try {\n        sq = org.apache.lucene.queryparser.surround.parser.QueryParser\n            .parse(qstr);\n      } catch (org.apache.lucene.queryparser.surround.parser.ParseException pe) {\n        throw new SyntaxError(pe);\n      }\n      \n      // so what do we do with the SrndQuery ??\n      // processing based on example in LIA Ch 9\n\n      BasicQueryFactory bqFactory = new BasicQueryFactory(this.maxBasicQueries);\n      String defaultField = getParam(CommonParams.DF);\n      Query lquery = sq.makeLuceneQueryField(defaultField, bqFactory);\n      return lquery;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["9367dbf5b00d7764583d991c1888f4acc9c9991a","d057970b5f9fcaabc49d2f54c59a5d2a09da1769"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"d057970b5f9fcaabc49d2f54c59a5d2a09da1769":["9367dbf5b00d7764583d991c1888f4acc9c9991a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["d057970b5f9fcaabc49d2f54c59a5d2a09da1769"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d057970b5f9fcaabc49d2f54c59a5d2a09da1769":["e9017cf144952056066919f1ebc7897ff9bd71b1","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9367dbf5b00d7764583d991c1888f4acc9c9991a"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["e9017cf144952056066919f1ebc7897ff9bd71b1","d057970b5f9fcaabc49d2f54c59a5d2a09da1769"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}