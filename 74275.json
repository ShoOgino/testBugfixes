{"path":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter.SolrZkToCuratorCredentialsACLs#createACLProvider(SolrZkClient).mjava","commits":[{"id":"20be168d828ac40d262f85364d02f15b491dd88b","date":1469725145,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter.SolrZkToCuratorCredentialsACLs#createACLProvider(SolrZkClient).mjava","pathOld":"/dev/null","sourceNew":"    private ACLProvider createACLProvider(SolrZkClient zkClient) {\n      final ZkACLProvider zkACLProvider = zkClient.getZkACLProvider();\n      return new ACLProvider() {\n        @Override\n        public List<ACL> getDefaultAcl() {\n          return zkACLProvider.getACLsToAdd(null);\n        }\n\n        @Override\n        public List<ACL> getAclForPath(String path) {\n           List<ACL> acls = zkACLProvider.getACLsToAdd(path);\n           return acls;\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter.SolrZkToCuratorCredentialsACLs#createACLProvider(SolrZkClient).mjava","pathOld":"/dev/null","sourceNew":"    private ACLProvider createACLProvider(SolrZkClient zkClient) {\n      final ZkACLProvider zkACLProvider = zkClient.getZkACLProvider();\n      return new ACLProvider() {\n        @Override\n        public List<ACL> getDefaultAcl() {\n          return zkACLProvider.getACLsToAdd(null);\n        }\n\n        @Override\n        public List<ACL> getAclForPath(String path) {\n           List<ACL> acls = zkACLProvider.getACLsToAdd(path);\n           return acls;\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter.SolrZkToCuratorCredentialsACLs#createACLProvider(SolrZkClient).mjava","pathOld":"/dev/null","sourceNew":"    private ACLProvider createACLProvider(SolrZkClient zkClient) {\n      final ZkACLProvider zkACLProvider = zkClient.getZkACLProvider();\n      return new ACLProvider() {\n        @Override\n        public List<ACL> getDefaultAcl() {\n          return zkACLProvider.getACLsToAdd(null);\n        }\n\n        @Override\n        public List<ACL> getAclForPath(String path) {\n           List<ACL> acls = zkACLProvider.getACLsToAdd(path);\n           return acls;\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff7e60660726fd43b5f9d130e3de39e69252227a","date":1502275613,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter.SolrZkToCuratorCredentialsACLs#createACLProvider(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter.SolrZkToCuratorCredentialsACLs#createACLProvider(SolrZkClient).mjava","sourceNew":"    private ACLProvider createACLProvider(SolrZkClient zkClient) {\n      final ZkACLProvider zkACLProvider = zkClient.getZkACLProvider();\n      return new ACLProvider() {\n        @Override\n        public List<ACL> getDefaultAcl() {\n          return zkACLProvider.getACLsToAdd(null);\n        }\n\n        @Override\n        public List<ACL> getAclForPath(String path) {\n          List<ACL> acls = null;\n\n          // The logic in SecurityAwareZkACLProvider does not work when\n          // the Solr zkPath is chrooted (e.g. /solr instead of /). This\n          // due to the fact that the getACLsToAdd(..) callback provides\n          // an absolute path (instead of relative path to the chroot) and\n          // the string comparison in SecurityAwareZkACLProvider fails.\n          if (zkACLProvider instanceof SecurityAwareZkACLProvider && zkChroot != null) {\n            acls = zkACLProvider.getACLsToAdd(path.replace(zkChroot, \"\"));\n          } else {\n            acls = zkACLProvider.getACLsToAdd(path);\n          }\n\n          return acls;\n        }\n      };\n    }\n\n","sourceOld":"    private ACLProvider createACLProvider(SolrZkClient zkClient) {\n      final ZkACLProvider zkACLProvider = zkClient.getZkACLProvider();\n      return new ACLProvider() {\n        @Override\n        public List<ACL> getDefaultAcl() {\n          return zkACLProvider.getACLsToAdd(null);\n        }\n\n        @Override\n        public List<ACL> getAclForPath(String path) {\n           List<ACL> acls = zkACLProvider.getACLsToAdd(path);\n           return acls;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter.SolrZkToCuratorCredentialsACLs#createACLProvider(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter.SolrZkToCuratorCredentialsACLs#createACLProvider(SolrZkClient).mjava","sourceNew":"    private ACLProvider createACLProvider(SolrZkClient zkClient) {\n      final ZkACLProvider zkACLProvider = zkClient.getZkACLProvider();\n      return new ACLProvider() {\n        @Override\n        public List<ACL> getDefaultAcl() {\n          return zkACLProvider.getACLsToAdd(null);\n        }\n\n        @Override\n        public List<ACL> getAclForPath(String path) {\n          List<ACL> acls = null;\n\n          // The logic in SecurityAwareZkACLProvider does not work when\n          // the Solr zkPath is chrooted (e.g. /solr instead of /). This\n          // due to the fact that the getACLsToAdd(..) callback provides\n          // an absolute path (instead of relative path to the chroot) and\n          // the string comparison in SecurityAwareZkACLProvider fails.\n          if (zkACLProvider instanceof SecurityAwareZkACLProvider && zkChroot != null) {\n            acls = zkACLProvider.getACLsToAdd(path.replace(zkChroot, \"\"));\n          } else {\n            acls = zkACLProvider.getACLsToAdd(path);\n          }\n\n          return acls;\n        }\n      };\n    }\n\n","sourceOld":"    private ACLProvider createACLProvider(SolrZkClient zkClient) {\n      final ZkACLProvider zkACLProvider = zkClient.getZkACLProvider();\n      return new ACLProvider() {\n        @Override\n        public List<ACL> getDefaultAcl() {\n          return zkACLProvider.getACLsToAdd(null);\n        }\n\n        @Override\n        public List<ACL> getAclForPath(String path) {\n           List<ACL> acls = zkACLProvider.getACLsToAdd(path);\n           return acls;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter.SolrZkToCuratorCredentialsACLs#createACLProvider(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter.SolrZkToCuratorCredentialsACLs#createACLProvider(SolrZkClient).mjava","sourceNew":"    private ACLProvider createACLProvider(SolrZkClient zkClient) {\n      final ZkACLProvider zkACLProvider = zkClient.getZkACLProvider();\n      return new ACLProvider() {\n        @Override\n        public List<ACL> getDefaultAcl() {\n          return zkACLProvider.getACLsToAdd(null);\n        }\n\n        @Override\n        public List<ACL> getAclForPath(String path) {\n          List<ACL> acls = null;\n\n          // The logic in SecurityAwareZkACLProvider does not work when\n          // the Solr zkPath is chrooted (e.g. /solr instead of /). This\n          // due to the fact that the getACLsToAdd(..) callback provides\n          // an absolute path (instead of relative path to the chroot) and\n          // the string comparison in SecurityAwareZkACLProvider fails.\n          if (zkACLProvider instanceof SecurityAwareZkACLProvider && zkChroot != null) {\n            acls = zkACLProvider.getACLsToAdd(path.replace(zkChroot, \"\"));\n          } else {\n            acls = zkACLProvider.getACLsToAdd(path);\n          }\n\n          return acls;\n        }\n      };\n    }\n\n","sourceOld":"    private ACLProvider createACLProvider(SolrZkClient zkClient) {\n      final ZkACLProvider zkACLProvider = zkClient.getZkACLProvider();\n      return new ACLProvider() {\n        @Override\n        public List<ACL> getDefaultAcl() {\n          return zkACLProvider.getACLsToAdd(null);\n        }\n\n        @Override\n        public List<ACL> getAclForPath(String path) {\n           List<ACL> acls = zkACLProvider.getACLsToAdd(path);\n           return acls;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58884af1f68e9d61c217c753fbd6266d86a63b14":["20be168d828ac40d262f85364d02f15b491dd88b","ff7e60660726fd43b5f9d130e3de39e69252227a"],"ff7e60660726fd43b5f9d130e3de39e69252227a":["20be168d828ac40d262f85364d02f15b491dd88b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["20be168d828ac40d262f85364d02f15b491dd88b","ff7e60660726fd43b5f9d130e3de39e69252227a"],"20be168d828ac40d262f85364d02f15b491dd88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20be168d828ac40d262f85364d02f15b491dd88b"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20be168d828ac40d262f85364d02f15b491dd88b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ff7e60660726fd43b5f9d130e3de39e69252227a"]},"commit2Childs":{"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"ff7e60660726fd43b5f9d130e3de39e69252227a":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["20be168d828ac40d262f85364d02f15b491dd88b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"20be168d828ac40d262f85364d02f15b491dd88b":["58884af1f68e9d61c217c753fbd6266d86a63b14","ff7e60660726fd43b5f9d130e3de39e69252227a","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}