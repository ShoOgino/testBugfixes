{"path":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterCloudTest#testJmxReporter().mjava","commits":[{"id":"122c889ac8944e19f984ba4306b02a8742e914a7","date":1502707353,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterCloudTest#testJmxReporter().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testJmxReporter() throws Exception {\n    CollectionAdminRequest.reloadCollection(COLLECTION).processAndWait(cluster.getSolrClient(), 60);\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // index some docs\n    for (int i = 0; i < 100; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"id-\" + i);\n      solrClient.add(COLLECTION, doc);\n    }\n    solrClient.commit(COLLECTION);\n    // make sure searcher is present\n    solrClient.query(COLLECTION, params(CommonParams.Q, \"*:*\"));\n\n    for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n      SolrMetricManager manager = runner.getCoreContainer().getMetricManager();\n      for (String registry : manager.registryNames()) {\n        Map<String, SolrMetricReporter> reporters = manager.getReporters(registry);\n        long jmxReporters = reporters.entrySet().stream().filter(e -> e.getValue() instanceof SolrJmxReporter).count();\n        reporters.forEach((k, v) -> {\n          if (!(v instanceof SolrJmxReporter)) {\n            return;\n          }\n          if (!((SolrJmxReporter)v).getDomain().startsWith(\"solr.core\")) {\n            return;\n          }\n          if (!((SolrJmxReporter)v).isActive()) {\n            return;\n          }\n          QueryExp exp = Query.eq(Query.attr(JmxMetricsReporter.INSTANCE_TAG), Query.value(Integer.toHexString(v.hashCode())));\n          Set<ObjectInstance> beans = mBeanServer.queryMBeans(null, exp);\n          if (((SolrJmxReporter) v).isStarted() && beans.isEmpty() && jmxReporters < 2) {\n            log.info(\"DocCollection: \" + getCollectionState(COLLECTION));\n            fail(\"JMX reporter \" + k + \" for registry \" + registry + \" failed to register any beans!\");\n          } else {\n            Set<String> categories = new HashSet<>();\n            beans.forEach(bean -> {\n              String cat = bean.getObjectName().getKeyProperty(\"category\");\n              if (cat != null) {\n                categories.add(cat);\n              }\n            });\n            log.info(\"Registered categories: \" + categories);\n            assertTrue(\"Too few categories: \" + categories, categories.size() > 5);\n          }\n        });\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c00aac053fdd75193eb8b6d45b64c26c3b586d5b","date":1503143818,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterCloudTest#testJmxReporter().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testJmxReporter() throws Exception {\n    CollectionAdminRequest.reloadCollection(COLLECTION).processAndWait(cluster.getSolrClient(), 60);\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // index some docs\n    for (int i = 0; i < 100; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"id-\" + i);\n      solrClient.add(COLLECTION, doc);\n    }\n    solrClient.commit(COLLECTION);\n    // make sure searcher is present\n    solrClient.query(COLLECTION, params(CommonParams.Q, \"*:*\"));\n\n    for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n      SolrMetricManager manager = runner.getCoreContainer().getMetricManager();\n      for (String registry : manager.registryNames()) {\n        Map<String, SolrMetricReporter> reporters = manager.getReporters(registry);\n        long jmxReporters = reporters.entrySet().stream().filter(e -> e.getValue() instanceof SolrJmxReporter).count();\n        reporters.forEach((k, v) -> {\n          if (!(v instanceof SolrJmxReporter)) {\n            return;\n          }\n          if (!((SolrJmxReporter)v).getDomain().startsWith(\"solr.core\")) {\n            return;\n          }\n          if (!((SolrJmxReporter)v).isActive()) {\n            return;\n          }\n          QueryExp exp = Query.eq(Query.attr(JmxMetricsReporter.INSTANCE_TAG), Query.value(Integer.toHexString(v.hashCode())));\n          Set<ObjectInstance> beans = mBeanServer.queryMBeans(null, exp);\n          if (((SolrJmxReporter) v).isStarted() && beans.isEmpty() && jmxReporters < 2) {\n            log.info(\"DocCollection: \" + getCollectionState(COLLECTION));\n            fail(\"JMX reporter \" + k + \" for registry \" + registry + \" failed to register any beans!\");\n          } else {\n            Set<String> categories = new HashSet<>();\n            beans.forEach(bean -> {\n              String cat = bean.getObjectName().getKeyProperty(\"category\");\n              if (cat != null) {\n                categories.add(cat);\n              }\n            });\n            log.info(\"Registered categories: \" + categories);\n            assertTrue(\"Too few categories: \" + categories, categories.size() > 5);\n          }\n        });\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108","date":1533256859,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterCloudTest#testJmxReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterCloudTest#testJmxReporter().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testJmxReporter() throws Exception {\n    CollectionAdminRequest.reloadCollection(COLLECTION).processAndWait(cluster.getSolrClient(), 60);\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // index some docs\n    for (int i = 0; i < 100; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"id-\" + i);\n      solrClient.add(COLLECTION, doc);\n    }\n    solrClient.commit(COLLECTION);\n    // make sure searcher is present\n    solrClient.query(COLLECTION, params(CommonParams.Q, \"*:*\"));\n\n    for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n      SolrMetricManager manager = runner.getCoreContainer().getMetricManager();\n      for (String registry : manager.registryNames()) {\n        Map<String, SolrMetricReporter> reporters = manager.getReporters(registry);\n        long jmxReporters = reporters.entrySet().stream().filter(e -> e.getValue() instanceof SolrJmxReporter).count();\n        reporters.forEach((k, v) -> {\n          if (!(v instanceof SolrJmxReporter)) {\n            return;\n          }\n          if (!((SolrJmxReporter)v).getDomain().startsWith(\"solr.core\")) {\n            return;\n          }\n          if (!((SolrJmxReporter)v).isActive()) {\n            return;\n          }\n          QueryExp exp = Query.eq(Query.attr(JmxMetricsReporter.INSTANCE_TAG), Query.value(Integer.toHexString(v.hashCode())));\n          Set<ObjectInstance> beans = mBeanServer.queryMBeans(null, exp);\n          if (((SolrJmxReporter) v).isStarted() && beans.isEmpty() && jmxReporters < 2) {\n            log.info(\"DocCollection: \" + getCollectionState(COLLECTION));\n            fail(\"JMX reporter \" + k + \" for registry \" + registry + \" failed to register any beans!\");\n          } else {\n            Set<String> categories = new HashSet<>();\n            beans.forEach(bean -> {\n              String cat = bean.getObjectName().getKeyProperty(\"category\");\n              if (cat != null) {\n                categories.add(cat);\n              }\n            });\n            log.info(\"Registered categories: \" + categories);\n            assertTrue(\"Too few categories: \" + categories, categories.size() > 5);\n          }\n        });\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testJmxReporter() throws Exception {\n    CollectionAdminRequest.reloadCollection(COLLECTION).processAndWait(cluster.getSolrClient(), 60);\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // index some docs\n    for (int i = 0; i < 100; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"id-\" + i);\n      solrClient.add(COLLECTION, doc);\n    }\n    solrClient.commit(COLLECTION);\n    // make sure searcher is present\n    solrClient.query(COLLECTION, params(CommonParams.Q, \"*:*\"));\n\n    for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n      SolrMetricManager manager = runner.getCoreContainer().getMetricManager();\n      for (String registry : manager.registryNames()) {\n        Map<String, SolrMetricReporter> reporters = manager.getReporters(registry);\n        long jmxReporters = reporters.entrySet().stream().filter(e -> e.getValue() instanceof SolrJmxReporter).count();\n        reporters.forEach((k, v) -> {\n          if (!(v instanceof SolrJmxReporter)) {\n            return;\n          }\n          if (!((SolrJmxReporter)v).getDomain().startsWith(\"solr.core\")) {\n            return;\n          }\n          if (!((SolrJmxReporter)v).isActive()) {\n            return;\n          }\n          QueryExp exp = Query.eq(Query.attr(JmxMetricsReporter.INSTANCE_TAG), Query.value(Integer.toHexString(v.hashCode())));\n          Set<ObjectInstance> beans = mBeanServer.queryMBeans(null, exp);\n          if (((SolrJmxReporter) v).isStarted() && beans.isEmpty() && jmxReporters < 2) {\n            log.info(\"DocCollection: \" + getCollectionState(COLLECTION));\n            fail(\"JMX reporter \" + k + \" for registry \" + registry + \" failed to register any beans!\");\n          } else {\n            Set<String> categories = new HashSet<>();\n            beans.forEach(bean -> {\n              String cat = bean.getObjectName().getKeyProperty(\"category\");\n              if (cat != null) {\n                categories.add(cat);\n              }\n            });\n            log.info(\"Registered categories: \" + categories);\n            assertTrue(\"Too few categories: \" + categories, categories.size() > 5);\n          }\n        });\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44dd40f6c2c1465aebf4677bab10f696c7ea18d8","date":1539566013,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterCloudTest#testJmxReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterCloudTest#testJmxReporter().mjava","sourceNew":"  @Test\n  //Commented 14-Oct-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testJmxReporter() throws Exception {\n    CollectionAdminRequest.reloadCollection(COLLECTION).processAndWait(cluster.getSolrClient(), 60);\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // index some docs\n    for (int i = 0; i < 100; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"id-\" + i);\n      solrClient.add(COLLECTION, doc);\n    }\n    solrClient.commit(COLLECTION);\n    // make sure searcher is present\n    solrClient.query(COLLECTION, params(CommonParams.Q, \"*:*\"));\n\n    for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n      SolrMetricManager manager = runner.getCoreContainer().getMetricManager();\n      for (String registry : manager.registryNames()) {\n        Map<String, SolrMetricReporter> reporters = manager.getReporters(registry);\n        long jmxReporters = reporters.entrySet().stream().filter(e -> e.getValue() instanceof SolrJmxReporter).count();\n        reporters.forEach((k, v) -> {\n          if (!(v instanceof SolrJmxReporter)) {\n            return;\n          }\n          if (!((SolrJmxReporter)v).getDomain().startsWith(\"solr.core\")) {\n            return;\n          }\n          if (!((SolrJmxReporter)v).isActive()) {\n            return;\n          }\n          QueryExp exp = Query.eq(Query.attr(JmxMetricsReporter.INSTANCE_TAG), Query.value(Integer.toHexString(v.hashCode())));\n          Set<ObjectInstance> beans = mBeanServer.queryMBeans(null, exp);\n          if (((SolrJmxReporter) v).isStarted() && beans.isEmpty() && jmxReporters < 2) {\n            log.info(\"DocCollection: \" + getCollectionState(COLLECTION));\n            fail(\"JMX reporter \" + k + \" for registry \" + registry + \" failed to register any beans!\");\n          } else {\n            Set<String> categories = new HashSet<>();\n            beans.forEach(bean -> {\n              String cat = bean.getObjectName().getKeyProperty(\"category\");\n              if (cat != null) {\n                categories.add(cat);\n              }\n            });\n            log.info(\"Registered categories: \" + categories);\n            assertTrue(\"Too few categories: \" + categories, categories.size() > 5);\n          }\n        });\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testJmxReporter() throws Exception {\n    CollectionAdminRequest.reloadCollection(COLLECTION).processAndWait(cluster.getSolrClient(), 60);\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // index some docs\n    for (int i = 0; i < 100; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"id-\" + i);\n      solrClient.add(COLLECTION, doc);\n    }\n    solrClient.commit(COLLECTION);\n    // make sure searcher is present\n    solrClient.query(COLLECTION, params(CommonParams.Q, \"*:*\"));\n\n    for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n      SolrMetricManager manager = runner.getCoreContainer().getMetricManager();\n      for (String registry : manager.registryNames()) {\n        Map<String, SolrMetricReporter> reporters = manager.getReporters(registry);\n        long jmxReporters = reporters.entrySet().stream().filter(e -> e.getValue() instanceof SolrJmxReporter).count();\n        reporters.forEach((k, v) -> {\n          if (!(v instanceof SolrJmxReporter)) {\n            return;\n          }\n          if (!((SolrJmxReporter)v).getDomain().startsWith(\"solr.core\")) {\n            return;\n          }\n          if (!((SolrJmxReporter)v).isActive()) {\n            return;\n          }\n          QueryExp exp = Query.eq(Query.attr(JmxMetricsReporter.INSTANCE_TAG), Query.value(Integer.toHexString(v.hashCode())));\n          Set<ObjectInstance> beans = mBeanServer.queryMBeans(null, exp);\n          if (((SolrJmxReporter) v).isStarted() && beans.isEmpty() && jmxReporters < 2) {\n            log.info(\"DocCollection: \" + getCollectionState(COLLECTION));\n            fail(\"JMX reporter \" + k + \" for registry \" + registry + \" failed to register any beans!\");\n          } else {\n            Set<String> categories = new HashSet<>();\n            beans.forEach(bean -> {\n              String cat = bean.getObjectName().getKeyProperty(\"category\");\n              if (cat != null) {\n                categories.add(cat);\n              }\n            });\n            log.info(\"Registered categories: \" + categories);\n            assertTrue(\"Too few categories: \" + categories, categories.size() > 5);\n          }\n        });\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0bd73fce3cfd6bdbad8b5ad4f5a20b888b050cef","date":1565389648,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterCloudTest#testJmxReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterCloudTest#testJmxReporter().mjava","sourceNew":"  @Test\n  public void testJmxReporter() throws Exception {\n    CollectionAdminRequest.reloadCollection(COLLECTION).processAndWait(cluster.getSolrClient(), 60);\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // index some docs\n    for (int i = 0; i < 100; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"id-\" + i);\n      solrClient.add(COLLECTION, doc);\n    }\n    solrClient.commit(COLLECTION);\n    // make sure searcher is present\n    solrClient.query(COLLECTION, params(CommonParams.Q, \"*:*\"));\n\n    for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n      SolrMetricManager manager = runner.getCoreContainer().getMetricManager();\n      for (String registry : manager.registryNames()) {\n        Map<String, SolrMetricReporter> reporters = manager.getReporters(registry);\n        long jmxReporters = reporters.entrySet().stream().filter(e -> e.getValue() instanceof SolrJmxReporter).count();\n        reporters.forEach((k, v) -> {\n          if (!(v instanceof SolrJmxReporter)) {\n            return;\n          }\n          if (!((SolrJmxReporter)v).getDomain().startsWith(\"solr.core\")) {\n            return;\n          }\n          if (!((SolrJmxReporter)v).isActive()) {\n            return;\n          }\n          QueryExp exp = Query.eq(Query.attr(JmxMetricsReporter.INSTANCE_TAG), Query.value(Integer.toHexString(v.hashCode())));\n          Set<ObjectInstance> beans = mBeanServer.queryMBeans(null, exp);\n          if (((SolrJmxReporter) v).isStarted() && beans.isEmpty() && jmxReporters < 2) {\n            log.info(\"DocCollection: \" + getCollectionState(COLLECTION));\n            fail(\"JMX reporter \" + k + \" for registry \" + registry + \" failed to register any beans!\");\n          } else {\n            Set<String> categories = new HashSet<>();\n            beans.forEach(bean -> {\n              String cat = bean.getObjectName().getKeyProperty(\"category\");\n              if (cat != null) {\n                categories.add(cat);\n              }\n            });\n            log.info(\"Registered categories: \" + categories);\n            assertTrue(\"Too few categories: \" + categories, categories.size() > 5);\n          }\n        });\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //Commented 14-Oct-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testJmxReporter() throws Exception {\n    CollectionAdminRequest.reloadCollection(COLLECTION).processAndWait(cluster.getSolrClient(), 60);\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // index some docs\n    for (int i = 0; i < 100; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"id-\" + i);\n      solrClient.add(COLLECTION, doc);\n    }\n    solrClient.commit(COLLECTION);\n    // make sure searcher is present\n    solrClient.query(COLLECTION, params(CommonParams.Q, \"*:*\"));\n\n    for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n      SolrMetricManager manager = runner.getCoreContainer().getMetricManager();\n      for (String registry : manager.registryNames()) {\n        Map<String, SolrMetricReporter> reporters = manager.getReporters(registry);\n        long jmxReporters = reporters.entrySet().stream().filter(e -> e.getValue() instanceof SolrJmxReporter).count();\n        reporters.forEach((k, v) -> {\n          if (!(v instanceof SolrJmxReporter)) {\n            return;\n          }\n          if (!((SolrJmxReporter)v).getDomain().startsWith(\"solr.core\")) {\n            return;\n          }\n          if (!((SolrJmxReporter)v).isActive()) {\n            return;\n          }\n          QueryExp exp = Query.eq(Query.attr(JmxMetricsReporter.INSTANCE_TAG), Query.value(Integer.toHexString(v.hashCode())));\n          Set<ObjectInstance> beans = mBeanServer.queryMBeans(null, exp);\n          if (((SolrJmxReporter) v).isStarted() && beans.isEmpty() && jmxReporters < 2) {\n            log.info(\"DocCollection: \" + getCollectionState(COLLECTION));\n            fail(\"JMX reporter \" + k + \" for registry \" + registry + \" failed to register any beans!\");\n          } else {\n            Set<String> categories = new HashSet<>();\n            beans.forEach(bean -> {\n              String cat = bean.getObjectName().getKeyProperty(\"category\");\n              if (cat != null) {\n                categories.add(cat);\n              }\n            });\n            log.info(\"Registered categories: \" + categories);\n            assertTrue(\"Too few categories: \" + categories, categories.size() > 5);\n          }\n        });\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterCloudTest#testJmxReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterCloudTest#testJmxReporter().mjava","sourceNew":"  @Test\n  public void testJmxReporter() throws Exception {\n    CollectionAdminRequest.reloadCollection(COLLECTION).processAndWait(cluster.getSolrClient(), 60);\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // index some docs\n    for (int i = 0; i < 100; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"id-\" + i);\n      solrClient.add(COLLECTION, doc);\n    }\n    solrClient.commit(COLLECTION);\n    // make sure searcher is present\n    solrClient.query(COLLECTION, params(CommonParams.Q, \"*:*\"));\n\n    for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n      SolrMetricManager manager = runner.getCoreContainer().getMetricManager();\n      for (String registry : manager.registryNames()) {\n        Map<String, SolrMetricReporter> reporters = manager.getReporters(registry);\n        long jmxReporters = reporters.entrySet().stream().filter(e -> e.getValue() instanceof SolrJmxReporter).count();\n        reporters.forEach((k, v) -> {\n          if (!(v instanceof SolrJmxReporter)) {\n            return;\n          }\n          if (!((SolrJmxReporter)v).getDomain().startsWith(\"solr.core\")) {\n            return;\n          }\n          if (!((SolrJmxReporter)v).isActive()) {\n            return;\n          }\n          QueryExp exp = Query.eq(Query.attr(JmxMetricsReporter.INSTANCE_TAG), Query.value(Integer.toHexString(v.hashCode())));\n          Set<ObjectInstance> beans = mBeanServer.queryMBeans(null, exp);\n          if (((SolrJmxReporter) v).isStarted() && beans.isEmpty() && jmxReporters < 2) {\n            if (log.isInfoEnabled()) {\n              log.info(\"DocCollection: {}\", getCollectionState(COLLECTION));\n            }\n            fail(\"JMX reporter \" + k + \" for registry \" + registry + \" failed to register any beans!\");\n          } else {\n            Set<String> categories = new HashSet<>();\n            beans.forEach(bean -> {\n              String cat = bean.getObjectName().getKeyProperty(\"category\");\n              if (cat != null) {\n                categories.add(cat);\n              }\n            });\n            log.info(\"Registered categories: {}\", categories);\n            assertTrue(\"Too few categories: \" + categories, categories.size() > 5);\n          }\n        });\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testJmxReporter() throws Exception {\n    CollectionAdminRequest.reloadCollection(COLLECTION).processAndWait(cluster.getSolrClient(), 60);\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // index some docs\n    for (int i = 0; i < 100; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"id-\" + i);\n      solrClient.add(COLLECTION, doc);\n    }\n    solrClient.commit(COLLECTION);\n    // make sure searcher is present\n    solrClient.query(COLLECTION, params(CommonParams.Q, \"*:*\"));\n\n    for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n      SolrMetricManager manager = runner.getCoreContainer().getMetricManager();\n      for (String registry : manager.registryNames()) {\n        Map<String, SolrMetricReporter> reporters = manager.getReporters(registry);\n        long jmxReporters = reporters.entrySet().stream().filter(e -> e.getValue() instanceof SolrJmxReporter).count();\n        reporters.forEach((k, v) -> {\n          if (!(v instanceof SolrJmxReporter)) {\n            return;\n          }\n          if (!((SolrJmxReporter)v).getDomain().startsWith(\"solr.core\")) {\n            return;\n          }\n          if (!((SolrJmxReporter)v).isActive()) {\n            return;\n          }\n          QueryExp exp = Query.eq(Query.attr(JmxMetricsReporter.INSTANCE_TAG), Query.value(Integer.toHexString(v.hashCode())));\n          Set<ObjectInstance> beans = mBeanServer.queryMBeans(null, exp);\n          if (((SolrJmxReporter) v).isStarted() && beans.isEmpty() && jmxReporters < 2) {\n            log.info(\"DocCollection: \" + getCollectionState(COLLECTION));\n            fail(\"JMX reporter \" + k + \" for registry \" + registry + \" failed to register any beans!\");\n          } else {\n            Set<String> categories = new HashSet<>();\n            beans.forEach(bean -> {\n              String cat = bean.getObjectName().getKeyProperty(\"category\");\n              if (cat != null) {\n                categories.add(cat);\n              }\n            });\n            log.info(\"Registered categories: \" + categories);\n            assertTrue(\"Too few categories: \" + categories, categories.size() > 5);\n          }\n        });\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108"],"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["122c889ac8944e19f984ba4306b02a8742e914a7"],"c00aac053fdd75193eb8b6d45b64c26c3b586d5b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","122c889ac8944e19f984ba4306b02a8742e914a7"],"0bd73fce3cfd6bdbad8b5ad4f5a20b888b050cef":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"122c889ac8944e19f984ba4306b02a8742e914a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["0bd73fce3cfd6bdbad8b5ad4f5a20b888b050cef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["0bd73fce3cfd6bdbad8b5ad4f5a20b888b050cef"],"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"c00aac053fdd75193eb8b6d45b64c26c3b586d5b":[],"0bd73fce3cfd6bdbad8b5ad4f5a20b888b050cef":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"122c889ac8944e19f984ba4306b02a8742e914a7":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108","c00aac053fdd75193eb8b6d45b64c26c3b586d5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b","122c889ac8944e19f984ba4306b02a8742e914a7"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}