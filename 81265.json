{"path":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthorizationPlugin(Map[String,Object]).mjava","commits":[{"id":"6bdcb86c29922edae9a14852e636303bc52df094","date":1438887454,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthorizationPlugin(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#intializeAuthorizationPlugin().mjava","sourceNew":"  private synchronized void initializeAuthorizationPlugin(Map<String, Object> authorizationConf) {\n    authorizationConf = Utils.getDeepCopy(authorizationConf, 4);\n    //Initialize the Authorization module\n    SecurityPluginHolder<AuthorizationPlugin> old = authorizationPlugin;\n    SecurityPluginHolder<AuthorizationPlugin> authorizationPlugin = null;\n    if (authorizationConf != null) {\n      String klas = (String) authorizationConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for authorization plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == readVersion(authorizationConf)) {\n        return;\n      }\n      log.info(\"Initializing authorization plugin: \" + klas);\n      authorizationPlugin = new SecurityPluginHolder<>(readVersion(authorizationConf),\n          getResourceLoader().newInstance(klas, AuthorizationPlugin.class));\n\n      // Read and pass the authorization context to the plugin\n      authorizationPlugin.plugin.init(authorizationConf);\n    } else {\n      log.info(\"Security conf doesn't exist. Skipping setup for authorization module.\");\n    }\n    this.authorizationPlugin = authorizationPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n      }\n    }\n  }\n\n","sourceOld":"  private void intializeAuthorizationPlugin() {\n    //Initialize the Authorization module\n    Map securityProps = getZkController().getZkStateReader().getSecurityProps();\n    if(securityProps != null) {\n      Map authorizationConf = (Map) securityProps.get(\"authorization\");\n      if(authorizationConf == null) return;\n      String klas = (String) authorizationConf.get(\"class\");\n      if(klas == null){\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for authorization plugin\");\n      }\n      log.info(\"Initializing authorization plugin: \" + klas);\n      authorizationPlugin = getResourceLoader().newInstance((String) klas,\n          AuthorizationPlugin.class);\n\n      // Read and pass the authorization context to the plugin\n      authorizationPlugin.init(authorizationConf);\n    } else {\n      log.info(\"Security conf doesn't exist. Skipping setup for authorization module.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f0c8426396c925de8db3ed3f8ff40fd73670a5c","date":1474556641,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthorizationPlugin(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthorizationPlugin(Map[String,Object]).mjava","sourceNew":"  private synchronized void initializeAuthorizationPlugin(Map<String, Object> authorizationConf) {\n    authorizationConf = Utils.getDeepCopy(authorizationConf, 4);\n    //Initialize the Authorization module\n    SecurityPluginHolder<AuthorizationPlugin> old = authorizationPlugin;\n    SecurityPluginHolder<AuthorizationPlugin> authorizationPlugin = null;\n    if (authorizationConf != null) {\n      String klas = (String) authorizationConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for authorization plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == readVersion(authorizationConf)) {\n        return;\n      }\n      log.info(\"Initializing authorization plugin: \" + klas);\n      authorizationPlugin = new SecurityPluginHolder<>(readVersion(authorizationConf),\n          getResourceLoader().newInstance(klas, AuthorizationPlugin.class));\n\n      // Read and pass the authorization context to the plugin\n      authorizationPlugin.plugin.init(authorizationConf);\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for authorization module.\");\n    }\n    this.authorizationPlugin = authorizationPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n      }\n    }\n  }\n\n","sourceOld":"  private synchronized void initializeAuthorizationPlugin(Map<String, Object> authorizationConf) {\n    authorizationConf = Utils.getDeepCopy(authorizationConf, 4);\n    //Initialize the Authorization module\n    SecurityPluginHolder<AuthorizationPlugin> old = authorizationPlugin;\n    SecurityPluginHolder<AuthorizationPlugin> authorizationPlugin = null;\n    if (authorizationConf != null) {\n      String klas = (String) authorizationConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for authorization plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == readVersion(authorizationConf)) {\n        return;\n      }\n      log.info(\"Initializing authorization plugin: \" + klas);\n      authorizationPlugin = new SecurityPluginHolder<>(readVersion(authorizationConf),\n          getResourceLoader().newInstance(klas, AuthorizationPlugin.class));\n\n      // Read and pass the authorization context to the plugin\n      authorizationPlugin.plugin.init(authorizationConf);\n    } else {\n      log.info(\"Security conf doesn't exist. Skipping setup for authorization module.\");\n    }\n    this.authorizationPlugin = authorizationPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"126d6ad24eed13163ba0959435d5a80e5672837c","date":1474567302,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthorizationPlugin(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthorizationPlugin(Map[String,Object]).mjava","sourceNew":"  private synchronized void initializeAuthorizationPlugin(Map<String, Object> authorizationConf) {\n    authorizationConf = Utils.getDeepCopy(authorizationConf, 4);\n    //Initialize the Authorization module\n    SecurityPluginHolder<AuthorizationPlugin> old = authorizationPlugin;\n    SecurityPluginHolder<AuthorizationPlugin> authorizationPlugin = null;\n    if (authorizationConf != null) {\n      String klas = (String) authorizationConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for authorization plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == readVersion(authorizationConf)) {\n        return;\n      }\n      log.info(\"Initializing authorization plugin: \" + klas);\n      authorizationPlugin = new SecurityPluginHolder<>(readVersion(authorizationConf),\n          getResourceLoader().newInstance(klas, AuthorizationPlugin.class));\n\n      // Read and pass the authorization context to the plugin\n      authorizationPlugin.plugin.init(authorizationConf);\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for authorization module.\");\n    }\n    this.authorizationPlugin = authorizationPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n      }\n    }\n  }\n\n","sourceOld":"  private synchronized void initializeAuthorizationPlugin(Map<String, Object> authorizationConf) {\n    authorizationConf = Utils.getDeepCopy(authorizationConf, 4);\n    //Initialize the Authorization module\n    SecurityPluginHolder<AuthorizationPlugin> old = authorizationPlugin;\n    SecurityPluginHolder<AuthorizationPlugin> authorizationPlugin = null;\n    if (authorizationConf != null) {\n      String klas = (String) authorizationConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for authorization plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == readVersion(authorizationConf)) {\n        return;\n      }\n      log.info(\"Initializing authorization plugin: \" + klas);\n      authorizationPlugin = new SecurityPluginHolder<>(readVersion(authorizationConf),\n          getResourceLoader().newInstance(klas, AuthorizationPlugin.class));\n\n      // Read and pass the authorization context to the plugin\n      authorizationPlugin.plugin.init(authorizationConf);\n    } else {\n      log.info(\"Security conf doesn't exist. Skipping setup for authorization module.\");\n    }\n    this.authorizationPlugin = authorizationPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthorizationPlugin(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthorizationPlugin(Map[String,Object]).mjava","sourceNew":"  private synchronized void initializeAuthorizationPlugin(Map<String, Object> authorizationConf) {\n    authorizationConf = Utils.getDeepCopy(authorizationConf, 4);\n    //Initialize the Authorization module\n    SecurityPluginHolder<AuthorizationPlugin> old = authorizationPlugin;\n    SecurityPluginHolder<AuthorizationPlugin> authorizationPlugin = null;\n    if (authorizationConf != null) {\n      String klas = (String) authorizationConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for authorization plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == readVersion(authorizationConf)) {\n        return;\n      }\n      log.info(\"Initializing authorization plugin: \" + klas);\n      authorizationPlugin = new SecurityPluginHolder<>(readVersion(authorizationConf),\n          getResourceLoader().newInstance(klas, AuthorizationPlugin.class));\n\n      // Read and pass the authorization context to the plugin\n      authorizationPlugin.plugin.init(authorizationConf);\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for authorization module.\");\n    }\n    this.authorizationPlugin = authorizationPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n      }\n    }\n  }\n\n","sourceOld":"  private synchronized void initializeAuthorizationPlugin(Map<String, Object> authorizationConf) {\n    authorizationConf = Utils.getDeepCopy(authorizationConf, 4);\n    //Initialize the Authorization module\n    SecurityPluginHolder<AuthorizationPlugin> old = authorizationPlugin;\n    SecurityPluginHolder<AuthorizationPlugin> authorizationPlugin = null;\n    if (authorizationConf != null) {\n      String klas = (String) authorizationConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for authorization plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == readVersion(authorizationConf)) {\n        return;\n      }\n      log.info(\"Initializing authorization plugin: \" + klas);\n      authorizationPlugin = new SecurityPluginHolder<>(readVersion(authorizationConf),\n          getResourceLoader().newInstance(klas, AuthorizationPlugin.class));\n\n      // Read and pass the authorization context to the plugin\n      authorizationPlugin.plugin.init(authorizationConf);\n    } else {\n      log.info(\"Security conf doesn't exist. Skipping setup for authorization module.\");\n    }\n    this.authorizationPlugin = authorizationPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthorizationPlugin(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthorizationPlugin(Map[String,Object]).mjava","sourceNew":"  private synchronized void initializeAuthorizationPlugin(Map<String, Object> authorizationConf) {\n    authorizationConf = Utils.getDeepCopy(authorizationConf, 4);\n    //Initialize the Authorization module\n    SecurityPluginHolder<AuthorizationPlugin> old = authorizationPlugin;\n    SecurityPluginHolder<AuthorizationPlugin> authorizationPlugin = null;\n    if (authorizationConf != null) {\n      String klas = (String) authorizationConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for authorization plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == readVersion(authorizationConf)) {\n        return;\n      }\n      log.info(\"Initializing authorization plugin: \" + klas);\n      authorizationPlugin = new SecurityPluginHolder<>(readVersion(authorizationConf),\n          getResourceLoader().newInstance(klas, AuthorizationPlugin.class));\n\n      // Read and pass the authorization context to the plugin\n      authorizationPlugin.plugin.init(authorizationConf);\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for authorization module.\");\n    }\n    this.authorizationPlugin = authorizationPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n      }\n    }\n  }\n\n","sourceOld":"  private synchronized void initializeAuthorizationPlugin(Map<String, Object> authorizationConf) {\n    authorizationConf = Utils.getDeepCopy(authorizationConf, 4);\n    //Initialize the Authorization module\n    SecurityPluginHolder<AuthorizationPlugin> old = authorizationPlugin;\n    SecurityPluginHolder<AuthorizationPlugin> authorizationPlugin = null;\n    if (authorizationConf != null) {\n      String klas = (String) authorizationConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for authorization plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == readVersion(authorizationConf)) {\n        return;\n      }\n      log.info(\"Initializing authorization plugin: \" + klas);\n      authorizationPlugin = new SecurityPluginHolder<>(readVersion(authorizationConf),\n          getResourceLoader().newInstance(klas, AuthorizationPlugin.class));\n\n      // Read and pass the authorization context to the plugin\n      authorizationPlugin.plugin.init(authorizationConf);\n    } else {\n      log.info(\"Security conf doesn't exist. Skipping setup for authorization module.\");\n    }\n    this.authorizationPlugin = authorizationPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12ddd922ea96c1d0ea68a68506b6984a246cfb22","date":1554385731,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthorizationPlugin(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthorizationPlugin(Map[String,Object]).mjava","sourceNew":"  private synchronized void initializeAuthorizationPlugin(Map<String, Object> authorizationConf) {\n    authorizationConf = Utils.getDeepCopy(authorizationConf, 4);\n    //Initialize the Authorization module\n    SecurityPluginHolder<AuthorizationPlugin> old = authorizationPlugin;\n    SecurityPluginHolder<AuthorizationPlugin> authorizationPlugin = null;\n    if (authorizationConf != null) {\n      String klas = (String) authorizationConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for authorization plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == readVersion(authorizationConf)) {\n        return;\n      }\n      log.info(\"Initializing authorization plugin: \" + klas);\n      authorizationPlugin = new SecurityPluginHolder<>(readVersion(authorizationConf),\n          getResourceLoader().newInstance(klas, AuthorizationPlugin.class));\n\n      // Read and pass the authorization context to the plugin\n      authorizationPlugin.plugin.init(authorizationConf);\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for authorization module.\");\n    }\n    this.authorizationPlugin = authorizationPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old authorization plugin\", e);\n      }\n    }\n  }\n\n","sourceOld":"  private synchronized void initializeAuthorizationPlugin(Map<String, Object> authorizationConf) {\n    authorizationConf = Utils.getDeepCopy(authorizationConf, 4);\n    //Initialize the Authorization module\n    SecurityPluginHolder<AuthorizationPlugin> old = authorizationPlugin;\n    SecurityPluginHolder<AuthorizationPlugin> authorizationPlugin = null;\n    if (authorizationConf != null) {\n      String klas = (String) authorizationConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for authorization plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == readVersion(authorizationConf)) {\n        return;\n      }\n      log.info(\"Initializing authorization plugin: \" + klas);\n      authorizationPlugin = new SecurityPluginHolder<>(readVersion(authorizationConf),\n          getResourceLoader().newInstance(klas, AuthorizationPlugin.class));\n\n      // Read and pass the authorization context to the plugin\n      authorizationPlugin.plugin.init(authorizationConf);\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for authorization module.\");\n    }\n    this.authorizationPlugin = authorizationPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9095feae302a6e075ef3af4bd81b4cea22c5c71c","date":1555355370,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthorizationPlugin(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthorizationPlugin(Map[String,Object]).mjava","sourceNew":"  private synchronized void initializeAuthorizationPlugin(Map<String, Object> authorizationConf) {\n    authorizationConf = Utils.getDeepCopy(authorizationConf, 4);\n    int newVersion = readVersion(authorizationConf);\n    //Initialize the Authorization module\n    SecurityPluginHolder<AuthorizationPlugin> old = authorizationPlugin;\n    SecurityPluginHolder<AuthorizationPlugin> authorizationPlugin = null;\n    if (authorizationConf != null) {\n      String klas = (String) authorizationConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for authorization plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n        log.debug(\"Authorization config not modified\");\n        return;\n      }\n      log.info(\"Initializing authorization plugin: \" + klas);\n      authorizationPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(klas, AuthorizationPlugin.class));\n\n      // Read and pass the authorization context to the plugin\n      authorizationPlugin.plugin.init(authorizationConf);\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for authorization module.\");\n    }\n    this.authorizationPlugin = authorizationPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old authorization plugin\", e);\n      }\n    }\n  }\n\n","sourceOld":"  private synchronized void initializeAuthorizationPlugin(Map<String, Object> authorizationConf) {\n    authorizationConf = Utils.getDeepCopy(authorizationConf, 4);\n    //Initialize the Authorization module\n    SecurityPluginHolder<AuthorizationPlugin> old = authorizationPlugin;\n    SecurityPluginHolder<AuthorizationPlugin> authorizationPlugin = null;\n    if (authorizationConf != null) {\n      String klas = (String) authorizationConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for authorization plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == readVersion(authorizationConf)) {\n        return;\n      }\n      log.info(\"Initializing authorization plugin: \" + klas);\n      authorizationPlugin = new SecurityPluginHolder<>(readVersion(authorizationConf),\n          getResourceLoader().newInstance(klas, AuthorizationPlugin.class));\n\n      // Read and pass the authorization context to the plugin\n      authorizationPlugin.plugin.init(authorizationConf);\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for authorization module.\");\n    }\n    this.authorizationPlugin = authorizationPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old authorization plugin\", e);\n      }\n    }\n  }\n\n","bugFix":["6bdcb86c29922edae9a14852e636303bc52df094"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthorizationPlugin(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthorizationPlugin(Map[String,Object]).mjava","sourceNew":"  private synchronized void initializeAuthorizationPlugin(Map<String, Object> authorizationConf) {\n    authorizationConf = Utils.getDeepCopy(authorizationConf, 4);\n    int newVersion = readVersion(authorizationConf);\n    //Initialize the Authorization module\n    SecurityPluginHolder<AuthorizationPlugin> old = authorizationPlugin;\n    SecurityPluginHolder<AuthorizationPlugin> authorizationPlugin = null;\n    if (authorizationConf != null) {\n      String klas = (String) authorizationConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for authorization plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n        log.debug(\"Authorization config not modified\");\n        return;\n      }\n      log.info(\"Initializing authorization plugin: {}\", klas);\n      authorizationPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(klas, AuthorizationPlugin.class));\n\n      // Read and pass the authorization context to the plugin\n      authorizationPlugin.plugin.init(authorizationConf);\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for authorization module.\");\n    }\n    this.authorizationPlugin = authorizationPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old authorization plugin\", e);\n      }\n    }\n  }\n\n","sourceOld":"  private synchronized void initializeAuthorizationPlugin(Map<String, Object> authorizationConf) {\n    authorizationConf = Utils.getDeepCopy(authorizationConf, 4);\n    int newVersion = readVersion(authorizationConf);\n    //Initialize the Authorization module\n    SecurityPluginHolder<AuthorizationPlugin> old = authorizationPlugin;\n    SecurityPluginHolder<AuthorizationPlugin> authorizationPlugin = null;\n    if (authorizationConf != null) {\n      String klas = (String) authorizationConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for authorization plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n        log.debug(\"Authorization config not modified\");\n        return;\n      }\n      log.info(\"Initializing authorization plugin: \" + klas);\n      authorizationPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(klas, AuthorizationPlugin.class));\n\n      // Read and pass the authorization context to the plugin\n      authorizationPlugin.plugin.init(authorizationConf);\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for authorization module.\");\n    }\n    this.authorizationPlugin = authorizationPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old authorization plugin\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75237075d8425856bf4bbf52a6be4f9162b8187d","date":1591103291,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthorizationPlugin(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initializeAuthorizationPlugin(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  private synchronized void initializeAuthorizationPlugin(Map<String, Object> authorizationConf) {\n    authorizationConf = Utils.getDeepCopy(authorizationConf, 4);\n    int newVersion = readVersion(authorizationConf);\n    //Initialize the Authorization module\n    SecurityPluginHolder<AuthorizationPlugin> old = authorizationPlugin;\n    SecurityPluginHolder<AuthorizationPlugin> authorizationPlugin = null;\n    if (authorizationConf != null) {\n      String klas = (String) authorizationConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for authorization plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n        log.debug(\"Authorization config not modified\");\n        return;\n      }\n      log.info(\"Initializing authorization plugin: {}\", klas);\n      authorizationPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(klas, AuthorizationPlugin.class));\n\n      // Read and pass the authorization context to the plugin\n      authorizationPlugin.plugin.init(authorizationConf);\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for authorization module.\");\n    }\n    this.authorizationPlugin = authorizationPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old authorization plugin\", e);\n      }\n    }\n  }\n\n","sourceOld":"  private synchronized void initializeAuthorizationPlugin(Map<String, Object> authorizationConf) {\n    authorizationConf = Utils.getDeepCopy(authorizationConf, 4);\n    int newVersion = readVersion(authorizationConf);\n    //Initialize the Authorization module\n    SecurityPluginHolder<AuthorizationPlugin> old = authorizationPlugin;\n    SecurityPluginHolder<AuthorizationPlugin> authorizationPlugin = null;\n    if (authorizationConf != null) {\n      String klas = (String) authorizationConf.get(\"class\");\n      if (klas == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"class is required for authorization plugin\");\n      }\n      if (old != null && old.getZnodeVersion() == newVersion && newVersion > 0) {\n        log.debug(\"Authorization config not modified\");\n        return;\n      }\n      log.info(\"Initializing authorization plugin: {}\", klas);\n      authorizationPlugin = new SecurityPluginHolder<>(newVersion,\n          getResourceLoader().newInstance(klas, AuthorizationPlugin.class));\n\n      // Read and pass the authorization context to the plugin\n      authorizationPlugin.plugin.init(authorizationConf);\n    } else {\n      log.debug(\"Security conf doesn't exist. Skipping setup for authorization module.\");\n    }\n    this.authorizationPlugin = authorizationPlugin;\n    if (old != null) {\n      try {\n        old.plugin.close();\n      } catch (Exception e) {\n        log.error(\"Exception while attempting to close old authorization plugin\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bdcb86c29922edae9a14852e636303bc52df094":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"75237075d8425856bf4bbf52a6be4f9162b8187d":["140be51d03394488536f4aacedace29f9b318347"],"126d6ad24eed13163ba0959435d5a80e5672837c":["6bdcb86c29922edae9a14852e636303bc52df094","7f0c8426396c925de8db3ed3f8ff40fd73670a5c"],"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"140be51d03394488536f4aacedace29f9b318347":["9095feae302a6e075ef3af4bd81b4cea22c5c71c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["6bdcb86c29922edae9a14852e636303bc52df094","126d6ad24eed13163ba0959435d5a80e5672837c"],"9095feae302a6e075ef3af4bd81b4cea22c5c71c":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["6bdcb86c29922edae9a14852e636303bc52df094"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6bdcb86c29922edae9a14852e636303bc52df094","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["75237075d8425856bf4bbf52a6be4f9162b8187d"]},"commit2Childs":{"6bdcb86c29922edae9a14852e636303bc52df094":["126d6ad24eed13163ba0959435d5a80e5672837c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","7f0c8426396c925de8db3ed3f8ff40fd73670a5c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"75237075d8425856bf4bbf52a6be4f9162b8187d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"126d6ad24eed13163ba0959435d5a80e5672837c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["9095feae302a6e075ef3af4bd81b4cea22c5c71c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6bdcb86c29922edae9a14852e636303bc52df094"],"140be51d03394488536f4aacedace29f9b318347":["75237075d8425856bf4bbf52a6be4f9162b8187d"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["12ddd922ea96c1d0ea68a68506b6984a246cfb22","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["126d6ad24eed13163ba0959435d5a80e5672837c"],"9095feae302a6e075ef3af4bd81b4cea22c5c71c":["140be51d03394488536f4aacedace29f9b318347"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}