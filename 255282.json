{"path":"backwards/src/test/org/apache/lucene/search/TestSort#runMultiSorts(Searcher,boolean).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestSort#runMultiSorts(Searcher,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(Searcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT),new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT),new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    sort.setSort(new SortField (\"string\", Locale.US) );\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField (\"string\", Locale.US, true) );\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField (\"string\", Locale.UK) );\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    assertSaneFieldCaches(getName() + \" Locale.US + Locale.UK\");\n    FieldCache.DEFAULT.purgeAllCaches();\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestSort#runMultiSorts(Searcher,boolean).mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestSort#runMultiSorts(Searcher,boolean).mjava","sourceNew":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(Searcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT),new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT),new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    sort.setSort(new SortField (\"string\", Locale.US) );\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField (\"string\", Locale.US, true) );\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField (\"string\", Locale.UK) );\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    assertSaneFieldCaches(getName() + \" Locale.US + Locale.UK\");\n    FieldCache.DEFAULT.purgeAllCaches();\n\n  }\n\n","sourceOld":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts(Searcher multi, boolean isFull) throws Exception {\n    sort.setSort(SortField.FIELD_DOC);\n    String expected = isFull ? \"ABCDEFGHIJ\" : \"ACEGIBDFHJ\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"int\", SortField.INT), SortField.FIELD_DOC);\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"int\", SortField.INT));\n    expected = isFull ? \"IDHFGJABEC\" : \"IDHFGJAEBC\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC);\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"GDHJCIEFAB\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT, true));\n    expected = isFull ? \"CABEJGFHDI\" : \"CAEBJGFHDI\";\n    assertMatches(multi, queryA, sort, expected);\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT, true));\n    assertMatches(multi, queryA, sort, \"BAFECIJHDG\");\n\n    sort.setSort(new SortField(\"string\", SortField.STRING, true));\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField(\"int\", SortField.INT),new SortField(\"float\", SortField.FLOAT));\n    assertMatches(multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort(new SortField(\"float\", SortField.FLOAT),new SortField(\"string\", SortField.STRING));\n    assertMatches(multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT));\n    assertMatches(multi, queryF, sort, \"IZJ\");\n\n    sort.setSort(new SortField (\"int\", SortField.INT, true));\n    assertMatches(multi, queryF, sort, \"JZI\");\n\n    sort.setSort(new SortField (\"float\", SortField.FLOAT));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING));\n    assertMatches(multi, queryF, sort, \"ZJI\");\n\n    sort.setSort(new SortField (\"string\", SortField.STRING, true));\n    assertMatches(multi, queryF, sort, \"IJZ\");\n\n    // up to this point, all of the searches should have \"sane\" \n    // FieldCache behavior, and should have reused hte cache in several cases\n    assertSaneFieldCaches(getName() + \" various\");\n    // next we'll check Locale based (String[]) for 'string', so purge first\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    sort.setSort(new SortField (\"string\", Locale.US) );\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort(new SortField (\"string\", Locale.US, true) );\n    assertMatches(multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort(new SortField (\"string\", Locale.UK) );\n    assertMatches(multi, queryA, sort, \"DJAIHGFEBC\");\n\n    assertSaneFieldCaches(getName() + \" Locale.US + Locale.UK\");\n    FieldCache.DEFAULT.purgeAllCaches();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}