{"path":"src/test/org/apache/lucene/index/TestIndexReaderReopen#assertReaderClosed(IndexReader,boolean,boolean).mjava","commits":[{"id":"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8","date":1195335263,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#assertReaderClosed(IndexReader,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void assertReaderClosed(IndexReader reader, boolean checkSubReaders, boolean checkNormsClosed) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkNormsClosed && reader instanceof SegmentReader) {\n      assertTrue(((SegmentReader) reader).normsClosed());\n    }\n    \n    if (checkSubReaders) {\n      if (reader instanceof MultiSegmentReader) {\n        SegmentReader[] subReaders = ((MultiSegmentReader) reader).getSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof MultiReader) {\n        IndexReader[] subReaders = ((MultiReader) reader).getSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof ParallelReader) {\n        IndexReader[] subReaders = ((ParallelReader) reader).getSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#assertReaderClosed(IndexReader,boolean,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#assertReaderClosed(IndexReader,boolean,boolean).mjava","sourceNew":"  private void assertReaderClosed(IndexReader reader, boolean checkSubReaders, boolean checkNormsClosed) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkNormsClosed && reader instanceof SegmentReader) {\n      assertTrue(((SegmentReader) reader).normsClosed());\n    }\n    \n    if (checkSubReaders) {\n      if (reader instanceof MultiSegmentReader) {\n        IndexReader[] subReaders = reader.getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof MultiReader) {\n        IndexReader[] subReaders = reader.getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof ParallelReader) {\n        IndexReader[] subReaders = ((ParallelReader) reader).getSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void assertReaderClosed(IndexReader reader, boolean checkSubReaders, boolean checkNormsClosed) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkNormsClosed && reader instanceof SegmentReader) {\n      assertTrue(((SegmentReader) reader).normsClosed());\n    }\n    \n    if (checkSubReaders) {\n      if (reader instanceof MultiSegmentReader) {\n        SegmentReader[] subReaders = ((MultiSegmentReader) reader).getSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof MultiReader) {\n        IndexReader[] subReaders = ((MultiReader) reader).getSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof ParallelReader) {\n        IndexReader[] subReaders = ((ParallelReader) reader).getSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#assertReaderClosed(IndexReader,boolean,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#assertReaderClosed(IndexReader,boolean,boolean).mjava","sourceNew":"  private void assertReaderClosed(IndexReader reader, boolean checkSubReaders, boolean checkNormsClosed) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkNormsClosed && reader instanceof SegmentReader) {\n      assertTrue(((SegmentReader) reader).normsClosed());\n    }\n    \n    if (checkSubReaders) {\n      if (reader instanceof DirectoryReader) {\n        IndexReader[] subReaders = reader.getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof MultiReader) {\n        IndexReader[] subReaders = reader.getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof ParallelReader) {\n        IndexReader[] subReaders = ((ParallelReader) reader).getSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void assertReaderClosed(IndexReader reader, boolean checkSubReaders, boolean checkNormsClosed) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkNormsClosed && reader instanceof SegmentReader) {\n      assertTrue(((SegmentReader) reader).normsClosed());\n    }\n    \n    if (checkSubReaders) {\n      if (reader instanceof MultiSegmentReader) {\n        IndexReader[] subReaders = reader.getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof MultiReader) {\n        IndexReader[] subReaders = reader.getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof ParallelReader) {\n        IndexReader[] subReaders = ((ParallelReader) reader).getSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#assertReaderClosed(IndexReader,boolean,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#assertReaderClosed(IndexReader,boolean,boolean).mjava","sourceNew":"  private void assertReaderClosed(IndexReader reader, boolean checkSubReaders, boolean checkNormsClosed) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkNormsClosed && reader instanceof SegmentReader) {\n      assertTrue(((SegmentReader) reader).normsClosed());\n    }\n    \n    if (checkSubReaders) {\n      if (reader instanceof DirectoryReader) {\n        IndexReader[] subReaders = reader.getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof MultiReader) {\n        IndexReader[] subReaders = reader.getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof ParallelReader) {\n        IndexReader[] subReaders = ((ParallelReader) reader).getSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void assertReaderClosed(IndexReader reader, boolean checkSubReaders, boolean checkNormsClosed) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkNormsClosed && reader instanceof SegmentReader) {\n      assertTrue(((SegmentReader) reader).normsClosed());\n    }\n    \n    if (checkSubReaders) {\n      if (reader instanceof DirectoryReader) {\n        IndexReader[] subReaders = reader.getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof MultiReader) {\n        IndexReader[] subReaders = reader.getSequentialSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n      \n      if (reader instanceof ParallelReader) {\n        IndexReader[] subReaders = ((ParallelReader) reader).getSubReaders();\n        for (int i = 0; i < subReaders.length; i++) {\n          assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["63bc3238545c6012bd44f5d294077997f236bc4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"63bc3238545c6012bd44f5d294077997f236bc4e":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"]},"commit2Childs":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"63bc3238545c6012bd44f5d294077997f236bc4e":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["63bc3238545c6012bd44f5d294077997f236bc4e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}