{"path":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testConjunctionApproximation().mjava","commits":[{"id":"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1","date":1423845906,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testConjunctionApproximation().mjava","pathOld":"/dev/null","sourceNew":"  // Test that the conjunction approximation is correct\n  public void testConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      final DocIdSetIterator[] iterators = new DocIdSetIterator[numIterators];\n      boolean hasApproximation = false;\n      for (int i = 0; i < iterators.length; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          iterators[i] = new BitDocIdSet(set).iterator();\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseDocIdSetIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          iterators[i] = scorer(approximation);\n          hasApproximation = true;\n        }\n      }\n\n      final ConjunctionDISI conjunction = ConjunctionDISI.intersect(Arrays.asList(iterators));\n      TwoPhaseDocIdSetIterator twoPhaseIterator = conjunction.asTwoPhaseIterator();\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseDocIdSetIterator.asDocIdSetIterator(twoPhaseIterator)));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3d6eb0072094d94624002318ba2d4c840946833","date":1424947971,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testConjunctionApproximation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testConjunctionApproximation().mjava","sourceNew":"  // Test that the conjunction approximation is correct\n  public void testConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      final DocIdSetIterator[] iterators = new DocIdSetIterator[numIterators];\n      boolean hasApproximation = false;\n      for (int i = 0; i < iterators.length; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          iterators[i] = new BitDocIdSet(set).iterator();\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          iterators[i] = scorer(approximation);\n          hasApproximation = true;\n        }\n      }\n\n      final ConjunctionDISI conjunction = ConjunctionDISI.intersect(Arrays.asList(iterators));\n      TwoPhaseIterator twoPhaseIterator = conjunction.asTwoPhaseIterator();\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator)));\n      }\n    }\n  }\n\n","sourceOld":"  // Test that the conjunction approximation is correct\n  public void testConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      final DocIdSetIterator[] iterators = new DocIdSetIterator[numIterators];\n      boolean hasApproximation = false;\n      for (int i = 0; i < iterators.length; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          iterators[i] = new BitDocIdSet(set).iterator();\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseDocIdSetIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          iterators[i] = scorer(approximation);\n          hasApproximation = true;\n        }\n      }\n\n      final ConjunctionDISI conjunction = ConjunctionDISI.intersect(Arrays.asList(iterators));\n      TwoPhaseDocIdSetIterator twoPhaseIterator = conjunction.asTwoPhaseIterator();\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseDocIdSetIterator.asDocIdSetIterator(twoPhaseIterator)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testConjunctionApproximation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testConjunctionApproximation().mjava","sourceNew":"  // Test that the conjunction approximation is correct\n  public void testConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      final DocIdSetIterator[] iterators = new DocIdSetIterator[numIterators];\n      boolean hasApproximation = false;\n      for (int i = 0; i < iterators.length; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          iterators[i] = new BitDocIdSet(set).iterator();\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          iterators[i] = scorer(approximation);\n          hasApproximation = true;\n        }\n      }\n\n      final ConjunctionDISI conjunction = ConjunctionDISI.intersect(Arrays.asList(iterators));\n      TwoPhaseIterator twoPhaseIterator = conjunction.asTwoPhaseIterator();\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator)));\n      }\n    }\n  }\n\n","sourceOld":"  // Test that the conjunction approximation is correct\n  public void testConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      final DocIdSetIterator[] iterators = new DocIdSetIterator[numIterators];\n      boolean hasApproximation = false;\n      for (int i = 0; i < iterators.length; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          iterators[i] = new BitDocIdSet(set).iterator();\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseDocIdSetIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          iterators[i] = scorer(approximation);\n          hasApproximation = true;\n        }\n      }\n\n      final ConjunctionDISI conjunction = ConjunctionDISI.intersect(Arrays.asList(iterators));\n      TwoPhaseDocIdSetIterator twoPhaseIterator = conjunction.asTwoPhaseIterator();\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseDocIdSetIterator.asDocIdSetIterator(twoPhaseIterator)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testConjunctionApproximation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testConjunctionApproximation().mjava","sourceNew":"  // Test that the conjunction approximation is correct\n  public void testConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      final Scorer[] iterators = new Scorer[numIterators];\n      boolean hasApproximation = false;\n      for (int i = 0; i < iterators.length; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          iterators[i] = new ConstantScoreScorer(null, 0f, new BitDocIdSet(set).iterator());\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          iterators[i] = scorer(approximation);\n          hasApproximation = true;\n        }\n      }\n\n      final ConjunctionDISI conjunction = ConjunctionDISI.intersectScorers(Arrays.asList(iterators));\n      TwoPhaseIterator twoPhaseIterator = conjunction.asTwoPhaseIterator();\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator)));\n      }\n    }\n  }\n\n","sourceOld":"  // Test that the conjunction approximation is correct\n  public void testConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      final DocIdSetIterator[] iterators = new DocIdSetIterator[numIterators];\n      boolean hasApproximation = false;\n      for (int i = 0; i < iterators.length; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          iterators[i] = new BitDocIdSet(set).iterator();\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          iterators[i] = scorer(approximation);\n          hasApproximation = true;\n        }\n      }\n\n      final ConjunctionDISI conjunction = ConjunctionDISI.intersect(Arrays.asList(iterators));\n      TwoPhaseIterator twoPhaseIterator = conjunction.asTwoPhaseIterator();\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83","date":1465831664,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testConjunctionApproximation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testConjunctionApproximation().mjava","sourceNew":"  // Test that the conjunction approximation is correct\n  public void testConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      final Scorer[] iterators = new Scorer[numIterators];\n      boolean hasApproximation = false;\n      for (int i = 0; i < iterators.length; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          iterators[i] = new ConstantScoreScorer(null, 0f, new BitDocIdSet(set).iterator());\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          iterators[i] = scorer(approximation);\n          hasApproximation = true;\n        }\n      }\n\n      final DocIdSetIterator conjunction = ConjunctionDISI.intersectScorers(Arrays.asList(iterators));\n      TwoPhaseIterator twoPhaseIterator = TwoPhaseIterator.unwrap(conjunction);\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator)));\n      }\n    }\n  }\n\n","sourceOld":"  // Test that the conjunction approximation is correct\n  public void testConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      final Scorer[] iterators = new Scorer[numIterators];\n      boolean hasApproximation = false;\n      for (int i = 0; i < iterators.length; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          iterators[i] = new ConstantScoreScorer(null, 0f, new BitDocIdSet(set).iterator());\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          iterators[i] = scorer(approximation);\n          hasApproximation = true;\n        }\n      }\n\n      final ConjunctionDISI conjunction = ConjunctionDISI.intersectScorers(Arrays.asList(iterators));\n      TwoPhaseIterator twoPhaseIterator = conjunction.asTwoPhaseIterator();\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","date":1465913303,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testConjunctionApproximation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testConjunctionApproximation().mjava","sourceNew":"  // Test that the conjunction approximation is correct\n  public void testConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      final Scorer[] iterators = new Scorer[numIterators];\n      boolean hasApproximation = false;\n      for (int i = 0; i < iterators.length; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          iterators[i] = new ConstantScoreScorer(null, 0f, new BitDocIdSet(set).iterator());\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          iterators[i] = scorer(approximation);\n          hasApproximation = true;\n        }\n      }\n\n      final DocIdSetIterator conjunction = ConjunctionDISI.intersectScorers(Arrays.asList(iterators));\n      TwoPhaseIterator twoPhaseIterator = TwoPhaseIterator.unwrap(conjunction);\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator)));\n      }\n    }\n  }\n\n","sourceOld":"  // Test that the conjunction approximation is correct\n  public void testConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      final Scorer[] iterators = new Scorer[numIterators];\n      boolean hasApproximation = false;\n      for (int i = 0; i < iterators.length; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          iterators[i] = new ConstantScoreScorer(null, 0f, new BitDocIdSet(set).iterator());\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          iterators[i] = scorer(approximation);\n          hasApproximation = true;\n        }\n      }\n\n      final ConjunctionDISI conjunction = ConjunctionDISI.intersectScorers(Arrays.asList(iterators));\n      TwoPhaseIterator twoPhaseIterator = conjunction.asTwoPhaseIterator();\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testConjunctionApproximation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testConjunctionApproximation().mjava","sourceNew":"  // Test that the conjunction approximation is correct\n  public void testConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      final Scorer[] iterators = new Scorer[numIterators];\n      boolean hasApproximation = false;\n      for (int i = 0; i < iterators.length; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          iterators[i] = new ConstantScoreScorer(null, 0f, new BitDocIdSet(set).iterator());\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          iterators[i] = scorer(approximation);\n          hasApproximation = true;\n        }\n      }\n\n      final DocIdSetIterator conjunction = ConjunctionDISI.intersectScorers(Arrays.asList(iterators));\n      TwoPhaseIterator twoPhaseIterator = TwoPhaseIterator.unwrap(conjunction);\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator)));\n      }\n    }\n  }\n\n","sourceOld":"  // Test that the conjunction approximation is correct\n  public void testConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      final Scorer[] iterators = new Scorer[numIterators];\n      boolean hasApproximation = false;\n      for (int i = 0; i < iterators.length; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          iterators[i] = new ConstantScoreScorer(null, 0f, new BitDocIdSet(set).iterator());\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          iterators[i] = scorer(approximation);\n          hasApproximation = true;\n        }\n      }\n\n      final ConjunctionDISI conjunction = ConjunctionDISI.intersectScorers(Arrays.asList(iterators));\n      TwoPhaseIterator twoPhaseIterator = conjunction.asTwoPhaseIterator();\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3","date":1536316907,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testConjunctionApproximation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testConjunctionApproximation().mjava","sourceNew":"  // Test that the conjunction approximation is correct\n  public void testConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      final Scorer[] iterators = new Scorer[numIterators];\n      boolean hasApproximation = false;\n      for (int i = 0; i < iterators.length; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          iterators[i] = new ConstantScoreScorer(new FakeWeight(), 0f, new BitDocIdSet(set).iterator());\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          iterators[i] = scorer(approximation);\n          hasApproximation = true;\n        }\n      }\n\n      final DocIdSetIterator conjunction = ConjunctionDISI.intersectScorers(Arrays.asList(iterators));\n      TwoPhaseIterator twoPhaseIterator = TwoPhaseIterator.unwrap(conjunction);\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator)));\n      }\n    }\n  }\n\n","sourceOld":"  // Test that the conjunction approximation is correct\n  public void testConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      final Scorer[] iterators = new Scorer[numIterators];\n      boolean hasApproximation = false;\n      for (int i = 0; i < iterators.length; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          iterators[i] = new ConstantScoreScorer(null, 0f, new BitDocIdSet(set).iterator());\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          iterators[i] = scorer(approximation);\n          hasApproximation = true;\n        }\n      }\n\n      final DocIdSetIterator conjunction = ConjunctionDISI.intersectScorers(Arrays.asList(iterators));\n      TwoPhaseIterator twoPhaseIterator = TwoPhaseIterator.unwrap(conjunction);\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c226b0eeb8b028f572020f459851a663a2c064e","date":1542377651,"type":3,"author":"Christophe Bismuth","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testConjunctionApproximation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#testConjunctionApproximation().mjava","sourceNew":"  // Test that the conjunction approximation is correct\n  public void testConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      final Scorer[] iterators = new Scorer[numIterators];\n      boolean hasApproximation = false;\n      for (int i = 0; i < iterators.length; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          iterators[i] = new ConstantScoreScorer(new FakeWeight(), 0f, ScoreMode.COMPLETE_NO_SCORES, new BitDocIdSet(set).iterator());\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          iterators[i] = scorer(approximation);\n          hasApproximation = true;\n        }\n      }\n\n      final DocIdSetIterator conjunction = ConjunctionDISI.intersectScorers(Arrays.asList(iterators));\n      TwoPhaseIterator twoPhaseIterator = TwoPhaseIterator.unwrap(conjunction);\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator)));\n      }\n    }\n  }\n\n","sourceOld":"  // Test that the conjunction approximation is correct\n  public void testConjunctionApproximation() throws IOException {\n    final int iters = atLeast(100);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int maxDoc = TestUtil.nextInt(random(), 100, 10000);\n      final int numIterators = TestUtil.nextInt(random(), 2, 5);\n      final FixedBitSet[] sets = new FixedBitSet[numIterators];\n      final Scorer[] iterators = new Scorer[numIterators];\n      boolean hasApproximation = false;\n      for (int i = 0; i < iterators.length; ++i) {\n        final FixedBitSet set = randomSet(maxDoc);\n        if (random().nextBoolean()) {\n          // simple iterator\n          sets[i] = set;\n          iterators[i] = new ConstantScoreScorer(new FakeWeight(), 0f, new BitDocIdSet(set).iterator());\n        } else {\n          // scorer with approximation\n          final FixedBitSet confirmed = clearRandomBits(set);\n          sets[i] = confirmed;\n          final TwoPhaseIterator approximation = approximation(new BitDocIdSet(set).iterator(), confirmed);\n          iterators[i] = scorer(approximation);\n          hasApproximation = true;\n        }\n      }\n\n      final DocIdSetIterator conjunction = ConjunctionDISI.intersectScorers(Arrays.asList(iterators));\n      TwoPhaseIterator twoPhaseIterator = TwoPhaseIterator.unwrap(conjunction);\n      assertEquals(hasApproximation, twoPhaseIterator != null);\n      if (hasApproximation) {\n        assertEquals(intersect(sets), toBitSet(maxDoc, TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1","a3d6eb0072094d94624002318ba2d4c840946833"],"a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"a3d6eb0072094d94624002318ba2d4c840946833":["c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["7dd748bb245633a8195281556bb0e68a6ea97d18","a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["a3d6eb0072094d94624002318ba2d4c840946833"],"9c226b0eeb8b028f572020f459851a663a2c064e":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7dd748bb245633a8195281556bb0e68a6ea97d18","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9c226b0eeb8b028f572020f459851a663a2c064e"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1"],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["9c226b0eeb8b028f572020f459851a663a2c064e"],"a3d6eb0072094d94624002318ba2d4c840946833":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7dd748bb245633a8195281556bb0e68a6ea97d18"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9c226b0eeb8b028f572020f459851a663a2c064e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a3d6eb0072094d94624002318ba2d4c840946833"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}