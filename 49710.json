{"path":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/ThreadMonitor#run().mjava","commits":[{"id":"05d36e0b328ec96237035fbcca240e73631396e5","date":1020520725,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/ThreadMonitor#run().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * java.lang.Threads run method. To be invoked via start()\n     * the monitor's main thread takes the samples every sampleDelta ms\n     * Since Java is not real time, it remembers\n     */\n    public void run()\n    {\n        int nothingReadCount = 0;\n        long lastPeriodBytesRead = -1;\n        long monitorRunCount = 0;\n        long startTime = System.currentTimeMillis();\n        log(\"time;overallBytesRead;overallTasksRun;urlsQueued;urlsWaiting;isWorkingOnMessage;urlsScopeFiltered;urlsVisitedFiltered;urlsREFiltered;memUsed;memFree;totalMem;nrHosts;visitedSize;visitedStringSize;urlLengthFiltered\");\n        while(true)\n        {\n            try\n            {\n                try\n                {\n                    thread.sleep(sampleDelta);\n                }\n                catch(InterruptedException e)\n                {\n                    return;\n                }\n\n                Iterator threadIterator = threadPool.getThreadIterator();\n                int i=0;\n                StringBuffer bytesReadString = new StringBuffer(200);\n                StringBuffer rawBytesReadString = new StringBuffer(200);\n                StringBuffer tasksRunString = new StringBuffer(200);\n                long overallBytesRead = 0;\n                long overallTasksRun  = 0;\n                long now = System.currentTimeMillis();\n                boolean finished = false;\n                //System.out.print(\"\\f\");\n                /*while(!finished)\n                {\n                    boolean restart = false;*/\n                boolean allThreadsIdle = true;\n                StringBuffer sb = new StringBuffer(500);\n\n                while(threadIterator.hasNext())\n                {\n                    FetcherThread thread = (FetcherThread)threadIterator.next();\n                    long totalBytesRead = thread.getTotalBytesRead();\n                    overallBytesRead += totalBytesRead;\n                    bytesReadString.append(formatBytes(totalBytesRead)).append( \"; \");\n                    rawBytesReadString.append(totalBytesRead).append(\"; \");\n                    long tasksRun = thread.getTotalTasksRun();\n                    overallTasksRun += tasksRun;\n                    tasksRunString.append(tasksRun).append(\"; \");\n\n                    // check task status\n                    State state = thread.getTaskState();\n                    //StringBuffer sb = new StringBuffer(200);\n                    sb.setLength(0);\n                    System.out.println(sb + \"[\" + thread.getThreadNumber() + \"] \" + state.getState() + \" for \" +\n                                       (now - state.getStateSince() ) + \" ms \" +\n                                       (state.getInfo() != null ? \"(\" + state.getInfo() +\")\" : \"\")\n                                       );\n                    if(!(state.getState().equals(FetcherThread.STATE_IDLE)))\n                    {\n                        //if(allThreadsIdle) System.out.println(\"(not all threads are idle, '\"+state.getState()+\"' != '\"+FetcherThread.STATE_IDLE+\"')\");\n                        allThreadsIdle = false;\n                    }\n                    if (((state.equals(FetcherTask.FT_CONNECTING)) || (state.equals(FetcherTask.FT_GETTING)) || (state.equals(FetcherTask.FT_READING)) || (state.equals(FetcherTask.FT_CLOSING)))\n                        && ((now - state.getStateSince()) > 160000))\n                    {\n                        System.out.println(\"****Restarting Thread \" + thread.getThreadNumber());\n                        threadPool.restartThread(thread.getThreadNumber());\n                        break;  // Iterator is invalid\n                    }\n\n                }\n                /*if(restart)\n                {\n                    continue;\n                }\n                finished = true;\n                }*/\n                /*\n                if(overallBytesRead == lastPeriodBytesRead)\n                {\n                    *\n                    disabled kickout feature - cm\n\n                    nothingReadCount ++;\n                   System.out.println(\"Anomaly: nothing read during the last period(s). \" + (20-nothingReadCount+1) + \" periods to exit\");\n                    if(nothingReadCount > 20)  // nothing happens anymore\n                    {\n                        log(\"Ending\");\n                        System.out.println(\"End at \" + new Date().toString());\n                        // print some information\n                        System.exit(0);\n                    }\n\n\n                }\n                else\n                {\n                    nothingReadCount = 0;\n                }*/\n\n                lastPeriodBytesRead = overallBytesRead;\n\n                //State reState = new State(\"hhh\"); //reFilter.getState();\n                sb.setLength(0);\n                //System.out.println(sb + \"Robot-Excl.Filter State: \" + reState.getState() + \" since \" + (now-reState.getStateSince()) + \" ms \" + (reState.getInfo() != null ? \" at \" + reState.getInfo() : \"\"));\n\n                addSample(new Sample(overallBytesRead, overallTasksRun, System.currentTimeMillis()));\n                int nrHosts = ((FetcherTaskQueue)threadPool.getTaskQueue()).getNumHosts();\n                int visitedSize       = urlVisitedFilter.size();\n                int visitedStringSize = urlVisitedFilter.getStringSize();\n\n                double bytesPerSecond = getAverageBytesRead();\n                double docsPerSecond = getAverageDocsRead();\n                sb.setLength(0);\n                System.out.println(sb + \"\\nBytes total:          \" + formatBytes(overallBytesRead) + \"  (\" + formatBytes((long)(((double)overallBytesRead)*1000/(System.currentTimeMillis()-startTime))) + \" per second since start)\" +\n                                   \"\\nBytes per Second:     \" + formatBytes((int)bytesPerSecond) + \" (50 secs)\" +\n                                   \"\\nDocs per Second:      \" + docsPerSecond +\n                                   \"\\nBytes per Thread:     \" + bytesReadString);\n                double docsPerSecondTotal = ((double)overallTasksRun)*1000/(System.currentTimeMillis()-startTime);\n                sb.setLength(0);\n                System.out.println(sb + \"Docs read total:      \" + overallTasksRun + \"    Docs/s: \" + fractionFormat.format(docsPerSecondTotal) +\n                                   \"\\nDocs p.thread:        \" + tasksRunString);\n\n                long memUsed = Runtime.getRuntime().totalMemory()-Runtime.getRuntime().freeMemory();\n                long memFree = Runtime.getRuntime().freeMemory();\n                long totalMem = Runtime.getRuntime().totalMemory();\n                sb.setLength(0);\n                System.out.println(sb + \"Mem used:             \" + formatBytes(memUsed) +  \", free: \" + formatBytes(memFree) + \"     total VM: \" + totalMem);\n                int urlsQueued = messageHandler.getQueued();\n                int urlsWaiting = threadPool.getQueueSize();\n                boolean isWorkingOnMessage = messageHandler.isWorkingOnMessage();\n                int urlsScopeFiltered = urlScopeFilter.getFiltered();\n                int urlsVisitedFiltered = urlVisitedFilter.getFiltered();\n                int urlsREFiltered = reFilter.getFiltered();\n                int urlLengthFiltered = urlLengthFilter.getFiltered();\n                sb.setLength(0);\n                System.out.println(sb + \"URLs queued:          \" + urlsQueued + \"     waiting: \" + urlsWaiting);\n                sb.setLength(0);\n                System.out.println(sb + \"Message is being processed: \" + isWorkingOnMessage);\n                sb.setLength(0);\n                System.out.println(sb + \"URLs Filtered: length: \" + urlLengthFiltered + \"      scope: \" + urlsScopeFiltered + \"     visited: \" + urlsVisitedFiltered + \"      robot.txt: \" + urlsREFiltered);\n                sb.setLength(0);\n                System.out.println(sb + \"Visited size: \" + visitedSize + \"; String Size in VisitedFilter: \" + visitedStringSize + \"; Number of Hosts: \" + nrHosts + \"; hosts in Host Manager: \" + hostManager.getSize() + \"\\n\");\n                sb.setLength(0);\n                log(sb + \"\" + now + \";\" + overallBytesRead + \";\" + overallTasksRun + \";\" + urlsQueued + \";\" + urlsWaiting + \";\" + isWorkingOnMessage + \";\" + urlsScopeFiltered + \";\" + urlsVisitedFiltered + \";\" + urlsREFiltered + \";\" + memUsed + \";\" + memFree + \";\" + totalMem + \";\" + nrHosts + \";\" + visitedSize + \";\" + visitedStringSize + \";\" + rawBytesReadString + \";\" + urlLengthFiltered);\n\n\n                if(!isWorkingOnMessage && (urlsQueued == 0) && (urlsWaiting == 0) && allThreadsIdle)\n                {\n                    nothingReadCount++;\n                    if(nothingReadCount > 3)\n                    {\n                        SimpleLoggerManager.getInstance().flush();\n                        System.exit(0);\n                    }\n\n                }\n                else\n                {\n                    nothingReadCount = 0;\n                }\n\n                this.setChanged();\n                this.notifyObservers();\n\n                // Request Garbage Collection\n                monitorRunCount++;\n\n                if(monitorRunCount % 6 == 0)\n                {\n                    System.runFinalization();\n                }\n\n                if(monitorRunCount % 2 == 0)\n                {\n                    System.gc();\n                    SimpleLoggerManager.getInstance().flush();\n                }\n\n            }\n            catch(Exception e)\n            {\n                System.out.println(\"Monitor: Exception: \" + e.getClass().getName());\n                e.printStackTrace();\n            }\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac7442844f853a19982a1d8261c147be6a4a2955","date":1035299795,"type":3,"author":"cmarschner","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/ThreadMonitor#run().mjava","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/ThreadMonitor#run().mjava","sourceNew":"    /**\n     * java.lang.Threads run method. To be invoked via start()\n     * the monitor's main thread takes the samples every sampleDelta ms\n     * Since Java is not real time, it remembers\n     */\n    public void run()\n    {\n        int nothingReadCount = 0;\n        long lastPeriodBytesRead = -1;\n        long monitorRunCount = 0;\n        long startTime = System.currentTimeMillis();\n        log(\"time;overallBytesRead;overallTasksRun;urlsQueued;urlsWaiting;isWorkingOnMessage;urlsScopeFiltered;urlsVisitedFiltered;urlsREFiltered;memUsed;memFree;totalMem;nrHosts;visitedSize;visitedStringSize;urlLengthFiltered\");\n        while(true)\n        {\n            try\n            {\n                try\n                {\n                    thread.sleep(sampleDelta);\n                }\n                catch(InterruptedException e)\n                {\n                    return;\n                }\n\n                Iterator threadIterator = threadPool.getThreadIterator();\n                int i=0;\n                StringBuffer bytesReadString = new StringBuffer(200);\n                StringBuffer rawBytesReadString = new StringBuffer(200);\n                StringBuffer tasksRunString = new StringBuffer(200);\n                long overallBytesRead = 0;\n                long overallTasksRun  = 0;\n                long now = System.currentTimeMillis();\n                boolean finished = false;\n                //System.out.print(\"\\f\");\n                /*while(!finished)\n                {\n                    boolean restart = false;*/\n                boolean allThreadsIdle = true;\n                StringBuffer sb = new StringBuffer(500);\n\n                while(threadIterator.hasNext())\n                {\n                    FetcherThread thread = (FetcherThread)threadIterator.next();\n                    long totalBytesRead = thread.getTotalBytesRead();\n                    overallBytesRead += totalBytesRead;\n                    bytesReadString.append(formatBytes(totalBytesRead)).append( \"; \");\n                    rawBytesReadString.append(totalBytesRead).append(\"; \");\n                    long tasksRun = thread.getTotalTasksRun();\n                    overallTasksRun += tasksRun;\n                    tasksRunString.append(tasksRun).append(\"; \");\n\n                    // check task status\n                    State state = thread.getTaskState();\n                    //StringBuffer sb = new StringBuffer(200);\n                    sb.setLength(0);\n\n                    System.out.println(sb + \"[\" + thread.getThreadNumber() + \"] \" + state.getState() + \" for \" +\n                                       (now - state.getStateSince() ) + \" ms \" +\n                                       (state.getInfo() != null ? \"(\" + state.getInfo() +\")\" : \"\")\n                                       );\n                    if(!(state.getState().equals(FetcherThread.STATE_IDLE)))\n                    {\n                        //if(allThreadsIdle) System.out.println(\"(not all threads are idle, '\"+state.getState()+\"' != '\"+FetcherThread.STATE_IDLE+\"')\");\n                        allThreadsIdle = false;\n                    }\n                    if (((state.equals(FetcherTask.FT_CONNECTING)) || (state.equals(FetcherTask.FT_GETTING)) || (state.equals(FetcherTask.FT_READING)) || (state.equals(FetcherTask.FT_CLOSING)))\n                        && ((now - state.getStateSince()) > 160000))\n                    {\n                        System.out.println(\"****Restarting Thread \" + thread.getThreadNumber());\n                        threadPool.restartThread(thread.getThreadNumber());\n                        break;  // Iterator is invalid\n                    }\n\n                }\n                /*if(restart)\n                {\n                    continue;\n                }\n                finished = true;\n                }*/\n                /*\n                if(overallBytesRead == lastPeriodBytesRead)\n                {\n                    *\n                    disabled kickout feature - cm\n\n                    nothingReadCount ++;\n                   System.out.println(\"Anomaly: nothing read during the last period(s). \" + (20-nothingReadCount+1) + \" periods to exit\");\n                    if(nothingReadCount > 20)  // nothing happens anymore\n                    {\n                        log(\"Ending\");\n                        System.out.println(\"End at \" + new Date().toString());\n                        // print some information\n                        System.exit(0);\n                    }\n\n\n                }\n                else\n                {\n                    nothingReadCount = 0;\n                }*/\n\n                lastPeriodBytesRead = overallBytesRead;\n\n                //State reState = new State(\"hhh\"); //reFilter.getState();\n                sb.setLength(0);\n                //System.out.println(sb + \"Robot-Excl.Filter State: \" + reState.getState() + \" since \" + (now-reState.getStateSince()) + \" ms \" + (reState.getInfo() != null ? \" at \" + reState.getInfo() : \"\"));\n\n                addSample(new Sample(overallBytesRead, overallTasksRun, System.currentTimeMillis()));\n                int nrHosts = ((FetcherTaskQueue)threadPool.getTaskQueue()).getNumHosts();\n                int visitedSize       = urlVisitedFilter.size();\n                int visitedStringSize = urlVisitedFilter.getStringSize();\n\n                double bytesPerSecond = getAverageBytesRead();\n                double docsPerSecond = getAverageDocsRead();\n                sb.setLength(0);\n                System.out.print(sb + \"\\nBytes total:          \");\n                System.out.print(formatBytes(overallBytesRead) + \"  (\" + formatBytes((long)(((double)overallBytesRead)*1000/(System.currentTimeMillis()-startTime))) + \" per second since start)\");\n                System.out.print(\"\\nBytes per Second:     \" + formatBytes((int)bytesPerSecond) + \" (50 secs)\");\n                System.out.print(                   \"\\nDocs per Second:      \" + docsPerSecond);\n                String bs = bytesReadString.toString();\n                System.out.print(                   \"\\nBytes per Thread:     \" + bs + \"\\n\");\n                double docsPerSecondTotal = ((double)overallTasksRun)*1000/(System.currentTimeMillis()-startTime);\n                sb.setLength(0);\n                System.out.println(sb + \"Docs read total:      \" + overallTasksRun + \"    Docs/s: \" + fractionFormat.format(docsPerSecondTotal) +\n                                   \"\\nDocs p.thread:        \" + tasksRunString);\n\n                long memUsed = Runtime.getRuntime().totalMemory()-Runtime.getRuntime().freeMemory();\n                long memFree = Runtime.getRuntime().freeMemory();\n                long totalMem = Runtime.getRuntime().totalMemory();\n                sb.setLength(0);\n                System.out.println(sb + \"Mem used:             \" + formatBytes(memUsed) +  \", free: \" + formatBytes(memFree) + \"     total VM: \" + totalMem);\n                int urlsQueued = messageHandler.getQueued();\n                int urlsWaiting = threadPool.getQueueSize();\n                boolean isWorkingOnMessage = messageHandler.isWorkingOnMessage();\n                int urlsScopeFiltered = urlScopeFilter.getFiltered();\n                int urlsVisitedFiltered = urlVisitedFilter.getFiltered();\n                int urlsREFiltered = reFilter.getFiltered();\n                int urlLengthFiltered = urlLengthFilter.getFiltered();\n                sb.setLength(0);\n                System.out.println(sb + \"URLs queued:          \" + urlsQueued + \"     waiting: \" + urlsWaiting);\n                sb.setLength(0);\n                System.out.println(sb + \"Message is being processed: \" + isWorkingOnMessage);\n                sb.setLength(0);\n                System.out.println(sb + \"URLs Filtered: length: \" + urlLengthFiltered + \"      scope: \" + urlsScopeFiltered + \"     visited: \" + urlsVisitedFiltered + \"      robot.txt: \" + urlsREFiltered);\n                sb.setLength(0);\n                System.out.println(sb + \"Visited size: \" + visitedSize + \"; String Size in VisitedFilter: \" + visitedStringSize + \"; Number of Hosts: \" + nrHosts + \"; hosts in Host Manager: \" + hostManager.getSize() + \"\\n\");\n                sb.setLength(0);\n                log(sb + \"\" + now + \";\" + overallBytesRead + \";\" + overallTasksRun + \";\" + urlsQueued + \";\" + urlsWaiting + \";\" + isWorkingOnMessage + \";\" + urlsScopeFiltered + \";\" + urlsVisitedFiltered + \";\" + urlsREFiltered + \";\" + memUsed + \";\" + memFree + \";\" + totalMem + \";\" + nrHosts + \";\" + visitedSize + \";\" + visitedStringSize + \";\" + rawBytesReadString + \";\" + urlLengthFiltered);\n\n\n                if(!isWorkingOnMessage && (urlsQueued == 0) && (urlsWaiting == 0) && allThreadsIdle)\n                {\n                    nothingReadCount++;\n                    if(nothingReadCount > 20)\n                    {\n                        SimpleLoggerManager.getInstance().flush();\n                        System.exit(0);\n                    }\n\n                }\n                else\n                {\n                    nothingReadCount = 0;\n                }\n\n                this.setChanged();\n                this.notifyObservers();\n\n                // Request Garbage Collection\n                monitorRunCount++;\n\n                if(monitorRunCount % 6 == 0)\n                {\n                    System.runFinalization();\n                }\n\n                if(monitorRunCount % 2 == 0)\n                {\n                    System.gc();\n                    SimpleLoggerManager.getInstance().flush();\n                }\n\n            }\n            catch(NoSuchMethodError e)\n            {\n                e.printStackTrace();\n                //System.out.println(\"cause: \" + e.getCause());\n                System.out.println(\"msg: \" + e.getMessage());\n\n            }\n            catch(Exception e)\n            {\n                System.out.println(\"Monitor: Exception: \" + e.getClass().getName());\n                e.printStackTrace();\n            }\n        }\n    }\n\n","sourceOld":"    /**\n     * java.lang.Threads run method. To be invoked via start()\n     * the monitor's main thread takes the samples every sampleDelta ms\n     * Since Java is not real time, it remembers\n     */\n    public void run()\n    {\n        int nothingReadCount = 0;\n        long lastPeriodBytesRead = -1;\n        long monitorRunCount = 0;\n        long startTime = System.currentTimeMillis();\n        log(\"time;overallBytesRead;overallTasksRun;urlsQueued;urlsWaiting;isWorkingOnMessage;urlsScopeFiltered;urlsVisitedFiltered;urlsREFiltered;memUsed;memFree;totalMem;nrHosts;visitedSize;visitedStringSize;urlLengthFiltered\");\n        while(true)\n        {\n            try\n            {\n                try\n                {\n                    thread.sleep(sampleDelta);\n                }\n                catch(InterruptedException e)\n                {\n                    return;\n                }\n\n                Iterator threadIterator = threadPool.getThreadIterator();\n                int i=0;\n                StringBuffer bytesReadString = new StringBuffer(200);\n                StringBuffer rawBytesReadString = new StringBuffer(200);\n                StringBuffer tasksRunString = new StringBuffer(200);\n                long overallBytesRead = 0;\n                long overallTasksRun  = 0;\n                long now = System.currentTimeMillis();\n                boolean finished = false;\n                //System.out.print(\"\\f\");\n                /*while(!finished)\n                {\n                    boolean restart = false;*/\n                boolean allThreadsIdle = true;\n                StringBuffer sb = new StringBuffer(500);\n\n                while(threadIterator.hasNext())\n                {\n                    FetcherThread thread = (FetcherThread)threadIterator.next();\n                    long totalBytesRead = thread.getTotalBytesRead();\n                    overallBytesRead += totalBytesRead;\n                    bytesReadString.append(formatBytes(totalBytesRead)).append( \"; \");\n                    rawBytesReadString.append(totalBytesRead).append(\"; \");\n                    long tasksRun = thread.getTotalTasksRun();\n                    overallTasksRun += tasksRun;\n                    tasksRunString.append(tasksRun).append(\"; \");\n\n                    // check task status\n                    State state = thread.getTaskState();\n                    //StringBuffer sb = new StringBuffer(200);\n                    sb.setLength(0);\n                    System.out.println(sb + \"[\" + thread.getThreadNumber() + \"] \" + state.getState() + \" for \" +\n                                       (now - state.getStateSince() ) + \" ms \" +\n                                       (state.getInfo() != null ? \"(\" + state.getInfo() +\")\" : \"\")\n                                       );\n                    if(!(state.getState().equals(FetcherThread.STATE_IDLE)))\n                    {\n                        //if(allThreadsIdle) System.out.println(\"(not all threads are idle, '\"+state.getState()+\"' != '\"+FetcherThread.STATE_IDLE+\"')\");\n                        allThreadsIdle = false;\n                    }\n                    if (((state.equals(FetcherTask.FT_CONNECTING)) || (state.equals(FetcherTask.FT_GETTING)) || (state.equals(FetcherTask.FT_READING)) || (state.equals(FetcherTask.FT_CLOSING)))\n                        && ((now - state.getStateSince()) > 160000))\n                    {\n                        System.out.println(\"****Restarting Thread \" + thread.getThreadNumber());\n                        threadPool.restartThread(thread.getThreadNumber());\n                        break;  // Iterator is invalid\n                    }\n\n                }\n                /*if(restart)\n                {\n                    continue;\n                }\n                finished = true;\n                }*/\n                /*\n                if(overallBytesRead == lastPeriodBytesRead)\n                {\n                    *\n                    disabled kickout feature - cm\n\n                    nothingReadCount ++;\n                   System.out.println(\"Anomaly: nothing read during the last period(s). \" + (20-nothingReadCount+1) + \" periods to exit\");\n                    if(nothingReadCount > 20)  // nothing happens anymore\n                    {\n                        log(\"Ending\");\n                        System.out.println(\"End at \" + new Date().toString());\n                        // print some information\n                        System.exit(0);\n                    }\n\n\n                }\n                else\n                {\n                    nothingReadCount = 0;\n                }*/\n\n                lastPeriodBytesRead = overallBytesRead;\n\n                //State reState = new State(\"hhh\"); //reFilter.getState();\n                sb.setLength(0);\n                //System.out.println(sb + \"Robot-Excl.Filter State: \" + reState.getState() + \" since \" + (now-reState.getStateSince()) + \" ms \" + (reState.getInfo() != null ? \" at \" + reState.getInfo() : \"\"));\n\n                addSample(new Sample(overallBytesRead, overallTasksRun, System.currentTimeMillis()));\n                int nrHosts = ((FetcherTaskQueue)threadPool.getTaskQueue()).getNumHosts();\n                int visitedSize       = urlVisitedFilter.size();\n                int visitedStringSize = urlVisitedFilter.getStringSize();\n\n                double bytesPerSecond = getAverageBytesRead();\n                double docsPerSecond = getAverageDocsRead();\n                sb.setLength(0);\n                System.out.println(sb + \"\\nBytes total:          \" + formatBytes(overallBytesRead) + \"  (\" + formatBytes((long)(((double)overallBytesRead)*1000/(System.currentTimeMillis()-startTime))) + \" per second since start)\" +\n                                   \"\\nBytes per Second:     \" + formatBytes((int)bytesPerSecond) + \" (50 secs)\" +\n                                   \"\\nDocs per Second:      \" + docsPerSecond +\n                                   \"\\nBytes per Thread:     \" + bytesReadString);\n                double docsPerSecondTotal = ((double)overallTasksRun)*1000/(System.currentTimeMillis()-startTime);\n                sb.setLength(0);\n                System.out.println(sb + \"Docs read total:      \" + overallTasksRun + \"    Docs/s: \" + fractionFormat.format(docsPerSecondTotal) +\n                                   \"\\nDocs p.thread:        \" + tasksRunString);\n\n                long memUsed = Runtime.getRuntime().totalMemory()-Runtime.getRuntime().freeMemory();\n                long memFree = Runtime.getRuntime().freeMemory();\n                long totalMem = Runtime.getRuntime().totalMemory();\n                sb.setLength(0);\n                System.out.println(sb + \"Mem used:             \" + formatBytes(memUsed) +  \", free: \" + formatBytes(memFree) + \"     total VM: \" + totalMem);\n                int urlsQueued = messageHandler.getQueued();\n                int urlsWaiting = threadPool.getQueueSize();\n                boolean isWorkingOnMessage = messageHandler.isWorkingOnMessage();\n                int urlsScopeFiltered = urlScopeFilter.getFiltered();\n                int urlsVisitedFiltered = urlVisitedFilter.getFiltered();\n                int urlsREFiltered = reFilter.getFiltered();\n                int urlLengthFiltered = urlLengthFilter.getFiltered();\n                sb.setLength(0);\n                System.out.println(sb + \"URLs queued:          \" + urlsQueued + \"     waiting: \" + urlsWaiting);\n                sb.setLength(0);\n                System.out.println(sb + \"Message is being processed: \" + isWorkingOnMessage);\n                sb.setLength(0);\n                System.out.println(sb + \"URLs Filtered: length: \" + urlLengthFiltered + \"      scope: \" + urlsScopeFiltered + \"     visited: \" + urlsVisitedFiltered + \"      robot.txt: \" + urlsREFiltered);\n                sb.setLength(0);\n                System.out.println(sb + \"Visited size: \" + visitedSize + \"; String Size in VisitedFilter: \" + visitedStringSize + \"; Number of Hosts: \" + nrHosts + \"; hosts in Host Manager: \" + hostManager.getSize() + \"\\n\");\n                sb.setLength(0);\n                log(sb + \"\" + now + \";\" + overallBytesRead + \";\" + overallTasksRun + \";\" + urlsQueued + \";\" + urlsWaiting + \";\" + isWorkingOnMessage + \";\" + urlsScopeFiltered + \";\" + urlsVisitedFiltered + \";\" + urlsREFiltered + \";\" + memUsed + \";\" + memFree + \";\" + totalMem + \";\" + nrHosts + \";\" + visitedSize + \";\" + visitedStringSize + \";\" + rawBytesReadString + \";\" + urlLengthFiltered);\n\n\n                if(!isWorkingOnMessage && (urlsQueued == 0) && (urlsWaiting == 0) && allThreadsIdle)\n                {\n                    nothingReadCount++;\n                    if(nothingReadCount > 3)\n                    {\n                        SimpleLoggerManager.getInstance().flush();\n                        System.exit(0);\n                    }\n\n                }\n                else\n                {\n                    nothingReadCount = 0;\n                }\n\n                this.setChanged();\n                this.notifyObservers();\n\n                // Request Garbage Collection\n                monitorRunCount++;\n\n                if(monitorRunCount % 6 == 0)\n                {\n                    System.runFinalization();\n                }\n\n                if(monitorRunCount % 2 == 0)\n                {\n                    System.gc();\n                    SimpleLoggerManager.getInstance().flush();\n                }\n\n            }\n            catch(Exception e)\n            {\n                System.out.println(\"Monitor: Exception: \" + e.getClass().getName());\n                e.printStackTrace();\n            }\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afc16d717d9ed1a8e45371668ca6de674164d624","date":1103345442,"type":4,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/ThreadMonitor#run().mjava","sourceNew":null,"sourceOld":"    /**\n     * java.lang.Threads run method. To be invoked via start()\n     * the monitor's main thread takes the samples every sampleDelta ms\n     * Since Java is not real time, it remembers\n     */\n    public void run()\n    {\n        int nothingReadCount = 0;\n        long lastPeriodBytesRead = -1;\n        long monitorRunCount = 0;\n        long startTime = System.currentTimeMillis();\n        log(\"time;overallBytesRead;overallTasksRun;urlsQueued;urlsWaiting;isWorkingOnMessage;urlsScopeFiltered;urlsVisitedFiltered;urlsREFiltered;memUsed;memFree;totalMem;nrHosts;visitedSize;visitedStringSize;urlLengthFiltered\");\n        while(true)\n        {\n            try\n            {\n                try\n                {\n                    thread.sleep(sampleDelta);\n                }\n                catch(InterruptedException e)\n                {\n                    return;\n                }\n\n                Iterator threadIterator = threadPool.getThreadIterator();\n                int i=0;\n                StringBuffer bytesReadString = new StringBuffer(200);\n                StringBuffer rawBytesReadString = new StringBuffer(200);\n                StringBuffer tasksRunString = new StringBuffer(200);\n                long overallBytesRead = 0;\n                long overallTasksRun  = 0;\n                long now = System.currentTimeMillis();\n                boolean finished = false;\n                //System.out.print(\"\\f\");\n                /*while(!finished)\n                {\n                    boolean restart = false;*/\n                boolean allThreadsIdle = true;\n                StringBuffer sb = new StringBuffer(500);\n\n                while(threadIterator.hasNext())\n                {\n                    FetcherThread thread = (FetcherThread)threadIterator.next();\n                    long totalBytesRead = thread.getTotalBytesRead();\n                    overallBytesRead += totalBytesRead;\n                    bytesReadString.append(formatBytes(totalBytesRead)).append( \"; \");\n                    rawBytesReadString.append(totalBytesRead).append(\"; \");\n                    long tasksRun = thread.getTotalTasksRun();\n                    overallTasksRun += tasksRun;\n                    tasksRunString.append(tasksRun).append(\"; \");\n\n                    // check task status\n                    State state = thread.getTaskState();\n                    //StringBuffer sb = new StringBuffer(200);\n                    sb.setLength(0);\n\n                    System.out.println(sb + \"[\" + thread.getThreadNumber() + \"] \" + state.getState() + \" for \" +\n                                       (now - state.getStateSince() ) + \" ms \" +\n                                       (state.getInfo() != null ? \"(\" + state.getInfo() +\")\" : \"\")\n                                       );\n                    if(!(state.getState().equals(FetcherThread.STATE_IDLE)))\n                    {\n                        //if(allThreadsIdle) System.out.println(\"(not all threads are idle, '\"+state.getState()+\"' != '\"+FetcherThread.STATE_IDLE+\"')\");\n                        allThreadsIdle = false;\n                    }\n                    if (((state.equals(FetcherTask.FT_CONNECTING)) || (state.equals(FetcherTask.FT_GETTING)) || (state.equals(FetcherTask.FT_READING)) || (state.equals(FetcherTask.FT_CLOSING)))\n                        && ((now - state.getStateSince()) > 160000))\n                    {\n                        System.out.println(\"****Restarting Thread \" + thread.getThreadNumber());\n                        threadPool.restartThread(thread.getThreadNumber());\n                        break;  // Iterator is invalid\n                    }\n\n                }\n                /*if(restart)\n                {\n                    continue;\n                }\n                finished = true;\n                }*/\n                /*\n                if(overallBytesRead == lastPeriodBytesRead)\n                {\n                    *\n                    disabled kickout feature - cm\n\n                    nothingReadCount ++;\n                   System.out.println(\"Anomaly: nothing read during the last period(s). \" + (20-nothingReadCount+1) + \" periods to exit\");\n                    if(nothingReadCount > 20)  // nothing happens anymore\n                    {\n                        log(\"Ending\");\n                        System.out.println(\"End at \" + new Date().toString());\n                        // print some information\n                        System.exit(0);\n                    }\n\n\n                }\n                else\n                {\n                    nothingReadCount = 0;\n                }*/\n\n                lastPeriodBytesRead = overallBytesRead;\n\n                //State reState = new State(\"hhh\"); //reFilter.getState();\n                sb.setLength(0);\n                //System.out.println(sb + \"Robot-Excl.Filter State: \" + reState.getState() + \" since \" + (now-reState.getStateSince()) + \" ms \" + (reState.getInfo() != null ? \" at \" + reState.getInfo() : \"\"));\n\n                addSample(new Sample(overallBytesRead, overallTasksRun, System.currentTimeMillis()));\n                int nrHosts = ((FetcherTaskQueue)threadPool.getTaskQueue()).getNumHosts();\n                int visitedSize       = urlVisitedFilter.size();\n                int visitedStringSize = urlVisitedFilter.getStringSize();\n\n                double bytesPerSecond = getAverageBytesRead();\n                double docsPerSecond = getAverageDocsRead();\n                sb.setLength(0);\n                System.out.print(sb + \"\\nBytes total:          \");\n                System.out.print(formatBytes(overallBytesRead) + \"  (\" + formatBytes((long)(((double)overallBytesRead)*1000/(System.currentTimeMillis()-startTime))) + \" per second since start)\");\n                System.out.print(\"\\nBytes per Second:     \" + formatBytes((int)bytesPerSecond) + \" (50 secs)\");\n                System.out.print(                   \"\\nDocs per Second:      \" + docsPerSecond);\n                String bs = bytesReadString.toString();\n                System.out.print(                   \"\\nBytes per Thread:     \" + bs + \"\\n\");\n                double docsPerSecondTotal = ((double)overallTasksRun)*1000/(System.currentTimeMillis()-startTime);\n                sb.setLength(0);\n                System.out.println(sb + \"Docs read total:      \" + overallTasksRun + \"    Docs/s: \" + fractionFormat.format(docsPerSecondTotal) +\n                                   \"\\nDocs p.thread:        \" + tasksRunString);\n\n                long memUsed = Runtime.getRuntime().totalMemory()-Runtime.getRuntime().freeMemory();\n                long memFree = Runtime.getRuntime().freeMemory();\n                long totalMem = Runtime.getRuntime().totalMemory();\n                sb.setLength(0);\n                System.out.println(sb + \"Mem used:             \" + formatBytes(memUsed) +  \", free: \" + formatBytes(memFree) + \"     total VM: \" + totalMem);\n                int urlsQueued = messageHandler.getQueued();\n                int urlsWaiting = threadPool.getQueueSize();\n                boolean isWorkingOnMessage = messageHandler.isWorkingOnMessage();\n                int urlsScopeFiltered = urlScopeFilter.getFiltered();\n                int urlsVisitedFiltered = urlVisitedFilter.getFiltered();\n                int urlsREFiltered = reFilter.getFiltered();\n                int urlLengthFiltered = urlLengthFilter.getFiltered();\n                sb.setLength(0);\n                System.out.println(sb + \"URLs queued:          \" + urlsQueued + \"     waiting: \" + urlsWaiting);\n                sb.setLength(0);\n                System.out.println(sb + \"Message is being processed: \" + isWorkingOnMessage);\n                sb.setLength(0);\n                System.out.println(sb + \"URLs Filtered: length: \" + urlLengthFiltered + \"      scope: \" + urlsScopeFiltered + \"     visited: \" + urlsVisitedFiltered + \"      robot.txt: \" + urlsREFiltered);\n                sb.setLength(0);\n                System.out.println(sb + \"Visited size: \" + visitedSize + \"; String Size in VisitedFilter: \" + visitedStringSize + \"; Number of Hosts: \" + nrHosts + \"; hosts in Host Manager: \" + hostManager.getSize() + \"\\n\");\n                sb.setLength(0);\n                log(sb + \"\" + now + \";\" + overallBytesRead + \";\" + overallTasksRun + \";\" + urlsQueued + \";\" + urlsWaiting + \";\" + isWorkingOnMessage + \";\" + urlsScopeFiltered + \";\" + urlsVisitedFiltered + \";\" + urlsREFiltered + \";\" + memUsed + \";\" + memFree + \";\" + totalMem + \";\" + nrHosts + \";\" + visitedSize + \";\" + visitedStringSize + \";\" + rawBytesReadString + \";\" + urlLengthFiltered);\n\n\n                if(!isWorkingOnMessage && (urlsQueued == 0) && (urlsWaiting == 0) && allThreadsIdle)\n                {\n                    nothingReadCount++;\n                    if(nothingReadCount > 20)\n                    {\n                        SimpleLoggerManager.getInstance().flush();\n                        System.exit(0);\n                    }\n\n                }\n                else\n                {\n                    nothingReadCount = 0;\n                }\n\n                this.setChanged();\n                this.notifyObservers();\n\n                // Request Garbage Collection\n                monitorRunCount++;\n\n                if(monitorRunCount % 6 == 0)\n                {\n                    System.runFinalization();\n                }\n\n                if(monitorRunCount % 2 == 0)\n                {\n                    System.gc();\n                    SimpleLoggerManager.getInstance().flush();\n                }\n\n            }\n            catch(NoSuchMethodError e)\n            {\n                e.printStackTrace();\n                //System.out.println(\"cause: \" + e.getCause());\n                System.out.println(\"msg: \" + e.getMessage());\n\n            }\n            catch(Exception e)\n            {\n                System.out.println(\"Monitor: Exception: \" + e.getClass().getName());\n                e.printStackTrace();\n            }\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ac7442844f853a19982a1d8261c147be6a4a2955":["05d36e0b328ec96237035fbcca240e73631396e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afc16d717d9ed1a8e45371668ca6de674164d624":["ac7442844f853a19982a1d8261c147be6a4a2955"],"05d36e0b328ec96237035fbcca240e73631396e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["afc16d717d9ed1a8e45371668ca6de674164d624"]},"commit2Childs":{"ac7442844f853a19982a1d8261c147be6a4a2955":["afc16d717d9ed1a8e45371668ca6de674164d624"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05d36e0b328ec96237035fbcca240e73631396e5"],"afc16d717d9ed1a8e45371668ca6de674164d624":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05d36e0b328ec96237035fbcca240e73631396e5":["ac7442844f853a19982a1d8261c147be6a4a2955"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}