{"path":"src/java/org/apache/lucene/index/IndexWriter#deleteUnusedFiles().mjava","commits":[{"id":"901ca90e401ba1870fce0630240b1aacdd386e49","date":1265972851,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#deleteUnusedFiles().mjava","pathOld":"/dev/null","sourceNew":"  /** Expert: remove any index files that are no longer\n   *  used.\n   * \n   *  <p> IndexWriter normally deletes unused files itself,\n   *  during indexing.  However, on Windows, which disallows\n   *  deletion of open files, if there is a reader open on\n   *  the index then those files cannot be deleted.  This is\n   *  fine, because IndexWriter will periodically retry\n   *  the deletion.</p>\n   *\n   *  <p> However, IndexWriter doesn't try that often: only\n   *  on open, close, flushing a new segment, and finishing\n   *  a merge.  If you don't do any of these actions with your\n   *  IndexWriter, you'll see the unused files linger.  If\n   *  that's a problem, call this method to delete them\n   *  (once you've closed the open readers that were\n   *  preventing their deletion). */\n  public synchronized void deleteUnusedFiles() throws IOException {\n    deleter.deletePendingFiles();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteUnusedFiles().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#deleteUnusedFiles().mjava","sourceNew":"  /** Expert: remove any index files that are no longer\n   *  used.\n   * \n   *  <p> IndexWriter normally deletes unused files itself,\n   *  during indexing.  However, on Windows, which disallows\n   *  deletion of open files, if there is a reader open on\n   *  the index then those files cannot be deleted.  This is\n   *  fine, because IndexWriter will periodically retry\n   *  the deletion.</p>\n   *\n   *  <p> However, IndexWriter doesn't try that often: only\n   *  on open, close, flushing a new segment, and finishing\n   *  a merge.  If you don't do any of these actions with your\n   *  IndexWriter, you'll see the unused files linger.  If\n   *  that's a problem, call this method to delete them\n   *  (once you've closed the open readers that were\n   *  preventing their deletion). */\n  public synchronized void deleteUnusedFiles() throws IOException {\n    deleter.deletePendingFiles();\n  }\n\n","sourceOld":"  /** Expert: remove any index files that are no longer\n   *  used.\n   * \n   *  <p> IndexWriter normally deletes unused files itself,\n   *  during indexing.  However, on Windows, which disallows\n   *  deletion of open files, if there is a reader open on\n   *  the index then those files cannot be deleted.  This is\n   *  fine, because IndexWriter will periodically retry\n   *  the deletion.</p>\n   *\n   *  <p> However, IndexWriter doesn't try that often: only\n   *  on open, close, flushing a new segment, and finishing\n   *  a merge.  If you don't do any of these actions with your\n   *  IndexWriter, you'll see the unused files linger.  If\n   *  that's a problem, call this method to delete them\n   *  (once you've closed the open readers that were\n   *  preventing their deletion). */\n  public synchronized void deleteUnusedFiles() throws IOException {\n    deleter.deletePendingFiles();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"901ca90e401ba1870fce0630240b1aacdd386e49":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["901ca90e401ba1870fce0630240b1aacdd386e49"]},"commit2Childs":{"901ca90e401ba1870fce0630240b1aacdd386e49":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["901ca90e401ba1870fce0630240b1aacdd386e49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}