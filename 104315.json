{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#assertSameScoresWithoutFilters(IndexSearcher,BooleanQuery).mjava","commits":[{"id":"25f698887111a682424e759ba36083180899a1fd","date":1423588899,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#assertSameScoresWithoutFilters(IndexSearcher,BooleanQuery).mjava","pathOld":"/dev/null","sourceNew":"  private void assertSameScoresWithoutFilters(IndexSearcher searcher, BooleanQuery bq) throws IOException {\n    final BooleanQuery bq2 = new BooleanQuery();\n    for (BooleanClause c : bq.getClauses()) {\n      if (c.getOccur() != Occur.FILTER) {\n        bq2.add(c);\n      }\n    }\n    bq2.setMinimumNumberShouldMatch(bq.getMinimumNumberShouldMatch());\n    bq2.setBoost(bq.getBoost());\n\n    final AtomicBoolean matched = new AtomicBoolean();\n    searcher.search(bq, new SimpleCollector() {\n      int docBase;\n      Scorer scorer;\n\n      @Override\n      protected void doSetNextReader(LeafReaderContext context)\n          throws IOException {\n        super.doSetNextReader(context);\n        docBase = context.docBase;\n      }\n\n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        final float actualScore = scorer.score();\n        final float expectedScore = searcher.explain(bq2, docBase + doc).getValue();\n        assertEquals(expectedScore, actualScore, 10e-5);\n        matched.set(true);\n      }\n    });\n    assertTrue(matched.get());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#assertSameScoresWithoutFilters(IndexSearcher,BooleanQuery).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#assertSameScoresWithoutFilters(IndexSearcher,BooleanQuery).mjava","sourceNew":"  private void assertSameScoresWithoutFilters(IndexSearcher searcher, BooleanQuery bq) throws IOException {\n    final BooleanQuery.Builder bq2Builder = new BooleanQuery.Builder();\n    for (BooleanClause c : bq) {\n      if (c.getOccur() != Occur.FILTER) {\n        bq2Builder.add(c);\n      }\n    }\n    bq2Builder.setMinimumNumberShouldMatch(bq.getMinimumNumberShouldMatch());\n    BooleanQuery bq2 = bq2Builder.build();\n    bq2.setBoost(bq.getBoost());\n\n    final AtomicBoolean matched = new AtomicBoolean();\n    searcher.search(bq, new SimpleCollector() {\n      int docBase;\n      Scorer scorer;\n\n      @Override\n      protected void doSetNextReader(LeafReaderContext context)\n          throws IOException {\n        super.doSetNextReader(context);\n        docBase = context.docBase;\n      }\n\n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        final float actualScore = scorer.score();\n        final float expectedScore = searcher.explain(bq2, docBase + doc).getValue();\n        assertEquals(expectedScore, actualScore, 10e-5);\n        matched.set(true);\n      }\n    });\n    assertTrue(matched.get());\n  }\n\n","sourceOld":"  private void assertSameScoresWithoutFilters(IndexSearcher searcher, BooleanQuery bq) throws IOException {\n    final BooleanQuery bq2 = new BooleanQuery();\n    for (BooleanClause c : bq.getClauses()) {\n      if (c.getOccur() != Occur.FILTER) {\n        bq2.add(c);\n      }\n    }\n    bq2.setMinimumNumberShouldMatch(bq.getMinimumNumberShouldMatch());\n    bq2.setBoost(bq.getBoost());\n\n    final AtomicBoolean matched = new AtomicBoolean();\n    searcher.search(bq, new SimpleCollector() {\n      int docBase;\n      Scorer scorer;\n\n      @Override\n      protected void doSetNextReader(LeafReaderContext context)\n          throws IOException {\n        super.doSetNextReader(context);\n        docBase = context.docBase;\n      }\n\n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        final float actualScore = scorer.score();\n        final float expectedScore = searcher.explain(bq2, docBase + doc).getValue();\n        assertEquals(expectedScore, actualScore, 10e-5);\n        matched.set(true);\n      }\n    });\n    assertTrue(matched.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#assertSameScoresWithoutFilters(IndexSearcher,BooleanQuery).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#assertSameScoresWithoutFilters(IndexSearcher,BooleanQuery).mjava","sourceNew":"  private void assertSameScoresWithoutFilters(IndexSearcher searcher, BooleanQuery bq) throws IOException {\n    final BooleanQuery.Builder bq2Builder = new BooleanQuery.Builder();\n    for (BooleanClause c : bq) {\n      if (c.getOccur() != Occur.FILTER) {\n        bq2Builder.add(c);\n      }\n    }\n    bq2Builder.setMinimumNumberShouldMatch(bq.getMinimumNumberShouldMatch());\n    BooleanQuery bq2 = bq2Builder.build();\n\n    final AtomicBoolean matched = new AtomicBoolean();\n    searcher.search(bq, new SimpleCollector() {\n      int docBase;\n      Scorer scorer;\n\n      @Override\n      protected void doSetNextReader(LeafReaderContext context)\n          throws IOException {\n        super.doSetNextReader(context);\n        docBase = context.docBase;\n      }\n\n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        final float actualScore = scorer.score();\n        final float expectedScore = searcher.explain(bq2, docBase + doc).getValue();\n        assertEquals(expectedScore, actualScore, 10e-5);\n        matched.set(true);\n      }\n    });\n    assertTrue(matched.get());\n  }\n\n","sourceOld":"  private void assertSameScoresWithoutFilters(IndexSearcher searcher, BooleanQuery bq) throws IOException {\n    final BooleanQuery.Builder bq2Builder = new BooleanQuery.Builder();\n    for (BooleanClause c : bq) {\n      if (c.getOccur() != Occur.FILTER) {\n        bq2Builder.add(c);\n      }\n    }\n    bq2Builder.setMinimumNumberShouldMatch(bq.getMinimumNumberShouldMatch());\n    BooleanQuery bq2 = bq2Builder.build();\n    bq2.setBoost(bq.getBoost());\n\n    final AtomicBoolean matched = new AtomicBoolean();\n    searcher.search(bq, new SimpleCollector() {\n      int docBase;\n      Scorer scorer;\n\n      @Override\n      protected void doSetNextReader(LeafReaderContext context)\n          throws IOException {\n        super.doSetNextReader(context);\n        docBase = context.docBase;\n      }\n\n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        final float actualScore = scorer.score();\n        final float expectedScore = searcher.explain(bq2, docBase + doc).getValue();\n        assertEquals(expectedScore, actualScore, 10e-5);\n        matched.set(true);\n      }\n    });\n    assertTrue(matched.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#assertSameScoresWithoutFilters(IndexSearcher,BooleanQuery).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#assertSameScoresWithoutFilters(IndexSearcher,BooleanQuery).mjava","sourceNew":"  private void assertSameScoresWithoutFilters(IndexSearcher searcher, BooleanQuery bq) throws IOException {\n    final BooleanQuery.Builder bq2Builder = new BooleanQuery.Builder();\n    for (BooleanClause c : bq) {\n      if (c.getOccur() != Occur.FILTER) {\n        bq2Builder.add(c);\n      }\n    }\n    bq2Builder.setMinimumNumberShouldMatch(bq.getMinimumNumberShouldMatch());\n    BooleanQuery bq2 = bq2Builder.build();\n\n    final AtomicBoolean matched = new AtomicBoolean();\n    searcher.search(bq, new SimpleCollector() {\n      int docBase;\n      Scorer scorer;\n\n      @Override\n      protected void doSetNextReader(LeafReaderContext context)\n          throws IOException {\n        super.doSetNextReader(context);\n        docBase = context.docBase;\n      }\n\n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.COMPLETE;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        final float actualScore = scorer.score();\n        final float expectedScore = searcher.explain(bq2, docBase + doc).getValue();\n        assertEquals(expectedScore, actualScore, 10e-5);\n        matched.set(true);\n      }\n    });\n    assertTrue(matched.get());\n  }\n\n","sourceOld":"  private void assertSameScoresWithoutFilters(IndexSearcher searcher, BooleanQuery bq) throws IOException {\n    final BooleanQuery.Builder bq2Builder = new BooleanQuery.Builder();\n    for (BooleanClause c : bq) {\n      if (c.getOccur() != Occur.FILTER) {\n        bq2Builder.add(c);\n      }\n    }\n    bq2Builder.setMinimumNumberShouldMatch(bq.getMinimumNumberShouldMatch());\n    BooleanQuery bq2 = bq2Builder.build();\n\n    final AtomicBoolean matched = new AtomicBoolean();\n    searcher.search(bq, new SimpleCollector() {\n      int docBase;\n      Scorer scorer;\n\n      @Override\n      protected void doSetNextReader(LeafReaderContext context)\n          throws IOException {\n        super.doSetNextReader(context);\n        docBase = context.docBase;\n      }\n\n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        final float actualScore = scorer.score();\n        final float expectedScore = searcher.explain(bq2, docBase + doc).getValue();\n        assertEquals(expectedScore, actualScore, 10e-5);\n        matched.set(true);\n      }\n    });\n    assertTrue(matched.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#assertSameScoresWithoutFilters(IndexSearcher,BooleanQuery).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#assertSameScoresWithoutFilters(IndexSearcher,BooleanQuery).mjava","sourceNew":"  private void assertSameScoresWithoutFilters(IndexSearcher searcher, BooleanQuery bq) throws IOException {\n    final BooleanQuery.Builder bq2Builder = new BooleanQuery.Builder();\n    for (BooleanClause c : bq) {\n      if (c.getOccur() != Occur.FILTER) {\n        bq2Builder.add(c);\n      }\n    }\n    bq2Builder.setMinimumNumberShouldMatch(bq.getMinimumNumberShouldMatch());\n    BooleanQuery bq2 = bq2Builder.build();\n\n    final AtomicBoolean matched = new AtomicBoolean();\n    searcher.search(bq, new SimpleCollector() {\n      int docBase;\n      Scorer scorer;\n\n      @Override\n      protected void doSetNextReader(LeafReaderContext context)\n          throws IOException {\n        super.doSetNextReader(context);\n        docBase = context.docBase;\n      }\n\n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.COMPLETE;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        final float actualScore = scorer.score();\n        final float expectedScore = searcher.explain(bq2, docBase + doc).getValue();\n        assertEquals(expectedScore, actualScore, 10e-5);\n        matched.set(true);\n      }\n    });\n    assertTrue(matched.get());\n  }\n\n","sourceOld":"  private void assertSameScoresWithoutFilters(IndexSearcher searcher, BooleanQuery bq) throws IOException {\n    final BooleanQuery.Builder bq2Builder = new BooleanQuery.Builder();\n    for (BooleanClause c : bq) {\n      if (c.getOccur() != Occur.FILTER) {\n        bq2Builder.add(c);\n      }\n    }\n    bq2Builder.setMinimumNumberShouldMatch(bq.getMinimumNumberShouldMatch());\n    BooleanQuery bq2 = bq2Builder.build();\n\n    final AtomicBoolean matched = new AtomicBoolean();\n    searcher.search(bq, new SimpleCollector() {\n      int docBase;\n      Scorer scorer;\n\n      @Override\n      protected void doSetNextReader(LeafReaderContext context)\n          throws IOException {\n        super.doSetNextReader(context);\n        docBase = context.docBase;\n      }\n\n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        final float actualScore = scorer.score();\n        final float expectedScore = searcher.explain(bq2, docBase + doc).getValue();\n        assertEquals(expectedScore, actualScore, 10e-5);\n        matched.set(true);\n      }\n    });\n    assertTrue(matched.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf","date":1514891219,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#assertSameScoresWithoutFilters(IndexSearcher,BooleanQuery).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#assertSameScoresWithoutFilters(IndexSearcher,BooleanQuery).mjava","sourceNew":"  private void assertSameScoresWithoutFilters(IndexSearcher searcher, BooleanQuery bq) throws IOException {\n    final BooleanQuery.Builder bq2Builder = new BooleanQuery.Builder();\n    for (BooleanClause c : bq) {\n      if (c.getOccur() != Occur.FILTER) {\n        bq2Builder.add(c);\n      }\n    }\n    bq2Builder.setMinimumNumberShouldMatch(bq.getMinimumNumberShouldMatch());\n    BooleanQuery bq2 = bq2Builder.build();\n\n    final AtomicBoolean matched = new AtomicBoolean();\n    searcher.search(bq, new SimpleCollector() {\n      int docBase;\n      Scorer scorer;\n\n      @Override\n      protected void doSetNextReader(LeafReaderContext context)\n          throws IOException {\n        super.doSetNextReader(context);\n        docBase = context.docBase;\n      }\n\n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.COMPLETE;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        final float actualScore = scorer.score();\n        final float expectedScore = searcher.explain(bq2, docBase + doc).getValue().floatValue();\n        assertEquals(expectedScore, actualScore, 10e-5);\n        matched.set(true);\n      }\n    });\n    assertTrue(matched.get());\n  }\n\n","sourceOld":"  private void assertSameScoresWithoutFilters(IndexSearcher searcher, BooleanQuery bq) throws IOException {\n    final BooleanQuery.Builder bq2Builder = new BooleanQuery.Builder();\n    for (BooleanClause c : bq) {\n      if (c.getOccur() != Occur.FILTER) {\n        bq2Builder.add(c);\n      }\n    }\n    bq2Builder.setMinimumNumberShouldMatch(bq.getMinimumNumberShouldMatch());\n    BooleanQuery bq2 = bq2Builder.build();\n\n    final AtomicBoolean matched = new AtomicBoolean();\n    searcher.search(bq, new SimpleCollector() {\n      int docBase;\n      Scorer scorer;\n\n      @Override\n      protected void doSetNextReader(LeafReaderContext context)\n          throws IOException {\n        super.doSetNextReader(context);\n        docBase = context.docBase;\n      }\n\n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.COMPLETE;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        final float actualScore = scorer.score();\n        final float expectedScore = searcher.explain(bq2, docBase + doc).getValue();\n        assertEquals(expectedScore, actualScore, 10e-5);\n        matched.set(true);\n      }\n    });\n    assertTrue(matched.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285244982ce6aa163d1e60a707f0e6e121736ce5","date":1536055304,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#assertSameScoresWithoutFilters(IndexSearcher,BooleanQuery).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#assertSameScoresWithoutFilters(IndexSearcher,BooleanQuery).mjava","sourceNew":"  private void assertSameScoresWithoutFilters(IndexSearcher searcher, BooleanQuery bq) throws IOException {\n    final BooleanQuery.Builder bq2Builder = new BooleanQuery.Builder();\n    for (BooleanClause c : bq) {\n      if (c.getOccur() != Occur.FILTER) {\n        bq2Builder.add(c);\n      }\n    }\n    bq2Builder.setMinimumNumberShouldMatch(bq.getMinimumNumberShouldMatch());\n    BooleanQuery bq2 = bq2Builder.build();\n\n    final AtomicBoolean matched = new AtomicBoolean();\n    searcher.search(bq, new SimpleCollector() {\n      int docBase;\n      Scorable scorer;\n\n      @Override\n      protected void doSetNextReader(LeafReaderContext context)\n          throws IOException {\n        super.doSetNextReader(context);\n        docBase = context.docBase;\n      }\n\n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.COMPLETE;\n      }\n\n      @Override\n      public void setScorer(Scorable scorer) throws IOException {\n        this.scorer = scorer;\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        final float actualScore = scorer.score();\n        final float expectedScore = searcher.explain(bq2, docBase + doc).getValue().floatValue();\n        assertEquals(expectedScore, actualScore, 10e-5);\n        matched.set(true);\n      }\n    });\n    assertTrue(matched.get());\n  }\n\n","sourceOld":"  private void assertSameScoresWithoutFilters(IndexSearcher searcher, BooleanQuery bq) throws IOException {\n    final BooleanQuery.Builder bq2Builder = new BooleanQuery.Builder();\n    for (BooleanClause c : bq) {\n      if (c.getOccur() != Occur.FILTER) {\n        bq2Builder.add(c);\n      }\n    }\n    bq2Builder.setMinimumNumberShouldMatch(bq.getMinimumNumberShouldMatch());\n    BooleanQuery bq2 = bq2Builder.build();\n\n    final AtomicBoolean matched = new AtomicBoolean();\n    searcher.search(bq, new SimpleCollector() {\n      int docBase;\n      Scorer scorer;\n\n      @Override\n      protected void doSetNextReader(LeafReaderContext context)\n          throws IOException {\n        super.doSetNextReader(context);\n        docBase = context.docBase;\n      }\n\n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.COMPLETE;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        final float actualScore = scorer.score();\n        final float expectedScore = searcher.explain(bq2, docBase + doc).getValue().floatValue();\n        assertEquals(expectedScore, actualScore, 10e-5);\n        matched.set(true);\n      }\n    });\n    assertTrue(matched.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["25f698887111a682424e759ba36083180899a1fd"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"],"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["417142ff08fda9cf0b72d5133e63097a166c6458"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"25f698887111a682424e759ba36083180899a1fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"417142ff08fda9cf0b72d5133e63097a166c6458":["2dfdf766e55e943d942055d7de53c7ad6bc45283","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["25f698887111a682424e759ba36083180899a1fd"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"25f698887111a682424e759ba36083180899a1fd":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"417142ff08fda9cf0b72d5133e63097a166c6458":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}