{"path":"lucene/core/src/test/org/apache/lucene/index/TestSimpleDocValuesIndexing#testDocValuesSimple().mjava","commits":[{"id":"55d38708477d49511977195bad066d9ced001005","date":1353348143,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSimpleDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.leaves().size());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad7de846867bd14c63f9dd19df082f72c5ea9c54","date":1355517454,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSimpleDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSimpleDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Assume.assumeTrue(_TestUtil.canUseSimpleDV());\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.leaves().size());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    NumericDocValues docValues = getOnlySegmentReader(reader).getNumericDocValues(\"docId\");\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, docValues.get(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.leaves().size());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSimpleDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSimpleDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.leaves().size());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    NumericDocValues docValues = getOnlySegmentReader(reader).getNumericDocValues(\"docId\");\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, docValues.get(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Assume.assumeTrue(_TestUtil.canUseSimpleDV());\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.leaves().size());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    NumericDocValues docValues = getOnlySegmentReader(reader).getNumericDocValues(\"docId\");\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, docValues.get(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b156d846032fbeed5bbb6c45481d6dcab2339ec6","date":1358288319,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSimpleDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":null,"sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      doc.add(new PackedLongDocValuesField(\"docId\", i));\n      doc.add(new TextField(\"docId\", \"\" + i, Field.Store.NO));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    DirectoryReader reader = DirectoryReader.open(dir, 1);\n    assertEquals(1, reader.leaves().size());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    NumericDocValues docValues = getOnlySegmentReader(reader).getNumericDocValues(\"docId\");\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, docValues.get(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad7de846867bd14c63f9dd19df082f72c5ea9c54":["55d38708477d49511977195bad066d9ced001005"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["ad7de846867bd14c63f9dd19df082f72c5ea9c54"],"55d38708477d49511977195bad066d9ced001005":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b156d846032fbeed5bbb6c45481d6dcab2339ec6":["0837ab0472feecb3a54260729d845f839e1cbd72"]},"commit2Childs":{"ad7de846867bd14c63f9dd19df082f72c5ea9c54":["0837ab0472feecb3a54260729d845f839e1cbd72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55d38708477d49511977195bad066d9ced001005","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0837ab0472feecb3a54260729d845f839e1cbd72":["b156d846032fbeed5bbb6c45481d6dcab2339ec6"],"55d38708477d49511977195bad066d9ced001005":["ad7de846867bd14c63f9dd19df082f72c5ea9c54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b156d846032fbeed5bbb6c45481d6dcab2339ec6":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b156d846032fbeed5bbb6c45481d6dcab2339ec6"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}