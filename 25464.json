{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#insertBalanced(String[],char[],int,int).mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#insertBalanced(String[],char[],int,int).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#insertBalanced(String[],char[],int,int).mjava","sourceNew":"  /**\n   * Recursively insert the median first and then the median of the lower and\n   * upper halves, and so on in order to get a balanced tree. The array of keys\n   * is assumed to be sorted in ascending order.\n   */\n  protected void insertBalanced(String[] k, char[] v, int offset, int n) {\n    int m;\n    if (n < 1) {\n      return;\n    }\n    m = n >> 1;\n\n    insert(k[m + offset], v[m + offset]);\n    insertBalanced(k, v, offset, m);\n\n    insertBalanced(k, v, offset + m + 1, n - m - 1);\n  }\n\n","sourceOld":"  /**\n   * Recursively insert the median first and then the median of the lower and\n   * upper halves, and so on in order to get a balanced tree. The array of keys\n   * is assumed to be sorted in ascending order.\n   */\n  protected void insertBalanced(String[] k, char[] v, int offset, int n) {\n    int m;\n    if (n < 1) {\n      return;\n    }\n    m = n >> 1;\n\n    insert(k[m + offset], v[m + offset]);\n    insertBalanced(k, v, offset, m);\n\n    insertBalanced(k, v, offset + m + 1, n - m - 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#insertBalanced(String[],char[],int,int).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#insertBalanced(String[],char[],int,int).mjava","sourceNew":"  /**\n   * Recursively insert the median first and then the median of the lower and\n   * upper halves, and so on in order to get a balanced tree. The array of keys\n   * is assumed to be sorted in ascending order.\n   */\n  protected void insertBalanced(String[] k, char[] v, int offset, int n) {\n    int m;\n    if (n < 1) {\n      return;\n    }\n    m = n >> 1;\n\n    insert(k[m + offset], v[m + offset]);\n    insertBalanced(k, v, offset, m);\n\n    insertBalanced(k, v, offset + m + 1, n - m - 1);\n  }\n\n","sourceOld":"  /**\n   * Recursively insert the median first and then the median of the lower and\n   * upper halves, and so on in order to get a balanced tree. The array of keys\n   * is assumed to be sorted in ascending order.\n   */\n  protected void insertBalanced(String[] k, char[] v, int offset, int n) {\n    int m;\n    if (n < 1) {\n      return;\n    }\n    m = n >> 1;\n\n    insert(k[m + offset], v[m + offset]);\n    insertBalanced(k, v, offset, m);\n\n    insertBalanced(k, v, offset + m + 1, n - m - 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}