{"path":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#updateFST(SortedMap[String,Double]).mjava","commits":[{"id":"45ae8f6354b0826d27014deff71fe330604a9783","date":1378195819,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#updateFST(SortedMap[String,Double]).mjava","pathOld":"/dev/null","sourceNew":"  private void updateFST(SortedMap<String,Double> weights) throws IOException {\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> fstBuilder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n    BytesRef scratchBytes = new BytesRef();\n    IntsRef scratchInts = new IntsRef();\n    for (Map.Entry<String,Double> entry : weights.entrySet()) {\n      scratchBytes.copyChars(entry.getKey());\n      fstBuilder.add(Util.toIntsRef(scratchBytes, scratchInts), entry\n          .getValue().longValue());\n    }\n    fst = fstBuilder.finish();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#updateFST(SortedMap[String,Double]).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#updateFST(SortedMap[String,Double]).mjava","sourceNew":"  private void updateFST(SortedMap<String,Double> weights) throws IOException {\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> fstBuilder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n    BytesRefBuilder scratchBytes = new BytesRefBuilder();\n    IntsRefBuilder scratchInts = new IntsRefBuilder();\n    for (Map.Entry<String,Double> entry : weights.entrySet()) {\n      scratchBytes.copyChars(entry.getKey());\n      fstBuilder.add(Util.toIntsRef(scratchBytes.get(), scratchInts), entry\n          .getValue().longValue());\n    }\n    fst = fstBuilder.finish();\n  }\n\n","sourceOld":"  private void updateFST(SortedMap<String,Double> weights) throws IOException {\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> fstBuilder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n    BytesRef scratchBytes = new BytesRef();\n    IntsRef scratchInts = new IntsRef();\n    for (Map.Entry<String,Double> entry : weights.entrySet()) {\n      scratchBytes.copyChars(entry.getKey());\n      fstBuilder.add(Util.toIntsRef(scratchBytes, scratchInts), entry\n          .getValue().longValue());\n    }\n    fst = fstBuilder.finish();\n  }\n\n","bugFix":["45ae8f6354b0826d27014deff71fe330604a9783"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e9c8ade373b2cc85c2a51c4f5961bb0695cc44","date":1415781486,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#updateFST(SortedMap[String,Double]).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#updateFST(SortedMap[String,Double]).mjava","sourceNew":"  private void updateFST(SortedMap<String, Double> weights) throws IOException {\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> fstBuilder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n    BytesRefBuilder scratchBytes = new BytesRefBuilder();\n    IntsRefBuilder scratchInts = new IntsRefBuilder();\n    for (Map.Entry<String, Double> entry : weights.entrySet()) {\n      scratchBytes.copyChars(entry.getKey());\n      fstBuilder.add(Util.toIntsRef(scratchBytes.get(), scratchInts), entry\n          .getValue().longValue());\n    }\n    fst = fstBuilder.finish();\n  }\n\n","sourceOld":"  private void updateFST(SortedMap<String,Double> weights) throws IOException {\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> fstBuilder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n    BytesRefBuilder scratchBytes = new BytesRefBuilder();\n    IntsRefBuilder scratchInts = new IntsRefBuilder();\n    for (Map.Entry<String,Double> entry : weights.entrySet()) {\n      scratchBytes.copyChars(entry.getKey());\n      fstBuilder.add(Util.toIntsRef(scratchBytes.get(), scratchInts), entry\n          .getValue().longValue());\n    }\n    fst = fstBuilder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"360ff513ddb24a30ffa2111a3ef0f91038803100","date":1430403123,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#updateFST(SortedMap[String,Double]).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#updateFST(SortedMap[String,Double]).mjava","sourceNew":"  private void updateFST(SortedMap<String, Double> weights) throws IOException {\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> fstBuilder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n    BytesRefBuilder scratchBytes = new BytesRefBuilder();\n    IntsRefBuilder scratchInts = new IntsRefBuilder();\n    for (Map.Entry<String, Double> entry : weights.entrySet()) {\n      scratchBytes.copyChars(entry.getKey());\n      fstBuilder.add(Util.toIntsRef(scratchBytes.get(), scratchInts), entry\n              .getValue().longValue());\n    }\n    fst = fstBuilder.finish();\n  }\n\n","sourceOld":"  private void updateFST(SortedMap<String, Double> weights) throws IOException {\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> fstBuilder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n    BytesRefBuilder scratchBytes = new BytesRefBuilder();\n    IntsRefBuilder scratchInts = new IntsRefBuilder();\n    for (Map.Entry<String, Double> entry : weights.entrySet()) {\n      scratchBytes.copyChars(entry.getKey());\n      fstBuilder.add(Util.toIntsRef(scratchBytes.get(), scratchInts), entry\n          .getValue().longValue());\n    }\n    fst = fstBuilder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#updateFST(SortedMap[String,Double]).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#updateFST(SortedMap[String,Double]).mjava","sourceNew":"  private void updateFST(SortedMap<String, Double> weights) throws IOException {\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    FSTCompiler<Long> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE1, outputs);\n    BytesRefBuilder scratchBytes = new BytesRefBuilder();\n    IntsRefBuilder scratchInts = new IntsRefBuilder();\n    for (Map.Entry<String, Double> entry : weights.entrySet()) {\n      scratchBytes.copyChars(entry.getKey());\n      fstCompiler.add(Util.toIntsRef(scratchBytes.get(), scratchInts), entry\n              .getValue().longValue());\n    }\n    fst = fstCompiler.compile();\n  }\n\n","sourceOld":"  private void updateFST(SortedMap<String, Double> weights) throws IOException {\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> fstBuilder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n    BytesRefBuilder scratchBytes = new BytesRefBuilder();\n    IntsRefBuilder scratchInts = new IntsRefBuilder();\n    for (Map.Entry<String, Double> entry : weights.entrySet()) {\n      scratchBytes.copyChars(entry.getKey());\n      fstBuilder.add(Util.toIntsRef(scratchBytes.get(), scratchInts), entry\n              .getValue().longValue());\n    }\n    fst = fstBuilder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#updateFST(SortedMap[String,Double]).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#updateFST(SortedMap[String,Double]).mjava","sourceNew":"  private void updateFST(SortedMap<String, Double> weights) throws IOException {\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    FSTCompiler<Long> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE1, outputs);\n    BytesRefBuilder scratchBytes = new BytesRefBuilder();\n    IntsRefBuilder scratchInts = new IntsRefBuilder();\n    for (Map.Entry<String, Double> entry : weights.entrySet()) {\n      scratchBytes.copyChars(entry.getKey());\n      fstCompiler.add(Util.toIntsRef(scratchBytes.get(), scratchInts), entry\n              .getValue().longValue());\n    }\n    fst = fstCompiler.compile();\n  }\n\n","sourceOld":"  private void updateFST(SortedMap<String, Double> weights) throws IOException {\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> fstBuilder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n    BytesRefBuilder scratchBytes = new BytesRefBuilder();\n    IntsRefBuilder scratchInts = new IntsRefBuilder();\n    for (Map.Entry<String, Double> entry : weights.entrySet()) {\n      scratchBytes.copyChars(entry.getKey());\n      fstBuilder.add(Util.toIntsRef(scratchBytes.get(), scratchInts), entry\n              .getValue().longValue());\n    }\n    fst = fstBuilder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7e9c8ade373b2cc85c2a51c4f5961bb0695cc44":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["45ae8f6354b0826d27014deff71fe330604a9783"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["360ff513ddb24a30ffa2111a3ef0f91038803100","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["360ff513ddb24a30ffa2111a3ef0f91038803100"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"360ff513ddb24a30ffa2111a3ef0f91038803100":["e7e9c8ade373b2cc85c2a51c4f5961bb0695cc44"],"45ae8f6354b0826d27014deff71fe330604a9783":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e7e9c8ade373b2cc85c2a51c4f5961bb0695cc44":["360ff513ddb24a30ffa2111a3ef0f91038803100"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["45ae8f6354b0826d27014deff71fe330604a9783"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["e7e9c8ade373b2cc85c2a51c4f5961bb0695cc44"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"45ae8f6354b0826d27014deff71fe330604a9783":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"360ff513ddb24a30ffa2111a3ef0f91038803100":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}