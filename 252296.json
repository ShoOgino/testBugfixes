{"path":"lucene/core/src/java/org/apache/lucene/search/FieldComparator#compareBottom(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator#compareBottom(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator#compareBottom(int).mjava","sourceNew":"  /**\n   * Compare the bottom of the queue with doc.  This will\n   * only invoked after setBottom has been called.  This\n   * should return the same result as {@link\n   * #compare(int,int)}} as if bottom were slot1 and the new\n   * document were slot 2.\n   *    \n   * <p>For a search that hits many results, this method\n   * will be the hotspot (invoked by far the most\n   * frequently).</p>\n   * \n   * @param doc that was hit\n   * @return any N < 0 if the doc's value is sorted after\n   * the bottom entry (not competitive), any N > 0 if the\n   * doc's value is sorted before the bottom entry and 0 if\n   * they are equal.\n   */\n  public abstract int compareBottom(int doc) throws IOException;\n\n","sourceOld":"  /**\n   * Compare the bottom of the queue with doc.  This will\n   * only invoked after setBottom has been called.  This\n   * should return the same result as {@link\n   * #compare(int,int)}} as if bottom were slot1 and the new\n   * document were slot 2.\n   *    \n   * <p>For a search that hits many results, this method\n   * will be the hotspot (invoked by far the most\n   * frequently).</p>\n   * \n   * @param doc that was hit\n   * @return any N < 0 if the doc's value is sorted after\n   * the bottom entry (not competitive), any N > 0 if the\n   * doc's value is sorted before the bottom entry and 0 if\n   * they are equal.\n   */\n  public abstract int compareBottom(int doc) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7615b855702e008d91a95a2578bf05d27372f599","date":1389802891,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator#compareBottom(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator#compareBottom(int).mjava","sourceNew":"  /**\n   * Compare the bottom of the queue with this doc.  This will\n   * only invoked after setBottom has been called.  This\n   * should return the same result as {@link\n   * #compare(int,int)}} as if bottom were slot1 and the new\n   * document were slot 2.\n   *    \n   * <p>For a search that hits many results, this method\n   * will be the hotspot (invoked by far the most\n   * frequently).</p>\n   * \n   * @param doc that was hit\n   * @return any N < 0 if the doc's value is sorted after\n   * the bottom entry (not competitive), any N > 0 if the\n   * doc's value is sorted before the bottom entry and 0 if\n   * they are equal.\n   */\n  public abstract int compareBottom(int doc) throws IOException;\n\n","sourceOld":"  /**\n   * Compare the bottom of the queue with doc.  This will\n   * only invoked after setBottom has been called.  This\n   * should return the same result as {@link\n   * #compare(int,int)}} as if bottom were slot1 and the new\n   * document were slot 2.\n   *    \n   * <p>For a search that hits many results, this method\n   * will be the hotspot (invoked by far the most\n   * frequently).</p>\n   * \n   * @param doc that was hit\n   * @return any N < 0 if the doc's value is sorted after\n   * the bottom entry (not competitive), any N > 0 if the\n   * doc's value is sorted before the bottom entry and 0 if\n   * they are equal.\n   */\n  public abstract int compareBottom(int doc) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27ab7b234eab0cbc020836989b96ed430e1065bb","date":1389894025,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator#compareBottom(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator#compareBottom(int).mjava","sourceNew":"  /**\n   * Compare the bottom of the queue with this doc.  This will\n   * only invoked after setBottom has been called.  This\n   * should return the same result as {@link\n   * #compare(int,int)}} as if bottom were slot1 and the new\n   * document were slot 2.\n   *    \n   * <p>For a search that hits many results, this method\n   * will be the hotspot (invoked by far the most\n   * frequently).</p>\n   * \n   * @param doc that was hit\n   * @return any N < 0 if the doc's value is sorted after\n   * the bottom entry (not competitive), any N > 0 if the\n   * doc's value is sorted before the bottom entry and 0 if\n   * they are equal.\n   */\n  public abstract int compareBottom(int doc) throws IOException;\n\n","sourceOld":"  /**\n   * Compare the bottom of the queue with doc.  This will\n   * only invoked after setBottom has been called.  This\n   * should return the same result as {@link\n   * #compare(int,int)}} as if bottom were slot1 and the new\n   * document were slot 2.\n   *    \n   * <p>For a search that hits many results, this method\n   * will be the hotspot (invoked by far the most\n   * frequently).</p>\n   * \n   * @param doc that was hit\n   * @return any N < 0 if the doc's value is sorted after\n   * the bottom entry (not competitive), any N > 0 if the\n   * doc's value is sorted before the bottom entry and 0 if\n   * they are equal.\n   */\n  public abstract int compareBottom(int doc) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1eb427f2c6beed80d1724555fc1db003ccf3030","date":1417137397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator#compareBottom(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator#compareBottom(int).mjava","sourceNew":"  /**\n   * Compare the bottom of the queue with this doc.  This will\n   * only invoked after setBottom has been called.  This\n   * should return the same result as {@link\n   * #compare(int,int)}} as if bottom were slot1 and the new\n   * document were slot 2.\n   *    \n   * <p>For a search that hits many results, this method\n   * will be the hotspot (invoked by far the most\n   * frequently).</p>\n   * \n   * @param doc that was hit\n   * @return any {@code N < 0} if the doc's value is sorted after\n   * the bottom entry (not competitive), any {@code N > 0} if the\n   * doc's value is sorted before the bottom entry and {@code 0} if\n   * they are equal.\n   */\n  public abstract int compareBottom(int doc) throws IOException;\n\n","sourceOld":"  /**\n   * Compare the bottom of the queue with this doc.  This will\n   * only invoked after setBottom has been called.  This\n   * should return the same result as {@link\n   * #compare(int,int)}} as if bottom were slot1 and the new\n   * document were slot 2.\n   *    \n   * <p>For a search that hits many results, this method\n   * will be the hotspot (invoked by far the most\n   * frequently).</p>\n   * \n   * @param doc that was hit\n   * @return any N < 0 if the doc's value is sorted after\n   * the bottom entry (not competitive), any N > 0 if the\n   * doc's value is sorted before the bottom entry and 0 if\n   * they are equal.\n   */\n  public abstract int compareBottom(int doc) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"901e951cec2e6af4e503209a6721c8834db23279","date":1420556599,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LeafFieldComparator#compareBottom(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator#compareBottom(int).mjava","sourceNew":"  /**\n   * Compare the bottom of the queue with this doc.  This will\n   * only invoked after setBottom has been called.  This\n   * should return the same result as {@link\n   * FieldComparator#compare(int,int)}} as if bottom were slot1 and the new\n   * document were slot 2.\n   *    \n   * <p>For a search that hits many results, this method\n   * will be the hotspot (invoked by far the most\n   * frequently).</p>\n   * \n   * @param doc that was hit\n   * @return any {@code N < 0} if the doc's value is sorted after\n   * the bottom entry (not competitive), any {@code N > 0} if the\n   * doc's value is sorted before the bottom entry and {@code 0} if\n   * they are equal.\n   */\n  int compareBottom(int doc) throws IOException;\n\n","sourceOld":"  /**\n   * Compare the bottom of the queue with this doc.  This will\n   * only invoked after setBottom has been called.  This\n   * should return the same result as {@link\n   * #compare(int,int)}} as if bottom were slot1 and the new\n   * document were slot 2.\n   *    \n   * <p>For a search that hits many results, this method\n   * will be the hotspot (invoked by far the most\n   * frequently).</p>\n   * \n   * @param doc that was hit\n   * @return any {@code N < 0} if the doc's value is sorted after\n   * the bottom entry (not competitive), any {@code N > 0} if the\n   * doc's value is sorted before the bottom entry and {@code 0} if\n   * they are equal.\n   */\n  public abstract int compareBottom(int doc) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7615b855702e008d91a95a2578bf05d27372f599"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7615b855702e008d91a95a2578bf05d27372f599":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"901e951cec2e6af4e503209a6721c8834db23279":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["901e951cec2e6af4e503209a6721c8834db23279"]},"commit2Childs":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["901e951cec2e6af4e503209a6721c8834db23279"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["27ab7b234eab0cbc020836989b96ed430e1065bb","7615b855702e008d91a95a2578bf05d27372f599"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7615b855702e008d91a95a2578bf05d27372f599":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"901e951cec2e6af4e503209a6721c8834db23279":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}