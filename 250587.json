{"path":"modules/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#setNextReader(AtomicReaderContext).mjava","commits":[{"id":"369f44b665973d5aa5fc7d0f2a75ffad475d21ee","date":1331157468,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#setNextReader(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    public void setNextReader(AtomicReaderContext context) throws IOException {\n      if (segmentFacetCounts != null) {\n        segmentResults.add(createSegmentResult());\n      }\n\n      reuse = null;\n      groupFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      facetFieldDocTermOrds = FieldCache.DEFAULT.getDocTermOrds(context.reader(), facetField);\n      facetOrdTermsEnum = facetFieldDocTermOrds.getOrdTermsEnum(context.reader());\n      // [facetFieldDocTermOrds.numTerms() + 1] for all possible facet values and docs not containing facet field\n      segmentFacetCounts = new int[facetFieldDocTermOrds.numTerms() + 1];\n      segmentTotalCount = 0;\n\n      segmentGroupedFacetHits.clear();\n      for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n        int groupOrd = groupFieldTermsIndex.binarySearchLookup(groupedFacetHit.groupValue, spare);\n        if (groupOrd < 0) {\n          continue;\n        }\n\n        int facetOrd;\n        if (groupedFacetHit.facetValue != null) {\n          if (!facetOrdTermsEnum.seekExact(groupedFacetHit.facetValue, true)) {\n            continue;\n          }\n          facetOrd = (int) facetOrdTermsEnum.ord();\n        } else {\n          facetOrd = facetFieldDocTermOrds.numTerms();\n        }\n\n        // (facetFieldDocTermOrds.numTerms() + 1) for all possible facet values and docs not containing facet field\n        int segmentGroupedFacetsIndex = (groupOrd * (facetFieldDocTermOrds.numTerms() + 1)) + facetOrd;\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n      }\n\n      if (facetPrefix != null) {\n        TermsEnum.SeekStatus seekStatus = facetOrdTermsEnum.seekCeil(facetPrefix, true);\n        if (seekStatus != TermsEnum.SeekStatus.END) {\n          startFacetOrd = (int) facetOrdTermsEnum.ord();\n        } else {\n          startFacetOrd = 0;\n          endFacetOrd = 0;\n          return;\n        }\n\n        BytesRef facetEndPrefix = BytesRef.deepCopyOf(facetPrefix);\n        facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n        seekStatus = facetOrdTermsEnum.seekCeil(facetEndPrefix, true);\n        if (seekStatus != TermsEnum.SeekStatus.END) {\n          endFacetOrd = (int) facetOrdTermsEnum.ord();\n        } else {\n          endFacetOrd = facetFieldDocTermOrds.numTerms(); // Don't include null...\n        }\n      } else {\n        startFacetOrd = 0;\n        endFacetOrd = facetFieldDocTermOrds.numTerms() + 1;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","0af46d298d8d31b80331276f103009ca4bc08bc2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#setNextReader(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    public void setNextReader(AtomicReaderContext context) throws IOException {\n      if (segmentFacetCounts != null) {\n        segmentResults.add(createSegmentResult());\n      }\n\n      reuse = null;\n      groupFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      facetFieldDocTermOrds = FieldCache.DEFAULT.getDocTermOrds(context.reader(), facetField);\n      facetOrdTermsEnum = facetFieldDocTermOrds.getOrdTermsEnum(context.reader());\n      // [facetFieldDocTermOrds.numTerms() + 1] for all possible facet values and docs not containing facet field\n      segmentFacetCounts = new int[facetFieldDocTermOrds.numTerms() + 1];\n      segmentTotalCount = 0;\n\n      segmentGroupedFacetHits.clear();\n      for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n        int groupOrd = groupFieldTermsIndex.binarySearchLookup(groupedFacetHit.groupValue, spare);\n        if (groupOrd < 0) {\n          continue;\n        }\n\n        int facetOrd;\n        if (groupedFacetHit.facetValue != null) {\n          if (!facetOrdTermsEnum.seekExact(groupedFacetHit.facetValue, true)) {\n            continue;\n          }\n          facetOrd = (int) facetOrdTermsEnum.ord();\n        } else {\n          facetOrd = facetFieldDocTermOrds.numTerms();\n        }\n\n        // (facetFieldDocTermOrds.numTerms() + 1) for all possible facet values and docs not containing facet field\n        int segmentGroupedFacetsIndex = (groupOrd * (facetFieldDocTermOrds.numTerms() + 1)) + facetOrd;\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n      }\n\n      if (facetPrefix != null) {\n        TermsEnum.SeekStatus seekStatus = facetOrdTermsEnum.seekCeil(facetPrefix, true);\n        if (seekStatus != TermsEnum.SeekStatus.END) {\n          startFacetOrd = (int) facetOrdTermsEnum.ord();\n        } else {\n          startFacetOrd = 0;\n          endFacetOrd = 0;\n          return;\n        }\n\n        BytesRef facetEndPrefix = BytesRef.deepCopyOf(facetPrefix);\n        facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n        seekStatus = facetOrdTermsEnum.seekCeil(facetEndPrefix, true);\n        if (seekStatus != TermsEnum.SeekStatus.END) {\n          endFacetOrd = (int) facetOrdTermsEnum.ord();\n        } else {\n          endFacetOrd = facetFieldDocTermOrds.numTerms(); // Don't include null...\n        }\n      } else {\n        startFacetOrd = 0;\n        endFacetOrd = facetFieldDocTermOrds.numTerms() + 1;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0af46d298d8d31b80331276f103009ca4bc08bc2","date":1332263105,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#setNextReader(AtomicReaderContext).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#setNextReader(AtomicReaderContext).mjava","sourceNew":"    public void setNextReader(AtomicReaderContext context) throws IOException {\n      if (segmentFacetCounts != null) {\n        segmentResults.add(createSegmentResult());\n      }\n\n      reuse = null;\n      groupFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      facetFieldDocTermOrds = FieldCache.DEFAULT.getDocTermOrds(context.reader(), facetField);\n      facetOrdTermsEnum = facetFieldDocTermOrds.getOrdTermsEnum(context.reader());\n      // [facetFieldDocTermOrds.numTerms() + 1] for all possible facet values and docs not containing facet field\n      segmentFacetCounts = new int[facetFieldDocTermOrds.numTerms() + 1];\n      segmentTotalCount = 0;\n\n      segmentGroupedFacetHits.clear();\n      for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n        int groupOrd = groupFieldTermsIndex.binarySearchLookup(groupedFacetHit.groupValue, spare);\n        if (groupOrd < 0) {\n          continue;\n        }\n\n        int facetOrd;\n        if (groupedFacetHit.facetValue != null) {\n          if (facetOrdTermsEnum == null || !facetOrdTermsEnum.seekExact(groupedFacetHit.facetValue, true)) {\n            continue;\n          }\n          facetOrd = (int) facetOrdTermsEnum.ord();\n        } else {\n          facetOrd = facetFieldDocTermOrds.numTerms();\n        }\n\n        // (facetFieldDocTermOrds.numTerms() + 1) for all possible facet values and docs not containing facet field\n        int segmentGroupedFacetsIndex = (groupOrd * (facetFieldDocTermOrds.numTerms() + 1)) + facetOrd;\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n      }\n\n      if (facetPrefix != null) {\n        TermsEnum.SeekStatus seekStatus;\n        if (facetOrdTermsEnum != null) {\n          seekStatus = facetOrdTermsEnum.seekCeil(facetPrefix, true);\n        } else {\n          seekStatus = TermsEnum.SeekStatus.END;\n        }\n\n        if (seekStatus != TermsEnum.SeekStatus.END) {\n          startFacetOrd = (int) facetOrdTermsEnum.ord();\n        } else {\n          startFacetOrd = 0;\n          endFacetOrd = 0;\n          return;\n        }\n\n        BytesRef facetEndPrefix = BytesRef.deepCopyOf(facetPrefix);\n        facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n        seekStatus = facetOrdTermsEnum.seekCeil(facetEndPrefix, true);\n        if (seekStatus != TermsEnum.SeekStatus.END) {\n          endFacetOrd = (int) facetOrdTermsEnum.ord();\n        } else {\n          endFacetOrd = facetFieldDocTermOrds.numTerms(); // Don't include null...\n        }\n      } else {\n        startFacetOrd = 0;\n        endFacetOrd = facetFieldDocTermOrds.numTerms() + 1;\n      }\n    }\n\n","sourceOld":"    public void setNextReader(AtomicReaderContext context) throws IOException {\n      if (segmentFacetCounts != null) {\n        segmentResults.add(createSegmentResult());\n      }\n\n      reuse = null;\n      groupFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      facetFieldDocTermOrds = FieldCache.DEFAULT.getDocTermOrds(context.reader(), facetField);\n      facetOrdTermsEnum = facetFieldDocTermOrds.getOrdTermsEnum(context.reader());\n      // [facetFieldDocTermOrds.numTerms() + 1] for all possible facet values and docs not containing facet field\n      segmentFacetCounts = new int[facetFieldDocTermOrds.numTerms() + 1];\n      segmentTotalCount = 0;\n\n      segmentGroupedFacetHits.clear();\n      for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n        int groupOrd = groupFieldTermsIndex.binarySearchLookup(groupedFacetHit.groupValue, spare);\n        if (groupOrd < 0) {\n          continue;\n        }\n\n        int facetOrd;\n        if (groupedFacetHit.facetValue != null) {\n          if (!facetOrdTermsEnum.seekExact(groupedFacetHit.facetValue, true)) {\n            continue;\n          }\n          facetOrd = (int) facetOrdTermsEnum.ord();\n        } else {\n          facetOrd = facetFieldDocTermOrds.numTerms();\n        }\n\n        // (facetFieldDocTermOrds.numTerms() + 1) for all possible facet values and docs not containing facet field\n        int segmentGroupedFacetsIndex = (groupOrd * (facetFieldDocTermOrds.numTerms() + 1)) + facetOrd;\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n      }\n\n      if (facetPrefix != null) {\n        TermsEnum.SeekStatus seekStatus = facetOrdTermsEnum.seekCeil(facetPrefix, true);\n        if (seekStatus != TermsEnum.SeekStatus.END) {\n          startFacetOrd = (int) facetOrdTermsEnum.ord();\n        } else {\n          startFacetOrd = 0;\n          endFacetOrd = 0;\n          return;\n        }\n\n        BytesRef facetEndPrefix = BytesRef.deepCopyOf(facetPrefix);\n        facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n        seekStatus = facetOrdTermsEnum.seekCeil(facetEndPrefix, true);\n        if (seekStatus != TermsEnum.SeekStatus.END) {\n          endFacetOrd = (int) facetOrdTermsEnum.ord();\n        } else {\n          endFacetOrd = facetFieldDocTermOrds.numTerms(); // Don't include null...\n        }\n      } else {\n        startFacetOrd = 0;\n        endFacetOrd = facetFieldDocTermOrds.numTerms() + 1;\n      }\n    }\n\n","bugFix":["369f44b665973d5aa5fc7d0f2a75ffad475d21ee"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#setNextReader(AtomicReaderContext).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector.MV#setNextReader(AtomicReaderContext).mjava","sourceNew":"    public void setNextReader(AtomicReaderContext context) throws IOException {\n      if (segmentFacetCounts != null) {\n        segmentResults.add(createSegmentResult());\n      }\n\n      reuse = null;\n      groupFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      facetFieldDocTermOrds = FieldCache.DEFAULT.getDocTermOrds(context.reader(), facetField);\n      facetOrdTermsEnum = facetFieldDocTermOrds.getOrdTermsEnum(context.reader());\n      // [facetFieldDocTermOrds.numTerms() + 1] for all possible facet values and docs not containing facet field\n      segmentFacetCounts = new int[facetFieldDocTermOrds.numTerms() + 1];\n      segmentTotalCount = 0;\n\n      segmentGroupedFacetHits.clear();\n      for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n        int groupOrd = groupFieldTermsIndex.binarySearchLookup(groupedFacetHit.groupValue, spare);\n        if (groupOrd < 0) {\n          continue;\n        }\n\n        int facetOrd;\n        if (groupedFacetHit.facetValue != null) {\n          if (facetOrdTermsEnum == null || !facetOrdTermsEnum.seekExact(groupedFacetHit.facetValue, true)) {\n            continue;\n          }\n          facetOrd = (int) facetOrdTermsEnum.ord();\n        } else {\n          facetOrd = facetFieldDocTermOrds.numTerms();\n        }\n\n        // (facetFieldDocTermOrds.numTerms() + 1) for all possible facet values and docs not containing facet field\n        int segmentGroupedFacetsIndex = (groupOrd * (facetFieldDocTermOrds.numTerms() + 1)) + facetOrd;\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n      }\n\n      if (facetPrefix != null) {\n        TermsEnum.SeekStatus seekStatus;\n        if (facetOrdTermsEnum != null) {\n          seekStatus = facetOrdTermsEnum.seekCeil(facetPrefix, true);\n        } else {\n          seekStatus = TermsEnum.SeekStatus.END;\n        }\n\n        if (seekStatus != TermsEnum.SeekStatus.END) {\n          startFacetOrd = (int) facetOrdTermsEnum.ord();\n        } else {\n          startFacetOrd = 0;\n          endFacetOrd = 0;\n          return;\n        }\n\n        BytesRef facetEndPrefix = BytesRef.deepCopyOf(facetPrefix);\n        facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n        seekStatus = facetOrdTermsEnum.seekCeil(facetEndPrefix, true);\n        if (seekStatus != TermsEnum.SeekStatus.END) {\n          endFacetOrd = (int) facetOrdTermsEnum.ord();\n        } else {\n          endFacetOrd = facetFieldDocTermOrds.numTerms(); // Don't include null...\n        }\n      } else {\n        startFacetOrd = 0;\n        endFacetOrd = facetFieldDocTermOrds.numTerms() + 1;\n      }\n    }\n\n","sourceOld":"    public void setNextReader(AtomicReaderContext context) throws IOException {\n      if (segmentFacetCounts != null) {\n        segmentResults.add(createSegmentResult());\n      }\n\n      reuse = null;\n      groupFieldTermsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      facetFieldDocTermOrds = FieldCache.DEFAULT.getDocTermOrds(context.reader(), facetField);\n      facetOrdTermsEnum = facetFieldDocTermOrds.getOrdTermsEnum(context.reader());\n      // [facetFieldDocTermOrds.numTerms() + 1] for all possible facet values and docs not containing facet field\n      segmentFacetCounts = new int[facetFieldDocTermOrds.numTerms() + 1];\n      segmentTotalCount = 0;\n\n      segmentGroupedFacetHits.clear();\n      for (GroupedFacetHit groupedFacetHit : groupedFacetHits) {\n        int groupOrd = groupFieldTermsIndex.binarySearchLookup(groupedFacetHit.groupValue, spare);\n        if (groupOrd < 0) {\n          continue;\n        }\n\n        int facetOrd;\n        if (groupedFacetHit.facetValue != null) {\n          if (facetOrdTermsEnum == null || !facetOrdTermsEnum.seekExact(groupedFacetHit.facetValue, true)) {\n            continue;\n          }\n          facetOrd = (int) facetOrdTermsEnum.ord();\n        } else {\n          facetOrd = facetFieldDocTermOrds.numTerms();\n        }\n\n        // (facetFieldDocTermOrds.numTerms() + 1) for all possible facet values and docs not containing facet field\n        int segmentGroupedFacetsIndex = (groupOrd * (facetFieldDocTermOrds.numTerms() + 1)) + facetOrd;\n        segmentGroupedFacetHits.put(segmentGroupedFacetsIndex);\n      }\n\n      if (facetPrefix != null) {\n        TermsEnum.SeekStatus seekStatus;\n        if (facetOrdTermsEnum != null) {\n          seekStatus = facetOrdTermsEnum.seekCeil(facetPrefix, true);\n        } else {\n          seekStatus = TermsEnum.SeekStatus.END;\n        }\n\n        if (seekStatus != TermsEnum.SeekStatus.END) {\n          startFacetOrd = (int) facetOrdTermsEnum.ord();\n        } else {\n          startFacetOrd = 0;\n          endFacetOrd = 0;\n          return;\n        }\n\n        BytesRef facetEndPrefix = BytesRef.deepCopyOf(facetPrefix);\n        facetEndPrefix.append(UnicodeUtil.BIG_TERM);\n        seekStatus = facetOrdTermsEnum.seekCeil(facetEndPrefix, true);\n        if (seekStatus != TermsEnum.SeekStatus.END) {\n          endFacetOrd = (int) facetOrdTermsEnum.ord();\n        } else {\n          endFacetOrd = facetFieldDocTermOrds.numTerms(); // Don't include null...\n        }\n      } else {\n        startFacetOrd = 0;\n        endFacetOrd = facetFieldDocTermOrds.numTerms() + 1;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0af46d298d8d31b80331276f103009ca4bc08bc2":["369f44b665973d5aa5fc7d0f2a75ffad475d21ee"],"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","369f44b665973d5aa5fc7d0f2a75ffad475d21ee"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0af46d298d8d31b80331276f103009ca4bc08bc2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"369f44b665973d5aa5fc7d0f2a75ffad475d21ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"0af46d298d8d31b80331276f103009ca4bc08bc2":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","369f44b665973d5aa5fc7d0f2a75ffad475d21ee"],"369f44b665973d5aa5fc7d0f2a75ffad475d21ee":["0af46d298d8d31b80331276f103009ca4bc08bc2","38e3b736c7ca086d61b7dbb841c905ee115490da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}