{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/RollupStream#read().mjava","commits":[{"id":"91814ce09be68efd0626969632e79ae47d8876d4","date":1425951537,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/RollupStream#read().mjava","pathOld":"/dev/null","sourceNew":"  public Tuple read() throws IOException {\n\n    while(true) {\n      Tuple tuple = tupleStream.read();\n      if(tuple.EOF) {\n        if(!finished) {\n          Map map = new HashMap();\n          if(currentMetrics != null) {\n            List<Double> metricValues = new ArrayList();\n            List<String> metricNames = new ArrayList();\n            for (Metric metric : currentMetrics) {\n              metricNames.add(metric.getName());\n              metricValues.add(metric.getValue());\n            }\n            map.put(\"buckets\", currentKey.toString());\n            map.put(\"metricNames\", metricNames);\n            map.put(\"metricValues\", metricValues);\n            Tuple t = new Tuple(map);\n            tupleStream.pushBack(tuple);\n            finished = true;\n            return t;\n          } else {\n            return tuple;\n          }\n        } else {\n          return tuple;\n        }\n      }\n\n      String[] bucketValues = new String[buckets.length];\n      for(int i=0; i<buckets.length; i++) {\n        bucketValues[i] = buckets[i].getBucketValue(tuple);\n      }\n\n      HashKey hashKey = new HashKey(bucketValues);\n\n      if(hashKey.equals(currentKey)) {\n        for(Metric bucketMetric : currentMetrics) {\n          bucketMetric.update(tuple);\n        }\n      } else {\n        Tuple t = null;\n        if(currentMetrics != null) {\n          Map map = new HashMap();\n          List<Double> metricValues = new ArrayList();\n          List<String> metricNames = new ArrayList();\n          for(Metric metric : currentMetrics) {\n            metricNames.add(metric.getName());\n            metricValues.add(metric.getValue());\n          }\n          map.put(\"buckets\", currentKey.toString());\n          map.put(\"metricNames\", metricNames);\n          map.put(\"metricValues\", metricValues);\n          t = new Tuple(map);\n        }\n\n        currentMetrics = new Metric[metrics.length];\n        currentKey = hashKey;\n        for(int i=0; i<metrics.length; i++) {\n          Metric bucketMetric = metrics[i].newInstance();\n          bucketMetric.update(tuple);\n          currentMetrics[i]  = bucketMetric;\n        }\n\n        if(t != null) {\n          return t;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f03b407cd85abd6edd2a1fe7cab9990164aa4b","date":1427303865,"type":4,"author":"Joel Bernstein","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/RollupStream#read().mjava","sourceNew":null,"sourceOld":"  public Tuple read() throws IOException {\n\n    while(true) {\n      Tuple tuple = tupleStream.read();\n      if(tuple.EOF) {\n        if(!finished) {\n          Map map = new HashMap();\n          if(currentMetrics != null) {\n            List<Double> metricValues = new ArrayList();\n            List<String> metricNames = new ArrayList();\n            for (Metric metric : currentMetrics) {\n              metricNames.add(metric.getName());\n              metricValues.add(metric.getValue());\n            }\n            map.put(\"buckets\", currentKey.toString());\n            map.put(\"metricNames\", metricNames);\n            map.put(\"metricValues\", metricValues);\n            Tuple t = new Tuple(map);\n            tupleStream.pushBack(tuple);\n            finished = true;\n            return t;\n          } else {\n            return tuple;\n          }\n        } else {\n          return tuple;\n        }\n      }\n\n      String[] bucketValues = new String[buckets.length];\n      for(int i=0; i<buckets.length; i++) {\n        bucketValues[i] = buckets[i].getBucketValue(tuple);\n      }\n\n      HashKey hashKey = new HashKey(bucketValues);\n\n      if(hashKey.equals(currentKey)) {\n        for(Metric bucketMetric : currentMetrics) {\n          bucketMetric.update(tuple);\n        }\n      } else {\n        Tuple t = null;\n        if(currentMetrics != null) {\n          Map map = new HashMap();\n          List<Double> metricValues = new ArrayList();\n          List<String> metricNames = new ArrayList();\n          for(Metric metric : currentMetrics) {\n            metricNames.add(metric.getName());\n            metricValues.add(metric.getValue());\n          }\n          map.put(\"buckets\", currentKey.toString());\n          map.put(\"metricNames\", metricNames);\n          map.put(\"metricValues\", metricValues);\n          t = new Tuple(map);\n        }\n\n        currentMetrics = new Metric[metrics.length];\n        currentKey = hashKey;\n        for(int i=0; i<metrics.length; i++) {\n          Metric bucketMetric = metrics[i].newInstance();\n          bucketMetric.update(tuple);\n          currentMetrics[i]  = bucketMetric;\n        }\n\n        if(t != null) {\n          return t;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"42f03b407cd85abd6edd2a1fe7cab9990164aa4b":["91814ce09be68efd0626969632e79ae47d8876d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"91814ce09be68efd0626969632e79ae47d8876d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["42f03b407cd85abd6edd2a1fe7cab9990164aa4b"]},"commit2Childs":{"42f03b407cd85abd6edd2a1fe7cab9990164aa4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91814ce09be68efd0626969632e79ae47d8876d4"],"91814ce09be68efd0626969632e79ae47d8876d4":["42f03b407cd85abd6edd2a1fe7cab9990164aa4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}