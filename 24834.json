{"path":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnumBase#reset(FieldInfo,StandardTermState).mjava","commits":[{"id":"2fbe641a3ba9e8ab6b19044e4e89b979bfebbed1","date":1324025015,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnumBase#reset(FieldInfo,StandardTermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnum#reset(FieldInfo,StandardTermState,Bits).mjava","sourceNew":"    DocsEnum reset(FieldInfo fieldInfo, StandardTermState termState) throws IOException {\n      indexOmitsTF = fieldInfo.indexOptions == IndexOptions.DOCS_ONLY;\n      storePayloads = fieldInfo.storePayloads;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      assert limit > 0;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      // if (DEBUG) System.out.println(\"  sde limit=\" + limit + \" freqFP=\" + freqOffset);\n      skipped = false;\n\n      start = -1;\n      count = 0;\n      maxBufferedDocId = -1;\n      return this;\n    }\n\n","sourceOld":"    public SegmentDocsEnum reset(FieldInfo fieldInfo, StandardTermState termState, Bits liveDocs) throws IOException {\n      indexOmitsTF = fieldInfo.indexOptions == IndexOptions.DOCS_ONLY;\n      storePayloads = fieldInfo.storePayloads;\n      this.liveDocs = liveDocs;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      assert limit > 0;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      // if (DEBUG) System.out.println(\"  sde limit=\" + limit + \" freqFP=\" + freqOffset);\n\n      skipped = false;\n\n      start = -1;\n      count = 0;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnumBase#reset(FieldInfo,StandardTermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnumBase#reset(FieldInfo,StandardTermState).mjava","sourceNew":"    DocsEnum reset(FieldInfo fieldInfo, StandardTermState termState) throws IOException {\n      indexOmitsTF = fieldInfo.indexOptions == IndexOptions.DOCS_ONLY;\n      storePayloads = fieldInfo.storePayloads;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      assert limit > 0;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      // if (DEBUG) System.out.println(\"  sde limit=\" + limit + \" freqFP=\" + freqOffset);\n      skipped = false;\n\n      start = -1;\n      count = 0;\n      maxBufferedDocId = -1;\n      return this;\n    }\n\n","sourceOld":"    DocsEnum reset(FieldInfo fieldInfo, StandardTermState termState) throws IOException {\n      indexOmitsTF = fieldInfo.indexOptions == IndexOptions.DOCS_ONLY;\n      storePayloads = fieldInfo.storePayloads;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      assert limit > 0;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      // if (DEBUG) System.out.println(\"  sde limit=\" + limit + \" freqFP=\" + freqOffset);\n      skipped = false;\n\n      start = -1;\n      count = 0;\n      maxBufferedDocId = -1;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2fbe641a3ba9e8ab6b19044e4e89b979bfebbed1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["2fbe641a3ba9e8ab6b19044e4e89b979bfebbed1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2fbe641a3ba9e8ab6b19044e4e89b979bfebbed1"],"2fbe641a3ba9e8ab6b19044e4e89b979bfebbed1":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}