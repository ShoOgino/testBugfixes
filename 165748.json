{"path":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/search/index/TestIndexController#testCreateNewIndexTask().mjava","commits":[{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/search/index/TestIndexController#testCreateNewIndexTask().mjava","pathOld":"contrib/gdata-server/src/test/org/apache/lucene/gdata/search/index/TestIndexController#testCreateNewIndexTask().mjava","sourceNew":"    public void testCreateNewIndexTask() throws InterruptedException, IOException{\n        this.schema.setCommitAfterDocuments(1);\n        this.schema.setOptimizeAfterCommit(1);\n        IndexSchemaField f = new IndexSchemaField();\n        f.setName(\"myField\");\n        f.setContentType(ContentType.KEYWORD);\n        f.setPath(\"entry/id\");\n        this.schema.addSchemaField(f);\n        this.controller.initialize();\n        ServerBaseEntry e = new ServerBaseEntry();\n        e.setId(\"someId\");\n        e.setFeedId(\"someId\");\n        e.setServiceConfig(new ProvidedServiceStub());\n        CommitListener l = new CommitListener();\n        l.createLatch(1);\n        ServiceIndex sIndex = this.controller.indexerMap.get(this.schema.getName());\n        sIndex.getIndexer().registerIndexEventListener(l);\n        this.controller.fireInsertEvent(e);\n        l.waitOnLatch();      \n       \n       assertEquals(1,sIndex.getIndexer().optimized.get());\n       assertEquals(1,sIndex.getIndexer().committed.get());\n       \n       sIndex.getIndexer().removeIndexEventListener(l);\n       \n       \n       e = new ServerBaseEntry();\n       e.setId(\"someId\");\n       e.setFeedId(\"someId\");\n       e.setServiceConfig(new ProvidedServiceStub());\n       l = new CommitListener();\n       l.createLatch(1);\n        sIndex = this.controller.indexerMap.get(this.schema.getName());\n       sIndex.getIndexer().registerIndexEventListener(l);\n       this.controller.fireUpdateEvent(e);\n       l.waitOnLatch();      \n      \n      assertEquals(2,sIndex.getIndexer().optimized.get());\n      assertEquals(2,sIndex.getIndexer().committed.get());\n      \n      GDataSearcher<String> searcher = this.controller.getServiceSearcher(e.getServiceConfig());\n      List<String> results = searcher.search(new TermQuery(new Term(IndexDocument.FIELD_ENTRY_ID,\"someId\")),10,0,\"someId\");\n      assertEquals(1,results.size());\n      searcher.close();\n      \n       \n        \n    }\n\n","sourceOld":"    public void testCreateNewIndexTask() throws InterruptedException, IOException{\n        this.schema.setCommitAfterDocuments(1);\n        this.schema.setOptimizeAfterCommit(1);\n        IndexSchemaField f = new IndexSchemaField();\n        f.setName(\"myField\");\n        f.setContentType(ContentType.KEYWORD);\n        f.setPath(\"entry/id\");\n        this.schema.addSchemaField(f);\n        this.controller.initialize();\n        ServerBaseEntry e = new ServerBaseEntry();\n        e.setId(\"someId\");\n        e.setFeedId(\"someId\");\n        e.setServiceConfig(new ProvidedServiceStub());\n        CommitListener l = new CommitListener();\n        l.createLatch(1);\n        ServiceIndex sIndex = this.controller.indexerMap.get(this.schema.getName());\n        sIndex.getIndexer().registerIndexEventListener(l);\n        this.controller.fireInsertEvent(e);\n        l.waitOnLatch();      \n       \n       assertEquals(1,sIndex.getIndexer().optimized.get());\n       assertEquals(1,sIndex.getIndexer().committed.get());\n       \n       sIndex.getIndexer().removeIndexEventListener(l);\n       \n       \n       e = new ServerBaseEntry();\n       e.setId(\"someId\");\n       e.setFeedId(\"someId\");\n       e.setServiceConfig(new ProvidedServiceStub());\n       l = new CommitListener();\n       l.createLatch(1);\n        sIndex = this.controller.indexerMap.get(this.schema.getName());\n       sIndex.getIndexer().registerIndexEventListener(l);\n       this.controller.fireUpdateEvent(e);\n       l.waitOnLatch();      \n      \n      assertEquals(2,sIndex.getIndexer().optimized.get());\n      assertEquals(2,sIndex.getIndexer().committed.get());\n      \n      GDataSearcher<String> searcher = this.controller.getServiceSearcher(e.getServiceConfig());\n      List<String> results = searcher.search(new TermQuery(new Term(IndexDocument.FIELD_ENTRY_ID,\"someId\")),10,0,\"someId\");\n      assertEquals(1,results.size());\n      searcher.close();\n      \n       \n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/test/org/apache/lucene/gdata/search/index/TestIndexController#testCreateNewIndexTask().mjava","pathOld":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/search/index/TestIndexController#testCreateNewIndexTask().mjava","sourceNew":"    public void testCreateNewIndexTask() throws InterruptedException, IOException{\n        this.schema.setCommitAfterDocuments(1);\n        this.schema.setOptimizeAfterCommit(1);\n        IndexSchemaField f = new IndexSchemaField();\n        f.setName(\"myField\");\n        f.setContentType(ContentType.KEYWORD);\n        f.setPath(\"entry/id\");\n        this.schema.addSchemaField(f);\n        this.controller.initialize();\n        ServerBaseEntry e = new ServerBaseEntry();\n        e.setId(\"someId\");\n        e.setFeedId(\"someId\");\n        e.setServiceConfig(new ProvidedServiceStub());\n        CommitListener l = new CommitListener();\n        l.createLatch(1);\n        ServiceIndex sIndex = this.controller.indexerMap.get(this.schema.getName());\n        sIndex.getIndexer().registerIndexEventListener(l);\n        this.controller.fireInsertEvent(e);\n        l.waitOnLatch();      \n       \n       assertEquals(1,sIndex.getIndexer().optimized.get());\n       assertEquals(1,sIndex.getIndexer().committed.get());\n       \n       sIndex.getIndexer().removeIndexEventListener(l);\n       \n       \n       e = new ServerBaseEntry();\n       e.setId(\"someId\");\n       e.setFeedId(\"someId\");\n       e.setServiceConfig(new ProvidedServiceStub());\n       l = new CommitListener();\n       l.createLatch(1);\n        sIndex = this.controller.indexerMap.get(this.schema.getName());\n       sIndex.getIndexer().registerIndexEventListener(l);\n       this.controller.fireUpdateEvent(e);\n       l.waitOnLatch();      \n      \n      assertEquals(2,sIndex.getIndexer().optimized.get());\n      assertEquals(2,sIndex.getIndexer().committed.get());\n      \n      GDataSearcher<String> searcher = this.controller.getServiceSearcher(e.getServiceConfig());\n      List<String> results = searcher.search(new TermQuery(new Term(IndexDocument.FIELD_ENTRY_ID,\"someId\")),10,0,\"someId\");\n      assertEquals(1,results.size());\n      searcher.close();\n      \n       \n        \n    }\n\n","sourceOld":"    public void testCreateNewIndexTask() throws InterruptedException, IOException{\n        this.schema.setCommitAfterDocuments(1);\n        this.schema.setOptimizeAfterCommit(1);\n        IndexSchemaField f = new IndexSchemaField();\n        f.setName(\"myField\");\n        f.setContentType(ContentType.KEYWORD);\n        f.setPath(\"entry/id\");\n        this.schema.addSchemaField(f);\n        this.controller.initialize();\n        ServerBaseEntry e = new ServerBaseEntry();\n        e.setId(\"someId\");\n        e.setFeedId(\"someId\");\n        e.setServiceConfig(new ProvidedServiceStub());\n        CommitListener l = new CommitListener();\n        l.createLatch(1);\n        ServiceIndex sIndex = this.controller.indexerMap.get(this.schema.getName());\n        sIndex.getIndexer().registerIndexEventListener(l);\n        this.controller.fireInsertEvent(e);\n        l.waitOnLatch();      \n       \n       assertEquals(1,sIndex.getIndexer().optimized.get());\n       assertEquals(1,sIndex.getIndexer().committed.get());\n       \n       sIndex.getIndexer().removeIndexEventListener(l);\n       \n       \n       e = new ServerBaseEntry();\n       e.setId(\"someId\");\n       e.setFeedId(\"someId\");\n       e.setServiceConfig(new ProvidedServiceStub());\n       l = new CommitListener();\n       l.createLatch(1);\n        sIndex = this.controller.indexerMap.get(this.schema.getName());\n       sIndex.getIndexer().registerIndexEventListener(l);\n       this.controller.fireUpdateEvent(e);\n       l.waitOnLatch();      \n      \n      assertEquals(2,sIndex.getIndexer().optimized.get());\n      assertEquals(2,sIndex.getIndexer().committed.get());\n      \n      GDataSearcher<String> searcher = this.controller.getServiceSearcher(e.getServiceConfig());\n      List<String> results = searcher.search(new TermQuery(new Term(IndexDocument.FIELD_ENTRY_ID,\"someId\")),10,0,\"someId\");\n      assertEquals(1,results.size());\n      searcher.close();\n      \n       \n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}