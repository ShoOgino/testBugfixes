{"path":"src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","commits":[{"id":"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349","date":1224582283,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","pathOld":"/dev/null","sourceNew":"    public void write(OutputStream out) {\n      fos = new FastOutputStream(out);\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String sChecksum = params.get(CHECKSUM);\n      FileInputStream inputStream = null;\n      try {\n        long offset = -1;\n        int len = -1;\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        closeNoExp(inputStream);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["217dd2e5ec780896e70b9d4bf5ff18c0079142fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d6028dbe4a16095efe9f1651fe1a8e88d683e92","date":1224723463,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","sourceNew":"    public void write(OutputStream out) {\n      fos = new FastOutputStream(out);\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String sChecksum = params.get(CHECKSUM);\n      String sindexVersion = params.get(CMD_INDEX_VERSION);\n      if(sindexVersion != null) indexVersion = Long.parseLong(sindexVersion);\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if(indexVersion != null && (packetsWritten % 5 == 0)){\n              delPolicy.setReserveDuration(indexVersion, reserveCommitDuration);\n            }\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        closeNoExp(inputStream);\n      }\n    }\n\n","sourceOld":"    public void write(OutputStream out) {\n      fos = new FastOutputStream(out);\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String sChecksum = params.get(CHECKSUM);\n      FileInputStream inputStream = null;\n      try {\n        long offset = -1;\n        int len = -1;\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        closeNoExp(inputStream);\n      }\n    }\n\n","bugFix":null,"bugIntro":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"03ec30f231b7ee5087f02ea549665fefebf73e04","date":1224741258,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","sourceNew":"    public void write(OutputStream out) {\n      fos = new FastOutputStream(out);\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String sChecksum = params.get(CHECKSUM);\n      String sindexVersion = params.get(CMD_INDEX_VERSION);\n      if(sindexVersion != null) indexVersion = Long.parseLong(sindexVersion);\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if(indexVersion != null && (packetsWritten % 5 == 0)){\n              delPolicy.setReserveDuration(indexVersion, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        closeNoExp(inputStream);\n      }\n    }\n\n","sourceOld":"    public void write(OutputStream out) {\n      fos = new FastOutputStream(out);\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String sChecksum = params.get(CHECKSUM);\n      String sindexVersion = params.get(CMD_INDEX_VERSION);\n      if(sindexVersion != null) indexVersion = Long.parseLong(sindexVersion);\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if(indexVersion != null && (packetsWritten % 5 == 0)){\n              delPolicy.setReserveDuration(indexVersion, reserveCommitDuration);\n            }\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        closeNoExp(inputStream);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9","date":1225202752,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","sourceNew":"    public void write(OutputStream out) {\n      fos = new FastOutputStream(out);\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String sChecksum = params.get(CHECKSUM);\n      String sindexVersion = params.get(CMD_INDEX_VERSION);\n      if(sindexVersion != null) indexVersion = Long.parseLong(sindexVersion);\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          //if if is a conf file read from config diectory\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          //else read from the indexdirectory\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if(indexVersion != null && (packetsWritten % 5 == 0)){\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexVersion, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        closeNoExp(inputStream);\n      }\n    }\n\n","sourceOld":"    public void write(OutputStream out) {\n      fos = new FastOutputStream(out);\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String sChecksum = params.get(CHECKSUM);\n      String sindexVersion = params.get(CMD_INDEX_VERSION);\n      if(sindexVersion != null) indexVersion = Long.parseLong(sindexVersion);\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if(indexVersion != null && (packetsWritten % 5 == 0)){\n              delPolicy.setReserveDuration(indexVersion, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        closeNoExp(inputStream);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8620c64e323e74078214cf931e505179d14c888e","date":1225270494,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","sourceNew":"    public void write(OutputStream out) {\n      fos = new FastOutputStream(out);\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String sChecksum = params.get(CHECKSUM);\n      String sindexVersion = params.get(CMD_INDEX_VERSION);\n      if (sindexVersion != null) indexVersion = Long.parseLong(sindexVersion);\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          //if if is a conf file read from config diectory\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          //else read from the indexdirectory\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexVersion != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexVersion, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        closeNoExp(inputStream);\n      }\n    }\n\n","sourceOld":"    public void write(OutputStream out) {\n      fos = new FastOutputStream(out);\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String sChecksum = params.get(CHECKSUM);\n      String sindexVersion = params.get(CMD_INDEX_VERSION);\n      if(sindexVersion != null) indexVersion = Long.parseLong(sindexVersion);\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          //if if is a conf file read from config diectory\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          //else read from the indexdirectory\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if(indexVersion != null && (packetsWritten % 5 == 0)){\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexVersion, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        closeNoExp(inputStream);\n      }\n    }\n\n","bugFix":null,"bugIntro":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6e1afc23adf8af4aa2dfc781b02b63710546b33","date":1227622754,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","sourceNew":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sindexVersion = params.get(CMD_INDEX_VERSION);\n      if (sindexVersion != null) indexVersion = Long.parseLong(sindexVersion);\n      if (Boolean.parseBoolean(compress))  {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else  {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          //if if is a conf file read from config diectory\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          //else read from the indexdirectory\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexVersion != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexVersion, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        closeNoExp(inputStream);\n      }\n    }\n\n","sourceOld":"    public void write(OutputStream out) {\n      fos = new FastOutputStream(out);\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String sChecksum = params.get(CHECKSUM);\n      String sindexVersion = params.get(CMD_INDEX_VERSION);\n      if (sindexVersion != null) indexVersion = Long.parseLong(sindexVersion);\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          //if if is a conf file read from config diectory\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          //else read from the indexdirectory\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexVersion != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexVersion, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        closeNoExp(inputStream);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9be231d18ef58129524215a1d30331523320b744","date":1229505566,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","sourceNew":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sindexVersion = params.get(CMD_INDEX_VERSION);\n      if (sindexVersion != null) indexVersion = Long.parseLong(sindexVersion);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          //if if is a conf file read from config diectory\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          //else read from the indexdirectory\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexVersion != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexVersion, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        closeNoExp(inputStream);\n      }\n    }\n\n","sourceOld":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sindexVersion = params.get(CMD_INDEX_VERSION);\n      if (sindexVersion != null) indexVersion = Long.parseLong(sindexVersion);\n      if (Boolean.parseBoolean(compress))  {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else  {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          //if if is a conf file read from config diectory\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          //else read from the indexdirectory\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexVersion != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexVersion, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        closeNoExp(inputStream);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"217dd2e5ec780896e70b9d4bf5ff18c0079142fb","date":1241459287,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","sourceNew":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sindexVersion = params.get(CMD_INDEX_VERSION);\n      if (sindexVersion != null) indexVersion = Long.parseLong(sindexVersion);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          //if if is a conf file read from config diectory\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          //else read from the indexdirectory\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexVersion != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexVersion, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n      }\n    }\n\n","sourceOld":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sindexVersion = params.get(CMD_INDEX_VERSION);\n      if (sindexVersion != null) indexVersion = Long.parseLong(sindexVersion);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          //if if is a conf file read from config diectory\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          //else read from the indexdirectory\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexVersion != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexVersion, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        closeNoExp(inputStream);\n      }\n    }\n\n","bugFix":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","sourceNew":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sindexVersion = params.get(CMD_INDEX_VERSION);\n      if (sindexVersion != null) indexVersion = Long.parseLong(sindexVersion);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          //if if is a conf file read from config diectory\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          //else read from the indexdirectory\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexVersion != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexVersion, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n      }\n    }\n\n","sourceOld":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sindexVersion = params.get(CMD_INDEX_VERSION);\n      if (sindexVersion != null) indexVersion = Long.parseLong(sindexVersion);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          //if if is a conf file read from config diectory\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          //else read from the indexdirectory\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexVersion != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexVersion, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"03ec30f231b7ee5087f02ea549665fefebf73e04":["1d6028dbe4a16095efe9f1651fe1a8e88d683e92"],"9be231d18ef58129524215a1d30331523320b744":["c6e1afc23adf8af4aa2dfc781b02b63710546b33"],"1d6028dbe4a16095efe9f1651fe1a8e88d683e92":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"8620c64e323e74078214cf931e505179d14c888e":["6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9"],"ad94625fb8d088209f46650c8097196fec67f00c":["217dd2e5ec780896e70b9d4bf5ff18c0079142fb"],"c6e1afc23adf8af4aa2dfc781b02b63710546b33":["8620c64e323e74078214cf931e505179d14c888e"],"6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9":["03ec30f231b7ee5087f02ea549665fefebf73e04"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"217dd2e5ec780896e70b9d4bf5ff18c0079142fb":["9be231d18ef58129524215a1d30331523320b744"]},"commit2Childs":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["1d6028dbe4a16095efe9f1651fe1a8e88d683e92"],"03ec30f231b7ee5087f02ea549665fefebf73e04":["6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9"],"9be231d18ef58129524215a1d30331523320b744":["217dd2e5ec780896e70b9d4bf5ff18c0079142fb"],"1d6028dbe4a16095efe9f1651fe1a8e88d683e92":["03ec30f231b7ee5087f02ea549665fefebf73e04"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8620c64e323e74078214cf931e505179d14c888e":["c6e1afc23adf8af4aa2dfc781b02b63710546b33"],"c6e1afc23adf8af4aa2dfc781b02b63710546b33":["9be231d18ef58129524215a1d30331523320b744"],"6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9":["8620c64e323e74078214cf931e505179d14c888e"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"217dd2e5ec780896e70b9d4bf5ff18c0079142fb":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}