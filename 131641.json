{"path":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getQueries(Alias).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getQueries(Alias).mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getQueries(Alias).mjava","sourceNew":"     protected List<Query> getQueries(Alias a) throws ParseException {\n       if (a == null) return null;\n       if (a.fields.size()==0) return null;\n       List<Query> lst= new ArrayList<Query>(4);\n\n       for (String f : a.fields.keySet()) {\n         this.field = f;\n         Query sub = getQuery();\n         if (sub != null) {\n           Float boost = a.fields.get(f);\n           if (boost != null) {\n              sub.setBoost(boost);\n           }\n           lst.add(sub);\n         }\n       }\n       return lst;\n     }\n\n","sourceOld":"     protected List<Query> getQueries(Alias a) throws ParseException {\n       if (a == null) return null;\n       if (a.fields.size()==0) return null;\n       List<Query> lst= new ArrayList<Query>(4);\n\n       for (String f : a.fields.keySet()) {\n         this.field = f;\n         Query sub = getQuery();\n         if (sub != null) {\n           Float boost = a.fields.get(f);\n           if (boost != null) {\n              sub.setBoost(boost);\n           }\n           lst.add(sub);\n         }\n       }\n       return lst;\n     }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getQueries(Alias).mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getQueries(Alias).mjava","sourceNew":"     protected List<Query> getQueries(Alias a) throws ParseException {\n       if (a == null) return null;\n       if (a.fields.size()==0) return null;\n       List<Query> lst= new ArrayList<Query>(4);\n\n       for (String f : a.fields.keySet()) {\n         this.field = f;\n         Query sub = getQuery();\n         if (sub != null) {\n           Float boost = a.fields.get(f);\n           if (boost != null) {\n              sub.setBoost(boost);\n           }\n           lst.add(sub);\n         }\n       }\n       return lst;\n     }\n\n","sourceOld":"     protected List<Query> getQueries(Alias a) throws ParseException {\n       if (a == null) return null;\n       if (a.fields.size()==0) return null;\n       List<Query> lst= new ArrayList<Query>(4);\n\n       for (String f : a.fields.keySet()) {\n         this.field = f;\n         Query sub = getQuery();\n         if (sub != null) {\n           Float boost = a.fields.get(f);\n           if (boost != null) {\n              sub.setBoost(boost);\n           }\n           lst.add(sub);\n         }\n       }\n       return lst;\n     }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getQueries(Alias).mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getQueries(Alias).mjava","sourceNew":"     protected List<Query> getQueries(Alias a) throws ParseException {\n       if (a == null) return null;\n       if (a.fields.size()==0) return null;\n       List<Query> lst= new ArrayList<Query>(4);\n\n       for (String f : a.fields.keySet()) {\n         this.field = f;\n         Query sub = getQuery();\n         if (sub != null) {\n           Float boost = a.fields.get(f);\n           if (boost != null) {\n              sub.setBoost(boost);\n           }\n           lst.add(sub);\n         }\n       }\n       return lst;\n     }\n\n","sourceOld":"     protected List<Query> getQueries(Alias a) throws ParseException {\n       if (a == null) return null;\n       if (a.fields.size()==0) return null;\n       List<Query> lst= new ArrayList<Query>(4);\n\n       for (String f : a.fields.keySet()) {\n         this.field = f;\n         Query sub = getQuery();\n         if (sub != null) {\n           Float boost = a.fields.get(f);\n           if (boost != null) {\n              sub.setBoost(boost);\n           }\n           lst.add(sub);\n         }\n       }\n       return lst;\n     }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"245c71087515ed70d4fb9d9484f9dcbd79eebdfc","date":1331372561,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getQueries(Alias).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getQueries(Alias).mjava","sourceNew":"    protected List<Query> getQueries(Alias a) throws ParseException {\n       if (a == null) return null;\n       if (a.fields.size()==0) return null;\n       List<Query> lst= new ArrayList<Query>(4);\n\n       for (String f : a.fields.keySet()) {\n         this.field = f;\n         Query sub = getAliasedQuery();\n         if (sub != null) {\n           Float boost = a.fields.get(f);\n           if (boost != null) {\n              sub.setBoost(boost);\n           }\n           lst.add(sub);\n         }\n       }\n       return lst;\n     }\n\n","sourceOld":"     protected List<Query> getQueries(Alias a) throws ParseException {\n       if (a == null) return null;\n       if (a.fields.size()==0) return null;\n       List<Query> lst= new ArrayList<Query>(4);\n\n       for (String f : a.fields.keySet()) {\n         this.field = f;\n         Query sub = getQuery();\n         if (sub != null) {\n           Float boost = a.fields.get(f);\n           if (boost != null) {\n              sub.setBoost(boost);\n           }\n           lst.add(sub);\n         }\n       }\n       return lst;\n     }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getQueries(Alias).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getQueries(Alias).mjava","sourceNew":"    protected List<Query> getQueries(Alias a) throws ParseException {\n       if (a == null) return null;\n       if (a.fields.size()==0) return null;\n       List<Query> lst= new ArrayList<Query>(4);\n\n       for (String f : a.fields.keySet()) {\n         this.field = f;\n         Query sub = getAliasedQuery();\n         if (sub != null) {\n           Float boost = a.fields.get(f);\n           if (boost != null) {\n              sub.setBoost(boost);\n           }\n           lst.add(sub);\n         }\n       }\n       return lst;\n     }\n\n","sourceOld":"     protected List<Query> getQueries(Alias a) throws ParseException {\n       if (a == null) return null;\n       if (a.fields.size()==0) return null;\n       List<Query> lst= new ArrayList<Query>(4);\n\n       for (String f : a.fields.keySet()) {\n         this.field = f;\n         Query sub = getQuery();\n         if (sub != null) {\n           Float boost = a.fields.get(f);\n           if (boost != null) {\n              sub.setBoost(boost);\n           }\n           lst.add(sub);\n         }\n       }\n       return lst;\n     }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getQueries(Alias).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getQueries(Alias).mjava","sourceNew":"    protected List<Query> getQueries(Alias a) throws SyntaxError {\n       if (a == null) return null;\n       if (a.fields.size()==0) return null;\n       List<Query> lst= new ArrayList<Query>(4);\n\n       for (String f : a.fields.keySet()) {\n         this.field = f;\n         Query sub = getAliasedQuery();\n         if (sub != null) {\n           Float boost = a.fields.get(f);\n           if (boost != null) {\n              sub.setBoost(boost);\n           }\n           lst.add(sub);\n         }\n       }\n       return lst;\n     }\n\n","sourceOld":"    protected List<Query> getQueries(Alias a) throws ParseException {\n       if (a == null) return null;\n       if (a.fields.size()==0) return null;\n       List<Query> lst= new ArrayList<Query>(4);\n\n       for (String f : a.fields.keySet()) {\n         this.field = f;\n         Query sub = getAliasedQuery();\n         if (sub != null) {\n           Float boost = a.fields.get(f);\n           if (boost != null) {\n              sub.setBoost(boost);\n           }\n           lst.add(sub);\n         }\n       }\n       return lst;\n     }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getQueries(Alias).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getQueries(Alias).mjava","sourceNew":"    protected List<Query> getQueries(Alias a) throws SyntaxError {\n       if (a == null) return null;\n       if (a.fields.size()==0) return null;\n       List<Query> lst= new ArrayList<Query>(4);\n\n       for (String f : a.fields.keySet()) {\n         this.field = f;\n         Query sub = getAliasedQuery();\n         if (sub != null) {\n           Float boost = a.fields.get(f);\n           if (boost != null) {\n              sub.setBoost(boost);\n           }\n           lst.add(sub);\n         }\n       }\n       return lst;\n     }\n\n","sourceOld":"    protected List<Query> getQueries(Alias a) throws ParseException {\n       if (a == null) return null;\n       if (a.fields.size()==0) return null;\n       List<Query> lst= new ArrayList<Query>(4);\n\n       for (String f : a.fields.keySet()) {\n         this.field = f;\n         Query sub = getAliasedQuery();\n         if (sub != null) {\n           Float boost = a.fields.get(f);\n           if (boost != null) {\n              sub.setBoost(boost);\n           }\n           lst.add(sub);\n         }\n       }\n       return lst;\n     }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7e79e31f55cbb444e3023d430a340658755aa31","date":1357666399,"type":4,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getQueries(Alias).mjava","sourceNew":null,"sourceOld":"    protected List<Query> getQueries(Alias a) throws SyntaxError {\n       if (a == null) return null;\n       if (a.fields.size()==0) return null;\n       List<Query> lst= new ArrayList<Query>(4);\n\n       for (String f : a.fields.keySet()) {\n         this.field = f;\n         Query sub = getAliasedQuery();\n         if (sub != null) {\n           Float boost = a.fields.get(f);\n           if (boost != null) {\n              sub.setBoost(boost);\n           }\n           lst.add(sub);\n         }\n       }\n       return lst;\n     }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getQueries(Alias).mjava","sourceNew":null,"sourceOld":"    protected List<Query> getQueries(Alias a) throws SyntaxError {\n       if (a == null) return null;\n       if (a.fields.size()==0) return null;\n       List<Query> lst= new ArrayList<Query>(4);\n\n       for (String f : a.fields.keySet()) {\n         this.field = f;\n         Query sub = getAliasedQuery();\n         if (sub != null) {\n           Float boost = a.fields.get(f);\n           if (boost != null) {\n              sub.setBoost(boost);\n           }\n           lst.add(sub);\n         }\n       }\n       return lst;\n     }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["c26f00b574427b55127e869b935845554afde1fa","245c71087515ed70d4fb9d9484f9dcbd79eebdfc"],"3cdb67100dc016748799a77218aa409478372d79":["245c71087515ed70d4fb9d9484f9dcbd79eebdfc"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["245c71087515ed70d4fb9d9484f9dcbd79eebdfc","3cdb67100dc016748799a77218aa409478372d79"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7e79e31f55cbb444e3023d430a340658755aa31":["3cdb67100dc016748799a77218aa409478372d79"],"245c71087515ed70d4fb9d9484f9dcbd79eebdfc":["c26f00b574427b55127e869b935845554afde1fa"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["407687e67faf6e1f02a211ca078d8e3eed631027","c7e79e31f55cbb444e3023d430a340658755aa31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7e79e31f55cbb444e3023d430a340658755aa31"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"3cdb67100dc016748799a77218aa409478372d79":["407687e67faf6e1f02a211ca078d8e3eed631027","c7e79e31f55cbb444e3023d430a340658755aa31"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["38e3b736c7ca086d61b7dbb841c905ee115490da","245c71087515ed70d4fb9d9484f9dcbd79eebdfc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"407687e67faf6e1f02a211ca078d8e3eed631027":["4e6354dd7c71fe122926fc53d7d29f715b1283db"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"c7e79e31f55cbb444e3023d430a340658755aa31":["4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"245c71087515ed70d4fb9d9484f9dcbd79eebdfc":["38e3b736c7ca086d61b7dbb841c905ee115490da","3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","a258fbb26824fd104ed795e5d9033d2d040049ee","4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}