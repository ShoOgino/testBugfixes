{"path":"solr/core/src/java/org/apache/solr/schema/LatLonPointSpatialField.LatLonPointSpatialStrategy#makeQueryFromDocValues(Shape).mjava","commits":[{"id":"7280772020b860cd9a473ed847c5b79251a850d7","date":1489283281,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/LatLonPointSpatialField.LatLonPointSpatialStrategy#makeQueryFromDocValues(Shape).mjava","pathOld":"/dev/null","sourceNew":"    // Uses DocValuesField  (otherwise identical to above)\n    protected Query makeQueryFromDocValues(Shape shape) {\n      // note: latitude then longitude order for LLP's methods\n      if (shape instanceof Circle) {\n        Circle circle = (Circle) shape;\n        double radiusMeters = circle.getRadius() * DistanceUtils.DEG_TO_KM * 1000;\n        return LatLonDocValuesField.newDistanceQuery(getFieldName(),\n            circle.getCenter().getY(), circle.getCenter().getX(),\n            radiusMeters);\n      } else if (shape instanceof Rectangle) {\n        Rectangle rect = (Rectangle) shape;\n        return LatLonDocValuesField.newBoxQuery(getFieldName(),\n            rect.getMinY(), rect.getMaxY(), rect.getMinX(), rect.getMaxX());\n      } else if (shape instanceof Point) {\n        Point point = (Point) shape;\n        return LatLonDocValuesField.newDistanceQuery(getFieldName(),\n            point.getY(), point.getX(), 0);\n      } else {\n        throw new UnsupportedOperationException(\"Shape \" + shape.getClass() + \" is not supported by \" + getClass());\n      }\n//      } else if (shape instanceof LucenePolygonShape) {\n//        // TODO support multi-polygon\n//        Polygon poly = ((LucenePolygonShape)shape).lucenePolygon;\n//        return LatLonPoint.newPolygonQuery(getFieldName(), poly);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9970073fd3c04efd7374f975e45a61084b169ce9","date":1499179453,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/LatLonPointSpatialField.LatLonPointSpatialStrategy#makeQueryFromDocValues(Shape).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/LatLonPointSpatialField.LatLonPointSpatialStrategy#makeQueryFromDocValues(Shape).mjava","sourceNew":"    // Uses DocValuesField  (otherwise identical to above)\n    protected Query makeQueryFromDocValues(Shape shape) {\n      // note: latitude then longitude order for LLP's methods\n      if (shape instanceof Circle) {\n        Circle circle = (Circle) shape;\n        double radiusMeters = circle.getRadius() * DistanceUtils.DEG_TO_KM * 1000;\n        return LatLonDocValuesField.newSlowDistanceQuery(getFieldName(),\n            circle.getCenter().getY(), circle.getCenter().getX(),\n            radiusMeters);\n      } else if (shape instanceof Rectangle) {\n        Rectangle rect = (Rectangle) shape;\n        return LatLonDocValuesField.newSlowBoxQuery(getFieldName(),\n            rect.getMinY(), rect.getMaxY(), rect.getMinX(), rect.getMaxX());\n      } else if (shape instanceof Point) {\n        Point point = (Point) shape;\n        return LatLonDocValuesField.newSlowDistanceQuery(getFieldName(),\n            point.getY(), point.getX(), 0);\n      } else {\n        throw new UnsupportedOperationException(\"Shape \" + shape.getClass() + \" is not supported by \" + getClass());\n      }\n//      } else if (shape instanceof LucenePolygonShape) {\n//        // TODO support multi-polygon\n//        Polygon poly = ((LucenePolygonShape)shape).lucenePolygon;\n//        return LatLonPoint.newPolygonQuery(getFieldName(), poly);\n    }\n\n","sourceOld":"    // Uses DocValuesField  (otherwise identical to above)\n    protected Query makeQueryFromDocValues(Shape shape) {\n      // note: latitude then longitude order for LLP's methods\n      if (shape instanceof Circle) {\n        Circle circle = (Circle) shape;\n        double radiusMeters = circle.getRadius() * DistanceUtils.DEG_TO_KM * 1000;\n        return LatLonDocValuesField.newDistanceQuery(getFieldName(),\n            circle.getCenter().getY(), circle.getCenter().getX(),\n            radiusMeters);\n      } else if (shape instanceof Rectangle) {\n        Rectangle rect = (Rectangle) shape;\n        return LatLonDocValuesField.newBoxQuery(getFieldName(),\n            rect.getMinY(), rect.getMaxY(), rect.getMinX(), rect.getMaxX());\n      } else if (shape instanceof Point) {\n        Point point = (Point) shape;\n        return LatLonDocValuesField.newDistanceQuery(getFieldName(),\n            point.getY(), point.getX(), 0);\n      } else {\n        throw new UnsupportedOperationException(\"Shape \" + shape.getClass() + \" is not supported by \" + getClass());\n      }\n//      } else if (shape instanceof LucenePolygonShape) {\n//        // TODO support multi-polygon\n//        Polygon poly = ((LucenePolygonShape)shape).lucenePolygon;\n//        return LatLonPoint.newPolygonQuery(getFieldName(), poly);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/LatLonPointSpatialField.LatLonPointSpatialStrategy#makeQueryFromDocValues(Shape).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/LatLonPointSpatialField.LatLonPointSpatialStrategy#makeQueryFromDocValues(Shape).mjava","sourceNew":"    // Uses DocValuesField  (otherwise identical to above)\n    protected Query makeQueryFromDocValues(Shape shape) {\n      // note: latitude then longitude order for LLP's methods\n      if (shape instanceof Circle) {\n        Circle circle = (Circle) shape;\n        double radiusMeters = circle.getRadius() * DistanceUtils.DEG_TO_KM * 1000;\n        return LatLonDocValuesField.newSlowDistanceQuery(getFieldName(),\n            circle.getCenter().getY(), circle.getCenter().getX(),\n            radiusMeters);\n      } else if (shape instanceof Rectangle) {\n        Rectangle rect = (Rectangle) shape;\n        return LatLonDocValuesField.newSlowBoxQuery(getFieldName(),\n            rect.getMinY(), rect.getMaxY(), rect.getMinX(), rect.getMaxX());\n      } else if (shape instanceof Point) {\n        Point point = (Point) shape;\n        return LatLonDocValuesField.newSlowDistanceQuery(getFieldName(),\n            point.getY(), point.getX(), 0);\n      } else {\n        throw new UnsupportedOperationException(\"Shape \" + shape.getClass() + \" is not supported by \" + getClass());\n      }\n//      } else if (shape instanceof LucenePolygonShape) {\n//        // TODO support multi-polygon\n//        Polygon poly = ((LucenePolygonShape)shape).lucenePolygon;\n//        return LatLonPoint.newPolygonQuery(getFieldName(), poly);\n    }\n\n","sourceOld":"    // Uses DocValuesField  (otherwise identical to above)\n    protected Query makeQueryFromDocValues(Shape shape) {\n      // note: latitude then longitude order for LLP's methods\n      if (shape instanceof Circle) {\n        Circle circle = (Circle) shape;\n        double radiusMeters = circle.getRadius() * DistanceUtils.DEG_TO_KM * 1000;\n        return LatLonDocValuesField.newDistanceQuery(getFieldName(),\n            circle.getCenter().getY(), circle.getCenter().getX(),\n            radiusMeters);\n      } else if (shape instanceof Rectangle) {\n        Rectangle rect = (Rectangle) shape;\n        return LatLonDocValuesField.newBoxQuery(getFieldName(),\n            rect.getMinY(), rect.getMaxY(), rect.getMinX(), rect.getMaxX());\n      } else if (shape instanceof Point) {\n        Point point = (Point) shape;\n        return LatLonDocValuesField.newDistanceQuery(getFieldName(),\n            point.getY(), point.getX(), 0);\n      } else {\n        throw new UnsupportedOperationException(\"Shape \" + shape.getClass() + \" is not supported by \" + getClass());\n      }\n//      } else if (shape instanceof LucenePolygonShape) {\n//        // TODO support multi-polygon\n//        Polygon poly = ((LucenePolygonShape)shape).lucenePolygon;\n//        return LatLonPoint.newPolygonQuery(getFieldName(), poly);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["7280772020b860cd9a473ed847c5b79251a850d7","9970073fd3c04efd7374f975e45a61084b169ce9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7280772020b860cd9a473ed847c5b79251a850d7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9970073fd3c04efd7374f975e45a61084b169ce9":["7280772020b860cd9a473ed847c5b79251a850d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9970073fd3c04efd7374f975e45a61084b169ce9"]},"commit2Childs":{"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7280772020b860cd9a473ed847c5b79251a850d7"],"7280772020b860cd9a473ed847c5b79251a850d7":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","9970073fd3c04efd7374f975e45a61084b169ce9"],"9970073fd3c04efd7374f975e45a61084b169ce9":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}