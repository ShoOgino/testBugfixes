{"path":"src/test/org/apache/lucene/search/payloads/TestBoostingNearQuery#test().mjava","commits":[{"id":"94a3c9097762cec00567aff9ceae83842107c895","date":1249571658,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/payloads/TestBoostingNearQuery#test().mjava","pathOld":"/dev/null","sourceNew":"\tpublic void test() throws IOException {\n\t\tBoostingNearQuery query;\n\t\tTopDocs hits;\n\n\t\tquery = newPhraseQuery(\"field\", \"twenty two\", true);\n\t\t// all 10 hits should have score = 3 because adjacent terms have payloads of 2,4\n\t\t// and all the similarity factors are set to 1\n\t\thits = searcher.search(query, null, 100);\n\t\tassertTrue(\"hits is null and it shouldn't be\", hits != null);\n\t\tassertTrue(\"should be 10 hits\", hits.totalHits == 10);\n\t\tfor (int j = 0; j < hits.scoreDocs.length; j++) {\n\t\t\tScoreDoc doc = hits.scoreDocs[j];\n\t\t\tassertTrue(doc.score + \" does not equal: \" + 3, doc.score == 3);\n\t\t}\n\t\tfor (int i=1;i<10;i++) {\n\t\t\tquery = newPhraseQuery(\"field\", English.intToEnglish(i)+\" hundred\", true);\n\t\t\t// all should have score = 3 because adjacent terms have payloads of 2,4\n\t\t\t// and all the similarity factors are set to 1\n\t\t\thits = searcher.search(query, null, 100);\n\t\t\tassertTrue(\"hits is null and it shouldn't be\", hits != null);\n\t\t\tassertTrue(\"should be 100 hits\", hits.totalHits == 100);\n\t\t\tfor (int j = 0; j < hits.scoreDocs.length; j++) {\n\t\t\t\tScoreDoc doc = hits.scoreDocs[j];\n//\t\t\t\tSystem.out.println(\"Doc: \" + doc.toString());\n//\t\t\t\tSystem.out.println(\"Explain: \" + searcher.explain(query, doc.doc));\n\t\t\t\tassertTrue(doc.score + \" does not equal: \" + 3, doc.score == 3);\n\t\t\t}\n\t\t}\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e9a421afb32184cc61e8326108325225d58dfde0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c362584a9deb1b6591987a62662018b4cd81ad0","date":1250868366,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/payloads/TestBoostingNearQuery#test().mjava","pathOld":"src/test/org/apache/lucene/search/payloads/TestBoostingNearQuery#test().mjava","sourceNew":"\tpublic void test() throws IOException {\n\t\tBoostingNearQuery query;\n\t\tTopDocs hits;\n\n\t\tquery = newPhraseQuery(\"field\", \"twenty two\", true);\n\t\tQueryUtils.check(query);\n\t\t\n\t\t// all 10 hits should have score = 3 because adjacent terms have payloads of 2,4\n\t\t// and all the similarity factors are set to 1\n\t\thits = searcher.search(query, null, 100);\n\t\tassertTrue(\"hits is null and it shouldn't be\", hits != null);\n\t\tassertTrue(\"should be 10 hits\", hits.totalHits == 10);\n\t\tfor (int j = 0; j < hits.scoreDocs.length; j++) {\n\t\t\tScoreDoc doc = hits.scoreDocs[j];\n\t\t\tassertTrue(doc.score + \" does not equal: \" + 3, doc.score == 3);\n\t\t}\n\t\tfor (int i=1;i<10;i++) {\n\t\t\tquery = newPhraseQuery(\"field\", English.intToEnglish(i)+\" hundred\", true);\n\t\t\t// all should have score = 3 because adjacent terms have payloads of 2,4\n\t\t\t// and all the similarity factors are set to 1\n\t\t\thits = searcher.search(query, null, 100);\n\t\t\tassertTrue(\"hits is null and it shouldn't be\", hits != null);\n\t\t\tassertTrue(\"should be 100 hits\", hits.totalHits == 100);\n\t\t\tfor (int j = 0; j < hits.scoreDocs.length; j++) {\n\t\t\t\tScoreDoc doc = hits.scoreDocs[j];\n//\t\t\t\tSystem.out.println(\"Doc: \" + doc.toString());\n//\t\t\t\tSystem.out.println(\"Explain: \" + searcher.explain(query, doc.doc));\n\t\t\t\tassertTrue(doc.score + \" does not equal: \" + 3, doc.score == 3);\n\t\t\t}\n\t\t}\n\t}\n\n","sourceOld":"\tpublic void test() throws IOException {\n\t\tBoostingNearQuery query;\n\t\tTopDocs hits;\n\n\t\tquery = newPhraseQuery(\"field\", \"twenty two\", true);\n\t\t// all 10 hits should have score = 3 because adjacent terms have payloads of 2,4\n\t\t// and all the similarity factors are set to 1\n\t\thits = searcher.search(query, null, 100);\n\t\tassertTrue(\"hits is null and it shouldn't be\", hits != null);\n\t\tassertTrue(\"should be 10 hits\", hits.totalHits == 10);\n\t\tfor (int j = 0; j < hits.scoreDocs.length; j++) {\n\t\t\tScoreDoc doc = hits.scoreDocs[j];\n\t\t\tassertTrue(doc.score + \" does not equal: \" + 3, doc.score == 3);\n\t\t}\n\t\tfor (int i=1;i<10;i++) {\n\t\t\tquery = newPhraseQuery(\"field\", English.intToEnglish(i)+\" hundred\", true);\n\t\t\t// all should have score = 3 because adjacent terms have payloads of 2,4\n\t\t\t// and all the similarity factors are set to 1\n\t\t\thits = searcher.search(query, null, 100);\n\t\t\tassertTrue(\"hits is null and it shouldn't be\", hits != null);\n\t\t\tassertTrue(\"should be 100 hits\", hits.totalHits == 100);\n\t\t\tfor (int j = 0; j < hits.scoreDocs.length; j++) {\n\t\t\t\tScoreDoc doc = hits.scoreDocs[j];\n//\t\t\t\tSystem.out.println(\"Doc: \" + doc.toString());\n//\t\t\t\tSystem.out.println(\"Explain: \" + searcher.explain(query, doc.doc));\n\t\t\t\tassertTrue(doc.score + \" does not equal: \" + 3, doc.score == 3);\n\t\t\t}\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cc8d2d46fc46da43175c2ddee10e43c40d16bf8","date":1250874282,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/payloads/TestBoostingNearQuery#test().mjava","pathOld":"src/test/org/apache/lucene/search/payloads/TestBoostingNearQuery#test().mjava","sourceNew":"\tpublic void test() throws IOException {\n\t\tBoostingNearQuery query;\n\t\tTopDocs hits;\n\n\t\tquery = newPhraseQuery(\"field\", \"twenty two\", true);\n\t\t\n\t\t// all 10 hits should have score = 3 because adjacent terms have payloads of 2,4\n\t\t// and all the similarity factors are set to 1\n\t\thits = searcher.search(query, null, 100);\n\t\tassertTrue(\"hits is null and it shouldn't be\", hits != null);\n\t\tassertTrue(\"should be 10 hits\", hits.totalHits == 10);\n\t\tfor (int j = 0; j < hits.scoreDocs.length; j++) {\n\t\t\tScoreDoc doc = hits.scoreDocs[j];\n\t\t\tassertTrue(doc.score + \" does not equal: \" + 3, doc.score == 3);\n\t\t}\n\t\tfor (int i=1;i<10;i++) {\n\t\t\tquery = newPhraseQuery(\"field\", English.intToEnglish(i)+\" hundred\", true);\n\t\t\t// all should have score = 3 because adjacent terms have payloads of 2,4\n\t\t\t// and all the similarity factors are set to 1\n\t\t\thits = searcher.search(query, null, 100);\n\t\t\tassertTrue(\"hits is null and it shouldn't be\", hits != null);\n\t\t\tassertTrue(\"should be 100 hits\", hits.totalHits == 100);\n\t\t\tfor (int j = 0; j < hits.scoreDocs.length; j++) {\n\t\t\t\tScoreDoc doc = hits.scoreDocs[j];\n//\t\t\t\tSystem.out.println(\"Doc: \" + doc.toString());\n//\t\t\t\tSystem.out.println(\"Explain: \" + searcher.explain(query, doc.doc));\n\t\t\t\tassertTrue(doc.score + \" does not equal: \" + 3, doc.score == 3);\n\t\t\t}\n\t\t}\n\t}\n\n","sourceOld":"\tpublic void test() throws IOException {\n\t\tBoostingNearQuery query;\n\t\tTopDocs hits;\n\n\t\tquery = newPhraseQuery(\"field\", \"twenty two\", true);\n\t\tQueryUtils.check(query);\n\t\t\n\t\t// all 10 hits should have score = 3 because adjacent terms have payloads of 2,4\n\t\t// and all the similarity factors are set to 1\n\t\thits = searcher.search(query, null, 100);\n\t\tassertTrue(\"hits is null and it shouldn't be\", hits != null);\n\t\tassertTrue(\"should be 10 hits\", hits.totalHits == 10);\n\t\tfor (int j = 0; j < hits.scoreDocs.length; j++) {\n\t\t\tScoreDoc doc = hits.scoreDocs[j];\n\t\t\tassertTrue(doc.score + \" does not equal: \" + 3, doc.score == 3);\n\t\t}\n\t\tfor (int i=1;i<10;i++) {\n\t\t\tquery = newPhraseQuery(\"field\", English.intToEnglish(i)+\" hundred\", true);\n\t\t\t// all should have score = 3 because adjacent terms have payloads of 2,4\n\t\t\t// and all the similarity factors are set to 1\n\t\t\thits = searcher.search(query, null, 100);\n\t\t\tassertTrue(\"hits is null and it shouldn't be\", hits != null);\n\t\t\tassertTrue(\"should be 100 hits\", hits.totalHits == 100);\n\t\t\tfor (int j = 0; j < hits.scoreDocs.length; j++) {\n\t\t\t\tScoreDoc doc = hits.scoreDocs[j];\n//\t\t\t\tSystem.out.println(\"Doc: \" + doc.toString());\n//\t\t\t\tSystem.out.println(\"Explain: \" + searcher.explain(query, doc.doc));\n\t\t\t\tassertTrue(doc.score + \" does not equal: \" + 3, doc.score == 3);\n\t\t\t}\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"822e8b4443b8d5091c3fb7ebf02db240a318df0f","date":1250972580,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/payloads/TestBoostingNearQuery#test().mjava","pathOld":"src/test/org/apache/lucene/search/payloads/TestBoostingNearQuery#test().mjava","sourceNew":"\tpublic void test() throws IOException {\n\t\tBoostingNearQuery query;\n\t\tTopDocs hits;\n\n\t\tquery = newPhraseQuery(\"field\", \"twenty two\", true);\n\t\tQueryUtils.check(query);\n\t\t\n\t\t// all 10 hits should have score = 3 because adjacent terms have payloads of 2,4\n\t\t// and all the similarity factors are set to 1\n\t\thits = searcher.search(query, null, 100);\n\t\tassertTrue(\"hits is null and it shouldn't be\", hits != null);\n\t\tassertTrue(\"should be 10 hits\", hits.totalHits == 10);\n\t\tfor (int j = 0; j < hits.scoreDocs.length; j++) {\n\t\t\tScoreDoc doc = hits.scoreDocs[j];\n\t\t\tassertTrue(doc.score + \" does not equal: \" + 3, doc.score == 3);\n\t\t}\n\t\tfor (int i=1;i<10;i++) {\n\t\t\tquery = newPhraseQuery(\"field\", English.intToEnglish(i)+\" hundred\", true);\n\t\t\t// all should have score = 3 because adjacent terms have payloads of 2,4\n\t\t\t// and all the similarity factors are set to 1\n\t\t\thits = searcher.search(query, null, 100);\n\t\t\tassertTrue(\"hits is null and it shouldn't be\", hits != null);\n\t\t\tassertTrue(\"should be 100 hits\", hits.totalHits == 100);\n\t\t\tfor (int j = 0; j < hits.scoreDocs.length; j++) {\n\t\t\t\tScoreDoc doc = hits.scoreDocs[j];\n//\t\t\t\tSystem.out.println(\"Doc: \" + doc.toString());\n//\t\t\t\tSystem.out.println(\"Explain: \" + searcher.explain(query, doc.doc));\n\t\t\t\tassertTrue(doc.score + \" does not equal: \" + 3, doc.score == 3);\n\t\t\t}\n\t\t}\n\t}\n\n","sourceOld":"\tpublic void test() throws IOException {\n\t\tBoostingNearQuery query;\n\t\tTopDocs hits;\n\n\t\tquery = newPhraseQuery(\"field\", \"twenty two\", true);\n\t\t\n\t\t// all 10 hits should have score = 3 because adjacent terms have payloads of 2,4\n\t\t// and all the similarity factors are set to 1\n\t\thits = searcher.search(query, null, 100);\n\t\tassertTrue(\"hits is null and it shouldn't be\", hits != null);\n\t\tassertTrue(\"should be 10 hits\", hits.totalHits == 10);\n\t\tfor (int j = 0; j < hits.scoreDocs.length; j++) {\n\t\t\tScoreDoc doc = hits.scoreDocs[j];\n\t\t\tassertTrue(doc.score + \" does not equal: \" + 3, doc.score == 3);\n\t\t}\n\t\tfor (int i=1;i<10;i++) {\n\t\t\tquery = newPhraseQuery(\"field\", English.intToEnglish(i)+\" hundred\", true);\n\t\t\t// all should have score = 3 because adjacent terms have payloads of 2,4\n\t\t\t// and all the similarity factors are set to 1\n\t\t\thits = searcher.search(query, null, 100);\n\t\t\tassertTrue(\"hits is null and it shouldn't be\", hits != null);\n\t\t\tassertTrue(\"should be 100 hits\", hits.totalHits == 100);\n\t\t\tfor (int j = 0; j < hits.scoreDocs.length; j++) {\n\t\t\t\tScoreDoc doc = hits.scoreDocs[j];\n//\t\t\t\tSystem.out.println(\"Doc: \" + doc.toString());\n//\t\t\t\tSystem.out.println(\"Explain: \" + searcher.explain(query, doc.doc));\n\t\t\t\tassertTrue(doc.score + \" does not equal: \" + 3, doc.score == 3);\n\t\t\t}\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":["e9a421afb32184cc61e8326108325225d58dfde0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa4f1b5e611afe6cb170951e0a9202ff95dc9156","date":1250976267,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#test().mjava","pathOld":"src/test/org/apache/lucene/search/payloads/TestBoostingNearQuery#test().mjava","sourceNew":"\tpublic void test() throws IOException {\n\t\tPayloadNearQuery query;\n\t\tTopDocs hits;\n\n\t\tquery = newPhraseQuery(\"field\", \"twenty two\", true);\n\t\tQueryUtils.check(query);\n\t\t\n\t\t// all 10 hits should have score = 3 because adjacent terms have payloads of 2,4\n\t\t// and all the similarity factors are set to 1\n\t\thits = searcher.search(query, null, 100);\n\t\tassertTrue(\"hits is null and it shouldn't be\", hits != null);\n\t\tassertTrue(\"should be 10 hits\", hits.totalHits == 10);\n\t\tfor (int j = 0; j < hits.scoreDocs.length; j++) {\n\t\t\tScoreDoc doc = hits.scoreDocs[j];\n\t\t\tassertTrue(doc.score + \" does not equal: \" + 3, doc.score == 3);\n\t\t}\n\t\tfor (int i=1;i<10;i++) {\n\t\t\tquery = newPhraseQuery(\"field\", English.intToEnglish(i)+\" hundred\", true);\n\t\t\t// all should have score = 3 because adjacent terms have payloads of 2,4\n\t\t\t// and all the similarity factors are set to 1\n\t\t\thits = searcher.search(query, null, 100);\n\t\t\tassertTrue(\"hits is null and it shouldn't be\", hits != null);\n\t\t\tassertTrue(\"should be 100 hits\", hits.totalHits == 100);\n\t\t\tfor (int j = 0; j < hits.scoreDocs.length; j++) {\n\t\t\t\tScoreDoc doc = hits.scoreDocs[j];\n//\t\t\t\tSystem.out.println(\"Doc: \" + doc.toString());\n//\t\t\t\tSystem.out.println(\"Explain: \" + searcher.explain(query, doc.doc));\n\t\t\t\tassertTrue(doc.score + \" does not equal: \" + 3, doc.score == 3);\n\t\t\t}\n\t\t}\n\t}\n\n","sourceOld":"\tpublic void test() throws IOException {\n\t\tBoostingNearQuery query;\n\t\tTopDocs hits;\n\n\t\tquery = newPhraseQuery(\"field\", \"twenty two\", true);\n\t\tQueryUtils.check(query);\n\t\t\n\t\t// all 10 hits should have score = 3 because adjacent terms have payloads of 2,4\n\t\t// and all the similarity factors are set to 1\n\t\thits = searcher.search(query, null, 100);\n\t\tassertTrue(\"hits is null and it shouldn't be\", hits != null);\n\t\tassertTrue(\"should be 10 hits\", hits.totalHits == 10);\n\t\tfor (int j = 0; j < hits.scoreDocs.length; j++) {\n\t\t\tScoreDoc doc = hits.scoreDocs[j];\n\t\t\tassertTrue(doc.score + \" does not equal: \" + 3, doc.score == 3);\n\t\t}\n\t\tfor (int i=1;i<10;i++) {\n\t\t\tquery = newPhraseQuery(\"field\", English.intToEnglish(i)+\" hundred\", true);\n\t\t\t// all should have score = 3 because adjacent terms have payloads of 2,4\n\t\t\t// and all the similarity factors are set to 1\n\t\t\thits = searcher.search(query, null, 100);\n\t\t\tassertTrue(\"hits is null and it shouldn't be\", hits != null);\n\t\t\tassertTrue(\"should be 100 hits\", hits.totalHits == 100);\n\t\t\tfor (int j = 0; j < hits.scoreDocs.length; j++) {\n\t\t\t\tScoreDoc doc = hits.scoreDocs[j];\n//\t\t\t\tSystem.out.println(\"Doc: \" + doc.toString());\n//\t\t\t\tSystem.out.println(\"Explain: \" + searcher.explain(query, doc.doc));\n\t\t\t\tassertTrue(doc.score + \" does not equal: \" + 3, doc.score == 3);\n\t\t\t}\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":["e9a421afb32184cc61e8326108325225d58dfde0"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"94a3c9097762cec00567aff9ceae83842107c895":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4c362584a9deb1b6591987a62662018b4cd81ad0":["94a3c9097762cec00567aff9ceae83842107c895"],"3cc8d2d46fc46da43175c2ddee10e43c40d16bf8":["4c362584a9deb1b6591987a62662018b4cd81ad0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"822e8b4443b8d5091c3fb7ebf02db240a318df0f":["3cc8d2d46fc46da43175c2ddee10e43c40d16bf8"],"fa4f1b5e611afe6cb170951e0a9202ff95dc9156":["822e8b4443b8d5091c3fb7ebf02db240a318df0f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa4f1b5e611afe6cb170951e0a9202ff95dc9156"]},"commit2Childs":{"94a3c9097762cec00567aff9ceae83842107c895":["4c362584a9deb1b6591987a62662018b4cd81ad0"],"4c362584a9deb1b6591987a62662018b4cd81ad0":["3cc8d2d46fc46da43175c2ddee10e43c40d16bf8"],"3cc8d2d46fc46da43175c2ddee10e43c40d16bf8":["822e8b4443b8d5091c3fb7ebf02db240a318df0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["94a3c9097762cec00567aff9ceae83842107c895"],"822e8b4443b8d5091c3fb7ebf02db240a318df0f":["fa4f1b5e611afe6cb170951e0a9202ff95dc9156"],"fa4f1b5e611afe6cb170951e0a9202ff95dc9156":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}