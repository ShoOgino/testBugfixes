{"path":"lucene/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#init(Reader,Version).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#init(Reader,Version).mjava","pathOld":"src/java/org/apache/lucene/analysis/standard/StandardTokenizer#init(Reader,Version).mjava","sourceNew":"  private void init(Reader input, Version matchVersion) {\n    if (matchVersion.onOrAfter(Version.LUCENE_24)) {\n      replaceInvalidAcronym = true;\n    } else {\n      replaceInvalidAcronym = false;\n    }\n    this.input = input;    \n    termAtt = addAttribute(TermAttribute.class);\n    offsetAtt = addAttribute(OffsetAttribute.class);\n    posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n    typeAtt = addAttribute(TypeAttribute.class);\n  }\n\n","sourceOld":"  private void init(Reader input, Version matchVersion) {\n    if (matchVersion.onOrAfter(Version.LUCENE_24)) {\n      replaceInvalidAcronym = true;\n    } else {\n      replaceInvalidAcronym = false;\n    }\n    this.input = input;    \n    termAtt = addAttribute(TermAttribute.class);\n    offsetAtt = addAttribute(OffsetAttribute.class);\n    posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n    typeAtt = addAttribute(TypeAttribute.class);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77814958b841b2c57a45005379f41e9a5775da81","date":1270767383,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#init(Reader,Version).mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#init(Reader,Version).mjava","sourceNew":"  private final void init(Reader input, Version matchVersion) {\n    this.scanner = matchVersion.onOrAfter(Version.LUCENE_31) ?\n      new StandardTokenizerImpl31(input) : new StandardTokenizerImplOrig(input);\n    if (matchVersion.onOrAfter(Version.LUCENE_24)) {\n      replaceInvalidAcronym = true;\n    } else {\n      replaceInvalidAcronym = false;\n    }\n    this.input = input;    \n  }\n\n","sourceOld":"  private void init(Reader input, Version matchVersion) {\n    if (matchVersion.onOrAfter(Version.LUCENE_24)) {\n      replaceInvalidAcronym = true;\n    } else {\n      replaceInvalidAcronym = false;\n    }\n    this.input = input;    \n    termAtt = addAttribute(TermAttribute.class);\n    offsetAtt = addAttribute(OffsetAttribute.class);\n    posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n    typeAtt = addAttribute(TypeAttribute.class);\n  }\n\n","bugFix":["ba1116b3450a9c1642c89445d131b37344055245"],"bugIntro":["78fd27c86b8de3726e8046ae86e009307de9a284"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"790c3f61c9b891d66d919c5d10db9fa5216eb0f1","date":1274818604,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#init(Reader,Version).mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#init(Reader,Version).mjava","sourceNew":"  private final void init(Reader input, Version matchVersion) {\n    this.scanner = matchVersion.onOrAfter(Version.LUCENE_31) ?\n      new StandardTokenizerImpl31(input) : new StandardTokenizerImplOrig(input);\n    if (matchVersion.onOrAfter(Version.LUCENE_24)) {\n      replaceInvalidAcronym = true;\n    } else {\n      replaceInvalidAcronym = false;\n    }\n    this.input = input;    \n  }\n\n","sourceOld":"  private final void init(Reader input, Version matchVersion) {\n    this.scanner = matchVersion.onOrAfter(Version.LUCENE_31) ?\n      new StandardTokenizerImpl31(input) : new StandardTokenizerImplOrig(input);\n    if (matchVersion.onOrAfter(Version.LUCENE_24)) {\n      replaceInvalidAcronym = true;\n    } else {\n      replaceInvalidAcronym = false;\n    }\n    this.input = input;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"77814958b841b2c57a45005379f41e9a5775da81":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["77814958b841b2c57a45005379f41e9a5775da81"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"77814958b841b2c57a45005379f41e9a5775da81":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["77814958b841b2c57a45005379f41e9a5775da81"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}