{"path":"src/java/org/apache/lucene/search/IntegerSortedSearcher#search(Query,Filter,int).mjava","commits":[{"id":"6decf4a21b049e524a98231b4df27f61c84f7b65","date":1075479753,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IntegerSortedSearcher#search(Query,Filter,int).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Finds the top <code>nDocs</code>\n     * hits for <code>query</code>, applying <code>filter</code> if non-null.\n     *\n     * Overrides IndexSearcher.search to use a FieldSortedHitQueue instead of the\n     * default HitQueue.\n     *\n     * @see IndexSearcher#search\n     */\n    public TopDocs search(Query query, Filter filter, final int nDocs)\n    throws IOException {\n\n        Scorer scorer = query.weight(this).scorer(reader);\n        if (scorer == null) {\n            return new TopDocs(0, new ScoreDoc[0]);\n        }\n\n        final BitSet bits = filter != null ? filter.bits(reader) : null;\n        final FieldSortedHitQueue hq = new FieldSortedHitQueue(reader, field, nDocs);\n        final int[] totalHits = new int[1];\n        scorer.score(\n            new HitCollector() {\n                public final void collect(int doc, float score) {\n                    if (score > 0.0f &&                         // ignore zeroed buckets\n                        (bits == null || bits.get(doc))) {      // skip docs not in bits\n                        totalHits[0]++;\n                        hq.insert(new ScoreDoc(doc, score));\n                    }\n                }\n            });\n\n        ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n        for (int i = hq.size() - 1; i >= 0; i--) {              // put docs in array\n            scoreDocs[i] = (ScoreDoc) hq.pop();\n        }\n\n        return new TopDocs(totalHits[0], scoreDocs);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6691cb6747f9e850337c706c06b92e9ddf816e1","date":1077044431,"type":4,"author":"Doug Cutting","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/IntegerSortedSearcher#search(Query,Filter,int).mjava","sourceNew":null,"sourceOld":"    /**\n     * Finds the top <code>nDocs</code>\n     * hits for <code>query</code>, applying <code>filter</code> if non-null.\n     *\n     * Overrides IndexSearcher.search to use a FieldSortedHitQueue instead of the\n     * default HitQueue.\n     *\n     * @see IndexSearcher#search\n     */\n    public TopDocs search(Query query, Filter filter, final int nDocs)\n    throws IOException {\n\n        Scorer scorer = query.weight(this).scorer(reader);\n        if (scorer == null) {\n            return new TopDocs(0, new ScoreDoc[0]);\n        }\n\n        final BitSet bits = filter != null ? filter.bits(reader) : null;\n        final FieldSortedHitQueue hq = new FieldSortedHitQueue(reader, field, nDocs);\n        final int[] totalHits = new int[1];\n        scorer.score(\n            new HitCollector() {\n                public final void collect(int doc, float score) {\n                    if (score > 0.0f &&                         // ignore zeroed buckets\n                        (bits == null || bits.get(doc))) {      // skip docs not in bits\n                        totalHits[0]++;\n                        hq.insert(new ScoreDoc(doc, score));\n                    }\n                }\n            });\n\n        ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n        for (int i = hq.size() - 1; i >= 0; i--) {              // put docs in array\n            scoreDocs[i] = (ScoreDoc) hq.pop();\n        }\n\n        return new TopDocs(totalHits[0], scoreDocs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c6691cb6747f9e850337c706c06b92e9ddf816e1":["6decf4a21b049e524a98231b4df27f61c84f7b65"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6decf4a21b049e524a98231b4df27f61c84f7b65":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c6691cb6747f9e850337c706c06b92e9ddf816e1"]},"commit2Childs":{"c6691cb6747f9e850337c706c06b92e9ddf816e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6decf4a21b049e524a98231b4df27f61c84f7b65"],"6decf4a21b049e524a98231b4df27f61c84f7b65":["c6691cb6747f9e850337c706c06b92e9ddf816e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}