{"path":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/WildcardQueryNodeProcessor#postProcessNode(QueryNode).mjava","commits":[{"id":"f75cd88b219e040b204bff4c189784659752f786","date":1250640581,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/WildcardQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"/dev/null","sourceNew":"  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    // the old Lucene Parser ignores FuzzyQueryNode that are also PrefixWildcardQueryNode or WildcardQueryNode\n    // we do the same here, also ignore empty terms\n    if (node instanceof FieldQueryNode || node instanceof FuzzyQueryNode) {      \n      FieldQueryNode fqn = (FieldQueryNode) node;      \n      CharSequence text = fqn.getText(); \n      \n      // do not process wildcards for ParametricQueryNode and \n      // QuotedFieldQueryNode to reproduce the old parser behavior\n      if (fqn instanceof ParametricQueryNode \n          || fqn instanceof QuotedFieldQueryNode \n          || text.length() <= 0){\n        // Ignore empty terms\n        return node;\n      }\n      \n      // Code below simulates the old lucene parser behavior for wildcards\n      \n      if (isPrefixWildcard(text)) {        \n        PrefixWildcardQueryNode prefixWildcardQN = new PrefixWildcardQueryNode(fqn);\n        return prefixWildcardQN;\n        \n      } else if (isWildcard(text)){\n        WildcardQueryNode wildcardQN = new WildcardQueryNode(fqn);\n        return wildcardQN;\n      }\n             \n    }\n\n    return node;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/WildcardQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/WildcardQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    // the old Lucene Parser ignores FuzzyQueryNode that are also PrefixWildcardQueryNode or WildcardQueryNode\n    // we do the same here, also ignore empty terms\n    if (node instanceof FieldQueryNode || node instanceof FuzzyQueryNode) {      \n      FieldQueryNode fqn = (FieldQueryNode) node;      \n      CharSequence text = fqn.getText(); \n      \n      // do not process wildcards for ParametricQueryNode and \n      // QuotedFieldQueryNode to reproduce the old parser behavior\n      if (fqn instanceof ParametricQueryNode \n          || fqn instanceof QuotedFieldQueryNode \n          || text.length() <= 0){\n        // Ignore empty terms\n        return node;\n      }\n      \n      // Code below simulates the old lucene parser behavior for wildcards\n      \n      if (isPrefixWildcard(text)) {        \n        PrefixWildcardQueryNode prefixWildcardQN = new PrefixWildcardQueryNode(fqn);\n        return prefixWildcardQN;\n        \n      } else if (isWildcard(text)){\n        WildcardQueryNode wildcardQN = new WildcardQueryNode(fqn);\n        return wildcardQN;\n      }\n             \n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    // the old Lucene Parser ignores FuzzyQueryNode that are also PrefixWildcardQueryNode or WildcardQueryNode\n    // we do the same here, also ignore empty terms\n    if (node instanceof FieldQueryNode || node instanceof FuzzyQueryNode) {      \n      FieldQueryNode fqn = (FieldQueryNode) node;      \n      CharSequence text = fqn.getText(); \n      \n      // do not process wildcards for ParametricQueryNode and \n      // QuotedFieldQueryNode to reproduce the old parser behavior\n      if (fqn instanceof ParametricQueryNode \n          || fqn instanceof QuotedFieldQueryNode \n          || text.length() <= 0){\n        // Ignore empty terms\n        return node;\n      }\n      \n      // Code below simulates the old lucene parser behavior for wildcards\n      \n      if (isPrefixWildcard(text)) {        \n        PrefixWildcardQueryNode prefixWildcardQN = new PrefixWildcardQueryNode(fqn);\n        return prefixWildcardQN;\n        \n      } else if (isWildcard(text)){\n        WildcardQueryNode wildcardQN = new WildcardQueryNode(fqn);\n        return wildcardQN;\n      }\n             \n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/WildcardQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/WildcardQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    // the old Lucene Parser ignores FuzzyQueryNode that are also PrefixWildcardQueryNode or WildcardQueryNode\n    // we do the same here, also ignore empty terms\n    if (node instanceof FieldQueryNode || node instanceof FuzzyQueryNode) {      \n      FieldQueryNode fqn = (FieldQueryNode) node;      \n      CharSequence text = fqn.getText(); \n      \n      // do not process wildcards for ParametricQueryNode and \n      // QuotedFieldQueryNode to reproduce the old parser behavior\n      if (fqn instanceof ParametricQueryNode \n          || fqn instanceof QuotedFieldQueryNode \n          || text.length() <= 0){\n        // Ignore empty terms\n        return node;\n      }\n      \n      // Code below simulates the old lucene parser behavior for wildcards\n      \n      if (isPrefixWildcard(text)) {        \n        PrefixWildcardQueryNode prefixWildcardQN = new PrefixWildcardQueryNode(fqn);\n        return prefixWildcardQN;\n        \n      } else if (isWildcard(text)){\n        WildcardQueryNode wildcardQN = new WildcardQueryNode(fqn);\n        return wildcardQN;\n      }\n             \n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    // the old Lucene Parser ignores FuzzyQueryNode that are also PrefixWildcardQueryNode or WildcardQueryNode\n    // we do the same here, also ignore empty terms\n    if (node instanceof FieldQueryNode || node instanceof FuzzyQueryNode) {      \n      FieldQueryNode fqn = (FieldQueryNode) node;      \n      CharSequence text = fqn.getText(); \n      \n      // do not process wildcards for ParametricQueryNode and \n      // QuotedFieldQueryNode to reproduce the old parser behavior\n      if (fqn instanceof ParametricQueryNode \n          || fqn instanceof QuotedFieldQueryNode \n          || text.length() <= 0){\n        // Ignore empty terms\n        return node;\n      }\n      \n      // Code below simulates the old lucene parser behavior for wildcards\n      \n      if (isPrefixWildcard(text)) {        \n        PrefixWildcardQueryNode prefixWildcardQN = new PrefixWildcardQueryNode(fqn);\n        return prefixWildcardQN;\n        \n      } else if (isWildcard(text)){\n        WildcardQueryNode wildcardQN = new WildcardQueryNode(fqn);\n        return wildcardQN;\n      }\n             \n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f75cd88b219e040b204bff4c189784659752f786":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["f75cd88b219e040b204bff4c189784659752f786"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f75cd88b219e040b204bff4c189784659752f786"],"f75cd88b219e040b204bff4c189784659752f786":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}