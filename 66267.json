{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":"  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexReader reader = IndexReader.open(small, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n        base = docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(0, hits[0].doc);\n    assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","sourceOld":"  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexReader reader = IndexReader.open(small, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n        base = docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(0, hits[0].doc);\n    assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBoost().mjava","sourceNew":null,"sourceOld":"  public void testBoost() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexReader reader = IndexReader.open(small, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // test for correct application of query normalization\n    // must use a non score normalizing method for this.\n    Query q = csrq(\"data\", \"1\", \"6\", T, T);\n    q.setBoost(100);\n    search.search(q, null, new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(\"score for doc \" + (doc + base) + \" was not correct\", 1.0f, scorer.score());\n      }\n      @Override\n      public void setNextReader(IndexReader reader, int docBase) {\n        base = docBase;\n      }\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    //\n    // Ensure that boosting works to score one clause of a query higher\n    // than another.\n    //\n    Query q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(.1f);\n    Query q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    BooleanQuery bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #0\n    q1.setBoost(.1f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T, MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(1, hits[0].doc);\n    assertEquals(0, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n\n    q1 = csrq(\"data\", \"A\", \"A\", T, T); // matches document #0\n    q1.setBoost(10f);\n    q2 = csrq(\"data\", \"Z\", \"Z\", T, T); // matches document #1\n    bq = new BooleanQuery(true);\n    bq.add(q1, BooleanClause.Occur.SHOULD);\n    bq.add(q2, BooleanClause.Occur.SHOULD);\n\n    hits = search.search(bq, null, 1000).scoreDocs;\n    assertEquals(0, hits[0].doc);\n    assertEquals(1, hits[1].doc);\n    assertTrue(hits[0].score > hits[1].score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}