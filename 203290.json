{"path":"lucene/src/java/org/apache/lucene/index/MultiFields#docValues(String).mjava","commits":[{"id":"0e28c49f1fb6215a550fdadcf3805aa629b63ec0","date":1288081775,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFields#docValues(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocValues docValues(String field) throws IOException {\n    final DocValues result;\n\n    if (!docValues.containsKey(field)) {\n\n      // Lazy init: first time this field is requested, we\n      // create & add to docValues:\n      final List<MultiDocValues.DocValuesIndex> subs2 = new ArrayList<MultiDocValues.DocValuesIndex>();\n      final List<ReaderUtil.Slice> slices2 = new ArrayList<ReaderUtil.Slice>();\n\n      // Gather all sub-readers that share this field\n      for(int i=0;i<subs.length;i++) {\n        final DocValues values = subs[i].docValues(field);\n        if (values != null) {\n          subs2.add(new MultiDocValues.DocValuesIndex(values, i));\n          slices2.add(subSlices[i]);\n        }\n      }\n      result = subs2.isEmpty()?null: new MultiDocValues(subs2.toArray(DocValuesIndex.EMPTY_ARRAY),\n                                slices2.toArray(ReaderUtil.Slice.EMPTY_ARRAY));\n      docValues.put(field, result);\n    } else {\n      result = docValues.get(field);\n    }\n\n    return result;  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39f3757037aa8f710c0cbf9a76a332de735f58b0","date":1288384416,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFields#docValues(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFields#docValues(String).mjava","sourceNew":"  @Override\n  public DocValues docValues(String field) throws IOException {\n    final DocValues result;\n\n    if (!docValues.containsKey(field)) {\n\n      // Lazy init: first time this field is requested, we\n      // create & add to docValues:\n      final List<MultiDocValues.DocValuesIndex> docValuesIndex = new ArrayList<MultiDocValues.DocValuesIndex>();\n      int docsUpto = 0;\n      Values type = null;\n      // Gather all sub-readers that share this field\n      for(int i=0;i<subs.length;i++) {\n         DocValues values = subs[i].docValues(field);\n         final int start = subSlices[i].start;\n         final int length = subSlices[i].length;\n        if (values != null) {\n          if (docsUpto != start) {\n            type = values.type();\n            docValuesIndex.add(new MultiDocValues.DocValuesIndex(new MultiDocValues.DummyDocValues(start, type), docsUpto, start - docsUpto));\n          }\n          docValuesIndex.add(new MultiDocValues.DocValuesIndex(values, start, length));\n          docsUpto = start+length;\n\n        } else if (i+1 == subs.length && !docValuesIndex.isEmpty()) {\n          docValuesIndex.add(new MultiDocValues.DocValuesIndex(\n              new MultiDocValues.DummyDocValues(start, type), docsUpto, start\n                  - docsUpto));\n        }\n       \n      }\n      result = docValuesIndex.isEmpty()?null: new MultiDocValues(docValuesIndex.toArray(DocValuesIndex.EMPTY_ARRAY));\n      docValues.put(field, result);\n    } else {\n      result = docValues.get(field);\n    }\n\n    return result;  }\n\n","sourceOld":"  @Override\n  public DocValues docValues(String field) throws IOException {\n    final DocValues result;\n\n    if (!docValues.containsKey(field)) {\n\n      // Lazy init: first time this field is requested, we\n      // create & add to docValues:\n      final List<MultiDocValues.DocValuesIndex> subs2 = new ArrayList<MultiDocValues.DocValuesIndex>();\n      final List<ReaderUtil.Slice> slices2 = new ArrayList<ReaderUtil.Slice>();\n\n      // Gather all sub-readers that share this field\n      for(int i=0;i<subs.length;i++) {\n        final DocValues values = subs[i].docValues(field);\n        if (values != null) {\n          subs2.add(new MultiDocValues.DocValuesIndex(values, i));\n          slices2.add(subSlices[i]);\n        }\n      }\n      result = subs2.isEmpty()?null: new MultiDocValues(subs2.toArray(DocValuesIndex.EMPTY_ARRAY),\n                                slices2.toArray(ReaderUtil.Slice.EMPTY_ARRAY));\n      docValues.put(field, result);\n    } else {\n      result = docValues.get(field);\n    }\n\n    return result;  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2fc2eb37a1f19e90850f787d9e085950ebfa04","date":1291597075,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFields#docValues(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFields#docValues(String).mjava","sourceNew":"  @Override\n  public DocValues docValues(String field) throws IOException {\n    final DocValues result;\n\n    if (!docValues.containsKey(field)) {\n\n      // Lazy init: first time this field is requested, we\n      // create & add to docValues:\n      final List<MultiDocValues.DocValuesIndex> docValuesIndex = new ArrayList<MultiDocValues.DocValuesIndex>();\n      int docsUpto = 0;\n      Type type = null;\n      // Gather all sub-readers that share this field\n      for(int i=0;i<subs.length;i++) {\n         DocValues values = subs[i].docValues(field);\n         final int start = subSlices[i].start;\n         final int length = subSlices[i].length;\n        if (values != null) {\n          if (docsUpto != start) {\n            type = values.type();\n            docValuesIndex.add(new MultiDocValues.DocValuesIndex(new MultiDocValues.DummyDocValues(start, type), docsUpto, start - docsUpto));\n          }\n          docValuesIndex.add(new MultiDocValues.DocValuesIndex(values, start, length));\n          docsUpto = start+length;\n\n        } else if (i+1 == subs.length && !docValuesIndex.isEmpty()) {\n          docValuesIndex.add(new MultiDocValues.DocValuesIndex(\n              new MultiDocValues.DummyDocValues(start, type), docsUpto, start\n                  - docsUpto));\n        }\n       \n      }\n      result = docValuesIndex.isEmpty()?null: new MultiDocValues(docValuesIndex.toArray(DocValuesIndex.EMPTY_ARRAY));\n      docValues.put(field, result);\n    } else {\n      result = docValues.get(field);\n    }\n\n    return result;  }\n\n","sourceOld":"  @Override\n  public DocValues docValues(String field) throws IOException {\n    final DocValues result;\n\n    if (!docValues.containsKey(field)) {\n\n      // Lazy init: first time this field is requested, we\n      // create & add to docValues:\n      final List<MultiDocValues.DocValuesIndex> docValuesIndex = new ArrayList<MultiDocValues.DocValuesIndex>();\n      int docsUpto = 0;\n      Values type = null;\n      // Gather all sub-readers that share this field\n      for(int i=0;i<subs.length;i++) {\n         DocValues values = subs[i].docValues(field);\n         final int start = subSlices[i].start;\n         final int length = subSlices[i].length;\n        if (values != null) {\n          if (docsUpto != start) {\n            type = values.type();\n            docValuesIndex.add(new MultiDocValues.DocValuesIndex(new MultiDocValues.DummyDocValues(start, type), docsUpto, start - docsUpto));\n          }\n          docValuesIndex.add(new MultiDocValues.DocValuesIndex(values, start, length));\n          docsUpto = start+length;\n\n        } else if (i+1 == subs.length && !docValuesIndex.isEmpty()) {\n          docValuesIndex.add(new MultiDocValues.DocValuesIndex(\n              new MultiDocValues.DummyDocValues(start, type), docsUpto, start\n                  - docsUpto));\n        }\n       \n      }\n      result = docValuesIndex.isEmpty()?null: new MultiDocValues(docValuesIndex.toArray(DocValuesIndex.EMPTY_ARRAY));\n      docValues.put(field, result);\n    } else {\n      result = docValues.get(field);\n    }\n\n    return result;  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFields#docValues(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFields#docValues(String).mjava","sourceNew":"  @Override\n  public DocValues docValues(String field) throws IOException {\n    DocValues result = docValues.get(field);\n    if (result == null) {\n      // Lazy init: first time this field is requested, we\n      // create & add to docValues:\n      final List<MultiDocValues.DocValuesIndex> docValuesIndex = new ArrayList<MultiDocValues.DocValuesIndex>();\n      int docsUpto = 0;\n      Type type = null;\n      // Gather all sub-readers that share this field\n      for(int i=0;i<subs.length;i++) {\n         DocValues values = subs[i].docValues(field);\n         final int start = subSlices[i].start;\n         final int length = subSlices[i].length;\n        if (values != null) {\n          if (docsUpto != start) {\n            type = values.type();\n            docValuesIndex.add(new MultiDocValues.DocValuesIndex(new MultiDocValues.DummyDocValues(start, type), docsUpto, start - docsUpto));\n          }\n          docValuesIndex.add(new MultiDocValues.DocValuesIndex(values, start, length));\n          docsUpto = start+length;\n\n        } else if (i+1 == subs.length && !docValuesIndex.isEmpty()) {\n          docValuesIndex.add(new MultiDocValues.DocValuesIndex(\n              new MultiDocValues.DummyDocValues(start, type), docsUpto, start\n                  - docsUpto));\n        }\n      }\n      if (docValuesIndex.isEmpty()) {\n        return null;\n      }\n      result = new MultiDocValues(docValuesIndex.toArray(DocValuesIndex.EMPTY_ARRAY));\n      docValues.put(field, result);\n    } \n    return result; \n  }\n\n","sourceOld":"  @Override\n  public DocValues docValues(String field) throws IOException {\n    final DocValues result;\n\n    if (!docValues.containsKey(field)) {\n\n      // Lazy init: first time this field is requested, we\n      // create & add to docValues:\n      final List<MultiDocValues.DocValuesIndex> docValuesIndex = new ArrayList<MultiDocValues.DocValuesIndex>();\n      int docsUpto = 0;\n      Type type = null;\n      // Gather all sub-readers that share this field\n      for(int i=0;i<subs.length;i++) {\n         DocValues values = subs[i].docValues(field);\n         final int start = subSlices[i].start;\n         final int length = subSlices[i].length;\n        if (values != null) {\n          if (docsUpto != start) {\n            type = values.type();\n            docValuesIndex.add(new MultiDocValues.DocValuesIndex(new MultiDocValues.DummyDocValues(start, type), docsUpto, start - docsUpto));\n          }\n          docValuesIndex.add(new MultiDocValues.DocValuesIndex(values, start, length));\n          docsUpto = start+length;\n\n        } else if (i+1 == subs.length && !docValuesIndex.isEmpty()) {\n          docValuesIndex.add(new MultiDocValues.DocValuesIndex(\n              new MultiDocValues.DummyDocValues(start, type), docsUpto, start\n                  - docsUpto));\n        }\n       \n      }\n      result = docValuesIndex.isEmpty()?null: new MultiDocValues(docValuesIndex.toArray(DocValuesIndex.EMPTY_ARRAY));\n      docValues.put(field, result);\n    } else {\n      result = docValues.get(field);\n    }\n\n    return result;  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFields#docValues(String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocValues docValues(String field) throws IOException {\n    DocValues result = docValues.get(field);\n    if (result == null) {\n      // Lazy init: first time this field is requested, we\n      // create & add to docValues:\n      final List<MultiDocValues.DocValuesIndex> docValuesIndex = new ArrayList<MultiDocValues.DocValuesIndex>();\n      int docsUpto = 0;\n      Type type = null;\n      // Gather all sub-readers that share this field\n      for(int i=0;i<subs.length;i++) {\n         DocValues values = subs[i].docValues(field);\n         final int start = subSlices[i].start;\n         final int length = subSlices[i].length;\n        if (values != null) {\n          if (docsUpto != start) {\n            type = values.type();\n            docValuesIndex.add(new MultiDocValues.DocValuesIndex(new MultiDocValues.DummyDocValues(start, type), docsUpto, start - docsUpto));\n          }\n          docValuesIndex.add(new MultiDocValues.DocValuesIndex(values, start, length));\n          docsUpto = start+length;\n\n        } else if (i+1 == subs.length && !docValuesIndex.isEmpty()) {\n          docValuesIndex.add(new MultiDocValues.DocValuesIndex(\n              new MultiDocValues.DummyDocValues(start, type), docsUpto, start\n                  - docsUpto));\n        }\n      }\n      if (docValuesIndex.isEmpty()) {\n        return null;\n      }\n      result = new MultiDocValues(docValuesIndex.toArray(DocValuesIndex.EMPTY_ARRAY));\n      docValues.put(field, result);\n    } \n    return result; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"39f3757037aa8f710c0cbf9a76a332de735f58b0":["0e28c49f1fb6215a550fdadcf3805aa629b63ec0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["aa2fc2eb37a1f19e90850f787d9e085950ebfa04","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aa2fc2eb37a1f19e90850f787d9e085950ebfa04":["39f3757037aa8f710c0cbf9a76a332de735f58b0"],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"39f3757037aa8f710c0cbf9a76a332de735f58b0":["aa2fc2eb37a1f19e90850f787d9e085950ebfa04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["135621f3a0670a9394eb563224a3b76cc4dddc0f","ab5cb6a74aefb78aa0569857970b9151dfe2e787","0e28c49f1fb6215a550fdadcf3805aa629b63ec0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"aa2fc2eb37a1f19e90850f787d9e085950ebfa04":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":["39f3757037aa8f710c0cbf9a76a332de735f58b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}