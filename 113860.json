{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#docPairs(int,String).mjava","commits":[{"id":"f8c0e05ed2dea5beb7c0246a2a6e68f28595357b","date":1479136768,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#docPairs(int,String).mjava","pathOld":"/dev/null","sourceNew":"  String[] docPairs(int base, String sSeq) {\n    List<String> pairs = new ArrayList<>();\n    final int iSeq = base * 100;\n    pairs.add(id);\n    pairs.add(sSeq + base); // aaa1\n    pairs.add(\"s_sing\");\n    pairs.add(Integer.toString(iSeq + 1)); // 101\n    pairs.add(\"i_sing\");\n    pairs.add(Integer.toString(iSeq + 2)); // 102\n    pairs.add(\"f_sing\");\n    pairs.add(Float.toString(iSeq + 3)); // 103.0\n    pairs.add(\"l_sing\");\n    pairs.add(Long.toString(iSeq + 4)); // 104\n    pairs.add(\"d_sing\");\n    pairs.add(Double.toString(iSeq + 5)); // 105\n    pairs.add(\"dt_sing\");\n    pairs.add(String.format(\"2000-01-01T%02d:00:00Z\", base)); // Works as long as we add fewer than 60 docs\n    pairs.add(\"b_sing\");\n    pairs.add((base % 2) == 0 ? \"T\" : \"F\"); // Tricky\n\n    String[] ret = new String[pairs.size()];\n    return pairs.toArray(ret);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8243e301531f97de264740d6afa71de6781dd64","date":1479139589,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#docPairs(int,String).mjava","pathOld":"/dev/null","sourceNew":"  String[] docPairs(int base, String sSeq) {\n    List<String> pairs = new ArrayList<>();\n    final int iSeq = base * 100;\n    pairs.add(id);\n    pairs.add(sSeq + base); // aaa1\n    pairs.add(\"s_sing\");\n    pairs.add(Integer.toString(iSeq + 1)); // 101\n    pairs.add(\"i_sing\");\n    pairs.add(Integer.toString(iSeq + 2)); // 102\n    pairs.add(\"f_sing\");\n    pairs.add(Float.toString(iSeq + 3)); // 103.0\n    pairs.add(\"l_sing\");\n    pairs.add(Long.toString(iSeq + 4)); // 104\n    pairs.add(\"d_sing\");\n    pairs.add(Double.toString(iSeq + 5)); // 105\n    pairs.add(\"dt_sing\");\n    pairs.add(String.format(\"2000-01-01T%02d:00:00Z\", base)); // Works as long as we add fewer than 60 docs\n    pairs.add(\"b_sing\");\n    pairs.add((base % 2) == 0 ? \"T\" : \"F\"); // Tricky\n\n    String[] ret = new String[pairs.size()];\n    return pairs.toArray(ret);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c569716c563b5ac0a089f0bd851e8ffcf0d893a8","date":1479157154,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#docPairs(int,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#docPairs(int,String).mjava","sourceNew":"  String[] docPairs(int base, String sSeq) {\n    List<String> pairs = new ArrayList<>();\n    final int iSeq = base * 100;\n    pairs.add(id);\n    pairs.add(sSeq + base); // aaa1\n    pairs.add(\"s_sing\");\n    pairs.add(Integer.toString(iSeq + 1)); // 101\n    pairs.add(\"i_sing\");\n    pairs.add(Integer.toString(iSeq + 2)); // 102\n    pairs.add(\"f_sing\");\n    pairs.add(Float.toString(iSeq + 3)); // 103.0\n    pairs.add(\"l_sing\");\n    pairs.add(Long.toString(iSeq + 4)); // 104\n    pairs.add(\"d_sing\");\n    pairs.add(Double.toString(iSeq + 5)); // 105\n    pairs.add(\"dt_sing\");\n    pairs.add(String.format(Locale.ROOT, \"2000-01-01T%02d:00:00Z\", base)); // Works as long as we add fewer than 60 docs\n    pairs.add(\"b_sing\");\n    pairs.add((base % 2) == 0 ? \"T\" : \"F\"); // Tricky\n\n    String[] ret = new String[pairs.size()];\n    return pairs.toArray(ret);\n  }\n\n","sourceOld":"  String[] docPairs(int base, String sSeq) {\n    List<String> pairs = new ArrayList<>();\n    final int iSeq = base * 100;\n    pairs.add(id);\n    pairs.add(sSeq + base); // aaa1\n    pairs.add(\"s_sing\");\n    pairs.add(Integer.toString(iSeq + 1)); // 101\n    pairs.add(\"i_sing\");\n    pairs.add(Integer.toString(iSeq + 2)); // 102\n    pairs.add(\"f_sing\");\n    pairs.add(Float.toString(iSeq + 3)); // 103.0\n    pairs.add(\"l_sing\");\n    pairs.add(Long.toString(iSeq + 4)); // 104\n    pairs.add(\"d_sing\");\n    pairs.add(Double.toString(iSeq + 5)); // 105\n    pairs.add(\"dt_sing\");\n    pairs.add(String.format(\"2000-01-01T%02d:00:00Z\", base)); // Works as long as we add fewer than 60 docs\n    pairs.add(\"b_sing\");\n    pairs.add((base % 2) == 0 ? \"T\" : \"F\"); // Tricky\n\n    String[] ret = new String[pairs.size()];\n    return pairs.toArray(ret);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21019aa828c8c9b0153877543a8b3f200bf2ca19","date":1479224450,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#docPairs(int,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#docPairs(int,String).mjava","sourceNew":"  String[] docPairs(int base, String sSeq) {\n    List<String> pairs = new ArrayList<>();\n    final int iSeq = base * 100;\n    pairs.add(id);\n    pairs.add(sSeq + base); // aaa1\n    pairs.add(\"s_sing\");\n    pairs.add(Integer.toString(iSeq + 1)); // 101\n    pairs.add(\"i_sing\");\n    pairs.add(Integer.toString(iSeq + 2)); // 102\n    pairs.add(\"f_sing\");\n    pairs.add(Float.toString(iSeq + 3)); // 103.0\n    pairs.add(\"l_sing\");\n    pairs.add(Long.toString(iSeq + 4)); // 104\n    pairs.add(\"d_sing\");\n    pairs.add(Double.toString(iSeq + 5)); // 105\n    pairs.add(\"dt_sing\");\n    pairs.add(String.format(Locale.ROOT, \"2000-01-01T%02d:00:00Z\", base)); // Works as long as we add fewer than 60 docs\n    pairs.add(\"b_sing\");\n    pairs.add((base % 2) == 0 ? \"T\" : \"F\"); // Tricky\n\n    String[] ret = new String[pairs.size()];\n    return pairs.toArray(ret);\n  }\n\n","sourceOld":"  String[] docPairs(int base, String sSeq) {\n    List<String> pairs = new ArrayList<>();\n    final int iSeq = base * 100;\n    pairs.add(id);\n    pairs.add(sSeq + base); // aaa1\n    pairs.add(\"s_sing\");\n    pairs.add(Integer.toString(iSeq + 1)); // 101\n    pairs.add(\"i_sing\");\n    pairs.add(Integer.toString(iSeq + 2)); // 102\n    pairs.add(\"f_sing\");\n    pairs.add(Float.toString(iSeq + 3)); // 103.0\n    pairs.add(\"l_sing\");\n    pairs.add(Long.toString(iSeq + 4)); // 104\n    pairs.add(\"d_sing\");\n    pairs.add(Double.toString(iSeq + 5)); // 105\n    pairs.add(\"dt_sing\");\n    pairs.add(String.format(\"2000-01-01T%02d:00:00Z\", base)); // Works as long as we add fewer than 60 docs\n    pairs.add(\"b_sing\");\n    pairs.add((base % 2) == 0 ? \"T\" : \"F\"); // Tricky\n\n    String[] ret = new String[pairs.size()];\n    return pairs.toArray(ret);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c8243e301531f97de264740d6afa71de6781dd64":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f8c0e05ed2dea5beb7c0246a2a6e68f28595357b"],"21019aa828c8c9b0153877543a8b3f200bf2ca19":["c8243e301531f97de264740d6afa71de6781dd64","c569716c563b5ac0a089f0bd851e8ffcf0d893a8"],"f8c0e05ed2dea5beb7c0246a2a6e68f28595357b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c569716c563b5ac0a089f0bd851e8ffcf0d893a8":["f8c0e05ed2dea5beb7c0246a2a6e68f28595357b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c569716c563b5ac0a089f0bd851e8ffcf0d893a8"]},"commit2Childs":{"c8243e301531f97de264740d6afa71de6781dd64":["21019aa828c8c9b0153877543a8b3f200bf2ca19"],"21019aa828c8c9b0153877543a8b3f200bf2ca19":[],"f8c0e05ed2dea5beb7c0246a2a6e68f28595357b":["c8243e301531f97de264740d6afa71de6781dd64","c569716c563b5ac0a089f0bd851e8ffcf0d893a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c8243e301531f97de264740d6afa71de6781dd64","f8c0e05ed2dea5beb7c0246a2a6e68f28595357b"],"c569716c563b5ac0a089f0bd851e8ffcf0d893a8":["21019aa828c8c9b0153877543a8b3f200bf2ca19","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["21019aa828c8c9b0153877543a8b3f200bf2ca19","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}