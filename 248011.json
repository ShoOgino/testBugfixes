{"path":"solr/core/src/java/org/apache/solr/update/PeerSync#compareFingerprint(SyncShardRequest).mjava","commits":[{"id":"979e22aa7c63c9dc651adf861610c7e444d45832","date":1454615713,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#compareFingerprint(SyncShardRequest).mjava","pathOld":"/dev/null","sourceNew":"  private boolean compareFingerprint(SyncShardRequest sreq) {\n    if (sreq.fingerprint == null) return true;\n    try {\n      IndexFingerprint ourFingerprint = IndexFingerprint.getFingerprint(core, Long.MAX_VALUE);\n      int cmp = IndexFingerprint.compare(ourFingerprint, sreq.fingerprint);\n      log.info(\"Fingerprint comparison: \" + cmp);\n      return cmp == 0;  // currently, we only check for equality...\n    } catch(IOException e){\n      log.error(msg() + \"Error getting index fingerprint\", e);\n      return false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1704c078ec59838c9d95d5bf5738b393b537494","date":1454693901,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#compareFingerprint(SyncShardRequest).mjava","pathOld":"/dev/null","sourceNew":"  private boolean compareFingerprint(SyncShardRequest sreq) {\n    if (sreq.fingerprint == null) return true;\n    try {\n      IndexFingerprint ourFingerprint = IndexFingerprint.getFingerprint(core, Long.MAX_VALUE);\n      int cmp = IndexFingerprint.compare(ourFingerprint, sreq.fingerprint);\n      log.info(\"Fingerprint comparison: \" + cmp);\n      return cmp == 0;  // currently, we only check for equality...\n    } catch(IOException e){\n      log.error(msg() + \"Error getting index fingerprint\", e);\n      return false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#compareFingerprint(SyncShardRequest).mjava","pathOld":"/dev/null","sourceNew":"  private boolean compareFingerprint(SyncShardRequest sreq) {\n    if (sreq.fingerprint == null) return true;\n    try {\n      IndexFingerprint ourFingerprint = IndexFingerprint.getFingerprint(core, Long.MAX_VALUE);\n      int cmp = IndexFingerprint.compare(ourFingerprint, sreq.fingerprint);\n      log.info(\"Fingerprint comparison: \" + cmp);\n      return cmp == 0;  // currently, we only check for equality...\n    } catch(IOException e){\n      log.error(msg() + \"Error getting index fingerprint\", e);\n      return false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c835cc1a7b07477a469cdb1bf6c67bc05b85c07","date":1471849333,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#compareFingerprint(SyncShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#compareFingerprint(SyncShardRequest).mjava","sourceNew":"  private boolean compareFingerprint(SyncShardRequest sreq) {\n    if (sreq.fingerprint == null) return true;\n    try {\n      // check our fingerprint only upto the max version in the other fingerprint. \n      // Otherwise for missed updates (look at missed update test in PeerSyncTest) ourFingerprint won't match with otherFingerprint   \n      IndexFingerprint ourFingerprint = IndexFingerprint.getFingerprint(core, sreq.fingerprint.getMaxVersionSpecified());\n      int cmp = IndexFingerprint.compare(sreq.fingerprint, ourFingerprint);\n      log.info(\"Fingerprint comparison: {}\" , cmp);\n      if(cmp != 0) {\n        log.info(\"Other fingerprint: {}, Our fingerprint: {}\", sreq.fingerprint , ourFingerprint);\n      }\n      return cmp == 0;  // currently, we only check for equality...\n    } catch(IOException e){\n      log.error(msg() + \"Error getting index fingerprint\", e);\n      return false;\n    }\n  }\n\n","sourceOld":"  private boolean compareFingerprint(SyncShardRequest sreq) {\n    if (sreq.fingerprint == null) return true;\n    try {\n      IndexFingerprint ourFingerprint = IndexFingerprint.getFingerprint(core, Long.MAX_VALUE);\n      int cmp = IndexFingerprint.compare(ourFingerprint, sreq.fingerprint);\n      log.info(\"Fingerprint comparison: \" + cmp);\n      return cmp == 0;  // currently, we only check for equality...\n    } catch(IOException e){\n      log.error(msg() + \"Error getting index fingerprint\", e);\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#compareFingerprint(SyncShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#compareFingerprint(SyncShardRequest).mjava","sourceNew":"  private boolean compareFingerprint(SyncShardRequest sreq) {\n    if (sreq.fingerprint == null) return true;\n    try {\n      // check our fingerprint only upto the max version in the other fingerprint. \n      // Otherwise for missed updates (look at missed update test in PeerSyncTest) ourFingerprint won't match with otherFingerprint   \n      IndexFingerprint ourFingerprint = IndexFingerprint.getFingerprint(core, sreq.fingerprint.getMaxVersionSpecified());\n      int cmp = IndexFingerprint.compare(sreq.fingerprint, ourFingerprint);\n      log.info(\"Fingerprint comparison: {}\" , cmp);\n      if(cmp != 0) {\n        log.info(\"Other fingerprint: {}, Our fingerprint: {}\", sreq.fingerprint , ourFingerprint);\n      }\n      return cmp == 0;  // currently, we only check for equality...\n    } catch(IOException e){\n      log.error(msg() + \"Error getting index fingerprint\", e);\n      return false;\n    }\n  }\n\n","sourceOld":"  private boolean compareFingerprint(SyncShardRequest sreq) {\n    if (sreq.fingerprint == null) return true;\n    try {\n      IndexFingerprint ourFingerprint = IndexFingerprint.getFingerprint(core, Long.MAX_VALUE);\n      int cmp = IndexFingerprint.compare(ourFingerprint, sreq.fingerprint);\n      log.info(\"Fingerprint comparison: \" + cmp);\n      return cmp == 0;  // currently, we only check for equality...\n    } catch(IOException e){\n      log.error(msg() + \"Error getting index fingerprint\", e);\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#compareFingerprint(SyncShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#compareFingerprint(SyncShardRequest).mjava","sourceNew":"  private boolean compareFingerprint(SyncShardRequest sreq) {\n    if (sreq.fingerprint == null) return true;\n    try {\n      // check our fingerprint only upto the max version in the other fingerprint. \n      // Otherwise for missed updates (look at missed update test in PeerSyncTest) ourFingerprint won't match with otherFingerprint   \n      IndexFingerprint ourFingerprint = IndexFingerprint.getFingerprint(core, sreq.fingerprint.getMaxVersionSpecified());\n      int cmp = IndexFingerprint.compare(sreq.fingerprint, ourFingerprint);\n      log.info(\"Fingerprint comparison: {}\" , cmp);\n      if(cmp != 0) {\n        log.info(\"Other fingerprint: {}, Our fingerprint: {}\", sreq.fingerprint , ourFingerprint);\n      }\n      return cmp == 0;  // currently, we only check for equality...\n    } catch(IOException e){\n      log.error(msg() + \"Error getting index fingerprint\", e);\n      return false;\n    }\n  }\n\n","sourceOld":"  private boolean compareFingerprint(SyncShardRequest sreq) {\n    if (sreq.fingerprint == null) return true;\n    try {\n      IndexFingerprint ourFingerprint = IndexFingerprint.getFingerprint(core, Long.MAX_VALUE);\n      int cmp = IndexFingerprint.compare(ourFingerprint, sreq.fingerprint);\n      log.info(\"Fingerprint comparison: \" + cmp);\n      return cmp == 0;  // currently, we only check for equality...\n    } catch(IOException e){\n      log.error(msg() + \"Error getting index fingerprint\", e);\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740d649f013f07efbeb73ca854f106c60166e7c0","date":1587431295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#compareFingerprint(SyncShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#compareFingerprint(SyncShardRequest).mjava","sourceNew":"  private boolean compareFingerprint(SyncShardRequest sreq) {\n    if (sreq.fingerprint == null) return true;\n    try {\n      // check our fingerprint only upto the max version in the other fingerprint. \n      // Otherwise for missed updates (look at missed update test in PeerSyncTest) ourFingerprint won't match with otherFingerprint   \n      IndexFingerprint ourFingerprint = IndexFingerprint.getFingerprint(core, sreq.fingerprint.getMaxVersionSpecified());\n      int cmp = IndexFingerprint.compare(sreq.fingerprint, ourFingerprint);\n      log.info(\"Fingerprint comparison: {}\" , cmp);\n      if(cmp != 0) {\n        log.info(\"Other fingerprint: {}, Our fingerprint: {}\", sreq.fingerprint , ourFingerprint);\n      }\n      return cmp == 0;  // currently, we only check for equality...\n    } catch(IOException e){\n      log.error(\"{} Error getting index fingerprint\", msg(), e);\n      return false;\n    }\n  }\n\n","sourceOld":"  private boolean compareFingerprint(SyncShardRequest sreq) {\n    if (sreq.fingerprint == null) return true;\n    try {\n      // check our fingerprint only upto the max version in the other fingerprint. \n      // Otherwise for missed updates (look at missed update test in PeerSyncTest) ourFingerprint won't match with otherFingerprint   \n      IndexFingerprint ourFingerprint = IndexFingerprint.getFingerprint(core, sreq.fingerprint.getMaxVersionSpecified());\n      int cmp = IndexFingerprint.compare(sreq.fingerprint, ourFingerprint);\n      log.info(\"Fingerprint comparison: {}\" , cmp);\n      if(cmp != 0) {\n        log.info(\"Other fingerprint: {}, Our fingerprint: {}\", sreq.fingerprint , ourFingerprint);\n      }\n      return cmp == 0;  // currently, we only check for equality...\n    } catch(IOException e){\n      log.error(msg() + \"Error getting index fingerprint\", e);\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"740d649f013f07efbeb73ca854f106c60166e7c0":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"4c835cc1a7b07477a469cdb1bf6c67bc05b85c07":["979e22aa7c63c9dc651adf861610c7e444d45832"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","979e22aa7c63c9dc651adf861610c7e444d45832"],"979e22aa7c63c9dc651adf861610c7e444d45832":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b1704c078ec59838c9d95d5bf5738b393b537494":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","979e22aa7c63c9dc651adf861610c7e444d45832"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["979e22aa7c63c9dc651adf861610c7e444d45832","4c835cc1a7b07477a469cdb1bf6c67bc05b85c07"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["979e22aa7c63c9dc651adf861610c7e444d45832","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["740d649f013f07efbeb73ca854f106c60166e7c0"]},"commit2Childs":{"740d649f013f07efbeb73ca854f106c60166e7c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4c835cc1a7b07477a469cdb1bf6c67bc05b85c07":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","979e22aa7c63c9dc651adf861610c7e444d45832","b1704c078ec59838c9d95d5bf5738b393b537494"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"979e22aa7c63c9dc651adf861610c7e444d45832":["4c835cc1a7b07477a469cdb1bf6c67bc05b85c07","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b1704c078ec59838c9d95d5bf5738b393b537494","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b1704c078ec59838c9d95d5bf5738b393b537494":[],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["740d649f013f07efbeb73ca854f106c60166e7c0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","b1704c078ec59838c9d95d5bf5738b393b537494","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}