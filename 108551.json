{"path":"lucene/src/java/org/apache/lucene/document/DocValuesField#[T-extends-AbstractField]_set(T,Type).mjava","commits":[{"id":"a465ec8e22527bb8add54f75551ee9557a56de25","date":1295309224,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/DocValuesField#[T-extends-AbstractField]_set(T,Type).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/ValuesField#[T-extends-AbstractField]_set(T,Type).mjava","sourceNew":"  /**\n   * Sets a new {@link PerDocFieldValues} instance on the given field with the\n   * given type and returns it.\n   * \n   */\n  public static <T extends AbstractField> T set(T field, Type type) {\n    if (field instanceof DocValuesField)\n      return field;\n    final DocValuesField valField = new DocValuesField();\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = field.isBinary() ? new BytesRef(field.getBinaryValue(),\n          field.getBinaryOffset(), field.getBinaryLength()) : new BytesRef(\n          field.stringValue());\n      valField.setBytes(ref, type);\n      break;\n    case PACKED_INTS:\n      valField.setInt(Long.parseLong(field.stringValue()));\n      break;\n    case SIMPLE_FLOAT_4BYTE:\n      valField.setFloat(Float.parseFloat(field.stringValue()));\n      break;\n    case SIMPLE_FLOAT_8BYTE:\n      valField.setFloat(Double.parseDouble(field.stringValue()));\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return valField.set(field);\n  }\n\n","sourceOld":"  public static <T extends AbstractField> T set(T field, Type type) {\n    if (field instanceof ValuesField)\n      return field;\n    final ValuesField valField = new ValuesField();\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = field.isBinary() ? new BytesRef(field.getBinaryValue(),\n          field.getBinaryOffset(), field.getBinaryLength()) : new BytesRef(\n          field.stringValue());\n      valField.setBytes(ref, type);\n      break;\n    case PACKED_INTS:\n      valField.setInt(Long.parseLong(field.stringValue()));\n      break;\n    case SIMPLE_FLOAT_4BYTE:\n      valField.setFloat(Float.parseFloat(field.stringValue()));\n      break;\n    case SIMPLE_FLOAT_8BYTE:\n      valField.setFloat(Double.parseDouble(field.stringValue()));\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return valField.set(field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85130289d2ed101fcc2d8798511c7c5b020ffab4","date":1297239859,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/DocValuesField#[T-extends-AbstractField]_set(T,Type).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/DocValuesField#[T-extends-AbstractField]_set(T,Type).mjava","sourceNew":"  /**\n   * Sets a new {@link PerDocFieldValues} instance on the given field with the\n   * given type and returns it.\n   * \n   */\n  public static <T extends AbstractField> T set(T field, Type type) {\n    if (field instanceof DocValuesField)\n      return field;\n    final DocValuesField valField = new DocValuesField();\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = field.isBinary() ? new BytesRef(field.getBinaryValue(),\n          field.getBinaryOffset(), field.getBinaryLength()) : new BytesRef(\n          field.stringValue());\n      valField.setBytes(ref, type);\n      break;\n    case INTS:\n      valField.setInt(Long.parseLong(field.stringValue()));\n      break;\n    case FLOAT_32:\n      valField.setFloat(Float.parseFloat(field.stringValue()));\n      break;\n    case FLOAT_64:\n      valField.setFloat(Double.parseDouble(field.stringValue()));\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return valField.set(field);\n  }\n\n","sourceOld":"  /**\n   * Sets a new {@link PerDocFieldValues} instance on the given field with the\n   * given type and returns it.\n   * \n   */\n  public static <T extends AbstractField> T set(T field, Type type) {\n    if (field instanceof DocValuesField)\n      return field;\n    final DocValuesField valField = new DocValuesField();\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = field.isBinary() ? new BytesRef(field.getBinaryValue(),\n          field.getBinaryOffset(), field.getBinaryLength()) : new BytesRef(\n          field.stringValue());\n      valField.setBytes(ref, type);\n      break;\n    case PACKED_INTS:\n      valField.setInt(Long.parseLong(field.stringValue()));\n      break;\n    case SIMPLE_FLOAT_4BYTE:\n      valField.setFloat(Float.parseFloat(field.stringValue()));\n      break;\n    case SIMPLE_FLOAT_8BYTE:\n      valField.setFloat(Double.parseDouble(field.stringValue()));\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return valField.set(field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39d51e9acac1e629cffe47855e85dc6dedc4754d","date":1305711497,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/DocValuesField#[T-extends-AbstractField]_set(T,ValueType).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/DocValuesField#[T-extends-AbstractField]_set(T,Type).mjava","sourceNew":"  /**\n   * Sets a new {@link PerDocFieldValues} instance on the given field with the\n   * given type and returns it.\n   * \n   */\n  public static <T extends AbstractField> T set(T field, ValueType type) {\n    if (field instanceof DocValuesField)\n      return field;\n    final DocValuesField valField = new DocValuesField();\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = field.isBinary() ? new BytesRef(field.getBinaryValue(),\n          field.getBinaryOffset(), field.getBinaryLength()) : new BytesRef(\n          field.stringValue());\n      valField.setBytes(ref, type);\n      break;\n    case INTS:\n      valField.setInt(Long.parseLong(field.stringValue()));\n      break;\n    case FLOAT_32:\n      valField.setFloat(Float.parseFloat(field.stringValue()));\n      break;\n    case FLOAT_64:\n      valField.setFloat(Double.parseDouble(field.stringValue()));\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return valField.set(field);\n  }\n\n","sourceOld":"  /**\n   * Sets a new {@link PerDocFieldValues} instance on the given field with the\n   * given type and returns it.\n   * \n   */\n  public static <T extends AbstractField> T set(T field, Type type) {\n    if (field instanceof DocValuesField)\n      return field;\n    final DocValuesField valField = new DocValuesField();\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = field.isBinary() ? new BytesRef(field.getBinaryValue(),\n          field.getBinaryOffset(), field.getBinaryLength()) : new BytesRef(\n          field.stringValue());\n      valField.setBytes(ref, type);\n      break;\n    case INTS:\n      valField.setInt(Long.parseLong(field.stringValue()));\n      break;\n    case FLOAT_32:\n      valField.setFloat(Float.parseFloat(field.stringValue()));\n      break;\n    case FLOAT_64:\n      valField.setFloat(Double.parseDouble(field.stringValue()));\n      break;\n    default:\n      throw new IllegalArgumentException(\"unknown type: \" + type);\n    }\n    return valField.set(field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"39d51e9acac1e629cffe47855e85dc6dedc4754d":["85130289d2ed101fcc2d8798511c7c5b020ffab4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85130289d2ed101fcc2d8798511c7c5b020ffab4":["a465ec8e22527bb8add54f75551ee9557a56de25"],"a465ec8e22527bb8add54f75551ee9557a56de25":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"39d51e9acac1e629cffe47855e85dc6dedc4754d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a465ec8e22527bb8add54f75551ee9557a56de25","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"85130289d2ed101fcc2d8798511c7c5b020ffab4":["39d51e9acac1e629cffe47855e85dc6dedc4754d"],"a465ec8e22527bb8add54f75551ee9557a56de25":["85130289d2ed101fcc2d8798511c7c5b020ffab4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["39d51e9acac1e629cffe47855e85dc6dedc4754d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}