{"path":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,Executor).mjava","commits":[{"id":"692c45378601dcea39367ca75ae7d34ceed0aae3","date":1561033600,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,Executor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,ExecutorService).mjava","sourceNew":"  /** Runs searches for each segment separately, using the\n   *  provided Executor. NOTE:\n   *  if you are using {@link NIOFSDirectory}, do not use\n   *  the shutdownNow method of ExecutorService as this uses\n   *  Thread.interrupt under-the-hood which can silently\n   *  close file descriptors (see <a\n   *  href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @lucene.experimental */\n  public IndexSearcher(IndexReader r, Executor executor) {\n    this(r.getContext(), executor);\n  }\n\n","sourceOld":"  /** Runs searches for each segment separately, using the\n   *  provided ExecutorService.  IndexSearcher will not\n   *  close/awaitTermination this ExecutorService on\n   *  close; you must do so, eventually, on your own.  NOTE:\n   *  if you are using {@link NIOFSDirectory}, do not use\n   *  the shutdownNow method of ExecutorService as this uses\n   *  Thread.interrupt under-the-hood which can silently\n   *  close file descriptors (see <a\n   *  href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @lucene.experimental */\n  public IndexSearcher(IndexReader r, ExecutorService executor) {\n    this(r.getContext(), executor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f740a4cb7f5949ddb40a1647671c4a997223312","date":1569677340,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,Executor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,Executor).mjava","sourceNew":"  /** Runs searches for each segment separately, using the\n   *  provided Executor. The passed in Executor will also be\n   *  used by LRUQueryCache (if enabled) to perform asynchronous\n   *  query caching.\n   *  If a task is rejected by the host Executor, the failed task\n   *  will then be executed on the caller thread. This is done to\n   *  ensure that a query succeeds, albeit with a higher latency.\n   *  If a user wishes to modify the said behaviour, they can either\n   *  handle the exception in the provided Executor, or override\n   *  the said method in a custom extension of IndexSearcher.\n   *  NOTE:\n   *  if you are using {@link NIOFSDirectory}, do not use\n   *  the shutdownNow method of ExecutorService as this uses\n   *  Thread.interrupt under-the-hood which can silently\n   *  close file descriptors (see <a\n   *  href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @lucene.experimental */\n  public IndexSearcher(IndexReader r, Executor executor) {\n    this(r.getContext(), executor);\n  }\n\n","sourceOld":"  /** Runs searches for each segment separately, using the\n   *  provided Executor. NOTE:\n   *  if you are using {@link NIOFSDirectory}, do not use\n   *  the shutdownNow method of ExecutorService as this uses\n   *  Thread.interrupt under-the-hood which can silently\n   *  close file descriptors (see <a\n   *  href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @lucene.experimental */\n  public IndexSearcher(IndexReader r, Executor executor) {\n    this(r.getContext(), executor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b9f74021389e2b32ee750fa5a24281c87951ec3","date":1569845983,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,Executor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,Executor).mjava","sourceNew":"  /** Runs searches for each segment separately, using the\n   *  provided Executor. The passed in Executor will also be\n   *  used by LRUQueryCache (if enabled) to perform asynchronous\n   *  query caching.\n   *  If a task is rejected by the host Executor, the failed task\n   *  will then be executed on the caller thread. This is done to\n   *  ensure that a query succeeds, albeit with a higher latency.\n   *  If a user wishes to modify the said behaviour, they can either\n   *  handle the exception in the provided Executor, or override\n   *  the said method in a custom extension of IndexSearcher.\n   *  NOTE:\n   *  if you are using {@link NIOFSDirectory}, do not use\n   *  the shutdownNow method of ExecutorService as this uses\n   *  Thread.interrupt under-the-hood which can silently\n   *  close file descriptors (see <a\n   *  href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @lucene.experimental */\n  public IndexSearcher(IndexReader r, Executor executor) {\n    this(r.getContext(), executor);\n  }\n\n","sourceOld":"  /** Runs searches for each segment separately, using the\n   *  provided Executor. NOTE:\n   *  if you are using {@link NIOFSDirectory}, do not use\n   *  the shutdownNow method of ExecutorService as this uses\n   *  Thread.interrupt under-the-hood which can silently\n   *  close file descriptors (see <a\n   *  href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @lucene.experimental */\n  public IndexSearcher(IndexReader r, Executor executor) {\n    this(r.getContext(), executor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"906d4da7e00f8453a5a024fe1ee92d6b14c0627f","date":1570006475,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,Executor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,Executor).mjava","sourceNew":"  /** Runs searches for each segment separately, using the\n   *  provided Executor. NOTE:\n   *  if you are using {@link NIOFSDirectory}, do not use\n   *  the shutdownNow method of ExecutorService as this uses\n   *  Thread.interrupt under-the-hood which can silently\n   *  close file descriptors (see <a\n   *  href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @lucene.experimental */\n  public IndexSearcher(IndexReader r, Executor executor) {\n    this(r.getContext(), executor);\n  }\n\n","sourceOld":"  /** Runs searches for each segment separately, using the\n   *  provided Executor. The passed in Executor will also be\n   *  used by LRUQueryCache (if enabled) to perform asynchronous\n   *  query caching.\n   *  If a task is rejected by the host Executor, the failed task\n   *  will then be executed on the caller thread. This is done to\n   *  ensure that a query succeeds, albeit with a higher latency.\n   *  If a user wishes to modify the said behaviour, they can either\n   *  handle the exception in the provided Executor, or override\n   *  the said method in a custom extension of IndexSearcher.\n   *  NOTE:\n   *  if you are using {@link NIOFSDirectory}, do not use\n   *  the shutdownNow method of ExecutorService as this uses\n   *  Thread.interrupt under-the-hood which can silently\n   *  close file descriptors (see <a\n   *  href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @lucene.experimental */\n  public IndexSearcher(IndexReader r, Executor executor) {\n    this(r.getContext(), executor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,Executor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,Executor).mjava","sourceNew":"  /** Runs searches for each segment separately, using the\n   *  provided Executor. NOTE:\n   *  if you are using {@link NIOFSDirectory}, do not use\n   *  the shutdownNow method of ExecutorService as this uses\n   *  Thread.interrupt under-the-hood which can silently\n   *  close file descriptors (see <a\n   *  href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @lucene.experimental */\n  public IndexSearcher(IndexReader r, Executor executor) {\n    this(r.getContext(), executor);\n  }\n\n","sourceOld":"  /** Runs searches for each segment separately, using the\n   *  provided Executor. The passed in Executor will also be\n   *  used by LRUQueryCache (if enabled) to perform asynchronous\n   *  query caching.\n   *  If a task is rejected by the host Executor, the failed task\n   *  will then be executed on the caller thread. This is done to\n   *  ensure that a query succeeds, albeit with a higher latency.\n   *  If a user wishes to modify the said behaviour, they can either\n   *  handle the exception in the provided Executor, or override\n   *  the said method in a custom extension of IndexSearcher.\n   *  NOTE:\n   *  if you are using {@link NIOFSDirectory}, do not use\n   *  the shutdownNow method of ExecutorService as this uses\n   *  Thread.interrupt under-the-hood which can silently\n   *  close file descriptors (see <a\n   *  href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @lucene.experimental */\n  public IndexSearcher(IndexReader r, Executor executor) {\n    this(r.getContext(), executor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fbdd90cd58912788fecb1044df8f566a4420e59","date":1574749923,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,Executor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,Executor).mjava","sourceNew":"  /** Runs searches for each segment separately, using the\n   *  provided Executor. The passed in Executor will also be\n   *  used by LRUQueryCache (if enabled) to perform asynchronous\n   *  query caching.\n   *  If a task is rejected by the host Executor, the failed task\n   *  will then be executed on the caller thread. This is done to\n   *  ensure that a query succeeds, albeit with a higher latency.\n   *  NOTE:\n   *  if you are using {@link NIOFSDirectory}, do not use\n   *  the shutdownNow method of ExecutorService as this uses\n   *  Thread.interrupt under-the-hood which can silently\n   *  close file descriptors (see <a\n   *  href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @lucene.experimental */\n  public IndexSearcher(IndexReader r, Executor executor) {\n    this(r.getContext(), executor);\n  }\n\n","sourceOld":"  /** Runs searches for each segment separately, using the\n   *  provided Executor. NOTE:\n   *  if you are using {@link NIOFSDirectory}, do not use\n   *  the shutdownNow method of ExecutorService as this uses\n   *  Thread.interrupt under-the-hood which can silently\n   *  close file descriptors (see <a\n   *  href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @lucene.experimental */\n  public IndexSearcher(IndexReader r, Executor executor) {\n    this(r.getContext(), executor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bbc355b3e849ee4a34763155bb78e638d625419","date":1574952532,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,Executor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,Executor).mjava","sourceNew":"  /** Runs searches for each segment separately, using the\n   *  provided Executor. NOTE:\n   *  if you are using {@link NIOFSDirectory}, do not use\n   *  the shutdownNow method of ExecutorService as this uses\n   *  Thread.interrupt under-the-hood which can silently\n   *  close file descriptors (see <a\n   *  href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @lucene.experimental */\n  public IndexSearcher(IndexReader r, Executor executor) {\n    this(r.getContext(), executor);\n  }\n\n","sourceOld":"  /** Runs searches for each segment separately, using the\n   *  provided Executor. The passed in Executor will also be\n   *  used by LRUQueryCache (if enabled) to perform asynchronous\n   *  query caching.\n   *  If a task is rejected by the host Executor, the failed task\n   *  will then be executed on the caller thread. This is done to\n   *  ensure that a query succeeds, albeit with a higher latency.\n   *  NOTE:\n   *  if you are using {@link NIOFSDirectory}, do not use\n   *  the shutdownNow method of ExecutorService as this uses\n   *  Thread.interrupt under-the-hood which can silently\n   *  close file descriptors (see <a\n   *  href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @lucene.experimental */\n  public IndexSearcher(IndexReader r, Executor executor) {\n    this(r.getContext(), executor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1fbdd90cd58912788fecb1044df8f566a4420e59":["906d4da7e00f8453a5a024fe1ee92d6b14c0627f"],"906d4da7e00f8453a5a024fe1ee92d6b14c0627f":["6f740a4cb7f5949ddb40a1647671c4a997223312"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6f740a4cb7f5949ddb40a1647671c4a997223312":["692c45378601dcea39367ca75ae7d34ceed0aae3"],"9bbc355b3e849ee4a34763155bb78e638d625419":["1fbdd90cd58912788fecb1044df8f566a4420e59"],"4b9f74021389e2b32ee750fa5a24281c87951ec3":["692c45378601dcea39367ca75ae7d34ceed0aae3","6f740a4cb7f5949ddb40a1647671c4a997223312"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bbc355b3e849ee4a34763155bb78e638d625419"],"692c45378601dcea39367ca75ae7d34ceed0aae3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b0b597c65628ca9e73913a07e81691f8229bae35":["4b9f74021389e2b32ee750fa5a24281c87951ec3","906d4da7e00f8453a5a024fe1ee92d6b14c0627f"]},"commit2Childs":{"1fbdd90cd58912788fecb1044df8f566a4420e59":["9bbc355b3e849ee4a34763155bb78e638d625419"],"906d4da7e00f8453a5a024fe1ee92d6b14c0627f":["1fbdd90cd58912788fecb1044df8f566a4420e59","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["692c45378601dcea39367ca75ae7d34ceed0aae3"],"6f740a4cb7f5949ddb40a1647671c4a997223312":["906d4da7e00f8453a5a024fe1ee92d6b14c0627f","4b9f74021389e2b32ee750fa5a24281c87951ec3"],"9bbc355b3e849ee4a34763155bb78e638d625419":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4b9f74021389e2b32ee750fa5a24281c87951ec3":["b0b597c65628ca9e73913a07e81691f8229bae35"],"692c45378601dcea39367ca75ae7d34ceed0aae3":["6f740a4cb7f5949ddb40a1647671c4a997223312","4b9f74021389e2b32ee750fa5a24281c87951ec3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}