{"path":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#componentRelate(double,double,double,double).mjava","commits":[{"id":"925fce43f3bac029d912b9b7de03c789e258a333","date":1461612714,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#componentRelate(double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonTree#relate(double,double,double,double).mjava","sourceNew":"  /** Returns relation to the provided rectangle for this component */\n  private Relation componentRelate(double minLat, double maxLat, double minLon, double maxLon) {\n    // if the bounding boxes are disjoint then the shape does not cross\n    if (maxLon < this.minLon || minLon > this.maxLon || maxLat < this.minLat || minLat > this.maxLat) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    // if the rectangle fully encloses us, we cross.\n    if (minLat <= this.minLat && maxLat >= this.maxLat && minLon <= this.minLon && maxLon >= this.maxLon) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    // check any holes\n    if (holes != null) {\n      Relation holeRelation = holes.relate(minLat, maxLat, minLon, maxLon);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    // check each corner: if < 4 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfCorners(minLat, maxLat, minLon, maxLon);\n    if (numCorners == 4) {\n      if (tree.crosses(minLat, maxLat, minLon, maxLon)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_INSIDE_QUERY;\n    } else if (numCorners > 0) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    \n    // we cross\n    if (tree.crosses(minLat, maxLat, minLon, maxLon)) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    \n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","sourceOld":"  /** Returns relation to the provided rectangle */\n  Relation relate(double minLat, double maxLat, double minLon, double maxLon) {\n    // if the bounding boxes are disjoint then the shape does not cross\n    if (maxLon < this.minLon || minLon > this.maxLon || maxLat < this.minLat || minLat > this.maxLat) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    // if the rectangle fully encloses us, we cross.\n    if (minLat <= this.minLat && maxLat >= this.maxLat && minLon <= this.minLon && maxLon >= this.maxLon) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    // check any holes\n    for (LatLonTree hole : holes) {\n      Relation holeRelation = hole.relate(minLat, maxLat, minLon, maxLon);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    // check each corner: if < 4 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfCorners(minLat, maxLat, minLon, maxLon);\n    if (numCorners == 4) {\n      if (tree.crosses(minLat, maxLat, minLon, maxLon)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_INSIDE_QUERY;\n    } else if (numCorners > 0) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    \n    // we cross\n    if (tree.crosses(minLat, maxLat, minLon, maxLon)) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    \n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#componentRelate(double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonTree#relate(double,double,double,double).mjava","sourceNew":"  /** Returns relation to the provided rectangle for this component */\n  private Relation componentRelate(double minLat, double maxLat, double minLon, double maxLon) {\n    // if the bounding boxes are disjoint then the shape does not cross\n    if (maxLon < this.minLon || minLon > this.maxLon || maxLat < this.minLat || minLat > this.maxLat) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    // if the rectangle fully encloses us, we cross.\n    if (minLat <= this.minLat && maxLat >= this.maxLat && minLon <= this.minLon && maxLon >= this.maxLon) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    // check any holes\n    if (holes != null) {\n      Relation holeRelation = holes.relate(minLat, maxLat, minLon, maxLon);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    // check each corner: if < 4 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfCorners(minLat, maxLat, minLon, maxLon);\n    if (numCorners == 4) {\n      if (tree.crosses(minLat, maxLat, minLon, maxLon)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_INSIDE_QUERY;\n    } else if (numCorners > 0) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    \n    // we cross\n    if (tree.crosses(minLat, maxLat, minLon, maxLon)) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    \n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","sourceOld":"  /** Returns relation to the provided rectangle */\n  Relation relate(double minLat, double maxLat, double minLon, double maxLon) {\n    // if the bounding boxes are disjoint then the shape does not cross\n    if (maxLon < this.minLon || minLon > this.maxLon || maxLat < this.minLat || minLat > this.maxLat) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    // if the rectangle fully encloses us, we cross.\n    if (minLat <= this.minLat && maxLat >= this.maxLat && minLon <= this.minLon && maxLon >= this.maxLon) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    // check any holes\n    for (LatLonTree hole : holes) {\n      Relation holeRelation = hole.relate(minLat, maxLat, minLon, maxLon);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    // check each corner: if < 4 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfCorners(minLat, maxLat, minLon, maxLon);\n    if (numCorners == 4) {\n      if (tree.crosses(minLat, maxLat, minLon, maxLon)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_INSIDE_QUERY;\n    } else if (numCorners > 0) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    \n    // we cross\n    if (tree.crosses(minLat, maxLat, minLon, maxLon)) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    \n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4fccad460342b1af30cb328cc8297751a218d78","date":1541177339,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#componentRelate(double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#componentRelate(double,double,double,double).mjava","sourceNew":"  /** Returns relation to the provided rectangle for this component */\n  @Override\n  protected Relation componentRelate(double minLat, double maxLat, double minLon, double maxLon) {\n    // check any holes\n    if (holes != null) {\n      Relation holeRelation = holes.relate(minLat, maxLat, minLon, maxLon);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    // check each corner: if < 4 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfCorners(minLat, maxLat, minLon, maxLon);\n    if (numCorners == 4) {\n      if (tree.crosses(minLat, maxLat, minLon, maxLon)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_INSIDE_QUERY;\n    } else if (numCorners > 0) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns relation to the provided rectangle for this component */\n  private Relation componentRelate(double minLat, double maxLat, double minLon, double maxLon) {\n    // if the bounding boxes are disjoint then the shape does not cross\n    if (maxLon < this.minLon || minLon > this.maxLon || maxLat < this.minLat || minLat > this.maxLat) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    // if the rectangle fully encloses us, we cross.\n    if (minLat <= this.minLat && maxLat >= this.maxLat && minLon <= this.minLon && maxLon >= this.maxLon) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    // check any holes\n    if (holes != null) {\n      Relation holeRelation = holes.relate(minLat, maxLat, minLon, maxLon);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    // check each corner: if < 4 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfCorners(minLat, maxLat, minLon, maxLon);\n    if (numCorners == 4) {\n      if (tree.crosses(minLat, maxLat, minLon, maxLon)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_INSIDE_QUERY;\n    } else if (numCorners > 0) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    \n    // we cross\n    if (tree.crosses(minLat, maxLat, minLon, maxLon)) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    \n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1277bce5122ddd82fb8cce58045ae85df0714a4","date":1549639178,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#componentRelate(double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#componentRelate(double,double,double,double).mjava","sourceNew":"  @Override\n  protected Relation componentRelate(double minLat, double maxLat, double minLon, double maxLon) {\n    // check any holes\n    if (holes != null) {\n      Relation holeRelation = holes.relate(minLat, maxLat, minLon, maxLon);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    // check each corner: if < 4 && > 0 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfCorners(minLat, maxLat, minLon, maxLon);\n    if (numCorners == 4) {\n      if (tree.crosses(minLat, maxLat, minLon, maxLon)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_INSIDE_QUERY;\n    }  else if (numCorners == 0) {\n      if (minLat >= tree.lat1 && maxLat <= tree.lat1 && minLon >= tree.lon2 && maxLon <= tree.lon2) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      if (tree.crosses(minLat, maxLat, minLon, maxLon)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    return Relation.CELL_CROSSES_QUERY;\n  }\n\n","sourceOld":"  /** Returns relation to the provided rectangle for this component */\n  @Override\n  protected Relation componentRelate(double minLat, double maxLat, double minLon, double maxLon) {\n    // check any holes\n    if (holes != null) {\n      Relation holeRelation = holes.relate(minLat, maxLat, minLon, maxLon);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    // check each corner: if < 4 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfCorners(minLat, maxLat, minLon, maxLon);\n    if (numCorners == 4) {\n      if (tree.crosses(minLat, maxLat, minLon, maxLon)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_INSIDE_QUERY;\n    } else if (numCorners > 0) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc005279ab64cbf458ccef2ada610bc1a04b6139","date":1554992856,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#componentRelate(double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#componentRelate(double,double,double,double).mjava","sourceNew":"  @Override\n  protected Relation componentRelate(double minLat, double maxLat, double minLon, double maxLon) {\n    // check any holes\n    if (holes != null) {\n      Relation holeRelation = holes.relate(minLat, maxLat, minLon, maxLon);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    // check each corner: if < 4 && > 0 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfCorners(minLat, maxLat, minLon, maxLon);\n    if (numCorners == 4) {\n      if (tree.crossesBox(minLat, maxLat, minLon, maxLon, false)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_INSIDE_QUERY;\n    }  else if (numCorners == 0) {\n      if (minLat >= tree.lat1 && maxLat <= tree.lat1 && minLon >= tree.lon2 && maxLon <= tree.lon2) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      if (tree.crossesBox(minLat, maxLat, minLon, maxLon, false)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    return Relation.CELL_CROSSES_QUERY;\n  }\n\n","sourceOld":"  @Override\n  protected Relation componentRelate(double minLat, double maxLat, double minLon, double maxLon) {\n    // check any holes\n    if (holes != null) {\n      Relation holeRelation = holes.relate(minLat, maxLat, minLon, maxLon);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    // check each corner: if < 4 && > 0 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfCorners(minLat, maxLat, minLon, maxLon);\n    if (numCorners == 4) {\n      if (tree.crosses(minLat, maxLat, minLon, maxLon)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_INSIDE_QUERY;\n    }  else if (numCorners == 0) {\n      if (minLat >= tree.lat1 && maxLat <= tree.lat1 && minLon >= tree.lon2 && maxLon <= tree.lon2) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      if (tree.crosses(minLat, maxLat, minLon, maxLon)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    return Relation.CELL_CROSSES_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","date":1571074565,"type":5,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#relate(double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#componentRelate(double,double,double,double).mjava","sourceNew":"  @Override\n  public Relation relate(double minX, double maxX, double minY, double maxY) {\n    if (Component2D.disjoint(this.minX, this.maxX, this.minY, this.maxY, minX, maxX, minY, maxY)) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    if (Component2D.within(this.minX, this.maxX, this.minY, this.maxY, minX, maxX, minY, maxY)) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    // check any holes\n    if (holes != null) {\n      Relation holeRelation = holes.relate(minX, maxX, minY, maxY);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    // check each corner: if < 4 && > 0 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfCorners(minX, maxX, minY, maxY);\n    if (numCorners == 4) {\n      if (tree.crossesBox(minX, maxX, minY, maxY, false)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_INSIDE_QUERY;\n    }  else if (numCorners == 0) {\n      if (Component2D.containsPoint(tree.x1, tree.y1, minX, maxX, minY, maxY)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      if (tree.crossesBox(minX, maxX, minY, maxY, false)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    return Relation.CELL_CROSSES_QUERY;\n  }\n\n","sourceOld":"  @Override\n  protected Relation componentRelate(double minLat, double maxLat, double minLon, double maxLon) {\n    // check any holes\n    if (holes != null) {\n      Relation holeRelation = holes.relate(minLat, maxLat, minLon, maxLon);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    // check each corner: if < 4 && > 0 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfCorners(minLat, maxLat, minLon, maxLon);\n    if (numCorners == 4) {\n      if (tree.crossesBox(minLat, maxLat, minLon, maxLon, false)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_INSIDE_QUERY;\n    }  else if (numCorners == 0) {\n      if (minLat >= tree.lat1 && maxLat <= tree.lat1 && minLon >= tree.lon2 && maxLon <= tree.lon2) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      if (tree.crossesBox(minLat, maxLat, minLon, maxLon, false)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    return Relation.CELL_CROSSES_QUERY;\n  }\n\n","bugFix":null,"bugIntro":["908e262be655c65579ec6d94f228d47b663da975"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":4,"author":"jimczi","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#componentRelate(double,double,double,double).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected Relation componentRelate(double minLat, double maxLat, double minLon, double maxLon) {\n    // check any holes\n    if (holes != null) {\n      Relation holeRelation = holes.relate(minLat, maxLat, minLon, maxLon);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    // check each corner: if < 4 && > 0 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfCorners(minLat, maxLat, minLon, maxLon);\n    if (numCorners == 4) {\n      if (tree.crossesBox(minLat, maxLat, minLon, maxLon, false)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_INSIDE_QUERY;\n    }  else if (numCorners == 0) {\n      if (minLat >= tree.lat1 && maxLat <= tree.lat1 && minLon >= tree.lon2 && maxLon <= tree.lon2) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      if (tree.crossesBox(minLat, maxLat, minLon, maxLon, false)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    return Relation.CELL_CROSSES_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["fc005279ab64cbf458ccef2ada610bc1a04b6139"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","925fce43f3bac029d912b9b7de03c789e258a333"],"e4fccad460342b1af30cb328cc8297751a218d78":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"fc005279ab64cbf458ccef2ada610bc1a04b6139":["f1277bce5122ddd82fb8cce58045ae85df0714a4"],"f1277bce5122ddd82fb8cce58045ae85df0714a4":["e4fccad460342b1af30cb328cc8297751a218d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"],"925fce43f3bac029d912b9b7de03c789e258a333":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b0b597c65628ca9e73913a07e81691f8229bae35":["fc005279ab64cbf458ccef2ada610bc1a04b6139","b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"]},"commit2Childs":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","925fce43f3bac029d912b9b7de03c789e258a333"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["e4fccad460342b1af30cb328cc8297751a218d78"],"e4fccad460342b1af30cb328cc8297751a218d78":["f1277bce5122ddd82fb8cce58045ae85df0714a4"],"fc005279ab64cbf458ccef2ada610bc1a04b6139":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","b0b597c65628ca9e73913a07e81691f8229bae35"],"f1277bce5122ddd82fb8cce58045ae85df0714a4":["fc005279ab64cbf458ccef2ada610bc1a04b6139"],"925fce43f3bac029d912b9b7de03c789e258a333":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}