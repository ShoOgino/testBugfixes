{"path":"lucene/facet/src/test/org/apache/lucene/util/collections/IntHashSetTest#test4().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/collections/IntHashSetTest#test4().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/util/collections/IntHashSetTest#test4().mjava","sourceNew":"  @Test\n  public void test4() {\n    IntHashSet set1 = new IntHashSet();\n    HashSet<Integer> set2 = new HashSet<Integer>();\n    for (int i = 0; i < ArrayHashMapTest.RANDOM_TEST_NUM_ITERATIONS; ++i) {\n      int value = random().nextInt() % 500;\n      boolean shouldAdd = random().nextBoolean();\n      if (shouldAdd) {\n        set1.add(value);\n        set2.add(value);\n      } else {\n        set1.remove(value);\n        set2.remove(value);\n      }\n    }\n    assertEquals(set2.size(), set1.size());\n    int i = 0;\n    for (int value : set2) {\n      assertTrue(set1.contains(value));\n      i++;\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test4() {\n    IntHashSet set1 = new IntHashSet();\n    HashSet<Integer> set2 = new HashSet<Integer>();\n    for (int i = 0; i < ArrayHashMapTest.RANDOM_TEST_NUM_ITERATIONS; ++i) {\n      int value = random().nextInt() % 500;\n      boolean shouldAdd = random().nextBoolean();\n      if (shouldAdd) {\n        set1.add(value);\n        set2.add(value);\n      } else {\n        set1.remove(value);\n        set2.remove(value);\n      }\n    }\n    assertEquals(set2.size(), set1.size());\n    int i = 0;\n    for (int value : set2) {\n      assertTrue(set1.contains(value));\n      i++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a1037d9031f9702ee6912f8751ef1d5320da6d9","date":1357217787,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/collections/IntHashSetTest#test4().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/collections/IntHashSetTest#test4().mjava","sourceNew":"  @Test\n  public void test4() {\n    IntHashSet set1 = new IntHashSet();\n    HashSet<Integer> set2 = new HashSet<Integer>();\n    for (int i = 0; i < ArrayHashMapTest.RANDOM_TEST_NUM_ITERATIONS; ++i) {\n      int value = random().nextInt() % 500;\n      boolean shouldAdd = random().nextBoolean();\n      if (shouldAdd) {\n        set1.add(value);\n        set2.add(value);\n      } else {\n        set1.remove(value);\n        set2.remove(value);\n      }\n    }\n    assertEquals(set2.size(), set1.size());\n    for (int value : set2) {\n      assertTrue(set1.contains(value));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test4() {\n    IntHashSet set1 = new IntHashSet();\n    HashSet<Integer> set2 = new HashSet<Integer>();\n    for (int i = 0; i < ArrayHashMapTest.RANDOM_TEST_NUM_ITERATIONS; ++i) {\n      int value = random().nextInt() % 500;\n      boolean shouldAdd = random().nextBoolean();\n      if (shouldAdd) {\n        set1.add(value);\n        set2.add(value);\n      } else {\n        set1.remove(value);\n        set2.remove(value);\n      }\n    }\n    assertEquals(set2.size(), set1.size());\n    int i = 0;\n    for (int value : set2) {\n      assertTrue(set1.contains(value));\n      i++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/collections/IntHashSetTest#test4().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/collections/IntHashSetTest#test4().mjava","sourceNew":"  @Test\n  public void test4() {\n    IntHashSet set1 = new IntHashSet();\n    HashSet<Integer> set2 = new HashSet<Integer>();\n    for (int i = 0; i < ArrayHashMapTest.RANDOM_TEST_NUM_ITERATIONS; ++i) {\n      int value = random().nextInt() % 500;\n      boolean shouldAdd = random().nextBoolean();\n      if (shouldAdd) {\n        set1.add(value);\n        set2.add(value);\n      } else {\n        set1.remove(value);\n        set2.remove(value);\n      }\n    }\n    assertEquals(set2.size(), set1.size());\n    for (int value : set2) {\n      assertTrue(set1.contains(value));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test4() {\n    IntHashSet set1 = new IntHashSet();\n    HashSet<Integer> set2 = new HashSet<Integer>();\n    for (int i = 0; i < ArrayHashMapTest.RANDOM_TEST_NUM_ITERATIONS; ++i) {\n      int value = random().nextInt() % 500;\n      boolean shouldAdd = random().nextBoolean();\n      if (shouldAdd) {\n        set1.add(value);\n        set2.add(value);\n      } else {\n        set1.remove(value);\n        set2.remove(value);\n      }\n    }\n    assertEquals(set2.size(), set1.size());\n    int i = 0;\n    for (int value : set2) {\n      assertTrue(set1.contains(value));\n      i++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/collections/IntHashSetTest#test4().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/collections/IntHashSetTest#test4().mjava","sourceNew":"  @Test\n  public void test4() {\n    IntHashSet set1 = new IntHashSet();\n    HashSet<Integer> set2 = new HashSet<Integer>();\n    for (int i = 0; i < ArrayHashMapTest.RANDOM_TEST_NUM_ITERATIONS; ++i) {\n      int value = random().nextInt() % 500;\n      boolean shouldAdd = random().nextBoolean();\n      if (shouldAdd) {\n        set1.add(value);\n        set2.add(value);\n      } else {\n        set1.remove(value);\n        set2.remove(value);\n      }\n    }\n    assertEquals(set2.size(), set1.size());\n    for (int value : set2) {\n      assertTrue(set1.contains(value));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test4() {\n    IntHashSet set1 = new IntHashSet();\n    HashSet<Integer> set2 = new HashSet<Integer>();\n    for (int i = 0; i < ArrayHashMapTest.RANDOM_TEST_NUM_ITERATIONS; ++i) {\n      int value = random().nextInt() % 500;\n      boolean shouldAdd = random().nextBoolean();\n      if (shouldAdd) {\n        set1.add(value);\n        set2.add(value);\n      } else {\n        set1.remove(value);\n        set2.remove(value);\n      }\n    }\n    assertEquals(set2.size(), set1.size());\n    for (int value : set2) {\n      assertTrue(set1.contains(value));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"607428da722dcb3e86bbd11c63de8986e6275c36":["7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","607428da722dcb3e86bbd11c63de8986e6275c36"],"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}