{"path":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleShardCheckpointAction(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleShardCheckpointAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Retrieve the version number of the latest entry of the {@link org.apache.solr.update.UpdateLog}.\n   */\n  private void handleShardCheckpointAction(SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (!leaderStateManager.amILeader()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action '\" + CdcrParams.CdcrAction.SHARDCHECKPOINT +\n          \"' sent to non-leader replica\");\n    }\n\n    UpdateLog ulog = core.getUpdateHandler().getUpdateLog();\n    UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates();\n    List<Long> versions = recentUpdates.getVersions(1);\n    long lastVersion = versions.isEmpty() ? -1 : Math.abs(versions.get(0));\n    rsp.add(CdcrParams.CHECKPOINT, lastVersion);\n    recentUpdates.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9186bf60d7c6f504d4d5b01cfee95dc4bd15e53","date":1449051812,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleShardCheckpointAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleShardCheckpointAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Retrieve the version number of the latest entry of the {@link org.apache.solr.update.UpdateLog}.\n   */\n  private void handleShardCheckpointAction(SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (!leaderStateManager.amILeader()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action '\" + CdcrParams.CdcrAction.SHARDCHECKPOINT +\n          \"' sent to non-leader replica\");\n    }\n\n    UpdateLog ulog = core.getUpdateHandler().getUpdateLog();\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      List<Long> versions = recentUpdates.getVersions(1);\n      long lastVersion = versions.isEmpty() ? -1 : Math.abs(versions.get(0));\n      rsp.add(CdcrParams.CHECKPOINT, lastVersion);\n    }\n  }\n\n","sourceOld":"  /**\n   * Retrieve the version number of the latest entry of the {@link org.apache.solr.update.UpdateLog}.\n   */\n  private void handleShardCheckpointAction(SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (!leaderStateManager.amILeader()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action '\" + CdcrParams.CdcrAction.SHARDCHECKPOINT +\n          \"' sent to non-leader replica\");\n    }\n\n    UpdateLog ulog = core.getUpdateHandler().getUpdateLog();\n    UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates();\n    List<Long> versions = recentUpdates.getVersions(1);\n    long lastVersion = versions.isEmpty() ? -1 : Math.abs(versions.get(0));\n    rsp.add(CdcrParams.CHECKPOINT, lastVersion);\n    recentUpdates.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06e38ae84477e7a7eacea808dc3de9950fce5ccf","date":1470634560,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleShardCheckpointAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleShardCheckpointAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Retrieve the version number of the latest entry of the {@link org.apache.solr.update.UpdateLog}.\n   */\n  private void handleShardCheckpointAction(SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (!leaderStateManager.amILeader()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action '\" + CdcrParams.CdcrAction.SHARDCHECKPOINT +\n          \"' sent to non-leader replica\");\n    }\n\n    UpdateLog ulog = core.getUpdateHandler().getUpdateLog();\n    VersionInfo versionInfo = ulog.getVersionInfo();\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      long maxVersionFromRecent = recentUpdates.getMaxRecentVersion();\n      long maxVersionFromIndex = versionInfo.getMaxVersionFromIndex(req.getSearcher());\n      log.info(\"Found maxVersionFromRecent {} maxVersionFromIndex {}\", maxVersionFromRecent, maxVersionFromIndex);\n      // there is no race with ongoing bootstrap because we don't expect any updates to come from the source\n      long maxVersion = Math.max(maxVersionFromIndex, maxVersionFromRecent);\n      if (maxVersion == 0L) {\n        maxVersion = -1;\n      }\n      rsp.add(CdcrParams.CHECKPOINT, maxVersion);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Action '\" + CdcrParams.CdcrAction.SHARDCHECKPOINT +\n          \"' could not read max version\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Retrieve the version number of the latest entry of the {@link org.apache.solr.update.UpdateLog}.\n   */\n  private void handleShardCheckpointAction(SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (!leaderStateManager.amILeader()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action '\" + CdcrParams.CdcrAction.SHARDCHECKPOINT +\n          \"' sent to non-leader replica\");\n    }\n\n    UpdateLog ulog = core.getUpdateHandler().getUpdateLog();\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      List<Long> versions = recentUpdates.getVersions(1);\n      long lastVersion = versions.isEmpty() ? -1 : Math.abs(versions.get(0));\n      rsp.add(CdcrParams.CHECKPOINT, lastVersion);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleShardCheckpointAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleShardCheckpointAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Retrieve the version number of the latest entry of the {@link org.apache.solr.update.UpdateLog}.\n   */\n  private void handleShardCheckpointAction(SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (!leaderStateManager.amILeader()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action '\" + CdcrParams.CdcrAction.SHARDCHECKPOINT +\n          \"' sent to non-leader replica\");\n    }\n\n    UpdateLog ulog = core.getUpdateHandler().getUpdateLog();\n    VersionInfo versionInfo = ulog.getVersionInfo();\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      long maxVersionFromRecent = recentUpdates.getMaxRecentVersion();\n      long maxVersionFromIndex = versionInfo.getMaxVersionFromIndex(req.getSearcher());\n      log.info(\"Found maxVersionFromRecent {} maxVersionFromIndex {}\", maxVersionFromRecent, maxVersionFromIndex);\n      // there is no race with ongoing bootstrap because we don't expect any updates to come from the source\n      long maxVersion = Math.max(maxVersionFromIndex, maxVersionFromRecent);\n      if (maxVersion == 0L) {\n        maxVersion = -1;\n      }\n      rsp.add(CdcrParams.CHECKPOINT, maxVersion);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Action '\" + CdcrParams.CdcrAction.SHARDCHECKPOINT +\n          \"' could not read max version\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Retrieve the version number of the latest entry of the {@link org.apache.solr.update.UpdateLog}.\n   */\n  private void handleShardCheckpointAction(SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (!leaderStateManager.amILeader()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action '\" + CdcrParams.CdcrAction.SHARDCHECKPOINT +\n          \"' sent to non-leader replica\");\n    }\n\n    UpdateLog ulog = core.getUpdateHandler().getUpdateLog();\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      List<Long> versions = recentUpdates.getVersions(1);\n      long lastVersion = versions.isEmpty() ? -1 : Math.abs(versions.get(0));\n      rsp.add(CdcrParams.CHECKPOINT, lastVersion);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleShardCheckpointAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleShardCheckpointAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Retrieve the version number of the latest entry of the {@link org.apache.solr.update.UpdateLog}.\n   */\n  private void handleShardCheckpointAction(SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (!leaderStateManager.amILeader()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action '\" + CdcrParams.CdcrAction.SHARDCHECKPOINT +\n          \"' sent to non-leader replica\");\n    }\n\n    UpdateLog ulog = core.getUpdateHandler().getUpdateLog();\n    VersionInfo versionInfo = ulog.getVersionInfo();\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      long maxVersionFromRecent = recentUpdates.getMaxRecentVersion();\n      long maxVersionFromIndex = versionInfo.getMaxVersionFromIndex(req.getSearcher());\n      log.info(\"Found maxVersionFromRecent {} maxVersionFromIndex {}\", maxVersionFromRecent, maxVersionFromIndex);\n      // there is no race with ongoing bootstrap because we don't expect any updates to come from the source\n      long maxVersion = Math.max(maxVersionFromIndex, maxVersionFromRecent);\n      if (maxVersion == 0L) {\n        maxVersion = -1;\n      }\n      rsp.add(CdcrParams.CHECKPOINT, maxVersion);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Action '\" + CdcrParams.CdcrAction.SHARDCHECKPOINT +\n          \"' could not read max version\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Retrieve the version number of the latest entry of the {@link org.apache.solr.update.UpdateLog}.\n   */\n  private void handleShardCheckpointAction(SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (!leaderStateManager.amILeader()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action '\" + CdcrParams.CdcrAction.SHARDCHECKPOINT +\n          \"' sent to non-leader replica\");\n    }\n\n    UpdateLog ulog = core.getUpdateHandler().getUpdateLog();\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      List<Long> versions = recentUpdates.getVersions(1);\n      long lastVersion = versions.isEmpty() ? -1 : Math.abs(versions.get(0));\n      rsp.add(CdcrParams.CHECKPOINT, lastVersion);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleShardCheckpointAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  /**\n   * Retrieve the version number of the latest entry of the {@link org.apache.solr.update.UpdateLog}.\n   */\n  private void handleShardCheckpointAction(SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (!leaderStateManager.amILeader()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action '\" + CdcrParams.CdcrAction.SHARDCHECKPOINT +\n          \"' sent to non-leader replica\");\n    }\n\n    UpdateLog ulog = core.getUpdateHandler().getUpdateLog();\n    VersionInfo versionInfo = ulog.getVersionInfo();\n    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {\n      long maxVersionFromRecent = recentUpdates.getMaxRecentVersion();\n      long maxVersionFromIndex = versionInfo.getMaxVersionFromIndex(req.getSearcher());\n      log.info(\"Found maxVersionFromRecent {} maxVersionFromIndex {}\", maxVersionFromRecent, maxVersionFromIndex);\n      // there is no race with ongoing bootstrap because we don't expect any updates to come from the source\n      long maxVersion = Math.max(maxVersionFromIndex, maxVersionFromRecent);\n      if (maxVersion == 0L) {\n        maxVersion = -1;\n      }\n      rsp.add(CdcrParams.CHECKPOINT, maxVersion);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Action '\" + CdcrParams.CdcrAction.SHARDCHECKPOINT +\n          \"' could not read max version\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06e38ae84477e7a7eacea808dc3de9950fce5ccf":["a9186bf60d7c6f504d4d5b01cfee95dc4bd15e53"],"a9186bf60d7c6f504d4d5b01cfee95dc4bd15e53":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a9186bf60d7c6f504d4d5b01cfee95dc4bd15e53","06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a9186bf60d7c6f504d4d5b01cfee95dc4bd15e53","06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["a9186bf60d7c6f504d4d5b01cfee95dc4bd15e53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"06e38ae84477e7a7eacea808dc3de9950fce5ccf":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"a9186bf60d7c6f504d4d5b01cfee95dc4bd15e53":["06e38ae84477e7a7eacea808dc3de9950fce5ccf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}