{"path":"lucene/src/java/org/apache/lucene/search/FuzzyTermEnum#FuzzyTermEnum(IndexReader,Term,float,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermEnum#FuzzyTermEnum(IndexReader,Term,float,int).mjava","pathOld":"src/java/org/apache/lucene/search/FuzzyTermEnum#FuzzyTermEnum(IndexReader,Term,float,int).mjava","sourceNew":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param reader Delivers terms.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermEnum(IndexReader reader, Term term, final float minSimilarity, final int prefixLength) throws IOException {\n    super();\n    \n    if (minSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be greater than or equal to 1\");\n    else if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n\n    this.minimumSimilarity = minSimilarity;\n    this.scale_factor = 1.0f / (1.0f - minimumSimilarity);\n    this.searchTerm = term;\n    this.field = searchTerm.field();\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    final int fullSearchTermLength = searchTerm.text().length();\n    final int realPrefixLength = prefixLength > fullSearchTermLength ? fullSearchTermLength : prefixLength;\n\n    this.text = searchTerm.text().substring(realPrefixLength);\n    this.prefix = searchTerm.text().substring(0, realPrefixLength);\n\n    this.p = new int[this.text.length()+1];\n    this.d = new int[this.text.length()+1];\n\n    setEnum(reader.terms(new Term(searchTerm.field(), prefix)));\n  }\n\n","sourceOld":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param reader Delivers terms.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermEnum(IndexReader reader, Term term, final float minSimilarity, final int prefixLength) throws IOException {\n    super();\n    \n    if (minSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be greater than or equal to 1\");\n    else if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n\n    this.minimumSimilarity = minSimilarity;\n    this.scale_factor = 1.0f / (1.0f - minimumSimilarity);\n    this.searchTerm = term;\n    this.field = searchTerm.field();\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    final int fullSearchTermLength = searchTerm.text().length();\n    final int realPrefixLength = prefixLength > fullSearchTermLength ? fullSearchTermLength : prefixLength;\n\n    this.text = searchTerm.text().substring(realPrefixLength);\n    this.prefix = searchTerm.text().substring(0, realPrefixLength);\n\n    this.p = new int[this.text.length()+1];\n    this.d = new int[this.text.length()+1];\n\n    setEnum(reader.terms(new Term(searchTerm.field(), prefix)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermEnum#FuzzyTermEnum(IndexReader,Term,float,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param reader Delivers terms.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermEnum(IndexReader reader, Term term, final float minSimilarity, final int prefixLength) throws IOException {\n    super();\n    \n    if (minSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be greater than or equal to 1\");\n    else if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n\n    this.minimumSimilarity = minSimilarity;\n    this.scale_factor = 1.0f / (1.0f - minimumSimilarity);\n    this.searchTerm = term;\n    this.field = searchTerm.field();\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    final int fullSearchTermLength = searchTerm.text().length();\n    final int realPrefixLength = prefixLength > fullSearchTermLength ? fullSearchTermLength : prefixLength;\n\n    this.text = searchTerm.text().substring(realPrefixLength);\n    this.prefix = searchTerm.text().substring(0, realPrefixLength);\n\n    this.p = new int[this.text.length()+1];\n    this.d = new int[this.text.length()+1];\n\n    setEnum(reader.terms(new Term(searchTerm.field(), prefix)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermEnum#FuzzyTermEnum(IndexReader,Term,float,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param reader Delivers terms.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermEnum(IndexReader reader, Term term, final float minSimilarity, final int prefixLength) throws IOException {\n    super();\n    \n    if (minSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be greater than or equal to 1\");\n    else if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n\n    this.minimumSimilarity = minSimilarity;\n    this.scale_factor = 1.0f / (1.0f - minimumSimilarity);\n    this.searchTerm = term;\n    this.field = searchTerm.field();\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    final int fullSearchTermLength = searchTerm.text().length();\n    final int realPrefixLength = prefixLength > fullSearchTermLength ? fullSearchTermLength : prefixLength;\n\n    this.text = searchTerm.text().substring(realPrefixLength);\n    this.prefix = searchTerm.text().substring(0, realPrefixLength);\n\n    this.p = new int[this.text.length()+1];\n    this.d = new int[this.text.length()+1];\n\n    setEnum(reader.terms(new Term(searchTerm.field(), prefix)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","28427ef110c4c5bf5b4057731b83110bd1e13724"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5f4e87790277826a2aea119328600dfb07761f32":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["28427ef110c4c5bf5b4057731b83110bd1e13724","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}