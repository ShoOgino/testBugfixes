{"path":"lucene/contrib/queries/src/test/org/apache/lucene/search/similar/TestMoreLikeThis#getOriginalValues().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/similar/TestMoreLikeThis#getOriginalValues().mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/similar/TestMoreLikeThis#getOriginalValues().mjava","sourceNew":"    private Map<String,Float> getOriginalValues() throws IOException {\n\tMap<String,Float> originalValues = new HashMap<String,Float>();\n\tMoreLikeThis mlt = new MoreLikeThis(reader);\n\tmlt.setMinDocFreq(1);\n\tmlt.setMinTermFreq(1);\n\tmlt.setMinWordLen(1);\n\tmlt.setFieldNames(new String[] { \"text\" });\n\tmlt.setBoost(true);\n\tBooleanQuery query = (BooleanQuery) mlt.like(new StringReader(\n\t\t\"lucene release\"));\n\tList<BooleanClause> clauses = query.clauses();\n\n\tfor (int i = 0; i < clauses.size(); i++) {\n\t    BooleanClause clause = clauses.get(i);\n\t    TermQuery tq = (TermQuery) clause.getQuery();\n\t    originalValues.put(tq.getTerm().text(), Float.valueOf(tq.getBoost()));\n\t}\n\treturn originalValues;\n    }\n\n","sourceOld":"    private Map<String,Float> getOriginalValues() throws IOException {\n\tMap<String,Float> originalValues = new HashMap<String,Float>();\n\tMoreLikeThis mlt = new MoreLikeThis(reader);\n\tmlt.setMinDocFreq(1);\n\tmlt.setMinTermFreq(1);\n\tmlt.setMinWordLen(1);\n\tmlt.setFieldNames(new String[] { \"text\" });\n\tmlt.setBoost(true);\n\tBooleanQuery query = (BooleanQuery) mlt.like(new StringReader(\n\t\t\"lucene release\"));\n\tList<BooleanClause> clauses = query.clauses();\n\n\tfor (int i = 0; i < clauses.size(); i++) {\n\t    BooleanClause clause = clauses.get(i);\n\t    TermQuery tq = (TermQuery) clause.getQuery();\n\t    originalValues.put(tq.getTerm().text(), Float.valueOf(tq.getBoost()));\n\t}\n\treturn originalValues;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790c3f61c9b891d66d919c5d10db9fa5216eb0f1","date":1274818604,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/similar/TestMoreLikeThis#getOriginalValues().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/similar/TestMoreLikeThis#getOriginalValues().mjava","sourceNew":"    private Map<String,Float> getOriginalValues() throws IOException {\n\tMap<String,Float> originalValues = new HashMap<String,Float>();\n\tMoreLikeThis mlt = new MoreLikeThis(reader);\n\tmlt.setAnalyzer(new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n\tmlt.setMinDocFreq(1);\n\tmlt.setMinTermFreq(1);\n\tmlt.setMinWordLen(1);\n\tmlt.setFieldNames(new String[] { \"text\" });\n\tmlt.setBoost(true);\n\tBooleanQuery query = (BooleanQuery) mlt.like(new StringReader(\n\t\t\"lucene release\"));\n\tList<BooleanClause> clauses = query.clauses();\n\n\tfor (int i = 0; i < clauses.size(); i++) {\n\t    BooleanClause clause = clauses.get(i);\n\t    TermQuery tq = (TermQuery) clause.getQuery();\n\t    originalValues.put(tq.getTerm().text(), Float.valueOf(tq.getBoost()));\n\t}\n\treturn originalValues;\n    }\n\n","sourceOld":"    private Map<String,Float> getOriginalValues() throws IOException {\n\tMap<String,Float> originalValues = new HashMap<String,Float>();\n\tMoreLikeThis mlt = new MoreLikeThis(reader);\n\tmlt.setMinDocFreq(1);\n\tmlt.setMinTermFreq(1);\n\tmlt.setMinWordLen(1);\n\tmlt.setFieldNames(new String[] { \"text\" });\n\tmlt.setBoost(true);\n\tBooleanQuery query = (BooleanQuery) mlt.like(new StringReader(\n\t\t\"lucene release\"));\n\tList<BooleanClause> clauses = query.clauses();\n\n\tfor (int i = 0; i < clauses.size(); i++) {\n\t    BooleanClause clause = clauses.get(i);\n\t    TermQuery tq = (TermQuery) clause.getQuery();\n\t    originalValues.put(tq.getTerm().text(), Float.valueOf(tq.getBoost()));\n\t}\n\treturn originalValues;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/similar/TestMoreLikeThis#getOriginalValues().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/similar/TestMoreLikeThis#getOriginalValues().mjava","sourceNew":"  private Map<String,Float> getOriginalValues() throws IOException {\n    Map<String,Float> originalValues = new HashMap<String,Float>();\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    mlt.setAnalyzer(new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n    mlt.setBoost(true);\n    BooleanQuery query = (BooleanQuery) mlt.like(new StringReader(\n        \"lucene release\"));\n    List<BooleanClause> clauses = query.clauses();\n    \n    for (int i = 0; i < clauses.size(); i++) {\n      BooleanClause clause = clauses.get(i);\n      TermQuery tq = (TermQuery) clause.getQuery();\n      originalValues.put(tq.getTerm().text(), Float.valueOf(tq.getBoost()));\n    }\n    return originalValues;\n  }\n\n","sourceOld":"    private Map<String,Float> getOriginalValues() throws IOException {\n\tMap<String,Float> originalValues = new HashMap<String,Float>();\n\tMoreLikeThis mlt = new MoreLikeThis(reader);\n\tmlt.setAnalyzer(new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n\tmlt.setMinDocFreq(1);\n\tmlt.setMinTermFreq(1);\n\tmlt.setMinWordLen(1);\n\tmlt.setFieldNames(new String[] { \"text\" });\n\tmlt.setBoost(true);\n\tBooleanQuery query = (BooleanQuery) mlt.like(new StringReader(\n\t\t\"lucene release\"));\n\tList<BooleanClause> clauses = query.clauses();\n\n\tfor (int i = 0; i < clauses.size(); i++) {\n\t    BooleanClause clause = clauses.get(i);\n\t    TermQuery tq = (TermQuery) clause.getQuery();\n\t    originalValues.put(tq.getTerm().text(), Float.valueOf(tq.getBoost()));\n\t}\n\treturn originalValues;\n    }\n\n","bugFix":null,"bugIntro":["303eba9db32cde4e6fbc4e51a44361ef1c302e6c","ae46d105c94ea6ceb5201189bf9611bdef91b1b4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/similar/TestMoreLikeThis#getOriginalValues().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/similar/TestMoreLikeThis#getOriginalValues().mjava","sourceNew":"  private Map<String,Float> getOriginalValues() throws IOException {\n    Map<String,Float> originalValues = new HashMap<String,Float>();\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    mlt.setAnalyzer(new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n    mlt.setBoost(true);\n    BooleanQuery query = (BooleanQuery) mlt.like(new StringReader(\n        \"lucene release\"));\n    List<BooleanClause> clauses = query.clauses();\n    \n    for (int i = 0; i < clauses.size(); i++) {\n      BooleanClause clause = clauses.get(i);\n      TermQuery tq = (TermQuery) clause.getQuery();\n      originalValues.put(tq.getTerm().text(), Float.valueOf(tq.getBoost()));\n    }\n    return originalValues;\n  }\n\n","sourceOld":"    private Map<String,Float> getOriginalValues() throws IOException {\n\tMap<String,Float> originalValues = new HashMap<String,Float>();\n\tMoreLikeThis mlt = new MoreLikeThis(reader);\n\tmlt.setAnalyzer(new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n\tmlt.setMinDocFreq(1);\n\tmlt.setMinTermFreq(1);\n\tmlt.setMinWordLen(1);\n\tmlt.setFieldNames(new String[] { \"text\" });\n\tmlt.setBoost(true);\n\tBooleanQuery query = (BooleanQuery) mlt.like(new StringReader(\n\t\t\"lucene release\"));\n\tList<BooleanClause> clauses = query.clauses();\n\n\tfor (int i = 0; i < clauses.size(); i++) {\n\t    BooleanClause clause = clauses.get(i);\n\t    TermQuery tq = (TermQuery) clause.getQuery();\n\t    originalValues.put(tq.getTerm().text(), Float.valueOf(tq.getBoost()));\n\t}\n\treturn originalValues;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/similar/TestMoreLikeThis#getOriginalValues().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/similar/TestMoreLikeThis#getOriginalValues().mjava","sourceNew":"  private Map<String,Float> getOriginalValues() throws IOException {\n    Map<String,Float> originalValues = new HashMap<String,Float>();\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    mlt.setAnalyzer(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n    mlt.setBoost(true);\n    BooleanQuery query = (BooleanQuery) mlt.like(new StringReader(\n        \"lucene release\"));\n    List<BooleanClause> clauses = query.clauses();\n    \n    for (int i = 0; i < clauses.size(); i++) {\n      BooleanClause clause = clauses.get(i);\n      TermQuery tq = (TermQuery) clause.getQuery();\n      originalValues.put(tq.getTerm().text(), Float.valueOf(tq.getBoost()));\n    }\n    return originalValues;\n  }\n\n","sourceOld":"  private Map<String,Float> getOriginalValues() throws IOException {\n    Map<String,Float> originalValues = new HashMap<String,Float>();\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    mlt.setAnalyzer(new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n    mlt.setBoost(true);\n    BooleanQuery query = (BooleanQuery) mlt.like(new StringReader(\n        \"lucene release\"));\n    List<BooleanClause> clauses = query.clauses();\n    \n    for (int i = 0; i < clauses.size(); i++) {\n      BooleanClause clause = clauses.get(i);\n      TermQuery tq = (TermQuery) clause.getQuery();\n      originalValues.put(tq.getTerm().text(), Float.valueOf(tq.getBoost()));\n    }\n    return originalValues;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/similar/TestMoreLikeThis#getOriginalValues().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/similar/TestMoreLikeThis#getOriginalValues().mjava","sourceNew":"  private Map<String,Float> getOriginalValues() throws IOException {\n    Map<String,Float> originalValues = new HashMap<String,Float>();\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    mlt.setAnalyzer(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n    mlt.setBoost(true);\n    BooleanQuery query = (BooleanQuery) mlt.like(new StringReader(\n        \"lucene release\"));\n    List<BooleanClause> clauses = query.clauses();\n    \n    for (int i = 0; i < clauses.size(); i++) {\n      BooleanClause clause = clauses.get(i);\n      TermQuery tq = (TermQuery) clause.getQuery();\n      originalValues.put(tq.getTerm().text(), Float.valueOf(tq.getBoost()));\n    }\n    return originalValues;\n  }\n\n","sourceOld":"  private Map<String,Float> getOriginalValues() throws IOException {\n    Map<String,Float> originalValues = new HashMap<String,Float>();\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    mlt.setAnalyzer(new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n    mlt.setBoost(true);\n    BooleanQuery query = (BooleanQuery) mlt.like(new StringReader(\n        \"lucene release\"));\n    List<BooleanClause> clauses = query.clauses();\n    \n    for (int i = 0; i < clauses.size(); i++) {\n      BooleanClause clause = clauses.get(i);\n      TermQuery tq = (TermQuery) clause.getQuery();\n      originalValues.put(tq.getTerm().text(), Float.valueOf(tq.getBoost()));\n    }\n    return originalValues;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/similar/TestMoreLikeThis#getOriginalValues().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/similar/TestMoreLikeThis#getOriginalValues().mjava","sourceNew":"  private Map<String,Float> getOriginalValues() throws IOException {\n    Map<String,Float> originalValues = new HashMap<String,Float>();\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    mlt.setAnalyzer(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n    mlt.setBoost(true);\n    BooleanQuery query = (BooleanQuery) mlt.like(new StringReader(\n        \"lucene release\"));\n    List<BooleanClause> clauses = query.clauses();\n    \n    for (int i = 0; i < clauses.size(); i++) {\n      BooleanClause clause = clauses.get(i);\n      TermQuery tq = (TermQuery) clause.getQuery();\n      originalValues.put(tq.getTerm().text(), Float.valueOf(tq.getBoost()));\n    }\n    return originalValues;\n  }\n\n","sourceOld":"  private Map<String,Float> getOriginalValues() throws IOException {\n    Map<String,Float> originalValues = new HashMap<String,Float>();\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    mlt.setAnalyzer(new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n    mlt.setBoost(true);\n    BooleanQuery query = (BooleanQuery) mlt.like(new StringReader(\n        \"lucene release\"));\n    List<BooleanClause> clauses = query.clauses();\n    \n    for (int i = 0; i < clauses.size(); i++) {\n      BooleanClause clause = clauses.get(i);\n      TermQuery tq = (TermQuery) clause.getQuery();\n      originalValues.put(tq.getTerm().text(), Float.valueOf(tq.getBoost()));\n    }\n    return originalValues;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/similar/TestMoreLikeThis#getOriginalValues().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/similar/TestMoreLikeThis#getOriginalValues().mjava","sourceNew":"  private Map<String,Float> getOriginalValues() throws IOException {\n    Map<String,Float> originalValues = new HashMap<String,Float>();\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    mlt.setAnalyzer(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n    mlt.setBoost(true);\n    BooleanQuery query = (BooleanQuery) mlt.like(new StringReader(\n        \"lucene release\"));\n    List<BooleanClause> clauses = query.clauses();\n    \n    for (int i = 0; i < clauses.size(); i++) {\n      BooleanClause clause = clauses.get(i);\n      TermQuery tq = (TermQuery) clause.getQuery();\n      originalValues.put(tq.getTerm().text(), Float.valueOf(tq.getBoost()));\n    }\n    return originalValues;\n  }\n\n","sourceOld":"  private Map<String,Float> getOriginalValues() throws IOException {\n    Map<String,Float> originalValues = new HashMap<String,Float>();\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    mlt.setAnalyzer(new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n    mlt.setBoost(true);\n    BooleanQuery query = (BooleanQuery) mlt.like(new StringReader(\n        \"lucene release\"));\n    List<BooleanClause> clauses = query.clauses();\n    \n    for (int i = 0; i < clauses.size(); i++) {\n      BooleanClause clause = clauses.get(i);\n      TermQuery tq = (TermQuery) clause.getQuery();\n      originalValues.put(tq.getTerm().text(), Float.valueOf(tq.getBoost()));\n    }\n    return originalValues;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1","date":1310609231,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#getOriginalValues().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/similar/TestMoreLikeThis#getOriginalValues().mjava","sourceNew":"  private Map<String,Float> getOriginalValues() throws IOException {\n    Map<String,Float> originalValues = new HashMap<String,Float>();\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    mlt.setAnalyzer(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n    mlt.setBoost(true);\n    BooleanQuery query = (BooleanQuery) mlt.like(new StringReader(\n        \"lucene release\"));\n    List<BooleanClause> clauses = query.clauses();\n\n    for (BooleanClause clause : clauses) {\n      TermQuery tq = (TermQuery) clause.getQuery();\n      originalValues.put(tq.getTerm().text(), tq.getBoost());\n    }\n    return originalValues;\n  }\n\n","sourceOld":"  private Map<String,Float> getOriginalValues() throws IOException {\n    Map<String,Float> originalValues = new HashMap<String,Float>();\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    mlt.setAnalyzer(new MockAnalyzer(random, MockTokenizer.WHITESPACE, false));\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n    mlt.setBoost(true);\n    BooleanQuery query = (BooleanQuery) mlt.like(new StringReader(\n        \"lucene release\"));\n    List<BooleanClause> clauses = query.clauses();\n    \n    for (int i = 0; i < clauses.size(); i++) {\n      BooleanClause clause = clauses.get(i);\n      TermQuery tq = (TermQuery) clause.getQuery();\n      originalValues.put(tq.getTerm().text(), Float.valueOf(tq.getBoost()));\n    }\n    return originalValues;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c084e47df29de3330311d69dabf515ceaa989512":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["c084e47df29de3330311d69dabf515ceaa989512"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c084e47df29de3330311d69dabf515ceaa989512","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c084e47df29de3330311d69dabf515ceaa989512","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"5f4e87790277826a2aea119328600dfb07761f32":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","c084e47df29de3330311d69dabf515ceaa989512"],"962d04139994fce5193143ef35615499a9a96d78":["5f4e87790277826a2aea119328600dfb07761f32","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c084e47df29de3330311d69dabf515ceaa989512":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","5f4e87790277826a2aea119328600dfb07761f32"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1","962d04139994fce5193143ef35615499a9a96d78"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5f4e87790277826a2aea119328600dfb07761f32":["962d04139994fce5193143ef35615499a9a96d78"],"962d04139994fce5193143ef35615499a9a96d78":[],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["c084e47df29de3330311d69dabf515ceaa989512","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}