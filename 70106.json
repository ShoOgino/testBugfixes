{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/GTEFunctionTest#oneMultiOneSingleValueNumericParameterTest().mjava","commits":[{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/GTEFunctionTest#oneMultiOneSingleValueNumericParameterTest().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void oneMultiOneSingleValueNumericParameterTest() {\n    TestDoubleValueStream base = new TestDoubleValueStream();\n    TestDoubleValue comp = new TestDoubleValue();\n    \n    AnalyticsValueStream uncasted = GTEFunction.creatorFunction.apply(new AnalyticsValueStream[] {base, comp});\n    assertTrue(uncasted instanceof BooleanValueStream);\n    BooleanValueStream func = (BooleanValueStream) uncasted;\n\n    // No values\n    base.setValues();\n    comp.setValue(-4.2).setExists(true);\n    func.streamBooleans( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    base.setValues(-4.2);\n    comp.setExists(false);\n    func.streamBooleans( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n    \n    // One value\n    base.setValues(-4.2);\n    comp.setValue(-4).setExists(true);\n    Iterator<Boolean> values1 = Arrays.asList(false).iterator();\n    func.streamBooleans( value -> {\n      assertTrue(values1.hasNext());\n      assertEquals(values1.next(), value);\n    });\n    assertFalse(values1.hasNext());\n    \n    // Multiple values\n    base.setValues(4, -10, 2345, -74, 4.0001);\n    comp.setValue(4).setExists(true);\n    Iterator<Boolean> values2 = Arrays.asList(true, false, true, false, true).iterator();\n    func.streamBooleans( value -> {\n      assertTrue(values2.hasNext());\n      assertEquals(values2.next(), value);\n    });\n    assertFalse(values2.hasNext());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/GTEFunctionTest#oneMultiOneSingleValueNumericParameterTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/GTEFunctionTest#oneMultiOneSingleValueNumericParameterTest().mjava","sourceNew":"  @Test\n  public void oneMultiOneSingleValueNumericParameterTest() {\n    TestDoubleValueStream base = new TestDoubleValueStream();\n    TestDoubleValue comp = new TestDoubleValue();\n\n    AnalyticsValueStream uncasted = GTEFunction.creatorFunction.apply(new AnalyticsValueStream[] {base, comp});\n    assertTrue(uncasted instanceof BooleanValueStream);\n    BooleanValueStream func = (BooleanValueStream) uncasted;\n\n    // No values\n    base.setValues();\n    comp.setValue(-4.2).setExists(true);\n    func.streamBooleans( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    base.setValues(-4.2);\n    comp.setExists(false);\n    func.streamBooleans( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    // One value\n    base.setValues(-4.2);\n    comp.setValue(-4).setExists(true);\n    Iterator<Boolean> values1 = Arrays.asList(false).iterator();\n    func.streamBooleans( value -> {\n      assertTrue(values1.hasNext());\n      assertEquals(values1.next(), value);\n    });\n    assertFalse(values1.hasNext());\n\n    // Multiple values\n    base.setValues(4, -10, 2345, -74, 4.0001);\n    comp.setValue(4).setExists(true);\n    Iterator<Boolean> values2 = Arrays.asList(true, false, true, false, true).iterator();\n    func.streamBooleans( value -> {\n      assertTrue(values2.hasNext());\n      assertEquals(values2.next(), value);\n    });\n    assertFalse(values2.hasNext());\n  }\n\n","sourceOld":"  @Test\n  public void oneMultiOneSingleValueNumericParameterTest() {\n    TestDoubleValueStream base = new TestDoubleValueStream();\n    TestDoubleValue comp = new TestDoubleValue();\n    \n    AnalyticsValueStream uncasted = GTEFunction.creatorFunction.apply(new AnalyticsValueStream[] {base, comp});\n    assertTrue(uncasted instanceof BooleanValueStream);\n    BooleanValueStream func = (BooleanValueStream) uncasted;\n\n    // No values\n    base.setValues();\n    comp.setValue(-4.2).setExists(true);\n    func.streamBooleans( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    base.setValues(-4.2);\n    comp.setExists(false);\n    func.streamBooleans( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n    \n    // One value\n    base.setValues(-4.2);\n    comp.setValue(-4).setExists(true);\n    Iterator<Boolean> values1 = Arrays.asList(false).iterator();\n    func.streamBooleans( value -> {\n      assertTrue(values1.hasNext());\n      assertEquals(values1.next(), value);\n    });\n    assertFalse(values1.hasNext());\n    \n    // Multiple values\n    base.setValues(4, -10, 2345, -74, 4.0001);\n    comp.setValue(4).setExists(true);\n    Iterator<Boolean> values2 = Arrays.asList(true, false, true, false, true).iterator();\n    func.streamBooleans( value -> {\n      assertTrue(values2.hasNext());\n      assertEquals(values2.next(), value);\n    });\n    assertFalse(values2.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/GTEFunctionTest#oneMultiOneSingleValueNumericParameterTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/GTEFunctionTest#oneMultiOneSingleValueNumericParameterTest().mjava","sourceNew":"  @Test\n  public void oneMultiOneSingleValueNumericParameterTest() {\n    TestDoubleValueStream base = new TestDoubleValueStream();\n    TestDoubleValue comp = new TestDoubleValue();\n\n    AnalyticsValueStream uncasted = GTEFunction.creatorFunction.apply(new AnalyticsValueStream[] {base, comp});\n    assertTrue(uncasted instanceof BooleanValueStream);\n    BooleanValueStream func = (BooleanValueStream) uncasted;\n\n    // No values\n    base.setValues();\n    comp.setValue(-4.2).setExists(true);\n    func.streamBooleans( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    base.setValues(-4.2);\n    comp.setExists(false);\n    func.streamBooleans( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    // One value\n    base.setValues(-4.2);\n    comp.setValue(-4).setExists(true);\n    Iterator<Boolean> values1 = Arrays.asList(false).iterator();\n    func.streamBooleans( value -> {\n      assertTrue(values1.hasNext());\n      assertEquals(values1.next(), value);\n    });\n    assertFalse(values1.hasNext());\n\n    // Multiple values\n    base.setValues(4, -10, 2345, -74, 4.0001);\n    comp.setValue(4).setExists(true);\n    Iterator<Boolean> values2 = Arrays.asList(true, false, true, false, true).iterator();\n    func.streamBooleans( value -> {\n      assertTrue(values2.hasNext());\n      assertEquals(values2.next(), value);\n    });\n    assertFalse(values2.hasNext());\n  }\n\n","sourceOld":"  @Test\n  public void oneMultiOneSingleValueNumericParameterTest() {\n    TestDoubleValueStream base = new TestDoubleValueStream();\n    TestDoubleValue comp = new TestDoubleValue();\n    \n    AnalyticsValueStream uncasted = GTEFunction.creatorFunction.apply(new AnalyticsValueStream[] {base, comp});\n    assertTrue(uncasted instanceof BooleanValueStream);\n    BooleanValueStream func = (BooleanValueStream) uncasted;\n\n    // No values\n    base.setValues();\n    comp.setValue(-4.2).setExists(true);\n    func.streamBooleans( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    base.setValues(-4.2);\n    comp.setExists(false);\n    func.streamBooleans( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n    \n    // One value\n    base.setValues(-4.2);\n    comp.setValue(-4).setExists(true);\n    Iterator<Boolean> values1 = Arrays.asList(false).iterator();\n    func.streamBooleans( value -> {\n      assertTrue(values1.hasNext());\n      assertEquals(values1.next(), value);\n    });\n    assertFalse(values1.hasNext());\n    \n    // Multiple values\n    base.setValues(4, -10, 2345, -74, 4.0001);\n    comp.setValue(4).setExists(true);\n    Iterator<Boolean> values2 = Arrays.asList(true, false, true, false, true).iterator();\n    func.streamBooleans( value -> {\n      assertTrue(values2.hasNext());\n      assertEquals(values2.next(), value);\n    });\n    assertFalse(values2.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["3bd4c6955956e76c96eb12dfe64108ed03522983","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["1e4e64b7199d2f2a17be7f3926c7532553910dce","f8061ddd97f3352007d927dae445884a6f3d857b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}