{"path":"contrib/gdata-server/src/gom/src/java/org/apache/lucene/gdata/gom/core/utils/GOMUtils#parseRfc3339DateFormat(String).mjava","commits":[{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/gom/src/java/org/apache/lucene/gdata/gom/core/utils/GOMUtils#parseRfc3339DateFormat(String).mjava","pathOld":"contrib/gdata-server/src/gom/java/org/apache/lucene/gdata/gom/core/utils/GOMUtils#parseRfc3339DateFormat(String).mjava","sourceNew":"\t/**\n\t * @param aString\n\t * @return\n\t */\n\tpublic static long parseRfc3339DateFormat(String aString) {\n\t\tif (aString == null)\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"Date-Time String must not be null\");\n\t\tMatcher aMatcher = RFC3339_DATE_PATTERN.matcher(aString);\n\n\t\tif (!aMatcher.matches()) {\n\t\t\tthrow new GDataParseException(\n\t\t\t\t\t\"Invalid RFC3339 date / time pattern -- \" + aString);\n\t\t}\n\t\tint grCount = aMatcher.groupCount();\n\t\tif (grCount > 13)\n\t\t\tthrow new GDataParseException(\n\t\t\t\t\t\"Invalid RFC3339 date / time pattern -- \" + aString);\n\n\t\tInteger timeZoneShift = null;\n\t\tCalendar dateTime = null;\n\t\ttry {\n\n\t\t\tif (aMatcher.group(9) == null) {\n\t\t\t\t// skip time zone\n\t\t\t} else if (aMatcher.group(9).equalsIgnoreCase(\"Z\")) {\n\t\t\t\ttimeZoneShift = new Integer(0);\n\t\t\t} else {\n\t\t\t\ttimeZoneShift = new Integer((Integer\n\t\t\t\t\t\t.valueOf(aMatcher.group(12)) * 60 + Integer\n\t\t\t\t\t\t.valueOf(aMatcher.group(13))));\n\t\t\t\tif (aMatcher.group(11).equals(\"-\")) {\n\t\t\t\t\ttimeZoneShift = new Integer(-timeZoneShift.intValue());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdateTime = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n\t\t\t;\n\t\t\tdateTime.clear();\n\t\t\tdateTime.set(Integer.valueOf(aMatcher.group(1)), Integer\n\t\t\t\t\t.valueOf(aMatcher.group(2)) - 1, Integer.valueOf(aMatcher\n\t\t\t\t\t.group(3)), Integer.valueOf(aMatcher.group(4)), Integer\n\t\t\t\t\t.valueOf(aMatcher.group(5)), Integer.valueOf(aMatcher\n\t\t\t\t\t.group(6)));\n\t\t\t// seconds with milliseconds\n\t\t\tif (aMatcher.group(8) != null && aMatcher.group(8).length() > 0) {\n\n\t\t\t\tdateTime.set(Calendar.MILLISECOND, new BigDecimal(\"0.\"/*\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * use\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * big\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * dec\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * this\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * could\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * be\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * big!!\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t */\n\t\t\t\t\t\t+ aMatcher.group(8)).movePointRight(3).intValue());\n\t\t\t}\n\t\t} catch (NumberFormatException e) {\n\t\t\tthrow new GDataParseException(\n\t\t\t\t\t\"Invalid RFC3339 date / time pattern -- \" + aString, e);\n\t\t}\n\n\t\tlong retVal = dateTime.getTimeInMillis();\n\t\tif (timeZoneShift != null) {\n\t\t\tretVal -= timeZoneShift.intValue() * 60000;\n\t\t}\n\n\t\treturn retVal;\n\t}\n\n","sourceOld":"\t/**\n\t * @param aString\n\t * @return\n\t */\n\tpublic static long parseRfc3339DateFormat(String aString) {\n\t\tif (aString == null)\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"Date-Time String must not be null\");\n\t\tMatcher aMatcher = RFC3339_DATE_PATTERN.matcher(aString);\n\n\t\tif (!aMatcher.matches()) {\n\t\t\tthrow new GDataParseException(\n\t\t\t\t\t\"Invalid RFC3339 date / time pattern -- \" + aString);\n\t\t}\n\t\tint grCount = aMatcher.groupCount();\n\t\tif (grCount > 13)\n\t\t\tthrow new GDataParseException(\n\t\t\t\t\t\"Invalid RFC3339 date / time pattern -- \" + aString);\n\n\t\tInteger timeZoneShift = null;\n\t\tCalendar dateTime = null;\n\t\ttry {\n\n\t\t\tif (aMatcher.group(9) == null) {\n\t\t\t\t// skip time zone\n\t\t\t} else if (aMatcher.group(9).equalsIgnoreCase(\"Z\")) {\n\t\t\t\ttimeZoneShift = new Integer(0);\n\t\t\t} else {\n\t\t\t\ttimeZoneShift = new Integer((Integer\n\t\t\t\t\t\t.valueOf(aMatcher.group(12)) * 60 + Integer\n\t\t\t\t\t\t.valueOf(aMatcher.group(13))));\n\t\t\t\tif (aMatcher.group(11).equals(\"-\")) {\n\t\t\t\t\ttimeZoneShift = new Integer(-timeZoneShift.intValue());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdateTime = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n\t\t\t;\n\t\t\tdateTime.clear();\n\t\t\tdateTime.set(Integer.valueOf(aMatcher.group(1)), Integer\n\t\t\t\t\t.valueOf(aMatcher.group(2)) - 1, Integer.valueOf(aMatcher\n\t\t\t\t\t.group(3)), Integer.valueOf(aMatcher.group(4)), Integer\n\t\t\t\t\t.valueOf(aMatcher.group(5)), Integer.valueOf(aMatcher\n\t\t\t\t\t.group(6)));\n\t\t\t// seconds with milliseconds\n\t\t\tif (aMatcher.group(8) != null && aMatcher.group(8).length() > 0) {\n\n\t\t\t\tdateTime.set(Calendar.MILLISECOND, new BigDecimal(\"0.\"/*\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * use\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * big\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * dec\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * this\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * could\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * be\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * big!!\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t */\n\t\t\t\t\t\t+ aMatcher.group(8)).movePointRight(3).intValue());\n\t\t\t}\n\t\t} catch (NumberFormatException e) {\n\t\t\tthrow new GDataParseException(\n\t\t\t\t\t\"Invalid RFC3339 date / time pattern -- \" + aString, e);\n\t\t}\n\n\t\tlong retVal = dateTime.getTimeInMillis();\n\t\tif (timeZoneShift != null) {\n\t\t\tretVal -= timeZoneShift.intValue() * 60000;\n\t\t}\n\n\t\treturn retVal;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed9d3ee5398993e024dd3286bf7216de59afe2c4","date":1191616259,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"contrib/gdata-server/src/gom/src/java/org/apache/lucene/gdata/gom/core/utils/GOMUtils#parseRfc3339DateFormat(String).mjava","pathOld":"contrib/gdata-server/src/gom/src/java/org/apache/lucene/gdata/gom/core/utils/GOMUtils#parseRfc3339DateFormat(String).mjava","sourceNew":"\tpublic static long parseRfc3339DateFormat(String aString) {\n\t\tif (aString == null)\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"Date-Time String must not be null\");\n\t\tMatcher aMatcher = RFC3339_DATE_PATTERN.matcher(aString);\n\n\t\tif (!aMatcher.matches()) {\n\t\t\tthrow new GDataParseException(\n\t\t\t\t\t\"Invalid RFC3339 date / time pattern -- \" + aString);\n\t\t}\n\t\tint grCount = aMatcher.groupCount();\n\t\tif (grCount > 13)\n\t\t\tthrow new GDataParseException(\n\t\t\t\t\t\"Invalid RFC3339 date / time pattern -- \" + aString);\n\n\t\tInteger timeZoneShift = null;\n\t\tCalendar dateTime = null;\n\t\ttry {\n\n\t\t\tif (aMatcher.group(9) == null) {\n\t\t\t\t// skip time zone\n\t\t\t} else if (aMatcher.group(9).equalsIgnoreCase(\"Z\")) {\n\t\t\t\ttimeZoneShift = new Integer(0);\n\t\t\t} else {\n\t\t\t\ttimeZoneShift = new Integer((Integer\n\t\t\t\t\t\t.valueOf(aMatcher.group(12)) * 60 + Integer\n\t\t\t\t\t\t.valueOf(aMatcher.group(13))));\n\t\t\t\tif (aMatcher.group(11).equals(\"-\")) {\n\t\t\t\t\ttimeZoneShift = new Integer(-timeZoneShift.intValue());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdateTime = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n\t\t\t;\n\t\t\tdateTime.clear();\n\t\t\tdateTime.set(Integer.valueOf(aMatcher.group(1)), Integer\n\t\t\t\t\t.valueOf(aMatcher.group(2)) - 1, Integer.valueOf(aMatcher\n\t\t\t\t\t.group(3)), Integer.valueOf(aMatcher.group(4)), Integer\n\t\t\t\t\t.valueOf(aMatcher.group(5)), Integer.valueOf(aMatcher\n\t\t\t\t\t.group(6)));\n\t\t\t// seconds with milliseconds\n\t\t\tif (aMatcher.group(8) != null && aMatcher.group(8).length() > 0) {\n\n\t\t\t\tdateTime.set(Calendar.MILLISECOND, new BigDecimal(\"0.\"/*\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * use\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * big\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * dec\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * this\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * could\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * be\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * big!!\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t */\n\t\t\t\t\t\t+ aMatcher.group(8)).movePointRight(3).intValue());\n\t\t\t}\n\t\t} catch (NumberFormatException e) {\n\t\t\tthrow new GDataParseException(\n\t\t\t\t\t\"Invalid RFC3339 date / time pattern -- \" + aString, e);\n\t\t}\n\n\t\tlong retVal = dateTime.getTimeInMillis();\n\t\tif (timeZoneShift != null) {\n\t\t\tretVal -= timeZoneShift.intValue() * 60000;\n\t\t}\n\n\t\treturn retVal;\n\t}\n\n","sourceOld":"\t/**\n\t * @param aString\n\t * @return\n\t */\n\tpublic static long parseRfc3339DateFormat(String aString) {\n\t\tif (aString == null)\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"Date-Time String must not be null\");\n\t\tMatcher aMatcher = RFC3339_DATE_PATTERN.matcher(aString);\n\n\t\tif (!aMatcher.matches()) {\n\t\t\tthrow new GDataParseException(\n\t\t\t\t\t\"Invalid RFC3339 date / time pattern -- \" + aString);\n\t\t}\n\t\tint grCount = aMatcher.groupCount();\n\t\tif (grCount > 13)\n\t\t\tthrow new GDataParseException(\n\t\t\t\t\t\"Invalid RFC3339 date / time pattern -- \" + aString);\n\n\t\tInteger timeZoneShift = null;\n\t\tCalendar dateTime = null;\n\t\ttry {\n\n\t\t\tif (aMatcher.group(9) == null) {\n\t\t\t\t// skip time zone\n\t\t\t} else if (aMatcher.group(9).equalsIgnoreCase(\"Z\")) {\n\t\t\t\ttimeZoneShift = new Integer(0);\n\t\t\t} else {\n\t\t\t\ttimeZoneShift = new Integer((Integer\n\t\t\t\t\t\t.valueOf(aMatcher.group(12)) * 60 + Integer\n\t\t\t\t\t\t.valueOf(aMatcher.group(13))));\n\t\t\t\tif (aMatcher.group(11).equals(\"-\")) {\n\t\t\t\t\ttimeZoneShift = new Integer(-timeZoneShift.intValue());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdateTime = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n\t\t\t;\n\t\t\tdateTime.clear();\n\t\t\tdateTime.set(Integer.valueOf(aMatcher.group(1)), Integer\n\t\t\t\t\t.valueOf(aMatcher.group(2)) - 1, Integer.valueOf(aMatcher\n\t\t\t\t\t.group(3)), Integer.valueOf(aMatcher.group(4)), Integer\n\t\t\t\t\t.valueOf(aMatcher.group(5)), Integer.valueOf(aMatcher\n\t\t\t\t\t.group(6)));\n\t\t\t// seconds with milliseconds\n\t\t\tif (aMatcher.group(8) != null && aMatcher.group(8).length() > 0) {\n\n\t\t\t\tdateTime.set(Calendar.MILLISECOND, new BigDecimal(\"0.\"/*\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * use\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * big\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * dec\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * this\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * could\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * be\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * big!!\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t */\n\t\t\t\t\t\t+ aMatcher.group(8)).movePointRight(3).intValue());\n\t\t\t}\n\t\t} catch (NumberFormatException e) {\n\t\t\tthrow new GDataParseException(\n\t\t\t\t\t\"Invalid RFC3339 date / time pattern -- \" + aString, e);\n\t\t}\n\n\t\tlong retVal = dateTime.getTimeInMillis();\n\t\tif (timeZoneShift != null) {\n\t\t\tretVal -= timeZoneShift.intValue() * 60000;\n\t\t}\n\n\t\treturn retVal;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe","date":1195519587,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/gdata-server/src/gom/src/java/org/apache/lucene/gdata/gom/core/utils/GOMUtils#parseRfc3339DateFormat(String).mjava","sourceNew":null,"sourceOld":"\tpublic static long parseRfc3339DateFormat(String aString) {\n\t\tif (aString == null)\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"Date-Time String must not be null\");\n\t\tMatcher aMatcher = RFC3339_DATE_PATTERN.matcher(aString);\n\n\t\tif (!aMatcher.matches()) {\n\t\t\tthrow new GDataParseException(\n\t\t\t\t\t\"Invalid RFC3339 date / time pattern -- \" + aString);\n\t\t}\n\t\tint grCount = aMatcher.groupCount();\n\t\tif (grCount > 13)\n\t\t\tthrow new GDataParseException(\n\t\t\t\t\t\"Invalid RFC3339 date / time pattern -- \" + aString);\n\n\t\tInteger timeZoneShift = null;\n\t\tCalendar dateTime = null;\n\t\ttry {\n\n\t\t\tif (aMatcher.group(9) == null) {\n\t\t\t\t// skip time zone\n\t\t\t} else if (aMatcher.group(9).equalsIgnoreCase(\"Z\")) {\n\t\t\t\ttimeZoneShift = new Integer(0);\n\t\t\t} else {\n\t\t\t\ttimeZoneShift = new Integer((Integer\n\t\t\t\t\t\t.valueOf(aMatcher.group(12)) * 60 + Integer\n\t\t\t\t\t\t.valueOf(aMatcher.group(13))));\n\t\t\t\tif (aMatcher.group(11).equals(\"-\")) {\n\t\t\t\t\ttimeZoneShift = new Integer(-timeZoneShift.intValue());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdateTime = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n\t\t\t;\n\t\t\tdateTime.clear();\n\t\t\tdateTime.set(Integer.valueOf(aMatcher.group(1)), Integer\n\t\t\t\t\t.valueOf(aMatcher.group(2)) - 1, Integer.valueOf(aMatcher\n\t\t\t\t\t.group(3)), Integer.valueOf(aMatcher.group(4)), Integer\n\t\t\t\t\t.valueOf(aMatcher.group(5)), Integer.valueOf(aMatcher\n\t\t\t\t\t.group(6)));\n\t\t\t// seconds with milliseconds\n\t\t\tif (aMatcher.group(8) != null && aMatcher.group(8).length() > 0) {\n\n\t\t\t\tdateTime.set(Calendar.MILLISECOND, new BigDecimal(\"0.\"/*\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * use\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * big\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * dec\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * this\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * could\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * be\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * big!!\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t */\n\t\t\t\t\t\t+ aMatcher.group(8)).movePointRight(3).intValue());\n\t\t\t}\n\t\t} catch (NumberFormatException e) {\n\t\t\tthrow new GDataParseException(\n\t\t\t\t\t\"Invalid RFC3339 date / time pattern -- \" + aString, e);\n\t\t}\n\n\t\tlong retVal = dateTime.getTimeInMillis();\n\t\tif (timeZoneShift != null) {\n\t\t\tretVal -= timeZoneShift.intValue() * 60000;\n\t\t}\n\n\t\treturn retVal;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ed9d3ee5398993e024dd3286bf7216de59afe2c4":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["ed9d3ee5398993e024dd3286bf7216de59afe2c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"]},"commit2Childs":{"ed9d3ee5398993e024dd3286bf7216de59afe2c4":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"],"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["ed9d3ee5398993e024dd3286bf7216de59afe2c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}