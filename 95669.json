{"path":"lucene/src/java/org/apache/lucene/index/FieldsWriter#writeField(int,IndexableField).mjava","commits":[{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsWriter#writeField(int,IndexableField).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsWriter#writeField(int,Fieldable).mjava","sourceNew":"  final void writeField(int fieldNumber, IndexableField field) throws IOException {\n    fieldsStream.writeVInt(fieldNumber);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n    if (field.numeric()) {\n      switch (field.numericDataType()) {\n        case INT:\n          bits |= FIELD_IS_NUMERIC_INT; break;\n        case LONG:\n          bits |= FIELD_IS_NUMERIC_LONG; break;\n        case FLOAT:\n          bits |= FIELD_IS_NUMERIC_FLOAT; break;\n        case DOUBLE:\n          bits |= FIELD_IS_NUMERIC_DOUBLE; break;\n        default:\n          assert false : \"Should never get here\";\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n      }\n    }\n\n    fieldsStream.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsStream.writeVInt(bytes.length);\n      fieldsStream.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsStream.writeString(field.stringValue());\n    } else {\n      final Number n = field.numericValue();\n      if (n == null) {\n        throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n      }\n      switch (field.numericDataType()) {\n        case INT:\n          fieldsStream.writeInt(n.intValue()); break;\n        case LONG:\n          fieldsStream.writeLong(n.longValue()); break;\n        case FLOAT:\n          fieldsStream.writeInt(Float.floatToIntBits(n.floatValue())); break;\n        case DOUBLE:\n          fieldsStream.writeLong(Double.doubleToLongBits(n.doubleValue())); break;\n        default:\n          assert false : \"Should never get here\";\n      }\n    }\n  }\n\n","sourceOld":"  final void writeField(int fieldNumber, Fieldable field) throws IOException {\n    fieldsStream.writeVInt(fieldNumber);\n    int bits = 0;\n    if (field.isTokenized())\n      bits |= FIELD_IS_TOKENIZED;\n    if (field.isBinary())\n      bits |= FIELD_IS_BINARY;\n    if (field instanceof NumericField) {\n      switch (((NumericField) field).getDataType()) {\n        case INT:\n          bits |= FIELD_IS_NUMERIC_INT; break;\n        case LONG:\n          bits |= FIELD_IS_NUMERIC_LONG; break;\n        case FLOAT:\n          bits |= FIELD_IS_NUMERIC_FLOAT; break;\n        case DOUBLE:\n          bits |= FIELD_IS_NUMERIC_DOUBLE; break;\n        default:\n          assert false : \"Should never get here\";\n      }\n    }\n    fieldsStream.writeByte((byte) bits);\n\n    if (field.isBinary()) {\n      final byte[] data;\n      final int len;\n      final int offset;\n      data = field.getBinaryValue();\n      len = field.getBinaryLength();\n      offset =  field.getBinaryOffset();\n\n      fieldsStream.writeVInt(len);\n      fieldsStream.writeBytes(data, offset, len);\n    } else if (field instanceof NumericField) {\n      final NumericField nf = (NumericField) field;\n      final Number n = nf.getNumericValue();\n      switch (nf.getDataType()) {\n        case INT:\n          fieldsStream.writeInt(n.intValue()); break;\n        case LONG:\n          fieldsStream.writeLong(n.longValue()); break;\n        case FLOAT:\n          fieldsStream.writeInt(Float.floatToIntBits(n.floatValue())); break;\n        case DOUBLE:\n          fieldsStream.writeLong(Double.doubleToLongBits(n.doubleValue())); break;\n        default:\n          assert false : \"Should never get here\";\n      }\n    } else {\n      fieldsStream.writeString(field.stringValue());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b1110660886afcc62f57e9af901cd3f5dd294bc","date":1317830374,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultFieldsWriter#writeField(int,IndexableField).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsWriter#writeField(int,IndexableField).mjava","sourceNew":"  public final void writeField(int fieldNumber, IndexableField field) throws IOException {\n    fieldsStream.writeVInt(fieldNumber);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n    if (field.numeric()) {\n      switch (field.numericDataType()) {\n        case INT:\n          bits |= FIELD_IS_NUMERIC_INT; break;\n        case LONG:\n          bits |= FIELD_IS_NUMERIC_LONG; break;\n        case FLOAT:\n          bits |= FIELD_IS_NUMERIC_FLOAT; break;\n        case DOUBLE:\n          bits |= FIELD_IS_NUMERIC_DOUBLE; break;\n        default:\n          assert false : \"Should never get here\";\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n      }\n    }\n\n    fieldsStream.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsStream.writeVInt(bytes.length);\n      fieldsStream.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsStream.writeString(field.stringValue());\n    } else {\n      final Number n = field.numericValue();\n      if (n == null) {\n        throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n      }\n      switch (field.numericDataType()) {\n        case INT:\n          fieldsStream.writeInt(n.intValue()); break;\n        case LONG:\n          fieldsStream.writeLong(n.longValue()); break;\n        case FLOAT:\n          fieldsStream.writeInt(Float.floatToIntBits(n.floatValue())); break;\n        case DOUBLE:\n          fieldsStream.writeLong(Double.doubleToLongBits(n.doubleValue())); break;\n        default:\n          assert false : \"Should never get here\";\n      }\n    }\n  }\n\n","sourceOld":"  final void writeField(int fieldNumber, IndexableField field) throws IOException {\n    fieldsStream.writeVInt(fieldNumber);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n    if (field.numeric()) {\n      switch (field.numericDataType()) {\n        case INT:\n          bits |= FIELD_IS_NUMERIC_INT; break;\n        case LONG:\n          bits |= FIELD_IS_NUMERIC_LONG; break;\n        case FLOAT:\n          bits |= FIELD_IS_NUMERIC_FLOAT; break;\n        case DOUBLE:\n          bits |= FIELD_IS_NUMERIC_DOUBLE; break;\n        default:\n          assert false : \"Should never get here\";\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n      }\n    }\n\n    fieldsStream.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsStream.writeVInt(bytes.length);\n      fieldsStream.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsStream.writeString(field.stringValue());\n    } else {\n      final Number n = field.numericValue();\n      if (n == null) {\n        throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n      }\n      switch (field.numericDataType()) {\n        case INT:\n          fieldsStream.writeInt(n.intValue()); break;\n        case LONG:\n          fieldsStream.writeLong(n.longValue()); break;\n        case FLOAT:\n          fieldsStream.writeInt(Float.floatToIntBits(n.floatValue())); break;\n        case DOUBLE:\n          fieldsStream.writeLong(Double.doubleToLongBits(n.doubleValue())); break;\n        default:\n          assert false : \"Should never get here\";\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b1110660886afcc62f57e9af901cd3f5dd294bc":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4b1110660886afcc62f57e9af901cd3f5dd294bc"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"4b1110660886afcc62f57e9af901cd3f5dd294bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["4b1110660886afcc62f57e9af901cd3f5dd294bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}