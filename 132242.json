{"path":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testDeleteEntry().mjava","commits":[{"id":"5d43e216d757e2276d180eba8a192e300c4bfadb","date":1149717385,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testDeleteEntry().mjava","pathOld":"/dev/null","sourceNew":"    /* \n     * Test method for \n     * 'org.apache.lucene.storage.lucenestorage.StorageModifier.deleteEntry(String)' \n     */ \n    public void testDeleteEntry() throws IOException, InterruptedException, FeedNotFoundException, ParseException, StorageException { \n        testInsertEntry(); \n        for (int i = 1; i < this.count ; i++) { \n            if(i%2 == 0 || i< 10){ \n                this.modifier.deleteEntry(\"\"+i,feedId); \n            } \n            ReferenceCounter<StorageQuery> query = StorageCoreController.getStorageCoreController().getStorageQuery(); \n            if(i%2 == 0 || i< 10){ \n                assertNull(query.get().singleEntryQuery(\"\"+i,feedId,this.profile)); \n            } \n            else \n                assertEquals(\"\"+i,query.get().singleEntryQuery(\"\"+i,feedId,this.profile).getId()); \n            query.decrementRef(); \n        } \n         \n        StorageCoreController.getStorageCoreController().forceWrite(); \n        IndexSearcher searcher = new IndexSearcher(this.dir); \n         \n        for (int i = 1; i < this.count ; i++) { \n            Query luceneQuery = new TermQuery(new Term(StorageEntryWrapper.FIELD_ENTRY_ID,\"\"+i)); \n            Hits hits = searcher.search(luceneQuery); \n            if(i%2 == 0 || i< 10){ \n                 \n                assertEquals(0,hits.length()); \n            } \n            else \n                assertEquals(1,hits.length()); \n        } \n        searcher.close(); \n         \n    } \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52754a40a1550056d5637c8992b4076b5ed77328","date":1151345693,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testDeleteEntry().mjava","pathOld":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testDeleteEntry().mjava","sourceNew":"    /*\n     * Test method for\n     * 'org.apache.lucene.storage.lucenestorage.StorageModifier.deleteEntry(String)'\n     */\n    public void testDeleteEntry() throws IOException, InterruptedException,\n            ParseException, StorageException {\n        testInsertEntry();\n        for (int i = 1; i < this.count; i++) {\n            if (i % 2 == 0 || i < 10) {\n                ServerBaseEntry entry = new ServerBaseEntry();\n                entry.setId(\"\" + i);\n                entry.setFeedId(feedId);\n                this.modifier.deleteEntry(new StorageEntryWrapper(entry,StorageOperation.DELETE));\n            }\n            ReferenceCounter<StorageQuery> query = this.controller\n                    .getStorageQuery();\n            if (i % 2 == 0 || i < 10) {\n                assertNull(query.get().singleEntryQuery(\"\" + i, feedId,\n                        this.configurator));\n            } else\n                assertEquals(\"\" + i, query.get().singleEntryQuery(\"\" + i,\n                        feedId, this.configurator).getId());\n            query.decrementRef();\n        }\n\n        this.controller.forceWrite();\n        IndexSearcher searcher = new IndexSearcher(this.dir);\n\n        for (int i = 1; i < this.count; i++) {\n            Query luceneQuery = new TermQuery(new Term(\n                    StorageEntryWrapper.FIELD_ENTRY_ID, \"\" + i));\n            Hits hits = searcher.search(luceneQuery);\n            if (i % 2 == 0 || i < 10) {\n\n                assertEquals(0, hits.length());\n            } else\n                assertEquals(1, hits.length());\n        }\n        searcher.close();\n\n    }\n\n","sourceOld":"    /* \n     * Test method for \n     * 'org.apache.lucene.storage.lucenestorage.StorageModifier.deleteEntry(String)' \n     */ \n    public void testDeleteEntry() throws IOException, InterruptedException, FeedNotFoundException, ParseException, StorageException { \n        testInsertEntry(); \n        for (int i = 1; i < this.count ; i++) { \n            if(i%2 == 0 || i< 10){ \n                this.modifier.deleteEntry(\"\"+i,feedId); \n            } \n            ReferenceCounter<StorageQuery> query = StorageCoreController.getStorageCoreController().getStorageQuery(); \n            if(i%2 == 0 || i< 10){ \n                assertNull(query.get().singleEntryQuery(\"\"+i,feedId,this.profile)); \n            } \n            else \n                assertEquals(\"\"+i,query.get().singleEntryQuery(\"\"+i,feedId,this.profile).getId()); \n            query.decrementRef(); \n        } \n         \n        StorageCoreController.getStorageCoreController().forceWrite(); \n        IndexSearcher searcher = new IndexSearcher(this.dir); \n         \n        for (int i = 1; i < this.count ; i++) { \n            Query luceneQuery = new TermQuery(new Term(StorageEntryWrapper.FIELD_ENTRY_ID,\"\"+i)); \n            Hits hits = searcher.search(luceneQuery); \n            if(i%2 == 0 || i< 10){ \n                 \n                assertEquals(0,hits.length()); \n            } \n            else \n                assertEquals(1,hits.length()); \n        } \n        searcher.close(); \n         \n    } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testDeleteEntry().mjava","pathOld":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testDeleteEntry().mjava","sourceNew":"    /*\n     * Test method for\n     * 'org.apache.lucene.storage.lucenestorage.StorageModifier.deleteEntry(String)'\n     */\n    public void testDeleteEntry() throws IOException, InterruptedException,\n            ParseException, StorageException {\n        testInsertEntry();\n        for (int i = 1; i < this.count; i++) {\n            if (i % 2 == 0 || i < 10) {\n                ServerBaseEntry entry = new ServerBaseEntry();\n                entry.setId(\"\" + i);\n                entry.setFeedId(feedId);\n                this.modifier.deleteEntry(new StorageEntryWrapper(entry,StorageOperation.DELETE));\n            }\n            ReferenceCounter<StorageQuery> query = this.controller\n                    .getStorageQuery();\n            if (i % 2 == 0 || i < 10) {\n                assertNull(query.get().singleEntryQuery(\"\" + i, feedId,\n                        this.configurator));\n            } else\n                assertEquals(\"\" + i, query.get().singleEntryQuery(\"\" + i,\n                        feedId, this.configurator).getId());\n            query.decrementRef();\n        }\n\n        this.controller.forceWrite();\n        IndexSearcher searcher = new IndexSearcher(this.dir);\n\n        for (int i = 1; i < this.count; i++) {\n            Query luceneQuery = new TermQuery(new Term(\n                    StorageEntryWrapper.FIELD_ENTRY_ID, \"\" + i));\n            Hits hits = searcher.search(luceneQuery);\n            if (i % 2 == 0 || i < 10) {\n\n                assertEquals(0, hits.length());\n            } else\n                assertEquals(1, hits.length());\n        }\n        searcher.close();\n\n    }\n\n","sourceOld":"    /*\n     * Test method for\n     * 'org.apache.lucene.storage.lucenestorage.StorageModifier.deleteEntry(String)'\n     */\n    public void testDeleteEntry() throws IOException, InterruptedException,\n            ParseException, StorageException {\n        testInsertEntry();\n        for (int i = 1; i < this.count; i++) {\n            if (i % 2 == 0 || i < 10) {\n                ServerBaseEntry entry = new ServerBaseEntry();\n                entry.setId(\"\" + i);\n                entry.setFeedId(feedId);\n                this.modifier.deleteEntry(new StorageEntryWrapper(entry,StorageOperation.DELETE));\n            }\n            ReferenceCounter<StorageQuery> query = this.controller\n                    .getStorageQuery();\n            if (i % 2 == 0 || i < 10) {\n                assertNull(query.get().singleEntryQuery(\"\" + i, feedId,\n                        this.configurator));\n            } else\n                assertEquals(\"\" + i, query.get().singleEntryQuery(\"\" + i,\n                        feedId, this.configurator).getId());\n            query.decrementRef();\n        }\n\n        this.controller.forceWrite();\n        IndexSearcher searcher = new IndexSearcher(this.dir);\n\n        for (int i = 1; i < this.count; i++) {\n            Query luceneQuery = new TermQuery(new Term(\n                    StorageEntryWrapper.FIELD_ENTRY_ID, \"\" + i));\n            Hits hits = searcher.search(luceneQuery);\n            if (i % 2 == 0 || i < 10) {\n\n                assertEquals(0, hits.length());\n            } else\n                assertEquals(1, hits.length());\n        }\n        searcher.close();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["52754a40a1550056d5637c8992b4076b5ed77328"],"5d43e216d757e2276d180eba8a192e300c4bfadb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"52754a40a1550056d5637c8992b4076b5ed77328":["5d43e216d757e2276d180eba8a192e300c4bfadb"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d43e216d757e2276d180eba8a192e300c4bfadb"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5d43e216d757e2276d180eba8a192e300c4bfadb":["52754a40a1550056d5637c8992b4076b5ed77328"],"52754a40a1550056d5637c8992b4076b5ed77328":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}