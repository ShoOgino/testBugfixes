{"path":"lucene/core/src/java/org/apache/lucene/index/IndexReaderContext#leaves().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReaderContext#leaves().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReaderContext#leaves().mjava","sourceNew":"  /**\n   * Returns the context's leaves if this context is a top-level context\n   * otherwise <code>null</code>.\n   * <p>\n   * Note: this is convenience method since leaves can always be obtained by\n   * walking the context tree.\n   */\n  public abstract AtomicReaderContext[] leaves();\n\n","sourceOld":"  /**\n   * Returns the context's leaves if this context is a top-level context\n   * otherwise <code>null</code>.\n   * <p>\n   * Note: this is convenience method since leaves can always be obtained by\n   * walking the context tree.\n   */\n  public abstract AtomicReaderContext[] leaves();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8","date":1328775259,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReaderContext#leaves().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexReaderContext#leaves().mjava","sourceNew":"  /**\n   * Returns the context's leaves if this context is a top-level context\n   * otherwise <code>null</code>. For convenience, if this is an\n   * {@link AtomicReaderContext} this returns itsself as the only leaf.\n   * <p>\n   * Note: this is convenience method since leaves can always be obtained by\n   * walking the context tree.\n   */\n  public abstract AtomicReaderContext[] leaves();\n\n","sourceOld":"  /**\n   * Returns the context's leaves if this context is a top-level context\n   * otherwise <code>null</code>.\n   * <p>\n   * Note: this is convenience method since leaves can always be obtained by\n   * walking the context tree.\n   */\n  public abstract AtomicReaderContext[] leaves();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55fd9dcf98ceb0c5bf520ec1a7985676384b8747","date":1331629546,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReaderContext#leaves().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexReaderContext#leaves().mjava","sourceNew":"  /**\n   * Returns the context's leaves if this context is a top-level context\n   * otherwise <code>null</code>. For convenience, if this is an\n   * {@link AtomicReaderContext} this returns itsself as the only leaf.\n   * <p>Note: this is convenience method since leaves can always be obtained by\n   * walking the context tree.\n   * <p><b>Warning:</b> Don't modify the returned array!\n   * Doing so will corrupt the internal structure of this\n   * {@code IndexReaderContext}.\n   */\n  public abstract AtomicReaderContext[] leaves();\n\n","sourceOld":"  /**\n   * Returns the context's leaves if this context is a top-level context\n   * otherwise <code>null</code>. For convenience, if this is an\n   * {@link AtomicReaderContext} this returns itsself as the only leaf.\n   * <p>\n   * Note: this is convenience method since leaves can always be obtained by\n   * walking the context tree.\n   */\n  public abstract AtomicReaderContext[] leaves();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReaderContext#leaves().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexReaderContext#leaves().mjava","sourceNew":"  /**\n   * Returns the context's leaves if this context is a top-level context\n   * otherwise <code>null</code>. For convenience, if this is an\n   * {@link AtomicReaderContext} this returns itsself as the only leaf.\n   * <p>Note: this is convenience method since leaves can always be obtained by\n   * walking the context tree.\n   * <p><b>Warning:</b> Don't modify the returned array!\n   * Doing so will corrupt the internal structure of this\n   * {@code IndexReaderContext}.\n   */\n  public abstract AtomicReaderContext[] leaves();\n\n","sourceOld":"  /**\n   * Returns the context's leaves if this context is a top-level context\n   * otherwise <code>null</code>. For convenience, if this is an\n   * {@link AtomicReaderContext} this returns itsself as the only leaf.\n   * <p>\n   * Note: this is convenience method since leaves can always be obtained by\n   * walking the context tree.\n   */\n  public abstract AtomicReaderContext[] leaves();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReaderContext#leaves().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexReaderContext#leaves().mjava","sourceNew":"  /**\n   * Returns the context's leaves if this context is a top-level context.\n   * For convenience, if this is an {@link AtomicReaderContext} this\n   * returns itself as the only leaf.\n   * <p>Note: this is convenience method since leaves can always be obtained by\n   * walking the context tree using {@link #children()}.\n   * @throws UnsupportedOperationExceception if this is not a top-level context.\n   * @see #children()\n   */\n  public abstract List<AtomicReaderContext> leaves();\n\n","sourceOld":"  /**\n   * Returns the context's leaves if this context is a top-level context\n   * otherwise <code>null</code>. For convenience, if this is an\n   * {@link AtomicReaderContext} this returns itsself as the only leaf.\n   * <p>Note: this is convenience method since leaves can always be obtained by\n   * walking the context tree.\n   * <p><b>Warning:</b> Don't modify the returned array!\n   * Doing so will corrupt the internal structure of this\n   * {@code IndexReaderContext}.\n   */\n  public abstract AtomicReaderContext[] leaves();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd9ddb59e9d33950773d186a8b726b5610ae3aad","date":1341258232,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReaderContext#leaves().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexReaderContext#leaves().mjava","sourceNew":"  /**\n   * Returns the context's leaves if this context is a top-level context.\n   * For convenience, if this is an {@link AtomicReaderContext} this\n   * returns itself as the only leaf.\n   * <p>Note: this is convenience method since leaves can always be obtained by\n   * walking the context tree using {@link #children()}.\n   * @throws UnsupportedOperationException if this is not a top-level context.\n   * @see #children()\n   */\n  public abstract List<AtomicReaderContext> leaves() throws UnsupportedOperationException;\n\n","sourceOld":"  /**\n   * Returns the context's leaves if this context is a top-level context.\n   * For convenience, if this is an {@link AtomicReaderContext} this\n   * returns itself as the only leaf.\n   * <p>Note: this is convenience method since leaves can always be obtained by\n   * walking the context tree using {@link #children()}.\n   * @throws UnsupportedOperationExceception if this is not a top-level context.\n   * @see #children()\n   */\n  public abstract List<AtomicReaderContext> leaves();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReaderContext#leaves().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexReaderContext#leaves().mjava","sourceNew":"  /**\n   * Returns the context's leaves if this context is a top-level context.\n   * For convenience, if this is an {@link AtomicReaderContext} this\n   * returns itself as the only leaf.\n   * <p>Note: this is convenience method since leaves can always be obtained by\n   * walking the context tree using {@link #children()}.\n   * @throws UnsupportedOperationException if this is not a top-level context.\n   * @see #children()\n   */\n  public abstract List<AtomicReaderContext> leaves() throws UnsupportedOperationException;\n\n","sourceOld":"  /**\n   * Returns the context's leaves if this context is a top-level context.\n   * For convenience, if this is an {@link AtomicReaderContext} this\n   * returns itself as the only leaf.\n   * <p>Note: this is convenience method since leaves can always be obtained by\n   * walking the context tree using {@link #children()}.\n   * @throws UnsupportedOperationExceception if this is not a top-level context.\n   * @see #children()\n   */\n  public abstract List<AtomicReaderContext> leaves();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReaderContext#leaves().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexReaderContext#leaves().mjava","sourceNew":"  /**\n   * Returns the context's leaves if this context is a top-level context.\n   * For convenience, if this is an {@link LeafReaderContext} this\n   * returns itself as the only leaf.\n   * <p>Note: this is convenience method since leaves can always be obtained by\n   * walking the context tree using {@link #children()}.\n   * @throws UnsupportedOperationException if this is not a top-level context.\n   * @see #children()\n   */\n  public abstract List<LeafReaderContext> leaves() throws UnsupportedOperationException;\n\n","sourceOld":"  /**\n   * Returns the context's leaves if this context is a top-level context.\n   * For convenience, if this is an {@link AtomicReaderContext} this\n   * returns itself as the only leaf.\n   * <p>Note: this is convenience method since leaves can always be obtained by\n   * walking the context tree using {@link #children()}.\n   * @throws UnsupportedOperationException if this is not a top-level context.\n   * @see #children()\n   */\n  public abstract List<AtomicReaderContext> leaves() throws UnsupportedOperationException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8","55fd9dcf98ceb0c5bf520ec1a7985676384b8747"],"bd9ddb59e9d33950773d186a8b726b5610ae3aad":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["55fd9dcf98ceb0c5bf520ec1a7985676384b8747"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","bd9ddb59e9d33950773d186a8b726b5610ae3aad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"55fd9dcf98ceb0c5bf520ec1a7985676384b8747":["0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["bd9ddb59e9d33950773d186a8b726b5610ae3aad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"bd9ddb59e9d33950773d186a8b726b5610ae3aad":["fe33227f6805edab2036cbb80645cc4e2d1fa424","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["bd9ddb59e9d33950773d186a8b726b5610ae3aad","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8":["38e3b736c7ca086d61b7dbb841c905ee115490da","55fd9dcf98ceb0c5bf520ec1a7985676384b8747"],"55fd9dcf98ceb0c5bf520ec1a7985676384b8747":["38e3b736c7ca086d61b7dbb841c905ee115490da","4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}