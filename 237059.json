{"path":"lucene/queries/src/java/org/apache/lucene/queries/intervals/ConjunctionIntervalsSource#matches(String,LeafReaderContext,int).mjava","commits":[{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/ConjunctionIntervalsSource#matches(String,LeafReaderContext,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/ConjunctionIntervalsSource#matches(String,LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public final MatchesIterator matches(String field, LeafReaderContext ctx, int doc) throws IOException {\n    List<MatchesIterator> subs = new ArrayList<>();\n    for (IntervalsSource source : subSources) {\n      MatchesIterator mi = source.matches(field, ctx, doc);\n      if (mi == null) {\n        return null;\n      }\n      if (isMinimizing) {\n        mi = new CachingMatchesIterator(mi);\n      }\n      subs.add(mi);\n    }\n    IntervalIterator it = combine(subs.stream().map(m -> IntervalMatches.wrapMatches(m, doc)).collect(Collectors.toList()));\n    if (it.advance(doc) != doc) {\n      return null;\n    }\n    if (it.nextInterval() == IntervalIterator.NO_MORE_INTERVALS) {\n      return null;\n    }\n    return isMinimizing ? new MinimizingConjunctionMatchesIterator(it, subs) : new ConjunctionMatchesIterator(it, subs);\n  }\n\n","sourceOld":"  @Override\n  public final MatchesIterator matches(String field, LeafReaderContext ctx, int doc) throws IOException {\n    List<MatchesIterator> subs = new ArrayList<>();\n    for (IntervalsSource source : subSources) {\n      MatchesIterator mi = source.matches(field, ctx, doc);\n      if (mi == null) {\n        return null;\n      }\n      if (isMinimizing) {\n        mi = new CachingMatchesIterator(mi);\n      }\n      subs.add(mi);\n    }\n    IntervalIterator it = combine(subs.stream().map(m -> IntervalMatches.wrapMatches(m, doc)).collect(Collectors.toList()));\n    if (it.advance(doc) != doc) {\n      return null;\n    }\n    if (it.nextInterval() == IntervalIterator.NO_MORE_INTERVALS) {\n      return null;\n    }\n    return isMinimizing ? new MinimizingConjunctionMatchesIterator(it, subs) : new ConjunctionMatchesIterator(it, subs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c78dc09f599cd42c186ddd94084249c8db1ede","date":1581000287,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/ConjunctionIntervalsSource#matches(String,LeafReaderContext,int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/intervals/ConjunctionIntervalsSource#matches(String,LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public final IntervalMatchesIterator matches(String field, LeafReaderContext ctx, int doc) throws IOException {\n    List<IntervalMatchesIterator> subs = new ArrayList<>();\n    for (IntervalsSource source : subSources) {\n      IntervalMatchesIterator mi = source.matches(field, ctx, doc);\n      if (mi == null) {\n        return null;\n      }\n      if (isMinimizing) {\n        mi = new CachingMatchesIterator(mi);\n      }\n      subs.add(mi);\n    }\n    IntervalIterator it = combine(subs.stream().map(m -> IntervalMatches.wrapMatches(m, doc)).collect(Collectors.toList()));\n    if (it.advance(doc) != doc) {\n      return null;\n    }\n    if (it.nextInterval() == IntervalIterator.NO_MORE_INTERVALS) {\n      return null;\n    }\n    return isMinimizing ? new MinimizingConjunctionMatchesIterator(it, subs) : new ConjunctionMatchesIterator(it, subs);\n  }\n\n","sourceOld":"  @Override\n  public final MatchesIterator matches(String field, LeafReaderContext ctx, int doc) throws IOException {\n    List<MatchesIterator> subs = new ArrayList<>();\n    for (IntervalsSource source : subSources) {\n      MatchesIterator mi = source.matches(field, ctx, doc);\n      if (mi == null) {\n        return null;\n      }\n      if (isMinimizing) {\n        mi = new CachingMatchesIterator(mi);\n      }\n      subs.add(mi);\n    }\n    IntervalIterator it = combine(subs.stream().map(m -> IntervalMatches.wrapMatches(m, doc)).collect(Collectors.toList()));\n    if (it.advance(doc) != doc) {\n      return null;\n    }\n    if (it.nextInterval() == IntervalIterator.NO_MORE_INTERVALS) {\n      return null;\n    }\n    return isMinimizing ? new MinimizingConjunctionMatchesIterator(it, subs) : new ConjunctionMatchesIterator(it, subs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30c78dc09f599cd42c186ddd94084249c8db1ede":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30c78dc09f599cd42c186ddd94084249c8db1ede"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["30c78dc09f599cd42c186ddd94084249c8db1ede"],"30c78dc09f599cd42c186ddd94084249c8db1ede":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}