{"path":"src/java/org/apache/lucene/index/SegmentReader#doReopen(SegmentInfos,boolean,boolean).mjava","commits":[{"id":"6db660b56f04fdb2853d25cdee8ee0d36559a521","date":1233313968,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doReopen(SegmentInfos,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doReopen(SegmentInfos).mjava","sourceNew":"  protected synchronized DirectoryIndexReader doReopen(SegmentInfos infos, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    DirectoryIndexReader newReader;\n    \n    if (infos.size() == 1) {\n      SegmentInfo si = infos.info(0);\n      if (segment.equals(si.name) && si.getUseCompoundFile() == SegmentReader.this.si.getUseCompoundFile()) {\n        newReader = reopenSegment(si, doClone, openReadOnly);\n      } else { \n        // segment not referenced anymore, reopen not possible\n        // or segment format changed\n        newReader = SegmentReader.get(openReadOnly, infos, infos.info(0), false);\n      }\n    } else {\n      if (openReadOnly)\n        return new ReadOnlyMultiSegmentReader(directory, infos, closeDirectory, new SegmentReader[] {this}, null, null, doClone);\n      else\n        return new MultiSegmentReader(directory, infos, closeDirectory, new SegmentReader[] {this}, null, null, false, doClone);\n    }\n    \n    return newReader;\n  }\n\n","sourceOld":"  protected synchronized DirectoryIndexReader doReopen(SegmentInfos infos) throws CorruptIndexException, IOException {\n    DirectoryIndexReader newReader;\n    \n    if (infos.size() == 1) {\n      SegmentInfo si = infos.info(0);\n      if (segment.equals(si.name) && si.getUseCompoundFile() == SegmentReader.this.si.getUseCompoundFile()) {\n        newReader = reopenSegment(si);\n      } else { \n        // segment not referenced anymore, reopen not possible\n        // or segment format changed\n        newReader = SegmentReader.get(readOnly, infos, infos.info(0), false);\n      }\n    } else {\n      if (readOnly)\n        return new ReadOnlyMultiSegmentReader(directory, infos, closeDirectory, new SegmentReader[] {this}, null, null);\n      else\n        return new MultiSegmentReader(directory, infos, closeDirectory, new SegmentReader[] {this}, null, null, false);\n    }\n    \n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3688ee2a200d89c6fad03ca69c9c795834ce3209","date":1234695396,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doReopen(SegmentInfos,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doReopen(SegmentInfos,boolean,boolean).mjava","sourceNew":"  protected synchronized DirectoryIndexReader doReopen(SegmentInfos infos, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    DirectoryIndexReader newReader;\n\n    if (infos == null) {\n      if (doClone) {\n        // OK: directly clone myself\n        newReader = reopenSegment(si, doClone, openReadOnly);\n      } else {\n        throw new UnsupportedOperationException(\"cannot reopen a standalone SegmentReader\");\n      }\n    } else if (infos.size() == 1) {\n      SegmentInfo si = infos.info(0);\n      if (segment.equals(si.name) && si.getUseCompoundFile() == SegmentReader.this.si.getUseCompoundFile()) {\n        newReader = reopenSegment(si, doClone, openReadOnly);\n      } else { \n        // segment not referenced anymore, reopen not possible\n        // or segment format changed\n        newReader = SegmentReader.get(openReadOnly, infos, infos.info(0), false);\n      }\n    } else {\n      if (openReadOnly)\n        return new ReadOnlyMultiSegmentReader(directory, infos, closeDirectory, new SegmentReader[] {this}, null, null, doClone);\n      else\n        return new MultiSegmentReader(directory, infos, closeDirectory, new SegmentReader[] {this}, null, null, false, doClone);\n    }\n    \n    return newReader;\n  }\n\n","sourceOld":"  protected synchronized DirectoryIndexReader doReopen(SegmentInfos infos, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    DirectoryIndexReader newReader;\n    \n    if (infos.size() == 1) {\n      SegmentInfo si = infos.info(0);\n      if (segment.equals(si.name) && si.getUseCompoundFile() == SegmentReader.this.si.getUseCompoundFile()) {\n        newReader = reopenSegment(si, doClone, openReadOnly);\n      } else { \n        // segment not referenced anymore, reopen not possible\n        // or segment format changed\n        newReader = SegmentReader.get(openReadOnly, infos, infos.info(0), false);\n      }\n    } else {\n      if (openReadOnly)\n        return new ReadOnlyMultiSegmentReader(directory, infos, closeDirectory, new SegmentReader[] {this}, null, null, doClone);\n      else\n        return new MultiSegmentReader(directory, infos, closeDirectory, new SegmentReader[] {this}, null, null, false, doClone);\n    }\n    \n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a","date":1240951127,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doReopen(SegmentInfos,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doReopen(SegmentInfos,boolean,boolean).mjava","sourceNew":"  protected synchronized DirectoryIndexReader doReopen(SegmentInfos infos, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    DirectoryIndexReader newReader;\n\n    if (infos == null) {\n      if (doClone) {\n        // OK: directly clone myself\n        newReader = reopenSegment(si, doClone, openReadOnly);\n      } else {\n        throw new UnsupportedOperationException(\"cannot reopen a standalone SegmentReader\");\n      }\n    } else if (infos.size() == 1) {\n      SegmentInfo si = infos.info(0);\n      if (segment.equals(si.name) && si.getUseCompoundFile() == SegmentReader.this.si.getUseCompoundFile()) {\n        newReader = reopenSegment(si, doClone, openReadOnly);\n      } else { \n        // segment not referenced anymore, reopen not possible\n        // or segment format changed\n        newReader = SegmentReader.get(openReadOnly, infos, infos.info(0), false);\n      }\n    } else {\n      if (openReadOnly)\n        newReader = new ReadOnlyMultiSegmentReader(directory, infos, closeDirectory, new SegmentReader[] {this}, null, null, doClone);\n      else\n        newReader = new MultiSegmentReader(directory, infos, closeDirectory, new SegmentReader[] {this}, null, null, false, doClone);\n    }\n    newReader.setDisableFakeNorms(getDisableFakeNorms());\n    return newReader;\n  }\n\n","sourceOld":"  protected synchronized DirectoryIndexReader doReopen(SegmentInfos infos, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    DirectoryIndexReader newReader;\n\n    if (infos == null) {\n      if (doClone) {\n        // OK: directly clone myself\n        newReader = reopenSegment(si, doClone, openReadOnly);\n      } else {\n        throw new UnsupportedOperationException(\"cannot reopen a standalone SegmentReader\");\n      }\n    } else if (infos.size() == 1) {\n      SegmentInfo si = infos.info(0);\n      if (segment.equals(si.name) && si.getUseCompoundFile() == SegmentReader.this.si.getUseCompoundFile()) {\n        newReader = reopenSegment(si, doClone, openReadOnly);\n      } else { \n        // segment not referenced anymore, reopen not possible\n        // or segment format changed\n        newReader = SegmentReader.get(openReadOnly, infos, infos.info(0), false);\n      }\n    } else {\n      if (openReadOnly)\n        return new ReadOnlyMultiSegmentReader(directory, infos, closeDirectory, new SegmentReader[] {this}, null, null, doClone);\n      else\n        return new MultiSegmentReader(directory, infos, closeDirectory, new SegmentReader[] {this}, null, null, false, doClone);\n    }\n    \n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doReopen(SegmentInfos,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  protected synchronized DirectoryIndexReader doReopen(SegmentInfos infos, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    DirectoryIndexReader newReader;\n\n    if (infos == null) {\n      if (doClone) {\n        // OK: directly clone myself\n        newReader = reopenSegment(si, doClone, openReadOnly);\n      } else {\n        throw new UnsupportedOperationException(\"cannot reopen a standalone SegmentReader\");\n      }\n    } else if (infos.size() == 1) {\n      SegmentInfo si = infos.info(0);\n      if (segment.equals(si.name) && si.getUseCompoundFile() == SegmentReader.this.si.getUseCompoundFile()) {\n        newReader = reopenSegment(si, doClone, openReadOnly);\n      } else { \n        // segment not referenced anymore, reopen not possible\n        // or segment format changed\n        newReader = SegmentReader.get(openReadOnly, infos, infos.info(0), false);\n      }\n    } else {\n      if (openReadOnly)\n        newReader = new ReadOnlyMultiSegmentReader(directory, infos, closeDirectory, new SegmentReader[] {this}, null, null, doClone);\n      else\n        newReader = new MultiSegmentReader(directory, infos, closeDirectory, new SegmentReader[] {this}, null, null, false, doClone);\n    }\n    newReader.setDisableFakeNorms(getDisableFakeNorms());\n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a"],"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a":["3688ee2a200d89c6fad03ca69c9c795834ce3209"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3688ee2a200d89c6fad03ca69c9c795834ce3209":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"]},"commit2Childs":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["3688ee2a200d89c6fad03ca69c9c795834ce3209"],"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"3688ee2a200d89c6fad03ca69c9c795834ce3209":["20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}