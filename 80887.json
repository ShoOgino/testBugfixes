{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestMultiSearcher#testCustomSimilarity().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestMultiSearcher#testCustomSimilarity().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestMultiSearcher#testCustomSimilarity().mjava","sourceNew":"    /**\n     * test that custom similarity is in effect when using MultiSearcher (LUCENE-789).\n     * @throws IOException \n     */\n    public void testCustomSimilarity () throws IOException {\n        RAMDirectory dir = new RAMDirectory();\n        initIndex(dir, 10, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        IndexSearcher srchr = new IndexSearcher(dir, true);\n        MultiSearcher msrchr = getMultiSearcherInstance(new Searcher[]{srchr});\n        \n        Similarity customSimilarity = new DefaultSimilarity() {\n            // overide all\n            @Override\n            public float idf(int docFreq, int numDocs) { return 100.0f; }\n            @Override\n            public float coord(int overlap, int maxOverlap) { return 1.0f; }\n            @Override\n            public float lengthNorm(String fieldName, int numTokens) { return 1.0f; }\n            @Override\n            public float queryNorm(float sumOfSquaredWeights) { return 1.0f; }\n            @Override\n            public float sloppyFreq(int distance) { return 1.0f; }\n            @Override\n            public float tf(float freq) { return 1.0f; }\n        };\n        \n        srchr.setSimilarity(customSimilarity);\n        msrchr.setSimilarity(customSimilarity);\n  \n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n  \n        // Get a score from IndexSearcher\n        TopDocs topDocs = srchr.search(query, null, 1);\n        float score1 = topDocs.getMaxScore();\n        \n        // Get the score from MultiSearcher\n        topDocs = msrchr.search(query, null, 1);\n        float scoreN = topDocs.getMaxScore();\n        \n        // The scores from the IndexSearcher and Multisearcher should be the same\n        // if the same similarity is used.\n        assertEquals(\"MultiSearcher score must be equal to single searcher score!\", score1, scoreN, 1e-6);\n    }\n\n","sourceOld":"    /**\n     * test that custom similarity is in effect when using MultiSearcher (LUCENE-789).\n     * @throws IOException \n     */\n    public void testCustomSimilarity () throws IOException {\n        RAMDirectory dir = new RAMDirectory();\n        initIndex(dir, 10, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        IndexSearcher srchr = new IndexSearcher(dir, true);\n        MultiSearcher msrchr = getMultiSearcherInstance(new Searcher[]{srchr});\n        \n        Similarity customSimilarity = new DefaultSimilarity() {\n            // overide all\n            @Override\n            public float idf(int docFreq, int numDocs) { return 100.0f; }\n            @Override\n            public float coord(int overlap, int maxOverlap) { return 1.0f; }\n            @Override\n            public float lengthNorm(String fieldName, int numTokens) { return 1.0f; }\n            @Override\n            public float queryNorm(float sumOfSquaredWeights) { return 1.0f; }\n            @Override\n            public float sloppyFreq(int distance) { return 1.0f; }\n            @Override\n            public float tf(float freq) { return 1.0f; }\n        };\n        \n        srchr.setSimilarity(customSimilarity);\n        msrchr.setSimilarity(customSimilarity);\n  \n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n  \n        // Get a score from IndexSearcher\n        TopDocs topDocs = srchr.search(query, null, 1);\n        float score1 = topDocs.getMaxScore();\n        \n        // Get the score from MultiSearcher\n        topDocs = msrchr.search(query, null, 1);\n        float scoreN = topDocs.getMaxScore();\n        \n        // The scores from the IndexSearcher and Multisearcher should be the same\n        // if the same similarity is used.\n        assertEquals(\"MultiSearcher score must be equal to single searcher score!\", score1, scoreN, 1e-6);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestMultiSearcher#testCustomSimilarity().mjava","sourceNew":null,"sourceOld":"    /**\n     * test that custom similarity is in effect when using MultiSearcher (LUCENE-789).\n     * @throws IOException \n     */\n    public void testCustomSimilarity () throws IOException {\n        RAMDirectory dir = new RAMDirectory();\n        initIndex(dir, 10, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        IndexSearcher srchr = new IndexSearcher(dir, true);\n        MultiSearcher msrchr = getMultiSearcherInstance(new Searcher[]{srchr});\n        \n        Similarity customSimilarity = new DefaultSimilarity() {\n            // overide all\n            @Override\n            public float idf(int docFreq, int numDocs) { return 100.0f; }\n            @Override\n            public float coord(int overlap, int maxOverlap) { return 1.0f; }\n            @Override\n            public float lengthNorm(String fieldName, int numTokens) { return 1.0f; }\n            @Override\n            public float queryNorm(float sumOfSquaredWeights) { return 1.0f; }\n            @Override\n            public float sloppyFreq(int distance) { return 1.0f; }\n            @Override\n            public float tf(float freq) { return 1.0f; }\n        };\n        \n        srchr.setSimilarity(customSimilarity);\n        msrchr.setSimilarity(customSimilarity);\n  \n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n  \n        // Get a score from IndexSearcher\n        TopDocs topDocs = srchr.search(query, null, 1);\n        float score1 = topDocs.getMaxScore();\n        \n        // Get the score from MultiSearcher\n        topDocs = msrchr.search(query, null, 1);\n        float scoreN = topDocs.getMaxScore();\n        \n        // The scores from the IndexSearcher and Multisearcher should be the same\n        // if the same similarity is used.\n        assertEquals(\"MultiSearcher score must be equal to single searcher score!\", score1, scoreN, 1e-6);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}