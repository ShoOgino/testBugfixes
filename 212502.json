{"path":"lucene/facet/src/java/org/apache/lucene/facet/index/FacetFields#createCategoryListMapping(Iterable[FacetLabel]).mjava","commits":[{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/FacetFields#createCategoryListMapping(Iterable[FacetLabel]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/FacetFields#createCategoryListMapping(Iterable[CategoryPath]).mjava","sourceNew":"  /**\n   * Creates a mapping between a {@link CategoryListParams} and all\n   * {@link FacetLabel categories} that are associated with it.\n   */\n  protected Map<CategoryListParams,Iterable<FacetLabel>> createCategoryListMapping(\n      Iterable<FacetLabel> categories) {\n    if (indexingParams.getAllCategoryListParams().size() == 1) {\n      return Collections.singletonMap(indexingParams.getCategoryListParams(null), categories);\n    }\n    HashMap<CategoryListParams,Iterable<FacetLabel>> categoryLists = \n        new HashMap<CategoryListParams,Iterable<FacetLabel>>();\n    for (FacetLabel cp : categories) {\n      // each category may be indexed under a different field, so add it to the right list.\n      CategoryListParams clp = indexingParams.getCategoryListParams(cp);\n      List<FacetLabel> list = (List<FacetLabel>) categoryLists.get(clp);\n      if (list == null) {\n        list = new ArrayList<FacetLabel>();\n        categoryLists.put(clp, list);\n      }\n      list.add(cp);\n    }\n    return categoryLists;\n  }\n\n","sourceOld":"  /**\n   * Creates a mapping between a {@link CategoryListParams} and all\n   * {@link CategoryPath categories} that are associated with it.\n   */\n  protected Map<CategoryListParams,Iterable<CategoryPath>> createCategoryListMapping(\n      Iterable<CategoryPath> categories) {\n    if (indexingParams.getAllCategoryListParams().size() == 1) {\n      return Collections.singletonMap(indexingParams.getCategoryListParams(null), categories);\n    }\n    HashMap<CategoryListParams,Iterable<CategoryPath>> categoryLists = \n        new HashMap<CategoryListParams,Iterable<CategoryPath>>();\n    for (CategoryPath cp : categories) {\n      // each category may be indexed under a different field, so add it to the right list.\n      CategoryListParams clp = indexingParams.getCategoryListParams(cp);\n      List<CategoryPath> list = (List<CategoryPath>) categoryLists.get(clp);\n      if (list == null) {\n        list = new ArrayList<CategoryPath>();\n        categoryLists.put(clp, list);\n      }\n      list.add(cp);\n    }\n    return categoryLists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/FacetFields#createCategoryListMapping(Iterable[FacetLabel]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a mapping between a {@link CategoryListParams} and all\n   * {@link FacetLabel categories} that are associated with it.\n   */\n  protected Map<CategoryListParams,Iterable<FacetLabel>> createCategoryListMapping(\n      Iterable<FacetLabel> categories) {\n    if (indexingParams.getAllCategoryListParams().size() == 1) {\n      return Collections.singletonMap(indexingParams.getCategoryListParams(null), categories);\n    }\n    HashMap<CategoryListParams,Iterable<FacetLabel>> categoryLists = \n        new HashMap<CategoryListParams,Iterable<FacetLabel>>();\n    for (FacetLabel cp : categories) {\n      // each category may be indexed under a different field, so add it to the right list.\n      CategoryListParams clp = indexingParams.getCategoryListParams(cp);\n      List<FacetLabel> list = (List<FacetLabel>) categoryLists.get(clp);\n      if (list == null) {\n        list = new ArrayList<FacetLabel>();\n        categoryLists.put(clp, list);\n      }\n      list.add(cp);\n    }\n    return categoryLists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d33e19a97046248623a7591aeaa6547233fd15e2":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d33e19a97046248623a7591aeaa6547233fd15e2":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d33e19a97046248623a7591aeaa6547233fd15e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}