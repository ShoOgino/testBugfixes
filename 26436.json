{"path":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore#checkAllNodesForFile(MiniSolrCloudCluster,String,Map,boolean).mjava","commits":[{"id":"64ec73f19361ec6354e55c878a349735fa8bc52e","date":1596183798,"type":1,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore#checkAllNodesForFile(MiniSolrCloudCluster,String,Map,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore#waitForAllNodesHaveFile(MiniSolrCloudCluster,String,Map,boolean).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public static void checkAllNodesForFile(MiniSolrCloudCluster cluster, String path, Map expected , boolean verifyContent) throws Exception {\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n      String url = baseUrl + \"/node/files\" + path + \"?wt=javabin&meta=true\";\n      assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n\n      if(verifyContent) {\n        try (HttpSolrClient solrClient = (HttpSolrClient) jettySolrRunner.newClient()) {\n          ByteBuffer buf = Utils.executeGET(solrClient.getHttpClient(), baseUrl + \"/node/files\" + path,\n              Utils.newBytesConsumer(Integer.MAX_VALUE));\n          assertEquals(\n              \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              DigestUtils.sha512Hex(new ByteBufferInputStream(buf))\n          );\n\n        }\n      }\n\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public static void waitForAllNodesHaveFile(MiniSolrCloudCluster cluster, String path, Map expected , boolean verifyContent) throws Exception {\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n      String url = baseUrl + \"/node/files\" + path + \"?wt=javabin&meta=true\";\n      assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n\n      if(verifyContent) {\n        try (HttpSolrClient solrClient = (HttpSolrClient) jettySolrRunner.newClient()) {\n          ByteBuffer buf = Utils.executeGET(solrClient.getHttpClient(), baseUrl + \"/node/files\" + path,\n              Utils.newBytesConsumer(Integer.MAX_VALUE));\n          assertEquals(\n              \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              DigestUtils.sha512Hex(new ByteBufferInputStream(buf))\n          );\n\n        }\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"64ec73f19361ec6354e55c878a349735fa8bc52e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["64ec73f19361ec6354e55c878a349735fa8bc52e"]},"commit2Childs":{"64ec73f19361ec6354e55c878a349735fa8bc52e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["64ec73f19361ec6354e55c878a349735fa8bc52e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}