{"path":"lucene/core/src/java/org/apache/lucene/index/DocValues#checkField(LeafReader,String,DocValuesType...).mjava","commits":[{"id":"0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c","date":1416362965,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValues#checkField(LeafReader,String,DocValuesType...).mjava","pathOld":"/dev/null","sourceNew":"  // helper method: to give a nice error when LeafReader.getXXXDocValues returns null.\n  private static void checkField(LeafReader in, String field, DocValuesType... expected) {\n    FieldInfo fi = in.getFieldInfos().fieldInfo(field);\n    if (fi != null) {\n      DocValuesType actual = fi.getDocValuesType();\n      throw new IllegalStateException(\"unexpected docvalues type \" + actual + \n                                        \" for field '\" + field + \"' \" +\n                                        (expected.length == 1 \n                                        ? \"(expected=\" + expected[0]\n                                        : \"(expected one of \" + Arrays.toString(expected)) + \"). \" +\n                                        \"Use UninvertingReader or index with docvalues.\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e03940e6e9044943de4b7ac08f8581da37a9534","date":1462870173,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValues#checkField(LeafReader,String,DocValuesType...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValues#checkField(LeafReader,String,DocValuesType...).mjava","sourceNew":"  // helper method: to give a nice error when LeafReader.getXXXDocValues returns null.\n  private static void checkField(LeafReader in, String field, DocValuesType... expected) {\n    FieldInfo fi = in.getFieldInfos().fieldInfo(field);\n    if (fi != null) {\n      DocValuesType actual = fi.getDocValuesType();\n      throw new IllegalStateException(\"unexpected docvalues type \" + actual + \n                                        \" for field '\" + field + \"' \" +\n                                        (expected.length == 1 \n                                        ? \"(expected=\" + expected[0]\n                                        : \"(expected one of \" + Arrays.toString(expected)) + \"). \" +\n                                        \" Re-index with correct docvalues type.\");\n    }\n  }\n\n","sourceOld":"  // helper method: to give a nice error when LeafReader.getXXXDocValues returns null.\n  private static void checkField(LeafReader in, String field, DocValuesType... expected) {\n    FieldInfo fi = in.getFieldInfos().fieldInfo(field);\n    if (fi != null) {\n      DocValuesType actual = fi.getDocValuesType();\n      throw new IllegalStateException(\"unexpected docvalues type \" + actual + \n                                        \" for field '\" + field + \"' \" +\n                                        (expected.length == 1 \n                                        ? \"(expected=\" + expected[0]\n                                        : \"(expected one of \" + Arrays.toString(expected)) + \"). \" +\n                                        \"Use UninvertingReader or index with docvalues.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0576f276762c4cd4dbc7b33fada4a5d22abf2aa3","date":1462872662,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValues#checkField(LeafReader,String,DocValuesType...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValues#checkField(LeafReader,String,DocValuesType...).mjava","sourceNew":"  // helper method: to give a nice error when LeafReader.getXXXDocValues returns null.\n  private static void checkField(LeafReader in, String field, DocValuesType... expected) {\n    FieldInfo fi = in.getFieldInfos().fieldInfo(field);\n    if (fi != null) {\n      DocValuesType actual = fi.getDocValuesType();\n      throw new IllegalStateException(\"unexpected docvalues type \" + actual + \n                                        \" for field '\" + field + \"' \" +\n                                        (expected.length == 1 \n                                        ? \"(expected=\" + expected[0]\n                                        : \"(expected one of \" + Arrays.toString(expected)) + \"). \" +\n                                        \"Re-index with correct docvalues type.\");\n    }\n  }\n\n","sourceOld":"  // helper method: to give a nice error when LeafReader.getXXXDocValues returns null.\n  private static void checkField(LeafReader in, String field, DocValuesType... expected) {\n    FieldInfo fi = in.getFieldInfos().fieldInfo(field);\n    if (fi != null) {\n      DocValuesType actual = fi.getDocValuesType();\n      throw new IllegalStateException(\"unexpected docvalues type \" + actual + \n                                        \" for field '\" + field + \"' \" +\n                                        (expected.length == 1 \n                                        ? \"(expected=\" + expected[0]\n                                        : \"(expected one of \" + Arrays.toString(expected)) + \"). \" +\n                                        \" Re-index with correct docvalues type.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValues#checkField(LeafReader,String,DocValuesType...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValues#checkField(LeafReader,String,DocValuesType...).mjava","sourceNew":"  // helper method: to give a nice error when LeafReader.getXXXDocValues returns null.\n  private static void checkField(LeafReader in, String field, DocValuesType... expected) {\n    FieldInfo fi = in.getFieldInfos().fieldInfo(field);\n    if (fi != null) {\n      DocValuesType actual = fi.getDocValuesType();\n      throw new IllegalStateException(\"unexpected docvalues type \" + actual + \n                                        \" for field '\" + field + \"' \" +\n                                        (expected.length == 1 \n                                        ? \"(expected=\" + expected[0]\n                                        : \"(expected one of \" + Arrays.toString(expected)) + \"). \" +\n                                        \"Re-index with correct docvalues type.\");\n    }\n  }\n\n","sourceOld":"  // helper method: to give a nice error when LeafReader.getXXXDocValues returns null.\n  private static void checkField(LeafReader in, String field, DocValuesType... expected) {\n    FieldInfo fi = in.getFieldInfos().fieldInfo(field);\n    if (fi != null) {\n      DocValuesType actual = fi.getDocValuesType();\n      throw new IllegalStateException(\"unexpected docvalues type \" + actual + \n                                        \" for field '\" + field + \"' \" +\n                                        (expected.length == 1 \n                                        ? \"(expected=\" + expected[0]\n                                        : \"(expected one of \" + Arrays.toString(expected)) + \"). \" +\n                                        \"Use UninvertingReader or index with docvalues.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValues#checkField(LeafReader,String,DocValuesType...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValues#checkField(LeafReader,String,DocValuesType...).mjava","sourceNew":"  // helper method: to give a nice error when LeafReader.getXXXDocValues returns null.\n  private static void checkField(LeafReader in, String field, DocValuesType... expected) {\n    FieldInfo fi = in.getFieldInfos().fieldInfo(field);\n    if (fi != null) {\n      DocValuesType actual = fi.getDocValuesType();\n      throw new IllegalStateException(\"unexpected docvalues type \" + actual + \n                                        \" for field '\" + field + \"' \" +\n                                        (expected.length == 1 \n                                        ? \"(expected=\" + expected[0]\n                                        : \"(expected one of \" + Arrays.toString(expected)) + \"). \" +\n                                        \"Re-index with correct docvalues type.\");\n    }\n  }\n\n","sourceOld":"  // helper method: to give a nice error when LeafReader.getXXXDocValues returns null.\n  private static void checkField(LeafReader in, String field, DocValuesType... expected) {\n    FieldInfo fi = in.getFieldInfos().fieldInfo(field);\n    if (fi != null) {\n      DocValuesType actual = fi.getDocValuesType();\n      throw new IllegalStateException(\"unexpected docvalues type \" + actual + \n                                        \" for field '\" + field + \"' \" +\n                                        (expected.length == 1 \n                                        ? \"(expected=\" + expected[0]\n                                        : \"(expected one of \" + Arrays.toString(expected)) + \"). \" +\n                                        \"Use UninvertingReader or index with docvalues.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValues#checkField(LeafReader,String,DocValuesType...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValues#checkField(LeafReader,String,DocValuesType...).mjava","sourceNew":"  // helper method: to give a nice error when LeafReader.getXXXDocValues returns null.\n  private static void checkField(LeafReader in, String field, DocValuesType... expected) {\n    FieldInfo fi = in.getFieldInfos().fieldInfo(field);\n    if (fi != null) {\n      DocValuesType actual = fi.getDocValuesType();\n      throw new IllegalStateException(\"unexpected docvalues type \" + actual + \n                                        \" for field '\" + field + \"' \" +\n                                        (expected.length == 1 \n                                        ? \"(expected=\" + expected[0]\n                                        : \"(expected one of \" + Arrays.toString(expected)) + \"). \" +\n                                        \"Re-index with correct docvalues type.\");\n    }\n  }\n\n","sourceOld":"  // helper method: to give a nice error when LeafReader.getXXXDocValues returns null.\n  private static void checkField(LeafReader in, String field, DocValuesType... expected) {\n    FieldInfo fi = in.getFieldInfos().fieldInfo(field);\n    if (fi != null) {\n      DocValuesType actual = fi.getDocValuesType();\n      throw new IllegalStateException(\"unexpected docvalues type \" + actual + \n                                        \" for field '\" + field + \"' \" +\n                                        (expected.length == 1 \n                                        ? \"(expected=\" + expected[0]\n                                        : \"(expected one of \" + Arrays.toString(expected)) + \"). \" +\n                                        \"Use UninvertingReader or index with docvalues.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValues#checkField(LeafReader,String,DocValuesType...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValues#checkField(LeafReader,String,DocValuesType...).mjava","sourceNew":"  // helper method: to give a nice error when LeafReader.getXXXDocValues returns null.\n  private static void checkField(LeafReader in, String field, DocValuesType... expected) {\n    FieldInfo fi = in.getFieldInfos().fieldInfo(field);\n    if (fi != null) {\n      DocValuesType actual = fi.getDocValuesType();\n      throw new IllegalStateException(\"unexpected docvalues type \" + actual + \n                                        \" for field '\" + field + \"' \" +\n                                        (expected.length == 1 \n                                        ? \"(expected=\" + expected[0]\n                                        : \"(expected one of \" + Arrays.toString(expected)) + \"). \" +\n                                        \"Re-index with correct docvalues type.\");\n    }\n  }\n\n","sourceOld":"  // helper method: to give a nice error when LeafReader.getXXXDocValues returns null.\n  private static void checkField(LeafReader in, String field, DocValuesType... expected) {\n    FieldInfo fi = in.getFieldInfos().fieldInfo(field);\n    if (fi != null) {\n      DocValuesType actual = fi.getDocValuesType();\n      throw new IllegalStateException(\"unexpected docvalues type \" + actual + \n                                        \" for field '\" + field + \"' \" +\n                                        (expected.length == 1 \n                                        ? \"(expected=\" + expected[0]\n                                        : \"(expected one of \" + Arrays.toString(expected)) + \"). \" +\n                                        \"Use UninvertingReader or index with docvalues.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ad30c6a479e764150a3316e57263319775f1df2":["0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c","3d33e731a93d4b57e662ff094f64f94a745422d4"],"5e03940e6e9044943de4b7ac08f8581da37a9534":["0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c"],"0576f276762c4cd4dbc7b33fada4a5d22abf2aa3":["5e03940e6e9044943de4b7ac08f8581da37a9534"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c","0576f276762c4cd4dbc7b33fada4a5d22abf2aa3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c":["0ad30c6a479e764150a3316e57263319775f1df2","5e03940e6e9044943de4b7ac08f8581da37a9534","3d33e731a93d4b57e662ff094f64f94a745422d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"5e03940e6e9044943de4b7ac08f8581da37a9534":["0576f276762c4cd4dbc7b33fada4a5d22abf2aa3"],"0576f276762c4cd4dbc7b33fada4a5d22abf2aa3":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}