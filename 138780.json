{"path":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","sourceNew":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\"))\n      clazzName = randomDirectory(random);\n    if (clazzName.indexOf(\".\") == -1) // if not fully qualified, assume .store\n      clazzName = \"org.apache.lucene.store.\" + clazzName;\n    try {\n      final Class<? extends Directory> clazz = Class.forName(clazzName).asSubclass(Directory.class);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File tmpFile = _TestUtil.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n        tmpFile.delete();\n        tmpFile.mkdir();\n        registerTempFile(tmpFile);\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), tmpFile);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\"))\n      clazzName = randomDirectory(random);\n    if (clazzName.indexOf(\".\") == -1) // if not fully qualified, assume .store\n      clazzName = \"org.apache.lucene.store.\" + clazzName;\n    try {\n      final Class<? extends Directory> clazz = Class.forName(clazzName).asSubclass(Directory.class);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File tmpFile = _TestUtil.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n        tmpFile.delete();\n        tmpFile.mkdir();\n        registerTempFile(tmpFile);\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), tmpFile);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c80baacbbca1e3c64a51465d6b9ed843ac17db","date":1320941810,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","sourceNew":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\"))\n      clazzName = randomDirectory(random);\n    if (clazzName.indexOf(\".\") == -1) // if not fully qualified, assume .store\n      clazzName = \"org.apache.lucene.store.\" + clazzName;\n    try {\n      final Class<? extends Directory> clazz = Class.forName(clazzName).asSubclass(Directory.class);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File dir = _TestUtil.getTempDir(\"index\");\n        dir.mkdirs(); // ensure it's created so we 'have' it.\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\"))\n      clazzName = randomDirectory(random);\n    if (clazzName.indexOf(\".\") == -1) // if not fully qualified, assume .store\n      clazzName = \"org.apache.lucene.store.\" + clazzName;\n    try {\n      final Class<? extends Directory> clazz = Class.forName(clazzName).asSubclass(Directory.class);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File tmpFile = _TestUtil.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n        tmpFile.delete();\n        tmpFile.mkdir();\n        registerTempFile(tmpFile);\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), tmpFile);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"768c48159710aa63efa67c049db149c35c4f423a","date":1323797698,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","sourceNew":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\")) {\n      clazzName = randomDirectory(random);\n    }\n    \n    try {\n      final Class<? extends Directory> clazz = CommandLineUtil.loadDirectoryClass(clazzName);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File dir = _TestUtil.getTempDir(\"index\");\n        dir.mkdirs(); // ensure it's created so we 'have' it.\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\"))\n      clazzName = randomDirectory(random);\n    if (clazzName.indexOf(\".\") == -1) // if not fully qualified, assume .store\n      clazzName = \"org.apache.lucene.store.\" + clazzName;\n    try {\n      final Class<? extends Directory> clazz = Class.forName(clazzName).asSubclass(Directory.class);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File dir = _TestUtil.getTempDir(\"index\");\n        dir.mkdirs(); // ensure it's created so we 'have' it.\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ceb6a6c707ada1df8bde804e25c98668e699a18","date":1323800602,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","sourceNew":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\")) {\n      clazzName = randomDirectory(random);\n    }\n    \n    try {\n      final Class<? extends Directory> clazz = CommandLineUtil.loadDirectoryClass(clazzName);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File dir = _TestUtil.getTempDir(\"index\");\n        dir.mkdirs(); // ensure it's created so we 'have' it.\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\"))\n      clazzName = randomDirectory(random);\n    if (clazzName.indexOf(\".\") == -1) // if not fully qualified, assume .store\n      clazzName = \"org.apache.lucene.store.\" + clazzName;\n    try {\n      final Class<? extends Directory> clazz = Class.forName(clazzName).asSubclass(Directory.class);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File dir = _TestUtil.getTempDir(\"index\");\n        dir.mkdirs(); // ensure it's created so we 'have' it.\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","sourceNew":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\")) {\n      clazzName = randomDirectory(random);\n    }\n    \n    try {\n      final Class<? extends Directory> clazz = CommandLineUtil.loadDirectoryClass(clazzName);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File dir = _TestUtil.getTempDir(\"index\");\n        dir.mkdirs(); // ensure it's created so we 'have' it.\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\")) {\n      clazzName = randomDirectory(random);\n    }\n    \n    try {\n      final Class<? extends Directory> clazz = CommandLineUtil.loadDirectoryClass(clazzName);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File dir = _TestUtil.getTempDir(\"index\");\n        dir.mkdirs(); // ensure it's created so we 'have' it.\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), dir);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4ceb6a6c707ada1df8bde804e25c98668e699a18":["45c80baacbbca1e3c64a51465d6b9ed843ac17db","768c48159710aa63efa67c049db149c35c4f423a"],"768c48159710aa63efa67c049db149c35c4f423a":["45c80baacbbca1e3c64a51465d6b9ed843ac17db"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["768c48159710aa63efa67c049db149c35c4f423a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c80baacbbca1e3c64a51465d6b9ed843ac17db":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["45c80baacbbca1e3c64a51465d6b9ed843ac17db"],"4ceb6a6c707ada1df8bde804e25c98668e699a18":[],"768c48159710aa63efa67c049db149c35c4f423a":["4ceb6a6c707ada1df8bde804e25c98668e699a18","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"45c80baacbbca1e3c64a51465d6b9ed843ac17db":["4ceb6a6c707ada1df8bde804e25c98668e699a18","768c48159710aa63efa67c049db149c35c4f423a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ceb6a6c707ada1df8bde804e25c98668e699a18","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}