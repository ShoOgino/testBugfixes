{"path":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetProcessor#getSubsetSize(DocSet,SchemaField,String).mjava","commits":[{"id":"92751ba9273251eab6a2e379ec42a1697a32ff96","date":1407954233,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetProcessor#getSubsetSize(DocSet,SchemaField,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a base docset, computes the size of the subset of documents corrisponding to the specified pivotValue\n   *\n   * @param base the set of documents to evalute relative to\n   * @param field the field type used by the pivotValue\n   * @param pivotValue String representation of the value, may be null (ie: \"missing\")\n   */\n  private int getSubsetSize(DocSet base, SchemaField field, String pivotValue) throws IOException {\n    FieldType ft = field.getType();\n    if ( null == pivotValue ) {\n      Query query = ft.getRangeQuery(null, field, null, null, false, false);\n      DocSet hasVal = searcher.getDocSet(query);\n      return base.andNotSize(hasVal);\n    } else {\n      Query query = ft.getFieldQuery(null, field, pivotValue);\n      return searcher.numDocs(query, base);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"658218bdad5bc0415007e8e0cd9197fb3b0298af","date":1423726262,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetProcessor#getSubsetSize(DocSet,SchemaField,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetProcessor#getSubsetSize(DocSet,SchemaField,String).mjava","sourceNew":"  /**\n   * Given a base docset, computes the size of the subset of documents corresponding to the specified pivotValue\n   *\n   * @param base the set of documents to evalute relative to\n   * @param field the field type used by the pivotValue\n   * @param pivotValue String representation of the value, may be null (ie: \"missing\")\n   */\n  private int getSubsetSize(DocSet base, SchemaField field, String pivotValue) throws IOException {\n    FieldType ft = field.getType();\n    if ( null == pivotValue ) {\n      Query query = ft.getRangeQuery(null, field, null, null, false, false);\n      DocSet hasVal = searcher.getDocSet(query);\n      return base.andNotSize(hasVal);\n    } else {\n      Query query = ft.getFieldQuery(null, field, pivotValue);\n      return searcher.numDocs(query, base);\n    }\n  }\n\n","sourceOld":"  /**\n   * Given a base docset, computes the size of the subset of documents corrisponding to the specified pivotValue\n   *\n   * @param base the set of documents to evalute relative to\n   * @param field the field type used by the pivotValue\n   * @param pivotValue String representation of the value, may be null (ie: \"missing\")\n   */\n  private int getSubsetSize(DocSet base, SchemaField field, String pivotValue) throws IOException {\n    FieldType ft = field.getType();\n    if ( null == pivotValue ) {\n      Query query = ft.getRangeQuery(null, field, null, null, false, false);\n      DocSet hasVal = searcher.getDocSet(query);\n      return base.andNotSize(hasVal);\n    } else {\n      Query query = ft.getFieldQuery(null, field, pivotValue);\n      return searcher.numDocs(query, base);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c169312e8f621502de0661c48a43e492983cd28a","date":1423728604,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetProcessor#getSubsetSize(DocSet,SchemaField,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetProcessor#getSubsetSize(DocSet,SchemaField,String).mjava","sourceNew":"  /**\n   * Given a base docset, computes the size of the subset of documents corresponding to the specified pivotValue\n   *\n   * @param base the set of documents to evaluate relative to\n   * @param field the field type used by the pivotValue\n   * @param pivotValue String representation of the value, may be null (ie: \"missing\")\n   */\n  private int getSubsetSize(DocSet base, SchemaField field, String pivotValue) throws IOException {\n    FieldType ft = field.getType();\n    if ( null == pivotValue ) {\n      Query query = ft.getRangeQuery(null, field, null, null, false, false);\n      DocSet hasVal = searcher.getDocSet(query);\n      return base.andNotSize(hasVal);\n    } else {\n      Query query = ft.getFieldQuery(null, field, pivotValue);\n      return searcher.numDocs(query, base);\n    }\n  }\n\n","sourceOld":"  /**\n   * Given a base docset, computes the size of the subset of documents corresponding to the specified pivotValue\n   *\n   * @param base the set of documents to evalute relative to\n   * @param field the field type used by the pivotValue\n   * @param pivotValue String representation of the value, may be null (ie: \"missing\")\n   */\n  private int getSubsetSize(DocSet base, SchemaField field, String pivotValue) throws IOException {\n    FieldType ft = field.getType();\n    if ( null == pivotValue ) {\n      Query query = ft.getRangeQuery(null, field, null, null, false, false);\n      DocSet hasVal = searcher.getDocSet(query);\n      return base.andNotSize(hasVal);\n    } else {\n      Query query = ft.getFieldQuery(null, field, pivotValue);\n      return searcher.numDocs(query, base);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c169312e8f621502de0661c48a43e492983cd28a":["658218bdad5bc0415007e8e0cd9197fb3b0298af"],"658218bdad5bc0415007e8e0cd9197fb3b0298af":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c169312e8f621502de0661c48a43e492983cd28a"]},"commit2Childs":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["658218bdad5bc0415007e8e0cd9197fb3b0298af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"c169312e8f621502de0661c48a43e492983cd28a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"658218bdad5bc0415007e8e0cd9197fb3b0298af":["c169312e8f621502de0661c48a43e492983cd28a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}