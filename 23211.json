{"path":"lucene/core/src/test/org/apache/lucene/store/TestBufferedIndexInput#checkReadBytes(IndexInput,int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestBufferedIndexInput#checkReadBytes(IndexInput,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#checkReadBytes(IndexInput,int,int).mjava","sourceNew":"  private void checkReadBytes(IndexInput input, int size, int pos) throws IOException{\n    // Just to see that \"offset\" is treated properly in readBytes(), we\n    // add an arbitrary offset at the beginning of the array\n    int offset = size % 10; // arbitrary\n    buffer = ArrayUtil.grow(buffer, offset+size);\n    assertEquals(pos, input.getFilePointer());\n    long left = TEST_FILE_LENGTH - input.getFilePointer();\n    if (left <= 0) {\n      return;\n    } else if (left < size) {\n      size = (int) left;\n    }\n    input.readBytes(buffer, offset, size);\n    assertEquals(pos+size, input.getFilePointer());\n    for(int i=0; i<size; i++) {\n      assertEquals(\"pos=\" + i + \" filepos=\" + (pos+i), byten(pos+i), buffer[offset+i]);\n    }\n  }\n\n","sourceOld":"  private void checkReadBytes(IndexInput input, int size, int pos) throws IOException{\n    // Just to see that \"offset\" is treated properly in readBytes(), we\n    // add an arbitrary offset at the beginning of the array\n    int offset = size % 10; // arbitrary\n    buffer = ArrayUtil.grow(buffer, offset+size);\n    assertEquals(pos, input.getFilePointer());\n    long left = TEST_FILE_LENGTH - input.getFilePointer();\n    if (left <= 0) {\n      return;\n    } else if (left < size) {\n      size = (int) left;\n    }\n    input.readBytes(buffer, offset, size);\n    assertEquals(pos+size, input.getFilePointer());\n    for(int i=0; i<size; i++) {\n      assertEquals(\"pos=\" + i + \" filepos=\" + (pos+i), byten(pos+i), buffer[offset+i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestBufferedIndexInput#checkReadBytes(IndexInput,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestBufferedIndexInput#checkReadBytes(IndexInput,int,int).mjava","sourceNew":"  private void checkReadBytes(IndexInput input, int size, int pos) throws IOException{\n    // Just to see that \"offset\" is treated properly in readBytes(), we\n    // add an arbitrary offset at the beginning of the array\n    int offset = size % 10; // arbitrary\n    buffer = ArrayUtil.grow(buffer, offset+size);\n    assertEquals(pos, input.getFilePointer());\n    long left = TEST_FILE_LENGTH - input.getFilePointer();\n    if (left <= 0) {\n      return;\n    } else if (left < size) {\n      size = (int) left;\n    }\n    input.readBytes(buffer, offset, size);\n    assertEquals(pos+size, input.getFilePointer());\n    for(int i=0; i<size; i++) {\n      assertEquals(\"pos=\" + i + \" filepos=\" + (pos+i), byten(pos+i), buffer[offset+i]);\n    }\n  }\n\n","sourceOld":"  private void checkReadBytes(IndexInput input, int size, int pos) throws IOException{\n    // Just to see that \"offset\" is treated properly in readBytes(), we\n    // add an arbitrary offset at the beginning of the array\n    int offset = size % 10; // arbitrary\n    buffer = ArrayUtil.grow(buffer, offset+size);\n    assertEquals(pos, input.getFilePointer());\n    long left = TEST_FILE_LENGTH - input.getFilePointer();\n    if (left <= 0) {\n      return;\n    } else if (left < size) {\n      size = (int) left;\n    }\n    input.readBytes(buffer, offset, size);\n    assertEquals(pos+size, input.getFilePointer());\n    for(int i=0; i<size; i++) {\n      assertEquals(\"pos=\" + i + \" filepos=\" + (pos+i), byten(pos+i), buffer[offset+i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestBufferedIndexInput#checkReadBytes(IndexInput,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestBufferedIndexInput#checkReadBytes(IndexInput,int,int).mjava","sourceNew":"  private void checkReadBytes(IndexInput input, int size, int pos) throws IOException{\n    // Just to see that \"offset\" is treated properly in readBytes(), we\n    // add an arbitrary offset at the beginning of the array\n    int offset = size % 10; // arbitrary\n    buffer = ArrayUtil.grow(buffer, offset+size);\n    assertEquals(pos, input.getFilePointer());\n    long left = TEST_FILE_LENGTH - input.getFilePointer();\n    if (left <= 0) {\n      return;\n    } else if (left < size) {\n      size = (int) left;\n    }\n    input.readBytes(buffer, offset, size);\n    assertEquals(pos+size, input.getFilePointer());\n    for(int i=0; i<size; i++) {\n      assertEquals(\"pos=\" + i + \" filepos=\" + (pos+i), byten(pos+i), buffer[offset+i]);\n    }\n  }\n\n","sourceOld":"  private void checkReadBytes(IndexInput input, int size, int pos) throws IOException{\n    // Just to see that \"offset\" is treated properly in readBytes(), we\n    // add an arbitrary offset at the beginning of the array\n    int offset = size % 10; // arbitrary\n    buffer = ArrayUtil.grow(buffer, offset+size);\n    assertEquals(pos, input.getFilePointer());\n    long left = TEST_FILE_LENGTH - input.getFilePointer();\n    if (left <= 0) {\n      return;\n    } else if (left < size) {\n      size = (int) left;\n    }\n    input.readBytes(buffer, offset, size);\n    assertEquals(pos+size, input.getFilePointer());\n    for(int i=0; i<size; i++) {\n      assertEquals(\"pos=\" + i + \" filepos=\" + (pos+i), byten(pos+i), buffer[offset+i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19275ba31e621f6da1b83bf13af75233876fd3d4"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}