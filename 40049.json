{"path":"lucene/core/src/java/org/apache/lucene/codecs/DimensionalWriter#merge(MergeState).mjava","commits":[{"id":"ca792c26af46bd6c4a08d81117c60440cf6a7e3d","date":1445938295,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DimensionalWriter#merge(MergeState).mjava","pathOld":"/dev/null","sourceNew":"  /** Default merge implementation to merge incoming dimensional readers by visiting all their points and\n   *  adding to this writer */\n  public void merge(MergeState mergeState) throws IOException {\n    for (FieldInfo fieldInfo : mergeState.mergeFieldInfos) {\n      if (fieldInfo.getDimensionCount() != 0) {\n        writeField(fieldInfo,\n                   new DimensionalReader() {\n                     @Override\n                     public void intersect(String fieldName, IntersectVisitor mergedVisitor) throws IOException {\n                       if (fieldName.equals(fieldInfo.name) == false) {\n                         throw new IllegalArgumentException(\"field name must match the field being merged\");\n                       }\n                       for (int i=0;i<mergeState.dimensionalReaders.length;i++) {\n                         DimensionalReader dimensionalReader = mergeState.dimensionalReaders[i];\n                         MergeState.DocMap docMap = mergeState.docMaps[i];\n                         int docBase = mergeState.docBase[i];\n                         dimensionalReader.intersect(fieldInfo.name,\n                                                     new IntersectVisitor() {\n                                                       @Override\n                                                       public void visit(int docID) {\n                                                         // Should never be called because our compare method never returns Relation.CELL_INSIDE_QUERY\n                                                         throw new IllegalStateException();\n                                                       }\n\n                                                       @Override\n                                                       public void visit(int docID, byte[] packedValue) throws IOException {\n                                                         int newDocID = docMap.get(docID);\n                                                         if (newDocID != -1) {\n                                                           // Not deleted:\n                                                           mergedVisitor.visit(docBase + newDocID, packedValue);\n                                                         }\n                                                       }\n\n                                                       @Override\n                                                       public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                                         // Forces this segment's DimensionalReader to always visit all docs + values:\n                                                         return Relation.QUERY_CROSSES_CELL;\n                                                       }\n                                                     });\n                       }\n                     }\n\n                     @Override\n                     public void checkIntegrity() {\n                       throw new UnsupportedOperationException();\n                     }\n\n                     @Override\n                     public long ramBytesUsed() {\n                       return 0L;\n                     }\n\n                     @Override\n                     public void close() {\n                     }\n                   });\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb642aae3f964a8e810d3310a2e616e7b6f6cc0c","date":1445956630,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DimensionalWriter#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DimensionalWriter#merge(MergeState).mjava","sourceNew":"  /** Default merge implementation to merge incoming dimensional readers by visiting all their points and\n   *  adding to this writer */\n  public void merge(MergeState mergeState) throws IOException {\n    for (FieldInfo fieldInfo : mergeState.mergeFieldInfos) {\n      if (fieldInfo.getDimensionCount() != 0) {\n        writeField(fieldInfo,\n                   new DimensionalReader() {\n                     @Override\n                     public void intersect(String fieldName, IntersectVisitor mergedVisitor) throws IOException {\n                       if (fieldName.equals(fieldInfo.name) == false) {\n                         throw new IllegalArgumentException(\"field name must match the field being merged\");\n                       }\n                       for (int i=0;i<mergeState.dimensionalReaders.length;i++) {\n                         DimensionalReader dimensionalReader = mergeState.dimensionalReaders[i];\n                         if (dimensionalReader == null) {\n                           // This segment has no dimensional values\n                           continue;\n                         }\n                         MergeState.DocMap docMap = mergeState.docMaps[i];\n                         int docBase = mergeState.docBase[i];\n                         dimensionalReader.intersect(fieldInfo.name,\n                                                     new IntersectVisitor() {\n                                                       @Override\n                                                       public void visit(int docID) {\n                                                         // Should never be called because our compare method never returns Relation.CELL_INSIDE_QUERY\n                                                         throw new IllegalStateException();\n                                                       }\n\n                                                       @Override\n                                                       public void visit(int docID, byte[] packedValue) throws IOException {\n                                                         int newDocID = docMap.get(docID);\n                                                         if (newDocID != -1) {\n                                                           // Not deleted:\n                                                           mergedVisitor.visit(docBase + newDocID, packedValue);\n                                                         }\n                                                       }\n\n                                                       @Override\n                                                       public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                                         // Forces this segment's DimensionalReader to always visit all docs + values:\n                                                         return Relation.QUERY_CROSSES_CELL;\n                                                       }\n                                                     });\n                       }\n                     }\n\n                     @Override\n                     public void checkIntegrity() {\n                       throw new UnsupportedOperationException();\n                     }\n\n                     @Override\n                     public long ramBytesUsed() {\n                       return 0L;\n                     }\n\n                     @Override\n                     public void close() {\n                     }\n                   });\n      }\n    }\n  }\n\n","sourceOld":"  /** Default merge implementation to merge incoming dimensional readers by visiting all their points and\n   *  adding to this writer */\n  public void merge(MergeState mergeState) throws IOException {\n    for (FieldInfo fieldInfo : mergeState.mergeFieldInfos) {\n      if (fieldInfo.getDimensionCount() != 0) {\n        writeField(fieldInfo,\n                   new DimensionalReader() {\n                     @Override\n                     public void intersect(String fieldName, IntersectVisitor mergedVisitor) throws IOException {\n                       if (fieldName.equals(fieldInfo.name) == false) {\n                         throw new IllegalArgumentException(\"field name must match the field being merged\");\n                       }\n                       for (int i=0;i<mergeState.dimensionalReaders.length;i++) {\n                         DimensionalReader dimensionalReader = mergeState.dimensionalReaders[i];\n                         MergeState.DocMap docMap = mergeState.docMaps[i];\n                         int docBase = mergeState.docBase[i];\n                         dimensionalReader.intersect(fieldInfo.name,\n                                                     new IntersectVisitor() {\n                                                       @Override\n                                                       public void visit(int docID) {\n                                                         // Should never be called because our compare method never returns Relation.CELL_INSIDE_QUERY\n                                                         throw new IllegalStateException();\n                                                       }\n\n                                                       @Override\n                                                       public void visit(int docID, byte[] packedValue) throws IOException {\n                                                         int newDocID = docMap.get(docID);\n                                                         if (newDocID != -1) {\n                                                           // Not deleted:\n                                                           mergedVisitor.visit(docBase + newDocID, packedValue);\n                                                         }\n                                                       }\n\n                                                       @Override\n                                                       public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                                         // Forces this segment's DimensionalReader to always visit all docs + values:\n                                                         return Relation.QUERY_CROSSES_CELL;\n                                                       }\n                                                     });\n                       }\n                     }\n\n                     @Override\n                     public void checkIntegrity() {\n                       throw new UnsupportedOperationException();\n                     }\n\n                     @Override\n                     public long ramBytesUsed() {\n                       return 0L;\n                     }\n\n                     @Override\n                     public void close() {\n                     }\n                   });\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DimensionalWriter#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DimensionalWriter#merge(MergeState).mjava","sourceNew":"  /** Default merge implementation to merge incoming dimensional readers by visiting all their points and\n   *  adding to this writer */\n  public void merge(MergeState mergeState) throws IOException {\n    for (FieldInfo fieldInfo : mergeState.mergeFieldInfos) {\n      if (fieldInfo.getDimensionCount() != 0) {\n        writeField(fieldInfo,\n                   new DimensionalReader() {\n                     @Override\n                     public void intersect(String fieldName, IntersectVisitor mergedVisitor) throws IOException {\n                       if (fieldName.equals(fieldInfo.name) == false) {\n                         throw new IllegalArgumentException(\"field name must match the field being merged\");\n                       }\n                       for (int i=0;i<mergeState.dimensionalReaders.length;i++) {\n                         DimensionalReader dimensionalReader = mergeState.dimensionalReaders[i];\n                         if (dimensionalReader == null) {\n                           // This segment has no dimensional values\n                           continue;\n                         }\n                         MergeState.DocMap docMap = mergeState.docMaps[i];\n                         int docBase = mergeState.docBase[i];\n                         dimensionalReader.intersect(fieldInfo.name,\n                                                     new IntersectVisitor() {\n                                                       @Override\n                                                       public void visit(int docID) {\n                                                         // Should never be called because our compare method never returns Relation.CELL_INSIDE_QUERY\n                                                         throw new IllegalStateException();\n                                                       }\n\n                                                       @Override\n                                                       public void visit(int docID, byte[] packedValue) throws IOException {\n                                                         int newDocID = docMap.get(docID);\n                                                         if (newDocID != -1) {\n                                                           // Not deleted:\n                                                           mergedVisitor.visit(docBase + newDocID, packedValue);\n                                                         }\n                                                       }\n\n                                                       @Override\n                                                       public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                                         // Forces this segment's DimensionalReader to always visit all docs + values:\n                                                         return Relation.CELL_CROSSES_QUERY;\n                                                       }\n                                                     });\n                       }\n                     }\n\n                     @Override\n                     public void checkIntegrity() {\n                       throw new UnsupportedOperationException();\n                     }\n\n                     @Override\n                     public long ramBytesUsed() {\n                       return 0L;\n                     }\n\n                     @Override\n                     public void close() {\n                     }\n                   });\n      }\n    }\n  }\n\n","sourceOld":"  /** Default merge implementation to merge incoming dimensional readers by visiting all their points and\n   *  adding to this writer */\n  public void merge(MergeState mergeState) throws IOException {\n    for (FieldInfo fieldInfo : mergeState.mergeFieldInfos) {\n      if (fieldInfo.getDimensionCount() != 0) {\n        writeField(fieldInfo,\n                   new DimensionalReader() {\n                     @Override\n                     public void intersect(String fieldName, IntersectVisitor mergedVisitor) throws IOException {\n                       if (fieldName.equals(fieldInfo.name) == false) {\n                         throw new IllegalArgumentException(\"field name must match the field being merged\");\n                       }\n                       for (int i=0;i<mergeState.dimensionalReaders.length;i++) {\n                         DimensionalReader dimensionalReader = mergeState.dimensionalReaders[i];\n                         if (dimensionalReader == null) {\n                           // This segment has no dimensional values\n                           continue;\n                         }\n                         MergeState.DocMap docMap = mergeState.docMaps[i];\n                         int docBase = mergeState.docBase[i];\n                         dimensionalReader.intersect(fieldInfo.name,\n                                                     new IntersectVisitor() {\n                                                       @Override\n                                                       public void visit(int docID) {\n                                                         // Should never be called because our compare method never returns Relation.CELL_INSIDE_QUERY\n                                                         throw new IllegalStateException();\n                                                       }\n\n                                                       @Override\n                                                       public void visit(int docID, byte[] packedValue) throws IOException {\n                                                         int newDocID = docMap.get(docID);\n                                                         if (newDocID != -1) {\n                                                           // Not deleted:\n                                                           mergedVisitor.visit(docBase + newDocID, packedValue);\n                                                         }\n                                                       }\n\n                                                       @Override\n                                                       public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                                         // Forces this segment's DimensionalReader to always visit all docs + values:\n                                                         return Relation.QUERY_CROSSES_CELL;\n                                                       }\n                                                     });\n                       }\n                     }\n\n                     @Override\n                     public void checkIntegrity() {\n                       throw new UnsupportedOperationException();\n                     }\n\n                     @Override\n                     public long ramBytesUsed() {\n                       return 0L;\n                     }\n\n                     @Override\n                     public void close() {\n                     }\n                   });\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1786be6a11f9cf5e48ce84869d1bb71e9c02f966","date":1448381196,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DimensionalWriter#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DimensionalWriter#merge(MergeState).mjava","sourceNew":"  /** Default merge implementation to merge incoming dimensional readers by visiting all their points and\n   *  adding to this writer */\n  public void merge(MergeState mergeState) throws IOException {\n    for (FieldInfo fieldInfo : mergeState.mergeFieldInfos) {\n      if (fieldInfo.getDimensionCount() != 0) {\n        mergeOneField(mergeState, fieldInfo);\n      }\n    }\n  }\n\n","sourceOld":"  /** Default merge implementation to merge incoming dimensional readers by visiting all their points and\n   *  adding to this writer */\n  public void merge(MergeState mergeState) throws IOException {\n    for (FieldInfo fieldInfo : mergeState.mergeFieldInfos) {\n      if (fieldInfo.getDimensionCount() != 0) {\n        writeField(fieldInfo,\n                   new DimensionalReader() {\n                     @Override\n                     public void intersect(String fieldName, IntersectVisitor mergedVisitor) throws IOException {\n                       if (fieldName.equals(fieldInfo.name) == false) {\n                         throw new IllegalArgumentException(\"field name must match the field being merged\");\n                       }\n                       for (int i=0;i<mergeState.dimensionalReaders.length;i++) {\n                         DimensionalReader dimensionalReader = mergeState.dimensionalReaders[i];\n                         if (dimensionalReader == null) {\n                           // This segment has no dimensional values\n                           continue;\n                         }\n                         MergeState.DocMap docMap = mergeState.docMaps[i];\n                         int docBase = mergeState.docBase[i];\n                         dimensionalReader.intersect(fieldInfo.name,\n                                                     new IntersectVisitor() {\n                                                       @Override\n                                                       public void visit(int docID) {\n                                                         // Should never be called because our compare method never returns Relation.CELL_INSIDE_QUERY\n                                                         throw new IllegalStateException();\n                                                       }\n\n                                                       @Override\n                                                       public void visit(int docID, byte[] packedValue) throws IOException {\n                                                         int newDocID = docMap.get(docID);\n                                                         if (newDocID != -1) {\n                                                           // Not deleted:\n                                                           mergedVisitor.visit(docBase + newDocID, packedValue);\n                                                         }\n                                                       }\n\n                                                       @Override\n                                                       public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                                         // Forces this segment's DimensionalReader to always visit all docs + values:\n                                                         return Relation.CELL_CROSSES_QUERY;\n                                                       }\n                                                     });\n                       }\n                     }\n\n                     @Override\n                     public void checkIntegrity() {\n                       throw new UnsupportedOperationException();\n                     }\n\n                     @Override\n                     public long ramBytesUsed() {\n                       return 0L;\n                     }\n\n                     @Override\n                     public void close() {\n                     }\n                   });\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PointWriter#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DimensionalWriter#merge(MergeState).mjava","sourceNew":"  /** Default merge implementation to merge incoming points readers by visiting all their points and\n   *  adding to this writer */\n  public void merge(MergeState mergeState) throws IOException {\n    for (FieldInfo fieldInfo : mergeState.mergeFieldInfos) {\n      if (fieldInfo.getPointDimensionCount() != 0) {\n        mergeOneField(mergeState, fieldInfo);\n      }\n    }\n  }\n\n","sourceOld":"  /** Default merge implementation to merge incoming dimensional readers by visiting all their points and\n   *  adding to this writer */\n  public void merge(MergeState mergeState) throws IOException {\n    for (FieldInfo fieldInfo : mergeState.mergeFieldInfos) {\n      if (fieldInfo.getDimensionCount() != 0) {\n        mergeOneField(mergeState, fieldInfo);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["1786be6a11f9cf5e48ce84869d1bb71e9c02f966"],"1786be6a11f9cf5e48ce84869d1bb71e9c02f966":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"eb642aae3f964a8e810d3310a2e616e7b6f6cc0c":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["eb642aae3f964a8e810d3310a2e616e7b6f6cc0c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1786be6a11f9cf5e48ce84869d1bb71e9c02f966":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"eb642aae3f964a8e810d3310a2e616e7b6f6cc0c":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["eb642aae3f964a8e810d3310a2e616e7b6f6cc0c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["1786be6a11f9cf5e48ce84869d1bb71e9c02f966"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}