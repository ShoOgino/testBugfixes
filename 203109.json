{"path":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveHdfsReplica(ClusterState,NamedList,String,String,String,String,DocCollection,Replica,Slice,int).mjava","commits":[{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveHdfsReplica(ClusterState,NamedList,String,String,String,String,DocCollection,Replica,Slice,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveHdfsReplica(ClusterState,NamedList,String,String,String,String,DocCollection,Replica,Slice).mjava","sourceNew":"  private void moveHdfsReplica(ClusterState clusterState, NamedList results, String dataDir, String ulogDir, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout) throws Exception {\n    String newCoreName = Assign.buildCoreName(coll, slice.getName(), replica.getType());\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName()\n        );\n    removeReplicasProps.getProperties().put(CoreAdminParams.DELETE_DATA_DIR, false);\n    removeReplicasProps.getProperties().put(CoreAdminParams.DELETE_INDEX, false);\n    if(async!=null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n      return;\n    }\n\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName,\n        CoreAdminParams.DATA_DIR, dataDir,\n        CoreAdminParams.ULOG_DIR, ulogDir);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      return;\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","sourceOld":"  private void moveHdfsReplica(ClusterState clusterState, NamedList results, String dataDir, String ulogDir, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice) throws Exception {\n    String newCoreName = Assign.buildCoreName(coll, slice.getName(), replica.getType());\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName()\n        );\n    removeReplicasProps.getProperties().put(CoreAdminParams.DELETE_DATA_DIR, false);\n    removeReplicasProps.getProperties().put(CoreAdminParams.DELETE_INDEX, false);\n    if(async!=null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n      return;\n    }\n\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName,\n        CoreAdminParams.DATA_DIR, dataDir,\n        CoreAdminParams.ULOG_DIR, ulogDir);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      return;\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9a989a32a073c55e3aef6f807a3474184bbcf49","date":1499930209,"type":5,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveHdfsReplica(ClusterState,NamedList,String,String,String,DocCollection,Replica,Slice,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveHdfsReplica(ClusterState,NamedList,String,String,String,String,DocCollection,Replica,Slice,int).mjava","sourceNew":"  private void moveHdfsReplica(ClusterState clusterState, NamedList results, String dataDir, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout) throws Exception {\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName()\n        );\n    removeReplicasProps.getProperties().put(CoreAdminParams.DELETE_DATA_DIR, false);\n    removeReplicasProps.getProperties().put(CoreAdminParams.DELETE_INDEX, false);\n    if(async!=null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n      return;\n    }\n\n    TimeOut timeOut = new TimeOut(20L, TimeUnit.SECONDS);\n    while (!timeOut.hasTimedOut()) {\n      coll = ocmh.zkStateReader.getClusterState().getCollection(coll.getName());\n      if (coll.getReplica(replica.getName()) != null) {\n        Thread.sleep(100);\n      } else {\n        break;\n      }\n    }\n    if (timeOut.hasTimedOut()) {\n      results.add(\"failure\", \"Still see deleted replica in clusterstate!\");\n      return;\n    }\n\n    String ulogDir = replica.getStr(CoreAdminParams.ULOG_DIR);\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.CORE_NODE_NAME, replica.getName(),\n        CoreAdminParams.NAME, replica.getCoreName(),\n        CoreAdminParams.ULOG_DIR, ulogDir.substring(0, ulogDir.lastIndexOf(UpdateLog.TLOG_NAME)),\n        CoreAdminParams.DATA_DIR, dataDir);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    ocmh.addReplica(ocmh.zkStateReader.getClusterState(), addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      return;\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), replica.getCoreName(), targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","sourceOld":"  private void moveHdfsReplica(ClusterState clusterState, NamedList results, String dataDir, String ulogDir, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout) throws Exception {\n    String newCoreName = Assign.buildCoreName(coll, slice.getName(), replica.getType());\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName()\n        );\n    removeReplicasProps.getProperties().put(CoreAdminParams.DELETE_DATA_DIR, false);\n    removeReplicasProps.getProperties().put(CoreAdminParams.DELETE_INDEX, false);\n    if(async!=null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n      return;\n    }\n\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName,\n        CoreAdminParams.DATA_DIR, dataDir,\n        CoreAdminParams.ULOG_DIR, ulogDir);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      return;\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fb569fd721c41eafc2a2d788499a7df490c7f1a5","date":1499930871,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveHdfsReplica(ClusterState,NamedList,String,String,String,DocCollection,Replica,Slice,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveHdfsReplica(ClusterState,NamedList,String,String,String,String,DocCollection,Replica,Slice,int).mjava","sourceNew":"  private void moveHdfsReplica(ClusterState clusterState, NamedList results, String dataDir, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout) throws Exception {\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName()\n        );\n    removeReplicasProps.getProperties().put(CoreAdminParams.DELETE_DATA_DIR, false);\n    removeReplicasProps.getProperties().put(CoreAdminParams.DELETE_INDEX, false);\n    if(async!=null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n      return;\n    }\n\n    TimeOut timeOut = new TimeOut(20L, TimeUnit.SECONDS);\n    while (!timeOut.hasTimedOut()) {\n      coll = ocmh.zkStateReader.getClusterState().getCollection(coll.getName());\n      if (coll.getReplica(replica.getName()) != null) {\n        Thread.sleep(100);\n      } else {\n        break;\n      }\n    }\n    if (timeOut.hasTimedOut()) {\n      results.add(\"failure\", \"Still see deleted replica in clusterstate!\");\n      return;\n    }\n\n    String ulogDir = replica.getStr(CoreAdminParams.ULOG_DIR);\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.CORE_NODE_NAME, replica.getName(),\n        CoreAdminParams.NAME, replica.getCoreName(),\n        CoreAdminParams.ULOG_DIR, ulogDir.substring(0, ulogDir.lastIndexOf(UpdateLog.TLOG_NAME)),\n        CoreAdminParams.DATA_DIR, dataDir);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    ocmh.addReplica(ocmh.zkStateReader.getClusterState(), addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      return;\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), replica.getCoreName(), targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","sourceOld":"  private void moveHdfsReplica(ClusterState clusterState, NamedList results, String dataDir, String ulogDir, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout) throws Exception {\n    String newCoreName = Assign.buildCoreName(coll, slice.getName(), replica.getType());\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName()\n        );\n    removeReplicasProps.getProperties().put(CoreAdminParams.DELETE_DATA_DIR, false);\n    removeReplicasProps.getProperties().put(CoreAdminParams.DELETE_INDEX, false);\n    if(async!=null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n      return;\n    }\n\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName,\n        CoreAdminParams.DATA_DIR, dataDir,\n        CoreAdminParams.ULOG_DIR, ulogDir);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      return;\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","f9a989a32a073c55e3aef6f807a3474184bbcf49","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":[],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["fb569fd721c41eafc2a2d788499a7df490c7f1a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}