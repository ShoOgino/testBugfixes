{"path":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#numDeletesToMerge(SegmentCommitInfo,int,IOSupplier[CodecReader]).mjava","commits":[{"id":"9ae87c7be37e537f40fa3bb2c35fa4a368d12a72","date":1523453225,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#numDeletesToMerge(SegmentCommitInfo,int,IOSupplier[CodecReader]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int numDeletesToMerge(SegmentCommitInfo info, int pendingDeleteCount, IOSupplier<CodecReader> readerSupplier) throws IOException {\n    int numDeletesToMerge = super.numDeletesToMerge(info, pendingDeleteCount, readerSupplier);\n    if (numDeletesToMerge != 0) {\n      final CodecReader reader = readerSupplier.get();\n      if (reader.getLiveDocs() != null) {\n        Scorer scorer = getScorer(field, retentionQuerySupplier.get(), wrapLiveDocs(reader, null, reader.maxDoc()));\n        if (scorer != null) {\n          DocIdSetIterator iterator = scorer.iterator();\n          Bits liveDocs = reader.getLiveDocs();\n          int numDeletedDocs = reader.numDeletedDocs();\n          while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            if (liveDocs.get(iterator.docID()) == false) {\n              numDeletedDocs--;\n            }\n          }\n          return numDeletedDocs;\n        }\n      }\n    }\n    assert numDeletesToMerge >= 0 : \"numDeletesToMerge: \" + numDeletesToMerge;\n    assert numDeletesToMerge <= info.info.maxDoc() : \"numDeletesToMerge: \" + numDeletesToMerge + \" maxDoc:\" + info.info.maxDoc();\n    return numDeletesToMerge;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#numDeletesToMerge(SegmentCommitInfo,int,IOSupplier[CodecReader]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int numDeletesToMerge(SegmentCommitInfo info, int pendingDeleteCount, IOSupplier<CodecReader> readerSupplier) throws IOException {\n    int numDeletesToMerge = super.numDeletesToMerge(info, pendingDeleteCount, readerSupplier);\n    if (numDeletesToMerge != 0) {\n      final CodecReader reader = readerSupplier.get();\n      if (reader.getLiveDocs() != null) {\n        Scorer scorer = getScorer(field, retentionQuerySupplier.get(), wrapLiveDocs(reader, null, reader.maxDoc()));\n        if (scorer != null) {\n          DocIdSetIterator iterator = scorer.iterator();\n          Bits liveDocs = reader.getLiveDocs();\n          int numDeletedDocs = reader.numDeletedDocs();\n          while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            if (liveDocs.get(iterator.docID()) == false) {\n              numDeletedDocs--;\n            }\n          }\n          return numDeletedDocs;\n        }\n      }\n    }\n    assert numDeletesToMerge >= 0 : \"numDeletesToMerge: \" + numDeletesToMerge;\n    assert numDeletesToMerge <= info.info.maxDoc() : \"numDeletesToMerge: \" + numDeletesToMerge + \" maxDoc:\" + info.info.maxDoc();\n    return numDeletesToMerge;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36d13f271b6649357e07f71f7e46559479f69b5b","date":1523888226,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#numDeletesToMerge(SegmentCommitInfo,int,IOSupplier[CodecReader]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#numDeletesToMerge(SegmentCommitInfo,int,IOSupplier[CodecReader]).mjava","sourceNew":"  @Override\n  public int numDeletesToMerge(SegmentCommitInfo info, int pendingDeleteCount, IOSupplier<CodecReader> readerSupplier) throws IOException {\n    final int numDeletesToMerge = super.numDeletesToMerge(info, pendingDeleteCount, readerSupplier);\n    if (numDeletesToMerge != 0) {\n      final CodecReader reader = readerSupplier.get();\n      if (reader.getLiveDocs() != null) {\n        BooleanQuery.Builder builder = new BooleanQuery.Builder();\n        builder.add(new DocValuesFieldExistsQuery(field), BooleanClause.Occur.FILTER);\n        builder.add(retentionQuerySupplier.get(), BooleanClause.Occur.FILTER);\n        Scorer scorer = getScorer(builder.build(), wrapLiveDocs(reader, null, reader.maxDoc()));\n        if (scorer != null) {\n          DocIdSetIterator iterator = scorer.iterator();\n          Bits liveDocs = reader.getLiveDocs();\n          int numDeletedDocs = reader.numDeletedDocs();\n          while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            if (liveDocs.get(iterator.docID()) == false) {\n              numDeletedDocs--;\n            }\n          }\n          return numDeletedDocs;\n        }\n      }\n    }\n    assert numDeletesToMerge >= 0 : \"numDeletesToMerge: \" + numDeletesToMerge;\n    assert numDeletesToMerge <= info.info.maxDoc() : \"numDeletesToMerge: \" + numDeletesToMerge + \" maxDoc:\" + info.info.maxDoc();\n    return numDeletesToMerge;\n  }\n\n","sourceOld":"  @Override\n  public int numDeletesToMerge(SegmentCommitInfo info, int pendingDeleteCount, IOSupplier<CodecReader> readerSupplier) throws IOException {\n    int numDeletesToMerge = super.numDeletesToMerge(info, pendingDeleteCount, readerSupplier);\n    if (numDeletesToMerge != 0) {\n      final CodecReader reader = readerSupplier.get();\n      if (reader.getLiveDocs() != null) {\n        Scorer scorer = getScorer(field, retentionQuerySupplier.get(), wrapLiveDocs(reader, null, reader.maxDoc()));\n        if (scorer != null) {\n          DocIdSetIterator iterator = scorer.iterator();\n          Bits liveDocs = reader.getLiveDocs();\n          int numDeletedDocs = reader.numDeletedDocs();\n          while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            if (liveDocs.get(iterator.docID()) == false) {\n              numDeletedDocs--;\n            }\n          }\n          return numDeletedDocs;\n        }\n      }\n    }\n    assert numDeletesToMerge >= 0 : \"numDeletesToMerge: \" + numDeletesToMerge;\n    assert numDeletesToMerge <= info.info.maxDoc() : \"numDeletesToMerge: \" + numDeletesToMerge + \" maxDoc:\" + info.info.maxDoc();\n    return numDeletesToMerge;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aef2a94da918b657d107b616a643e1759db43b6a","date":1527706131,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#numDeletesToMerge(SegmentCommitInfo,int,IOSupplier[CodecReader]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#numDeletesToMerge(SegmentCommitInfo,int,IOSupplier[CodecReader]).mjava","sourceNew":"  @Override\n  public int numDeletesToMerge(SegmentCommitInfo info, int delCount, IOSupplier<CodecReader> readerSupplier) throws IOException {\n    final int numDeletesToMerge = super.numDeletesToMerge(info, delCount, readerSupplier);\n    if (numDeletesToMerge != 0) {\n      final CodecReader reader = readerSupplier.get();\n      if (reader.getLiveDocs() != null) {\n        BooleanQuery.Builder builder = new BooleanQuery.Builder();\n        builder.add(new DocValuesFieldExistsQuery(field), BooleanClause.Occur.FILTER);\n        builder.add(retentionQuerySupplier.get(), BooleanClause.Occur.FILTER);\n        Scorer scorer = getScorer(builder.build(), wrapLiveDocs(reader, null, reader.maxDoc()));\n        if (scorer != null) {\n          DocIdSetIterator iterator = scorer.iterator();\n          Bits liveDocs = reader.getLiveDocs();\n          int numDeletedDocs = reader.numDeletedDocs();\n          while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            if (liveDocs.get(iterator.docID()) == false) {\n              numDeletedDocs--;\n            }\n          }\n          return numDeletedDocs;\n        }\n      }\n    }\n    assert numDeletesToMerge >= 0 : \"numDeletesToMerge: \" + numDeletesToMerge;\n    assert numDeletesToMerge <= info.info.maxDoc() : \"numDeletesToMerge: \" + numDeletesToMerge + \" maxDoc:\" + info.info.maxDoc();\n    return numDeletesToMerge;\n  }\n\n","sourceOld":"  @Override\n  public int numDeletesToMerge(SegmentCommitInfo info, int pendingDeleteCount, IOSupplier<CodecReader> readerSupplier) throws IOException {\n    final int numDeletesToMerge = super.numDeletesToMerge(info, pendingDeleteCount, readerSupplier);\n    if (numDeletesToMerge != 0) {\n      final CodecReader reader = readerSupplier.get();\n      if (reader.getLiveDocs() != null) {\n        BooleanQuery.Builder builder = new BooleanQuery.Builder();\n        builder.add(new DocValuesFieldExistsQuery(field), BooleanClause.Occur.FILTER);\n        builder.add(retentionQuerySupplier.get(), BooleanClause.Occur.FILTER);\n        Scorer scorer = getScorer(builder.build(), wrapLiveDocs(reader, null, reader.maxDoc()));\n        if (scorer != null) {\n          DocIdSetIterator iterator = scorer.iterator();\n          Bits liveDocs = reader.getLiveDocs();\n          int numDeletedDocs = reader.numDeletedDocs();\n          while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            if (liveDocs.get(iterator.docID()) == false) {\n              numDeletedDocs--;\n            }\n          }\n          return numDeletedDocs;\n        }\n      }\n    }\n    assert numDeletesToMerge >= 0 : \"numDeletesToMerge: \" + numDeletesToMerge;\n    assert numDeletesToMerge <= info.info.maxDoc() : \"numDeletesToMerge: \" + numDeletesToMerge + \" maxDoc:\" + info.info.maxDoc();\n    return numDeletesToMerge;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f2203cb8ae87188877cfbf6ad170c5738a0aad5","date":1528117512,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#numDeletesToMerge(SegmentCommitInfo,int,IOSupplier[CodecReader]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#numDeletesToMerge(SegmentCommitInfo,int,IOSupplier[CodecReader]).mjava","sourceNew":"  @Override\n  public int numDeletesToMerge(SegmentCommitInfo info, int delCount, IOSupplier<CodecReader> readerSupplier) throws IOException {\n    final int numDeletesToMerge = super.numDeletesToMerge(info, delCount, readerSupplier);\n    if (numDeletesToMerge != 0 && info.getSoftDelCount() > 0) {\n      final CodecReader reader = readerSupplier.get();\n      if (reader.getLiveDocs() != null) {\n        BooleanQuery.Builder builder = new BooleanQuery.Builder();\n        builder.add(new DocValuesFieldExistsQuery(field), BooleanClause.Occur.FILTER);\n        builder.add(retentionQuerySupplier.get(), BooleanClause.Occur.FILTER);\n        Scorer scorer = getScorer(builder.build(), wrapLiveDocs(reader, null, reader.maxDoc()));\n        if (scorer != null) {\n          DocIdSetIterator iterator = scorer.iterator();\n          Bits liveDocs = reader.getLiveDocs();\n          int numDeletedDocs = reader.numDeletedDocs();\n          while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            if (liveDocs.get(iterator.docID()) == false) {\n              numDeletedDocs--;\n            }\n          }\n          return numDeletedDocs;\n        }\n      }\n    }\n    assert numDeletesToMerge >= 0 : \"numDeletesToMerge: \" + numDeletesToMerge;\n    assert numDeletesToMerge <= info.info.maxDoc() : \"numDeletesToMerge: \" + numDeletesToMerge + \" maxDoc:\" + info.info.maxDoc();\n    return numDeletesToMerge;\n  }\n\n","sourceOld":"  @Override\n  public int numDeletesToMerge(SegmentCommitInfo info, int delCount, IOSupplier<CodecReader> readerSupplier) throws IOException {\n    final int numDeletesToMerge = super.numDeletesToMerge(info, delCount, readerSupplier);\n    if (numDeletesToMerge != 0) {\n      final CodecReader reader = readerSupplier.get();\n      if (reader.getLiveDocs() != null) {\n        BooleanQuery.Builder builder = new BooleanQuery.Builder();\n        builder.add(new DocValuesFieldExistsQuery(field), BooleanClause.Occur.FILTER);\n        builder.add(retentionQuerySupplier.get(), BooleanClause.Occur.FILTER);\n        Scorer scorer = getScorer(builder.build(), wrapLiveDocs(reader, null, reader.maxDoc()));\n        if (scorer != null) {\n          DocIdSetIterator iterator = scorer.iterator();\n          Bits liveDocs = reader.getLiveDocs();\n          int numDeletedDocs = reader.numDeletedDocs();\n          while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            if (liveDocs.get(iterator.docID()) == false) {\n              numDeletedDocs--;\n            }\n          }\n          return numDeletedDocs;\n        }\n      }\n    }\n    assert numDeletesToMerge >= 0 : \"numDeletesToMerge: \" + numDeletesToMerge;\n    assert numDeletesToMerge <= info.info.maxDoc() : \"numDeletesToMerge: \" + numDeletesToMerge + \" maxDoc:\" + info.info.maxDoc();\n    return numDeletesToMerge;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#numDeletesToMerge(SegmentCommitInfo,int,IOSupplier[CodecReader]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#numDeletesToMerge(SegmentCommitInfo,int,IOSupplier[CodecReader]).mjava","sourceNew":"  @Override\n  public int numDeletesToMerge(SegmentCommitInfo info, int delCount, IOSupplier<CodecReader> readerSupplier) throws IOException {\n    final int numDeletesToMerge = super.numDeletesToMerge(info, delCount, readerSupplier);\n    if (numDeletesToMerge != 0 && info.getSoftDelCount() > 0) {\n      final CodecReader reader = readerSupplier.get();\n      if (reader.getLiveDocs() != null) {\n        BooleanQuery.Builder builder = new BooleanQuery.Builder();\n        builder.add(new DocValuesFieldExistsQuery(field), BooleanClause.Occur.FILTER);\n        builder.add(retentionQuerySupplier.get(), BooleanClause.Occur.FILTER);\n        Scorer scorer = getScorer(builder.build(), wrapLiveDocs(reader, null, reader.maxDoc()));\n        if (scorer != null) {\n          DocIdSetIterator iterator = scorer.iterator();\n          Bits liveDocs = reader.getLiveDocs();\n          int numDeletedDocs = reader.numDeletedDocs();\n          while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            if (liveDocs.get(iterator.docID()) == false) {\n              numDeletedDocs--;\n            }\n          }\n          return numDeletedDocs;\n        }\n      }\n    }\n    assert numDeletesToMerge >= 0 : \"numDeletesToMerge: \" + numDeletesToMerge;\n    assert numDeletesToMerge <= info.info.maxDoc() : \"numDeletesToMerge: \" + numDeletesToMerge + \" maxDoc:\" + info.info.maxDoc();\n    return numDeletesToMerge;\n  }\n\n","sourceOld":"  @Override\n  public int numDeletesToMerge(SegmentCommitInfo info, int delCount, IOSupplier<CodecReader> readerSupplier) throws IOException {\n    final int numDeletesToMerge = super.numDeletesToMerge(info, delCount, readerSupplier);\n    if (numDeletesToMerge != 0) {\n      final CodecReader reader = readerSupplier.get();\n      if (reader.getLiveDocs() != null) {\n        BooleanQuery.Builder builder = new BooleanQuery.Builder();\n        builder.add(new DocValuesFieldExistsQuery(field), BooleanClause.Occur.FILTER);\n        builder.add(retentionQuerySupplier.get(), BooleanClause.Occur.FILTER);\n        Scorer scorer = getScorer(builder.build(), wrapLiveDocs(reader, null, reader.maxDoc()));\n        if (scorer != null) {\n          DocIdSetIterator iterator = scorer.iterator();\n          Bits liveDocs = reader.getLiveDocs();\n          int numDeletedDocs = reader.numDeletedDocs();\n          while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            if (liveDocs.get(iterator.docID()) == false) {\n              numDeletedDocs--;\n            }\n          }\n          return numDeletedDocs;\n        }\n      }\n    }\n    assert numDeletesToMerge >= 0 : \"numDeletesToMerge: \" + numDeletesToMerge;\n    assert numDeletesToMerge <= info.info.maxDoc() : \"numDeletesToMerge: \" + numDeletesToMerge + \" maxDoc:\" + info.info.maxDoc();\n    return numDeletesToMerge;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#numDeletesToMerge(SegmentCommitInfo,int,IOSupplier[CodecReader]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#numDeletesToMerge(SegmentCommitInfo,int,IOSupplier[CodecReader]).mjava","sourceNew":"  @Override\n  public int numDeletesToMerge(SegmentCommitInfo info, int delCount, IOSupplier<CodecReader> readerSupplier) throws IOException {\n    final int numDeletesToMerge = super.numDeletesToMerge(info, delCount, readerSupplier);\n    if (numDeletesToMerge != 0 && info.getSoftDelCount() > 0) {\n      final CodecReader reader = readerSupplier.get();\n      if (reader.getLiveDocs() != null) {\n        BooleanQuery.Builder builder = new BooleanQuery.Builder();\n        builder.add(new DocValuesFieldExistsQuery(field), BooleanClause.Occur.FILTER);\n        builder.add(retentionQuerySupplier.get(), BooleanClause.Occur.FILTER);\n        Scorer scorer = getScorer(builder.build(), wrapLiveDocs(reader, null, reader.maxDoc()));\n        if (scorer != null) {\n          DocIdSetIterator iterator = scorer.iterator();\n          Bits liveDocs = reader.getLiveDocs();\n          int numDeletedDocs = reader.numDeletedDocs();\n          while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            if (liveDocs.get(iterator.docID()) == false) {\n              numDeletedDocs--;\n            }\n          }\n          return numDeletedDocs;\n        }\n      }\n    }\n    assert numDeletesToMerge >= 0 : \"numDeletesToMerge: \" + numDeletesToMerge;\n    assert numDeletesToMerge <= info.info.maxDoc() : \"numDeletesToMerge: \" + numDeletesToMerge + \" maxDoc:\" + info.info.maxDoc();\n    return numDeletesToMerge;\n  }\n\n","sourceOld":"  @Override\n  public int numDeletesToMerge(SegmentCommitInfo info, int delCount, IOSupplier<CodecReader> readerSupplier) throws IOException {\n    final int numDeletesToMerge = super.numDeletesToMerge(info, delCount, readerSupplier);\n    if (numDeletesToMerge != 0) {\n      final CodecReader reader = readerSupplier.get();\n      if (reader.getLiveDocs() != null) {\n        BooleanQuery.Builder builder = new BooleanQuery.Builder();\n        builder.add(new DocValuesFieldExistsQuery(field), BooleanClause.Occur.FILTER);\n        builder.add(retentionQuerySupplier.get(), BooleanClause.Occur.FILTER);\n        Scorer scorer = getScorer(builder.build(), wrapLiveDocs(reader, null, reader.maxDoc()));\n        if (scorer != null) {\n          DocIdSetIterator iterator = scorer.iterator();\n          Bits liveDocs = reader.getLiveDocs();\n          int numDeletedDocs = reader.numDeletedDocs();\n          while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            if (liveDocs.get(iterator.docID()) == false) {\n              numDeletedDocs--;\n            }\n          }\n          return numDeletedDocs;\n        }\n      }\n    }\n    assert numDeletesToMerge >= 0 : \"numDeletesToMerge: \" + numDeletesToMerge;\n    assert numDeletesToMerge <= info.info.maxDoc() : \"numDeletesToMerge: \" + numDeletesToMerge + \" maxDoc:\" + info.info.maxDoc();\n    return numDeletesToMerge;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c652f4c2c731f462e41a528ed4f97245915206d5","date":1530728194,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#numDeletesToMerge(SegmentCommitInfo,int,IOSupplier[CodecReader]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#numDeletesToMerge(SegmentCommitInfo,int,IOSupplier[CodecReader]).mjava","sourceNew":"  @Override\n  public int numDeletesToMerge(SegmentCommitInfo info, int delCount, IOSupplier<CodecReader> readerSupplier) throws IOException {\n    final int numDeletesToMerge = super.numDeletesToMerge(info, delCount, readerSupplier);\n    if (numDeletesToMerge != 0 && info.getSoftDelCount() > 0) {\n      final CodecReader reader = readerSupplier.get();\n      if (reader.getLiveDocs() != null) {\n        BooleanQuery.Builder builder = new BooleanQuery.Builder();\n        builder.add(new DocValuesFieldExistsQuery(field), BooleanClause.Occur.FILTER);\n        builder.add(retentionQuerySupplier.get(), BooleanClause.Occur.FILTER);\n        Scorer scorer = getScorer(builder.build(), FilterCodecReader.wrapLiveDocs(reader, null, reader.maxDoc()));\n        if (scorer != null) {\n          DocIdSetIterator iterator = scorer.iterator();\n          Bits liveDocs = reader.getLiveDocs();\n          int numDeletedDocs = reader.numDeletedDocs();\n          while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            if (liveDocs.get(iterator.docID()) == false) {\n              numDeletedDocs--;\n            }\n          }\n          return numDeletedDocs;\n        }\n      }\n    }\n    assert numDeletesToMerge >= 0 : \"numDeletesToMerge: \" + numDeletesToMerge;\n    assert numDeletesToMerge <= info.info.maxDoc() : \"numDeletesToMerge: \" + numDeletesToMerge + \" maxDoc:\" + info.info.maxDoc();\n    return numDeletesToMerge;\n  }\n\n","sourceOld":"  @Override\n  public int numDeletesToMerge(SegmentCommitInfo info, int delCount, IOSupplier<CodecReader> readerSupplier) throws IOException {\n    final int numDeletesToMerge = super.numDeletesToMerge(info, delCount, readerSupplier);\n    if (numDeletesToMerge != 0 && info.getSoftDelCount() > 0) {\n      final CodecReader reader = readerSupplier.get();\n      if (reader.getLiveDocs() != null) {\n        BooleanQuery.Builder builder = new BooleanQuery.Builder();\n        builder.add(new DocValuesFieldExistsQuery(field), BooleanClause.Occur.FILTER);\n        builder.add(retentionQuerySupplier.get(), BooleanClause.Occur.FILTER);\n        Scorer scorer = getScorer(builder.build(), wrapLiveDocs(reader, null, reader.maxDoc()));\n        if (scorer != null) {\n          DocIdSetIterator iterator = scorer.iterator();\n          Bits liveDocs = reader.getLiveDocs();\n          int numDeletedDocs = reader.numDeletedDocs();\n          while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            if (liveDocs.get(iterator.docID()) == false) {\n              numDeletedDocs--;\n            }\n          }\n          return numDeletedDocs;\n        }\n      }\n    }\n    assert numDeletesToMerge >= 0 : \"numDeletesToMerge: \" + numDeletesToMerge;\n    assert numDeletesToMerge <= info.info.maxDoc() : \"numDeletesToMerge: \" + numDeletesToMerge + \" maxDoc:\" + info.info.maxDoc();\n    return numDeletesToMerge;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#numDeletesToMerge(SegmentCommitInfo,int,IOSupplier[CodecReader]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#numDeletesToMerge(SegmentCommitInfo,int,IOSupplier[CodecReader]).mjava","sourceNew":"  @Override\n  public int numDeletesToMerge(SegmentCommitInfo info, int delCount, IOSupplier<CodecReader> readerSupplier) throws IOException {\n    final int numDeletesToMerge = super.numDeletesToMerge(info, delCount, readerSupplier);\n    if (numDeletesToMerge != 0 && info.getSoftDelCount() > 0) {\n      final CodecReader reader = readerSupplier.get();\n      if (reader.getLiveDocs() != null) {\n        BooleanQuery.Builder builder = new BooleanQuery.Builder();\n        builder.add(new DocValuesFieldExistsQuery(field), BooleanClause.Occur.FILTER);\n        builder.add(retentionQuerySupplier.get(), BooleanClause.Occur.FILTER);\n        Scorer scorer = getScorer(builder.build(), FilterCodecReader.wrapLiveDocs(reader, null, reader.maxDoc()));\n        if (scorer != null) {\n          DocIdSetIterator iterator = scorer.iterator();\n          Bits liveDocs = reader.getLiveDocs();\n          int numDeletedDocs = reader.numDeletedDocs();\n          while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            if (liveDocs.get(iterator.docID()) == false) {\n              numDeletedDocs--;\n            }\n          }\n          return numDeletedDocs;\n        }\n      }\n    }\n    assert numDeletesToMerge >= 0 : \"numDeletesToMerge: \" + numDeletesToMerge;\n    assert numDeletesToMerge <= info.info.maxDoc() : \"numDeletesToMerge: \" + numDeletesToMerge + \" maxDoc:\" + info.info.maxDoc();\n    return numDeletesToMerge;\n  }\n\n","sourceOld":"  @Override\n  public int numDeletesToMerge(SegmentCommitInfo info, int delCount, IOSupplier<CodecReader> readerSupplier) throws IOException {\n    final int numDeletesToMerge = super.numDeletesToMerge(info, delCount, readerSupplier);\n    if (numDeletesToMerge != 0 && info.getSoftDelCount() > 0) {\n      final CodecReader reader = readerSupplier.get();\n      if (reader.getLiveDocs() != null) {\n        BooleanQuery.Builder builder = new BooleanQuery.Builder();\n        builder.add(new DocValuesFieldExistsQuery(field), BooleanClause.Occur.FILTER);\n        builder.add(retentionQuerySupplier.get(), BooleanClause.Occur.FILTER);\n        Scorer scorer = getScorer(builder.build(), wrapLiveDocs(reader, null, reader.maxDoc()));\n        if (scorer != null) {\n          DocIdSetIterator iterator = scorer.iterator();\n          Bits liveDocs = reader.getLiveDocs();\n          int numDeletedDocs = reader.numDeletedDocs();\n          while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            if (liveDocs.get(iterator.docID()) == false) {\n              numDeletedDocs--;\n            }\n          }\n          return numDeletedDocs;\n        }\n      }\n    }\n    assert numDeletesToMerge >= 0 : \"numDeletesToMerge: \" + numDeletesToMerge;\n    assert numDeletesToMerge <= info.info.maxDoc() : \"numDeletesToMerge: \" + numDeletesToMerge + \" maxDoc:\" + info.info.maxDoc();\n    return numDeletesToMerge;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#numDeletesToMerge(SegmentCommitInfo,int,IOSupplier[CodecReader]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#numDeletesToMerge(SegmentCommitInfo,int,IOSupplier[CodecReader]).mjava","sourceNew":"  @Override\n  public int numDeletesToMerge(SegmentCommitInfo info, int delCount, IOSupplier<CodecReader> readerSupplier) throws IOException {\n    final int numDeletesToMerge = super.numDeletesToMerge(info, delCount, readerSupplier);\n    if (numDeletesToMerge != 0 && info.getSoftDelCount() > 0) {\n      final CodecReader reader = readerSupplier.get();\n      if (reader.getLiveDocs() != null) {\n        BooleanQuery.Builder builder = new BooleanQuery.Builder();\n        builder.add(new DocValuesFieldExistsQuery(field), BooleanClause.Occur.FILTER);\n        builder.add(retentionQuerySupplier.get(), BooleanClause.Occur.FILTER);\n        Scorer scorer = getScorer(builder.build(), FilterCodecReader.wrapLiveDocs(reader, null, reader.maxDoc()));\n        if (scorer != null) {\n          DocIdSetIterator iterator = scorer.iterator();\n          Bits liveDocs = reader.getLiveDocs();\n          int numDeletedDocs = reader.numDeletedDocs();\n          while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            if (liveDocs.get(iterator.docID()) == false) {\n              numDeletedDocs--;\n            }\n          }\n          return numDeletedDocs;\n        }\n      }\n    }\n    assert numDeletesToMerge >= 0 : \"numDeletesToMerge: \" + numDeletesToMerge;\n    assert numDeletesToMerge <= info.info.maxDoc() : \"numDeletesToMerge: \" + numDeletesToMerge + \" maxDoc:\" + info.info.maxDoc();\n    return numDeletesToMerge;\n  }\n\n","sourceOld":"  @Override\n  public int numDeletesToMerge(SegmentCommitInfo info, int delCount, IOSupplier<CodecReader> readerSupplier) throws IOException {\n    final int numDeletesToMerge = super.numDeletesToMerge(info, delCount, readerSupplier);\n    if (numDeletesToMerge != 0 && info.getSoftDelCount() > 0) {\n      final CodecReader reader = readerSupplier.get();\n      if (reader.getLiveDocs() != null) {\n        BooleanQuery.Builder builder = new BooleanQuery.Builder();\n        builder.add(new DocValuesFieldExistsQuery(field), BooleanClause.Occur.FILTER);\n        builder.add(retentionQuerySupplier.get(), BooleanClause.Occur.FILTER);\n        Scorer scorer = getScorer(builder.build(), wrapLiveDocs(reader, null, reader.maxDoc()));\n        if (scorer != null) {\n          DocIdSetIterator iterator = scorer.iterator();\n          Bits liveDocs = reader.getLiveDocs();\n          int numDeletedDocs = reader.numDeletedDocs();\n          while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            if (liveDocs.get(iterator.docID()) == false) {\n              numDeletedDocs--;\n            }\n          }\n          return numDeletedDocs;\n        }\n      }\n    }\n    assert numDeletesToMerge >= 0 : \"numDeletesToMerge: \" + numDeletesToMerge;\n    assert numDeletesToMerge <= info.info.maxDoc() : \"numDeletesToMerge: \" + numDeletesToMerge + \" maxDoc:\" + info.info.maxDoc();\n    return numDeletesToMerge;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b70042a8a492f7054d480ccdd2be9796510d4327","c652f4c2c731f462e41a528ed4f97245915206d5"],"9ae87c7be37e537f40fa3bb2c35fa4a368d12a72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["aef2a94da918b657d107b616a643e1759db43b6a","8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"36d13f271b6649357e07f71f7e46559479f69b5b":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"c652f4c2c731f462e41a528ed4f97245915206d5":["8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"8f2203cb8ae87188877cfbf6ad170c5738a0aad5":["aef2a94da918b657d107b616a643e1759db43b6a"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9ae87c7be37e537f40fa3bb2c35fa4a368d12a72"],"aef2a94da918b657d107b616a643e1759db43b6a":["36d13f271b6649357e07f71f7e46559479f69b5b"],"f592209545c71895260367152601e9200399776d":["aef2a94da918b657d107b616a643e1759db43b6a","8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c652f4c2c731f462e41a528ed4f97245915206d5"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["f592209545c71895260367152601e9200399776d","c652f4c2c731f462e41a528ed4f97245915206d5"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"9ae87c7be37e537f40fa3bb2c35fa4a368d12a72":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"b70042a8a492f7054d480ccdd2be9796510d4327":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ae87c7be37e537f40fa3bb2c35fa4a368d12a72","43345f1452f9510f8aaadae6156fe0c834e7d957"],"36d13f271b6649357e07f71f7e46559479f69b5b":["aef2a94da918b657d107b616a643e1759db43b6a"],"c652f4c2c731f462e41a528ed4f97245915206d5":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"8f2203cb8ae87188877cfbf6ad170c5738a0aad5":["b70042a8a492f7054d480ccdd2be9796510d4327","c652f4c2c731f462e41a528ed4f97245915206d5","f592209545c71895260367152601e9200399776d"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["36d13f271b6649357e07f71f7e46559479f69b5b"],"aef2a94da918b657d107b616a643e1759db43b6a":["b70042a8a492f7054d480ccdd2be9796510d4327","8f2203cb8ae87188877cfbf6ad170c5738a0aad5","f592209545c71895260367152601e9200399776d"],"f592209545c71895260367152601e9200399776d":["7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}