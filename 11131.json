{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#saveClusterState(ClusterState).mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#saveClusterState(ClusterState).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Save clusterstate.json to {@link DistribStateManager}.\n   * @return saved state\n   */\n  private ClusterState saveClusterState(ClusterState state) throws IOException {\n    byte[] data = Utils.toJSON(state);\n    try {\n      VersionedData oldData = stateManager.getData(ZkStateReader.CLUSTER_STATE);\n      int version = oldData != null ? oldData.getVersion() : -1;\n      stateManager.setData(ZkStateReader.CLUSTER_STATE, data, version);\n      LOG.trace(\"-- saved cluster state version=\" + clusterStateVersion +\n          \", zkVersion=\" + (version + 1) + \", {}\", state);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n    return state;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4422b331d00607258b0ed3e43934306e67764aa","date":1513943901,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#saveClusterState(ClusterState).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#saveClusterState(ClusterState).mjava","sourceNew":"  /**\n   * Save clusterstate.json to {@link DistribStateManager}.\n   * @return saved state\n   */\n  private synchronized ClusterState saveClusterState(ClusterState state) throws IOException {\n    byte[] data = Utils.toJSON(state);\n    try {\n      VersionedData oldData = stateManager.getData(ZkStateReader.CLUSTER_STATE);\n      int version = oldData != null ? oldData.getVersion() : -1;\n      Assert.assertEquals(clusterStateVersion, version + 1);\n      stateManager.setData(ZkStateReader.CLUSTER_STATE, data, version);\n      clusterStateVersion++;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n    return state;\n  }\n\n","sourceOld":"  /**\n   * Save clusterstate.json to {@link DistribStateManager}.\n   * @return saved state\n   */\n  private ClusterState saveClusterState(ClusterState state) throws IOException {\n    byte[] data = Utils.toJSON(state);\n    try {\n      VersionedData oldData = stateManager.getData(ZkStateReader.CLUSTER_STATE);\n      int version = oldData != null ? oldData.getVersion() : -1;\n      stateManager.setData(ZkStateReader.CLUSTER_STATE, data, version);\n      LOG.trace(\"-- saved cluster state version=\" + clusterStateVersion +\n          \", zkVersion=\" + (version + 1) + \", {}\", state);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n    return state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc18bc8ea2e2c1e308757ff50671c774438e9f3e","date":1538052583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#saveClusterState(ClusterState).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#saveClusterState(ClusterState).mjava","sourceNew":"  /**\n   * Save clusterstate.json to {@link DistribStateManager}.\n   * @return saved state\n   */\n  private synchronized ClusterState saveClusterState(ClusterState state) throws IOException {\n    byte[] data = Utils.toJSON(state);\n    try {\n      VersionedData oldData = stateManager.getData(ZkStateReader.CLUSTER_STATE);\n      int version = oldData != null ? oldData.getVersion() : -1;\n      Assert.assertEquals(clusterStateVersion, version + 1);\n      stateManager.setData(ZkStateReader.CLUSTER_STATE, data, version);\n      log.debug(\"** saved cluster state version \" + version);\n      clusterStateVersion++;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n    return state;\n  }\n\n","sourceOld":"  /**\n   * Save clusterstate.json to {@link DistribStateManager}.\n   * @return saved state\n   */\n  private synchronized ClusterState saveClusterState(ClusterState state) throws IOException {\n    byte[] data = Utils.toJSON(state);\n    try {\n      VersionedData oldData = stateManager.getData(ZkStateReader.CLUSTER_STATE);\n      int version = oldData != null ? oldData.getVersion() : -1;\n      Assert.assertEquals(clusterStateVersion, version + 1);\n      stateManager.setData(ZkStateReader.CLUSTER_STATE, data, version);\n      clusterStateVersion++;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n    return state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8254aa20264eb7a88d556bbe0346667937ed9c2a","date":1538494545,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#saveClusterState(ClusterState).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#saveClusterState(ClusterState).mjava","sourceNew":"  /**\n   * Save clusterstate.json to {@link DistribStateManager}.\n   * @return saved state\n   */\n  private ClusterState saveClusterState(ClusterState state) throws IOException {\n    ensureNotClosed();\n    byte[] data = Utils.toJSON(state);\n    try {\n      VersionedData oldData = stateManager.getData(ZkStateReader.CLUSTER_STATE);\n      int version = oldData != null ? oldData.getVersion() : -1;\n      Assert.assertEquals(clusterStateVersion, version + 1);\n      stateManager.setData(ZkStateReader.CLUSTER_STATE, data, version);\n      log.debug(\"** saved cluster state version \" + (version + 1));\n      clusterStateVersion++;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n    return state;\n  }\n\n","sourceOld":"  /**\n   * Save clusterstate.json to {@link DistribStateManager}.\n   * @return saved state\n   */\n  private synchronized ClusterState saveClusterState(ClusterState state) throws IOException {\n    byte[] data = Utils.toJSON(state);\n    try {\n      VersionedData oldData = stateManager.getData(ZkStateReader.CLUSTER_STATE);\n      int version = oldData != null ? oldData.getVersion() : -1;\n      Assert.assertEquals(clusterStateVersion, version + 1);\n      stateManager.setData(ZkStateReader.CLUSTER_STATE, data, version);\n      log.debug(\"** saved cluster state version \" + version);\n      clusterStateVersion++;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n    return state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59506fa452342983f7cd1faf6d27274c658f3e09","date":1545397484,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#saveClusterState(ClusterState).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#saveClusterState(ClusterState).mjava","sourceNew":"  /**\n   * Save clusterstate.json to {@link DistribStateManager}.\n   * @return saved state\n   */\n  private ClusterState saveClusterState(ClusterState state) throws IOException {\n    ensureNotClosed();\n    byte[] data = Utils.toJSON(state);\n    try {\n      VersionedData oldData = stateManager.getData(ZkStateReader.CLUSTER_STATE);\n      int version = oldData != null ? oldData.getVersion() : 0;\n      Assert.assertEquals(clusterStateVersion, version);\n      stateManager.setData(ZkStateReader.CLUSTER_STATE, data, version);\n      log.debug(\"** saved cluster state version \" + (version));\n      clusterStateVersion++;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n    return state;\n  }\n\n","sourceOld":"  /**\n   * Save clusterstate.json to {@link DistribStateManager}.\n   * @return saved state\n   */\n  private ClusterState saveClusterState(ClusterState state) throws IOException {\n    ensureNotClosed();\n    byte[] data = Utils.toJSON(state);\n    try {\n      VersionedData oldData = stateManager.getData(ZkStateReader.CLUSTER_STATE);\n      int version = oldData != null ? oldData.getVersion() : -1;\n      Assert.assertEquals(clusterStateVersion, version + 1);\n      stateManager.setData(ZkStateReader.CLUSTER_STATE, data, version);\n      log.debug(\"** saved cluster state version \" + (version + 1));\n      clusterStateVersion++;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n    return state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#saveClusterState(ClusterState).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#saveClusterState(ClusterState).mjava","sourceNew":"  /**\n   * Save clusterstate.json to {@link DistribStateManager}.\n   * @return saved state\n   */\n  private ClusterState saveClusterState(ClusterState state) throws IOException {\n    ensureNotClosed();\n    byte[] data = Utils.toJSON(state);\n    try {\n      VersionedData oldData = stateManager.getData(ZkStateReader.CLUSTER_STATE);\n      int version = oldData != null ? oldData.getVersion() : 0;\n      assert clusterStateVersion == version : \"local clusterStateVersion out of sync\";\n      stateManager.setData(ZkStateReader.CLUSTER_STATE, data, version);\n      log.debug(\"** saved cluster state version \" + (version));\n      clusterStateVersion++;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n    return state;\n  }\n\n","sourceOld":"  /**\n   * Save clusterstate.json to {@link DistribStateManager}.\n   * @return saved state\n   */\n  private ClusterState saveClusterState(ClusterState state) throws IOException {\n    ensureNotClosed();\n    byte[] data = Utils.toJSON(state);\n    try {\n      VersionedData oldData = stateManager.getData(ZkStateReader.CLUSTER_STATE);\n      int version = oldData != null ? oldData.getVersion() : 0;\n      Assert.assertEquals(clusterStateVersion, version);\n      stateManager.setData(ZkStateReader.CLUSTER_STATE, data, version);\n      log.debug(\"** saved cluster state version \" + (version));\n      clusterStateVersion++;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n    return state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["a4422b331d00607258b0ed3e43934306e67764aa"],"8254aa20264eb7a88d556bbe0346667937ed9c2a":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a4422b331d00607258b0ed3e43934306e67764aa":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["59506fa452342983f7cd1faf6d27274c658f3e09"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"59506fa452342983f7cd1faf6d27274c658f3e09":["8254aa20264eb7a88d556bbe0346667937ed9c2a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"]},"commit2Childs":{"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["8254aa20264eb7a88d556bbe0346667937ed9c2a"],"8254aa20264eb7a88d556bbe0346667937ed9c2a":["59506fa452342983f7cd1faf6d27274c658f3e09"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a4422b331d00607258b0ed3e43934306e67764aa":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a4422b331d00607258b0ed3e43934306e67764aa"],"59506fa452342983f7cd1faf6d27274c658f3e09":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}