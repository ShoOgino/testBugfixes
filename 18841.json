{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer#createComponents(String,Reader).mjava","commits":[{"id":"ddc5fbfd4c64963aba52713a4496522540294d69","date":1262508497,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer#createComponents(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer#tokenStream(String,Reader).mjava","sourceNew":"    /**\n     * Creates {@link TokenStreamComponents} used to tokenize all the text in the \n     * provided {@link Reader}.\n     *\n     * @return {@link TokenStreamComponents} built from a \n     *   {@link RussianLetterTokenizer} filtered with \n     *   {@link LowerCaseFilter}, {@link StopFilter}, \n     *   and {@link RussianStemFilter}\n     */\n    @Override\n    protected TokenStreamComponents createComponents(String fieldName,\n        Reader reader) {\n      final Tokenizer source = new RussianLetterTokenizer(reader);\n      TokenStream result = new LowerCaseFilter(matchVersion, source);\n      result = new StopFilter(matchVersion, result, stopwords);\n      return new TokenStreamComponents(source, new RussianStemFilter(result));\n      \n    }\n\n","sourceOld":"    /**\n     * Creates a {@link TokenStream} which tokenizes all the text in the \n     * provided {@link Reader}.\n     *\n     * @return  A {@link TokenStream} built from a \n     *   {@link RussianLetterTokenizer} filtered with \n     *   {@link LowerCaseFilter}, {@link StopFilter}, \n     *   and {@link RussianStemFilter}\n     */\n    @Override\n    public TokenStream tokenStream(String fieldName, Reader reader)\n    {\n        TokenStream result = new RussianLetterTokenizer(reader);\n        result = new LowerCaseFilter(matchVersion, result);\n        result = new StopFilter(matchVersion, result, stopSet);\n        result = new RussianStemFilter(result);\n        return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9fc748b8fc4097ccc222bdf2948cc2d20770c54","date":1264591145,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer#createComponents(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer#createComponents(String,Reader).mjava","sourceNew":"    /**\n     * Creates {@link TokenStreamComponents} used to tokenize all the text in the \n     * provided {@link Reader}.\n     *\n     * @return {@link TokenStreamComponents} built from a \n     *   {@link RussianLetterTokenizer} filtered with \n     *   {@link LowerCaseFilter}, {@link StopFilter}, \n     *   and {@link RussianStemFilter}\n     */\n    @Override\n    protected TokenStreamComponents createComponents(String fieldName,\n        Reader reader) {\n      final Tokenizer source = new RussianLetterTokenizer(reader);\n      TokenStream result = new LowerCaseFilter(matchVersion, source);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!stemExclusionSet.isEmpty())\n        result = new KeywordMarkerTokenFilter(result, stemExclusionSet);\n      return new TokenStreamComponents(source, new RussianStemFilter(result));\n      \n    }\n\n","sourceOld":"    /**\n     * Creates {@link TokenStreamComponents} used to tokenize all the text in the \n     * provided {@link Reader}.\n     *\n     * @return {@link TokenStreamComponents} built from a \n     *   {@link RussianLetterTokenizer} filtered with \n     *   {@link LowerCaseFilter}, {@link StopFilter}, \n     *   and {@link RussianStemFilter}\n     */\n    @Override\n    protected TokenStreamComponents createComponents(String fieldName,\n        Reader reader) {\n      final Tokenizer source = new RussianLetterTokenizer(reader);\n      TokenStream result = new LowerCaseFilter(matchVersion, source);\n      result = new StopFilter(matchVersion, result, stopwords);\n      return new TokenStreamComponents(source, new RussianStemFilter(result));\n      \n    }\n\n","bugFix":null,"bugIntro":["c2877c077c0dc229ee9871dc196b2a62442df599"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85722042902595d9b0fbf38b7b57b139bdc12e4b","date":1264953677,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer#createComponents(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer#createComponents(String,Reader).mjava","sourceNew":"    /**\n     * Creates {@link TokenStreamComponents} used to tokenize all the text in the \n     * provided {@link Reader}.\n     *\n     * @return {@link TokenStreamComponents} built from a \n     *   {@link RussianLetterTokenizer} filtered with \n     *   {@link LowerCaseFilter}, {@link StopFilter}, \n     *   and {@link RussianStemFilter}\n     */\n    @Override\n    protected TokenStreamComponents createComponents(String fieldName,\n        Reader reader) {\n      final Tokenizer source = new RussianLetterTokenizer(matchVersion, reader);\n      TokenStream result = new LowerCaseFilter(matchVersion, source);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!stemExclusionSet.isEmpty())\n        result = new KeywordMarkerTokenFilter(result, stemExclusionSet);\n      return new TokenStreamComponents(source, new RussianStemFilter(result));\n      \n    }\n\n","sourceOld":"    /**\n     * Creates {@link TokenStreamComponents} used to tokenize all the text in the \n     * provided {@link Reader}.\n     *\n     * @return {@link TokenStreamComponents} built from a \n     *   {@link RussianLetterTokenizer} filtered with \n     *   {@link LowerCaseFilter}, {@link StopFilter}, \n     *   and {@link RussianStemFilter}\n     */\n    @Override\n    protected TokenStreamComponents createComponents(String fieldName,\n        Reader reader) {\n      final Tokenizer source = new RussianLetterTokenizer(reader);\n      TokenStream result = new LowerCaseFilter(matchVersion, source);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!stemExclusionSet.isEmpty())\n        result = new KeywordMarkerTokenFilter(result, stemExclusionSet);\n      return new TokenStreamComponents(source, new RussianStemFilter(result));\n      \n    }\n\n","bugFix":null,"bugIntro":["c2877c077c0dc229ee9871dc196b2a62442df599"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c2877c077c0dc229ee9871dc196b2a62442df599","date":1265411146,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer#createComponents(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer#createComponents(String,Reader).mjava","sourceNew":"    /**\n     * Creates {@link TokenStreamComponents} used to tokenize all the text in the \n     * provided {@link Reader}.\n     *\n     * @return {@link TokenStreamComponents} built from a \n     *   {@link StandardTokenizer} filtered with {@link StandardFilter},\n     *   {@link LowerCaseFilter}, {@link StopFilter}, \n     *   {@link KeywordMarkerTokenFilter} if a stem exclusion set is provided,\n     *   and {@link SnowballFilter}\n     */\n    @Override\n    protected TokenStreamComponents createComponents(String fieldName,\n        Reader reader) {\n      if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n        final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n        TokenStream result = new StandardFilter(source);\n        result = new LowerCaseFilter(matchVersion, result);\n        result = new StopFilter(matchVersion, result, stopwords);\n        if (!stemExclusionSet.isEmpty()) result = new KeywordMarkerTokenFilter(\n            result, stemExclusionSet);\n        result = new SnowballFilter(result, new org.tartarus.snowball.ext.RussianStemmer());\n        return new TokenStreamComponents(source, result);\n      } else {\n        final Tokenizer source = new RussianLetterTokenizer(matchVersion, reader);\n        TokenStream result = new LowerCaseFilter(matchVersion, source);\n        result = new StopFilter(matchVersion, result, stopwords);\n        if (!stemExclusionSet.isEmpty()) result = new KeywordMarkerTokenFilter(\n          result, stemExclusionSet);\n        return new TokenStreamComponents(source, new RussianStemFilter(result));\n      }\n    }\n\n","sourceOld":"    /**\n     * Creates {@link TokenStreamComponents} used to tokenize all the text in the \n     * provided {@link Reader}.\n     *\n     * @return {@link TokenStreamComponents} built from a \n     *   {@link RussianLetterTokenizer} filtered with \n     *   {@link LowerCaseFilter}, {@link StopFilter}, \n     *   and {@link RussianStemFilter}\n     */\n    @Override\n    protected TokenStreamComponents createComponents(String fieldName,\n        Reader reader) {\n      final Tokenizer source = new RussianLetterTokenizer(matchVersion, reader);\n      TokenStream result = new LowerCaseFilter(matchVersion, source);\n      result = new StopFilter(matchVersion, result, stopwords);\n      if(!stemExclusionSet.isEmpty())\n        result = new KeywordMarkerTokenFilter(result, stemExclusionSet);\n      return new TokenStreamComponents(source, new RussianStemFilter(result));\n      \n    }\n\n","bugFix":["b9fc748b8fc4097ccc222bdf2948cc2d20770c54","85722042902595d9b0fbf38b7b57b139bdc12e4b","ddc5fbfd4c64963aba52713a4496522540294d69"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer#createComponents(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link StopFilter}\n   *         , {@link KeywordMarkerTokenFilter} if a stem exclusion set is\n   *         provided, and {@link SnowballFilter}\n   */\n    @Override\n    protected TokenStreamComponents createComponents(String fieldName,\n        Reader reader) {\n      if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n        final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n        TokenStream result = new StandardFilter(source);\n        result = new LowerCaseFilter(matchVersion, result);\n        result = new StopFilter(matchVersion, result, stopwords);\n        if (!stemExclusionSet.isEmpty()) result = new KeywordMarkerTokenFilter(\n            result, stemExclusionSet);\n        result = new SnowballFilter(result, new org.tartarus.snowball.ext.RussianStemmer());\n        return new TokenStreamComponents(source, result);\n      } else {\n        final Tokenizer source = new RussianLetterTokenizer(matchVersion, reader);\n        TokenStream result = new LowerCaseFilter(matchVersion, source);\n        result = new StopFilter(matchVersion, result, stopwords);\n        if (!stemExclusionSet.isEmpty()) result = new KeywordMarkerTokenFilter(\n          result, stemExclusionSet);\n        return new TokenStreamComponents(source, new RussianStemFilter(result));\n      }\n    }\n\n","sourceOld":"    /**\n     * Creates {@link TokenStreamComponents} used to tokenize all the text in the \n     * provided {@link Reader}.\n     *\n     * @return {@link TokenStreamComponents} built from a \n     *   {@link StandardTokenizer} filtered with {@link StandardFilter},\n     *   {@link LowerCaseFilter}, {@link StopFilter}, \n     *   {@link KeywordMarkerTokenFilter} if a stem exclusion set is provided,\n     *   and {@link SnowballFilter}\n     */\n    @Override\n    protected TokenStreamComponents createComponents(String fieldName,\n        Reader reader) {\n      if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n        final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n        TokenStream result = new StandardFilter(source);\n        result = new LowerCaseFilter(matchVersion, result);\n        result = new StopFilter(matchVersion, result, stopwords);\n        if (!stemExclusionSet.isEmpty()) result = new KeywordMarkerTokenFilter(\n            result, stemExclusionSet);\n        result = new SnowballFilter(result, new org.tartarus.snowball.ext.RussianStemmer());\n        return new TokenStreamComponents(source, result);\n      } else {\n        final Tokenizer source = new RussianLetterTokenizer(matchVersion, reader);\n        TokenStream result = new LowerCaseFilter(matchVersion, source);\n        result = new StopFilter(matchVersion, result, stopwords);\n        if (!stemExclusionSet.isEmpty()) result = new KeywordMarkerTokenFilter(\n          result, stemExclusionSet);\n        return new TokenStreamComponents(source, new RussianStemFilter(result));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer#createComponents(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link StopFilter}\n   *         , {@link KeywordMarkerTokenFilter} if a stem exclusion set is\n   *         provided, and {@link SnowballFilter}\n   */\n    @Override\n    protected TokenStreamComponents createComponents(String fieldName,\n        Reader reader) {\n      if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n        final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n        TokenStream result = new StandardFilter(source);\n        result = new LowerCaseFilter(matchVersion, result);\n        result = new StopFilter(matchVersion, result, stopwords);\n        if (!stemExclusionSet.isEmpty()) result = new KeywordMarkerTokenFilter(\n            result, stemExclusionSet);\n        result = new SnowballFilter(result, new org.tartarus.snowball.ext.RussianStemmer());\n        return new TokenStreamComponents(source, result);\n      } else {\n        final Tokenizer source = new RussianLetterTokenizer(matchVersion, reader);\n        TokenStream result = new LowerCaseFilter(matchVersion, source);\n        result = new StopFilter(matchVersion, result, stopwords);\n        if (!stemExclusionSet.isEmpty()) result = new KeywordMarkerTokenFilter(\n          result, stemExclusionSet);\n        return new TokenStreamComponents(source, new RussianStemFilter(result));\n      }\n    }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link StopFilter}\n   *         , {@link KeywordMarkerTokenFilter} if a stem exclusion set is\n   *         provided, and {@link SnowballFilter}\n   */\n    @Override\n    protected TokenStreamComponents createComponents(String fieldName,\n        Reader reader) {\n      if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n        final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n        TokenStream result = new StandardFilter(source);\n        result = new LowerCaseFilter(matchVersion, result);\n        result = new StopFilter(matchVersion, result, stopwords);\n        if (!stemExclusionSet.isEmpty()) result = new KeywordMarkerTokenFilter(\n            result, stemExclusionSet);\n        result = new SnowballFilter(result, new org.tartarus.snowball.ext.RussianStemmer());\n        return new TokenStreamComponents(source, result);\n      } else {\n        final Tokenizer source = new RussianLetterTokenizer(matchVersion, reader);\n        TokenStream result = new LowerCaseFilter(matchVersion, source);\n        result = new StopFilter(matchVersion, result, stopwords);\n        if (!stemExclusionSet.isEmpty()) result = new KeywordMarkerTokenFilter(\n          result, stemExclusionSet);\n        return new TokenStreamComponents(source, new RussianStemFilter(result));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2877c077c0dc229ee9871dc196b2a62442df599":["85722042902595d9b0fbf38b7b57b139bdc12e4b"],"b9fc748b8fc4097ccc222bdf2948cc2d20770c54":["ddc5fbfd4c64963aba52713a4496522540294d69"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ddc5fbfd4c64963aba52713a4496522540294d69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["c2877c077c0dc229ee9871dc196b2a62442df599"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"85722042902595d9b0fbf38b7b57b139bdc12e4b":["b9fc748b8fc4097ccc222bdf2948cc2d20770c54"]},"commit2Childs":{"c2877c077c0dc229ee9871dc196b2a62442df599":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"b9fc748b8fc4097ccc222bdf2948cc2d20770c54":["85722042902595d9b0fbf38b7b57b139bdc12e4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ddc5fbfd4c64963aba52713a4496522540294d69"],"ddc5fbfd4c64963aba52713a4496522540294d69":["b9fc748b8fc4097ccc222bdf2948cc2d20770c54"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"85722042902595d9b0fbf38b7b57b139bdc12e4b":["c2877c077c0dc229ee9871dc196b2a62442df599"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}