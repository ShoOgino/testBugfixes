{"path":"lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery#doTestRandomBinary(int).mjava","commits":[{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery#doTestRandomBinary(int).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestRandomBinary(int count) throws Exception {\n    int numValues = TestUtil.nextInt(random(), count, count*2);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDims = TestUtil.nextInt(random(), 1, 5);\n\n    int sameValuePct = random().nextInt(100);\n\n    byte[][][] docValues = new byte[numValues][][];\n\n    boolean singleValued = random().nextBoolean();\n    int[] ids = new int[numValues];\n\n    int id = 0;\n    for(int ord=0;ord<numValues;ord++) {\n      if (ord > 0 && random().nextInt(100) < sameValuePct) {\n        // Identical to old value\n        docValues[ord] = docValues[random().nextInt(ord)];\n      } else {\n        // Make a new random value\n        byte[][] values = new byte[numDims][];\n        for(int dim=0;dim<numDims;dim++) {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n        }\n        docValues[ord] = values;\n      }\n      ids[ord] = id;\n      if (singleValued || random().nextInt(2) == 1) {\n        id++;\n      }\n    }\n\n    verifyBinary(docValues, ids, numBytesPerDim);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery#doTestRandomBinary(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery#doTestRandomBinary(int).mjava","sourceNew":"  private void doTestRandomBinary(int count) throws Exception {\n    int numValues = TestUtil.nextInt(random(), count, count*2);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, DimensionalValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, DimensionalValues.MAX_DIMENSIONS);\n\n    int sameValuePct = random().nextInt(100);\n\n    byte[][][] docValues = new byte[numValues][][];\n\n    boolean singleValued = random().nextBoolean();\n    int[] ids = new int[numValues];\n\n    int id = 0;\n    for(int ord=0;ord<numValues;ord++) {\n      if (ord > 0 && random().nextInt(100) < sameValuePct) {\n        // Identical to old value\n        docValues[ord] = docValues[random().nextInt(ord)];\n      } else {\n        // Make a new random value\n        byte[][] values = new byte[numDims][];\n        for(int dim=0;dim<numDims;dim++) {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n        }\n        docValues[ord] = values;\n      }\n      ids[ord] = id;\n      if (singleValued || random().nextInt(2) == 1) {\n        id++;\n      }\n    }\n\n    verifyBinary(docValues, ids, numBytesPerDim);\n  }\n\n","sourceOld":"  private void doTestRandomBinary(int count) throws Exception {\n    int numValues = TestUtil.nextInt(random(), count, count*2);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDims = TestUtil.nextInt(random(), 1, 5);\n\n    int sameValuePct = random().nextInt(100);\n\n    byte[][][] docValues = new byte[numValues][][];\n\n    boolean singleValued = random().nextBoolean();\n    int[] ids = new int[numValues];\n\n    int id = 0;\n    for(int ord=0;ord<numValues;ord++) {\n      if (ord > 0 && random().nextInt(100) < sameValuePct) {\n        // Identical to old value\n        docValues[ord] = docValues[random().nextInt(ord)];\n      } else {\n        // Make a new random value\n        byte[][] values = new byte[numDims][];\n        for(int dim=0;dim<numDims;dim++) {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n        }\n        docValues[ord] = values;\n      }\n      ids[ord] = id;\n      if (singleValued || random().nextInt(2) == 1) {\n        id++;\n      }\n    }\n\n    verifyBinary(docValues, ids, numBytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#doTestRandomBinary(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery#doTestRandomBinary(int).mjava","sourceNew":"  private void doTestRandomBinary(int count) throws Exception {\n    int numValues = TestUtil.nextInt(random(), count, count*2);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    int sameValuePct = random().nextInt(100);\n\n    byte[][][] docValues = new byte[numValues][][];\n\n    boolean singleValued = random().nextBoolean();\n    int[] ids = new int[numValues];\n\n    int id = 0;\n    for(int ord=0;ord<numValues;ord++) {\n      if (ord > 0 && random().nextInt(100) < sameValuePct) {\n        // Identical to old value\n        docValues[ord] = docValues[random().nextInt(ord)];\n      } else {\n        // Make a new random value\n        byte[][] values = new byte[numDims][];\n        for(int dim=0;dim<numDims;dim++) {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n        }\n        docValues[ord] = values;\n      }\n      ids[ord] = id;\n      if (singleValued || random().nextInt(2) == 1) {\n        id++;\n      }\n    }\n\n    verifyBinary(docValues, ids, numBytesPerDim);\n  }\n\n","sourceOld":"  private void doTestRandomBinary(int count) throws Exception {\n    int numValues = TestUtil.nextInt(random(), count, count*2);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, DimensionalValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, DimensionalValues.MAX_DIMENSIONS);\n\n    int sameValuePct = random().nextInt(100);\n\n    byte[][][] docValues = new byte[numValues][][];\n\n    boolean singleValued = random().nextBoolean();\n    int[] ids = new int[numValues];\n\n    int id = 0;\n    for(int ord=0;ord<numValues;ord++) {\n      if (ord > 0 && random().nextInt(100) < sameValuePct) {\n        // Identical to old value\n        docValues[ord] = docValues[random().nextInt(ord)];\n      } else {\n        // Make a new random value\n        byte[][] values = new byte[numDims][];\n        for(int dim=0;dim<numDims;dim++) {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n        }\n        docValues[ord] = values;\n      }\n      ids[ord] = id;\n      if (singleValued || random().nextInt(2) == 1) {\n        id++;\n      }\n    }\n\n    verifyBinary(docValues, ids, numBytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["770342641f7b505eaa8dccdc666158bff2419109"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"770342641f7b505eaa8dccdc666158bff2419109":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["770342641f7b505eaa8dccdc666158bff2419109"],"770342641f7b505eaa8dccdc666158bff2419109":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}