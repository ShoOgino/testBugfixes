{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#testNRTThreads().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#testNRTThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#testNRTThreads().mjava","sourceNew":"  @Override @Nightly\n  public void testNRTThreads() throws Exception {\n    String vendor = Constants.JAVA_VENDOR;\n    assumeTrue(vendor + \" JRE not supported.\", \n        vendor.startsWith(\"Oracle\") || vendor.startsWith(\"Sun\") || vendor.startsWith(\"Apple\"));\n    \n    // if we are not the fork\n    if (System.getProperty(\"tests.crashmode\") == null) {\n      // try up to 10 times to create an index\n      for (int i = 0; i < 10; i++) {\n        forkTest();\n        // if we succeeded in finding an index, we are done.\n        if (checkIndexes(tempDir))\n          return;\n      }\n    } else {\n      // we are the fork, setup a crashing thread\n      final int crashTime = _TestUtil.nextInt(random, 3000, 4000);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          try {\n            Thread.sleep(crashTime);\n          } catch (InterruptedException e) {}\n          crashJRE();\n        }\n      };\n      t.setPriority(Thread.MAX_PRIORITY);\n      t.start();\n      // run the test until we crash.\n      for (int i = 0; i < 1000; i++) {\n        super.testNRTThreads();\n      }\n    }\n  }\n\n","sourceOld":"  @Override @Nightly\n  public void testNRTThreads() throws Exception {\n    String vendor = Constants.JAVA_VENDOR;\n    assumeTrue(vendor + \" JRE not supported.\", \n        vendor.startsWith(\"Oracle\") || vendor.startsWith(\"Sun\") || vendor.startsWith(\"Apple\"));\n    \n    // if we are not the fork\n    if (System.getProperty(\"tests.crashmode\") == null) {\n      // try up to 10 times to create an index\n      for (int i = 0; i < 10; i++) {\n        forkTest();\n        // if we succeeded in finding an index, we are done.\n        if (checkIndexes(tempDir))\n          return;\n      }\n    } else {\n      // we are the fork, setup a crashing thread\n      final int crashTime = _TestUtil.nextInt(random, 3000, 4000);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          try {\n            Thread.sleep(crashTime);\n          } catch (InterruptedException e) {}\n          crashJRE();\n        }\n      };\n      t.setPriority(Thread.MAX_PRIORITY);\n      t.start();\n      // run the test until we crash.\n      for (int i = 0; i < 1000; i++) {\n        super.testNRTThreads();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#testNRTThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#testNRTThreads().mjava","sourceNew":"  @Override @Nightly\n  public void testNRTThreads() throws Exception {\n    String vendor = Constants.JAVA_VENDOR;\n    assumeTrue(vendor + \" JRE not supported.\", \n        vendor.startsWith(\"Oracle\") || vendor.startsWith(\"Sun\") || vendor.startsWith(\"Apple\"));\n    \n    // if we are not the fork\n    if (System.getProperty(\"tests.crashmode\") == null) {\n      // try up to 10 times to create an index\n      for (int i = 0; i < 10; i++) {\n        forkTest();\n        // if we succeeded in finding an index, we are done.\n        if (checkIndexes(tempDir))\n          return;\n      }\n    } else {\n      // we are the fork, setup a crashing thread\n      final int crashTime = _TestUtil.nextInt(random(), 3000, 4000);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          try {\n            Thread.sleep(crashTime);\n          } catch (InterruptedException e) {}\n          crashJRE();\n        }\n      };\n      t.setPriority(Thread.MAX_PRIORITY);\n      t.start();\n      // run the test until we crash.\n      for (int i = 0; i < 1000; i++) {\n        super.testNRTThreads();\n      }\n    }\n  }\n\n","sourceOld":"  @Override @Nightly\n  public void testNRTThreads() throws Exception {\n    String vendor = Constants.JAVA_VENDOR;\n    assumeTrue(vendor + \" JRE not supported.\", \n        vendor.startsWith(\"Oracle\") || vendor.startsWith(\"Sun\") || vendor.startsWith(\"Apple\"));\n    \n    // if we are not the fork\n    if (System.getProperty(\"tests.crashmode\") == null) {\n      // try up to 10 times to create an index\n      for (int i = 0; i < 10; i++) {\n        forkTest();\n        // if we succeeded in finding an index, we are done.\n        if (checkIndexes(tempDir))\n          return;\n      }\n    } else {\n      // we are the fork, setup a crashing thread\n      final int crashTime = _TestUtil.nextInt(random, 3000, 4000);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          try {\n            Thread.sleep(crashTime);\n          } catch (InterruptedException e) {}\n          crashJRE();\n        }\n      };\n      t.setPriority(Thread.MAX_PRIORITY);\n      t.start();\n      // run the test until we crash.\n      for (int i = 0; i < 1000; i++) {\n        super.testNRTThreads();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d11511972fc8d4558c377d96ae9140cad10b67d","date":1334602989,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#testNRTThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#testNRTThreads().mjava","sourceNew":"  @Override @Nightly\n  public void testNRTThreads() throws Exception {\n    String vendor = Constants.JAVA_VENDOR;\n    assumeTrue(vendor + \" JRE not supported.\", \n        vendor.startsWith(\"Oracle\") || vendor.startsWith(\"Sun\") || vendor.startsWith(\"Apple\"));\n    \n    // if we are not the fork\n    if (System.getProperty(\"tests.crashmode\") == null) {\n      // try up to 10 times to create an index\n      for (int i = 0; i < 10; i++) {\n        forkTest();\n        // if we succeeded in finding an index, we are done.\n        if (checkIndexes(tempDir))\n          return;\n      }\n    } else {\n      // TODO: the non-fork code could simply enable impersonation?\n      assumeFalse(\"does not support PreFlex, see LUCENE-3992\", \n          Codec.getDefault().getName().equals(\"Lucene3x\"));\n      // we are the fork, setup a crashing thread\n      final int crashTime = _TestUtil.nextInt(random(), 3000, 4000);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          try {\n            Thread.sleep(crashTime);\n          } catch (InterruptedException e) {}\n          crashJRE();\n        }\n      };\n      t.setPriority(Thread.MAX_PRIORITY);\n      t.start();\n      // run the test until we crash.\n      for (int i = 0; i < 1000; i++) {\n        super.testNRTThreads();\n      }\n    }\n  }\n\n","sourceOld":"  @Override @Nightly\n  public void testNRTThreads() throws Exception {\n    String vendor = Constants.JAVA_VENDOR;\n    assumeTrue(vendor + \" JRE not supported.\", \n        vendor.startsWith(\"Oracle\") || vendor.startsWith(\"Sun\") || vendor.startsWith(\"Apple\"));\n    \n    // if we are not the fork\n    if (System.getProperty(\"tests.crashmode\") == null) {\n      // try up to 10 times to create an index\n      for (int i = 0; i < 10; i++) {\n        forkTest();\n        // if we succeeded in finding an index, we are done.\n        if (checkIndexes(tempDir))\n          return;\n      }\n    } else {\n      // we are the fork, setup a crashing thread\n      final int crashTime = _TestUtil.nextInt(random(), 3000, 4000);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          try {\n            Thread.sleep(crashTime);\n          } catch (InterruptedException e) {}\n          crashJRE();\n        }\n      };\n      t.setPriority(Thread.MAX_PRIORITY);\n      t.start();\n      // run the test until we crash.\n      for (int i = 0; i < 1000; i++) {\n        super.testNRTThreads();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#testNRTThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#testNRTThreads().mjava","sourceNew":"  @Override @Nightly\n  public void testNRTThreads() throws Exception {\n    String vendor = Constants.JAVA_VENDOR;\n    assumeTrue(vendor + \" JRE not supported.\", \n        vendor.startsWith(\"Oracle\") || vendor.startsWith(\"Sun\") || vendor.startsWith(\"Apple\"));\n    \n    // if we are not the fork\n    if (System.getProperty(\"tests.crashmode\") == null) {\n      // try up to 10 times to create an index\n      for (int i = 0; i < 10; i++) {\n        forkTest();\n        // if we succeeded in finding an index, we are done.\n        if (checkIndexes(tempDir))\n          return;\n      }\n    } else {\n      // note: re-enable this if we create a 4.x impersonator,\n      // and if its format is actually different than the real 4.x (unlikely)\n      // TODO: the non-fork code could simply enable impersonation?\n      // assumeFalse(\"does not support PreFlex, see LUCENE-3992\", \n      //    Codec.getDefault().getName().equals(\"Lucene4x\"));\n      \n      // we are the fork, setup a crashing thread\n      final int crashTime = _TestUtil.nextInt(random(), 3000, 4000);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          try {\n            Thread.sleep(crashTime);\n          } catch (InterruptedException e) {}\n          crashJRE();\n        }\n      };\n      t.setPriority(Thread.MAX_PRIORITY);\n      t.start();\n      // run the test until we crash.\n      for (int i = 0; i < 1000; i++) {\n        super.testNRTThreads();\n      }\n    }\n  }\n\n","sourceOld":"  @Override @Nightly\n  public void testNRTThreads() throws Exception {\n    String vendor = Constants.JAVA_VENDOR;\n    assumeTrue(vendor + \" JRE not supported.\", \n        vendor.startsWith(\"Oracle\") || vendor.startsWith(\"Sun\") || vendor.startsWith(\"Apple\"));\n    \n    // if we are not the fork\n    if (System.getProperty(\"tests.crashmode\") == null) {\n      // try up to 10 times to create an index\n      for (int i = 0; i < 10; i++) {\n        forkTest();\n        // if we succeeded in finding an index, we are done.\n        if (checkIndexes(tempDir))\n          return;\n      }\n    } else {\n      // TODO: the non-fork code could simply enable impersonation?\n      assumeFalse(\"does not support PreFlex, see LUCENE-3992\", \n          Codec.getDefault().getName().equals(\"Lucene3x\"));\n      // we are the fork, setup a crashing thread\n      final int crashTime = _TestUtil.nextInt(random(), 3000, 4000);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          try {\n            Thread.sleep(crashTime);\n          } catch (InterruptedException e) {}\n          crashJRE();\n        }\n      };\n      t.setPriority(Thread.MAX_PRIORITY);\n      t.start();\n      // run the test until we crash.\n      for (int i = 0; i < 1000; i++) {\n        super.testNRTThreads();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db62e3d5cd46d053fa0b9ac863a5a6dbe1c9498b","date":1368612521,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#testNRTThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#testNRTThreads().mjava","sourceNew":"  @Override @Nightly\n  public void testNRTThreads() throws Exception {\n    // if we are not the fork\n    if (System.getProperty(\"tests.crashmode\") == null) {\n      // try up to 10 times to create an index\n      for (int i = 0; i < 10; i++) {\n        forkTest();\n        // if we succeeded in finding an index, we are done.\n        if (checkIndexes(tempDir))\n          return;\n      }\n    } else {\n      // note: re-enable this if we create a 4.x impersonator,\n      // and if its format is actually different than the real 4.x (unlikely)\n      // TODO: the non-fork code could simply enable impersonation?\n      // assumeFalse(\"does not support PreFlex, see LUCENE-3992\", \n      //    Codec.getDefault().getName().equals(\"Lucene4x\"));\n      \n      // we are the fork, setup a crashing thread\n      final int crashTime = _TestUtil.nextInt(random(), 3000, 4000);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          try {\n            Thread.sleep(crashTime);\n          } catch (InterruptedException e) {}\n          crashJRE();\n        }\n      };\n      t.setPriority(Thread.MAX_PRIORITY);\n      t.start();\n      // run the test until we crash.\n      for (int i = 0; i < 1000; i++) {\n        super.testNRTThreads();\n      }\n    }\n  }\n\n","sourceOld":"  @Override @Nightly\n  public void testNRTThreads() throws Exception {\n    String vendor = Constants.JAVA_VENDOR;\n    assumeTrue(vendor + \" JRE not supported.\", \n        vendor.startsWith(\"Oracle\") || vendor.startsWith(\"Sun\") || vendor.startsWith(\"Apple\"));\n    \n    // if we are not the fork\n    if (System.getProperty(\"tests.crashmode\") == null) {\n      // try up to 10 times to create an index\n      for (int i = 0; i < 10; i++) {\n        forkTest();\n        // if we succeeded in finding an index, we are done.\n        if (checkIndexes(tempDir))\n          return;\n      }\n    } else {\n      // note: re-enable this if we create a 4.x impersonator,\n      // and if its format is actually different than the real 4.x (unlikely)\n      // TODO: the non-fork code could simply enable impersonation?\n      // assumeFalse(\"does not support PreFlex, see LUCENE-3992\", \n      //    Codec.getDefault().getName().equals(\"Lucene4x\"));\n      \n      // we are the fork, setup a crashing thread\n      final int crashTime = _TestUtil.nextInt(random(), 3000, 4000);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          try {\n            Thread.sleep(crashTime);\n          } catch (InterruptedException e) {}\n          crashJRE();\n        }\n      };\n      t.setPriority(Thread.MAX_PRIORITY);\n      t.start();\n      // run the test until we crash.\n      for (int i = 0; i < 1000; i++) {\n        super.testNRTThreads();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#testNRTThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#testNRTThreads().mjava","sourceNew":"  @Override @Nightly\n  public void testNRTThreads() throws Exception {\n    // if we are not the fork\n    if (System.getProperty(\"tests.crashmode\") == null) {\n      // try up to 10 times to create an index\n      for (int i = 0; i < 10; i++) {\n        forkTest();\n        // if we succeeded in finding an index, we are done.\n        if (checkIndexes(tempDir))\n          return;\n      }\n    } else {\n      // note: re-enable this if we create a 4.x impersonator,\n      // and if its format is actually different than the real 4.x (unlikely)\n      // TODO: the non-fork code could simply enable impersonation?\n      // assumeFalse(\"does not support PreFlex, see LUCENE-3992\", \n      //    Codec.getDefault().getName().equals(\"Lucene4x\"));\n      \n      // we are the fork, setup a crashing thread\n      final int crashTime = TestUtil.nextInt(random(), 3000, 4000);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          try {\n            Thread.sleep(crashTime);\n          } catch (InterruptedException e) {}\n          crashJRE();\n        }\n      };\n      t.setPriority(Thread.MAX_PRIORITY);\n      t.start();\n      // run the test until we crash.\n      for (int i = 0; i < 1000; i++) {\n        super.testNRTThreads();\n      }\n    }\n  }\n\n","sourceOld":"  @Override @Nightly\n  public void testNRTThreads() throws Exception {\n    // if we are not the fork\n    if (System.getProperty(\"tests.crashmode\") == null) {\n      // try up to 10 times to create an index\n      for (int i = 0; i < 10; i++) {\n        forkTest();\n        // if we succeeded in finding an index, we are done.\n        if (checkIndexes(tempDir))\n          return;\n      }\n    } else {\n      // note: re-enable this if we create a 4.x impersonator,\n      // and if its format is actually different than the real 4.x (unlikely)\n      // TODO: the non-fork code could simply enable impersonation?\n      // assumeFalse(\"does not support PreFlex, see LUCENE-3992\", \n      //    Codec.getDefault().getName().equals(\"Lucene4x\"));\n      \n      // we are the fork, setup a crashing thread\n      final int crashTime = _TestUtil.nextInt(random(), 3000, 4000);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          try {\n            Thread.sleep(crashTime);\n          } catch (InterruptedException e) {}\n          crashJRE();\n        }\n      };\n      t.setPriority(Thread.MAX_PRIORITY);\n      t.start();\n      // run the test until we crash.\n      for (int i = 0; i < 1000; i++) {\n        super.testNRTThreads();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["9d11511972fc8d4558c377d96ae9140cad10b67d"],"db62e3d5cd46d053fa0b9ac863a5a6dbe1c9498b":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"6613659748fe4411a7dcf85266e55db1f95f7315":["db62e3d5cd46d053fa0b9ac863a5a6dbe1c9498b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d11511972fc8d4558c377d96ae9140cad10b67d":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6613659748fe4411a7dcf85266e55db1f95f7315"]},"commit2Childs":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["db62e3d5cd46d053fa0b9ac863a5a6dbe1c9498b"],"db62e3d5cd46d053fa0b9ac863a5a6dbe1c9498b":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9d11511972fc8d4558c377d96ae9140cad10b67d":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["9d11511972fc8d4558c377d96ae9140cad10b67d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}