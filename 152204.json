{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#assertDoubles(String,Object,Object).mjava","commits":[{"id":"4c18a95e9168a30be855f5d5e7d61a863186fdc5","date":1415142581,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#assertDoubles(String,Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given two objects, asserts that they are either both null, or both Numbers\n   * with double values that are equally-ish with a \"small\" epsilon (relative to the \n   * scale of the expected value)\n   *\n   * @see Number#doubleValue\n   */\n  private void assertDoubles(String msg, Object expected, Object actual) {\n    if (null == expected || null == actual) {\n      assertEquals(msg, expected, actual);\n    } else {\n      assertTrue(msg + \" ... expected not a double: \" + \n                 expected + \"=>\" + expected.getClass(),\n                 expected instanceof Number);\n      assertTrue(msg + \" ... actual not a double: \" + \n                 actual + \"=>\" + actual.getClass(),\n                 actual instanceof Number);\n\n      // compute an epsilon relative to the size of the expected value\n      double expect = ((Number)expected).doubleValue();\n      double epsilon = expect * 0.1E-7D;\n\n      assertEquals(msg, expect, ((Number)actual).doubleValue(), epsilon);\n                   \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbdfda95da145c32af2267b537c92481acc7a522","date":1435597588,"type":4,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#assertDoubles(String,Object,Object).mjava","sourceNew":null,"sourceOld":"  /**\n   * Given two objects, asserts that they are either both null, or both Numbers\n   * with double values that are equally-ish with a \"small\" epsilon (relative to the \n   * scale of the expected value)\n   *\n   * @see Number#doubleValue\n   */\n  private void assertDoubles(String msg, Object expected, Object actual) {\n    if (null == expected || null == actual) {\n      assertEquals(msg, expected, actual);\n    } else {\n      assertTrue(msg + \" ... expected not a double: \" + \n                 expected + \"=>\" + expected.getClass(),\n                 expected instanceof Number);\n      assertTrue(msg + \" ... actual not a double: \" + \n                 actual + \"=>\" + actual.getClass(),\n                 actual instanceof Number);\n\n      // compute an epsilon relative to the size of the expected value\n      double expect = ((Number)expected).doubleValue();\n      double epsilon = expect * 0.1E-7D;\n\n      assertEquals(msg, expect, ((Number)actual).doubleValue(), epsilon);\n                   \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c18a95e9168a30be855f5d5e7d61a863186fdc5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dbdfda95da145c32af2267b537c92481acc7a522":["4c18a95e9168a30be855f5d5e7d61a863186fdc5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dbdfda95da145c32af2267b537c92481acc7a522"]},"commit2Childs":{"4c18a95e9168a30be855f5d5e7d61a863186fdc5":["dbdfda95da145c32af2267b537c92481acc7a522"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c18a95e9168a30be855f5d5e7d61a863186fdc5"],"dbdfda95da145c32af2267b537c92481acc7a522":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}