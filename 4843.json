{"path":"lucene/sandbox/src/test/org/apache/lucene/search/TestLatLonPointQueries#testEncodeDecode().mjava","commits":[{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestLatLonPointQueries#testEncodeDecode().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestDimensionalQueries#testEncodeDecode().mjava","sourceNew":"  public void testEncodeDecode() throws Exception {\n    int iters = atLeast(10000);\n    boolean small = random().nextBoolean();\n    for(int iter=0;iter<iters;iter++) {\n      double lat = randomLat(small);\n      double latQuantized = LatLonPoint.decodeLat(LatLonPoint.encodeLat(lat));\n      assertEquals(lat, latQuantized, LatLonPoint.TOLERANCE);\n\n      double lon = randomLon(small);\n      double lonQuantized = LatLonPoint.decodeLon(LatLonPoint.encodeLon(lon));\n      assertEquals(lon, lonQuantized, LatLonPoint.TOLERANCE);\n    }\n  }\n\n","sourceOld":"  public void testEncodeDecode() throws Exception {\n    int iters = atLeast(10000);\n    boolean small = random().nextBoolean();\n    for(int iter=0;iter<iters;iter++) {\n      double lat = randomLat(small);\n      double latQuantized = DimensionalLatLonField.decodeLat(DimensionalLatLonField.encodeLat(lat));\n      assertEquals(lat, latQuantized, DimensionalLatLonField.TOLERANCE);\n\n      double lon = randomLon(small);\n      double lonQuantized = DimensionalLatLonField.decodeLon(DimensionalLatLonField.encodeLon(lon));\n      assertEquals(lon, lonQuantized, DimensionalLatLonField.TOLERANCE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a54220739e069bc527a5e0a9982e5a9e1367493d","date":1453803260,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestLatLonPointQueries#testEncodeDecode().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestLatLonPointQueries#testEncodeDecode().mjava","sourceNew":"  public void testEncodeDecode() throws Exception {\n    int iters = atLeast(10000);\n    boolean small = random().nextBoolean();\n    for(int iter=0;iter<iters;iter++) {\n      double lat = randomLat(small);\n      double latEnc = LatLonPoint.decodeLat(LatLonPoint.encodeLat(lat));\n      assertEquals(\"lat=\" + lat + \" latEnc=\" + latEnc + \" diff=\" + (lat - latEnc), lat, latEnc, LatLonPoint.TOLERANCE);\n\n      double lon = randomLon(small);\n      double lonEnc = LatLonPoint.decodeLon(LatLonPoint.encodeLon(lon));\n      assertEquals(\"lon=\" + lon + \" lonEnc=\" + lonEnc + \" diff=\" + (lon - lonEnc), lon, lonEnc, LatLonPoint.TOLERANCE);\n    }\n  }\n\n","sourceOld":"  public void testEncodeDecode() throws Exception {\n    int iters = atLeast(10000);\n    boolean small = random().nextBoolean();\n    for(int iter=0;iter<iters;iter++) {\n      double lat = randomLat(small);\n      double latQuantized = LatLonPoint.decodeLat(LatLonPoint.encodeLat(lat));\n      assertEquals(lat, latQuantized, LatLonPoint.TOLERANCE);\n\n      double lon = randomLon(small);\n      double lonQuantized = LatLonPoint.decodeLon(LatLonPoint.encodeLon(lon));\n      assertEquals(lon, lonQuantized, LatLonPoint.TOLERANCE);\n    }\n  }\n\n","bugFix":null,"bugIntro":["609ba4ce51a7095e9815d4fb2666ec85714f8f54"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ac88193d9fe80e165a43bb0555c43afa83da8330","date":1453823827,"type":3,"author":"jbernste","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestLatLonPointQueries#testEncodeDecode().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestLatLonPointQueries#testEncodeDecode().mjava","sourceNew":"  public void testEncodeDecode() throws Exception {\n    int iters = atLeast(10000);\n    boolean small = random().nextBoolean();\n    for(int iter=0;iter<iters;iter++) {\n      double lat = randomLat(small);\n      double latEnc = LatLonPoint.decodeLat(LatLonPoint.encodeLat(lat));\n      assertEquals(\"lat=\" + lat + \" latEnc=\" + latEnc + \" diff=\" + (lat - latEnc), lat, latEnc, LatLonPoint.TOLERANCE);\n\n      double lon = randomLon(small);\n      double lonEnc = LatLonPoint.decodeLon(LatLonPoint.encodeLon(lon));\n      assertEquals(\"lon=\" + lon + \" lonEnc=\" + lonEnc + \" diff=\" + (lon - lonEnc), lon, lonEnc, LatLonPoint.TOLERANCE);\n    }\n  }\n\n","sourceOld":"  public void testEncodeDecode() throws Exception {\n    int iters = atLeast(10000);\n    boolean small = random().nextBoolean();\n    for(int iter=0;iter<iters;iter++) {\n      double lat = randomLat(small);\n      double latQuantized = LatLonPoint.decodeLat(LatLonPoint.encodeLat(lat));\n      assertEquals(lat, latQuantized, LatLonPoint.TOLERANCE);\n\n      double lon = randomLon(small);\n      double lonQuantized = LatLonPoint.decodeLon(LatLonPoint.encodeLon(lon));\n      assertEquals(lon, lonQuantized, LatLonPoint.TOLERANCE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestLatLonPointQueries#testEncodeDecode().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestLatLonPointQueries#testEncodeDecode().mjava","sourceNew":"  public void testEncodeDecode() throws Exception {\n    int iters = atLeast(10000);\n    boolean small = random().nextBoolean();\n    for(int iter=0;iter<iters;iter++) {\n      double lat = randomLat(small);\n      double latEnc = LatLonPoint.decodeLat(LatLonPoint.encodeLat(lat));\n      assertEquals(\"lat=\" + lat + \" latEnc=\" + latEnc + \" diff=\" + (lat - latEnc), lat, latEnc, LatLonPoint.TOLERANCE);\n\n      double lon = randomLon(small);\n      double lonEnc = LatLonPoint.decodeLon(LatLonPoint.encodeLon(lon));\n      assertEquals(\"lon=\" + lon + \" lonEnc=\" + lonEnc + \" diff=\" + (lon - lonEnc), lon, lonEnc, LatLonPoint.TOLERANCE);\n    }\n  }\n\n","sourceOld":"  public void testEncodeDecode() throws Exception {\n    int iters = atLeast(10000);\n    boolean small = random().nextBoolean();\n    for(int iter=0;iter<iters;iter++) {\n      double lat = randomLat(small);\n      double latQuantized = LatLonPoint.decodeLat(LatLonPoint.encodeLat(lat));\n      assertEquals(lat, latQuantized, LatLonPoint.TOLERANCE);\n\n      double lon = randomLon(small);\n      double lonQuantized = LatLonPoint.decodeLon(LatLonPoint.encodeLon(lon));\n      assertEquals(lon, lonQuantized, LatLonPoint.TOLERANCE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"609ba4ce51a7095e9815d4fb2666ec85714f8f54","date":1456320705,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestLatLonPointQueries#testEncodeDecode().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestLatLonPointQueries#testEncodeDecode().mjava","sourceNew":"  public void testEncodeDecode() throws Exception {\n    int iters = atLeast(10000);\n    boolean small = random().nextBoolean();\n    for(int iter=0;iter<iters;iter++) {\n      double lat = randomLat(small);\n      double latEnc = LatLonPoint.decodeLat(LatLonPoint.encodeLat(lat));\n      assertEquals(\"lat=\" + lat + \" latEnc=\" + latEnc + \" diff=\" + (lat - latEnc), lat, latEnc, ENCODING_TOLERANCE);\n\n      double lon = randomLon(small);\n      double lonEnc = LatLonPoint.decodeLon(LatLonPoint.encodeLon(lon));\n      assertEquals(\"lon=\" + lon + \" lonEnc=\" + lonEnc + \" diff=\" + (lon - lonEnc), lon, lonEnc, ENCODING_TOLERANCE);\n    }\n  }\n\n","sourceOld":"  public void testEncodeDecode() throws Exception {\n    int iters = atLeast(10000);\n    boolean small = random().nextBoolean();\n    for(int iter=0;iter<iters;iter++) {\n      double lat = randomLat(small);\n      double latEnc = LatLonPoint.decodeLat(LatLonPoint.encodeLat(lat));\n      assertEquals(\"lat=\" + lat + \" latEnc=\" + latEnc + \" diff=\" + (lat - latEnc), lat, latEnc, LatLonPoint.TOLERANCE);\n\n      double lon = randomLon(small);\n      double lonEnc = LatLonPoint.decodeLon(LatLonPoint.encodeLon(lon));\n      assertEquals(\"lon=\" + lon + \" lonEnc=\" + lonEnc + \" diff=\" + (lon - lonEnc), lon, lonEnc, LatLonPoint.TOLERANCE);\n    }\n  }\n\n","bugFix":["a54220739e069bc527a5e0a9982e5a9e1367493d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6","date":1456321728,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestLatLonPointQueries#testEncodeDecode().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestLatLonPointQueries#testEncodeDecode().mjava","sourceNew":"  public void testEncodeDecode() throws Exception {\n    int iters = atLeast(10000);\n    boolean small = random().nextBoolean();\n    for(int iter=0;iter<iters;iter++) {\n      double lat = randomLat(small);\n      double latEnc = LatLonPoint.decodeLat(LatLonPoint.encodeLat(lat));\n      assertEquals(\"lat=\" + lat + \" latEnc=\" + latEnc + \" diff=\" + (lat - latEnc), lat, latEnc, ENCODING_TOLERANCE);\n\n      double lon = randomLon(small);\n      double lonEnc = LatLonPoint.decodeLon(LatLonPoint.encodeLon(lon));\n      assertEquals(\"lon=\" + lon + \" lonEnc=\" + lonEnc + \" diff=\" + (lon - lonEnc), lon, lonEnc, ENCODING_TOLERANCE);\n    }\n  }\n\n","sourceOld":"  public void testEncodeDecode() throws Exception {\n    int iters = atLeast(10000);\n    boolean small = random().nextBoolean();\n    for(int iter=0;iter<iters;iter++) {\n      double lat = randomLat(small);\n      double latEnc = LatLonPoint.decodeLat(LatLonPoint.encodeLat(lat));\n      assertEquals(\"lat=\" + lat + \" latEnc=\" + latEnc + \" diff=\" + (lat - latEnc), lat, latEnc, LatLonPoint.TOLERANCE);\n\n      double lon = randomLon(small);\n      double lonEnc = LatLonPoint.decodeLon(LatLonPoint.encodeLon(lon));\n      assertEquals(\"lon=\" + lon + \" lonEnc=\" + lonEnc + \" diff=\" + (lon - lonEnc), lon, lonEnc, LatLonPoint.TOLERANCE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94ee361295fb38310ac4d53cb4773d1622423d68","date":1456833885,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestLatLonPointQueries#testEncodeDecode().mjava","sourceNew":null,"sourceOld":"  public void testEncodeDecode() throws Exception {\n    int iters = atLeast(10000);\n    boolean small = random().nextBoolean();\n    for(int iter=0;iter<iters;iter++) {\n      double lat = randomLat(small);\n      double latEnc = LatLonPoint.decodeLat(LatLonPoint.encodeLat(lat));\n      assertEquals(\"lat=\" + lat + \" latEnc=\" + latEnc + \" diff=\" + (lat - latEnc), lat, latEnc, ENCODING_TOLERANCE);\n\n      double lon = randomLon(small);\n      double lonEnc = LatLonPoint.decodeLon(LatLonPoint.encodeLon(lon));\n      assertEquals(\"lon=\" + lon + \" lonEnc=\" + lonEnc + \" diff=\" + (lon - lonEnc), lon, lonEnc, ENCODING_TOLERANCE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestLatLonPointQueries#testEncodeDecode().mjava","sourceNew":null,"sourceOld":"  public void testEncodeDecode() throws Exception {\n    int iters = atLeast(10000);\n    boolean small = random().nextBoolean();\n    for(int iter=0;iter<iters;iter++) {\n      double lat = randomLat(small);\n      double latEnc = LatLonPoint.decodeLat(LatLonPoint.encodeLat(lat));\n      assertEquals(\"lat=\" + lat + \" latEnc=\" + latEnc + \" diff=\" + (lat - latEnc), lat, latEnc, ENCODING_TOLERANCE);\n\n      double lon = randomLon(small);\n      double lonEnc = LatLonPoint.decodeLon(LatLonPoint.encodeLon(lon));\n      assertEquals(\"lon=\" + lon + \" lonEnc=\" + lonEnc + \" diff=\" + (lon - lonEnc), lon, lonEnc, ENCODING_TOLERANCE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ac88193d9fe80e165a43bb0555c43afa83da8330":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","a54220739e069bc527a5e0a9982e5a9e1367493d"],"609ba4ce51a7095e9815d4fb2666ec85714f8f54":["ac88193d9fe80e165a43bb0555c43afa83da8330"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"94ee361295fb38310ac4d53cb4773d1622423d68":["609ba4ce51a7095e9815d4fb2666ec85714f8f54"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","ac88193d9fe80e165a43bb0555c43afa83da8330"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["609ba4ce51a7095e9815d4fb2666ec85714f8f54","94ee361295fb38310ac4d53cb4773d1622423d68"],"a54220739e069bc527a5e0a9982e5a9e1367493d":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6":["ac88193d9fe80e165a43bb0555c43afa83da8330","609ba4ce51a7095e9815d4fb2666ec85714f8f54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["ac88193d9fe80e165a43bb0555c43afa83da8330","1e6acbaae7af722f17204ceccf0f7db5753eccf3","a54220739e069bc527a5e0a9982e5a9e1367493d"],"ac88193d9fe80e165a43bb0555c43afa83da8330":["609ba4ce51a7095e9815d4fb2666ec85714f8f54","1e6acbaae7af722f17204ceccf0f7db5753eccf3","1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"609ba4ce51a7095e9815d4fb2666ec85714f8f54":["94ee361295fb38310ac4d53cb4773d1622423d68","cf1a614098b46c9c22afebd7b898ae4d1d2fc273","1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6"],"94ee361295fb38310ac4d53cb4773d1622423d68":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a54220739e069bc527a5e0a9982e5a9e1367493d":["ac88193d9fe80e165a43bb0555c43afa83da8330"],"1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}