{"path":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTerm#checkPosition(int).mjava","commits":[{"id":"296b8b38a87feb478921f77834a2302dfe77641c","date":1209506838,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTerm#checkPosition(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * Checks to see if this term is valid at <code>position</code>.\r\n   *\r\n   * @param position\r\n   *            to check against valid term postions\r\n   * @return true iff this term is a hit at this position\r\n   */\r\n  public boolean checkPosition(int position) {\r\n    // There would probably be a slight speed improvement if PositionSpans\r\n    // where kept in some sort of priority queue - that way this method\r\n    // could\r\n    // bail early without checking each PositionSpan.\r\n    Iterator positionSpanIt = positionSpans.iterator();\r\n\r\n    while (positionSpanIt.hasNext()) {\r\n      PositionSpan posSpan = (PositionSpan) positionSpanIt.next();\r\n\r\n      if (((position >= posSpan.start) && (position <= posSpan.end))) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a361a621b184d9b73c9c9a37323a9845b8f8260","date":1226370946,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTerm#checkPosition(int).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTerm#checkPosition(int).mjava","sourceNew":"  /**\n   * Checks to see if this term is valid at <code>position</code>.\n   *\n   * @param position\n   *            to check against valid term postions\n   * @return true iff this term is a hit at this position\n   */\n  public boolean checkPosition(int position) {\n    // There would probably be a slight speed improvement if PositionSpans\n    // where kept in some sort of priority queue - that way this method\n    // could\n    // bail early without checking each PositionSpan.\n    Iterator positionSpanIt = positionSpans.iterator();\n\n    while (positionSpanIt.hasNext()) {\n      PositionSpan posSpan = (PositionSpan) positionSpanIt.next();\n\n      if (((position >= posSpan.start) && (position <= posSpan.end))) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\r\n   * Checks to see if this term is valid at <code>position</code>.\r\n   *\r\n   * @param position\r\n   *            to check against valid term postions\r\n   * @return true iff this term is a hit at this position\r\n   */\r\n  public boolean checkPosition(int position) {\r\n    // There would probably be a slight speed improvement if PositionSpans\r\n    // where kept in some sort of priority queue - that way this method\r\n    // could\r\n    // bail early without checking each PositionSpan.\r\n    Iterator positionSpanIt = positionSpans.iterator();\r\n\r\n    while (positionSpanIt.hasNext()) {\r\n      PositionSpan posSpan = (PositionSpan) positionSpanIt.next();\r\n\r\n      if (((position >= posSpan.start) && (position <= posSpan.end))) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffdf794cee8d43eb612df752c592cef2dc3e75ae","date":1256465578,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTerm#checkPosition(int).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTerm#checkPosition(int).mjava","sourceNew":"  /**\n   * Checks to see if this term is valid at <code>position</code>.\n   *\n   * @param position\n   *            to check against valid term postions\n   * @return true iff this term is a hit at this position\n   */\n  public boolean checkPosition(int position) {\n    // There would probably be a slight speed improvement if PositionSpans\n    // where kept in some sort of priority queue - that way this method\n    // could\n    // bail early without checking each PositionSpan.\n    Iterator<PositionSpan> positionSpanIt = positionSpans.iterator();\n\n    while (positionSpanIt.hasNext()) {\n      PositionSpan posSpan = positionSpanIt.next();\n\n      if (((position >= posSpan.start) && (position <= posSpan.end))) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Checks to see if this term is valid at <code>position</code>.\n   *\n   * @param position\n   *            to check against valid term postions\n   * @return true iff this term is a hit at this position\n   */\n  public boolean checkPosition(int position) {\n    // There would probably be a slight speed improvement if PositionSpans\n    // where kept in some sort of priority queue - that way this method\n    // could\n    // bail early without checking each PositionSpan.\n    Iterator positionSpanIt = positionSpans.iterator();\n\n    while (positionSpanIt.hasNext()) {\n      PositionSpan posSpan = (PositionSpan) positionSpanIt.next();\n\n      if (((position >= posSpan.start) && (position <= posSpan.end))) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48c2026b2f44142b851cbbef393684b7b1b6fef4","date":1262026339,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTerm#checkPosition(int).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTerm#checkPosition(int).mjava","sourceNew":"  /**\n   * Checks to see if this term is valid at <code>position</code>.\n   *\n   * @param position\n   *            to check against valid term positions\n   * @return true if this term is a hit at this position\n   */\n  public boolean checkPosition(int position) {\n    // There would probably be a slight speed improvement if PositionSpans\n    // where kept in some sort of priority queue - that way this method\n    // could\n    // bail early without checking each PositionSpan.\n    Iterator<PositionSpan> positionSpanIt = positionSpans.iterator();\n\n    while (positionSpanIt.hasNext()) {\n      PositionSpan posSpan = positionSpanIt.next();\n\n      if (((position >= posSpan.start) && (position <= posSpan.end))) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Checks to see if this term is valid at <code>position</code>.\n   *\n   * @param position\n   *            to check against valid term postions\n   * @return true iff this term is a hit at this position\n   */\n  public boolean checkPosition(int position) {\n    // There would probably be a slight speed improvement if PositionSpans\n    // where kept in some sort of priority queue - that way this method\n    // could\n    // bail early without checking each PositionSpan.\n    Iterator<PositionSpan> positionSpanIt = positionSpans.iterator();\n\n    while (positionSpanIt.hasNext()) {\n      PositionSpan posSpan = positionSpanIt.next();\n\n      if (((position >= posSpan.start) && (position <= posSpan.end))) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"331c83430d717d617c1d6d542e0b54cea46484e8","date":1262046887,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTerm#checkPosition(int).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTerm#checkPosition(int).mjava","sourceNew":"  /**\n   * Checks to see if this term is valid at <code>position</code>.\n   *\n   * @param position\n   *            to check against valid term positions\n   * @return true iff this term is a hit at this position\n   */\n  public boolean checkPosition(int position) {\n    // There would probably be a slight speed improvement if PositionSpans\n    // where kept in some sort of priority queue - that way this method\n    // could\n    // bail early without checking each PositionSpan.\n    Iterator<PositionSpan> positionSpanIt = positionSpans.iterator();\n\n    while (positionSpanIt.hasNext()) {\n      PositionSpan posSpan = positionSpanIt.next();\n\n      if (((position >= posSpan.start) && (position <= posSpan.end))) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Checks to see if this term is valid at <code>position</code>.\n   *\n   * @param position\n   *            to check against valid term positions\n   * @return true if this term is a hit at this position\n   */\n  public boolean checkPosition(int position) {\n    // There would probably be a slight speed improvement if PositionSpans\n    // where kept in some sort of priority queue - that way this method\n    // could\n    // bail early without checking each PositionSpan.\n    Iterator<PositionSpan> positionSpanIt = positionSpans.iterator();\n\n    while (positionSpanIt.hasNext()) {\n      PositionSpan posSpan = positionSpanIt.next();\n\n      if (((position >= posSpan.start) && (position <= posSpan.end))) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTerm#checkPosition(int).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTerm#checkPosition(int).mjava","sourceNew":"  /**\n   * Checks to see if this term is valid at <code>position</code>.\n   *\n   * @param position\n   *            to check against valid term positions\n   * @return true iff this term is a hit at this position\n   */\n  public boolean checkPosition(int position) {\n    // There would probably be a slight speed improvement if PositionSpans\n    // where kept in some sort of priority queue - that way this method\n    // could\n    // bail early without checking each PositionSpan.\n    Iterator<PositionSpan> positionSpanIt = positionSpans.iterator();\n\n    while (positionSpanIt.hasNext()) {\n      PositionSpan posSpan = positionSpanIt.next();\n\n      if (((position >= posSpan.start) && (position <= posSpan.end))) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Checks to see if this term is valid at <code>position</code>.\n   *\n   * @param position\n   *            to check against valid term positions\n   * @return true iff this term is a hit at this position\n   */\n  public boolean checkPosition(int position) {\n    // There would probably be a slight speed improvement if PositionSpans\n    // where kept in some sort of priority queue - that way this method\n    // could\n    // bail early without checking each PositionSpan.\n    Iterator<PositionSpan> positionSpanIt = positionSpans.iterator();\n\n    while (positionSpanIt.hasNext()) {\n      PositionSpan posSpan = positionSpanIt.next();\n\n      if (((position >= posSpan.start) && (position <= posSpan.end))) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["296b8b38a87feb478921f77834a2302dfe77641c"],"296b8b38a87feb478921f77834a2302dfe77641c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["331c83430d717d617c1d6d542e0b54cea46484e8"],"331c83430d717d617c1d6d542e0b54cea46484e8":["48c2026b2f44142b851cbbef393684b7b1b6fef4"],"48c2026b2f44142b851cbbef393684b7b1b6fef4":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"]},"commit2Childs":{"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["48c2026b2f44142b851cbbef393684b7b1b6fef4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["296b8b38a87feb478921f77834a2302dfe77641c"],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"],"296b8b38a87feb478921f77834a2302dfe77641c":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"331c83430d717d617c1d6d542e0b54cea46484e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"48c2026b2f44142b851cbbef393684b7b1b6fef4":["331c83430d717d617c1d6d542e0b54cea46484e8"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}