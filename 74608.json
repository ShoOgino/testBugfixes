{"path":"lucene/core/src/test/org/apache/lucene/index/TestPostingsFormat#testTermsOneThread(Fields,EnumSet[Option],IndexOptions).mjava","commits":[{"id":"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1","date":1342716838,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPostingsFormat#testTermsOneThread(Fields,EnumSet[Option],IndexOptions).mjava","pathOld":"/dev/null","sourceNew":"  private void testTermsOneThread(Fields fieldsSource, EnumSet<Option> options, IndexOptions maxIndexOptions) throws IOException {\n\n    ThreadState threadState = new ThreadState();\n\n    // Test random terms/fields:\n    List<TermState> termStates = new ArrayList<TermState>();\n    List<FieldAndTerm> termStateTerms = new ArrayList<FieldAndTerm>();\n    \n    Collections.shuffle(allTerms, random());\n    int upto = 0;\n    while (upto < allTerms.size()) {\n\n      boolean useTermState = termStates.size() != 0 && random().nextInt(5) == 1;\n      FieldAndTerm fieldAndTerm;\n      TermsEnum termsEnum;\n\n      TermState termState = null;\n\n      if (!useTermState) {\n        // Seek by random field+term:\n        fieldAndTerm = allTerms.get(upto++);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() );\n        }\n      } else {\n        // Seek by previous saved TermState\n        int idx = random().nextInt(termStates.size());\n        fieldAndTerm = termStateTerms.get(idx);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek using TermState to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString());\n        }\n        termState = termStates.get(idx);\n      }\n\n      Terms terms = fieldsSource.terms(fieldAndTerm.field);\n      assertNotNull(terms);\n      termsEnum = terms.iterator(null);\n\n      if (!useTermState) {\n        assertTrue(termsEnum.seekExact(fieldAndTerm.term, true));\n      } else {\n        termsEnum.seekExact(fieldAndTerm.term, termState);\n      }\n\n      boolean savedTermState = false;\n\n      if (options.contains(Option.TERM_STATE) && !useTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        savedTermState = true;\n      }\n\n      verifyEnum(threadState,\n                 fieldAndTerm.field,\n                 fieldAndTerm.term,\n                 termsEnum,\n                 maxIndexOptions,\n                 options);\n\n      // Sometimes save term state after pulling the enum:\n      if (options.contains(Option.TERM_STATE) && !useTermState && !savedTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        useTermState = true;\n      }\n\n      // 10% of the time make sure you can pull another enum\n      // from the same term:\n      if (random().nextInt(10) == 7) {\n        // Try same term again\n        if (VERBOSE) {\n          System.out.println(\"TEST: try enum again on same term\");\n        }\n\n        verifyEnum(threadState,\n                   fieldAndTerm.field,\n                   fieldAndTerm.term,\n                   termsEnum,\n                   maxIndexOptions,\n                   options);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddf662c415c0d0ad543e5314fcdf8396cd2f1b8d","date":1343058759,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPostingsFormat#testTermsOneThread(Fields,EnumSet[Option],IndexOptions).mjava","pathOld":"/dev/null","sourceNew":"  private void testTermsOneThread(Fields fieldsSource, EnumSet<Option> options, IndexOptions maxIndexOptions) throws IOException {\n\n    ThreadState threadState = new ThreadState();\n\n    // Test random terms/fields:\n    List<TermState> termStates = new ArrayList<TermState>();\n    List<FieldAndTerm> termStateTerms = new ArrayList<FieldAndTerm>();\n    \n    Collections.shuffle(allTerms, random());\n    int upto = 0;\n    while (upto < allTerms.size()) {\n\n      boolean useTermState = termStates.size() != 0 && random().nextInt(5) == 1;\n      FieldAndTerm fieldAndTerm;\n      TermsEnum termsEnum;\n\n      TermState termState = null;\n\n      if (!useTermState) {\n        // Seek by random field+term:\n        fieldAndTerm = allTerms.get(upto++);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() );\n        }\n      } else {\n        // Seek by previous saved TermState\n        int idx = random().nextInt(termStates.size());\n        fieldAndTerm = termStateTerms.get(idx);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek using TermState to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString());\n        }\n        termState = termStates.get(idx);\n      }\n\n      Terms terms = fieldsSource.terms(fieldAndTerm.field);\n      assertNotNull(terms);\n      termsEnum = terms.iterator(null);\n\n      if (!useTermState) {\n        assertTrue(termsEnum.seekExact(fieldAndTerm.term, true));\n      } else {\n        termsEnum.seekExact(fieldAndTerm.term, termState);\n      }\n\n      boolean savedTermState = false;\n\n      if (options.contains(Option.TERM_STATE) && !useTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        savedTermState = true;\n      }\n\n      verifyEnum(threadState,\n                 fieldAndTerm.field,\n                 fieldAndTerm.term,\n                 termsEnum,\n                 maxIndexOptions,\n                 options);\n\n      // Sometimes save term state after pulling the enum:\n      if (options.contains(Option.TERM_STATE) && !useTermState && !savedTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        useTermState = true;\n      }\n\n      // 10% of the time make sure you can pull another enum\n      // from the same term:\n      if (random().nextInt(10) == 7) {\n        // Try same term again\n        if (VERBOSE) {\n          System.out.println(\"TEST: try enum again on same term\");\n        }\n\n        verifyEnum(threadState,\n                   fieldAndTerm.field,\n                   fieldAndTerm.term,\n                   termsEnum,\n                   maxIndexOptions,\n                   options);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPostingsFormat#testTermsOneThread(Fields,EnumSet[Option],IndexOptions).mjava","pathOld":"/dev/null","sourceNew":"  private void testTermsOneThread(Fields fieldsSource, EnumSet<Option> options, IndexOptions maxIndexOptions) throws IOException {\n\n    ThreadState threadState = new ThreadState();\n\n    // Test random terms/fields:\n    List<TermState> termStates = new ArrayList<TermState>();\n    List<FieldAndTerm> termStateTerms = new ArrayList<FieldAndTerm>();\n    \n    Collections.shuffle(allTerms, random());\n    int upto = 0;\n    while (upto < allTerms.size()) {\n\n      boolean useTermState = termStates.size() != 0 && random().nextInt(5) == 1;\n      FieldAndTerm fieldAndTerm;\n      TermsEnum termsEnum;\n\n      TermState termState = null;\n\n      if (!useTermState) {\n        // Seek by random field+term:\n        fieldAndTerm = allTerms.get(upto++);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() );\n        }\n      } else {\n        // Seek by previous saved TermState\n        int idx = random().nextInt(termStates.size());\n        fieldAndTerm = termStateTerms.get(idx);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek using TermState to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString());\n        }\n        termState = termStates.get(idx);\n      }\n\n      Terms terms = fieldsSource.terms(fieldAndTerm.field);\n      assertNotNull(terms);\n      termsEnum = terms.iterator(null);\n\n      if (!useTermState) {\n        assertTrue(termsEnum.seekExact(fieldAndTerm.term, true));\n      } else {\n        termsEnum.seekExact(fieldAndTerm.term, termState);\n      }\n\n      boolean savedTermState = false;\n\n      if (options.contains(Option.TERM_STATE) && !useTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        savedTermState = true;\n      }\n\n      verifyEnum(threadState,\n                 fieldAndTerm.field,\n                 fieldAndTerm.term,\n                 termsEnum,\n                 maxIndexOptions,\n                 options);\n\n      // Sometimes save term state after pulling the enum:\n      if (options.contains(Option.TERM_STATE) && !useTermState && !savedTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        useTermState = true;\n      }\n\n      // 10% of the time make sure you can pull another enum\n      // from the same term:\n      if (random().nextInt(10) == 7) {\n        // Try same term again\n        if (VERBOSE) {\n          System.out.println(\"TEST: try enum again on same term\");\n        }\n\n        verifyEnum(threadState,\n                   fieldAndTerm.field,\n                   fieldAndTerm.term,\n                   termsEnum,\n                   maxIndexOptions,\n                   options);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95323da8eca89d45766013f5b300a865a5ac7dfb","date":1348933777,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTermsOneThread(Fields,EnumSet[Option],IndexOptions).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPostingsFormat#testTermsOneThread(Fields,EnumSet[Option],IndexOptions).mjava","sourceNew":"  private void testTermsOneThread(Fields fieldsSource, EnumSet<Option> options, IndexOptions maxIndexOptions) throws IOException {\n\n    ThreadState threadState = new ThreadState();\n\n    // Test random terms/fields:\n    List<TermState> termStates = new ArrayList<TermState>();\n    List<FieldAndTerm> termStateTerms = new ArrayList<FieldAndTerm>();\n    \n    Collections.shuffle(allTerms, random());\n    int upto = 0;\n    while (upto < allTerms.size()) {\n\n      boolean useTermState = termStates.size() != 0 && random().nextInt(5) == 1;\n      FieldAndTerm fieldAndTerm;\n      TermsEnum termsEnum;\n\n      TermState termState = null;\n\n      if (!useTermState) {\n        // Seek by random field+term:\n        fieldAndTerm = allTerms.get(upto++);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() );\n        }\n      } else {\n        // Seek by previous saved TermState\n        int idx = random().nextInt(termStates.size());\n        fieldAndTerm = termStateTerms.get(idx);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek using TermState to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString());\n        }\n        termState = termStates.get(idx);\n      }\n\n      Terms terms = fieldsSource.terms(fieldAndTerm.field);\n      assertNotNull(terms);\n      termsEnum = terms.iterator(null);\n\n      if (!useTermState) {\n        assertTrue(termsEnum.seekExact(fieldAndTerm.term, true));\n      } else {\n        termsEnum.seekExact(fieldAndTerm.term, termState);\n      }\n\n      boolean savedTermState = false;\n\n      if (options.contains(Option.TERM_STATE) && !useTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        savedTermState = true;\n      }\n\n      verifyEnum(threadState,\n                 fieldAndTerm.field,\n                 fieldAndTerm.term,\n                 termsEnum,\n                 maxIndexOptions,\n                 options);\n\n      // Sometimes save term state after pulling the enum:\n      if (options.contains(Option.TERM_STATE) && !useTermState && !savedTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        useTermState = true;\n      }\n\n      // 10% of the time make sure you can pull another enum\n      // from the same term:\n      if (random().nextInt(10) == 7) {\n        // Try same term again\n        if (VERBOSE) {\n          System.out.println(\"TEST: try enum again on same term\");\n        }\n\n        verifyEnum(threadState,\n                   fieldAndTerm.field,\n                   fieldAndTerm.term,\n                   termsEnum,\n                   maxIndexOptions,\n                   options);\n      }\n    }\n  }\n\n","sourceOld":"  private void testTermsOneThread(Fields fieldsSource, EnumSet<Option> options, IndexOptions maxIndexOptions) throws IOException {\n\n    ThreadState threadState = new ThreadState();\n\n    // Test random terms/fields:\n    List<TermState> termStates = new ArrayList<TermState>();\n    List<FieldAndTerm> termStateTerms = new ArrayList<FieldAndTerm>();\n    \n    Collections.shuffle(allTerms, random());\n    int upto = 0;\n    while (upto < allTerms.size()) {\n\n      boolean useTermState = termStates.size() != 0 && random().nextInt(5) == 1;\n      FieldAndTerm fieldAndTerm;\n      TermsEnum termsEnum;\n\n      TermState termState = null;\n\n      if (!useTermState) {\n        // Seek by random field+term:\n        fieldAndTerm = allTerms.get(upto++);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() );\n        }\n      } else {\n        // Seek by previous saved TermState\n        int idx = random().nextInt(termStates.size());\n        fieldAndTerm = termStateTerms.get(idx);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek using TermState to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString());\n        }\n        termState = termStates.get(idx);\n      }\n\n      Terms terms = fieldsSource.terms(fieldAndTerm.field);\n      assertNotNull(terms);\n      termsEnum = terms.iterator(null);\n\n      if (!useTermState) {\n        assertTrue(termsEnum.seekExact(fieldAndTerm.term, true));\n      } else {\n        termsEnum.seekExact(fieldAndTerm.term, termState);\n      }\n\n      boolean savedTermState = false;\n\n      if (options.contains(Option.TERM_STATE) && !useTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        savedTermState = true;\n      }\n\n      verifyEnum(threadState,\n                 fieldAndTerm.field,\n                 fieldAndTerm.term,\n                 termsEnum,\n                 maxIndexOptions,\n                 options);\n\n      // Sometimes save term state after pulling the enum:\n      if (options.contains(Option.TERM_STATE) && !useTermState && !savedTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        useTermState = true;\n      }\n\n      // 10% of the time make sure you can pull another enum\n      // from the same term:\n      if (random().nextInt(10) == 7) {\n        // Try same term again\n        if (VERBOSE) {\n          System.out.println(\"TEST: try enum again on same term\");\n        }\n\n        verifyEnum(threadState,\n                   fieldAndTerm.field,\n                   fieldAndTerm.term,\n                   termsEnum,\n                   maxIndexOptions,\n                   options);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ddf662c415c0d0ad543e5314fcdf8396cd2f1b8d"],"ddf662c415c0d0ad543e5314fcdf8396cd2f1b8d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"95323da8eca89d45766013f5b300a865a5ac7dfb":["ddf662c415c0d0ad543e5314fcdf8396cd2f1b8d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["95323da8eca89d45766013f5b300a865a5ac7dfb"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"ddf662c415c0d0ad543e5314fcdf8396cd2f1b8d":["aba371508186796cc6151d8223a5b4e16d02e26e","95323da8eca89d45766013f5b300a865a5ac7dfb"],"95323da8eca89d45766013f5b300a865a5ac7dfb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","ddf662c415c0d0ad543e5314fcdf8396cd2f1b8d","e885d2b1e112b1d9db6a2dae82b3b493dfba1df1"],"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","e885d2b1e112b1d9db6a2dae82b3b493dfba1df1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}