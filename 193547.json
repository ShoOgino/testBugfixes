{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testPairSort().mjava","commits":[{"id":"2d472be56f18647f9c538d5d4a317829eb77902e","date":1539017603,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testPairSort().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPairSort() throws Exception {\n    String cexpr = \"let(a=array(4.5, 7.7, 2.1, 2.1, 6.3),\" +\n        \"               b=array(1, 2, 3, 4, 5),\" +\n        \"               c=pairSort(a, b))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"c\");\n    System.out.println(\"###### out:\"+out);\n    assertEquals(out.size(), 2);\n    List<Number> row1 = out.get(0);\n    assertEquals(row1.get(0).doubleValue(), 2.1, 0);\n    assertEquals(row1.get(1).doubleValue(), 2.1, 0);\n    assertEquals(row1.get(2).doubleValue(), 4.5, 0);\n    assertEquals(row1.get(3).doubleValue(), 6.3, 0);\n    assertEquals(row1.get(4).doubleValue(), 7.7, 0);\n\n    List<Number> row2 = out.get(1);\n    assertEquals(row2.get(0).doubleValue(), 3, 0);\n    assertEquals(row2.get(1).doubleValue(), 4, 0);\n    assertEquals(row2.get(2).doubleValue(), 1, 0);\n    assertEquals(row2.get(3).doubleValue(), 5, 0);\n    assertEquals(row2.get(4).doubleValue(), 2, 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1df12fdfa92024c9bc6b6b0e70abb6f5a0cb61cc","date":1539269037,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testPairSort().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testPairSort().mjava","sourceNew":"  @Test\n  public void testPairSort() throws Exception {\n    String cexpr = \"let(a=array(4.5, 7.7, 2.1, 2.1, 6.3),\" +\n        \"               b=array(1, 2, 3, 4, 5),\" +\n        \"               c=pairSort(a, b))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"c\");\n    assertEquals(out.size(), 2);\n    List<Number> row1 = out.get(0);\n    assertEquals(row1.get(0).doubleValue(), 2.1, 0);\n    assertEquals(row1.get(1).doubleValue(), 2.1, 0);\n    assertEquals(row1.get(2).doubleValue(), 4.5, 0);\n    assertEquals(row1.get(3).doubleValue(), 6.3, 0);\n    assertEquals(row1.get(4).doubleValue(), 7.7, 0);\n\n    List<Number> row2 = out.get(1);\n    assertEquals(row2.get(0).doubleValue(), 3, 0);\n    assertEquals(row2.get(1).doubleValue(), 4, 0);\n    assertEquals(row2.get(2).doubleValue(), 1, 0);\n    assertEquals(row2.get(3).doubleValue(), 5, 0);\n    assertEquals(row2.get(4).doubleValue(), 2, 0);\n  }\n\n","sourceOld":"  @Test\n  public void testPairSort() throws Exception {\n    String cexpr = \"let(a=array(4.5, 7.7, 2.1, 2.1, 6.3),\" +\n        \"               b=array(1, 2, 3, 4, 5),\" +\n        \"               c=pairSort(a, b))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"c\");\n    System.out.println(\"###### out:\"+out);\n    assertEquals(out.size(), 2);\n    List<Number> row1 = out.get(0);\n    assertEquals(row1.get(0).doubleValue(), 2.1, 0);\n    assertEquals(row1.get(1).doubleValue(), 2.1, 0);\n    assertEquals(row1.get(2).doubleValue(), 4.5, 0);\n    assertEquals(row1.get(3).doubleValue(), 6.3, 0);\n    assertEquals(row1.get(4).doubleValue(), 7.7, 0);\n\n    List<Number> row2 = out.get(1);\n    assertEquals(row2.get(0).doubleValue(), 3, 0);\n    assertEquals(row2.get(1).doubleValue(), 4, 0);\n    assertEquals(row2.get(2).doubleValue(), 1, 0);\n    assertEquals(row2.get(3).doubleValue(), 5, 0);\n    assertEquals(row2.get(4).doubleValue(), 2, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testPairSort().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testPairSort().mjava","sourceNew":"  @Test\n  public void testPairSort() throws Exception {\n    String cexpr = \"let(a=array(4.5, 7.7, 2.1, 2.1, 6.3),\" +\n        \"               b=array(1, 2, 3, 4, 5),\" +\n        \"               c=pairSort(a, b))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    @SuppressWarnings({\"unchecked\"})\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"c\");\n    assertEquals(out.size(), 2);\n    List<Number> row1 = out.get(0);\n    assertEquals(row1.get(0).doubleValue(), 2.1, 0);\n    assertEquals(row1.get(1).doubleValue(), 2.1, 0);\n    assertEquals(row1.get(2).doubleValue(), 4.5, 0);\n    assertEquals(row1.get(3).doubleValue(), 6.3, 0);\n    assertEquals(row1.get(4).doubleValue(), 7.7, 0);\n\n    List<Number> row2 = out.get(1);\n    assertEquals(row2.get(0).doubleValue(), 3, 0);\n    assertEquals(row2.get(1).doubleValue(), 4, 0);\n    assertEquals(row2.get(2).doubleValue(), 1, 0);\n    assertEquals(row2.get(3).doubleValue(), 5, 0);\n    assertEquals(row2.get(4).doubleValue(), 2, 0);\n  }\n\n","sourceOld":"  @Test\n  public void testPairSort() throws Exception {\n    String cexpr = \"let(a=array(4.5, 7.7, 2.1, 2.1, 6.3),\" +\n        \"               b=array(1, 2, 3, 4, 5),\" +\n        \"               c=pairSort(a, b))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"c\");\n    assertEquals(out.size(), 2);\n    List<Number> row1 = out.get(0);\n    assertEquals(row1.get(0).doubleValue(), 2.1, 0);\n    assertEquals(row1.get(1).doubleValue(), 2.1, 0);\n    assertEquals(row1.get(2).doubleValue(), 4.5, 0);\n    assertEquals(row1.get(3).doubleValue(), 6.3, 0);\n    assertEquals(row1.get(4).doubleValue(), 7.7, 0);\n\n    List<Number> row2 = out.get(1);\n    assertEquals(row2.get(0).doubleValue(), 3, 0);\n    assertEquals(row2.get(1).doubleValue(), 4, 0);\n    assertEquals(row2.get(2).doubleValue(), 1, 0);\n    assertEquals(row2.get(3).doubleValue(), 5, 0);\n    assertEquals(row2.get(4).doubleValue(), 2, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["1df12fdfa92024c9bc6b6b0e70abb6f5a0cb61cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d472be56f18647f9c538d5d4a317829eb77902e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1df12fdfa92024c9bc6b6b0e70abb6f5a0cb61cc":["2d472be56f18647f9c538d5d4a317829eb77902e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2d472be56f18647f9c538d5d4a317829eb77902e"],"2d472be56f18647f9c538d5d4a317829eb77902e":["1df12fdfa92024c9bc6b6b0e70abb6f5a0cb61cc"],"1df12fdfa92024c9bc6b6b0e70abb6f5a0cb61cc":["9ba1b632c041956c93c41aa1143d16a567014891"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}