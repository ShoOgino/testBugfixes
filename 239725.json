{"path":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfoPerCommit).mjava","commits":[{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfoPerCommit).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfoPerCommit si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random()));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        Terms terms = fis.terms();\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null, false);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random()));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        Terms terms = fis.terms();\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null, false);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfoPerCommit).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfoPerCommit si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random()));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        Terms terms = fis.terms();\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null, false);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random()));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        Terms terms = fis.terms();\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null, false);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"322360ac5185a8446d3e0b530b2068bef67cd3d5","date":1343669494,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfoPerCommit).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfoPerCommit).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfoPerCommit si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random()));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        Terms terms = fis.terms();\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfoPerCommit si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random()));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        Terms terms = fis.terms();\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null, false);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfoPerCommit).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfoPerCommit).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfoPerCommit si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random()));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        Terms terms = fis.terms();\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfoPerCommit si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random()));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        Terms terms = fis.terms();\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null, false);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfoPerCommit).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfoPerCommit).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfoPerCommit si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random()));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        Terms terms = fis.terms();\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfoPerCommit si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random()));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        Terms terms = fis.terms();\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null, false);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb07ab105350b80ed9d63ca64b117084ed7391bc","date":1344824719,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfoPerCommit).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfoPerCommit).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfoPerCommit si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random()));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      Fields fields = reader.fields();\n      for (String field : fields)  {\n        Terms terms = fields.terms(field);\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n      }\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfoPerCommit si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random()));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        Terms terms = fis.terms();\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfoPerCommit).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfoPerCommit).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfoPerCommit si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random()));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      Fields fields = reader.fields();\n      for (String field : fields)  {\n        Terms terms = fields.terms(field);\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n      }\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfoPerCommit si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random()));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        Terms terms = fis.terms();\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfoPerCommit).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfoPerCommit).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfoPerCommit si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random()));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      Fields fields = reader.fields();\n      for (String field : fields)  {\n        Terms terms = fields.terms(field);\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n      }\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfoPerCommit si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random()));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        Terms terms = fis.terms();\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfoPerCommit).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfoPerCommit).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfoPerCommit si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, newIOContext(random()));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      Fields fields = reader.fields();\n      for (String field : fields)  {\n        Terms terms = fields.terms(field);\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n      }\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfoPerCommit si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random()));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      Fields fields = reader.fields();\n      for (String field : fields)  {\n        Terms terms = fields.terms(field);\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n      }\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfoPerCommit).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfoPerCommit).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfoPerCommit si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, newIOContext(random()));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      Fields fields = reader.fields();\n      for (String field : fields)  {\n        Terms terms = fields.terms(field);\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n      }\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfoPerCommit si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random()));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      Fields fields = reader.fields();\n      for (String field : fields)  {\n        Terms terms = fields.terms(field);\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n      }\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentCommitInfo).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfoPerCommit).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentCommitInfo si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, newIOContext(random()));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      Fields fields = reader.fields();\n      for (String field : fields)  {\n        Terms terms = fields.terms(field);\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n      }\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfoPerCommit si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, newIOContext(random()));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      Fields fields = reader.fields();\n      for (String field : fields)  {\n        Terms terms = fields.terms(field);\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n      }\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["a45bec74b98f6fc05f52770cfb425739e6563960"],"a45bec74b98f6fc05f52770cfb425739e6563960":["fb07ab105350b80ed9d63ca64b117084ed7391bc"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["322360ac5185a8446d3e0b530b2068bef67cd3d5"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9d153abcf92dc5329d98571a8c3035df9bd80648"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["fb07ab105350b80ed9d63ca64b117084ed7391bc"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["d6f074e73200c07d54f242d3880a8da5a35ff97b","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a45bec74b98f6fc05f52770cfb425739e6563960":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["a45bec74b98f6fc05f52770cfb425739e6563960","c7869f64c874ebf7f317d22c00baf2b6857797a6","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9d153abcf92dc5329d98571a8c3035df9bd80648","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["fb07ab105350b80ed9d63ca64b117084ed7391bc","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}