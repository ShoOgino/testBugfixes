{"path":"solr/core/src/java/org/apache/solr/analytics/request/AnalyticsRequestFactory#setFieldFacetParam(IndexSchema,Map[String,Map[String,FieldFacetRequest]],String,String,String,String[]).mjava","commits":[{"id":"ff403346522eaa9de75403763e297e83a3ea585c","date":1384904731,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analytics/request/AnalyticsRequestFactory#setFieldFacetParam(IndexSchema,Map[String,Map[String,FieldFacetRequest]],String,String,String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  private static void setFieldFacetParam(IndexSchema schema, Map<String, Map<String, FieldFacetRequest>> fieldFacetMap, String requestName, String field, String paramType, String[] params) {\n    Map<String, FieldFacetRequest> facetMap = fieldFacetMap.get(requestName);\n    if (facetMap == null) {\n      facetMap = new HashMap<String, FieldFacetRequest>();\n      fieldFacetMap.put(requestName, facetMap);\n    }\n    FieldFacetRequest fr = facetMap.get(field);\n    if (fr == null) {\n      fr = new FieldFacetRequest(schema.getField(field));\n      facetMap.put(field,fr);\n    }\n    if (paramType.equals(\"limit\")||paramType.equals(\"l\")) {\n      fr.setLimit(Integer.parseInt(params[0]));\n    } else if (paramType.equals(\"offset\")||paramType.equals(\"off\")) {\n      fr.setOffset(Integer.parseInt(params[0]));\n    } else if (paramType.equals(\"hidden\")||paramType.equals(\"h\")) {\n      fr.setHidden(Boolean.parseBoolean(params[0]));\n    } else if (paramType.equals(\"showmissing\")||paramType.equals(\"sm\")) {\n      fr.showMissing(Boolean.parseBoolean(params[0]));\n    } else if (paramType.equals(\"sortstatistic\")||paramType.equals(\"sortstat\")||paramType.equals(\"ss\")) {\n      fr.setSort(new FacetSortSpecification(params[0],fr.getDirection()));\n    } else if (paramType.equals(\"sortdirection\")||paramType.equals(\"sd\")) {\n      fr.setDirection(params[0]);\n    } \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analytics/request/AnalyticsRequestFactory#setFieldFacetParam(IndexSchema,Map[String,Map[String,FieldFacetRequest]],String,String,String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  private static void setFieldFacetParam(IndexSchema schema, Map<String, Map<String, FieldFacetRequest>> fieldFacetMap, String requestName, String field, String paramType, String[] params) {\n    Map<String, FieldFacetRequest> facetMap = fieldFacetMap.get(requestName);\n    if (facetMap == null) {\n      facetMap = new HashMap<String, FieldFacetRequest>();\n      fieldFacetMap.put(requestName, facetMap);\n    }\n    FieldFacetRequest fr = facetMap.get(field);\n    if (fr == null) {\n      fr = new FieldFacetRequest(schema.getField(field));\n      facetMap.put(field,fr);\n    }\n    if (paramType.equals(\"limit\")||paramType.equals(\"l\")) {\n      fr.setLimit(Integer.parseInt(params[0]));\n    } else if (paramType.equals(\"offset\")||paramType.equals(\"off\")) {\n      fr.setOffset(Integer.parseInt(params[0]));\n    } else if (paramType.equals(\"hidden\")||paramType.equals(\"h\")) {\n      fr.setHidden(Boolean.parseBoolean(params[0]));\n    } else if (paramType.equals(\"showmissing\")||paramType.equals(\"sm\")) {\n      fr.showMissing(Boolean.parseBoolean(params[0]));\n    } else if (paramType.equals(\"sortstatistic\")||paramType.equals(\"sortstat\")||paramType.equals(\"ss\")) {\n      fr.setSort(new FacetSortSpecification(params[0],fr.getDirection()));\n    } else if (paramType.equals(\"sortdirection\")||paramType.equals(\"sd\")) {\n      fr.setDirection(params[0]);\n    } \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analytics/request/AnalyticsRequestFactory#setFieldFacetParam(IndexSchema,Map[String,Map[String,FieldFacetRequest]],String,String,String,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/request/AnalyticsRequestFactory#setFieldFacetParam(IndexSchema,Map[String,Map[String,FieldFacetRequest]],String,String,String,String[]).mjava","sourceNew":"  private static void setFieldFacetParam(IndexSchema schema, Map<String, Map<String, FieldFacetRequest>> fieldFacetMap, String requestName, String field, String paramType, String[] params) {\n    Map<String, FieldFacetRequest> facetMap = fieldFacetMap.get(requestName);\n    if (facetMap == null) {\n      facetMap = new HashMap<>();\n      fieldFacetMap.put(requestName, facetMap);\n    }\n    FieldFacetRequest fr = facetMap.get(field);\n    if (fr == null) {\n      fr = new FieldFacetRequest(schema.getField(field));\n      facetMap.put(field,fr);\n    }\n    if (paramType.equals(\"limit\")||paramType.equals(\"l\")) {\n      fr.setLimit(Integer.parseInt(params[0]));\n    } else if (paramType.equals(\"offset\")||paramType.equals(\"off\")) {\n      fr.setOffset(Integer.parseInt(params[0]));\n    } else if (paramType.equals(\"hidden\")||paramType.equals(\"h\")) {\n      fr.setHidden(Boolean.parseBoolean(params[0]));\n    } else if (paramType.equals(\"showmissing\")||paramType.equals(\"sm\")) {\n      fr.showMissing(Boolean.parseBoolean(params[0]));\n    } else if (paramType.equals(\"sortstatistic\")||paramType.equals(\"sortstat\")||paramType.equals(\"ss\")) {\n      fr.setSort(new FacetSortSpecification(params[0],fr.getDirection()));\n    } else if (paramType.equals(\"sortdirection\")||paramType.equals(\"sd\")) {\n      fr.setDirection(params[0]);\n    } \n  }\n\n","sourceOld":"  private static void setFieldFacetParam(IndexSchema schema, Map<String, Map<String, FieldFacetRequest>> fieldFacetMap, String requestName, String field, String paramType, String[] params) {\n    Map<String, FieldFacetRequest> facetMap = fieldFacetMap.get(requestName);\n    if (facetMap == null) {\n      facetMap = new HashMap<String, FieldFacetRequest>();\n      fieldFacetMap.put(requestName, facetMap);\n    }\n    FieldFacetRequest fr = facetMap.get(field);\n    if (fr == null) {\n      fr = new FieldFacetRequest(schema.getField(field));\n      facetMap.put(field,fr);\n    }\n    if (paramType.equals(\"limit\")||paramType.equals(\"l\")) {\n      fr.setLimit(Integer.parseInt(params[0]));\n    } else if (paramType.equals(\"offset\")||paramType.equals(\"off\")) {\n      fr.setOffset(Integer.parseInt(params[0]));\n    } else if (paramType.equals(\"hidden\")||paramType.equals(\"h\")) {\n      fr.setHidden(Boolean.parseBoolean(params[0]));\n    } else if (paramType.equals(\"showmissing\")||paramType.equals(\"sm\")) {\n      fr.showMissing(Boolean.parseBoolean(params[0]));\n    } else if (paramType.equals(\"sortstatistic\")||paramType.equals(\"sortstat\")||paramType.equals(\"ss\")) {\n      fr.setSort(new FacetSortSpecification(params[0],fr.getDirection()));\n    } else if (paramType.equals(\"sortdirection\")||paramType.equals(\"sd\")) {\n      fr.setDirection(params[0]);\n    } \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/request/AnalyticsRequestFactory#setFieldFacetParam(IndexSchema,Map[String,Map[String,FieldFacetRequest]],String,String,String,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/request/AnalyticsRequestFactory#setFieldFacetParam(IndexSchema,Map[String,Map[String,FieldFacetRequest]],String,String,String,String[]).mjava","sourceNew":"  private static void setFieldFacetParam(IndexSchema schema, Map<String, Map<String, FieldFacetRequest>> fieldFacetMap, String requestName, String field, String paramType, String[] params) {\n    Map<String, FieldFacetRequest> facetMap = fieldFacetMap.get(requestName);\n    if (facetMap == null) {\n      facetMap = new HashMap<>();\n      fieldFacetMap.put(requestName, facetMap);\n    }\n    FieldFacetRequest fr = facetMap.get(field);\n    if (fr == null) {\n      fr = new FieldFacetRequest(schema.getField(field));\n      facetMap.put(field,fr);\n    }\n    if (paramType.equals(\"limit\")||paramType.equals(\"l\")) {\n      fr.setLimit(Integer.parseInt(params[0]));\n    } else if (paramType.equals(\"offset\")||paramType.equals(\"off\")) {\n      fr.setOffset(Integer.parseInt(params[0]));\n    } else if (paramType.equals(\"hidden\")||paramType.equals(\"h\")) {\n      fr.setHidden(Boolean.parseBoolean(params[0]));\n    } else if (paramType.equals(\"showmissing\")||paramType.equals(\"sm\")) {\n      fr.showMissing(Boolean.parseBoolean(params[0]));\n    } else if (paramType.equals(\"sortstatistic\")||paramType.equals(\"sortstat\")||paramType.equals(\"ss\")) {\n      fr.setSort(new FacetSortSpecification(params[0],fr.getDirection()));\n    } else if (paramType.equals(\"sortdirection\")||paramType.equals(\"sd\")) {\n      fr.setDirection(params[0]);\n    } \n  }\n\n","sourceOld":"  private static void setFieldFacetParam(IndexSchema schema, Map<String, Map<String, FieldFacetRequest>> fieldFacetMap, String requestName, String field, String paramType, String[] params) {\n    Map<String, FieldFacetRequest> facetMap = fieldFacetMap.get(requestName);\n    if (facetMap == null) {\n      facetMap = new HashMap<>();\n      fieldFacetMap.put(requestName, facetMap);\n    }\n    FieldFacetRequest fr = facetMap.get(field);\n    if (fr == null) {\n      fr = new FieldFacetRequest(schema.getField(field));\n      facetMap.put(field,fr);\n    }\n    if (paramType.equals(\"limit\")||paramType.equals(\"l\")) {\n      fr.setLimit(Integer.parseInt(params[0]));\n    } else if (paramType.equals(\"offset\")||paramType.equals(\"off\")) {\n      fr.setOffset(Integer.parseInt(params[0]));\n    } else if (paramType.equals(\"hidden\")||paramType.equals(\"h\")) {\n      fr.setHidden(Boolean.parseBoolean(params[0]));\n    } else if (paramType.equals(\"showmissing\")||paramType.equals(\"sm\")) {\n      fr.showMissing(Boolean.parseBoolean(params[0]));\n    } else if (paramType.equals(\"sortstatistic\")||paramType.equals(\"sortstat\")||paramType.equals(\"ss\")) {\n      fr.setSort(new FacetSortSpecification(params[0],fr.getDirection()));\n    } else if (paramType.equals(\"sortdirection\")||paramType.equals(\"sd\")) {\n      fr.setDirection(params[0]);\n    } \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ff403346522eaa9de75403763e297e83a3ea585c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff403346522eaa9de75403763e297e83a3ea585c"],"ff403346522eaa9de75403763e297e83a3ea585c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f719faa74f7213d4a395510dbc1f1b7cb178484"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","ff403346522eaa9de75403763e297e83a3ea585c"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"ff403346522eaa9de75403763e297e83a3ea585c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}