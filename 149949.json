{"path":"solr/core/src/test/org/apache/solr/search/TestSolrJ#main(String[]).mjava","commits":[{"id":"cad90908fe6b90a8b7310dc8c2dceac34341580c","date":1344538399,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrJ#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static void main(String[] args) throws Exception {\n    // String addr = \"http://odin.local:80/solr\";\n    // String addr = \"http://odin.local:8983/solr\";\n    String addr = \"http://localhost:8983/solr\";\n\n    int i = 0;\n    final int nDocs = Integer.parseInt(args[i++]);\n    final int nProducers = Integer.parseInt(args[i++]);\n    final int nConnections = Integer.parseInt(args[i++]);\n    final int maxSleep = Integer.parseInt(args[i++]);\n\n    ConcurrentUpdateSolrServer sserver = null;\n\n    // server = sserver = new ConcurrentUpdateSolrServer(addr,32,8);\n    server = sserver = new ConcurrentUpdateSolrServer(addr,64,nConnections);\n\n    server.deleteByQuery(\"*:*\");\n    server.commit();\n\n    long start = System.currentTimeMillis();\n\n    final int docsPerThread = nDocs / nProducers;\n\n    Thread[] threads = new Thread[nProducers];\n\n    for (int threadNum = 0; threadNum<nProducers; threadNum++) {\n      final int base = threadNum * docsPerThread;\n\n      threads[threadNum] = new Thread(\"add-thread\"+i) {\n        public void run(){\n          try {\n            indexDocs(base, docsPerThread, maxSleep);\n          } catch (Exception e) {\n            System.out.println(\"###############################CAUGHT EXCEPTION\");\n            e.printStackTrace();\n            ex = e;\n          }\n        }\n      };\n      threads[threadNum].start();\n    }\n\n    // optional: wait for commit?\n\n    for (int threadNum = 0; threadNum<nProducers; threadNum++) {\n      threads[threadNum].join();\n    }\n\n    if (sserver != null) {\n      sserver.blockUntilFinished();\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\"+(end-start) + \" throughput=\"+(nDocs*1000/(end-start)) + \" Exception=\"+ex);\n\n    // should server threads be marked as daemon?\n    // need a server.close()!!!\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrJ#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static void main(String[] args) throws Exception {\n    // String addr = \"http://odin.local:80/solr\";\n    // String addr = \"http://odin.local:8983/solr\";\n    String addr = \"http://localhost:8983/solr\";\n\n    int i = 0;\n    final int nDocs = Integer.parseInt(args[i++]);\n    final int nProducers = Integer.parseInt(args[i++]);\n    final int nConnections = Integer.parseInt(args[i++]);\n    final int maxSleep = Integer.parseInt(args[i++]);\n\n    ConcurrentUpdateSolrServer sserver = null;\n\n    // server = sserver = new ConcurrentUpdateSolrServer(addr,32,8);\n    server = sserver = new ConcurrentUpdateSolrServer(addr,64,nConnections);\n\n    server.deleteByQuery(\"*:*\");\n    server.commit();\n\n    long start = System.currentTimeMillis();\n\n    final int docsPerThread = nDocs / nProducers;\n\n    Thread[] threads = new Thread[nProducers];\n\n    for (int threadNum = 0; threadNum<nProducers; threadNum++) {\n      final int base = threadNum * docsPerThread;\n\n      threads[threadNum] = new Thread(\"add-thread\"+i) {\n        public void run(){\n          try {\n            indexDocs(base, docsPerThread, maxSleep);\n          } catch (Exception e) {\n            System.out.println(\"###############################CAUGHT EXCEPTION\");\n            e.printStackTrace();\n            ex = e;\n          }\n        }\n      };\n      threads[threadNum].start();\n    }\n\n    // optional: wait for commit?\n\n    for (int threadNum = 0; threadNum<nProducers; threadNum++) {\n      threads[threadNum].join();\n    }\n\n    if (sserver != null) {\n      sserver.blockUntilFinished();\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\"+(end-start) + \" throughput=\"+(nDocs*1000/(end-start)) + \" Exception=\"+ex);\n\n    // should server threads be marked as daemon?\n    // need a server.close()!!!\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrJ#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static void main(String[] args) throws Exception {\n    // String addr = \"http://odin.local:80/solr\";\n    // String addr = \"http://odin.local:8983/solr\";\n    String addr = \"http://localhost:8983/solr\";\n\n    int i = 0;\n    final int nDocs = Integer.parseInt(args[i++]);\n    final int nProducers = Integer.parseInt(args[i++]);\n    final int nConnections = Integer.parseInt(args[i++]);\n    final int maxSleep = Integer.parseInt(args[i++]);\n\n    ConcurrentUpdateSolrServer sserver = null;\n\n    // server = sserver = new ConcurrentUpdateSolrServer(addr,32,8);\n    server = sserver = new ConcurrentUpdateSolrServer(addr,64,nConnections);\n\n    server.deleteByQuery(\"*:*\");\n    server.commit();\n\n    long start = System.currentTimeMillis();\n\n    final int docsPerThread = nDocs / nProducers;\n\n    Thread[] threads = new Thread[nProducers];\n\n    for (int threadNum = 0; threadNum<nProducers; threadNum++) {\n      final int base = threadNum * docsPerThread;\n\n      threads[threadNum] = new Thread(\"add-thread\"+i) {\n        public void run(){\n          try {\n            indexDocs(base, docsPerThread, maxSleep);\n          } catch (Exception e) {\n            System.out.println(\"###############################CAUGHT EXCEPTION\");\n            e.printStackTrace();\n            ex = e;\n          }\n        }\n      };\n      threads[threadNum].start();\n    }\n\n    // optional: wait for commit?\n\n    for (int threadNum = 0; threadNum<nProducers; threadNum++) {\n      threads[threadNum].join();\n    }\n\n    if (sserver != null) {\n      sserver.blockUntilFinished();\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\"+(end-start) + \" throughput=\"+(nDocs*1000/(end-start)) + \" Exception=\"+ex);\n\n    // should server threads be marked as daemon?\n    // need a server.close()!!!\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47c952a4f0f0e9b74763a0609a3726dbb217164a","date":1347968413,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrJ#main(String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrJ#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    // String addr = \"http://odin.local:80/solr\";\n    // String addr = \"http://odin.local:8983/solr\";\n    String addr = \"http://127.0.0.1:8983/solr\";\n\n    int i = 0;\n    final int nDocs = Integer.parseInt(args[i++]);\n    final int nProducers = Integer.parseInt(args[i++]);\n    final int nConnections = Integer.parseInt(args[i++]);\n    final int maxSleep = Integer.parseInt(args[i++]);\n\n    ConcurrentUpdateSolrServer sserver = null;\n\n    // server = sserver = new ConcurrentUpdateSolrServer(addr,32,8);\n    server = sserver = new ConcurrentUpdateSolrServer(addr,64,nConnections);\n\n    server.deleteByQuery(\"*:*\");\n    server.commit();\n\n    long start = System.currentTimeMillis();\n\n    final int docsPerThread = nDocs / nProducers;\n\n    Thread[] threads = new Thread[nProducers];\n\n    for (int threadNum = 0; threadNum<nProducers; threadNum++) {\n      final int base = threadNum * docsPerThread;\n\n      threads[threadNum] = new Thread(\"add-thread\"+i) {\n        public void run(){\n          try {\n            indexDocs(base, docsPerThread, maxSleep);\n          } catch (Exception e) {\n            System.out.println(\"###############################CAUGHT EXCEPTION\");\n            e.printStackTrace();\n            ex = e;\n          }\n        }\n      };\n      threads[threadNum].start();\n    }\n\n    // optional: wait for commit?\n\n    for (int threadNum = 0; threadNum<nProducers; threadNum++) {\n      threads[threadNum].join();\n    }\n\n    if (sserver != null) {\n      sserver.blockUntilFinished();\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\"+(end-start) + \" throughput=\"+(nDocs*1000/(end-start)) + \" Exception=\"+ex);\n\n    // should server threads be marked as daemon?\n    // need a server.close()!!!\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    // String addr = \"http://odin.local:80/solr\";\n    // String addr = \"http://odin.local:8983/solr\";\n    String addr = \"http://localhost:8983/solr\";\n\n    int i = 0;\n    final int nDocs = Integer.parseInt(args[i++]);\n    final int nProducers = Integer.parseInt(args[i++]);\n    final int nConnections = Integer.parseInt(args[i++]);\n    final int maxSleep = Integer.parseInt(args[i++]);\n\n    ConcurrentUpdateSolrServer sserver = null;\n\n    // server = sserver = new ConcurrentUpdateSolrServer(addr,32,8);\n    server = sserver = new ConcurrentUpdateSolrServer(addr,64,nConnections);\n\n    server.deleteByQuery(\"*:*\");\n    server.commit();\n\n    long start = System.currentTimeMillis();\n\n    final int docsPerThread = nDocs / nProducers;\n\n    Thread[] threads = new Thread[nProducers];\n\n    for (int threadNum = 0; threadNum<nProducers; threadNum++) {\n      final int base = threadNum * docsPerThread;\n\n      threads[threadNum] = new Thread(\"add-thread\"+i) {\n        public void run(){\n          try {\n            indexDocs(base, docsPerThread, maxSleep);\n          } catch (Exception e) {\n            System.out.println(\"###############################CAUGHT EXCEPTION\");\n            e.printStackTrace();\n            ex = e;\n          }\n        }\n      };\n      threads[threadNum].start();\n    }\n\n    // optional: wait for commit?\n\n    for (int threadNum = 0; threadNum<nProducers; threadNum++) {\n      threads[threadNum].join();\n    }\n\n    if (sserver != null) {\n      sserver.blockUntilFinished();\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\"+(end-start) + \" throughput=\"+(nDocs*1000/(end-start)) + \" Exception=\"+ex);\n\n    // should server threads be marked as daemon?\n    // need a server.close()!!!\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrJ#main(String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrJ#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    // String addr = \"http://odin.local:80/solr\";\n    // String addr = \"http://odin.local:8983/solr\";\n    String addr = \"http://127.0.0.1:8983/solr\";\n\n    int i = 0;\n    final int nDocs = Integer.parseInt(args[i++]);\n    final int nProducers = Integer.parseInt(args[i++]);\n    final int nConnections = Integer.parseInt(args[i++]);\n    final int maxSleep = Integer.parseInt(args[i++]);\n\n    ConcurrentUpdateSolrServer sserver = null;\n\n    // server = sserver = new ConcurrentUpdateSolrServer(addr,32,8);\n    server = sserver = new ConcurrentUpdateSolrServer(addr,64,nConnections);\n\n    server.deleteByQuery(\"*:*\");\n    server.commit();\n\n    long start = System.currentTimeMillis();\n\n    final int docsPerThread = nDocs / nProducers;\n\n    Thread[] threads = new Thread[nProducers];\n\n    for (int threadNum = 0; threadNum<nProducers; threadNum++) {\n      final int base = threadNum * docsPerThread;\n\n      threads[threadNum] = new Thread(\"add-thread\"+i) {\n        @Override\n        public void run(){\n          try {\n            indexDocs(base, docsPerThread, maxSleep);\n          } catch (Exception e) {\n            System.out.println(\"###############################CAUGHT EXCEPTION\");\n            e.printStackTrace();\n            ex = e;\n          }\n        }\n      };\n      threads[threadNum].start();\n    }\n\n    // optional: wait for commit?\n\n    for (int threadNum = 0; threadNum<nProducers; threadNum++) {\n      threads[threadNum].join();\n    }\n\n    if (sserver != null) {\n      sserver.blockUntilFinished();\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\"+(end-start) + \" throughput=\"+(nDocs*1000/(end-start)) + \" Exception=\"+ex);\n\n    // should server threads be marked as daemon?\n    // need a server.close()!!!\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    // String addr = \"http://odin.local:80/solr\";\n    // String addr = \"http://odin.local:8983/solr\";\n    String addr = \"http://127.0.0.1:8983/solr\";\n\n    int i = 0;\n    final int nDocs = Integer.parseInt(args[i++]);\n    final int nProducers = Integer.parseInt(args[i++]);\n    final int nConnections = Integer.parseInt(args[i++]);\n    final int maxSleep = Integer.parseInt(args[i++]);\n\n    ConcurrentUpdateSolrServer sserver = null;\n\n    // server = sserver = new ConcurrentUpdateSolrServer(addr,32,8);\n    server = sserver = new ConcurrentUpdateSolrServer(addr,64,nConnections);\n\n    server.deleteByQuery(\"*:*\");\n    server.commit();\n\n    long start = System.currentTimeMillis();\n\n    final int docsPerThread = nDocs / nProducers;\n\n    Thread[] threads = new Thread[nProducers];\n\n    for (int threadNum = 0; threadNum<nProducers; threadNum++) {\n      final int base = threadNum * docsPerThread;\n\n      threads[threadNum] = new Thread(\"add-thread\"+i) {\n        public void run(){\n          try {\n            indexDocs(base, docsPerThread, maxSleep);\n          } catch (Exception e) {\n            System.out.println(\"###############################CAUGHT EXCEPTION\");\n            e.printStackTrace();\n            ex = e;\n          }\n        }\n      };\n      threads[threadNum].start();\n    }\n\n    // optional: wait for commit?\n\n    for (int threadNum = 0; threadNum<nProducers; threadNum++) {\n      threads[threadNum].join();\n    }\n\n    if (sserver != null) {\n      sserver.blockUntilFinished();\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\"+(end-start) + \" throughput=\"+(nDocs*1000/(end-start)) + \" Exception=\"+ex);\n\n    // should server threads be marked as daemon?\n    // need a server.close()!!!\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrJ#main(String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrJ#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    // String addr = \"http://odin.local:80/solr\";\n    // String addr = \"http://odin.local:8983/solr\";\n    String addr = \"http://127.0.0.1:8983/solr\";\n\n    int i = 0;\n    final int nDocs = Integer.parseInt(args[i++]);\n    final int nProducers = Integer.parseInt(args[i++]);\n    final int nConnections = Integer.parseInt(args[i++]);\n    final int maxSleep = Integer.parseInt(args[i++]);\n\n    ConcurrentUpdateSolrServer sserver = null;\n\n    // server = sserver = new ConcurrentUpdateSolrServer(addr,32,8);\n    server = sserver = new ConcurrentUpdateSolrServer(addr,64,nConnections);\n\n    server.deleteByQuery(\"*:*\");\n    server.commit();\n\n    long start = System.currentTimeMillis();\n\n    final int docsPerThread = nDocs / nProducers;\n\n    Thread[] threads = new Thread[nProducers];\n\n    for (int threadNum = 0; threadNum<nProducers; threadNum++) {\n      final int base = threadNum * docsPerThread;\n\n      threads[threadNum] = new Thread(\"add-thread\"+i) {\n        @Override\n        public void run(){\n          try {\n            indexDocs(base, docsPerThread, maxSleep);\n          } catch (Exception e) {\n            System.out.println(\"###############################CAUGHT EXCEPTION\");\n            e.printStackTrace();\n            ex = e;\n          }\n        }\n      };\n      threads[threadNum].start();\n    }\n\n    // optional: wait for commit?\n\n    for (int threadNum = 0; threadNum<nProducers; threadNum++) {\n      threads[threadNum].join();\n    }\n\n    if (sserver != null) {\n      sserver.blockUntilFinished();\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\"+(end-start) + \" throughput=\"+(nDocs*1000/(end-start)) + \" Exception=\"+ex);\n\n    // should server threads be marked as daemon?\n    // need a server.close()!!!\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    // String addr = \"http://odin.local:80/solr\";\n    // String addr = \"http://odin.local:8983/solr\";\n    String addr = \"http://127.0.0.1:8983/solr\";\n\n    int i = 0;\n    final int nDocs = Integer.parseInt(args[i++]);\n    final int nProducers = Integer.parseInt(args[i++]);\n    final int nConnections = Integer.parseInt(args[i++]);\n    final int maxSleep = Integer.parseInt(args[i++]);\n\n    ConcurrentUpdateSolrServer sserver = null;\n\n    // server = sserver = new ConcurrentUpdateSolrServer(addr,32,8);\n    server = sserver = new ConcurrentUpdateSolrServer(addr,64,nConnections);\n\n    server.deleteByQuery(\"*:*\");\n    server.commit();\n\n    long start = System.currentTimeMillis();\n\n    final int docsPerThread = nDocs / nProducers;\n\n    Thread[] threads = new Thread[nProducers];\n\n    for (int threadNum = 0; threadNum<nProducers; threadNum++) {\n      final int base = threadNum * docsPerThread;\n\n      threads[threadNum] = new Thread(\"add-thread\"+i) {\n        public void run(){\n          try {\n            indexDocs(base, docsPerThread, maxSleep);\n          } catch (Exception e) {\n            System.out.println(\"###############################CAUGHT EXCEPTION\");\n            e.printStackTrace();\n            ex = e;\n          }\n        }\n      };\n      threads[threadNum].start();\n    }\n\n    // optional: wait for commit?\n\n    for (int threadNum = 0; threadNum<nProducers; threadNum++) {\n      threads[threadNum].join();\n    }\n\n    if (sserver != null) {\n      sserver.blockUntilFinished();\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\"+(end-start) + \" throughput=\"+(nDocs*1000/(end-start)) + \" Exception=\"+ex);\n\n    // should server threads be marked as daemon?\n    // need a server.close()!!!\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrJ#main(String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrJ#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    // String addr = \"http://odin.local:80/solr\";\n    // String addr = \"http://odin.local:8983/solr\";\n    String addr = \"http://127.0.0.1:8983/solr\";\n\n    int i = 0;\n    final int nDocs = Integer.parseInt(args[i++]);\n    final int nProducers = Integer.parseInt(args[i++]);\n    final int nConnections = Integer.parseInt(args[i++]);\n    final int maxSleep = Integer.parseInt(args[i++]);\n\n    ConcurrentUpdateSolrClient concurrentClient = null;\n\n    // server = concurrentClient = new ConcurrentUpdateSolrServer(addr,32,8);\n    client = concurrentClient = new ConcurrentUpdateSolrClient(addr,64,nConnections);\n\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n\n    long start = System.currentTimeMillis();\n\n    final int docsPerThread = nDocs / nProducers;\n\n    Thread[] threads = new Thread[nProducers];\n\n    for (int threadNum = 0; threadNum<nProducers; threadNum++) {\n      final int base = threadNum * docsPerThread;\n\n      threads[threadNum] = new Thread(\"add-thread\"+i) {\n        @Override\n        public void run(){\n          try {\n            indexDocs(base, docsPerThread, maxSleep);\n          } catch (Exception e) {\n            System.out.println(\"###############################CAUGHT EXCEPTION\");\n            e.printStackTrace();\n            ex = e;\n          }\n        }\n      };\n      threads[threadNum].start();\n    }\n\n    // optional: wait for commit?\n\n    for (int threadNum = 0; threadNum<nProducers; threadNum++) {\n      threads[threadNum].join();\n    }\n\n    if (concurrentClient != null) {\n      concurrentClient.blockUntilFinished();\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\"+(end-start) + \" throughput=\"+(nDocs*1000/(end-start)) + \" Exception=\"+ex);\n\n    // should server threads be marked as daemon?\n    // need a server.close()!!!\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    // String addr = \"http://odin.local:80/solr\";\n    // String addr = \"http://odin.local:8983/solr\";\n    String addr = \"http://127.0.0.1:8983/solr\";\n\n    int i = 0;\n    final int nDocs = Integer.parseInt(args[i++]);\n    final int nProducers = Integer.parseInt(args[i++]);\n    final int nConnections = Integer.parseInt(args[i++]);\n    final int maxSleep = Integer.parseInt(args[i++]);\n\n    ConcurrentUpdateSolrServer sserver = null;\n\n    // server = sserver = new ConcurrentUpdateSolrServer(addr,32,8);\n    server = sserver = new ConcurrentUpdateSolrServer(addr,64,nConnections);\n\n    server.deleteByQuery(\"*:*\");\n    server.commit();\n\n    long start = System.currentTimeMillis();\n\n    final int docsPerThread = nDocs / nProducers;\n\n    Thread[] threads = new Thread[nProducers];\n\n    for (int threadNum = 0; threadNum<nProducers; threadNum++) {\n      final int base = threadNum * docsPerThread;\n\n      threads[threadNum] = new Thread(\"add-thread\"+i) {\n        @Override\n        public void run(){\n          try {\n            indexDocs(base, docsPerThread, maxSleep);\n          } catch (Exception e) {\n            System.out.println(\"###############################CAUGHT EXCEPTION\");\n            e.printStackTrace();\n            ex = e;\n          }\n        }\n      };\n      threads[threadNum].start();\n    }\n\n    // optional: wait for commit?\n\n    for (int threadNum = 0; threadNum<nProducers; threadNum++) {\n      threads[threadNum].join();\n    }\n\n    if (sserver != null) {\n      sserver.blockUntilFinished();\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\"+(end-start) + \" throughput=\"+(nDocs*1000/(end-start)) + \" Exception=\"+ex);\n\n    // should server threads be marked as daemon?\n    // need a server.close()!!!\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrJ#main(String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrJ#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    // String addr = \"http://odin.local:80/solr\";\n    // String addr = \"http://odin.local:8983/solr\";\n    String addr = \"http://127.0.0.1:8983/solr\";\n\n    int i = 0;\n    final int nDocs = Integer.parseInt(args[i++]);\n    final int nProducers = Integer.parseInt(args[i++]);\n    final int nConnections = Integer.parseInt(args[i++]);\n    final int maxSleep = Integer.parseInt(args[i++]);\n\n    ConcurrentUpdateSolrClient concurrentClient = null;\n\n    // server = concurrentClient = new ConcurrentUpdateSolrServer(addr,32,8);\n    client = concurrentClient = new ConcurrentUpdateSolrClient(addr,64,nConnections);\n\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n\n    final RTimer timer = new RTimer();\n\n    final int docsPerThread = nDocs / nProducers;\n\n    Thread[] threads = new Thread[nProducers];\n\n    for (int threadNum = 0; threadNum<nProducers; threadNum++) {\n      final int base = threadNum * docsPerThread;\n\n      threads[threadNum] = new Thread(\"add-thread\"+i) {\n        @Override\n        public void run(){\n          try {\n            indexDocs(base, docsPerThread, maxSleep);\n          } catch (Exception e) {\n            System.out.println(\"###############################CAUGHT EXCEPTION\");\n            e.printStackTrace();\n            ex = e;\n          }\n        }\n      };\n      threads[threadNum].start();\n    }\n\n    // optional: wait for commit?\n\n    for (int threadNum = 0; threadNum<nProducers; threadNum++) {\n      threads[threadNum].join();\n    }\n\n    if (concurrentClient != null) {\n      concurrentClient.blockUntilFinished();\n    }\n\n    double elapsed = timer.getTime();\n    System.out.println(\"time=\"+elapsed + \" throughput=\"+(nDocs*1000/elapsed) + \" Exception=\"+ex);\n\n    // should server threads be marked as daemon?\n    // need a server.close()!!!\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    // String addr = \"http://odin.local:80/solr\";\n    // String addr = \"http://odin.local:8983/solr\";\n    String addr = \"http://127.0.0.1:8983/solr\";\n\n    int i = 0;\n    final int nDocs = Integer.parseInt(args[i++]);\n    final int nProducers = Integer.parseInt(args[i++]);\n    final int nConnections = Integer.parseInt(args[i++]);\n    final int maxSleep = Integer.parseInt(args[i++]);\n\n    ConcurrentUpdateSolrClient concurrentClient = null;\n\n    // server = concurrentClient = new ConcurrentUpdateSolrServer(addr,32,8);\n    client = concurrentClient = new ConcurrentUpdateSolrClient(addr,64,nConnections);\n\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n\n    long start = System.currentTimeMillis();\n\n    final int docsPerThread = nDocs / nProducers;\n\n    Thread[] threads = new Thread[nProducers];\n\n    for (int threadNum = 0; threadNum<nProducers; threadNum++) {\n      final int base = threadNum * docsPerThread;\n\n      threads[threadNum] = new Thread(\"add-thread\"+i) {\n        @Override\n        public void run(){\n          try {\n            indexDocs(base, docsPerThread, maxSleep);\n          } catch (Exception e) {\n            System.out.println(\"###############################CAUGHT EXCEPTION\");\n            e.printStackTrace();\n            ex = e;\n          }\n        }\n      };\n      threads[threadNum].start();\n    }\n\n    // optional: wait for commit?\n\n    for (int threadNum = 0; threadNum<nProducers; threadNum++) {\n      threads[threadNum].join();\n    }\n\n    if (concurrentClient != null) {\n      concurrentClient.blockUntilFinished();\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"time=\"+(end-start) + \" throughput=\"+(nDocs*1000/(end-start)) + \" Exception=\"+ex);\n\n    // should server threads be marked as daemon?\n    // need a server.close()!!!\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrJ#main(String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrJ#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    // String addr = \"http://odin.local:80/solr\";\n    // String addr = \"http://odin.local:8983/solr\";\n    String addr = \"http://127.0.0.1:8983/solr\";\n\n    int i = 0;\n    final int nDocs = Integer.parseInt(args[i++]);\n    final int nProducers = Integer.parseInt(args[i++]);\n    final int nConnections = Integer.parseInt(args[i++]);\n    final int maxSleep = Integer.parseInt(args[i++]);\n\n    ConcurrentUpdateSolrClient concurrentClient = null;\n\n    // server = concurrentClient = new ConcurrentUpdateSolrServer(addr,32,8);\n    client = concurrentClient = getConcurrentUpdateSolrClient(addr,64,nConnections);\n\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n\n    final RTimer timer = new RTimer();\n\n    final int docsPerThread = nDocs / nProducers;\n\n    Thread[] threads = new Thread[nProducers];\n\n    for (int threadNum = 0; threadNum<nProducers; threadNum++) {\n      final int base = threadNum * docsPerThread;\n\n      threads[threadNum] = new Thread(\"add-thread\"+i) {\n        @Override\n        public void run(){\n          try {\n            indexDocs(base, docsPerThread, maxSleep);\n          } catch (Exception e) {\n            System.out.println(\"###############################CAUGHT EXCEPTION\");\n            e.printStackTrace();\n            ex = e;\n          }\n        }\n      };\n      threads[threadNum].start();\n    }\n\n    // optional: wait for commit?\n\n    for (int threadNum = 0; threadNum<nProducers; threadNum++) {\n      threads[threadNum].join();\n    }\n\n    if (concurrentClient != null) {\n      concurrentClient.blockUntilFinished();\n    }\n\n    double elapsed = timer.getTime();\n    System.out.println(\"time=\"+elapsed + \" throughput=\"+(nDocs*1000/elapsed) + \" Exception=\"+ex);\n\n    // should server threads be marked as daemon?\n    // need a server.close()!!!\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    // String addr = \"http://odin.local:80/solr\";\n    // String addr = \"http://odin.local:8983/solr\";\n    String addr = \"http://127.0.0.1:8983/solr\";\n\n    int i = 0;\n    final int nDocs = Integer.parseInt(args[i++]);\n    final int nProducers = Integer.parseInt(args[i++]);\n    final int nConnections = Integer.parseInt(args[i++]);\n    final int maxSleep = Integer.parseInt(args[i++]);\n\n    ConcurrentUpdateSolrClient concurrentClient = null;\n\n    // server = concurrentClient = new ConcurrentUpdateSolrServer(addr,32,8);\n    client = concurrentClient = new ConcurrentUpdateSolrClient(addr,64,nConnections);\n\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n\n    final RTimer timer = new RTimer();\n\n    final int docsPerThread = nDocs / nProducers;\n\n    Thread[] threads = new Thread[nProducers];\n\n    for (int threadNum = 0; threadNum<nProducers; threadNum++) {\n      final int base = threadNum * docsPerThread;\n\n      threads[threadNum] = new Thread(\"add-thread\"+i) {\n        @Override\n        public void run(){\n          try {\n            indexDocs(base, docsPerThread, maxSleep);\n          } catch (Exception e) {\n            System.out.println(\"###############################CAUGHT EXCEPTION\");\n            e.printStackTrace();\n            ex = e;\n          }\n        }\n      };\n      threads[threadNum].start();\n    }\n\n    // optional: wait for commit?\n\n    for (int threadNum = 0; threadNum<nProducers; threadNum++) {\n      threads[threadNum].join();\n    }\n\n    if (concurrentClient != null) {\n      concurrentClient.blockUntilFinished();\n    }\n\n    double elapsed = timer.getTime();\n    System.out.println(\"time=\"+elapsed + \" throughput=\"+(nDocs*1000/elapsed) + \" Exception=\"+ex);\n\n    // should server threads be marked as daemon?\n    // need a server.close()!!!\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrJ#main(String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrJ#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    // String addr = \"http://odin.local:80/solr\";\n    // String addr = \"http://odin.local:8983/solr\";\n    String addr = \"http://127.0.0.1:8983/solr\";\n\n    int i = 0;\n    final int nDocs = Integer.parseInt(args[i++]);\n    final int nProducers = Integer.parseInt(args[i++]);\n    final int nConnections = Integer.parseInt(args[i++]);\n    final int maxSleep = Integer.parseInt(args[i++]);\n\n    ConcurrentUpdateSolrClient concurrentClient = null;\n\n    // server = concurrentClient = new ConcurrentUpdateSolrServer(addr,32,8);\n    client = concurrentClient = getConcurrentUpdateSolrClient(addr,64,nConnections);\n\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n\n    final RTimer timer = new RTimer();\n\n    final int docsPerThread = nDocs / nProducers;\n\n    Thread[] threads = new Thread[nProducers];\n\n    for (int threadNum = 0; threadNum<nProducers; threadNum++) {\n      final int base = threadNum * docsPerThread;\n\n      threads[threadNum] = new Thread(\"add-thread\"+i) {\n        @Override\n        public void run(){\n          try {\n            indexDocs(base, docsPerThread, maxSleep);\n          } catch (Exception e) {\n            System.out.println(\"###############################CAUGHT EXCEPTION\");\n            e.printStackTrace();\n            ex = e;\n          }\n        }\n      };\n      threads[threadNum].start();\n    }\n\n    // optional: wait for commit?\n\n    for (int threadNum = 0; threadNum<nProducers; threadNum++) {\n      threads[threadNum].join();\n    }\n\n    if (concurrentClient != null) {\n      concurrentClient.blockUntilFinished();\n    }\n\n    double elapsed = timer.getTime();\n    System.out.println(\"time=\"+elapsed + \" throughput=\"+(nDocs*1000/elapsed) + \" Exception=\"+ex);\n\n    // should server threads be marked as daemon?\n    // need a server.close()!!!\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    // String addr = \"http://odin.local:80/solr\";\n    // String addr = \"http://odin.local:8983/solr\";\n    String addr = \"http://127.0.0.1:8983/solr\";\n\n    int i = 0;\n    final int nDocs = Integer.parseInt(args[i++]);\n    final int nProducers = Integer.parseInt(args[i++]);\n    final int nConnections = Integer.parseInt(args[i++]);\n    final int maxSleep = Integer.parseInt(args[i++]);\n\n    ConcurrentUpdateSolrClient concurrentClient = null;\n\n    // server = concurrentClient = new ConcurrentUpdateSolrServer(addr,32,8);\n    client = concurrentClient = new ConcurrentUpdateSolrClient(addr,64,nConnections);\n\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n\n    final RTimer timer = new RTimer();\n\n    final int docsPerThread = nDocs / nProducers;\n\n    Thread[] threads = new Thread[nProducers];\n\n    for (int threadNum = 0; threadNum<nProducers; threadNum++) {\n      final int base = threadNum * docsPerThread;\n\n      threads[threadNum] = new Thread(\"add-thread\"+i) {\n        @Override\n        public void run(){\n          try {\n            indexDocs(base, docsPerThread, maxSleep);\n          } catch (Exception e) {\n            System.out.println(\"###############################CAUGHT EXCEPTION\");\n            e.printStackTrace();\n            ex = e;\n          }\n        }\n      };\n      threads[threadNum].start();\n    }\n\n    // optional: wait for commit?\n\n    for (int threadNum = 0; threadNum<nProducers; threadNum++) {\n      threads[threadNum].join();\n    }\n\n    if (concurrentClient != null) {\n      concurrentClient.blockUntilFinished();\n    }\n\n    double elapsed = timer.getTime();\n    System.out.println(\"time=\"+elapsed + \" throughput=\"+(nDocs*1000/elapsed) + \" Exception=\"+ex);\n\n    // should server threads be marked as daemon?\n    // need a server.close()!!!\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["47c952a4f0f0e9b74763a0609a3726dbb217164a","7530de27b87b961b51f01bd1299b7004d46e8823"],"47c952a4f0f0e9b74763a0609a3726dbb217164a":["cad90908fe6b90a8b7310dc8c2dceac34341580c"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cad90908fe6b90a8b7310dc8c2dceac34341580c"],"cad90908fe6b90a8b7310dc8c2dceac34341580c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["bcf9886c8ff537aafde14de48ebf744f5673f08b","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["47c952a4f0f0e9b74763a0609a3726dbb217164a"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cad90908fe6b90a8b7310dc8c2dceac34341580c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"47c952a4f0f0e9b74763a0609a3726dbb217164a":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"cad90908fe6b90a8b7310dc8c2dceac34341580c":["47c952a4f0f0e9b74763a0609a3726dbb217164a","c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","cad90908fe6b90a8b7310dc8c2dceac34341580c","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"bafca15d8e408346a67f4282ad1143b88023893b":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","bafca15d8e408346a67f4282ad1143b88023893b"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}