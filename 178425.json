{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionFieldsProducer#CompletionFieldsProducer(String,SegmentReadState,FSTLoadMode).mjava","commits":[{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionFieldsProducer#CompletionFieldsProducer(String,SegmentReadState,FSTLoadMode).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionFieldsProducer#CompletionFieldsProducer(SegmentReadState,FSTLoadMode).mjava","sourceNew":"  CompletionFieldsProducer(String codecName, SegmentReadState state, FSTLoadMode fstLoadMode) throws IOException {\n    String indexFile = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, INDEX_EXTENSION);\n    delegateFieldsProducer = null;\n    boolean success = false;\n\n    try (ChecksumIndexInput index = state.directory.openChecksumInput(indexFile, state.context)) {\n      // open up dict file containing all fsts\n      String dictFile = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, DICT_EXTENSION);\n      dictIn = state.directory.openInput(dictFile, state.context);\n      CodecUtil.checkIndexHeader(dictIn, codecName, COMPLETION_CODEC_VERSION, COMPLETION_VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      // just validate the footer for the dictIn\n      CodecUtil.retrieveChecksum(dictIn);\n\n      // open up index file (fieldNumber, offset)\n      CodecUtil.checkIndexHeader(index, codecName, COMPLETION_CODEC_VERSION, COMPLETION_VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      // load delegate PF\n      PostingsFormat delegatePostingsFormat = PostingsFormat.forName(index.readString());\n      delegateFieldsProducer = delegatePostingsFormat.fieldsProducer(state);\n\n      // read suggest field numbers and their offsets in the terms file from index\n      int numFields = index.readVInt();\n      readers = new HashMap<>(numFields);\n      for (int i = 0; i < numFields; i++) {\n        int fieldNumber = index.readVInt();\n        long offset = index.readVLong();\n        long minWeight = index.readVLong();\n        long maxWeight = index.readVLong();\n        byte type = index.readByte();\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldNumber);\n        // we don't load the FST yet\n        readers.put(fieldInfo.name, new CompletionsTermsReader(dictIn, offset, minWeight, maxWeight, type, fstLoadMode));\n      }\n      CodecUtil.checkFooter(index);\n      success = true;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(delegateFieldsProducer, dictIn);\n      }\n    }\n  }\n\n","sourceOld":"  CompletionFieldsProducer(SegmentReadState state, FSTLoadMode fstLoadMode) throws IOException {\n    String indexFile = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, INDEX_EXTENSION);\n    delegateFieldsProducer = null;\n    boolean success = false;\n\n    try (ChecksumIndexInput index = state.directory.openChecksumInput(indexFile, state.context)) {\n      // open up dict file containing all fsts\n      String dictFile = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, DICT_EXTENSION);\n      dictIn = state.directory.openInput(dictFile, state.context);\n      CodecUtil.checkIndexHeader(dictIn, CODEC_NAME, COMPLETION_CODEC_VERSION, COMPLETION_VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      // just validate the footer for the dictIn\n      CodecUtil.retrieveChecksum(dictIn);\n\n      // open up index file (fieldNumber, offset)\n      CodecUtil.checkIndexHeader(index, CODEC_NAME, COMPLETION_CODEC_VERSION, COMPLETION_VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      // load delegate PF\n      PostingsFormat delegatePostingsFormat = PostingsFormat.forName(index.readString());\n      delegateFieldsProducer = delegatePostingsFormat.fieldsProducer(state);\n\n      // read suggest field numbers and their offsets in the terms file from index\n      int numFields = index.readVInt();\n      readers = new HashMap<>(numFields);\n      for (int i = 0; i < numFields; i++) {\n        int fieldNumber = index.readVInt();\n        long offset = index.readVLong();\n        long minWeight = index.readVLong();\n        long maxWeight = index.readVLong();\n        byte type = index.readByte();\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(fieldNumber);\n        // we don't load the FST yet\n        readers.put(fieldInfo.name, new CompletionsTermsReader(dictIn, offset, minWeight, maxWeight, type, fstLoadMode));\n      }\n      CodecUtil.checkFooter(index);\n      success = true;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(delegateFieldsProducer, dictIn);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"]},"commit2Childs":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}