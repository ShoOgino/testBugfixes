{"path":"solr/src/java/org/apache/solr/spelling/suggest/jaspell/JaspellTernarySearchTrie#getOrCreateNode(String).mjava","commits":[{"id":"4ff4f089150b5073dcd4fa1e2018954e3a1eb1af","date":1282571040,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/spelling/suggest/jaspell/JaspellTernarySearchTrie#getOrCreateNode(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the node indexed by key, creating that node if it doesn't exist,\n   * and creating any required intermediate nodes if they don't exist.\n   * \n   *@param key\n   *          A <code>String</code> that indexes the node that is returned.\n   *@return The node object indexed by key. This object is an instance of an\n   *         inner class named <code>TernarySearchTrie.TSTNode</code>.\n   *@exception NullPointerException\n   *              If the key is <code>null</code>.\n   *@exception IllegalArgumentException\n   *              If the key is an empty <code>String</code>.\n   */\n  protected TSTNode getOrCreateNode(String key) throws NullPointerException,\n          IllegalArgumentException {\n    if (key == null) {\n      throw new NullPointerException(\n              \"attempt to get or create node with null key\");\n    }\n    if (key.length() == 0) {\n      throw new IllegalArgumentException(\n              \"attempt to get or create node with key of zero length\");\n    }\n    if (rootNode == null) {\n      rootNode = new TSTNode(key.charAt(0), null);\n    }\n    TSTNode currentNode = rootNode;\n    int charIndex = 0;\n    while (true) {\n      int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n              currentNode.splitchar);\n      if (charComp == 0) {\n        charIndex++;\n        if (charIndex == key.length()) {\n          return currentNode;\n        }\n        if (currentNode.relatives[TSTNode.EQKID] == null) {\n          currentNode.relatives[TSTNode.EQKID] = new TSTNode(key\n                  .charAt(charIndex), currentNode);\n        }\n        currentNode = currentNode.relatives[TSTNode.EQKID];\n      } else if (charComp < 0) {\n        if (currentNode.relatives[TSTNode.LOKID] == null) {\n          currentNode.relatives[TSTNode.LOKID] = new TSTNode(key\n                  .charAt(charIndex), currentNode);\n        }\n        currentNode = currentNode.relatives[TSTNode.LOKID];\n      } else {\n        if (currentNode.relatives[TSTNode.HIKID] == null) {\n          currentNode.relatives[TSTNode.HIKID] = new TSTNode(key\n                  .charAt(charIndex), currentNode);\n        }\n        currentNode = currentNode.relatives[TSTNode.HIKID];\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/spelling/suggest/jaspell/JaspellTernarySearchTrie#getOrCreateNode(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the node indexed by key, creating that node if it doesn't exist,\n   * and creating any required intermediate nodes if they don't exist.\n   * \n   *@param key\n   *          A <code>String</code> that indexes the node that is returned.\n   *@return The node object indexed by key. This object is an instance of an\n   *         inner class named <code>TernarySearchTrie.TSTNode</code>.\n   *@exception NullPointerException\n   *              If the key is <code>null</code>.\n   *@exception IllegalArgumentException\n   *              If the key is an empty <code>String</code>.\n   */\n  protected TSTNode getOrCreateNode(String key) throws NullPointerException,\n          IllegalArgumentException {\n    if (key == null) {\n      throw new NullPointerException(\n              \"attempt to get or create node with null key\");\n    }\n    if (key.length() == 0) {\n      throw new IllegalArgumentException(\n              \"attempt to get or create node with key of zero length\");\n    }\n    if (rootNode == null) {\n      rootNode = new TSTNode(key.charAt(0), null);\n    }\n    TSTNode currentNode = rootNode;\n    int charIndex = 0;\n    while (true) {\n      int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n              currentNode.splitchar);\n      if (charComp == 0) {\n        charIndex++;\n        if (charIndex == key.length()) {\n          return currentNode;\n        }\n        if (currentNode.relatives[TSTNode.EQKID] == null) {\n          currentNode.relatives[TSTNode.EQKID] = new TSTNode(key\n                  .charAt(charIndex), currentNode);\n        }\n        currentNode = currentNode.relatives[TSTNode.EQKID];\n      } else if (charComp < 0) {\n        if (currentNode.relatives[TSTNode.LOKID] == null) {\n          currentNode.relatives[TSTNode.LOKID] = new TSTNode(key\n                  .charAt(charIndex), currentNode);\n        }\n        currentNode = currentNode.relatives[TSTNode.LOKID];\n      } else {\n        if (currentNode.relatives[TSTNode.HIKID] == null) {\n          currentNode.relatives[TSTNode.HIKID] = new TSTNode(key\n                  .charAt(charIndex), currentNode);\n        }\n        currentNode = currentNode.relatives[TSTNode.HIKID];\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#getOrCreateNode(String).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/jaspell/JaspellTernarySearchTrie#getOrCreateNode(String).mjava","sourceNew":"  /**\n   * Returns the node indexed by key, creating that node if it doesn't exist,\n   * and creating any required intermediate nodes if they don't exist.\n   * \n   *@param key\n   *          A <code>String</code> that indexes the node that is returned.\n   *@return The node object indexed by key. This object is an instance of an\n   *         inner class named <code>TernarySearchTrie.TSTNode</code>.\n   *@exception NullPointerException\n   *              If the key is <code>null</code>.\n   *@exception IllegalArgumentException\n   *              If the key is an empty <code>String</code>.\n   */\n  protected TSTNode getOrCreateNode(String key) throws NullPointerException,\n          IllegalArgumentException {\n    if (key == null) {\n      throw new NullPointerException(\n              \"attempt to get or create node with null key\");\n    }\n    if (key.length() == 0) {\n      throw new IllegalArgumentException(\n              \"attempt to get or create node with key of zero length\");\n    }\n    if (rootNode == null) {\n      rootNode = new TSTNode(key.charAt(0), null);\n    }\n    TSTNode currentNode = rootNode;\n    int charIndex = 0;\n    while (true) {\n      int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n              currentNode.splitchar);\n      if (charComp == 0) {\n        charIndex++;\n        if (charIndex == key.length()) {\n          return currentNode;\n        }\n        if (currentNode.relatives[TSTNode.EQKID] == null) {\n          currentNode.relatives[TSTNode.EQKID] = new TSTNode(key\n                  .charAt(charIndex), currentNode);\n        }\n        currentNode = currentNode.relatives[TSTNode.EQKID];\n      } else if (charComp < 0) {\n        if (currentNode.relatives[TSTNode.LOKID] == null) {\n          currentNode.relatives[TSTNode.LOKID] = new TSTNode(key\n                  .charAt(charIndex), currentNode);\n        }\n        currentNode = currentNode.relatives[TSTNode.LOKID];\n      } else {\n        if (currentNode.relatives[TSTNode.HIKID] == null) {\n          currentNode.relatives[TSTNode.HIKID] = new TSTNode(key\n                  .charAt(charIndex), currentNode);\n        }\n        currentNode = currentNode.relatives[TSTNode.HIKID];\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the node indexed by key, creating that node if it doesn't exist,\n   * and creating any required intermediate nodes if they don't exist.\n   * \n   *@param key\n   *          A <code>String</code> that indexes the node that is returned.\n   *@return The node object indexed by key. This object is an instance of an\n   *         inner class named <code>TernarySearchTrie.TSTNode</code>.\n   *@exception NullPointerException\n   *              If the key is <code>null</code>.\n   *@exception IllegalArgumentException\n   *              If the key is an empty <code>String</code>.\n   */\n  protected TSTNode getOrCreateNode(String key) throws NullPointerException,\n          IllegalArgumentException {\n    if (key == null) {\n      throw new NullPointerException(\n              \"attempt to get or create node with null key\");\n    }\n    if (key.length() == 0) {\n      throw new IllegalArgumentException(\n              \"attempt to get or create node with key of zero length\");\n    }\n    if (rootNode == null) {\n      rootNode = new TSTNode(key.charAt(0), null);\n    }\n    TSTNode currentNode = rootNode;\n    int charIndex = 0;\n    while (true) {\n      int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n              currentNode.splitchar);\n      if (charComp == 0) {\n        charIndex++;\n        if (charIndex == key.length()) {\n          return currentNode;\n        }\n        if (currentNode.relatives[TSTNode.EQKID] == null) {\n          currentNode.relatives[TSTNode.EQKID] = new TSTNode(key\n                  .charAt(charIndex), currentNode);\n        }\n        currentNode = currentNode.relatives[TSTNode.EQKID];\n      } else if (charComp < 0) {\n        if (currentNode.relatives[TSTNode.LOKID] == null) {\n          currentNode.relatives[TSTNode.LOKID] = new TSTNode(key\n                  .charAt(charIndex), currentNode);\n        }\n        currentNode = currentNode.relatives[TSTNode.LOKID];\n      } else {\n        if (currentNode.relatives[TSTNode.HIKID] == null) {\n          currentNode.relatives[TSTNode.HIKID] = new TSTNode(key\n                  .charAt(charIndex), currentNode);\n        }\n        currentNode = currentNode.relatives[TSTNode.HIKID];\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#getOrCreateNode(String).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/jaspell/JaspellTernarySearchTrie#getOrCreateNode(String).mjava","sourceNew":"  /**\n   * Returns the node indexed by key, creating that node if it doesn't exist,\n   * and creating any required intermediate nodes if they don't exist.\n   * \n   *@param key\n   *          A <code>String</code> that indexes the node that is returned.\n   *@return The node object indexed by key. This object is an instance of an\n   *         inner class named <code>TernarySearchTrie.TSTNode</code>.\n   *@exception NullPointerException\n   *              If the key is <code>null</code>.\n   *@exception IllegalArgumentException\n   *              If the key is an empty <code>String</code>.\n   */\n  protected TSTNode getOrCreateNode(String key) throws NullPointerException,\n          IllegalArgumentException {\n    if (key == null) {\n      throw new NullPointerException(\n              \"attempt to get or create node with null key\");\n    }\n    if (key.length() == 0) {\n      throw new IllegalArgumentException(\n              \"attempt to get or create node with key of zero length\");\n    }\n    if (rootNode == null) {\n      rootNode = new TSTNode(key.charAt(0), null);\n    }\n    TSTNode currentNode = rootNode;\n    int charIndex = 0;\n    while (true) {\n      int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n              currentNode.splitchar);\n      if (charComp == 0) {\n        charIndex++;\n        if (charIndex == key.length()) {\n          return currentNode;\n        }\n        if (currentNode.relatives[TSTNode.EQKID] == null) {\n          currentNode.relatives[TSTNode.EQKID] = new TSTNode(key\n                  .charAt(charIndex), currentNode);\n        }\n        currentNode = currentNode.relatives[TSTNode.EQKID];\n      } else if (charComp < 0) {\n        if (currentNode.relatives[TSTNode.LOKID] == null) {\n          currentNode.relatives[TSTNode.LOKID] = new TSTNode(key\n                  .charAt(charIndex), currentNode);\n        }\n        currentNode = currentNode.relatives[TSTNode.LOKID];\n      } else {\n        if (currentNode.relatives[TSTNode.HIKID] == null) {\n          currentNode.relatives[TSTNode.HIKID] = new TSTNode(key\n                  .charAt(charIndex), currentNode);\n        }\n        currentNode = currentNode.relatives[TSTNode.HIKID];\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the node indexed by key, creating that node if it doesn't exist,\n   * and creating any required intermediate nodes if they don't exist.\n   * \n   *@param key\n   *          A <code>String</code> that indexes the node that is returned.\n   *@return The node object indexed by key. This object is an instance of an\n   *         inner class named <code>TernarySearchTrie.TSTNode</code>.\n   *@exception NullPointerException\n   *              If the key is <code>null</code>.\n   *@exception IllegalArgumentException\n   *              If the key is an empty <code>String</code>.\n   */\n  protected TSTNode getOrCreateNode(String key) throws NullPointerException,\n          IllegalArgumentException {\n    if (key == null) {\n      throw new NullPointerException(\n              \"attempt to get or create node with null key\");\n    }\n    if (key.length() == 0) {\n      throw new IllegalArgumentException(\n              \"attempt to get or create node with key of zero length\");\n    }\n    if (rootNode == null) {\n      rootNode = new TSTNode(key.charAt(0), null);\n    }\n    TSTNode currentNode = rootNode;\n    int charIndex = 0;\n    while (true) {\n      int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n              currentNode.splitchar);\n      if (charComp == 0) {\n        charIndex++;\n        if (charIndex == key.length()) {\n          return currentNode;\n        }\n        if (currentNode.relatives[TSTNode.EQKID] == null) {\n          currentNode.relatives[TSTNode.EQKID] = new TSTNode(key\n                  .charAt(charIndex), currentNode);\n        }\n        currentNode = currentNode.relatives[TSTNode.EQKID];\n      } else if (charComp < 0) {\n        if (currentNode.relatives[TSTNode.LOKID] == null) {\n          currentNode.relatives[TSTNode.LOKID] = new TSTNode(key\n                  .charAt(charIndex), currentNode);\n        }\n        currentNode = currentNode.relatives[TSTNode.LOKID];\n      } else {\n        if (currentNode.relatives[TSTNode.HIKID] == null) {\n          currentNode.relatives[TSTNode.HIKID] = new TSTNode(key\n                  .charAt(charIndex), currentNode);\n        }\n        currentNode = currentNode.relatives[TSTNode.HIKID];\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#getOrCreateNode(String).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/jaspell/JaspellTernarySearchTrie#getOrCreateNode(String).mjava","sourceNew":"  /**\n   * Returns the node indexed by key, creating that node if it doesn't exist,\n   * and creating any required intermediate nodes if they don't exist.\n   * \n   *@param key\n   *          A <code>String</code> that indexes the node that is returned.\n   *@return The node object indexed by key. This object is an instance of an\n   *         inner class named <code>TernarySearchTrie.TSTNode</code>.\n   *@exception NullPointerException\n   *              If the key is <code>null</code>.\n   *@exception IllegalArgumentException\n   *              If the key is an empty <code>String</code>.\n   */\n  protected TSTNode getOrCreateNode(String key) throws NullPointerException,\n          IllegalArgumentException {\n    if (key == null) {\n      throw new NullPointerException(\n              \"attempt to get or create node with null key\");\n    }\n    if (key.length() == 0) {\n      throw new IllegalArgumentException(\n              \"attempt to get or create node with key of zero length\");\n    }\n    if (rootNode == null) {\n      rootNode = new TSTNode(key.charAt(0), null);\n    }\n    TSTNode currentNode = rootNode;\n    int charIndex = 0;\n    while (true) {\n      int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n              currentNode.splitchar);\n      if (charComp == 0) {\n        charIndex++;\n        if (charIndex == key.length()) {\n          return currentNode;\n        }\n        if (currentNode.relatives[TSTNode.EQKID] == null) {\n          currentNode.relatives[TSTNode.EQKID] = new TSTNode(key\n                  .charAt(charIndex), currentNode);\n        }\n        currentNode = currentNode.relatives[TSTNode.EQKID];\n      } else if (charComp < 0) {\n        if (currentNode.relatives[TSTNode.LOKID] == null) {\n          currentNode.relatives[TSTNode.LOKID] = new TSTNode(key\n                  .charAt(charIndex), currentNode);\n        }\n        currentNode = currentNode.relatives[TSTNode.LOKID];\n      } else {\n        if (currentNode.relatives[TSTNode.HIKID] == null) {\n          currentNode.relatives[TSTNode.HIKID] = new TSTNode(key\n                  .charAt(charIndex), currentNode);\n        }\n        currentNode = currentNode.relatives[TSTNode.HIKID];\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the node indexed by key, creating that node if it doesn't exist,\n   * and creating any required intermediate nodes if they don't exist.\n   * \n   *@param key\n   *          A <code>String</code> that indexes the node that is returned.\n   *@return The node object indexed by key. This object is an instance of an\n   *         inner class named <code>TernarySearchTrie.TSTNode</code>.\n   *@exception NullPointerException\n   *              If the key is <code>null</code>.\n   *@exception IllegalArgumentException\n   *              If the key is an empty <code>String</code>.\n   */\n  protected TSTNode getOrCreateNode(String key) throws NullPointerException,\n          IllegalArgumentException {\n    if (key == null) {\n      throw new NullPointerException(\n              \"attempt to get or create node with null key\");\n    }\n    if (key.length() == 0) {\n      throw new IllegalArgumentException(\n              \"attempt to get or create node with key of zero length\");\n    }\n    if (rootNode == null) {\n      rootNode = new TSTNode(key.charAt(0), null);\n    }\n    TSTNode currentNode = rootNode;\n    int charIndex = 0;\n    while (true) {\n      int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n              currentNode.splitchar);\n      if (charComp == 0) {\n        charIndex++;\n        if (charIndex == key.length()) {\n          return currentNode;\n        }\n        if (currentNode.relatives[TSTNode.EQKID] == null) {\n          currentNode.relatives[TSTNode.EQKID] = new TSTNode(key\n                  .charAt(charIndex), currentNode);\n        }\n        currentNode = currentNode.relatives[TSTNode.EQKID];\n      } else if (charComp < 0) {\n        if (currentNode.relatives[TSTNode.LOKID] == null) {\n          currentNode.relatives[TSTNode.LOKID] = new TSTNode(key\n                  .charAt(charIndex), currentNode);\n        }\n        currentNode = currentNode.relatives[TSTNode.LOKID];\n      } else {\n        if (currentNode.relatives[TSTNode.HIKID] == null) {\n          currentNode.relatives[TSTNode.HIKID] = new TSTNode(key\n                  .charAt(charIndex), currentNode);\n        }\n        currentNode = currentNode.relatives[TSTNode.HIKID];\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ff4f089150b5073dcd4fa1e2018954e3a1eb1af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e230a61047bc041516c811baa08a7174d6f8322a":["4ff4f089150b5073dcd4fa1e2018954e3a1eb1af"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["4ff4f089150b5073dcd4fa1e2018954e3a1eb1af","e230a61047bc041516c811baa08a7174d6f8322a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ff4f089150b5073dcd4fa1e2018954e3a1eb1af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e230a61047bc041516c811baa08a7174d6f8322a"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["4ff4f089150b5073dcd4fa1e2018954e3a1eb1af","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"4ff4f089150b5073dcd4fa1e2018954e3a1eb1af":["e230a61047bc041516c811baa08a7174d6f8322a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"e230a61047bc041516c811baa08a7174d6f8322a":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ff4f089150b5073dcd4fa1e2018954e3a1eb1af","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}