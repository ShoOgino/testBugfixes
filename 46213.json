{"path":"solr/core/src/java/org/apache/solr/schema/SchemaManager#parse(Reader).mjava","commits":[{"id":"4a54d9ede1b7f2f026639186eb07f3f314d87d9a","date":1412176848,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#parse(Reader).mjava","pathOld":"/dev/null","sourceNew":"  /**Parse the command operations into command objects\n   */\n  static List<Operation> parse(Reader rdr ) throws IOException {\n    JSONParser parser = new JSONParser(rdr);\n\n    ObjectBuilder ob = new ObjectBuilder(parser);\n\n    if(parser.lastEvent() != JSONParser.OBJECT_START) {\n      throw new RuntimeException(\"The JSON must be an Object of the form {\\\"command\\\": {...},...\");\n    }\n    List<Operation> operations = new ArrayList<>();\n    for(;;) {\n      int ev = parser.nextEvent();\n      if (ev==JSONParser.OBJECT_END) return operations;\n      Object key =  ob.getKey();\n      ev = parser.nextEvent();\n      Object val = ob.getVal();\n      if (val instanceof List) {\n        List list = (List) val;\n        for (Object o : list) {\n          operations.add(new Operation(String.valueOf(key), o));\n        }\n      } else {\n        operations.add(new Operation(String.valueOf(key), val));\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#parse(Reader).mjava","pathOld":"/dev/null","sourceNew":"  /**Parse the command operations into command objects\n   */\n  static List<Operation> parse(Reader rdr ) throws IOException {\n    JSONParser parser = new JSONParser(rdr);\n\n    ObjectBuilder ob = new ObjectBuilder(parser);\n\n    if(parser.lastEvent() != JSONParser.OBJECT_START) {\n      throw new RuntimeException(\"The JSON must be an Object of the form {\\\"command\\\": {...},...\");\n    }\n    List<Operation> operations = new ArrayList<>();\n    for(;;) {\n      int ev = parser.nextEvent();\n      if (ev==JSONParser.OBJECT_END) return operations;\n      Object key =  ob.getKey();\n      ev = parser.nextEvent();\n      Object val = ob.getVal();\n      if (val instanceof List) {\n        List list = (List) val;\n        for (Object o : list) {\n          operations.add(new Operation(String.valueOf(key), o));\n        }\n      } else {\n        operations.add(new Operation(String.valueOf(key), val));\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb9af919a17be70cfc512901fc70f1beaf840ca1","date":1413208885,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/CommandOperation#parse(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaManager#parse(Reader).mjava","sourceNew":"  /**Parse the command operations into command objects\n   */\n  public static List<CommandOperation> parse(Reader rdr ) throws IOException {\n    JSONParser parser = new JSONParser(rdr);\n\n    ObjectBuilder ob = new ObjectBuilder(parser);\n\n    if(parser.lastEvent() != JSONParser.OBJECT_START) {\n      throw new RuntimeException(\"The JSON must be an Object of the form {\\\"command\\\": {...},...\");\n    }\n    List<CommandOperation> operations = new ArrayList<>();\n    for(;;) {\n      int ev = parser.nextEvent();\n      if (ev==JSONParser.OBJECT_END) return operations;\n      Object key =  ob.getKey();\n      ev = parser.nextEvent();\n      Object val = ob.getVal();\n      if (val instanceof List) {\n        List list = (List) val;\n        for (Object o : list) {\n          operations.add(new CommandOperation(String.valueOf(key), o));\n        }\n      } else {\n        operations.add(new CommandOperation(String.valueOf(key), val));\n      }\n    }\n\n  }\n\n","sourceOld":"  /**Parse the command operations into command objects\n   */\n  static List<Operation> parse(Reader rdr ) throws IOException {\n    JSONParser parser = new JSONParser(rdr);\n\n    ObjectBuilder ob = new ObjectBuilder(parser);\n\n    if(parser.lastEvent() != JSONParser.OBJECT_START) {\n      throw new RuntimeException(\"The JSON must be an Object of the form {\\\"command\\\": {...},...\");\n    }\n    List<Operation> operations = new ArrayList<>();\n    for(;;) {\n      int ev = parser.nextEvent();\n      if (ev==JSONParser.OBJECT_END) return operations;\n      Object key =  ob.getKey();\n      ev = parser.nextEvent();\n      Object val = ob.getVal();\n      if (val instanceof List) {\n        List list = (List) val;\n        for (Object o : list) {\n          operations.add(new Operation(String.valueOf(key), o));\n        }\n      } else {\n        operations.add(new Operation(String.valueOf(key), val));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/CommandOperation#parse(Reader).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaManager#parse(Reader).mjava","sourceNew":"  /**Parse the command operations into command objects\n   */\n  public static List<CommandOperation> parse(Reader rdr ) throws IOException {\n    JSONParser parser = new JSONParser(rdr);\n\n    ObjectBuilder ob = new ObjectBuilder(parser);\n\n    if(parser.lastEvent() != JSONParser.OBJECT_START) {\n      throw new RuntimeException(\"The JSON must be an Object of the form {\\\"command\\\": {...},...\");\n    }\n    List<CommandOperation> operations = new ArrayList<>();\n    for(;;) {\n      int ev = parser.nextEvent();\n      if (ev==JSONParser.OBJECT_END) return operations;\n      Object key =  ob.getKey();\n      ev = parser.nextEvent();\n      Object val = ob.getVal();\n      if (val instanceof List) {\n        List list = (List) val;\n        for (Object o : list) {\n          operations.add(new CommandOperation(String.valueOf(key), o));\n        }\n      } else {\n        operations.add(new CommandOperation(String.valueOf(key), val));\n      }\n    }\n\n  }\n\n","sourceOld":"  /**Parse the command operations into command objects\n   */\n  static List<Operation> parse(Reader rdr ) throws IOException {\n    JSONParser parser = new JSONParser(rdr);\n\n    ObjectBuilder ob = new ObjectBuilder(parser);\n\n    if(parser.lastEvent() != JSONParser.OBJECT_START) {\n      throw new RuntimeException(\"The JSON must be an Object of the form {\\\"command\\\": {...},...\");\n    }\n    List<Operation> operations = new ArrayList<>();\n    for(;;) {\n      int ev = parser.nextEvent();\n      if (ev==JSONParser.OBJECT_END) return operations;\n      Object key =  ob.getKey();\n      ev = parser.nextEvent();\n      Object val = ob.getVal();\n      if (val instanceof List) {\n        List list = (List) val;\n        for (Object o : list) {\n          operations.add(new Operation(String.valueOf(key), o));\n        }\n      } else {\n        operations.add(new Operation(String.valueOf(key), val));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55980207f1977bd1463465de1659b821347e2fa8":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cb9af919a17be70cfc512901fc70f1beaf840ca1"],"cb9af919a17be70cfc512901fc70f1beaf840ca1":["4a54d9ede1b7f2f026639186eb07f3f314d87d9a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4a54d9ede1b7f2f026639186eb07f3f314d87d9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4a54d9ede1b7f2f026639186eb07f3f314d87d9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cb9af919a17be70cfc512901fc70f1beaf840ca1"]},"commit2Childs":{"55980207f1977bd1463465de1659b821347e2fa8":[],"cb9af919a17be70cfc512901fc70f1beaf840ca1":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a54d9ede1b7f2f026639186eb07f3f314d87d9a","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["55980207f1977bd1463465de1659b821347e2fa8"],"4a54d9ede1b7f2f026639186eb07f3f314d87d9a":["cb9af919a17be70cfc512901fc70f1beaf840ca1","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}