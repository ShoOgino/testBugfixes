{"path":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/TestPassageSelector#randomizedSanityCheck().mjava","commits":[{"id":"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c","date":1597407672,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/TestPassageSelector#randomizedSanityCheck().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void randomizedSanityCheck() {\n    PassageSelector selector = new PassageSelector();\n    PassageFormatter formatter = new PassageFormatter(\"...\", \">\", \"<\");\n    ArrayList<OffsetRange> highlights = new ArrayList<>();\n    ArrayList<OffsetRange> ranges = new ArrayList<>();\n    for (int i = 0; i < 5000; i++) {\n      String value =\n          randomBoolean()\n              ? randomAsciiLettersOfLengthBetween(0, 100)\n              : randomRealisticUnicodeOfCodepointLengthBetween(0, 1000);\n\n      ranges.clear();\n      highlights.clear();\n      for (int j = randomIntBetween(0, 10); --j >= 0; ) {\n        int from = randomIntBetween(0, value.length());\n        highlights.add(new OffsetRange(from, from + randomIntBetween(1, 10)));\n      }\n\n      int charWindow = randomIntBetween(1, 100);\n      int maxPassages = randomIntBetween(1, 10);\n\n      if (randomIntBetween(0, 5) == 0) {\n        int increment = value.length() / 10;\n        for (int c = randomIntBetween(0, 20), start = 0; --c >= 0; ) {\n          int step = randomIntBetween(0, increment);\n          ranges.add(new OffsetRange(start, start + step));\n          start += step + randomIntBetween(0, 3);\n        }\n      } else {\n        ranges.add(new OffsetRange(0, value.length()));\n      }\n\n      // Just make sure there are no exceptions.\n      List<Passage> passages =\n          selector.pickBest(value, highlights, charWindow, maxPassages, ranges);\n      formatter.format(value, passages, ranges);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"060cad2e7ae19bfe202be419234328acf680716c","date":1599747351,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/TestPassageSelector#randomizedSanityCheck().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/TestPassageSelector#randomizedSanityCheck().mjava","sourceNew":"  @Test\n  public void randomizedSanityCheck() {\n    PassageSelector selector = new PassageSelector();\n    PassageFormatter formatter = new PassageFormatter(\"...\", \">\", \"<\");\n    ArrayList<OffsetRange> highlights = new ArrayList<>();\n    ArrayList<OffsetRange> ranges = new ArrayList<>();\n\n    for (int i = 0; i < 5000; i++) {\n      String value =\n          randomBoolean()\n              ? randomAsciiLettersOfLengthBetween(0, 100)\n              : randomRealisticUnicodeOfCodepointLengthBetween(0, 1000);\n\n      ranges.clear();\n      highlights.clear();\n      for (int j = randomIntBetween(0, 10); --j >= 0; ) {\n        int from = randomIntBetween(0, value.length());\n        highlights.add(new OffsetRange(from, from + randomIntBetween(1, 10)));\n      }\n\n      int charWindow = randomIntBetween(1, 100);\n      int maxPassages = randomIntBetween(1, 10);\n\n      if (randomIntBetween(0, 5) == 0) {\n        int increment = value.length() / 10;\n        for (int c = randomIntBetween(0, 20), start = 0; --c >= 0; ) {\n          int step = randomIntBetween(0, increment);\n          ranges.add(new OffsetRange(start, start + step));\n          start += step + randomIntBetween(0, 3);\n        }\n      } else {\n        ranges.add(new OffsetRange(0, value.length()));\n      }\n\n      // Just make sure there are no exceptions.\n      List<Passage> passages =\n          selector.pickBest(value, highlights, charWindow, maxPassages, ranges);\n      formatter.format(value, passages, ranges);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void randomizedSanityCheck() {\n    PassageSelector selector = new PassageSelector();\n    PassageFormatter formatter = new PassageFormatter(\"...\", \">\", \"<\");\n    ArrayList<OffsetRange> highlights = new ArrayList<>();\n    ArrayList<OffsetRange> ranges = new ArrayList<>();\n    for (int i = 0; i < 5000; i++) {\n      String value =\n          randomBoolean()\n              ? randomAsciiLettersOfLengthBetween(0, 100)\n              : randomRealisticUnicodeOfCodepointLengthBetween(0, 1000);\n\n      ranges.clear();\n      highlights.clear();\n      for (int j = randomIntBetween(0, 10); --j >= 0; ) {\n        int from = randomIntBetween(0, value.length());\n        highlights.add(new OffsetRange(from, from + randomIntBetween(1, 10)));\n      }\n\n      int charWindow = randomIntBetween(1, 100);\n      int maxPassages = randomIntBetween(1, 10);\n\n      if (randomIntBetween(0, 5) == 0) {\n        int increment = value.length() / 10;\n        for (int c = randomIntBetween(0, 20), start = 0; --c >= 0; ) {\n          int step = randomIntBetween(0, increment);\n          ranges.add(new OffsetRange(start, start + step));\n          start += step + randomIntBetween(0, 3);\n        }\n      } else {\n        ranges.add(new OffsetRange(0, value.length()));\n      }\n\n      // Just make sure there are no exceptions.\n      List<Passage> passages =\n          selector.pickBest(value, highlights, charWindow, maxPassages, ranges);\n      formatter.format(value, passages, ranges);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"18fbb6cfc751884a8cdadea8eebaa704e9c2263f","date":1600077733,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/TestPassageSelector#randomizedSanityCheck().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/TestPassageSelector#randomizedSanityCheck().mjava","sourceNew":"  @Test\n  public void randomizedSanityCheck() {\n    PassageSelector selector = new PassageSelector();\n    PassageFormatter formatter = new PassageFormatter(\"...\", \">\", \"<\");\n    ArrayList<OffsetRange> highlights = new ArrayList<>();\n    ArrayList<OffsetRange> permittedRanges = new ArrayList<>();\n\n    for (int i = 0; i < 5000; i++) {\n      String value =\n          randomBoolean()\n              ? randomAsciiLettersOfLengthBetween(0, 100)\n              : randomRealisticUnicodeOfCodepointLengthBetween(0, 1000);\n      int maxLength = value.length();\n\n      permittedRanges.clear();\n      highlights.clear();\n      for (int j = randomIntBetween(0, 10); --j >= 0; ) {\n        int from = randomIntBetween(0, value.length());\n        int to = Math.min(from + randomIntBetween(1, 10), maxLength);\n        if (from < to) {\n          highlights.add(new OffsetRange(from, to));\n        }\n      }\n\n      int charWindow = randomIntBetween(1, 100);\n      int maxPassages = randomIntBetween(1, 10);\n\n      if (randomIntBetween(0, 5) == 0) {\n        int increment = value.length() / 10;\n        for (int c = randomIntBetween(0, 20), start = 0; --c >= 0; ) {\n          int step = randomIntBetween(0, increment);\n          int to = Math.min(start + step, maxLength);\n          if (start < to) {\n            permittedRanges.add(new OffsetRange(start, to));\n          }\n          start += step + randomIntBetween(0, 3);\n        }\n      } else {\n        permittedRanges.add(new OffsetRange(0, value.length()));\n      }\n\n      // Just make sure there are no exceptions.\n      List<Passage> passages =\n          selector.pickBest(value, highlights, charWindow, maxPassages, permittedRanges);\n      formatter.format(value, passages, permittedRanges);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void randomizedSanityCheck() {\n    PassageSelector selector = new PassageSelector();\n    PassageFormatter formatter = new PassageFormatter(\"...\", \">\", \"<\");\n    ArrayList<OffsetRange> highlights = new ArrayList<>();\n    ArrayList<OffsetRange> ranges = new ArrayList<>();\n\n    for (int i = 0; i < 5000; i++) {\n      String value =\n          randomBoolean()\n              ? randomAsciiLettersOfLengthBetween(0, 100)\n              : randomRealisticUnicodeOfCodepointLengthBetween(0, 1000);\n\n      ranges.clear();\n      highlights.clear();\n      for (int j = randomIntBetween(0, 10); --j >= 0; ) {\n        int from = randomIntBetween(0, value.length());\n        highlights.add(new OffsetRange(from, from + randomIntBetween(1, 10)));\n      }\n\n      int charWindow = randomIntBetween(1, 100);\n      int maxPassages = randomIntBetween(1, 10);\n\n      if (randomIntBetween(0, 5) == 0) {\n        int increment = value.length() / 10;\n        for (int c = randomIntBetween(0, 20), start = 0; --c >= 0; ) {\n          int step = randomIntBetween(0, increment);\n          ranges.add(new OffsetRange(start, start + step));\n          start += step + randomIntBetween(0, 3);\n        }\n      } else {\n        ranges.add(new OffsetRange(0, value.length()));\n      }\n\n      // Just make sure there are no exceptions.\n      List<Passage> passages =\n          selector.pickBest(value, highlights, charWindow, maxPassages, ranges);\n      formatter.format(value, passages, ranges);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"680b6449f09827f58fe987aff279e014c311d966","date":1600247985,"type":3,"author":"noblepaul","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/TestPassageSelector#randomizedSanityCheck().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/TestPassageSelector#randomizedSanityCheck().mjava","sourceNew":"  @Test\n  public void randomizedSanityCheck() {\n    PassageSelector selector = new PassageSelector();\n    PassageFormatter formatter = new PassageFormatter(\"...\", \">\", \"<\");\n    ArrayList<OffsetRange> highlights = new ArrayList<>();\n    ArrayList<OffsetRange> permittedRanges = new ArrayList<>();\n\n    for (int i = 0; i < 5000; i++) {\n      String value =\n          randomBoolean()\n              ? randomAsciiLettersOfLengthBetween(0, 100)\n              : randomRealisticUnicodeOfCodepointLengthBetween(0, 1000);\n      int maxLength = value.length();\n\n      permittedRanges.clear();\n      highlights.clear();\n      for (int j = randomIntBetween(0, 10); --j >= 0; ) {\n        int from = randomIntBetween(0, value.length());\n        int to = Math.min(from + randomIntBetween(1, 10), maxLength);\n        if (from < to) {\n          highlights.add(new OffsetRange(from, to));\n        }\n      }\n\n      int charWindow = randomIntBetween(1, 100);\n      int maxPassages = randomIntBetween(1, 10);\n\n      if (randomIntBetween(0, 5) == 0) {\n        int increment = value.length() / 10;\n        for (int c = randomIntBetween(0, 20), start = 0; --c >= 0; ) {\n          int step = randomIntBetween(0, increment);\n          int to = Math.min(start + step, maxLength);\n          if (start < to) {\n            permittedRanges.add(new OffsetRange(start, to));\n          }\n          start += step + randomIntBetween(0, 3);\n        }\n      } else {\n        permittedRanges.add(new OffsetRange(0, value.length()));\n      }\n\n      // Just make sure there are no exceptions.\n      List<Passage> passages =\n          selector.pickBest(value, highlights, charWindow, maxPassages, permittedRanges);\n      formatter.format(value, passages, permittedRanges);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void randomizedSanityCheck() {\n    PassageSelector selector = new PassageSelector();\n    PassageFormatter formatter = new PassageFormatter(\"...\", \">\", \"<\");\n    ArrayList<OffsetRange> highlights = new ArrayList<>();\n    ArrayList<OffsetRange> ranges = new ArrayList<>();\n\n    for (int i = 0; i < 5000; i++) {\n      String value =\n          randomBoolean()\n              ? randomAsciiLettersOfLengthBetween(0, 100)\n              : randomRealisticUnicodeOfCodepointLengthBetween(0, 1000);\n\n      ranges.clear();\n      highlights.clear();\n      for (int j = randomIntBetween(0, 10); --j >= 0; ) {\n        int from = randomIntBetween(0, value.length());\n        highlights.add(new OffsetRange(from, from + randomIntBetween(1, 10)));\n      }\n\n      int charWindow = randomIntBetween(1, 100);\n      int maxPassages = randomIntBetween(1, 10);\n\n      if (randomIntBetween(0, 5) == 0) {\n        int increment = value.length() / 10;\n        for (int c = randomIntBetween(0, 20), start = 0; --c >= 0; ) {\n          int step = randomIntBetween(0, increment);\n          ranges.add(new OffsetRange(start, start + step));\n          start += step + randomIntBetween(0, 3);\n        }\n      } else {\n        ranges.add(new OffsetRange(0, value.length()));\n      }\n\n      // Just make sure there are no exceptions.\n      List<Passage> passages =\n          selector.pickBest(value, highlights, charWindow, maxPassages, ranges);\n      formatter.format(value, passages, ranges);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"680b6449f09827f58fe987aff279e014c311d966":["060cad2e7ae19bfe202be419234328acf680716c","18fbb6cfc751884a8cdadea8eebaa704e9c2263f"],"060cad2e7ae19bfe202be419234328acf680716c":["2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c"],"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"18fbb6cfc751884a8cdadea8eebaa704e9c2263f":["060cad2e7ae19bfe202be419234328acf680716c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["680b6449f09827f58fe987aff279e014c311d966"]},"commit2Childs":{"680b6449f09827f58fe987aff279e014c311d966":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"060cad2e7ae19bfe202be419234328acf680716c":["680b6449f09827f58fe987aff279e014c311d966","18fbb6cfc751884a8cdadea8eebaa704e9c2263f"],"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c":["060cad2e7ae19bfe202be419234328acf680716c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c"],"18fbb6cfc751884a8cdadea8eebaa704e9c2263f":["680b6449f09827f58fe987aff279e014c311d966"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}