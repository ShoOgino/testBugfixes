{"path":"lucene/contrib/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ICUTokenizer#incrementTokenBuffer().mjava","commits":[{"id":"185d73416ce4b3eaac6886de46a0a95eafbb01da","date":1272892809,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ICUTokenizer#incrementTokenBuffer().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * return true if there is a token from the buffer, or null if it is\n   * exhausted.\n   */\n  private boolean incrementTokenBuffer() {\n    int start = breaker.current();\n    if (start == BreakIterator.DONE)\n      return false; // BreakIterator exhausted\n\n    // find the next set of boundaries, skipping over non-tokens (rule status 0)\n    int end = breaker.next();\n    while (start != BreakIterator.DONE && breaker.getRuleStatus() == 0) {\n      start = end;\n      end = breaker.next();\n    }\n\n    if (start == BreakIterator.DONE)\n      return false; // BreakIterator exhausted\n\n    termAtt.copyBuffer(buffer, start, end - start);\n    offsetAtt.setOffset(correctOffset(offset + start), correctOffset(offset + end));\n    typeAtt.setType(config.getType(breaker.getScriptCode(), breaker.getRuleStatus()));\n    scriptAtt.setCode(breaker.getScriptCode());\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b441220ceb933f50f32318ab45acc05d5943f3aa","date":1274352360,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ICUTokenizer#incrementTokenBuffer().mjava","pathOld":"lucene/contrib/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ICUTokenizer#incrementTokenBuffer().mjava","sourceNew":"  /*\n   * return true if there is a token from the buffer, or null if it is\n   * exhausted.\n   */\n  private boolean incrementTokenBuffer() {\n    int start = breaker.current();\n    if (start == BreakIterator.DONE)\n      return false; // BreakIterator exhausted\n\n    // find the next set of boundaries, skipping over non-tokens (rule status 0)\n    int end = breaker.next();\n    while (start != BreakIterator.DONE && breaker.getRuleStatus() == 0) {\n      start = end;\n      end = breaker.next();\n    }\n\n    if (start == BreakIterator.DONE)\n      return false; // BreakIterator exhausted\n\n    termAtt.copyBuffer(buffer, start, end - start);\n    offsetAtt.setOffset(correctOffset(offset + start), correctOffset(offset + end));\n    typeAtt.setType(config.getType(breaker.getScriptCode(), breaker.getRuleStatus()));\n    scriptAtt.setCode(breaker.getScriptCode());\n\n    return true;\n  }\n\n","sourceOld":"  /*\n   * return true if there is a token from the buffer, or null if it is\n   * exhausted.\n   */\n  private boolean incrementTokenBuffer() {\n    int start = breaker.current();\n    if (start == BreakIterator.DONE)\n      return false; // BreakIterator exhausted\n\n    // find the next set of boundaries, skipping over non-tokens (rule status 0)\n    int end = breaker.next();\n    while (start != BreakIterator.DONE && breaker.getRuleStatus() == 0) {\n      start = end;\n      end = breaker.next();\n    }\n\n    if (start == BreakIterator.DONE)\n      return false; // BreakIterator exhausted\n\n    termAtt.copyBuffer(buffer, start, end - start);\n    offsetAtt.setOffset(correctOffset(offset + start), correctOffset(offset + end));\n    typeAtt.setType(config.getType(breaker.getScriptCode(), breaker.getRuleStatus()));\n    scriptAtt.setCode(breaker.getScriptCode());\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b441220ceb933f50f32318ab45acc05d5943f3aa":["185d73416ce4b3eaac6886de46a0a95eafbb01da"],"185d73416ce4b3eaac6886de46a0a95eafbb01da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b441220ceb933f50f32318ab45acc05d5943f3aa"]},"commit2Childs":{"b441220ceb933f50f32318ab45acc05d5943f3aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"185d73416ce4b3eaac6886de46a0a95eafbb01da":["b441220ceb933f50f32318ab45acc05d5943f3aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["185d73416ce4b3eaac6886de46a0a95eafbb01da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}