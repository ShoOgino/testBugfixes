{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/AssignTest#testUsePolicyByDefault().mjava","commits":[{"id":"01322d51122b6cbe6b5ba6059fffba67798dae72","date":1539067228,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/AssignTest#testUsePolicyByDefault().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUsePolicyByDefault() throws Exception {\n    assumeWorkingMockito();\n\n    SolrCloudManager solrCloudManager = mock(SolrCloudManager.class);\n    ClusterStateProvider clusterStateProvider = mock(ClusterStateProvider.class);\n    when(solrCloudManager.getClusterStateProvider()).thenReturn(clusterStateProvider);\n    // first we set useLegacyReplicaAssignment=false, so autoscaling should always be used\n    when(clusterStateProvider.getClusterProperties()).thenReturn(Utils.makeMap(\"defaults\", Utils.makeMap(\"collection\", Utils.makeMap(\"useLegacyReplicaAssignment\", false))));\n    // verify\n    boolean usePolicyFramework = Assign.usePolicyFramework(solrCloudManager);\n    assertTrue(usePolicyFramework);\n\n    // now we set useLegacyReplicaAssignment=true, so autoscaling can only be used if an explicit policy or preference exists\n    when(clusterStateProvider.getClusterProperties()).thenReturn(Utils.makeMap(\"defaults\", Utils.makeMap(\"collection\", Utils.makeMap(\"useLegacyReplicaAssignment\", true))));\n    DistribStateManager distribStateManager = mock(DistribStateManager.class);\n    when(solrCloudManager.getDistribStateManager()).thenReturn(distribStateManager);\n    when(distribStateManager.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Collections.emptyMap()));\n    assertFalse(Assign.usePolicyFramework(solrCloudManager));\n\n    // lets provide a custom preference and assert that autoscaling is used even if useLegacyReplicaAssignment=false\n    // our custom preferences are exactly the same as the default ones\n    // but because we are providing them explicitly, they must cause autoscaling to turn on\n    List<Map> customPreferences = Policy.DEFAULT_PREFERENCES\n        .stream().map(preference -> preference.getOriginal()).collect(Collectors.toList());\n\n    when(distribStateManager.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Utils.makeMap(\"cluster-preferences\", customPreferences)));\n    assertTrue(Assign.usePolicyFramework(solrCloudManager));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9318235fae47cfc9aeb136234ff931ef095d0107","date":1539166132,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/AssignTest#testUsePolicyByDefault().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/AssignTest#testUsePolicyByDefault().mjava","sourceNew":"  @Test\n  public void testUsePolicyByDefault() throws Exception {\n    assumeWorkingMockito();\n\n    SolrCloudManager solrCloudManager = mock(SolrCloudManager.class);\n    ClusterStateProvider clusterStateProvider = mock(ClusterStateProvider.class);\n    when(solrCloudManager.getClusterStateProvider()).thenReturn(clusterStateProvider);\n    // first we set useLegacyReplicaAssignment=false, so autoscaling should always be used\n    when(clusterStateProvider.getClusterProperties()).thenReturn(Utils.makeMap(\"defaults\", Utils.makeMap(\"cluster\", Utils.makeMap(\"useLegacyReplicaAssignment\", false))));\n    // verify\n    boolean usePolicyFramework = Assign.usePolicyFramework(solrCloudManager);\n    assertTrue(usePolicyFramework);\n\n    // now we set useLegacyReplicaAssignment=true, so autoscaling can only be used if an explicit policy or preference exists\n    when(clusterStateProvider.getClusterProperties()).thenReturn(Utils.makeMap(\"defaults\", Utils.makeMap(\"cluster\", Utils.makeMap(\"useLegacyReplicaAssignment\", true))));\n    DistribStateManager distribStateManager = mock(DistribStateManager.class);\n    when(solrCloudManager.getDistribStateManager()).thenReturn(distribStateManager);\n    when(distribStateManager.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Collections.emptyMap()));\n    assertFalse(Assign.usePolicyFramework(solrCloudManager));\n\n    // lets provide a custom preference and assert that autoscaling is used even if useLegacyReplicaAssignment=false\n    // our custom preferences are exactly the same as the default ones\n    // but because we are providing them explicitly, they must cause autoscaling to turn on\n    List<Map> customPreferences = Policy.DEFAULT_PREFERENCES\n        .stream().map(preference -> preference.getOriginal()).collect(Collectors.toList());\n\n    when(distribStateManager.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Utils.makeMap(\"cluster-preferences\", customPreferences)));\n    assertTrue(Assign.usePolicyFramework(solrCloudManager));\n  }\n\n","sourceOld":"  @Test\n  public void testUsePolicyByDefault() throws Exception {\n    assumeWorkingMockito();\n\n    SolrCloudManager solrCloudManager = mock(SolrCloudManager.class);\n    ClusterStateProvider clusterStateProvider = mock(ClusterStateProvider.class);\n    when(solrCloudManager.getClusterStateProvider()).thenReturn(clusterStateProvider);\n    // first we set useLegacyReplicaAssignment=false, so autoscaling should always be used\n    when(clusterStateProvider.getClusterProperties()).thenReturn(Utils.makeMap(\"defaults\", Utils.makeMap(\"collection\", Utils.makeMap(\"useLegacyReplicaAssignment\", false))));\n    // verify\n    boolean usePolicyFramework = Assign.usePolicyFramework(solrCloudManager);\n    assertTrue(usePolicyFramework);\n\n    // now we set useLegacyReplicaAssignment=true, so autoscaling can only be used if an explicit policy or preference exists\n    when(clusterStateProvider.getClusterProperties()).thenReturn(Utils.makeMap(\"defaults\", Utils.makeMap(\"collection\", Utils.makeMap(\"useLegacyReplicaAssignment\", true))));\n    DistribStateManager distribStateManager = mock(DistribStateManager.class);\n    when(solrCloudManager.getDistribStateManager()).thenReturn(distribStateManager);\n    when(distribStateManager.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Collections.emptyMap()));\n    assertFalse(Assign.usePolicyFramework(solrCloudManager));\n\n    // lets provide a custom preference and assert that autoscaling is used even if useLegacyReplicaAssignment=false\n    // our custom preferences are exactly the same as the default ones\n    // but because we are providing them explicitly, they must cause autoscaling to turn on\n    List<Map> customPreferences = Policy.DEFAULT_PREFERENCES\n        .stream().map(preference -> preference.getOriginal()).collect(Collectors.toList());\n\n    when(distribStateManager.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Utils.makeMap(\"cluster-preferences\", customPreferences)));\n    assertTrue(Assign.usePolicyFramework(solrCloudManager));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"413f18c5620cf37b9bb2dfa7d3071bfa08b69a0d","date":1550526365,"type":5,"author":"shalinmangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/AssignTest#testUseLegacyByDefault().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/AssignTest#testUsePolicyByDefault().mjava","sourceNew":"  @Test\n  public void testUseLegacyByDefault() throws Exception {\n    assumeWorkingMockito();\n\n    SolrCloudManager solrCloudManager = mock(SolrCloudManager.class);\n    ClusterStateProvider clusterStateProvider = mock(ClusterStateProvider.class);\n    when(solrCloudManager.getClusterStateProvider()).thenReturn(clusterStateProvider);\n    DistribStateManager distribStateManager = mock(DistribStateManager.class);\n    when(solrCloudManager.getDistribStateManager()).thenReturn(distribStateManager);\n    when(distribStateManager.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Collections.emptyMap()));\n\n    // first we don't set any cluster property and assert that legacy assignment is used\n    when(clusterStateProvider.getClusterProperties()).thenReturn(Collections.emptyMap());\n    // verify\n    boolean usePolicyFramework = Assign.usePolicyFramework(solrCloudManager);\n    assertFalse(usePolicyFramework);\n    // another sanity check\n    when(clusterStateProvider.getClusterProperties()).thenReturn(Utils.makeMap(\"defaults\", Collections.emptyMap()));\n    // verify\n    usePolicyFramework = Assign.usePolicyFramework(solrCloudManager);\n    assertFalse(usePolicyFramework);\n\n    // first we set useLegacyReplicaAssignment=false, so autoscaling should always be used\n    when(clusterStateProvider.getClusterProperties()).thenReturn(Utils.makeMap(\"defaults\", Utils.makeMap(\"cluster\", Utils.makeMap(\"useLegacyReplicaAssignment\", false))));\n    // verify\n    usePolicyFramework = Assign.usePolicyFramework(solrCloudManager);\n    assertTrue(usePolicyFramework);\n\n    // now we set useLegacyReplicaAssignment=true, so autoscaling can only be used if an explicit policy or preference exists\n    when(clusterStateProvider.getClusterProperties()).thenReturn(Utils.makeMap(\"defaults\", Utils.makeMap(\"cluster\", Utils.makeMap(\"useLegacyReplicaAssignment\", true))));\n    when(distribStateManager.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Collections.emptyMap()));\n    assertFalse(Assign.usePolicyFramework(solrCloudManager));\n\n    // lets provide a custom preference and assert that autoscaling is used even if useLegacyReplicaAssignment=false\n    // our custom preferences are exactly the same as the default ones\n    // but because we are providing them explicitly, they must cause autoscaling to turn on\n    List<Map> customPreferences = Policy.DEFAULT_PREFERENCES\n        .stream().map(preference -> preference.getOriginal()).collect(Collectors.toList());\n\n    when(distribStateManager.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Utils.makeMap(\"cluster-preferences\", customPreferences)));\n    assertTrue(Assign.usePolicyFramework(solrCloudManager));\n  }\n\n","sourceOld":"  @Test\n  public void testUsePolicyByDefault() throws Exception {\n    assumeWorkingMockito();\n\n    SolrCloudManager solrCloudManager = mock(SolrCloudManager.class);\n    ClusterStateProvider clusterStateProvider = mock(ClusterStateProvider.class);\n    when(solrCloudManager.getClusterStateProvider()).thenReturn(clusterStateProvider);\n    // first we set useLegacyReplicaAssignment=false, so autoscaling should always be used\n    when(clusterStateProvider.getClusterProperties()).thenReturn(Utils.makeMap(\"defaults\", Utils.makeMap(\"cluster\", Utils.makeMap(\"useLegacyReplicaAssignment\", false))));\n    // verify\n    boolean usePolicyFramework = Assign.usePolicyFramework(solrCloudManager);\n    assertTrue(usePolicyFramework);\n\n    // now we set useLegacyReplicaAssignment=true, so autoscaling can only be used if an explicit policy or preference exists\n    when(clusterStateProvider.getClusterProperties()).thenReturn(Utils.makeMap(\"defaults\", Utils.makeMap(\"cluster\", Utils.makeMap(\"useLegacyReplicaAssignment\", true))));\n    DistribStateManager distribStateManager = mock(DistribStateManager.class);\n    when(solrCloudManager.getDistribStateManager()).thenReturn(distribStateManager);\n    when(distribStateManager.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Collections.emptyMap()));\n    assertFalse(Assign.usePolicyFramework(solrCloudManager));\n\n    // lets provide a custom preference and assert that autoscaling is used even if useLegacyReplicaAssignment=false\n    // our custom preferences are exactly the same as the default ones\n    // but because we are providing them explicitly, they must cause autoscaling to turn on\n    List<Map> customPreferences = Policy.DEFAULT_PREFERENCES\n        .stream().map(preference -> preference.getOriginal()).collect(Collectors.toList());\n\n    when(distribStateManager.getAutoScalingConfig()).thenReturn(new AutoScalingConfig(Utils.makeMap(\"cluster-preferences\", customPreferences)));\n    assertTrue(Assign.usePolicyFramework(solrCloudManager));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"01322d51122b6cbe6b5ba6059fffba67798dae72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"413f18c5620cf37b9bb2dfa7d3071bfa08b69a0d":["9318235fae47cfc9aeb136234ff931ef095d0107"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9318235fae47cfc9aeb136234ff931ef095d0107":["01322d51122b6cbe6b5ba6059fffba67798dae72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["413f18c5620cf37b9bb2dfa7d3071bfa08b69a0d"]},"commit2Childs":{"01322d51122b6cbe6b5ba6059fffba67798dae72":["9318235fae47cfc9aeb136234ff931ef095d0107"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["01322d51122b6cbe6b5ba6059fffba67798dae72"],"413f18c5620cf37b9bb2dfa7d3071bfa08b69a0d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9318235fae47cfc9aeb136234ff931ef095d0107":["413f18c5620cf37b9bb2dfa7d3071bfa08b69a0d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}