{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#testReplicationFactorValidaton().mjava","commits":[{"id":"397b96a886ece05a1444aa3771e10825e1145c1f","date":1529309393,"type":0,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#testReplicationFactorValidaton().mjava","pathOld":"/dev/null","sourceNew":"  private void testReplicationFactorValidaton() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      //Test that you can't specify both replicationFactor and nrtReplicas\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"test_repFactorColl\");\n      params.set(\"numShards\", \"1\");\n      params.set(\"replicationFactor\", \"1\");\n      params.set(\"nrtReplicas\", \"2\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      try {\n        client.request(request);\n        fail();\n      } catch (RemoteSolrException e) {\n        final String errorMessage = e.getMessage();\n        assertTrue(errorMessage.contains(\"Cannot specify both replicationFactor and nrtReplicas as they mean the same thing\"));\n      }\n\n      //Create it again correctly\n      CollectionAdminRequest.Create req = CollectionAdminRequest.createCollection(\"test_repFactorColl\", \"conf1\", 1, 3, 0, 0);\n      client.request(req);\n\n      waitForCollection(cloudClient.getZkStateReader(), \"test_repFactorColl\", 1);\n      waitForRecoveriesToFinish(\"test_repFactorColl\", false);\n\n      //Assert that replicationFactor has also been set to 3\n      assertCountsForRepFactorAndNrtReplicas(client, \"test_repFactorColl\");\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.MODIFYCOLLECTION.toString());\n      params.set(\"collection\", \"test_repFactorColl\");\n      params.set(\"replicationFactor\", \"4\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      assertCountsForRepFactorAndNrtReplicas(client, \"test_repFactorColl\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#testReplicationFactorValidaton().mjava","pathOld":"/dev/null","sourceNew":"  private void testReplicationFactorValidaton() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      //Test that you can't specify both replicationFactor and nrtReplicas\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"test_repFactorColl\");\n      params.set(\"numShards\", \"1\");\n      params.set(\"replicationFactor\", \"1\");\n      params.set(\"nrtReplicas\", \"2\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      try {\n        client.request(request);\n        fail();\n      } catch (RemoteSolrException e) {\n        final String errorMessage = e.getMessage();\n        assertTrue(errorMessage.contains(\"Cannot specify both replicationFactor and nrtReplicas as they mean the same thing\"));\n      }\n\n      //Create it again correctly\n      CollectionAdminRequest.Create req = CollectionAdminRequest.createCollection(\"test_repFactorColl\", \"conf1\", 1, 3, 0, 0);\n      client.request(req);\n\n      waitForCollection(cloudClient.getZkStateReader(), \"test_repFactorColl\", 1);\n      waitForRecoveriesToFinish(\"test_repFactorColl\", false);\n\n      //Assert that replicationFactor has also been set to 3\n      assertCountsForRepFactorAndNrtReplicas(client, \"test_repFactorColl\");\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.MODIFYCOLLECTION.toString());\n      params.set(\"collection\", \"test_repFactorColl\");\n      params.set(\"replicationFactor\", \"4\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      assertCountsForRepFactorAndNrtReplicas(client, \"test_repFactorColl\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#testReplicationFactorValidaton().mjava","pathOld":"/dev/null","sourceNew":"  private void testReplicationFactorValidaton() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      //Test that you can't specify both replicationFactor and nrtReplicas\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"test_repFactorColl\");\n      params.set(\"numShards\", \"1\");\n      params.set(\"replicationFactor\", \"1\");\n      params.set(\"nrtReplicas\", \"2\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      try {\n        client.request(request);\n        fail();\n      } catch (RemoteSolrException e) {\n        final String errorMessage = e.getMessage();\n        assertTrue(errorMessage.contains(\"Cannot specify both replicationFactor and nrtReplicas as they mean the same thing\"));\n      }\n\n      //Create it again correctly\n      CollectionAdminRequest.Create req = CollectionAdminRequest.createCollection(\"test_repFactorColl\", \"conf1\", 1, 3, 0, 0);\n      client.request(req);\n\n      waitForCollection(cloudClient.getZkStateReader(), \"test_repFactorColl\", 1);\n      waitForRecoveriesToFinish(\"test_repFactorColl\", false);\n\n      //Assert that replicationFactor has also been set to 3\n      assertCountsForRepFactorAndNrtReplicas(client, \"test_repFactorColl\");\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.MODIFYCOLLECTION.toString());\n      params.set(\"collection\", \"test_repFactorColl\");\n      params.set(\"replicationFactor\", \"4\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      assertCountsForRepFactorAndNrtReplicas(client, \"test_repFactorColl\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db96734b79e26d948b59f68bd4564c4836a71acf","date":1585375566,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#testReplicationFactorValidaton().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#testReplicationFactorValidaton().mjava","sourceNew":"  private void testReplicationFactorValidaton() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      //Test that you can't specify both replicationFactor and nrtReplicas\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"test_repFactorColl\");\n      params.set(\"numShards\", \"1\");\n      params.set(\"replicationFactor\", \"1\");\n      params.set(\"nrtReplicas\", \"2\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      try {\n        client.request(request);\n        fail();\n      } catch (BaseHttpSolrClient.RemoteSolrException e) {\n        final String errorMessage = e.getMessage();\n        assertTrue(errorMessage.contains(\"Cannot specify both replicationFactor and nrtReplicas as they mean the same thing\"));\n      }\n\n      //Create it again correctly\n      CollectionAdminRequest.Create req = CollectionAdminRequest.createCollection(\"test_repFactorColl\", \"conf1\", 1, 3, 0, 0);\n      client.request(req);\n\n      waitForCollection(cloudClient.getZkStateReader(), \"test_repFactorColl\", 1);\n      waitForRecoveriesToFinish(\"test_repFactorColl\", false);\n\n      //Assert that replicationFactor has also been set to 3\n      assertCountsForRepFactorAndNrtReplicas(client, \"test_repFactorColl\");\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.MODIFYCOLLECTION.toString());\n      params.set(\"collection\", \"test_repFactorColl\");\n      params.set(\"replicationFactor\", \"4\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      assertCountsForRepFactorAndNrtReplicas(client, \"test_repFactorColl\");\n    }\n  }\n\n","sourceOld":"  private void testReplicationFactorValidaton() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      //Test that you can't specify both replicationFactor and nrtReplicas\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"test_repFactorColl\");\n      params.set(\"numShards\", \"1\");\n      params.set(\"replicationFactor\", \"1\");\n      params.set(\"nrtReplicas\", \"2\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      try {\n        client.request(request);\n        fail();\n      } catch (RemoteSolrException e) {\n        final String errorMessage = e.getMessage();\n        assertTrue(errorMessage.contains(\"Cannot specify both replicationFactor and nrtReplicas as they mean the same thing\"));\n      }\n\n      //Create it again correctly\n      CollectionAdminRequest.Create req = CollectionAdminRequest.createCollection(\"test_repFactorColl\", \"conf1\", 1, 3, 0, 0);\n      client.request(req);\n\n      waitForCollection(cloudClient.getZkStateReader(), \"test_repFactorColl\", 1);\n      waitForRecoveriesToFinish(\"test_repFactorColl\", false);\n\n      //Assert that replicationFactor has also been set to 3\n      assertCountsForRepFactorAndNrtReplicas(client, \"test_repFactorColl\");\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.MODIFYCOLLECTION.toString());\n      params.set(\"collection\", \"test_repFactorColl\");\n      params.set(\"replicationFactor\", \"4\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      assertCountsForRepFactorAndNrtReplicas(client, \"test_repFactorColl\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#testReplicationFactorValidaton().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#testReplicationFactorValidaton().mjava","sourceNew":"  private void testReplicationFactorValidaton() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      //Test that you can't specify both replicationFactor and nrtReplicas\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"test_repFactorColl\");\n      params.set(\"numShards\", \"1\");\n      params.set(\"replicationFactor\", \"1\");\n      params.set(\"nrtReplicas\", \"2\");\n      @SuppressWarnings({\"rawtypes\"})\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      try {\n        client.request(request);\n        fail();\n      } catch (BaseHttpSolrClient.RemoteSolrException e) {\n        final String errorMessage = e.getMessage();\n        assertTrue(errorMessage.contains(\"Cannot specify both replicationFactor and nrtReplicas as they mean the same thing\"));\n      }\n\n      //Create it again correctly\n      CollectionAdminRequest.Create req = CollectionAdminRequest.createCollection(\"test_repFactorColl\", \"conf1\", 1, 3, 0, 0);\n      client.request(req);\n\n      waitForCollection(cloudClient.getZkStateReader(), \"test_repFactorColl\", 1);\n      waitForRecoveriesToFinish(\"test_repFactorColl\", false);\n\n      //Assert that replicationFactor has also been set to 3\n      assertCountsForRepFactorAndNrtReplicas(client, \"test_repFactorColl\");\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.MODIFYCOLLECTION.toString());\n      params.set(\"collection\", \"test_repFactorColl\");\n      params.set(\"replicationFactor\", \"4\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      assertCountsForRepFactorAndNrtReplicas(client, \"test_repFactorColl\");\n    }\n  }\n\n","sourceOld":"  private void testReplicationFactorValidaton() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      //Test that you can't specify both replicationFactor and nrtReplicas\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"test_repFactorColl\");\n      params.set(\"numShards\", \"1\");\n      params.set(\"replicationFactor\", \"1\");\n      params.set(\"nrtReplicas\", \"2\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      try {\n        client.request(request);\n        fail();\n      } catch (BaseHttpSolrClient.RemoteSolrException e) {\n        final String errorMessage = e.getMessage();\n        assertTrue(errorMessage.contains(\"Cannot specify both replicationFactor and nrtReplicas as they mean the same thing\"));\n      }\n\n      //Create it again correctly\n      CollectionAdminRequest.Create req = CollectionAdminRequest.createCollection(\"test_repFactorColl\", \"conf1\", 1, 3, 0, 0);\n      client.request(req);\n\n      waitForCollection(cloudClient.getZkStateReader(), \"test_repFactorColl\", 1);\n      waitForRecoveriesToFinish(\"test_repFactorColl\", false);\n\n      //Assert that replicationFactor has also been set to 3\n      assertCountsForRepFactorAndNrtReplicas(client, \"test_repFactorColl\");\n\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.MODIFYCOLLECTION.toString());\n      params.set(\"collection\", \"test_repFactorColl\");\n      params.set(\"replicationFactor\", \"4\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      assertCountsForRepFactorAndNrtReplicas(client, \"test_repFactorColl\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","397b96a886ece05a1444aa3771e10825e1145c1f"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["db96734b79e26d948b59f68bd4564c4836a71acf"],"397b96a886ece05a1444aa3771e10825e1145c1f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db96734b79e26d948b59f68bd4564c4836a71acf":["397b96a886ece05a1444aa3771e10825e1145c1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","397b96a886ece05a1444aa3771e10825e1145c1f"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"397b96a886ece05a1444aa3771e10825e1145c1f":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","db96734b79e26d948b59f68bd4564c4836a71acf","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","397b96a886ece05a1444aa3771e10825e1145c1f","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"db96734b79e26d948b59f68bd4564c4836a71acf":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}