{"path":"solr/core/src/java/org/apache/solr/analysis/LegacyHTMLStripCharFilter#findEndTag().mjava","commits":[{"id":"e3a908bacd530957eaa6d2dfebdd534afd9ac60e","date":1327209646,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/LegacyHTMLStripCharFilter#findEndTag().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#findEndTag().mjava","sourceNew":"  // find an end tag, but beware of comments...\n  // <script><!-- </script> -->foo</script>\n  // beware markup in script strings: </script>...document.write(\"</script>\")foo</script>\n  // TODO: do I need to worry about CDATA sections \"<![CDATA[\"  ?\n  int findEndTag() throws IOException {\n\n    while ((numRead - lastMark) < safeReadAheadLimit) {\n      int ch = next();\n      if (ch=='<') {\n        ch = next();\n        // skip looking for end-tag in comments\n        if (ch=='!') {\n          int ret = readBang(true);\n          if (ret==MATCH) continue;\n          // yikes... what now?  It wasn't a comment, but I can't get\n          // back to the state I was at.  Just continue from where I\n          // am I guess...\n          continue;\n        }\n        // did we match \"</\"\n        if (ch!='/') {\n          push(ch);\n          continue;\n        }\n        int ret = readName(false);\n        if (ret==MISMATCH) return MISMATCH;\n        ch=nextSkipWS();\n        if (ch!='>') return MISMATCH;\n        return MATCH;\n      } else if (ch=='\\'' || ch=='\"') {\n        // read javascript string to avoid a false match.\n        push(ch);\n        int ret = readScriptString();\n        // what to do about a non-match (non-terminated string?)\n        // play it safe and index the rest of the data I guess...\n        if (ret==MISMATCH) return MISMATCH;\n      } else if (ch<0) {\n        return MISMATCH;\n      }\n\n    }\n    return MISMATCH;\n  }\n\n","sourceOld":"  // find an end tag, but beware of comments...\n  // <script><!-- </script> -->foo</script>\n  // beware markup in script strings: </script>...document.write(\"</script>\")foo</script>\n  // TODO: do I need to worry about CDATA sections \"<![CDATA[\"  ?\n  int findEndTag() throws IOException {\n\n    while ((numRead - lastMark) < safeReadAheadLimit) {\n      int ch = next();\n      if (ch=='<') {\n        ch = next();\n        // skip looking for end-tag in comments\n        if (ch=='!') {\n          int ret = readBang(true);\n          if (ret==MATCH) continue;\n          // yikes... what now?  It wasn't a comment, but I can't get\n          // back to the state I was at.  Just continue from where I\n          // am I guess...\n          continue;\n        }\n        // did we match \"</\"\n        if (ch!='/') {\n          push(ch);\n          continue;\n        }\n        int ret = readName(false);\n        if (ret==MISMATCH) return MISMATCH;\n        ch=nextSkipWS();\n        if (ch!='>') return MISMATCH;\n        return MATCH;\n      } else if (ch=='\\'' || ch=='\"') {\n        // read javascript string to avoid a false match.\n        push(ch);\n        int ret = readScriptString();\n        // what to do about a non-match (non-terminated string?)\n        // play it safe and index the rest of the data I guess...\n        if (ret==MISMATCH) return MISMATCH;\n      } else if (ch<0) {\n        return MISMATCH;\n      }\n\n    }\n    return MISMATCH;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"579dc30b5d3235c34cda518b2b6018d71a61879c","date":1327235122,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analysis/LegacyHTMLStripCharFilter#findEndTag().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#findEndTag().mjava","sourceNew":"  // find an end tag, but beware of comments...\n  // <script><!-- </script> -->foo</script>\n  // beware markup in script strings: </script>...document.write(\"</script>\")foo</script>\n  // TODO: do I need to worry about CDATA sections \"<![CDATA[\"  ?\n  int findEndTag() throws IOException {\n\n    while ((numRead - lastMark) < safeReadAheadLimit) {\n      int ch = next();\n      if (ch=='<') {\n        ch = next();\n        // skip looking for end-tag in comments\n        if (ch=='!') {\n          int ret = readBang(true);\n          if (ret==MATCH) continue;\n          // yikes... what now?  It wasn't a comment, but I can't get\n          // back to the state I was at.  Just continue from where I\n          // am I guess...\n          continue;\n        }\n        // did we match \"</\"\n        if (ch!='/') {\n          push(ch);\n          continue;\n        }\n        int ret = readName(false);\n        if (ret==MISMATCH) return MISMATCH;\n        ch=nextSkipWS();\n        if (ch!='>') return MISMATCH;\n        return MATCH;\n      } else if (ch=='\\'' || ch=='\"') {\n        // read javascript string to avoid a false match.\n        push(ch);\n        int ret = readScriptString();\n        // what to do about a non-match (non-terminated string?)\n        // play it safe and index the rest of the data I guess...\n        if (ret==MISMATCH) return MISMATCH;\n      } else if (ch<0) {\n        return MISMATCH;\n      }\n\n    }\n    return MISMATCH;\n  }\n\n","sourceOld":"  // find an end tag, but beware of comments...\n  // <script><!-- </script> -->foo</script>\n  // beware markup in script strings: </script>...document.write(\"</script>\")foo</script>\n  // TODO: do I need to worry about CDATA sections \"<![CDATA[\"  ?\n  int findEndTag() throws IOException {\n\n    while ((numRead - lastMark) < safeReadAheadLimit) {\n      int ch = next();\n      if (ch=='<') {\n        ch = next();\n        // skip looking for end-tag in comments\n        if (ch=='!') {\n          int ret = readBang(true);\n          if (ret==MATCH) continue;\n          // yikes... what now?  It wasn't a comment, but I can't get\n          // back to the state I was at.  Just continue from where I\n          // am I guess...\n          continue;\n        }\n        // did we match \"</\"\n        if (ch!='/') {\n          push(ch);\n          continue;\n        }\n        int ret = readName(false);\n        if (ret==MISMATCH) return MISMATCH;\n        ch=nextSkipWS();\n        if (ch!='>') return MISMATCH;\n        return MATCH;\n      } else if (ch=='\\'' || ch=='\"') {\n        // read javascript string to avoid a false match.\n        push(ch);\n        int ret = readScriptString();\n        // what to do about a non-match (non-terminated string?)\n        // play it safe and index the rest of the data I guess...\n        if (ret==MISMATCH) return MISMATCH;\n      } else if (ch<0) {\n        return MISMATCH;\n      }\n\n    }\n    return MISMATCH;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analysis/LegacyHTMLStripCharFilter#findEndTag().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#findEndTag().mjava","sourceNew":"  // find an end tag, but beware of comments...\n  // <script><!-- </script> -->foo</script>\n  // beware markup in script strings: </script>...document.write(\"</script>\")foo</script>\n  // TODO: do I need to worry about CDATA sections \"<![CDATA[\"  ?\n  int findEndTag() throws IOException {\n\n    while ((numRead - lastMark) < safeReadAheadLimit) {\n      int ch = next();\n      if (ch=='<') {\n        ch = next();\n        // skip looking for end-tag in comments\n        if (ch=='!') {\n          int ret = readBang(true);\n          if (ret==MATCH) continue;\n          // yikes... what now?  It wasn't a comment, but I can't get\n          // back to the state I was at.  Just continue from where I\n          // am I guess...\n          continue;\n        }\n        // did we match \"</\"\n        if (ch!='/') {\n          push(ch);\n          continue;\n        }\n        int ret = readName(false);\n        if (ret==MISMATCH) return MISMATCH;\n        ch=nextSkipWS();\n        if (ch!='>') return MISMATCH;\n        return MATCH;\n      } else if (ch=='\\'' || ch=='\"') {\n        // read javascript string to avoid a false match.\n        push(ch);\n        int ret = readScriptString();\n        // what to do about a non-match (non-terminated string?)\n        // play it safe and index the rest of the data I guess...\n        if (ret==MISMATCH) return MISMATCH;\n      } else if (ch<0) {\n        return MISMATCH;\n      }\n\n    }\n    return MISMATCH;\n  }\n\n","sourceOld":"  // find an end tag, but beware of comments...\n  // <script><!-- </script> -->foo</script>\n  // beware markup in script strings: </script>...document.write(\"</script>\")foo</script>\n  // TODO: do I need to worry about CDATA sections \"<![CDATA[\"  ?\n  int findEndTag() throws IOException {\n\n    while ((numRead - lastMark) < safeReadAheadLimit) {\n      int ch = next();\n      if (ch=='<') {\n        ch = next();\n        // skip looking for end-tag in comments\n        if (ch=='!') {\n          int ret = readBang(true);\n          if (ret==MATCH) continue;\n          // yikes... what now?  It wasn't a comment, but I can't get\n          // back to the state I was at.  Just continue from where I\n          // am I guess...\n          continue;\n        }\n        // did we match \"</\"\n        if (ch!='/') {\n          push(ch);\n          continue;\n        }\n        int ret = readName(false);\n        if (ret==MISMATCH) return MISMATCH;\n        ch=nextSkipWS();\n        if (ch!='>') return MISMATCH;\n        return MATCH;\n      } else if (ch=='\\'' || ch=='\"') {\n        // read javascript string to avoid a false match.\n        push(ch);\n        int ret = readScriptString();\n        // what to do about a non-match (non-terminated string?)\n        // play it safe and index the rest of the data I guess...\n        if (ret==MISMATCH) return MISMATCH;\n      } else if (ch<0) {\n        return MISMATCH;\n      }\n\n    }\n    return MISMATCH;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fc9f4a33c8fefeb1260aea04273a36b0d32378e","date":1421852764,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/analysis/LegacyHTMLStripCharFilter#findEndTag().mjava","sourceNew":null,"sourceOld":"  // find an end tag, but beware of comments...\n  // <script><!-- </script> -->foo</script>\n  // beware markup in script strings: </script>...document.write(\"</script>\")foo</script>\n  // TODO: do I need to worry about CDATA sections \"<![CDATA[\"  ?\n  int findEndTag() throws IOException {\n\n    while ((numRead - lastMark) < safeReadAheadLimit) {\n      int ch = next();\n      if (ch=='<') {\n        ch = next();\n        // skip looking for end-tag in comments\n        if (ch=='!') {\n          int ret = readBang(true);\n          if (ret==MATCH) continue;\n          // yikes... what now?  It wasn't a comment, but I can't get\n          // back to the state I was at.  Just continue from where I\n          // am I guess...\n          continue;\n        }\n        // did we match \"</\"\n        if (ch!='/') {\n          push(ch);\n          continue;\n        }\n        int ret = readName(false);\n        if (ret==MISMATCH) return MISMATCH;\n        ch=nextSkipWS();\n        if (ch!='>') return MISMATCH;\n        return MATCH;\n      } else if (ch=='\\'' || ch=='\"') {\n        // read javascript string to avoid a false match.\n        push(ch);\n        int ret = readScriptString();\n        // what to do about a non-match (non-terminated string?)\n        // play it safe and index the rest of the data I guess...\n        if (ret==MISMATCH) return MISMATCH;\n      } else if (ch<0) {\n        return MISMATCH;\n      }\n\n    }\n    return MISMATCH;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2fc9f4a33c8fefeb1260aea04273a36b0d32378e":["e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"e3a908bacd530957eaa6d2dfebdd534afd9ac60e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"579dc30b5d3235c34cda518b2b6018d71a61879c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2fc9f4a33c8fefeb1260aea04273a36b0d32378e"]},"commit2Childs":{"2fc9f4a33c8fefeb1260aea04273a36b0d32378e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","e3a908bacd530957eaa6d2dfebdd534afd9ac60e","579dc30b5d3235c34cda518b2b6018d71a61879c"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"e3a908bacd530957eaa6d2dfebdd534afd9ac60e":["2fc9f4a33c8fefeb1260aea04273a36b0d32378e","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","579dc30b5d3235c34cda518b2b6018d71a61879c"],"579dc30b5d3235c34cda518b2b6018d71a61879c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","579dc30b5d3235c34cda518b2b6018d71a61879c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}