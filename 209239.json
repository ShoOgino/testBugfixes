{"path":"modules/spatial/src/test/java/org/apache/lucene/spatial/base/distance/TestDistances#checkBBox(Point,double).mjava","commits":[{"id":"ef186f4ac90644cd4e8df6b66acb56a52e5ca602","date":1329778037,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/test/java/org/apache/lucene/spatial/base/distance/TestDistances#checkBBox(Point,double).mjava","pathOld":"modules/spatial-lucene/src/test/java/org/apache/lucene/spatial/base/distance/TestDistances#checkBBox(Point,double).mjava","sourceNew":"  private void checkBBox(Point ctr, double dist) {\n    String msg = \"ctr: \"+ctr+\" dist: \"+dist;\n\n    Rectangle r = dc().calcBoxByDistFromPt(ctr, dist, ctx);\n    double horizAxisLat = dc().calcBoxByDistFromPtHorizAxis(ctr,dist, ctx);\n    if (!Double.isNaN(horizAxisLat))\n      assertTrue(r.relate_yRange(horizAxisLat, horizAxisLat, ctx).intersects());\n\n    //horizontal\n    if (r.getWidth() >= 180) {\n      double calcDist = dc().distance(ctr,r.getMinX(), r.getMaxY() == 90 ? 90 : -90 );\n      assertTrue(msg,calcDist <= dist+EPS);\n      //horizAxisLat is meaningless in this context\n    } else {\n      Point tPt = findClosestPointOnVertToPoint(r.getMinX(), r.getMinY(), r.getMaxY(), ctr);\n      double calcDist = dc().distance(ctr,tPt);\n      assertEquals(msg,dist,calcDist,EPS);\n      assertEquals(msg,tPt.getY(),horizAxisLat,EPS);\n    }\n    \n    //vertical\n    double topDist = dc().distance(ctr,ctr.getX(),r.getMaxY());\n    if (r.getMaxY() == 90)\n      assertTrue(msg,topDist <= dist+EPS);\n    else\n      assertEquals(msg,dist,topDist,EPS);\n    double botDist = dc().distance(ctr,ctr.getX(),r.getMinY());\n    if (r.getMinY() == -90)\n      assertTrue(msg,botDist <= dist+EPS);\n    else\n      assertEquals(msg,dist,botDist,EPS);\n  }\n\n","sourceOld":"  private void checkBBox(Point ctr, double dist) {\n    String msg = \"ctr: \"+ctr+\" dist: \"+dist;\n\n    Rectangle r = dc().calcBoxByDistFromPt(ctr, dist, ctx);\n    double horizAxisLat = dc().calcBoxByDistFromPtHorizAxis(ctr,dist, ctx);\n    if (!Double.isNaN(horizAxisLat))\n      assertTrue(r.relate_yRange(horizAxisLat, horizAxisLat, ctx).intersects());\n\n    //horizontal\n    if (r.getWidth() >= 180) {\n      double calcDist = dc().distance(ctr,r.getMinX(), r.getMaxY() == 90 ? 90 : -90 );\n      assertTrue(msg,calcDist <= dist+EPS);\n      //horizAxisLat is meaningless in this context\n    } else {\n      Point tPt = findClosestPointOnVertToPoint(r.getMinX(), r.getMinY(), r.getMaxY(), ctr);\n      double calcDist = dc().distance(ctr,tPt);\n      assertEquals(msg,dist,calcDist,EPS);\n      assertEquals(msg,tPt.getY(),horizAxisLat,EPS);\n    }\n    \n    //vertical\n    double topDist = dc().distance(ctr,ctr.getX(),r.getMaxY());\n    if (r.getMaxY() == 90)\n      assertTrue(msg,topDist <= dist+EPS);\n    else\n      assertEquals(msg,dist,topDist,EPS);\n    double botDist = dc().distance(ctr,ctr.getX(),r.getMinY());\n    if (r.getMinY() == -90)\n      assertTrue(msg,botDist <= dist+EPS);\n    else\n      assertEquals(msg,dist,botDist,EPS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"935445a30e9e8dc0240a7c78efc73d08c2faa6a8","date":1329778521,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/test/org/apache/lucene/spatial/base/distance/TestDistances#checkBBox(Point,double).mjava","pathOld":"modules/spatial/src/test/java/org/apache/lucene/spatial/base/distance/TestDistances#checkBBox(Point,double).mjava","sourceNew":"  private void checkBBox(Point ctr, double dist) {\n    String msg = \"ctr: \"+ctr+\" dist: \"+dist;\n\n    Rectangle r = dc().calcBoxByDistFromPt(ctr, dist, ctx);\n    double horizAxisLat = dc().calcBoxByDistFromPtHorizAxis(ctr,dist, ctx);\n    if (!Double.isNaN(horizAxisLat))\n      assertTrue(r.relate_yRange(horizAxisLat, horizAxisLat, ctx).intersects());\n\n    //horizontal\n    if (r.getWidth() >= 180) {\n      double calcDist = dc().distance(ctr,r.getMinX(), r.getMaxY() == 90 ? 90 : -90 );\n      assertTrue(msg,calcDist <= dist+EPS);\n      //horizAxisLat is meaningless in this context\n    } else {\n      Point tPt = findClosestPointOnVertToPoint(r.getMinX(), r.getMinY(), r.getMaxY(), ctr);\n      double calcDist = dc().distance(ctr,tPt);\n      assertEquals(msg,dist,calcDist,EPS);\n      assertEquals(msg,tPt.getY(),horizAxisLat,EPS);\n    }\n    \n    //vertical\n    double topDist = dc().distance(ctr,ctr.getX(),r.getMaxY());\n    if (r.getMaxY() == 90)\n      assertTrue(msg,topDist <= dist+EPS);\n    else\n      assertEquals(msg,dist,topDist,EPS);\n    double botDist = dc().distance(ctr,ctr.getX(),r.getMinY());\n    if (r.getMinY() == -90)\n      assertTrue(msg,botDist <= dist+EPS);\n    else\n      assertEquals(msg,dist,botDist,EPS);\n  }\n\n","sourceOld":"  private void checkBBox(Point ctr, double dist) {\n    String msg = \"ctr: \"+ctr+\" dist: \"+dist;\n\n    Rectangle r = dc().calcBoxByDistFromPt(ctr, dist, ctx);\n    double horizAxisLat = dc().calcBoxByDistFromPtHorizAxis(ctr,dist, ctx);\n    if (!Double.isNaN(horizAxisLat))\n      assertTrue(r.relate_yRange(horizAxisLat, horizAxisLat, ctx).intersects());\n\n    //horizontal\n    if (r.getWidth() >= 180) {\n      double calcDist = dc().distance(ctr,r.getMinX(), r.getMaxY() == 90 ? 90 : -90 );\n      assertTrue(msg,calcDist <= dist+EPS);\n      //horizAxisLat is meaningless in this context\n    } else {\n      Point tPt = findClosestPointOnVertToPoint(r.getMinX(), r.getMinY(), r.getMaxY(), ctr);\n      double calcDist = dc().distance(ctr,tPt);\n      assertEquals(msg,dist,calcDist,EPS);\n      assertEquals(msg,tPt.getY(),horizAxisLat,EPS);\n    }\n    \n    //vertical\n    double topDist = dc().distance(ctr,ctr.getX(),r.getMaxY());\n    if (r.getMaxY() == 90)\n      assertTrue(msg,topDist <= dist+EPS);\n    else\n      assertEquals(msg,dist,topDist,EPS);\n    double botDist = dc().distance(ctr,ctr.getX(),r.getMinY());\n    if (r.getMinY() == -90)\n      assertTrue(msg,botDist <= dist+EPS);\n    else\n      assertEquals(msg,dist,botDist,EPS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"935445a30e9e8dc0240a7c78efc73d08c2faa6a8":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"935445a30e9e8dc0240a7c78efc73d08c2faa6a8":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":["935445a30e9e8dc0240a7c78efc73d08c2faa6a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["935445a30e9e8dc0240a7c78efc73d08c2faa6a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}