{"path":"src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEqualsAndHash().mjava","commits":[{"id":"53b6c192847de8643a5da505cc433cbf8476a175","date":1245413392,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEqualsAndHash().mjava","pathOld":"/dev/null","sourceNew":"  public void testEqualsAndHash() throws Exception {\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test1\", 4, new Integer(10), new Integer(20), true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test2\", 4, new Integer(10), new Integer(20), false, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test3\", 4, new Integer(10), new Integer(20), true, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test4\", 4, new Integer(10), new Integer(20), false, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test5\", 4, new Integer(10), null, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test6\", 4, null, new Integer(20), true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test7\", 4, null, null, true, true));\n    QueryUtils.checkEqual(\n      NumericRangeQuery.newIntRange(\"test8\", 4, new Integer(10), new Integer(20), true, true), \n      NumericRangeQuery.newIntRange(\"test8\", 4, new Integer(10), new Integer(20), true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test9\", 4, new Integer(10), new Integer(20), true, true), \n      NumericRangeQuery.newIntRange(\"test9\", 8, new Integer(10), new Integer(20), true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test10a\", 4, new Integer(10), new Integer(20), true, true), \n      NumericRangeQuery.newIntRange(\"test10b\", 4, new Integer(10), new Integer(20), true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test11\", 4, new Integer(10), new Integer(20), true, true), \n      NumericRangeQuery.newIntRange(\"test11\", 4, new Integer(20), new Integer(10), true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test12\", 4, new Integer(10), new Integer(20), true, true), \n      NumericRangeQuery.newIntRange(\"test12\", 4, new Integer(10), new Integer(20), false, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test13\", 4, new Integer(10), new Integer(20), true, true), \n      NumericRangeQuery.newFloatRange(\"test13\", 4, new Float(10f), new Float(20f), true, true)\n    );\n    // the following produces a hash collision, because Long and Integer have the same hashcode, so only test equality:\n    Query q1 = NumericRangeQuery.newIntRange(\"test14\", 4, new Integer(10), new Integer(20), true, true);\n    Query q2 = NumericRangeQuery.newLongRange(\"test14\", 4, new Long(10L), new Long(20L), true, true);\n    assertFalse(q1.equals(q2));\n    assertFalse(q2.equals(q1));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7d2ae00274b66906b7d2cfb445dcb095f6c1d6d","date":1245919872,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEqualsAndHash().mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEqualsAndHash().mjava","sourceNew":"  public void testEqualsAndHash() throws Exception {\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test1\", 4, new Integer(10), new Integer(20), true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test2\", 4, new Integer(10), new Integer(20), false, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test3\", 4, new Integer(10), new Integer(20), true, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test4\", 4, new Integer(10), new Integer(20), false, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test5\", 4, new Integer(10), null, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test6\", 4, null, new Integer(20), true, true));\n    QueryUtils.checkEqual(\n      NumericRangeQuery.newIntRange(\"test8\", 4, new Integer(10), new Integer(20), true, true), \n      NumericRangeQuery.newIntRange(\"test8\", 4, new Integer(10), new Integer(20), true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test9\", 4, new Integer(10), new Integer(20), true, true), \n      NumericRangeQuery.newIntRange(\"test9\", 8, new Integer(10), new Integer(20), true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test10a\", 4, new Integer(10), new Integer(20), true, true), \n      NumericRangeQuery.newIntRange(\"test10b\", 4, new Integer(10), new Integer(20), true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test11\", 4, new Integer(10), new Integer(20), true, true), \n      NumericRangeQuery.newIntRange(\"test11\", 4, new Integer(20), new Integer(10), true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test12\", 4, new Integer(10), new Integer(20), true, true), \n      NumericRangeQuery.newIntRange(\"test12\", 4, new Integer(10), new Integer(20), false, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test13\", 4, new Integer(10), new Integer(20), true, true), \n      NumericRangeQuery.newFloatRange(\"test13\", 4, new Float(10f), new Float(20f), true, true)\n    );\n    // the following produces a hash collision, because Long and Integer have the same hashcode, so only test equality:\n    Query q1 = NumericRangeQuery.newIntRange(\"test14\", 4, new Integer(10), new Integer(20), true, true);\n    Query q2 = NumericRangeQuery.newLongRange(\"test14\", 4, new Long(10L), new Long(20L), true, true);\n    assertFalse(q1.equals(q2));\n    assertFalse(q2.equals(q1));\n  }\n\n","sourceOld":"  public void testEqualsAndHash() throws Exception {\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test1\", 4, new Integer(10), new Integer(20), true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test2\", 4, new Integer(10), new Integer(20), false, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test3\", 4, new Integer(10), new Integer(20), true, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test4\", 4, new Integer(10), new Integer(20), false, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test5\", 4, new Integer(10), null, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test6\", 4, null, new Integer(20), true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test7\", 4, null, null, true, true));\n    QueryUtils.checkEqual(\n      NumericRangeQuery.newIntRange(\"test8\", 4, new Integer(10), new Integer(20), true, true), \n      NumericRangeQuery.newIntRange(\"test8\", 4, new Integer(10), new Integer(20), true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test9\", 4, new Integer(10), new Integer(20), true, true), \n      NumericRangeQuery.newIntRange(\"test9\", 8, new Integer(10), new Integer(20), true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test10a\", 4, new Integer(10), new Integer(20), true, true), \n      NumericRangeQuery.newIntRange(\"test10b\", 4, new Integer(10), new Integer(20), true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test11\", 4, new Integer(10), new Integer(20), true, true), \n      NumericRangeQuery.newIntRange(\"test11\", 4, new Integer(20), new Integer(10), true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test12\", 4, new Integer(10), new Integer(20), true, true), \n      NumericRangeQuery.newIntRange(\"test12\", 4, new Integer(10), new Integer(20), false, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test13\", 4, new Integer(10), new Integer(20), true, true), \n      NumericRangeQuery.newFloatRange(\"test13\", 4, new Float(10f), new Float(20f), true, true)\n    );\n    // the following produces a hash collision, because Long and Integer have the same hashcode, so only test equality:\n    Query q1 = NumericRangeQuery.newIntRange(\"test14\", 4, new Integer(10), new Integer(20), true, true);\n    Query q2 = NumericRangeQuery.newLongRange(\"test14\", 4, new Long(10L), new Long(20L), true, true);\n    assertFalse(q1.equals(q2));\n    assertFalse(q2.equals(q1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b2ba469e48c35b93f118b45188ffaf6e9c31c9c","date":1246364870,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEqualsAndHash().mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEqualsAndHash().mjava","sourceNew":"  public void testEqualsAndHash() throws Exception {\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test1\", 4, new Integer(10), new Integer(20), true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test2\", 4, new Integer(10), new Integer(20), false, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test3\", 4, new Integer(10), new Integer(20), true, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test4\", 4, new Integer(10), new Integer(20), false, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test5\", 4, new Integer(10), null, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test6\", 4, null, new Integer(20), true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test7\", 4, null, null, true, true));\n    QueryUtils.checkEqual(\n      NumericRangeQuery.newIntRange(\"test8\", 4, new Integer(10), new Integer(20), true, true), \n      NumericRangeQuery.newIntRange(\"test8\", 4, new Integer(10), new Integer(20), true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test9\", 4, new Integer(10), new Integer(20), true, true), \n      NumericRangeQuery.newIntRange(\"test9\", 8, new Integer(10), new Integer(20), true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test10a\", 4, new Integer(10), new Integer(20), true, true), \n      NumericRangeQuery.newIntRange(\"test10b\", 4, new Integer(10), new Integer(20), true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test11\", 4, new Integer(10), new Integer(20), true, true), \n      NumericRangeQuery.newIntRange(\"test11\", 4, new Integer(20), new Integer(10), true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test12\", 4, new Integer(10), new Integer(20), true, true), \n      NumericRangeQuery.newIntRange(\"test12\", 4, new Integer(10), new Integer(20), false, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test13\", 4, new Integer(10), new Integer(20), true, true), \n      NumericRangeQuery.newFloatRange(\"test13\", 4, new Float(10f), new Float(20f), true, true)\n    );\n    // the following produces a hash collision, because Long and Integer have the same hashcode, so only test equality:\n    Query q1 = NumericRangeQuery.newIntRange(\"test14\", 4, new Integer(10), new Integer(20), true, true);\n    Query q2 = NumericRangeQuery.newLongRange(\"test14\", 4, new Long(10L), new Long(20L), true, true);\n    assertFalse(q1.equals(q2));\n    assertFalse(q2.equals(q1));\n  }\n\n","sourceOld":"  public void testEqualsAndHash() throws Exception {\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test1\", 4, new Integer(10), new Integer(20), true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test2\", 4, new Integer(10), new Integer(20), false, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test3\", 4, new Integer(10), new Integer(20), true, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test4\", 4, new Integer(10), new Integer(20), false, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test5\", 4, new Integer(10), null, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test6\", 4, null, new Integer(20), true, true));\n    QueryUtils.checkEqual(\n      NumericRangeQuery.newIntRange(\"test8\", 4, new Integer(10), new Integer(20), true, true), \n      NumericRangeQuery.newIntRange(\"test8\", 4, new Integer(10), new Integer(20), true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test9\", 4, new Integer(10), new Integer(20), true, true), \n      NumericRangeQuery.newIntRange(\"test9\", 8, new Integer(10), new Integer(20), true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test10a\", 4, new Integer(10), new Integer(20), true, true), \n      NumericRangeQuery.newIntRange(\"test10b\", 4, new Integer(10), new Integer(20), true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test11\", 4, new Integer(10), new Integer(20), true, true), \n      NumericRangeQuery.newIntRange(\"test11\", 4, new Integer(20), new Integer(10), true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test12\", 4, new Integer(10), new Integer(20), true, true), \n      NumericRangeQuery.newIntRange(\"test12\", 4, new Integer(10), new Integer(20), false, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test13\", 4, new Integer(10), new Integer(20), true, true), \n      NumericRangeQuery.newFloatRange(\"test13\", 4, new Float(10f), new Float(20f), true, true)\n    );\n    // the following produces a hash collision, because Long and Integer have the same hashcode, so only test equality:\n    Query q1 = NumericRangeQuery.newIntRange(\"test14\", 4, new Integer(10), new Integer(20), true, true);\n    Query q2 = NumericRangeQuery.newLongRange(\"test14\", 4, new Long(10L), new Long(20L), true, true);\n    assertFalse(q1.equals(q2));\n    assertFalse(q2.equals(q1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70a9e462a51fd525218b83cdc33329f5ee00ca20","date":1254431499,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEqualsAndHash().mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEqualsAndHash().mjava","sourceNew":"  public void testEqualsAndHash() throws Exception {\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test1\", 4, 10, 20, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test2\", 4, 10, 20, false, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test3\", 4, 10, 20, true, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test4\", 4, 10, 20, false, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test5\", 4, 10, null, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test6\", 4, null, 20, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test7\", 4, null, null, true, true));\n    QueryUtils.checkEqual(\n      NumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test9\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test9\", 8, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test10a\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test10b\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test11\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test11\", 4, 20, 10, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, false, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test13\", 4, 10, 20, true, true), \n      NumericRangeQuery.newFloatRange(\"test13\", 4, 10f, 20f, true, true)\n    );\n    // the following produces a hash collision, because Long and Integer have the same hashcode, so only test equality:\n    Query q1 = NumericRangeQuery.newIntRange(\"test14\", 4, 10, 20, true, true);\n    Query q2 = NumericRangeQuery.newLongRange(\"test14\", 4, 10L, 20L, true, true);\n    assertFalse(q1.equals(q2));\n    assertFalse(q2.equals(q1));\n  }\n\n","sourceOld":"  public void testEqualsAndHash() throws Exception {\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test1\", 4, new Integer(10), new Integer(20), true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test2\", 4, new Integer(10), new Integer(20), false, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test3\", 4, new Integer(10), new Integer(20), true, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test4\", 4, new Integer(10), new Integer(20), false, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test5\", 4, new Integer(10), null, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test6\", 4, null, new Integer(20), true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test7\", 4, null, null, true, true));\n    QueryUtils.checkEqual(\n      NumericRangeQuery.newIntRange(\"test8\", 4, new Integer(10), new Integer(20), true, true), \n      NumericRangeQuery.newIntRange(\"test8\", 4, new Integer(10), new Integer(20), true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test9\", 4, new Integer(10), new Integer(20), true, true), \n      NumericRangeQuery.newIntRange(\"test9\", 8, new Integer(10), new Integer(20), true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test10a\", 4, new Integer(10), new Integer(20), true, true), \n      NumericRangeQuery.newIntRange(\"test10b\", 4, new Integer(10), new Integer(20), true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test11\", 4, new Integer(10), new Integer(20), true, true), \n      NumericRangeQuery.newIntRange(\"test11\", 4, new Integer(20), new Integer(10), true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test12\", 4, new Integer(10), new Integer(20), true, true), \n      NumericRangeQuery.newIntRange(\"test12\", 4, new Integer(10), new Integer(20), false, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test13\", 4, new Integer(10), new Integer(20), true, true), \n      NumericRangeQuery.newFloatRange(\"test13\", 4, new Float(10f), new Float(20f), true, true)\n    );\n    // the following produces a hash collision, because Long and Integer have the same hashcode, so only test equality:\n    Query q1 = NumericRangeQuery.newIntRange(\"test14\", 4, new Integer(10), new Integer(20), true, true);\n    Query q2 = NumericRangeQuery.newLongRange(\"test14\", 4, new Long(10L), new Long(20L), true, true);\n    assertFalse(q1.equals(q2));\n    assertFalse(q2.equals(q1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6462d89a9840dd623bfbd36483d84abce975e31a","date":1266751912,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEqualsAndHash().mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEqualsAndHash().mjava","sourceNew":"  @Test\n  public void testEqualsAndHash() throws Exception {\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test1\", 4, 10, 20, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test2\", 4, 10, 20, false, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test3\", 4, 10, 20, true, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test4\", 4, 10, 20, false, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test5\", 4, 10, null, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test6\", 4, null, 20, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test7\", 4, null, null, true, true));\n    QueryUtils.checkEqual(\n      NumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test9\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test9\", 8, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test10a\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test10b\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test11\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test11\", 4, 20, 10, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, false, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test13\", 4, 10, 20, true, true), \n      NumericRangeQuery.newFloatRange(\"test13\", 4, 10f, 20f, true, true)\n    );\n    // the following produces a hash collision, because Long and Integer have the same hashcode, so only test equality:\n    Query q1 = NumericRangeQuery.newIntRange(\"test14\", 4, 10, 20, true, true);\n    Query q2 = NumericRangeQuery.newLongRange(\"test14\", 4, 10L, 20L, true, true);\n    assertFalse(q1.equals(q2));\n    assertFalse(q2.equals(q1));\n  }\n\n","sourceOld":"  public void testEqualsAndHash() throws Exception {\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test1\", 4, 10, 20, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test2\", 4, 10, 20, false, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test3\", 4, 10, 20, true, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test4\", 4, 10, 20, false, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test5\", 4, 10, null, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test6\", 4, null, 20, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test7\", 4, null, null, true, true));\n    QueryUtils.checkEqual(\n      NumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test9\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test9\", 8, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test10a\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test10b\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test11\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test11\", 4, 20, 10, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, false, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test13\", 4, 10, 20, true, true), \n      NumericRangeQuery.newFloatRange(\"test13\", 4, 10f, 20f, true, true)\n    );\n    // the following produces a hash collision, because Long and Integer have the same hashcode, so only test equality:\n    Query q1 = NumericRangeQuery.newIntRange(\"test14\", 4, 10, 20, true, true);\n    Query q2 = NumericRangeQuery.newLongRange(\"test14\", 4, 10L, 20L, true, true);\n    assertFalse(q1.equals(q2));\n    assertFalse(q2.equals(q1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEqualsAndHash().mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEqualsAndHash().mjava","sourceNew":"  @Test\n  public void testEqualsAndHash() throws Exception {\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test1\", 4, 10, 20, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test2\", 4, 10, 20, false, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test3\", 4, 10, 20, true, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test4\", 4, 10, 20, false, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test5\", 4, 10, null, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test6\", 4, null, 20, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test7\", 4, null, null, true, true));\n    QueryUtils.checkEqual(\n      NumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test9\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test9\", 8, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test10a\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test10b\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test11\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test11\", 4, 20, 10, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, false, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test13\", 4, 10, 20, true, true), \n      NumericRangeQuery.newFloatRange(\"test13\", 4, 10f, 20f, true, true)\n    );\n    // the following produces a hash collision, because Long and Integer have the same hashcode, so only test equality:\n    Query q1 = NumericRangeQuery.newIntRange(\"test14\", 4, 10, 20, true, true);\n    Query q2 = NumericRangeQuery.newLongRange(\"test14\", 4, 10L, 20L, true, true);\n    assertFalse(q1.equals(q2));\n    assertFalse(q2.equals(q1));\n  }\n\n","sourceOld":"  @Test\n  public void testEqualsAndHash() throws Exception {\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test1\", 4, 10, 20, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test2\", 4, 10, 20, false, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test3\", 4, 10, 20, true, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test4\", 4, 10, 20, false, false));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test5\", 4, 10, null, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test6\", 4, null, 20, true, true));\n    QueryUtils.checkHashEquals(NumericRangeQuery.newIntRange(\"test7\", 4, null, null, true, true));\n    QueryUtils.checkEqual(\n      NumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test8\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test9\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test9\", 8, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test10a\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test10b\", 4, 10, 20, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test11\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test11\", 4, 20, 10, true, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, true, true), \n      NumericRangeQuery.newIntRange(\"test12\", 4, 10, 20, false, true)\n    );\n    QueryUtils.checkUnequal(\n      NumericRangeQuery.newIntRange(\"test13\", 4, 10, 20, true, true), \n      NumericRangeQuery.newFloatRange(\"test13\", 4, 10f, 20f, true, true)\n    );\n    // the following produces a hash collision, because Long and Integer have the same hashcode, so only test equality:\n    Query q1 = NumericRangeQuery.newIntRange(\"test14\", 4, 10, 20, true, true);\n    Query q2 = NumericRangeQuery.newLongRange(\"test14\", 4, 10L, 20L, true, true);\n    assertFalse(q1.equals(q2));\n    assertFalse(q2.equals(q1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b7d2ae00274b66906b7d2cfb445dcb095f6c1d6d":["53b6c192847de8643a5da505cc433cbf8476a175"],"6462d89a9840dd623bfbd36483d84abce975e31a":["70a9e462a51fd525218b83cdc33329f5ee00ca20"],"9b2ba469e48c35b93f118b45188ffaf6e9c31c9c":["b7d2ae00274b66906b7d2cfb445dcb095f6c1d6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"70a9e462a51fd525218b83cdc33329f5ee00ca20":["9b2ba469e48c35b93f118b45188ffaf6e9c31c9c"],"53b6c192847de8643a5da505cc433cbf8476a175":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6462d89a9840dd623bfbd36483d84abce975e31a"]},"commit2Childs":{"b7d2ae00274b66906b7d2cfb445dcb095f6c1d6d":["9b2ba469e48c35b93f118b45188ffaf6e9c31c9c"],"6462d89a9840dd623bfbd36483d84abce975e31a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9b2ba469e48c35b93f118b45188ffaf6e9c31c9c":["70a9e462a51fd525218b83cdc33329f5ee00ca20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["53b6c192847de8643a5da505cc433cbf8476a175"],"53b6c192847de8643a5da505cc433cbf8476a175":["b7d2ae00274b66906b7d2cfb445dcb095f6c1d6d"],"70a9e462a51fd525218b83cdc33329f5ee00ca20":["6462d89a9840dd623bfbd36483d84abce975e31a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}