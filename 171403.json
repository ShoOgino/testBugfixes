{"path":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#pointInTriangle(double,double,double,double,double,double,double,double).mjava","commits":[{"id":"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","date":1531585717,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#pointInTriangle(double,double,double,double,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /** compute whether the given x, y point is in a triangle; uses the winding order method */\n  public static boolean pointInTriangle (double x, double y, double ax, double ay, double bx, double by, double cx, double cy) {\n    int a = orient(x, y, ax, ay, bx, by);\n    int b = orient(x, y, bx, by, cx, cy);\n    if (a == 0 || b == 0 || a < 0 == b < 0) {\n      int c = orient(x, y, cx, cy, ax, ay);\n      return c == 0 || (c < 0 == (b < 0 || a < 0));\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#pointInTriangle(double,double,double,double,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /** compute whether the given x, y point is in a triangle; uses the winding order method */\n  public static boolean pointInTriangle (double x, double y, double ax, double ay, double bx, double by, double cx, double cy) {\n    int a = orient(x, y, ax, ay, bx, by);\n    int b = orient(x, y, bx, by, cx, cy);\n    if (a == 0 || b == 0 || a < 0 == b < 0) {\n      int c = orient(x, y, cx, cy, ax, ay);\n      return c == 0 || (c < 0 == (b < 0 || a < 0));\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#pointInTriangle(double,double,double,double,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /** compute whether the given x, y point is in a triangle; uses the winding order method */\n  public static boolean pointInTriangle (double x, double y, double ax, double ay, double bx, double by, double cx, double cy) {\n    int a = orient(x, y, ax, ay, bx, by);\n    int b = orient(x, y, bx, by, cx, cy);\n    if (a == 0 || b == 0 || a < 0 == b < 0) {\n      int c = orient(x, y, cx, cy, ax, ay);\n      return c == 0 || (c < 0 == (b < 0 || a < 0));\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ed90f8ba7e7be13d155f954862178b23a324125","date":1568020603,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#pointInTriangle(double,double,double,double,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#pointInTriangle(double,double,double,double,double,double,double,double).mjava","sourceNew":"  /** compute whether the given x, y point is in a triangle; uses the winding order method */\n  public static boolean pointInTriangle (double x, double y, double ax, double ay, double bx, double by, double cx, double cy) {\n    double minX = StrictMath.min(ax, StrictMath.min(bx, cx));\n    double minY = StrictMath.min(ay, StrictMath.min(by, cy));\n    double maxX = StrictMath.max(ax, StrictMath.max(bx, cx));\n    double maxY = StrictMath.max(ay, StrictMath.max(by, cy));\n    //check the bounding box because if the triangle is degenerated, e.g points and lines, we need to filter out\n    //coplanar points that are not part of the triangle.\n    if (x >= minX && x <= maxX && y >= minY && y <= maxY ) {\n      int a = orient(x, y, ax, ay, bx, by);\n      int b = orient(x, y, bx, by, cx, cy);\n      if (a == 0 || b == 0 || a < 0 == b < 0) {\n        int c = orient(x, y, cx, cy, ax, ay);\n        return c == 0 || (c < 0 == (b < 0 || a < 0));\n      }\n      return false;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /** compute whether the given x, y point is in a triangle; uses the winding order method */\n  public static boolean pointInTriangle (double x, double y, double ax, double ay, double bx, double by, double cx, double cy) {\n    int a = orient(x, y, ax, ay, bx, by);\n    int b = orient(x, y, bx, by, cx, cy);\n    if (a == 0 || b == 0 || a < 0 == b < 0) {\n      int c = orient(x, y, cx, cy, ax, ay);\n      return c == 0 || (c < 0 == (b < 0 || a < 0));\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#pointInTriangle(double,double,double,double,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#pointInTriangle(double,double,double,double,double,double,double,double).mjava","sourceNew":"  /** compute whether the given x, y point is in a triangle; uses the winding order method */\n  public static boolean pointInTriangle (double x, double y, double ax, double ay, double bx, double by, double cx, double cy) {\n    double minX = StrictMath.min(ax, StrictMath.min(bx, cx));\n    double minY = StrictMath.min(ay, StrictMath.min(by, cy));\n    double maxX = StrictMath.max(ax, StrictMath.max(bx, cx));\n    double maxY = StrictMath.max(ay, StrictMath.max(by, cy));\n    //check the bounding box because if the triangle is degenerated, e.g points and lines, we need to filter out\n    //coplanar points that are not part of the triangle.\n    if (x >= minX && x <= maxX && y >= minY && y <= maxY ) {\n      int a = orient(x, y, ax, ay, bx, by);\n      int b = orient(x, y, bx, by, cx, cy);\n      if (a == 0 || b == 0 || a < 0 == b < 0) {\n        int c = orient(x, y, cx, cy, ax, ay);\n        return c == 0 || (c < 0 == (b < 0 || a < 0));\n      }\n      return false;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /** compute whether the given x, y point is in a triangle; uses the winding order method */\n  public static boolean pointInTriangle (double x, double y, double ax, double ay, double bx, double by, double cx, double cy) {\n    double minX = StrictMath.min(ax, StrictMath.min(bx, cx));\n    double minY = StrictMath.min(ay, StrictMath.min(by, cy));\n    double maxX = StrictMath.max(ax, StrictMath.max(bx, cx));\n    double maxY = StrictMath.max(ay, StrictMath.max(by, cy));\n    //check the bounding box because if the triangle is degenerated, e.g points and lines, we need to filter out\n    //coplanar points that are not part of the triangle.\n    if (x >= minX && x <= maxX && y >= minY && y <= maxY ) {\n      int a = orient(x, y, ax, ay, bx, by);\n      int b = orient(x, y, bx, by, cx, cy);\n      if (a == 0 || b == 0 || a < 0 == b < 0) {\n        int c = orient(x, y, cx, cy, ax, ay);\n        return c == 0 || (c < 0 == (b < 0 || a < 0));\n      }\n      return false;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["5ed90f8ba7e7be13d155f954862178b23a324125"],"5ed90f8ba7e7be13d155f954862178b23a324125":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"]},"commit2Childs":{"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","5ed90f8ba7e7be13d155f954862178b23a324125","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ed90f8ba7e7be13d155f954862178b23a324125":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}