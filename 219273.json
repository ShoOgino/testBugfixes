{"path":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsLockFactoryTest#testBasic().mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsLockFactoryTest#testBasic().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n    URI uri = dfsCluster.getURI();\n    Path lockPath = new Path(uri.toString(), \"/lock\");\n    HdfsLockFactory lockFactory = new HdfsLockFactory(lockPath, new Configuration());\n    Lock lock = lockFactory.makeLock(\"testlock\");\n    boolean success = lock.obtain();\n    assertTrue(\"We could not get the lock when it should be available\", success);\n    success = lock.obtain();\n    assertFalse(\"We got the lock but it should be unavailble\", success);\n    lock.release();\n    success = lock.obtain();\n    assertTrue(\"We could not get the lock when it should be available\", success);\n    success = lock.obtain();\n    assertFalse(\"We got the lock but it should be unavailble\", success);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b9d148752fc0b3fb8a781d56e6d0f834254db3b5","0fcdcf196523675146a4df3193e91413533857ab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsLockFactoryTest#testBasic().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n    URI uri = dfsCluster.getURI();\n    Path lockPath = new Path(uri.toString(), \"/lock\");\n    HdfsLockFactory lockFactory = new HdfsLockFactory(lockPath, new Configuration());\n    Lock lock = lockFactory.makeLock(\"testlock\");\n    boolean success = lock.obtain();\n    assertTrue(\"We could not get the lock when it should be available\", success);\n    success = lock.obtain();\n    assertFalse(\"We got the lock but it should be unavailble\", success);\n    lock.release();\n    success = lock.obtain();\n    assertTrue(\"We could not get the lock when it should be available\", success);\n    success = lock.obtain();\n    assertFalse(\"We got the lock but it should be unavailble\", success);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1dfca21e4315cbc5455ab7b5d6530c34f05fee48","date":1386348293,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsLockFactoryTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsLockFactoryTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n    URI uri = dfsCluster.getURI();\n    Path lockPath = new Path(uri.toString(), \"/basedir/lock\");\n    HdfsLockFactory lockFactory = new HdfsLockFactory(lockPath, new Configuration());\n    Lock lock = lockFactory.makeLock(\"testlock\");\n    boolean success = lock.obtain();\n    assertTrue(\"We could not get the lock when it should be available\", success);\n    success = lock.obtain();\n    assertFalse(\"We got the lock but it should be unavailble\", success);\n    lock.release();\n    success = lock.obtain();\n    assertTrue(\"We could not get the lock when it should be available\", success);\n    success = lock.obtain();\n    assertFalse(\"We got the lock but it should be unavailble\", success);\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws IOException {\n    URI uri = dfsCluster.getURI();\n    Path lockPath = new Path(uri.toString(), \"/lock\");\n    HdfsLockFactory lockFactory = new HdfsLockFactory(lockPath, new Configuration());\n    Lock lock = lockFactory.makeLock(\"testlock\");\n    boolean success = lock.obtain();\n    assertTrue(\"We could not get the lock when it should be available\", success);\n    success = lock.obtain();\n    assertFalse(\"We got the lock but it should be unavailble\", success);\n    lock.release();\n    success = lock.obtain();\n    assertTrue(\"We could not get the lock when it should be available\", success);\n    success = lock.obtain();\n    assertFalse(\"We got the lock but it should be unavailble\", success);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsLockFactoryTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsLockFactoryTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n    URI uri = dfsCluster.getURI();\n    Path lockPath = new Path(uri.toString(), \"/basedir/lock\");\n    HdfsLockFactory lockFactory = new HdfsLockFactory(lockPath, new Configuration());\n    Lock lock = lockFactory.makeLock(\"testlock\");\n    boolean success = lock.obtain();\n    assertTrue(\"We could not get the lock when it should be available\", success);\n    success = lock.obtain();\n    assertFalse(\"We got the lock but it should be unavailble\", success);\n    lock.release();\n    success = lock.obtain();\n    assertTrue(\"We could not get the lock when it should be available\", success);\n    success = lock.obtain();\n    assertFalse(\"We got the lock but it should be unavailble\", success);\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws IOException {\n    URI uri = dfsCluster.getURI();\n    Path lockPath = new Path(uri.toString(), \"/lock\");\n    HdfsLockFactory lockFactory = new HdfsLockFactory(lockPath, new Configuration());\n    Lock lock = lockFactory.makeLock(\"testlock\");\n    boolean success = lock.obtain();\n    assertTrue(\"We could not get the lock when it should be available\", success);\n    success = lock.obtain();\n    assertFalse(\"We got the lock but it should be unavailble\", success);\n    lock.release();\n    success = lock.obtain();\n    assertTrue(\"We could not get the lock when it should be available\", success);\n    success = lock.obtain();\n    assertFalse(\"We got the lock but it should be unavailble\", success);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fcdcf196523675146a4df3193e91413533857ab","date":1390686560,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsLockFactoryTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsLockFactoryTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n    URI uri = dfsCluster.getURI();\n    Path lockPath = new Path(uri.toString(), \"/basedir/lock\");\n    HdfsLockFactory lockFactory = new HdfsLockFactory(lockPath, new Configuration());\n    Lock lock = lockFactory.makeLock(\"testlock\");\n    boolean success = lock.obtain();\n    assertTrue(\"We could not get the lock when it should be available\", success);\n    success = lock.obtain();\n    assertFalse(\"We got the lock but it should be unavailble\", success);\n    lock.close();\n    success = lock.obtain();\n    assertTrue(\"We could not get the lock when it should be available\", success);\n    success = lock.obtain();\n    assertFalse(\"We got the lock but it should be unavailble\", success);\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws IOException {\n    URI uri = dfsCluster.getURI();\n    Path lockPath = new Path(uri.toString(), \"/basedir/lock\");\n    HdfsLockFactory lockFactory = new HdfsLockFactory(lockPath, new Configuration());\n    Lock lock = lockFactory.makeLock(\"testlock\");\n    boolean success = lock.obtain();\n    assertTrue(\"We could not get the lock when it should be available\", success);\n    success = lock.obtain();\n    assertFalse(\"We got the lock but it should be unavailble\", success);\n    lock.release();\n    success = lock.obtain();\n    assertTrue(\"We could not get the lock when it should be available\", success);\n    success = lock.obtain();\n    assertFalse(\"We got the lock but it should be unavailble\", success);\n  }\n\n","bugFix":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"bugIntro":["b9d148752fc0b3fb8a781d56e6d0f834254db3b5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsLockFactoryTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsLockFactoryTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n    URI uri = dfsCluster.getURI();\n    Path lockPath = new Path(uri.toString(), \"/basedir/lock\");\n    Configuration conf = new Configuration();\n    HdfsDirectory dir = new HdfsDirectory(lockPath, conf);\n    Lock lock = dir.makeLock(\"testlock\");\n    boolean success = lock.obtain();\n    assertTrue(\"We could not get the lock when it should be available\", success);\n    success = lock.obtain();\n    assertFalse(\"We got the lock but it should be unavailble\", success);\n    lock.close();\n    success = lock.obtain();\n    assertTrue(\"We could not get the lock when it should be available\", success);\n    success = lock.obtain();\n    assertFalse(\"We got the lock but it should be unavailble\", success);\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws IOException {\n    URI uri = dfsCluster.getURI();\n    Path lockPath = new Path(uri.toString(), \"/basedir/lock\");\n    HdfsLockFactory lockFactory = new HdfsLockFactory(lockPath, new Configuration());\n    Lock lock = lockFactory.makeLock(\"testlock\");\n    boolean success = lock.obtain();\n    assertTrue(\"We could not get the lock when it should be available\", success);\n    success = lock.obtain();\n    assertFalse(\"We got the lock but it should be unavailble\", success);\n    lock.close();\n    success = lock.obtain();\n    assertTrue(\"We could not get the lock when it should be available\", success);\n    success = lock.obtain();\n    assertFalse(\"We got the lock but it should be unavailble\", success);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3def6e0e7b7566dd7f04a3514e77ee97a40fc78a","date":1429888091,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsLockFactoryTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsLockFactoryTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n    String uri = HdfsTestUtil.getURI(dfsCluster);\n    Path lockPath = new Path(uri, \"/basedir/lock\");\n    Configuration conf = HdfsTestUtil.getClientConfiguration(dfsCluster);\n    HdfsDirectory dir = new HdfsDirectory(lockPath, conf);\n    Lock lock = dir.makeLock(\"testlock\");\n    boolean success = lock.obtain();\n    assertTrue(\"We could not get the lock when it should be available\", success);\n    success = lock.obtain();\n    assertFalse(\"We got the lock but it should be unavailble\", success);\n    lock.close();\n    success = lock.obtain();\n    assertTrue(\"We could not get the lock when it should be available\", success);\n    success = lock.obtain();\n    assertFalse(\"We got the lock but it should be unavailble\", success);\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws IOException {\n    URI uri = dfsCluster.getURI();\n    Path lockPath = new Path(uri.toString(), \"/basedir/lock\");\n    Configuration conf = new Configuration();\n    HdfsDirectory dir = new HdfsDirectory(lockPath, conf);\n    Lock lock = dir.makeLock(\"testlock\");\n    boolean success = lock.obtain();\n    assertTrue(\"We could not get the lock when it should be available\", success);\n    success = lock.obtain();\n    assertFalse(\"We got the lock but it should be unavailble\", success);\n    lock.close();\n    success = lock.obtain();\n    assertTrue(\"We could not get the lock when it should be available\", success);\n    success = lock.obtain();\n    assertFalse(\"We got the lock but it should be unavailble\", success);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b9d148752fc0b3fb8a781d56e6d0f834254db3b5","date":1432854040,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsLockFactoryTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsLockFactoryTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n    String uri = HdfsTestUtil.getURI(dfsCluster);\n    Path lockPath = new Path(uri, \"/basedir/lock\");\n    Configuration conf = HdfsTestUtil.getClientConfiguration(dfsCluster);\n    HdfsDirectory dir = new HdfsDirectory(lockPath, conf);\n    Lock lock = dir.makeLock(\"testlock\");\n    boolean success = lock.obtain();\n    assertTrue(\"We could not get the lock when it should be available\", success);\n    Lock lock2 = dir.makeLock(\"testlock\");\n    success = lock2.obtain();\n    assertFalse(\"We got the lock but it should be unavailble\", success);\n    IOUtils.close(lock, lock2);\n    // now repeat after close()\n    lock = dir.makeLock(\"testlock\");\n    success = lock.obtain();\n    assertTrue(\"We could not get the lock when it should be available\", success);\n    lock2 = dir.makeLock(\"testlock\");\n    success = lock2.obtain();\n    assertFalse(\"We got the lock but it should be unavailble\", success);\n    IOUtils.close(lock, lock2);\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws IOException {\n    String uri = HdfsTestUtil.getURI(dfsCluster);\n    Path lockPath = new Path(uri, \"/basedir/lock\");\n    Configuration conf = HdfsTestUtil.getClientConfiguration(dfsCluster);\n    HdfsDirectory dir = new HdfsDirectory(lockPath, conf);\n    Lock lock = dir.makeLock(\"testlock\");\n    boolean success = lock.obtain();\n    assertTrue(\"We could not get the lock when it should be available\", success);\n    success = lock.obtain();\n    assertFalse(\"We got the lock but it should be unavailble\", success);\n    lock.close();\n    success = lock.obtain();\n    assertTrue(\"We could not get the lock when it should be available\", success);\n    success = lock.obtain();\n    assertFalse(\"We got the lock but it should be unavailble\", success);\n    dir.close();\n  }\n\n","bugFix":["0fcdcf196523675146a4df3193e91413533857ab","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"618635065f043788c9e034f96ca5cd5cea1b4592","date":1433442044,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsLockFactoryTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsLockFactoryTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n    String uri = HdfsTestUtil.getURI(dfsCluster);\n    Path lockPath = new Path(uri, \"/basedir/lock\");\n    Configuration conf = HdfsTestUtil.getClientConfiguration(dfsCluster);\n    HdfsDirectory dir = new HdfsDirectory(lockPath, conf);\n    \n    try (Lock lock = dir.obtainLock(\"testlock\")) {\n      assert lock != null;\n      try (Lock lock2 = dir.obtainLock(\"testlock\")) {\n        assert lock2 != null;\n        fail(\"Locking should fail\");\n      } catch (LockObtainFailedException lofe) {\n        // pass\n      }\n    }\n    // now repeat after close()\n    try (Lock lock = dir.obtainLock(\"testlock\")) {\n      assert lock != null;\n      try (Lock lock2 = dir.obtainLock(\"testlock\")) {\n        assert lock2 != null;\n        fail(\"Locking should fail\");\n      } catch (LockObtainFailedException lofe) {\n        // pass\n      }\n    }\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws IOException {\n    String uri = HdfsTestUtil.getURI(dfsCluster);\n    Path lockPath = new Path(uri, \"/basedir/lock\");\n    Configuration conf = HdfsTestUtil.getClientConfiguration(dfsCluster);\n    HdfsDirectory dir = new HdfsDirectory(lockPath, conf);\n    Lock lock = dir.makeLock(\"testlock\");\n    boolean success = lock.obtain();\n    assertTrue(\"We could not get the lock when it should be available\", success);\n    Lock lock2 = dir.makeLock(\"testlock\");\n    success = lock2.obtain();\n    assertFalse(\"We got the lock but it should be unavailble\", success);\n    IOUtils.close(lock, lock2);\n    // now repeat after close()\n    lock = dir.makeLock(\"testlock\");\n    success = lock.obtain();\n    assertTrue(\"We could not get the lock when it should be available\", success);\n    lock2 = dir.makeLock(\"testlock\");\n    success = lock2.obtain();\n    assertFalse(\"We got the lock but it should be unavailble\", success);\n    IOUtils.close(lock, lock2);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"618635065f043788c9e034f96ca5cd5cea1b4592":["b9d148752fc0b3fb8a781d56e6d0f834254db3b5"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1dfca21e4315cbc5455ab7b5d6530c34f05fee48":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"285cdc737de75b7cc7c284a156b20214deb67bca":["0fcdcf196523675146a4df3193e91413533857ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b9d148752fc0b3fb8a781d56e6d0f834254db3b5":["3def6e0e7b7566dd7f04a3514e77ee97a40fc78a"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["849494cf2f3a96af5c8c84995108ddd8456fcd04","1dfca21e4315cbc5455ab7b5d6530c34f05fee48"],"0fcdcf196523675146a4df3193e91413533857ab":["1dfca21e4315cbc5455ab7b5d6530c34f05fee48"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["618635065f043788c9e034f96ca5cd5cea1b4592"],"3def6e0e7b7566dd7f04a3514e77ee97a40fc78a":["285cdc737de75b7cc7c284a156b20214deb67bca"]},"commit2Childs":{"618635065f043788c9e034f96ca5cd5cea1b4592":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["1dfca21e4315cbc5455ab7b5d6530c34f05fee48","37a0f60745e53927c4c876cfe5b5a58170f0646c","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"1dfca21e4315cbc5455ab7b5d6530c34f05fee48":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","0fcdcf196523675146a4df3193e91413533857ab"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"285cdc737de75b7cc7c284a156b20214deb67bca":["3def6e0e7b7566dd7f04a3514e77ee97a40fc78a"],"b9d148752fc0b3fb8a781d56e6d0f834254db3b5":["618635065f043788c9e034f96ca5cd5cea1b4592"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"0fcdcf196523675146a4df3193e91413533857ab":["285cdc737de75b7cc7c284a156b20214deb67bca"],"3def6e0e7b7566dd7f04a3514e77ee97a40fc78a":["b9d148752fc0b3fb8a781d56e6d0f834254db3b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}