{"path":"solr/core/src/java/org/apache/solr/search/SolrConstantScoreQuery#equals(Object).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrConstantScoreQuery#equals(Object).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrConstantScoreQuery#equals(Object).mjava","sourceNew":"  /** Returns true if <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof SolrConstantScoreQuery)) return false;\n    SolrConstantScoreQuery other = (SolrConstantScoreQuery)o;\n    return this.getBoost()==other.getBoost() && filter.equals(other.filter);\n  }\n\n","sourceOld":"  /** Returns true if <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof SolrConstantScoreQuery)) return false;\n    SolrConstantScoreQuery other = (SolrConstantScoreQuery)o;\n    return this.getBoost()==other.getBoost() && filter.equals(other.filter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrConstantScoreQuery#equals(Object).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrConstantScoreQuery#equals(Object).mjava","sourceNew":"  /** Returns true if <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof SolrConstantScoreQuery)) return false;\n    SolrConstantScoreQuery other = (SolrConstantScoreQuery)o;\n    return this.getBoost()==other.getBoost() && filter.equals(other.filter);\n  }\n\n","sourceOld":"  /** Returns true if <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof SolrConstantScoreQuery)) return false;\n    SolrConstantScoreQuery other = (SolrConstantScoreQuery)o;\n    return this.getBoost()==other.getBoost() && filter.equals(other.filter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrConstantScoreQuery#equals(Object).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrConstantScoreQuery#equals(Object).mjava","sourceNew":"  /** Returns true if <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof SolrConstantScoreQuery)) return false;\n    SolrConstantScoreQuery other = (SolrConstantScoreQuery)o;\n    return this.getBoost()==other.getBoost() && filter.equals(other.filter);\n  }\n\n","sourceOld":"  /** Returns true if <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof SolrConstantScoreQuery)) return false;\n    SolrConstantScoreQuery other = (SolrConstantScoreQuery)o;\n    return this.getBoost()==other.getBoost() && filter.equals(other.filter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrConstantScoreQuery#equals(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrConstantScoreQuery#equals(Object).mjava","sourceNew":"  /** Returns true if <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof SolrConstantScoreQuery)) return false;\n    SolrConstantScoreQuery other = (SolrConstantScoreQuery)o;\n    return this.getBoost()==other.getBoost() && filter.equals(other.filter);\n  }\n\n","sourceOld":"  /** Returns true if <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof SolrConstantScoreQuery)) return false;\n    SolrConstantScoreQuery other = (SolrConstantScoreQuery)o;\n    return this.getBoost()==other.getBoost() && filter.equals(other.filter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrConstantScoreQuery#equals(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrConstantScoreQuery#equals(Object).mjava","sourceNew":"  /** Returns true if <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof SolrConstantScoreQuery)) return false;\n    SolrConstantScoreQuery other = (SolrConstantScoreQuery)o;\n    return this.getBoost()==other.getBoost() && filter.equals(other.filter);\n  }\n\n","sourceOld":"  /** Returns true if <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof SolrConstantScoreQuery)) return false;\n    SolrConstantScoreQuery other = (SolrConstantScoreQuery)o;\n    return this.getBoost()==other.getBoost() && filter.equals(other.filter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7f94ff172f40ff68a926d112e25b96bc38e5a27","date":1431002360,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrConstantScoreQuery#equals(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrConstantScoreQuery#equals(Object).mjava","sourceNew":"  /** Returns true if <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (super.equals(o) == false) return false;\n    SolrConstantScoreQuery other = (SolrConstantScoreQuery)o;\n    return filter.equals(other.filter);\n  }\n\n","sourceOld":"  /** Returns true if <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof SolrConstantScoreQuery)) return false;\n    SolrConstantScoreQuery other = (SolrConstantScoreQuery)o;\n    return this.getBoost()==other.getBoost() && filter.equals(other.filter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7bc21595222ae4f75509300fbb7726691f387f","date":1464078795,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrConstantScoreQuery#equals(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrConstantScoreQuery#equals(Object).mjava","sourceNew":"  /** Returns true if <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n           Objects.equals(filter, ((SolrConstantScoreQuery) other).filter);\n  }\n\n","sourceOld":"  /** Returns true if <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (super.equals(o) == false) return false;\n    SolrConstantScoreQuery other = (SolrConstantScoreQuery)o;\n    return filter.equals(other.filter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrConstantScoreQuery#equals(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrConstantScoreQuery#equals(Object).mjava","sourceNew":"  /** Returns true if <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n           Objects.equals(filter, ((SolrConstantScoreQuery) other).filter);\n  }\n\n","sourceOld":"  /** Returns true if <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (super.equals(o) == false) return false;\n    SolrConstantScoreQuery other = (SolrConstantScoreQuery)o;\n    return filter.equals(other.filter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["c26f00b574427b55127e869b935845554afde1fa","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a7f94ff172f40ff68a926d112e25b96bc38e5a27":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e7bc21595222ae4f75509300fbb7726691f387f":["a7f94ff172f40ff68a926d112e25b96bc38e5a27"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a7f94ff172f40ff68a926d112e25b96bc38e5a27","0e7bc21595222ae4f75509300fbb7726691f387f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e7bc21595222ae4f75509300fbb7726691f387f"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"a7f94ff172f40ff68a926d112e25b96bc38e5a27":["0e7bc21595222ae4f75509300fbb7726691f387f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"0e7bc21595222ae4f75509300fbb7726691f387f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a7f94ff172f40ff68a926d112e25b96bc38e5a27"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}