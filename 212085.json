{"path":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsEnum#refillDocs().mjava","commits":[{"id":"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","date":1343686506,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsEnum#refillDocs().mjava","pathOld":"/dev/null","sourceNew":"    private void refillDocs() throws IOException {\n      final int left = docFreq - docUpto;\n      assert left > 0;\n\n      if (left >= blockSize) {\n        if (DEBUG) {\n          System.out.println(\"    fill doc block from fp=\" + docIn.getFilePointer());\n        }\n        readBlock(docIn, encoded, encodedBuffer, docDeltaLBuffer);\n\n        if (indexHasFreq) {\n          if (DEBUG) {\n            System.out.println(\"    fill freq block from fp=\" + docIn.getFilePointer());\n          }\n          readBlock(docIn, encoded, encodedBuffer, freqLBuffer);\n        }\n      } else {\n        // Read vInts:\n        if (DEBUG) {\n          System.out.println(\"    fill last vInt block from fp=\" + docIn.getFilePointer());\n        }\n        for(int i=0;i<left;i++) {\n          final int code = docIn.readVInt();\n          if (indexHasFreq) {\n            docDeltaBuffer[i] = code >>> 1;\n            if ((code & 1) != 0) {\n              freqBuffer[i] = 1;\n            } else {\n              freqBuffer[i] = docIn.readVInt();\n            }\n          } else {\n            docDeltaBuffer[i] = code;\n          }\n        }\n      }\n      docBufferUpto = 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e3359210474c12c0b79e6400450313e3d7ef2bb","date":1344347790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsEnum#refillDocs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsEnum#refillDocs().mjava","sourceNew":"    private void refillDocs() throws IOException {\n      //System.out.println(\"[\"+docFreq+\"]\"+\" refillDoc\");\n      final int left = docFreq - docUpto;\n      assert left > 0;\n\n      if (left >= BLOCK_SIZE) {\n        if (DEBUG) {\n          System.out.println(\"    fill doc block from fp=\" + docIn.getFilePointer());\n        }\n        ForUtil.readBlock(docIn, encoded, docDeltaBuffer);\n\n        if (indexHasFreq) {\n          if (DEBUG) {\n            System.out.println(\"    fill freq block from fp=\" + docIn.getFilePointer());\n          }\n          ForUtil.readBlock(docIn, encoded, freqBuffer);\n        }\n      } else {\n        // Read vInts:\n        if (DEBUG) {\n          System.out.println(\"    fill last vInt block from fp=\" + docIn.getFilePointer());\n        }\n        ForUtil.readVIntBlock(docIn, docDeltaBuffer, freqBuffer, left, indexHasFreq);\n      }\n      docBufferUpto = 0;\n    }\n\n","sourceOld":"    private void refillDocs() throws IOException {\n      final int left = docFreq - docUpto;\n      assert left > 0;\n\n      if (left >= blockSize) {\n        if (DEBUG) {\n          System.out.println(\"    fill doc block from fp=\" + docIn.getFilePointer());\n        }\n        readBlock(docIn, encoded, encodedBuffer, docDeltaLBuffer);\n\n        if (indexHasFreq) {\n          if (DEBUG) {\n            System.out.println(\"    fill freq block from fp=\" + docIn.getFilePointer());\n          }\n          readBlock(docIn, encoded, encodedBuffer, freqLBuffer);\n        }\n      } else {\n        // Read vInts:\n        if (DEBUG) {\n          System.out.println(\"    fill last vInt block from fp=\" + docIn.getFilePointer());\n        }\n        for(int i=0;i<left;i++) {\n          final int code = docIn.readVInt();\n          if (indexHasFreq) {\n            docDeltaBuffer[i] = code >>> 1;\n            if ((code & 1) != 0) {\n              freqBuffer[i] = 1;\n            } else {\n              freqBuffer[i] = docIn.readVInt();\n            }\n          } else {\n            docDeltaBuffer[i] = code;\n          }\n        }\n      }\n      docBufferUpto = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf88b0fdab72e7a3389fdd9a68ae252142c41511","date":1344435322,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsEnum#refillDocs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsEnum#refillDocs().mjava","sourceNew":"    private void refillDocs() throws IOException {\n      //System.out.println(\"[\"+docFreq+\"]\"+\" refillDoc\");\n      final int left = docFreq - docUpto;\n      assert left > 0;\n\n      if (left >= BLOCK_SIZE) {\n        if (DEBUG) {\n          System.out.println(\"    fill doc block from fp=\" + docIn.getFilePointer());\n        }\n        forUtil.readBlock(docIn, encoded, docDeltaBuffer);\n\n        if (indexHasFreq) {\n          if (DEBUG) {\n            System.out.println(\"    fill freq block from fp=\" + docIn.getFilePointer());\n          }\n          forUtil.readBlock(docIn, encoded, freqBuffer);\n        }\n      } else {\n        // Read vInts:\n        if (DEBUG) {\n          System.out.println(\"    fill last vInt block from fp=\" + docIn.getFilePointer());\n        }\n        ForUtil.readVIntBlock(docIn, docDeltaBuffer, freqBuffer, left, indexHasFreq);\n      }\n      docBufferUpto = 0;\n    }\n\n","sourceOld":"    private void refillDocs() throws IOException {\n      //System.out.println(\"[\"+docFreq+\"]\"+\" refillDoc\");\n      final int left = docFreq - docUpto;\n      assert left > 0;\n\n      if (left >= BLOCK_SIZE) {\n        if (DEBUG) {\n          System.out.println(\"    fill doc block from fp=\" + docIn.getFilePointer());\n        }\n        ForUtil.readBlock(docIn, encoded, docDeltaBuffer);\n\n        if (indexHasFreq) {\n          if (DEBUG) {\n            System.out.println(\"    fill freq block from fp=\" + docIn.getFilePointer());\n          }\n          ForUtil.readBlock(docIn, encoded, freqBuffer);\n        }\n      } else {\n        // Read vInts:\n        if (DEBUG) {\n          System.out.println(\"    fill last vInt block from fp=\" + docIn.getFilePointer());\n        }\n        ForUtil.readVIntBlock(docIn, docDeltaBuffer, freqBuffer, left, indexHasFreq);\n      }\n      docBufferUpto = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51996d1f0f4ccfbb7a0cbfe84bf6d3227b2b3c75","date":1344503769,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsEnum#refillDocs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsEnum#refillDocs().mjava","sourceNew":"    private void refillDocs() throws IOException {\n      final int left = docFreq - docUpto;\n      assert left > 0;\n\n      if (left >= BLOCK_SIZE) {\n        if (DEBUG) {\n          System.out.println(\"    fill doc block from fp=\" + docIn.getFilePointer());\n        }\n        forUtil.readBlock(docIn, encoded, docDeltaBuffer);\n\n        if (indexHasFreq) {\n          if (DEBUG) {\n            System.out.println(\"    fill freq block from fp=\" + docIn.getFilePointer());\n          }\n          forUtil.readBlock(docIn, encoded, freqBuffer);\n        }\n      } else {\n        // Read vInts:\n        if (DEBUG) {\n          System.out.println(\"    fill last vInt block from fp=\" + docIn.getFilePointer());\n        }\n        ForUtil.readVIntBlock(docIn, docDeltaBuffer, freqBuffer, left, indexHasFreq);\n      }\n      docBufferUpto = 0;\n    }\n\n","sourceOld":"    private void refillDocs() throws IOException {\n      //System.out.println(\"[\"+docFreq+\"]\"+\" refillDoc\");\n      final int left = docFreq - docUpto;\n      assert left > 0;\n\n      if (left >= BLOCK_SIZE) {\n        if (DEBUG) {\n          System.out.println(\"    fill doc block from fp=\" + docIn.getFilePointer());\n        }\n        forUtil.readBlock(docIn, encoded, docDeltaBuffer);\n\n        if (indexHasFreq) {\n          if (DEBUG) {\n            System.out.println(\"    fill freq block from fp=\" + docIn.getFilePointer());\n          }\n          forUtil.readBlock(docIn, encoded, freqBuffer);\n        }\n      } else {\n        // Read vInts:\n        if (DEBUG) {\n          System.out.println(\"    fill last vInt block from fp=\" + docIn.getFilePointer());\n        }\n        ForUtil.readVIntBlock(docIn, docDeltaBuffer, freqBuffer, left, indexHasFreq);\n      }\n      docBufferUpto = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee0d2b90b9b7c96860f9c096edae6ed8fad95388","date":1344516744,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsEnum#refillDocs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsEnum#refillDocs().mjava","sourceNew":"    private void refillDocs() throws IOException {\n      final int left = docFreq - docUpto;\n      assert left > 0;\n\n      if (left >= BLOCK_SIZE) {\n        if (DEBUG) {\n          System.out.println(\"    fill doc block from fp=\" + docIn.getFilePointer());\n        }\n        forUtil.readBlock(docIn, encoded, docDeltaBuffer);\n\n        if (indexHasFreq) {\n          if (DEBUG) {\n            System.out.println(\"    fill freq block from fp=\" + docIn.getFilePointer());\n          }\n          forUtil.readBlock(docIn, encoded, freqBuffer);\n        }\n      } else {\n        // Read vInts:\n        if (DEBUG) {\n          System.out.println(\"    fill last vInt block from fp=\" + docIn.getFilePointer());\n        }\n        readVIntBlock(docIn, docDeltaBuffer, freqBuffer, left, indexHasFreq);\n      }\n      docBufferUpto = 0;\n    }\n\n","sourceOld":"    private void refillDocs() throws IOException {\n      final int left = docFreq - docUpto;\n      assert left > 0;\n\n      if (left >= BLOCK_SIZE) {\n        if (DEBUG) {\n          System.out.println(\"    fill doc block from fp=\" + docIn.getFilePointer());\n        }\n        forUtil.readBlock(docIn, encoded, docDeltaBuffer);\n\n        if (indexHasFreq) {\n          if (DEBUG) {\n            System.out.println(\"    fill freq block from fp=\" + docIn.getFilePointer());\n          }\n          forUtil.readBlock(docIn, encoded, freqBuffer);\n        }\n      } else {\n        // Read vInts:\n        if (DEBUG) {\n          System.out.println(\"    fill last vInt block from fp=\" + docIn.getFilePointer());\n        }\n        ForUtil.readVIntBlock(docIn, docDeltaBuffer, freqBuffer, left, indexHasFreq);\n      }\n      docBufferUpto = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6b41208259e8566cba0ecac7da6a331ea9732dd","date":1344551376,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsEnum#refillDocs().mjava","sourceNew":null,"sourceOld":"    private void refillDocs() throws IOException {\n      final int left = docFreq - docUpto;\n      assert left > 0;\n\n      if (left >= BLOCK_SIZE) {\n        if (DEBUG) {\n          System.out.println(\"    fill doc block from fp=\" + docIn.getFilePointer());\n        }\n        forUtil.readBlock(docIn, encoded, docDeltaBuffer);\n\n        if (indexHasFreq) {\n          if (DEBUG) {\n            System.out.println(\"    fill freq block from fp=\" + docIn.getFilePointer());\n          }\n          forUtil.readBlock(docIn, encoded, freqBuffer);\n        }\n      } else {\n        // Read vInts:\n        if (DEBUG) {\n          System.out.println(\"    fill last vInt block from fp=\" + docIn.getFilePointer());\n        }\n        readVIntBlock(docIn, docDeltaBuffer, freqBuffer, left, indexHasFreq);\n      }\n      docBufferUpto = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ee0d2b90b9b7c96860f9c096edae6ed8fad95388":["51996d1f0f4ccfbb7a0cbfe84bf6d3227b2b3c75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df"],"51996d1f0f4ccfbb7a0cbfe84bf6d3227b2b3c75":["cf88b0fdab72e7a3389fdd9a68ae252142c41511"],"cf88b0fdab72e7a3389fdd9a68ae252142c41511":["0e3359210474c12c0b79e6400450313e3d7ef2bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6b41208259e8566cba0ecac7da6a331ea9732dd":["ee0d2b90b9b7c96860f9c096edae6ed8fad95388"]},"commit2Childs":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["0e3359210474c12c0b79e6400450313e3d7ef2bb"],"ee0d2b90b9b7c96860f9c096edae6ed8fad95388":["e6b41208259e8566cba0ecac7da6a331ea9732dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["cf88b0fdab72e7a3389fdd9a68ae252142c41511"],"51996d1f0f4ccfbb7a0cbfe84bf6d3227b2b3c75":["ee0d2b90b9b7c96860f9c096edae6ed8fad95388"],"cf88b0fdab72e7a3389fdd9a68ae252142c41511":["51996d1f0f4ccfbb7a0cbfe84bf6d3227b2b3c75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e6b41208259e8566cba0ecac7da6a331ea9732dd":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","e6b41208259e8566cba0ecac7da6a331ea9732dd"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}