{"path":"src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamURL().mjava","commits":[{"id":"d80013b5e260def972025c93a0b08524f9c38f49","date":1170102801,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamURL().mjava","pathOld":"/dev/null","sourceNew":"  public void testStreamURL() throws Exception\n  {\n    boolean ok = false;\n    String url = \"http://svn.apache.org/repos/asf/lucene/solr/trunk/\";\n    String txt = null;\n    try {\n      txt = IOUtils.toString( new URL(url).openStream() );\n    }\n    catch( Exception ex ) {\n      // TODO - should it fail/skip?\n      fail( \"this test only works if you have a network connection.\" );\n      return;\n    }\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( SolrParams.STREAM_URL, new String[] {url} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    parser.buildRequestFrom( new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( txt, IOUtils.toString( streams.get(0).getStream() ) );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["79b9cd88b48534e5ba1a0d8dd10e94d613e4c3cd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef","date":1185993405,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamURL().mjava","pathOld":"src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamURL().mjava","sourceNew":"  public void testStreamURL() throws Exception\n  {\n    boolean ok = false;\n    String url = \"http://svn.apache.org/repos/asf/lucene/solr/trunk/\";\n    String txt = null;\n    try {\n      txt = IOUtils.toString( new URL(url).openStream() );\n    }\n    catch( Exception ex ) {\n      // TODO - should it fail/skip?\n      fail( \"this test only works if you have a network connection.\" );\n      return;\n    }\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_URL, new String[] {url} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    parser.buildRequestFrom( new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( txt, IOUtils.toString( streams.get(0).getStream() ) );\n  }\n\n","sourceOld":"  public void testStreamURL() throws Exception\n  {\n    boolean ok = false;\n    String url = \"http://svn.apache.org/repos/asf/lucene/solr/trunk/\";\n    String txt = null;\n    try {\n      txt = IOUtils.toString( new URL(url).openStream() );\n    }\n    catch( Exception ex ) {\n      // TODO - should it fail/skip?\n      fail( \"this test only works if you have a network connection.\" );\n      return;\n    }\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( SolrParams.STREAM_URL, new String[] {url} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    parser.buildRequestFrom( new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( txt, IOUtils.toString( streams.get(0).getStream() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"abbfb3ad1f90df8ebf4751c8e72b2756ace50699","date":1190497478,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamURL().mjava","pathOld":"src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamURL().mjava","sourceNew":"  public void testStreamURL() throws Exception\n  {\n    boolean ok = false;\n    String url = \"http://svn.apache.org/repos/asf/lucene/solr/trunk/\";\n    String txt = null;\n    try {\n      txt = IOUtils.toString( new URL(url).openStream() );\n    }\n    catch( Exception ex ) {\n      // TODO - should it fail/skip?\n      fail( \"this test only works if you have a network connection.\" );\n      return;\n    }\n\n    SolrCore core = SolrCore.getSolrCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_URL, new String[] {url} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( txt, IOUtils.toString( streams.get(0).getStream() ) );\n  }\n\n","sourceOld":"  public void testStreamURL() throws Exception\n  {\n    boolean ok = false;\n    String url = \"http://svn.apache.org/repos/asf/lucene/solr/trunk/\";\n    String txt = null;\n    try {\n      txt = IOUtils.toString( new URL(url).openStream() );\n    }\n    catch( Exception ex ) {\n      // TODO - should it fail/skip?\n      fail( \"this test only works if you have a network connection.\" );\n      return;\n    }\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_URL, new String[] {url} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    parser.buildRequestFrom( new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( txt, IOUtils.toString( streams.get(0).getStream() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d7b8e1daf0bc9f56d4c5aa2295fb2690e20320ed","date":1220564021,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamURL().mjava","pathOld":"src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamURL().mjava","sourceNew":"  public void testStreamURL() throws Exception\n  {\n    boolean ok = false;\n    String url = \"http://www.apache.org/dist/lucene/solr/\";\n    String txt = null;\n    try {\n      txt = IOUtils.toString( new URL(url).openStream() );\n    }\n    catch( Exception ex ) {\n      // TODO - should it fail/skip?\n      fail( \"this test only works if you have a network connection.\" );\n      return;\n    }\n\n    SolrCore core = SolrCore.getSolrCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_URL, new String[] {url} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( txt, IOUtils.toString( streams.get(0).getStream() ) );\n  }\n\n","sourceOld":"  public void testStreamURL() throws Exception\n  {\n    boolean ok = false;\n    String url = \"http://svn.apache.org/repos/asf/lucene/solr/trunk/\";\n    String txt = null;\n    try {\n      txt = IOUtils.toString( new URL(url).openStream() );\n    }\n    catch( Exception ex ) {\n      // TODO - should it fail/skip?\n      fail( \"this test only works if you have a network connection.\" );\n      return;\n    }\n\n    SolrCore core = SolrCore.getSolrCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_URL, new String[] {url} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( txt, IOUtils.toString( streams.get(0).getStream() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c90f01e1c0f11ee52212ab38c6d4393b3be8a646","date":1223059437,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamURL().mjava","pathOld":"src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamURL().mjava","sourceNew":"  public void testStreamURL() throws Exception\n  {\n    boolean ok = false;\n    String url = \"http://www.apache.org/dist/lucene/solr/\";\n    String txt = null;\n    try {\n      txt = IOUtils.toString( new URL(url).openStream() );\n    }\n    catch( Exception ex ) {\n      // TODO - should it fail/skip?\n      fail( \"this test only works if you have a network connection.\" );\n      return;\n    }\n\n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_URL, new String[] {url} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( txt, IOUtils.toString( streams.get(0).getStream() ) );\n  }\n\n","sourceOld":"  public void testStreamURL() throws Exception\n  {\n    boolean ok = false;\n    String url = \"http://www.apache.org/dist/lucene/solr/\";\n    String txt = null;\n    try {\n      txt = IOUtils.toString( new URL(url).openStream() );\n    }\n    catch( Exception ex ) {\n      // TODO - should it fail/skip?\n      fail( \"this test only works if you have a network connection.\" );\n      return;\n    }\n\n    SolrCore core = SolrCore.getSolrCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_URL, new String[] {url} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( txt, IOUtils.toString( streams.get(0).getStream() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamURL().mjava","pathOld":"src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamURL().mjava","sourceNew":"  public void testStreamURL() throws Exception\n  {\n    boolean ok = false;\n    String url = \"http://www.apache.org/dist/lucene/solr/\";\n    String txt = null;\n    try {\n      txt = IOUtils.toString( new URL(url).openStream() );\n    }\n    catch( Exception ex ) {\n      // TODO - should it fail/skip?\n      fail( \"this test only works if you have a network connection.\" );\n      return;\n    }\n\n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_URL, new String[] {url} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( txt, IOUtils.toString( streams.get(0).getStream() ) );\n  }\n\n","sourceOld":"  public void testStreamURL() throws Exception\n  {\n    boolean ok = false;\n    String url = \"http://www.apache.org/dist/lucene/solr/\";\n    String txt = null;\n    try {\n      txt = IOUtils.toString( new URL(url).openStream() );\n    }\n    catch( Exception ex ) {\n      // TODO - should it fail/skip?\n      fail( \"this test only works if you have a network connection.\" );\n      return;\n    }\n\n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_URL, new String[] {url} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( txt, IOUtils.toString( streams.get(0).getStream() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef":["d80013b5e260def972025c93a0b08524f9c38f49"],"c90f01e1c0f11ee52212ab38c6d4393b3be8a646":["d7b8e1daf0bc9f56d4c5aa2295fb2690e20320ed"],"d7b8e1daf0bc9f56d4c5aa2295fb2690e20320ed":["abbfb3ad1f90df8ebf4751c8e72b2756ace50699"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["c90f01e1c0f11ee52212ab38c6d4393b3be8a646"],"abbfb3ad1f90df8ebf4751c8e72b2756ace50699":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d80013b5e260def972025c93a0b08524f9c38f49":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef":["abbfb3ad1f90df8ebf4751c8e72b2756ace50699"],"c90f01e1c0f11ee52212ab38c6d4393b3be8a646":["ad94625fb8d088209f46650c8097196fec67f00c"],"d7b8e1daf0bc9f56d4c5aa2295fb2690e20320ed":["c90f01e1c0f11ee52212ab38c6d4393b3be8a646"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["d80013b5e260def972025c93a0b08524f9c38f49"],"abbfb3ad1f90df8ebf4751c8e72b2756ace50699":["d7b8e1daf0bc9f56d4c5aa2295fb2690e20320ed"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"d80013b5e260def972025c93a0b08524f9c38f49":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}