{"path":"src/java/org/apache/lucene/index/SegmentReader#doSetNorm(int,String,byte).mjava","commits":[{"id":"f653aecb322b74d99e6ecdb93765e453a3d7aa71","date":1082107025,"type":1,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doSetNorm(int,String,byte).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#setNorm(int,String,byte).mjava","sourceNew":"  protected final void doSetNorm(int doc, String field, byte value)\n          throws IOException {\n    Norm norm = (Norm) norms.get(field);\n    if (norm == null)                             // not an indexed field\n      return;\n    norm.dirty = true;                            // mark it dirty\n    normsDirty = true;\n\n    norms(field)[doc] = value;                    // set the value\n  }\n\n","sourceOld":"  public synchronized void setNorm(int doc, String field, byte value)\n          throws IOException {\n    Norm norm = (Norm) norms.get(field);\n    if (norm == null)                             // not an indexed field\n      return;\n    norm.dirty = true;                            // mark it dirty\n    normsDirty = true;\n\n    norms(field)[doc] = value;                    // set the value\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e5d88b55f1b57feab6da94a5c635a224539bd2a","date":1095877947,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doSetNorm(int,String,byte).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doSetNorm(int,String,byte).mjava","sourceNew":"  protected void doSetNorm(int doc, String field, byte value)\n          throws IOException {\n    Norm norm = (Norm) norms.get(field);\n    if (norm == null)                             // not an indexed field\n      return;\n    norm.dirty = true;                            // mark it dirty\n    normsDirty = true;\n\n    norms(field)[doc] = value;                    // set the value\n  }\n\n","sourceOld":"  protected final void doSetNorm(int doc, String field, byte value)\n          throws IOException {\n    Norm norm = (Norm) norms.get(field);\n    if (norm == null)                             // not an indexed field\n      return;\n    norm.dirty = true;                            // mark it dirty\n    normsDirty = true;\n\n    norms(field)[doc] = value;                    // set the value\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"111f5f9f92c974cb15ad5a47e0caec190ca207b7","date":1172978580,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doSetNorm(int,String,byte).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doSetNorm(int,String,byte).mjava","sourceNew":"  protected void doSetNorm(int doc, String field, byte value)\n          throws IOException {\n    Norm norm = (Norm) norms.get(field);\n    if (norm == null)                             // not an indexed field\n      return;\n\n    norm.dirty = true;                            // mark it dirty\n    normsDirty = true;\n\n    norms(field)[doc] = value;                    // set the value\n  }\n\n","sourceOld":"  protected void doSetNorm(int doc, String field, byte value)\n          throws IOException {\n    Norm norm = (Norm) norms.get(field);\n    if (norm == null)                             // not an indexed field\n      return;\n    norm.dirty = true;                            // mark it dirty\n    normsDirty = true;\n\n    norms(field)[doc] = value;                    // set the value\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6db660b56f04fdb2853d25cdee8ee0d36559a521","date":1233313968,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doSetNorm(int,String,byte).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doSetNorm(int,String,byte).mjava","sourceNew":"  protected void doSetNorm(int doc, String field, byte value)\n          throws IOException {\n    Norm norm = (Norm) norms.get(field);\n    if (norm == null)                             // not an indexed field\n      return;\n\n    normsDirty = true;\n    norm.copyOnWrite()[doc] = value;                    // set the value\n  }\n\n","sourceOld":"  protected void doSetNorm(int doc, String field, byte value)\n          throws IOException {\n    Norm norm = (Norm) norms.get(field);\n    if (norm == null)                             // not an indexed field\n      return;\n\n    norm.dirty = true;                            // mark it dirty\n    normsDirty = true;\n\n    norms(field)[doc] = value;                    // set the value\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doSetNorm(int,String,byte).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doSetNorm(int,String,byte).mjava","sourceNew":"  protected void doSetNorm(int doc, String field, byte value)\n          throws IOException {\n    Norm norm = norms.get(field);\n    if (norm == null)                             // not an indexed field\n      return;\n\n    normsDirty = true;\n    norm.copyOnWrite()[doc] = value;                    // set the value\n  }\n\n","sourceOld":"  protected void doSetNorm(int doc, String field, byte value)\n          throws IOException {\n    Norm norm = (Norm) norms.get(field);\n    if (norm == null)                             // not an indexed field\n      return;\n\n    normsDirty = true;\n    norm.copyOnWrite()[doc] = value;                    // set the value\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doSetNorm(int,String,byte).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doSetNorm(int,String,byte).mjava","sourceNew":"  @Override\n  protected void doSetNorm(int doc, String field, byte value)\n          throws IOException {\n    Norm norm = norms.get(field);\n    if (norm == null)                             // not an indexed field\n      return;\n\n    normsDirty = true;\n    norm.copyOnWrite()[doc] = value;                    // set the value\n  }\n\n","sourceOld":"  protected void doSetNorm(int doc, String field, byte value)\n          throws IOException {\n    Norm norm = norms.get(field);\n    if (norm == null)                             // not an indexed field\n      return;\n\n    normsDirty = true;\n    norm.copyOnWrite()[doc] = value;                    // set the value\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#doSetNorm(int,String,byte).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doSetNorm(int,String,byte).mjava","sourceNew":"  @Override\n  protected void doSetNorm(int doc, String field, byte value)\n          throws IOException {\n    Norm norm = norms.get(field);\n    if (norm == null)                             // not an indexed field\n      return;\n\n    normsDirty = true;\n    norm.copyOnWrite()[doc] = value;                    // set the value\n  }\n\n","sourceOld":"  @Override\n  protected void doSetNorm(int doc, String field, byte value)\n          throws IOException {\n    Norm norm = norms.get(field);\n    if (norm == null)                             // not an indexed field\n      return;\n\n    normsDirty = true;\n    norm.copyOnWrite()[doc] = value;                    // set the value\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["111f5f9f92c974cb15ad5a47e0caec190ca207b7"],"6e5d88b55f1b57feab6da94a5c635a224539bd2a":["f653aecb322b74d99e6ecdb93765e453a3d7aa71"],"8a9e385641d717e641408d8fbbc62be8fc766357":["ef82ff03e4016c705811b2658e81471a645c0e49"],"ef82ff03e4016c705811b2658e81471a645c0e49":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"111f5f9f92c974cb15ad5a47e0caec190ca207b7":["6e5d88b55f1b57feab6da94a5c635a224539bd2a"],"f653aecb322b74d99e6ecdb93765e453a3d7aa71":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["ef82ff03e4016c705811b2658e81471a645c0e49"],"6e5d88b55f1b57feab6da94a5c635a224539bd2a":["111f5f9f92c974cb15ad5a47e0caec190ca207b7"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ef82ff03e4016c705811b2658e81471a645c0e49":["8a9e385641d717e641408d8fbbc62be8fc766357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f653aecb322b74d99e6ecdb93765e453a3d7aa71"],"111f5f9f92c974cb15ad5a47e0caec190ca207b7":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"f653aecb322b74d99e6ecdb93765e453a3d7aa71":["6e5d88b55f1b57feab6da94a5c635a224539bd2a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}