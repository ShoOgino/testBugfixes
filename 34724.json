{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIAsyncDistributedZkTest#testAsyncRequests().mjava","commits":[{"id":"3bbb741690cdafda7f1f7549c26351c912917a69","date":1453203134,"type":0,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIAsyncDistributedZkTest#testAsyncRequests().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAsyncRequests() throws Exception {\n    String collection = \"testAsyncOperations\";\n\n    Create createCollectionRequest = new Create()\n        .setCollectionName(collection)\n        .setNumShards(1)\n        .setRouterName(\"implicit\")\n        .setShards(\"shard1\")\n        .setConfigName(\"conf1\")\n        .setAsyncId(\"42\");\n    CollectionAdminResponse response = createCollectionRequest.process(cloudClient);\n    assertEquals(\"42\", response.getResponse().get(\"requestid\"));\n    String state = getRequestStateAfterCompletion(\"42\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertEquals(\"CreateCollection task did not complete!\", \"completed\", state);\n\n    //Add a few documents to shard1\n    int numDocs = TestUtil.nextInt(random(), 10, 100);\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"_route_\", \"shard1\");\n      docs.add(doc);\n    }\n    cloudClient.add(collection, docs);\n    cloudClient.commit(collection);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, cloudClient.query(collection, query).getResults().getNumFound());\n\n    CollectionAdminRequest.Reload reloadCollection = new CollectionAdminRequest.Reload();\n    reloadCollection.setCollectionName(collection).setAsyncId(\"43\");\n    response = reloadCollection.process(cloudClient);\n    assertEquals(\"43\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"43\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertEquals(\"ReloadCollection did not complete\", \"completed\", state);\n\n    CollectionAdminRequest.CreateShard createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collection)\n        .setShardName(\"shard2\")\n        .setAsyncId(\"44\");\n    response = createShard.process(cloudClient);\n    assertEquals(\"44\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"44\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertEquals(\"CreateShard did not complete\", \"completed\", state);\n\n    //Add a doc to shard2 to make sure shard2 was created properly\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", numDocs + 1);\n    doc.addField(\"_route_\", \"shard2\");\n    cloudClient.add(collection, doc);\n    cloudClient.commit(collection);\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard2\");\n    assertEquals(1, cloudClient.query(collection, query).getResults().getNumFound());\n\n    CollectionAdminRequest.DeleteShard deleteShard = new CollectionAdminRequest.DeleteShard()\n        .setCollectionName(collection)\n        .setShardName(\"shard2\")\n        .setAsyncId(\"45\");\n    response = deleteShard.process(cloudClient);\n    assertEquals(\"45\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"45\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertEquals(\"DeleteShard did not complete\", \"completed\", state);\n\n    CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n        .setCollectionName(collection)\n        .setShardName(\"shard1\")\n        .setAsyncId(\"46\");\n    response = addReplica.process(cloudClient);\n    assertEquals(\"46\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"46\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertEquals(\"AddReplica did not complete\", \"completed\", state);\n\n    //cloudClient watch might take a couple of seconds to reflect it\n    Slice shard1 = cloudClient.getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    int count = 0;\n    while (shard1.getReplicas().size() != 2) {\n      if (count++ > 1000) {\n        fail(\"2nd Replica not reflecting in the cluster state\");\n      }\n      Thread.sleep(100);\n    }\n\n    CollectionAdminRequest.CreateAlias createAlias = new CollectionAdminRequest.CreateAlias()\n        .setAliasName(\"myalias\")\n        .setAliasedCollections(collection)\n        .setAsyncId(\"47\");\n    response = createAlias.process(cloudClient);\n    assertEquals(\"47\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"47\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertEquals(\"CreateAlias did not complete\", \"completed\", state);\n\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, cloudClient.query(\"myalias\", query).getResults().getNumFound());\n\n    CollectionAdminRequest.DeleteAlias deleteAlias = new CollectionAdminRequest.DeleteAlias()\n        .setAliasName(\"myalias\")\n        .setAsyncId(\"48\");\n    response = deleteAlias.process(cloudClient);\n    assertEquals(\"48\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"48\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertEquals(\"DeleteAlias did not complete\", \"completed\", state);\n\n    try {\n      cloudClient.query(\"myalias\", query);\n      fail(\"Alias should not exist\");\n    } catch (SolrException e) {\n      //expected\n    }\n\n    String replica = shard1.getReplicas().iterator().next().getName();\n    CollectionAdminRequest.DeleteReplica deleteReplica = new CollectionAdminRequest.DeleteReplica()\n        .setCollectionName(collection)\n        .setShardName(\"shard1\")\n        .setReplica(replica)\n        .setAsyncId(\"47\");\n    response = deleteReplica.process(cloudClient);\n    assertEquals(\"47\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"47\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertEquals(\"DeleteReplica did not complete\", \"completed\", state);\n\n    CollectionAdminRequest.Delete deleteCollection = new CollectionAdminRequest.Delete()\n        .setCollectionName(collection)\n        .setAsyncId(\"48\");\n    response = deleteCollection.process(cloudClient);\n    assertEquals(\"48\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"48\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertEquals(\"DeleteCollection did not complete\", \"completed\", state);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3088cdaa24ffe3ef44713ac9484114bd56eca2af","date":1453441194,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIAsyncDistributedZkTest#testAsyncRequests().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIAsyncDistributedZkTest#testAsyncRequests().mjava","sourceNew":"  @Test\n  public void testAsyncRequests() throws Exception {\n    String collection = \"testAsyncOperations\";\n\n    Create createCollectionRequest = new Create()\n        .setCollectionName(collection)\n        .setNumShards(1)\n        .setRouterName(\"implicit\")\n        .setShards(\"shard1\")\n        .setConfigName(\"conf1\")\n        .setAsyncId(\"42\");\n    CollectionAdminResponse response = createCollectionRequest.process(cloudClient);\n    assertEquals(\"42\", response.getResponse().get(\"requestid\"));\n    RequestStatusState state = getRequestStateAfterCompletion(\"42\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertSame(\"CreateCollection task did not complete!\", RequestStatusState.COMPLETED, state);\n\n    //Add a few documents to shard1\n    int numDocs = TestUtil.nextInt(random(), 10, 100);\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"_route_\", \"shard1\");\n      docs.add(doc);\n    }\n    cloudClient.add(collection, docs);\n    cloudClient.commit(collection);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, cloudClient.query(collection, query).getResults().getNumFound());\n\n    CollectionAdminRequest.Reload reloadCollection = new CollectionAdminRequest.Reload();\n    reloadCollection.setCollectionName(collection).setAsyncId(\"43\");\n    response = reloadCollection.process(cloudClient);\n    assertEquals(\"43\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"43\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertSame(\"ReloadCollection did not complete\", RequestStatusState.COMPLETED, state);\n\n    CollectionAdminRequest.CreateShard createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collection)\n        .setShardName(\"shard2\")\n        .setAsyncId(\"44\");\n    response = createShard.process(cloudClient);\n    assertEquals(\"44\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"44\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertSame(\"CreateShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    //Add a doc to shard2 to make sure shard2 was created properly\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", numDocs + 1);\n    doc.addField(\"_route_\", \"shard2\");\n    cloudClient.add(collection, doc);\n    cloudClient.commit(collection);\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard2\");\n    assertEquals(1, cloudClient.query(collection, query).getResults().getNumFound());\n\n    CollectionAdminRequest.DeleteShard deleteShard = new CollectionAdminRequest.DeleteShard()\n        .setCollectionName(collection)\n        .setShardName(\"shard2\")\n        .setAsyncId(\"45\");\n    response = deleteShard.process(cloudClient);\n    assertEquals(\"45\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"45\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertSame(\"DeleteShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n        .setCollectionName(collection)\n        .setShardName(\"shard1\")\n        .setAsyncId(\"46\");\n    response = addReplica.process(cloudClient);\n    assertEquals(\"46\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"46\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertSame(\"AddReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    //cloudClient watch might take a couple of seconds to reflect it\n    Slice shard1 = cloudClient.getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    int count = 0;\n    while (shard1.getReplicas().size() != 2) {\n      if (count++ > 1000) {\n        fail(\"2nd Replica not reflecting in the cluster state\");\n      }\n      Thread.sleep(100);\n    }\n\n    CollectionAdminRequest.CreateAlias createAlias = new CollectionAdminRequest.CreateAlias()\n        .setAliasName(\"myalias\")\n        .setAliasedCollections(collection)\n        .setAsyncId(\"47\");\n    response = createAlias.process(cloudClient);\n    assertEquals(\"47\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"47\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertSame(\"CreateAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, cloudClient.query(\"myalias\", query).getResults().getNumFound());\n\n    CollectionAdminRequest.DeleteAlias deleteAlias = new CollectionAdminRequest.DeleteAlias()\n        .setAliasName(\"myalias\")\n        .setAsyncId(\"48\");\n    response = deleteAlias.process(cloudClient);\n    assertEquals(\"48\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"48\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertSame(\"DeleteAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    try {\n      cloudClient.query(\"myalias\", query);\n      fail(\"Alias should not exist\");\n    } catch (SolrException e) {\n      //expected\n    }\n\n    String replica = shard1.getReplicas().iterator().next().getName();\n    CollectionAdminRequest.DeleteReplica deleteReplica = new CollectionAdminRequest.DeleteReplica()\n        .setCollectionName(collection)\n        .setShardName(\"shard1\")\n        .setReplica(replica)\n        .setAsyncId(\"47\");\n    response = deleteReplica.process(cloudClient);\n    assertEquals(\"47\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"47\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertSame(\"DeleteReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    CollectionAdminRequest.Delete deleteCollection = new CollectionAdminRequest.Delete()\n        .setCollectionName(collection)\n        .setAsyncId(\"48\");\n    response = deleteCollection.process(cloudClient);\n    assertEquals(\"48\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"48\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertSame(\"DeleteCollection did not complete\", RequestStatusState.COMPLETED, state);\n  }\n\n","sourceOld":"  @Test\n  public void testAsyncRequests() throws Exception {\n    String collection = \"testAsyncOperations\";\n\n    Create createCollectionRequest = new Create()\n        .setCollectionName(collection)\n        .setNumShards(1)\n        .setRouterName(\"implicit\")\n        .setShards(\"shard1\")\n        .setConfigName(\"conf1\")\n        .setAsyncId(\"42\");\n    CollectionAdminResponse response = createCollectionRequest.process(cloudClient);\n    assertEquals(\"42\", response.getResponse().get(\"requestid\"));\n    String state = getRequestStateAfterCompletion(\"42\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertEquals(\"CreateCollection task did not complete!\", \"completed\", state);\n\n    //Add a few documents to shard1\n    int numDocs = TestUtil.nextInt(random(), 10, 100);\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"_route_\", \"shard1\");\n      docs.add(doc);\n    }\n    cloudClient.add(collection, docs);\n    cloudClient.commit(collection);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, cloudClient.query(collection, query).getResults().getNumFound());\n\n    CollectionAdminRequest.Reload reloadCollection = new CollectionAdminRequest.Reload();\n    reloadCollection.setCollectionName(collection).setAsyncId(\"43\");\n    response = reloadCollection.process(cloudClient);\n    assertEquals(\"43\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"43\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertEquals(\"ReloadCollection did not complete\", \"completed\", state);\n\n    CollectionAdminRequest.CreateShard createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collection)\n        .setShardName(\"shard2\")\n        .setAsyncId(\"44\");\n    response = createShard.process(cloudClient);\n    assertEquals(\"44\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"44\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertEquals(\"CreateShard did not complete\", \"completed\", state);\n\n    //Add a doc to shard2 to make sure shard2 was created properly\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", numDocs + 1);\n    doc.addField(\"_route_\", \"shard2\");\n    cloudClient.add(collection, doc);\n    cloudClient.commit(collection);\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard2\");\n    assertEquals(1, cloudClient.query(collection, query).getResults().getNumFound());\n\n    CollectionAdminRequest.DeleteShard deleteShard = new CollectionAdminRequest.DeleteShard()\n        .setCollectionName(collection)\n        .setShardName(\"shard2\")\n        .setAsyncId(\"45\");\n    response = deleteShard.process(cloudClient);\n    assertEquals(\"45\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"45\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertEquals(\"DeleteShard did not complete\", \"completed\", state);\n\n    CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n        .setCollectionName(collection)\n        .setShardName(\"shard1\")\n        .setAsyncId(\"46\");\n    response = addReplica.process(cloudClient);\n    assertEquals(\"46\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"46\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertEquals(\"AddReplica did not complete\", \"completed\", state);\n\n    //cloudClient watch might take a couple of seconds to reflect it\n    Slice shard1 = cloudClient.getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    int count = 0;\n    while (shard1.getReplicas().size() != 2) {\n      if (count++ > 1000) {\n        fail(\"2nd Replica not reflecting in the cluster state\");\n      }\n      Thread.sleep(100);\n    }\n\n    CollectionAdminRequest.CreateAlias createAlias = new CollectionAdminRequest.CreateAlias()\n        .setAliasName(\"myalias\")\n        .setAliasedCollections(collection)\n        .setAsyncId(\"47\");\n    response = createAlias.process(cloudClient);\n    assertEquals(\"47\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"47\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertEquals(\"CreateAlias did not complete\", \"completed\", state);\n\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, cloudClient.query(\"myalias\", query).getResults().getNumFound());\n\n    CollectionAdminRequest.DeleteAlias deleteAlias = new CollectionAdminRequest.DeleteAlias()\n        .setAliasName(\"myalias\")\n        .setAsyncId(\"48\");\n    response = deleteAlias.process(cloudClient);\n    assertEquals(\"48\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"48\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertEquals(\"DeleteAlias did not complete\", \"completed\", state);\n\n    try {\n      cloudClient.query(\"myalias\", query);\n      fail(\"Alias should not exist\");\n    } catch (SolrException e) {\n      //expected\n    }\n\n    String replica = shard1.getReplicas().iterator().next().getName();\n    CollectionAdminRequest.DeleteReplica deleteReplica = new CollectionAdminRequest.DeleteReplica()\n        .setCollectionName(collection)\n        .setShardName(\"shard1\")\n        .setReplica(replica)\n        .setAsyncId(\"47\");\n    response = deleteReplica.process(cloudClient);\n    assertEquals(\"47\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"47\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertEquals(\"DeleteReplica did not complete\", \"completed\", state);\n\n    CollectionAdminRequest.Delete deleteCollection = new CollectionAdminRequest.Delete()\n        .setCollectionName(collection)\n        .setAsyncId(\"48\");\n    response = deleteCollection.process(cloudClient);\n    assertEquals(\"48\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"48\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertEquals(\"DeleteCollection did not complete\", \"completed\", state);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"861a8940601b61a2fd5427f7187314d516ef1586","date":1457434409,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIAsyncDistributedZkTest#testAsyncRequests().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIAsyncDistributedZkTest#testAsyncRequests().mjava","sourceNew":"  @Test\n  public void testAsyncRequests() throws Exception {\n\n    final String collection = \"testAsyncOperations\";\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    RequestStatusState state = new Create()\n        .setCollectionName(collection)\n        .setNumShards(1)\n        .setRouterName(\"implicit\")\n        .setShards(\"shard1\")\n        .setConfigName(\"conf1\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateCollection task did not complete!\", RequestStatusState.COMPLETED, state);\n\n    //Add a few documents to shard1\n    int numDocs = TestUtil.nextInt(random(), 10, 100);\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"_route_\", \"shard1\");\n      docs.add(doc);\n    }\n    client.add(collection, docs);\n    client.commit(collection);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(collection, query).getResults().getNumFound());\n\n    state = new CollectionAdminRequest.Reload()\n        .setCollectionName(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"ReloadCollection did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collection)\n        .setShardName(\"shard2\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    //Add a doc to shard2 to make sure shard2 was created properly\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", numDocs + 1);\n    doc.addField(\"_route_\", \"shard2\");\n    client.add(collection, doc);\n    client.commit(collection);\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard2\");\n    assertEquals(1, client.query(collection, query).getResults().getNumFound());\n\n    state = new CollectionAdminRequest.DeleteShard()\n        .setCollectionName(collection)\n        .setShardName(\"shard2\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = new CollectionAdminRequest.AddReplica()\n        .setCollectionName(collection)\n        .setShardName(\"shard1\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"AddReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    //cloudClient watch might take a couple of seconds to reflect it\n    Slice shard1 = client.getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    int count = 0;\n    while (shard1.getReplicas().size() != 2) {\n      if (count++ > 1000) {\n        fail(\"2nd Replica not reflecting in the cluster state\");\n      }\n      Thread.sleep(100);\n    }\n\n    state = new CollectionAdminRequest.CreateAlias()\n        .setAliasName(\"myalias\")\n        .setAliasedCollections(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(\"myalias\", query).getResults().getNumFound());\n\n    state = new CollectionAdminRequest.DeleteAlias()\n        .setAliasName(\"myalias\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    try {\n      client.query(\"myalias\", query);\n      fail(\"Alias should not exist\");\n    } catch (SolrException e) {\n      //expected\n    }\n\n    String replica = shard1.getReplicas().iterator().next().getName();\n    state = new CollectionAdminRequest.DeleteReplica()\n        .setCollectionName(collection)\n        .setShardName(\"shard1\")\n        .setReplica(replica)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = new CollectionAdminRequest.Delete()\n        .setCollectionName(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteCollection did not complete\", RequestStatusState.COMPLETED, state);\n  }\n\n","sourceOld":"  @Test\n  public void testAsyncRequests() throws Exception {\n    String collection = \"testAsyncOperations\";\n\n    Create createCollectionRequest = new Create()\n        .setCollectionName(collection)\n        .setNumShards(1)\n        .setRouterName(\"implicit\")\n        .setShards(\"shard1\")\n        .setConfigName(\"conf1\")\n        .setAsyncId(\"42\");\n    CollectionAdminResponse response = createCollectionRequest.process(cloudClient);\n    assertEquals(\"42\", response.getResponse().get(\"requestid\"));\n    RequestStatusState state = getRequestStateAfterCompletion(\"42\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertSame(\"CreateCollection task did not complete!\", RequestStatusState.COMPLETED, state);\n\n    //Add a few documents to shard1\n    int numDocs = TestUtil.nextInt(random(), 10, 100);\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"_route_\", \"shard1\");\n      docs.add(doc);\n    }\n    cloudClient.add(collection, docs);\n    cloudClient.commit(collection);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, cloudClient.query(collection, query).getResults().getNumFound());\n\n    CollectionAdminRequest.Reload reloadCollection = new CollectionAdminRequest.Reload();\n    reloadCollection.setCollectionName(collection).setAsyncId(\"43\");\n    response = reloadCollection.process(cloudClient);\n    assertEquals(\"43\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"43\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertSame(\"ReloadCollection did not complete\", RequestStatusState.COMPLETED, state);\n\n    CollectionAdminRequest.CreateShard createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collection)\n        .setShardName(\"shard2\")\n        .setAsyncId(\"44\");\n    response = createShard.process(cloudClient);\n    assertEquals(\"44\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"44\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertSame(\"CreateShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    //Add a doc to shard2 to make sure shard2 was created properly\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", numDocs + 1);\n    doc.addField(\"_route_\", \"shard2\");\n    cloudClient.add(collection, doc);\n    cloudClient.commit(collection);\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard2\");\n    assertEquals(1, cloudClient.query(collection, query).getResults().getNumFound());\n\n    CollectionAdminRequest.DeleteShard deleteShard = new CollectionAdminRequest.DeleteShard()\n        .setCollectionName(collection)\n        .setShardName(\"shard2\")\n        .setAsyncId(\"45\");\n    response = deleteShard.process(cloudClient);\n    assertEquals(\"45\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"45\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertSame(\"DeleteShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n        .setCollectionName(collection)\n        .setShardName(\"shard1\")\n        .setAsyncId(\"46\");\n    response = addReplica.process(cloudClient);\n    assertEquals(\"46\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"46\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertSame(\"AddReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    //cloudClient watch might take a couple of seconds to reflect it\n    Slice shard1 = cloudClient.getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    int count = 0;\n    while (shard1.getReplicas().size() != 2) {\n      if (count++ > 1000) {\n        fail(\"2nd Replica not reflecting in the cluster state\");\n      }\n      Thread.sleep(100);\n    }\n\n    CollectionAdminRequest.CreateAlias createAlias = new CollectionAdminRequest.CreateAlias()\n        .setAliasName(\"myalias\")\n        .setAliasedCollections(collection)\n        .setAsyncId(\"47\");\n    response = createAlias.process(cloudClient);\n    assertEquals(\"47\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"47\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertSame(\"CreateAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, cloudClient.query(\"myalias\", query).getResults().getNumFound());\n\n    CollectionAdminRequest.DeleteAlias deleteAlias = new CollectionAdminRequest.DeleteAlias()\n        .setAliasName(\"myalias\")\n        .setAsyncId(\"48\");\n    response = deleteAlias.process(cloudClient);\n    assertEquals(\"48\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"48\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertSame(\"DeleteAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    try {\n      cloudClient.query(\"myalias\", query);\n      fail(\"Alias should not exist\");\n    } catch (SolrException e) {\n      //expected\n    }\n\n    String replica = shard1.getReplicas().iterator().next().getName();\n    CollectionAdminRequest.DeleteReplica deleteReplica = new CollectionAdminRequest.DeleteReplica()\n        .setCollectionName(collection)\n        .setShardName(\"shard1\")\n        .setReplica(replica)\n        .setAsyncId(\"47\");\n    response = deleteReplica.process(cloudClient);\n    assertEquals(\"47\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"47\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertSame(\"DeleteReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    CollectionAdminRequest.Delete deleteCollection = new CollectionAdminRequest.Delete()\n        .setCollectionName(collection)\n        .setAsyncId(\"48\");\n    response = deleteCollection.process(cloudClient);\n    assertEquals(\"48\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"48\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertSame(\"DeleteCollection did not complete\", RequestStatusState.COMPLETED, state);\n  }\n\n","bugFix":null,"bugIntro":["344b0840364d990b29b97467bfcc766ff8325d11","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1dce8d293bb23a3bc9acca2dbdf8329ec48517d","date":1457434419,"type":3,"author":"Alan Woodward","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIAsyncDistributedZkTest#testAsyncRequests().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIAsyncDistributedZkTest#testAsyncRequests().mjava","sourceNew":"  @Test\n  public void testAsyncRequests() throws Exception {\n\n    final String collection = \"testAsyncOperations\";\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    RequestStatusState state = new Create()\n        .setCollectionName(collection)\n        .setNumShards(1)\n        .setRouterName(\"implicit\")\n        .setShards(\"shard1\")\n        .setConfigName(\"conf1\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateCollection task did not complete!\", RequestStatusState.COMPLETED, state);\n\n    //Add a few documents to shard1\n    int numDocs = TestUtil.nextInt(random(), 10, 100);\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"_route_\", \"shard1\");\n      docs.add(doc);\n    }\n    client.add(collection, docs);\n    client.commit(collection);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(collection, query).getResults().getNumFound());\n\n    state = new CollectionAdminRequest.Reload()\n        .setCollectionName(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"ReloadCollection did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collection)\n        .setShardName(\"shard2\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    //Add a doc to shard2 to make sure shard2 was created properly\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", numDocs + 1);\n    doc.addField(\"_route_\", \"shard2\");\n    client.add(collection, doc);\n    client.commit(collection);\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard2\");\n    assertEquals(1, client.query(collection, query).getResults().getNumFound());\n\n    state = new CollectionAdminRequest.DeleteShard()\n        .setCollectionName(collection)\n        .setShardName(\"shard2\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = new CollectionAdminRequest.AddReplica()\n        .setCollectionName(collection)\n        .setShardName(\"shard1\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"AddReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    //cloudClient watch might take a couple of seconds to reflect it\n    Slice shard1 = client.getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    int count = 0;\n    while (shard1.getReplicas().size() != 2) {\n      if (count++ > 1000) {\n        fail(\"2nd Replica not reflecting in the cluster state\");\n      }\n      Thread.sleep(100);\n    }\n\n    state = new CollectionAdminRequest.CreateAlias()\n        .setAliasName(\"myalias\")\n        .setAliasedCollections(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(\"myalias\", query).getResults().getNumFound());\n\n    state = new CollectionAdminRequest.DeleteAlias()\n        .setAliasName(\"myalias\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    try {\n      client.query(\"myalias\", query);\n      fail(\"Alias should not exist\");\n    } catch (SolrException e) {\n      //expected\n    }\n\n    String replica = shard1.getReplicas().iterator().next().getName();\n    state = new CollectionAdminRequest.DeleteReplica()\n        .setCollectionName(collection)\n        .setShardName(\"shard1\")\n        .setReplica(replica)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = new CollectionAdminRequest.Delete()\n        .setCollectionName(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteCollection did not complete\", RequestStatusState.COMPLETED, state);\n  }\n\n","sourceOld":"  @Test\n  public void testAsyncRequests() throws Exception {\n    String collection = \"testAsyncOperations\";\n\n    Create createCollectionRequest = new Create()\n        .setCollectionName(collection)\n        .setNumShards(1)\n        .setRouterName(\"implicit\")\n        .setShards(\"shard1\")\n        .setConfigName(\"conf1\")\n        .setAsyncId(\"42\");\n    CollectionAdminResponse response = createCollectionRequest.process(cloudClient);\n    assertEquals(\"42\", response.getResponse().get(\"requestid\"));\n    RequestStatusState state = getRequestStateAfterCompletion(\"42\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertSame(\"CreateCollection task did not complete!\", RequestStatusState.COMPLETED, state);\n\n    //Add a few documents to shard1\n    int numDocs = TestUtil.nextInt(random(), 10, 100);\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"_route_\", \"shard1\");\n      docs.add(doc);\n    }\n    cloudClient.add(collection, docs);\n    cloudClient.commit(collection);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, cloudClient.query(collection, query).getResults().getNumFound());\n\n    CollectionAdminRequest.Reload reloadCollection = new CollectionAdminRequest.Reload();\n    reloadCollection.setCollectionName(collection).setAsyncId(\"43\");\n    response = reloadCollection.process(cloudClient);\n    assertEquals(\"43\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"43\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertSame(\"ReloadCollection did not complete\", RequestStatusState.COMPLETED, state);\n\n    CollectionAdminRequest.CreateShard createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collection)\n        .setShardName(\"shard2\")\n        .setAsyncId(\"44\");\n    response = createShard.process(cloudClient);\n    assertEquals(\"44\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"44\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertSame(\"CreateShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    //Add a doc to shard2 to make sure shard2 was created properly\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", numDocs + 1);\n    doc.addField(\"_route_\", \"shard2\");\n    cloudClient.add(collection, doc);\n    cloudClient.commit(collection);\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard2\");\n    assertEquals(1, cloudClient.query(collection, query).getResults().getNumFound());\n\n    CollectionAdminRequest.DeleteShard deleteShard = new CollectionAdminRequest.DeleteShard()\n        .setCollectionName(collection)\n        .setShardName(\"shard2\")\n        .setAsyncId(\"45\");\n    response = deleteShard.process(cloudClient);\n    assertEquals(\"45\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"45\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertSame(\"DeleteShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n        .setCollectionName(collection)\n        .setShardName(\"shard1\")\n        .setAsyncId(\"46\");\n    response = addReplica.process(cloudClient);\n    assertEquals(\"46\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"46\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertSame(\"AddReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    //cloudClient watch might take a couple of seconds to reflect it\n    Slice shard1 = cloudClient.getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    int count = 0;\n    while (shard1.getReplicas().size() != 2) {\n      if (count++ > 1000) {\n        fail(\"2nd Replica not reflecting in the cluster state\");\n      }\n      Thread.sleep(100);\n    }\n\n    CollectionAdminRequest.CreateAlias createAlias = new CollectionAdminRequest.CreateAlias()\n        .setAliasName(\"myalias\")\n        .setAliasedCollections(collection)\n        .setAsyncId(\"47\");\n    response = createAlias.process(cloudClient);\n    assertEquals(\"47\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"47\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertSame(\"CreateAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, cloudClient.query(\"myalias\", query).getResults().getNumFound());\n\n    CollectionAdminRequest.DeleteAlias deleteAlias = new CollectionAdminRequest.DeleteAlias()\n        .setAliasName(\"myalias\")\n        .setAsyncId(\"48\");\n    response = deleteAlias.process(cloudClient);\n    assertEquals(\"48\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"48\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertSame(\"DeleteAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    try {\n      cloudClient.query(\"myalias\", query);\n      fail(\"Alias should not exist\");\n    } catch (SolrException e) {\n      //expected\n    }\n\n    String replica = shard1.getReplicas().iterator().next().getName();\n    CollectionAdminRequest.DeleteReplica deleteReplica = new CollectionAdminRequest.DeleteReplica()\n        .setCollectionName(collection)\n        .setShardName(\"shard1\")\n        .setReplica(replica)\n        .setAsyncId(\"47\");\n    response = deleteReplica.process(cloudClient);\n    assertEquals(\"47\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"47\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertSame(\"DeleteReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    CollectionAdminRequest.Delete deleteCollection = new CollectionAdminRequest.Delete()\n        .setCollectionName(collection)\n        .setAsyncId(\"48\");\n    response = deleteCollection.process(cloudClient);\n    assertEquals(\"48\", response.getResponse().get(\"requestid\"));\n    state = getRequestStateAfterCompletion(\"48\", MAX_TIMEOUT_SECONDS, cloudClient);\n    assertSame(\"DeleteCollection did not complete\", RequestStatusState.COMPLETED, state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b54504c5305a6cc48f59c627c9c8dd727e2a8f0b","date":1491468518,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIAsyncDistributedZkTest#testAsyncRequests().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIAsyncDistributedZkTest#testAsyncRequests().mjava","sourceNew":"  @Test\n  public void testAsyncRequests() throws Exception {\n\n    final String collection = \"testAsyncOperations\";\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    RequestStatusState state = new Create()\n        .setCollectionName(collection)\n        .setNumShards(1)\n        .setRouterName(\"implicit\")\n        .setShards(\"shard1\")\n        .setConfigName(\"conf1\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateCollection task did not complete!\", RequestStatusState.COMPLETED, state);\n\n    //Add a few documents to shard1\n    int numDocs = TestUtil.nextInt(random(), 10, 100);\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"_route_\", \"shard1\");\n      docs.add(doc);\n    }\n    client.add(collection, docs);\n    client.commit(collection);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(collection, query).getResults().getNumFound());\n\n    state = new CollectionAdminRequest.Reload()\n        .setCollectionName(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"ReloadCollection did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collection)\n        .setShardName(\"shard2\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    //Add a doc to shard2 to make sure shard2 was created properly\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", numDocs + 1);\n    doc.addField(\"_route_\", \"shard2\");\n    client.add(collection, doc);\n    client.commit(collection);\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard2\");\n    assertEquals(1, client.query(collection, query).getResults().getNumFound());\n\n    state = new CollectionAdminRequest.DeleteShard()\n        .setCollectionName(collection)\n        .setShardName(\"shard2\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = new CollectionAdminRequest.AddReplica()\n        .setCollectionName(collection)\n        .setShardName(\"shard1\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"AddReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    //cloudClient watch might take a couple of seconds to reflect it\n    Slice shard1 = client.getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    int count = 0;\n    while (shard1.getReplicas().size() != 2) {\n      if (count++ > 1000) {\n        fail(\"2nd Replica not reflecting in the cluster state\");\n      }\n      Thread.sleep(100);\n    }\n\n    state = new CollectionAdminRequest.CreateAlias()\n        .setAliasName(\"myalias\")\n        .setAliasedCollections(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(\"myalias\", query).getResults().getNumFound());\n\n    state = new CollectionAdminRequest.DeleteAlias()\n        .setAliasName(\"myalias\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    try {\n      client.query(\"myalias\", query);\n      fail(\"Alias should not exist\");\n    } catch (SolrException e) {\n      //expected\n    }\n\n    Replica replica = shard1.getReplicas().iterator().next();\n    for (String liveNode : client.getZkStateReader().getClusterState().getLiveNodes()) {\n      if (!replica.getNodeName().equals(liveNode)) {\n        state = new CollectionAdminRequest.MoveReplica(collection, replica.getName(), liveNode)\n            .processAndWait(client, MAX_TIMEOUT_SECONDS);\n        assertSame(\"MoveReplica did not complete\", RequestStatusState.COMPLETED, state);\n        break;\n      }\n    }\n\n    shard1 = client.getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    String replicaName = shard1.getReplicas().iterator().next().getName();\n    state = new CollectionAdminRequest.DeleteReplica()\n        .setCollectionName(collection)\n        .setShardName(\"shard1\")\n        .setReplica(replicaName)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = new CollectionAdminRequest.Delete()\n        .setCollectionName(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteCollection did not complete\", RequestStatusState.COMPLETED, state);\n  }\n\n","sourceOld":"  @Test\n  public void testAsyncRequests() throws Exception {\n\n    final String collection = \"testAsyncOperations\";\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    RequestStatusState state = new Create()\n        .setCollectionName(collection)\n        .setNumShards(1)\n        .setRouterName(\"implicit\")\n        .setShards(\"shard1\")\n        .setConfigName(\"conf1\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateCollection task did not complete!\", RequestStatusState.COMPLETED, state);\n\n    //Add a few documents to shard1\n    int numDocs = TestUtil.nextInt(random(), 10, 100);\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"_route_\", \"shard1\");\n      docs.add(doc);\n    }\n    client.add(collection, docs);\n    client.commit(collection);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(collection, query).getResults().getNumFound());\n\n    state = new CollectionAdminRequest.Reload()\n        .setCollectionName(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"ReloadCollection did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collection)\n        .setShardName(\"shard2\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    //Add a doc to shard2 to make sure shard2 was created properly\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", numDocs + 1);\n    doc.addField(\"_route_\", \"shard2\");\n    client.add(collection, doc);\n    client.commit(collection);\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard2\");\n    assertEquals(1, client.query(collection, query).getResults().getNumFound());\n\n    state = new CollectionAdminRequest.DeleteShard()\n        .setCollectionName(collection)\n        .setShardName(\"shard2\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = new CollectionAdminRequest.AddReplica()\n        .setCollectionName(collection)\n        .setShardName(\"shard1\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"AddReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    //cloudClient watch might take a couple of seconds to reflect it\n    Slice shard1 = client.getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    int count = 0;\n    while (shard1.getReplicas().size() != 2) {\n      if (count++ > 1000) {\n        fail(\"2nd Replica not reflecting in the cluster state\");\n      }\n      Thread.sleep(100);\n    }\n\n    state = new CollectionAdminRequest.CreateAlias()\n        .setAliasName(\"myalias\")\n        .setAliasedCollections(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(\"myalias\", query).getResults().getNumFound());\n\n    state = new CollectionAdminRequest.DeleteAlias()\n        .setAliasName(\"myalias\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    try {\n      client.query(\"myalias\", query);\n      fail(\"Alias should not exist\");\n    } catch (SolrException e) {\n      //expected\n    }\n\n    String replica = shard1.getReplicas().iterator().next().getName();\n    state = new CollectionAdminRequest.DeleteReplica()\n        .setCollectionName(collection)\n        .setShardName(\"shard1\")\n        .setReplica(replica)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = new CollectionAdminRequest.Delete()\n        .setCollectionName(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteCollection did not complete\", RequestStatusState.COMPLETED, state);\n  }\n\n","bugFix":null,"bugIntro":["344b0840364d990b29b97467bfcc766ff8325d11","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIAsyncDistributedZkTest#testAsyncRequests().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIAsyncDistributedZkTest#testAsyncRequests().mjava","sourceNew":"  @Test\n  public void testAsyncRequests() throws Exception {\n\n    final String collection = \"testAsyncOperations\";\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    RequestStatusState state = new Create()\n        .setCollectionName(collection)\n        .setNumShards(1)\n        .setRouterName(\"implicit\")\n        .setShards(\"shard1\")\n        .setConfigName(\"conf1\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateCollection task did not complete!\", RequestStatusState.COMPLETED, state);\n\n    //Add a few documents to shard1\n    int numDocs = TestUtil.nextInt(random(), 10, 100);\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"_route_\", \"shard1\");\n      docs.add(doc);\n    }\n    client.add(collection, docs);\n    client.commit(collection);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(collection, query).getResults().getNumFound());\n\n    state = new CollectionAdminRequest.Reload()\n        .setCollectionName(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"ReloadCollection did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collection)\n        .setShardName(\"shard2\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    //Add a doc to shard2 to make sure shard2 was created properly\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", numDocs + 1);\n    doc.addField(\"_route_\", \"shard2\");\n    client.add(collection, doc);\n    client.commit(collection);\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard2\");\n    assertEquals(1, client.query(collection, query).getResults().getNumFound());\n\n    state = new CollectionAdminRequest.DeleteShard()\n        .setCollectionName(collection)\n        .setShardName(\"shard2\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = new CollectionAdminRequest.AddReplica()\n        .setCollectionName(collection)\n        .setShardName(\"shard1\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"AddReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    //cloudClient watch might take a couple of seconds to reflect it\n    Slice shard1 = client.getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    int count = 0;\n    while (shard1.getReplicas().size() != 2) {\n      if (count++ > 1000) {\n        fail(\"2nd Replica not reflecting in the cluster state\");\n      }\n      Thread.sleep(100);\n    }\n\n    state = new CollectionAdminRequest.CreateAlias()\n        .setAliasName(\"myalias\")\n        .setAliasedCollections(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(\"myalias\", query).getResults().getNumFound());\n\n    state = new CollectionAdminRequest.DeleteAlias()\n        .setAliasName(\"myalias\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    try {\n      client.query(\"myalias\", query);\n      fail(\"Alias should not exist\");\n    } catch (SolrException e) {\n      //expected\n    }\n\n    Replica replica = shard1.getReplicas().iterator().next();\n    for (String liveNode : client.getZkStateReader().getClusterState().getLiveNodes()) {\n      if (!replica.getNodeName().equals(liveNode)) {\n        state = new CollectionAdminRequest.MoveReplica(collection, replica.getName(), liveNode)\n            .processAndWait(client, MAX_TIMEOUT_SECONDS);\n        assertSame(\"MoveReplica did not complete\", RequestStatusState.COMPLETED, state);\n        break;\n      }\n    }\n\n    shard1 = client.getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    String replicaName = shard1.getReplicas().iterator().next().getName();\n    state = new CollectionAdminRequest.DeleteReplica()\n        .setCollectionName(collection)\n        .setShardName(\"shard1\")\n        .setReplica(replicaName)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = new CollectionAdminRequest.Delete()\n        .setCollectionName(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteCollection did not complete\", RequestStatusState.COMPLETED, state);\n  }\n\n","sourceOld":"  @Test\n  public void testAsyncRequests() throws Exception {\n\n    final String collection = \"testAsyncOperations\";\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    RequestStatusState state = new Create()\n        .setCollectionName(collection)\n        .setNumShards(1)\n        .setRouterName(\"implicit\")\n        .setShards(\"shard1\")\n        .setConfigName(\"conf1\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateCollection task did not complete!\", RequestStatusState.COMPLETED, state);\n\n    //Add a few documents to shard1\n    int numDocs = TestUtil.nextInt(random(), 10, 100);\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"_route_\", \"shard1\");\n      docs.add(doc);\n    }\n    client.add(collection, docs);\n    client.commit(collection);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(collection, query).getResults().getNumFound());\n\n    state = new CollectionAdminRequest.Reload()\n        .setCollectionName(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"ReloadCollection did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collection)\n        .setShardName(\"shard2\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    //Add a doc to shard2 to make sure shard2 was created properly\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", numDocs + 1);\n    doc.addField(\"_route_\", \"shard2\");\n    client.add(collection, doc);\n    client.commit(collection);\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard2\");\n    assertEquals(1, client.query(collection, query).getResults().getNumFound());\n\n    state = new CollectionAdminRequest.DeleteShard()\n        .setCollectionName(collection)\n        .setShardName(\"shard2\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = new CollectionAdminRequest.AddReplica()\n        .setCollectionName(collection)\n        .setShardName(\"shard1\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"AddReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    //cloudClient watch might take a couple of seconds to reflect it\n    Slice shard1 = client.getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    int count = 0;\n    while (shard1.getReplicas().size() != 2) {\n      if (count++ > 1000) {\n        fail(\"2nd Replica not reflecting in the cluster state\");\n      }\n      Thread.sleep(100);\n    }\n\n    state = new CollectionAdminRequest.CreateAlias()\n        .setAliasName(\"myalias\")\n        .setAliasedCollections(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(\"myalias\", query).getResults().getNumFound());\n\n    state = new CollectionAdminRequest.DeleteAlias()\n        .setAliasName(\"myalias\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    try {\n      client.query(\"myalias\", query);\n      fail(\"Alias should not exist\");\n    } catch (SolrException e) {\n      //expected\n    }\n\n    String replica = shard1.getReplicas().iterator().next().getName();\n    state = new CollectionAdminRequest.DeleteReplica()\n        .setCollectionName(collection)\n        .setShardName(\"shard1\")\n        .setReplica(replica)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = new CollectionAdminRequest.Delete()\n        .setCollectionName(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteCollection did not complete\", RequestStatusState.COMPLETED, state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ac97ea104d893f16aab430d9904473bc1f233f3c","date":1496249396,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIAsyncDistributedZkTest#testAsyncRequests().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIAsyncDistributedZkTest#testAsyncRequests().mjava","sourceNew":"  @Test\n  public void testAsyncRequests() throws Exception {\n\n    final String collection = \"testAsyncOperations\";\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    RequestStatusState state = CollectionAdminRequest.createCollection(collection,\"conf1\",1,1)\n        .setRouterName(\"implicit\")\n        .setShards(\"shard1\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateCollection task did not complete!\", RequestStatusState.COMPLETED, state);\n\n    //Add a few documents to shard1\n    int numDocs = TestUtil.nextInt(random(), 10, 100);\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"_route_\", \"shard1\");\n      docs.add(doc);\n    }\n    client.add(collection, docs);\n    client.commit(collection);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(collection, query).getResults().getNumFound());\n\n    state = CollectionAdminRequest.reloadCollection(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"ReloadCollection did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.createShard(collection,\"shard2\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    //Add a doc to shard2 to make sure shard2 was created properly\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", numDocs + 1);\n    doc.addField(\"_route_\", \"shard2\");\n    client.add(collection, doc);\n    client.commit(collection);\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard2\");\n    assertEquals(1, client.query(collection, query).getResults().getNumFound());\n\n    state = CollectionAdminRequest.deleteShard(collection,\"shard2\").processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n      .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"AddReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    //cloudClient watch might take a couple of seconds to reflect it\n    Slice shard1 = client.getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    int count = 0;\n    while (shard1.getReplicas().size() != 2) {\n      if (count++ > 1000) {\n        fail(\"2nd Replica not reflecting in the cluster state\");\n      }\n      Thread.sleep(100);\n    }\n\n    state = CollectionAdminRequest.createAlias(\"myalias\",collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(\"myalias\", query).getResults().getNumFound());\n\n    state = CollectionAdminRequest.deleteAlias(\"myalias\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    try {\n      client.query(\"myalias\", query);\n      fail(\"Alias should not exist\");\n    } catch (SolrException e) {\n      //expected\n    }\n\n    Replica replica = shard1.getReplicas().iterator().next();\n    for (String liveNode : client.getZkStateReader().getClusterState().getLiveNodes()) {\n      if (!replica.getNodeName().equals(liveNode)) {\n        state = new CollectionAdminRequest.MoveReplica(collection, replica.getName(), liveNode)\n            .processAndWait(client, MAX_TIMEOUT_SECONDS);\n        assertSame(\"MoveReplica did not complete\", RequestStatusState.COMPLETED, state);\n        break;\n      }\n    }\n\n    shard1 = client.getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    String replicaName = shard1.getReplicas().iterator().next().getName();\n    state = CollectionAdminRequest.deleteReplica(collection, \"shard1\", replicaName)\n      .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.deleteCollection(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteCollection did not complete\", RequestStatusState.COMPLETED, state);\n  }\n\n","sourceOld":"  @Test\n  public void testAsyncRequests() throws Exception {\n\n    final String collection = \"testAsyncOperations\";\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    RequestStatusState state = new Create()\n        .setCollectionName(collection)\n        .setNumShards(1)\n        .setRouterName(\"implicit\")\n        .setShards(\"shard1\")\n        .setConfigName(\"conf1\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateCollection task did not complete!\", RequestStatusState.COMPLETED, state);\n\n    //Add a few documents to shard1\n    int numDocs = TestUtil.nextInt(random(), 10, 100);\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"_route_\", \"shard1\");\n      docs.add(doc);\n    }\n    client.add(collection, docs);\n    client.commit(collection);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(collection, query).getResults().getNumFound());\n\n    state = new CollectionAdminRequest.Reload()\n        .setCollectionName(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"ReloadCollection did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collection)\n        .setShardName(\"shard2\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    //Add a doc to shard2 to make sure shard2 was created properly\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", numDocs + 1);\n    doc.addField(\"_route_\", \"shard2\");\n    client.add(collection, doc);\n    client.commit(collection);\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard2\");\n    assertEquals(1, client.query(collection, query).getResults().getNumFound());\n\n    state = new CollectionAdminRequest.DeleteShard()\n        .setCollectionName(collection)\n        .setShardName(\"shard2\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = new CollectionAdminRequest.AddReplica()\n        .setCollectionName(collection)\n        .setShardName(\"shard1\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"AddReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    //cloudClient watch might take a couple of seconds to reflect it\n    Slice shard1 = client.getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    int count = 0;\n    while (shard1.getReplicas().size() != 2) {\n      if (count++ > 1000) {\n        fail(\"2nd Replica not reflecting in the cluster state\");\n      }\n      Thread.sleep(100);\n    }\n\n    state = new CollectionAdminRequest.CreateAlias()\n        .setAliasName(\"myalias\")\n        .setAliasedCollections(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(\"myalias\", query).getResults().getNumFound());\n\n    state = new CollectionAdminRequest.DeleteAlias()\n        .setAliasName(\"myalias\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    try {\n      client.query(\"myalias\", query);\n      fail(\"Alias should not exist\");\n    } catch (SolrException e) {\n      //expected\n    }\n\n    Replica replica = shard1.getReplicas().iterator().next();\n    for (String liveNode : client.getZkStateReader().getClusterState().getLiveNodes()) {\n      if (!replica.getNodeName().equals(liveNode)) {\n        state = new CollectionAdminRequest.MoveReplica(collection, replica.getName(), liveNode)\n            .processAndWait(client, MAX_TIMEOUT_SECONDS);\n        assertSame(\"MoveReplica did not complete\", RequestStatusState.COMPLETED, state);\n        break;\n      }\n    }\n\n    shard1 = client.getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    String replicaName = shard1.getReplicas().iterator().next().getName();\n    state = new CollectionAdminRequest.DeleteReplica()\n        .setCollectionName(collection)\n        .setShardName(\"shard1\")\n        .setReplica(replicaName)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = new CollectionAdminRequest.Delete()\n        .setCollectionName(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteCollection did not complete\", RequestStatusState.COMPLETED, state);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3217321f3e1d7922898c6c633d17acfa840d6875","date":1496257480,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIAsyncDistributedZkTest#testAsyncRequests().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIAsyncDistributedZkTest#testAsyncRequests().mjava","sourceNew":"  @Test\n  public void testAsyncRequests() throws Exception {\n\n    final String collection = \"testAsyncOperations\";\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    RequestStatusState state = CollectionAdminRequest.createCollection(collection,\"conf1\",1,1)\n        .setRouterName(\"implicit\")\n        .setShards(\"shard1\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateCollection task did not complete!\", RequestStatusState.COMPLETED, state);\n\n    //Add a few documents to shard1\n    int numDocs = TestUtil.nextInt(random(), 10, 100);\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"_route_\", \"shard1\");\n      docs.add(doc);\n    }\n    client.add(collection, docs);\n    client.commit(collection);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(collection, query).getResults().getNumFound());\n\n    state = CollectionAdminRequest.reloadCollection(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"ReloadCollection did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.createShard(collection,\"shard2\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    //Add a doc to shard2 to make sure shard2 was created properly\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", numDocs + 1);\n    doc.addField(\"_route_\", \"shard2\");\n    client.add(collection, doc);\n    client.commit(collection);\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard2\");\n    assertEquals(1, client.query(collection, query).getResults().getNumFound());\n\n    state = CollectionAdminRequest.deleteShard(collection,\"shard2\").processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n      .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"AddReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    //cloudClient watch might take a couple of seconds to reflect it\n    Slice shard1 = client.getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    int count = 0;\n    while (shard1.getReplicas().size() != 2) {\n      if (count++ > 1000) {\n        fail(\"2nd Replica not reflecting in the cluster state\");\n      }\n      Thread.sleep(100);\n    }\n\n    state = CollectionAdminRequest.createAlias(\"myalias\",collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(\"myalias\", query).getResults().getNumFound());\n\n    state = CollectionAdminRequest.deleteAlias(\"myalias\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    try {\n      client.query(\"myalias\", query);\n      fail(\"Alias should not exist\");\n    } catch (SolrException e) {\n      //expected\n    }\n\n    Replica replica = shard1.getReplicas().iterator().next();\n    for (String liveNode : client.getZkStateReader().getClusterState().getLiveNodes()) {\n      if (!replica.getNodeName().equals(liveNode)) {\n        state = new CollectionAdminRequest.MoveReplica(collection, replica.getName(), liveNode)\n            .processAndWait(client, MAX_TIMEOUT_SECONDS);\n        assertSame(\"MoveReplica did not complete\", RequestStatusState.COMPLETED, state);\n        break;\n      }\n    }\n\n    shard1 = client.getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    String replicaName = shard1.getReplicas().iterator().next().getName();\n    state = CollectionAdminRequest.deleteReplica(collection, \"shard1\", replicaName)\n      .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.deleteCollection(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteCollection did not complete\", RequestStatusState.COMPLETED, state);\n  }\n\n","sourceOld":"  @Test\n  public void testAsyncRequests() throws Exception {\n\n    final String collection = \"testAsyncOperations\";\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    RequestStatusState state = new Create()\n        .setCollectionName(collection)\n        .setNumShards(1)\n        .setRouterName(\"implicit\")\n        .setShards(\"shard1\")\n        .setConfigName(\"conf1\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateCollection task did not complete!\", RequestStatusState.COMPLETED, state);\n\n    //Add a few documents to shard1\n    int numDocs = TestUtil.nextInt(random(), 10, 100);\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"_route_\", \"shard1\");\n      docs.add(doc);\n    }\n    client.add(collection, docs);\n    client.commit(collection);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(collection, query).getResults().getNumFound());\n\n    state = new CollectionAdminRequest.Reload()\n        .setCollectionName(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"ReloadCollection did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collection)\n        .setShardName(\"shard2\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    //Add a doc to shard2 to make sure shard2 was created properly\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", numDocs + 1);\n    doc.addField(\"_route_\", \"shard2\");\n    client.add(collection, doc);\n    client.commit(collection);\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard2\");\n    assertEquals(1, client.query(collection, query).getResults().getNumFound());\n\n    state = new CollectionAdminRequest.DeleteShard()\n        .setCollectionName(collection)\n        .setShardName(\"shard2\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = new CollectionAdminRequest.AddReplica()\n        .setCollectionName(collection)\n        .setShardName(\"shard1\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"AddReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    //cloudClient watch might take a couple of seconds to reflect it\n    Slice shard1 = client.getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    int count = 0;\n    while (shard1.getReplicas().size() != 2) {\n      if (count++ > 1000) {\n        fail(\"2nd Replica not reflecting in the cluster state\");\n      }\n      Thread.sleep(100);\n    }\n\n    state = new CollectionAdminRequest.CreateAlias()\n        .setAliasName(\"myalias\")\n        .setAliasedCollections(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(\"myalias\", query).getResults().getNumFound());\n\n    state = new CollectionAdminRequest.DeleteAlias()\n        .setAliasName(\"myalias\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    try {\n      client.query(\"myalias\", query);\n      fail(\"Alias should not exist\");\n    } catch (SolrException e) {\n      //expected\n    }\n\n    Replica replica = shard1.getReplicas().iterator().next();\n    for (String liveNode : client.getZkStateReader().getClusterState().getLiveNodes()) {\n      if (!replica.getNodeName().equals(liveNode)) {\n        state = new CollectionAdminRequest.MoveReplica(collection, replica.getName(), liveNode)\n            .processAndWait(client, MAX_TIMEOUT_SECONDS);\n        assertSame(\"MoveReplica did not complete\", RequestStatusState.COMPLETED, state);\n        break;\n      }\n    }\n\n    shard1 = client.getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    String replicaName = shard1.getReplicas().iterator().next().getName();\n    state = new CollectionAdminRequest.DeleteReplica()\n        .setCollectionName(collection)\n        .setShardName(\"shard1\")\n        .setReplica(replicaName)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = new CollectionAdminRequest.Delete()\n        .setCollectionName(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteCollection did not complete\", RequestStatusState.COMPLETED, state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","date":1496281877,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIAsyncDistributedZkTest#testAsyncRequests().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIAsyncDistributedZkTest#testAsyncRequests().mjava","sourceNew":"  @Test\n  public void testAsyncRequests() throws Exception {\n\n    final String collection = \"testAsyncOperations\";\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    RequestStatusState state = CollectionAdminRequest.createCollection(collection,\"conf1\",1,1)\n        .setRouterName(\"implicit\")\n        .setShards(\"shard1\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateCollection task did not complete!\", RequestStatusState.COMPLETED, state);\n\n    //Add a few documents to shard1\n    int numDocs = TestUtil.nextInt(random(), 10, 100);\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"_route_\", \"shard1\");\n      docs.add(doc);\n    }\n    client.add(collection, docs);\n    client.commit(collection);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(collection, query).getResults().getNumFound());\n\n    state = CollectionAdminRequest.reloadCollection(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"ReloadCollection did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.createShard(collection,\"shard2\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    //Add a doc to shard2 to make sure shard2 was created properly\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", numDocs + 1);\n    doc.addField(\"_route_\", \"shard2\");\n    client.add(collection, doc);\n    client.commit(collection);\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard2\");\n    assertEquals(1, client.query(collection, query).getResults().getNumFound());\n\n    state = CollectionAdminRequest.deleteShard(collection,\"shard2\").processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n      .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"AddReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    //cloudClient watch might take a couple of seconds to reflect it\n    Slice shard1 = client.getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    int count = 0;\n    while (shard1.getReplicas().size() != 2) {\n      if (count++ > 1000) {\n        fail(\"2nd Replica not reflecting in the cluster state\");\n      }\n      Thread.sleep(100);\n    }\n\n    state = CollectionAdminRequest.createAlias(\"myalias\",collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(\"myalias\", query).getResults().getNumFound());\n\n    state = CollectionAdminRequest.deleteAlias(\"myalias\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    try {\n      client.query(\"myalias\", query);\n      fail(\"Alias should not exist\");\n    } catch (SolrException e) {\n      //expected\n    }\n\n    Replica replica = shard1.getReplicas().iterator().next();\n    for (String liveNode : client.getZkStateReader().getClusterState().getLiveNodes()) {\n      if (!replica.getNodeName().equals(liveNode)) {\n        state = new CollectionAdminRequest.MoveReplica(collection, replica.getName(), liveNode)\n            .processAndWait(client, MAX_TIMEOUT_SECONDS);\n        assertSame(\"MoveReplica did not complete\", RequestStatusState.COMPLETED, state);\n        break;\n      }\n    }\n\n    shard1 = client.getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    String replicaName = shard1.getReplicas().iterator().next().getName();\n    state = CollectionAdminRequest.deleteReplica(collection, \"shard1\", replicaName)\n      .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.deleteCollection(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteCollection did not complete\", RequestStatusState.COMPLETED, state);\n  }\n\n","sourceOld":"  @Test\n  public void testAsyncRequests() throws Exception {\n\n    final String collection = \"testAsyncOperations\";\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    RequestStatusState state = new Create()\n        .setCollectionName(collection)\n        .setNumShards(1)\n        .setRouterName(\"implicit\")\n        .setShards(\"shard1\")\n        .setConfigName(\"conf1\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateCollection task did not complete!\", RequestStatusState.COMPLETED, state);\n\n    //Add a few documents to shard1\n    int numDocs = TestUtil.nextInt(random(), 10, 100);\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"_route_\", \"shard1\");\n      docs.add(doc);\n    }\n    client.add(collection, docs);\n    client.commit(collection);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(collection, query).getResults().getNumFound());\n\n    state = new CollectionAdminRequest.Reload()\n        .setCollectionName(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"ReloadCollection did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collection)\n        .setShardName(\"shard2\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    //Add a doc to shard2 to make sure shard2 was created properly\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", numDocs + 1);\n    doc.addField(\"_route_\", \"shard2\");\n    client.add(collection, doc);\n    client.commit(collection);\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard2\");\n    assertEquals(1, client.query(collection, query).getResults().getNumFound());\n\n    state = new CollectionAdminRequest.DeleteShard()\n        .setCollectionName(collection)\n        .setShardName(\"shard2\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = new CollectionAdminRequest.AddReplica()\n        .setCollectionName(collection)\n        .setShardName(\"shard1\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"AddReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    //cloudClient watch might take a couple of seconds to reflect it\n    Slice shard1 = client.getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    int count = 0;\n    while (shard1.getReplicas().size() != 2) {\n      if (count++ > 1000) {\n        fail(\"2nd Replica not reflecting in the cluster state\");\n      }\n      Thread.sleep(100);\n    }\n\n    state = new CollectionAdminRequest.CreateAlias()\n        .setAliasName(\"myalias\")\n        .setAliasedCollections(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(\"myalias\", query).getResults().getNumFound());\n\n    state = new CollectionAdminRequest.DeleteAlias()\n        .setAliasName(\"myalias\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    try {\n      client.query(\"myalias\", query);\n      fail(\"Alias should not exist\");\n    } catch (SolrException e) {\n      //expected\n    }\n\n    Replica replica = shard1.getReplicas().iterator().next();\n    for (String liveNode : client.getZkStateReader().getClusterState().getLiveNodes()) {\n      if (!replica.getNodeName().equals(liveNode)) {\n        state = new CollectionAdminRequest.MoveReplica(collection, replica.getName(), liveNode)\n            .processAndWait(client, MAX_TIMEOUT_SECONDS);\n        assertSame(\"MoveReplica did not complete\", RequestStatusState.COMPLETED, state);\n        break;\n      }\n    }\n\n    shard1 = client.getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    String replicaName = shard1.getReplicas().iterator().next().getName();\n    state = new CollectionAdminRequest.DeleteReplica()\n        .setCollectionName(collection)\n        .setShardName(\"shard1\")\n        .setReplica(replicaName)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = new CollectionAdminRequest.Delete()\n        .setCollectionName(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteCollection did not complete\", RequestStatusState.COMPLETED, state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIAsyncDistributedZkTest#testAsyncRequests().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIAsyncDistributedZkTest#testAsyncRequests().mjava","sourceNew":"  @Test\n  public void testAsyncRequests() throws Exception {\n\n    final String collection = \"testAsyncOperations\";\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    RequestStatusState state = CollectionAdminRequest.createCollection(collection,\"conf1\",1,1)\n        .setRouterName(\"implicit\")\n        .setShards(\"shard1\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateCollection task did not complete!\", RequestStatusState.COMPLETED, state);\n\n    //Add a few documents to shard1\n    int numDocs = TestUtil.nextInt(random(), 10, 100);\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"_route_\", \"shard1\");\n      docs.add(doc);\n    }\n    client.add(collection, docs);\n    client.commit(collection);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(collection, query).getResults().getNumFound());\n\n    state = CollectionAdminRequest.reloadCollection(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"ReloadCollection did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.createShard(collection,\"shard2\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    //Add a doc to shard2 to make sure shard2 was created properly\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", numDocs + 1);\n    doc.addField(\"_route_\", \"shard2\");\n    client.add(collection, doc);\n    client.commit(collection);\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard2\");\n    assertEquals(1, client.query(collection, query).getResults().getNumFound());\n\n    state = CollectionAdminRequest.deleteShard(collection,\"shard2\").processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n      .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"AddReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    //cloudClient watch might take a couple of seconds to reflect it\n    Slice shard1 = client.getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    int count = 0;\n    while (shard1.getReplicas().size() != 2) {\n      if (count++ > 1000) {\n        fail(\"2nd Replica not reflecting in the cluster state\");\n      }\n      Thread.sleep(100);\n    }\n\n    state = CollectionAdminRequest.createAlias(\"myalias\",collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(\"myalias\", query).getResults().getNumFound());\n\n    state = CollectionAdminRequest.deleteAlias(\"myalias\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    try {\n      client.query(\"myalias\", query);\n      fail(\"Alias should not exist\");\n    } catch (SolrException e) {\n      //expected\n    }\n\n    Replica replica = shard1.getReplicas().iterator().next();\n    for (String liveNode : client.getZkStateReader().getClusterState().getLiveNodes()) {\n      if (!replica.getNodeName().equals(liveNode)) {\n        state = new CollectionAdminRequest.MoveReplica(collection, replica.getName(), liveNode)\n            .processAndWait(client, MAX_TIMEOUT_SECONDS);\n        assertSame(\"MoveReplica did not complete\", RequestStatusState.COMPLETED, state);\n        break;\n      }\n    }\n\n    shard1 = client.getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    String replicaName = shard1.getReplicas().iterator().next().getName();\n    state = CollectionAdminRequest.deleteReplica(collection, \"shard1\", replicaName)\n      .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.deleteCollection(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteCollection did not complete\", RequestStatusState.COMPLETED, state);\n  }\n\n","sourceOld":"  @Test\n  public void testAsyncRequests() throws Exception {\n\n    final String collection = \"testAsyncOperations\";\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    RequestStatusState state = new Create()\n        .setCollectionName(collection)\n        .setNumShards(1)\n        .setRouterName(\"implicit\")\n        .setShards(\"shard1\")\n        .setConfigName(\"conf1\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateCollection task did not complete!\", RequestStatusState.COMPLETED, state);\n\n    //Add a few documents to shard1\n    int numDocs = TestUtil.nextInt(random(), 10, 100);\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"_route_\", \"shard1\");\n      docs.add(doc);\n    }\n    client.add(collection, docs);\n    client.commit(collection);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(collection, query).getResults().getNumFound());\n\n    state = new CollectionAdminRequest.Reload()\n        .setCollectionName(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"ReloadCollection did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collection)\n        .setShardName(\"shard2\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    //Add a doc to shard2 to make sure shard2 was created properly\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", numDocs + 1);\n    doc.addField(\"_route_\", \"shard2\");\n    client.add(collection, doc);\n    client.commit(collection);\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard2\");\n    assertEquals(1, client.query(collection, query).getResults().getNumFound());\n\n    state = new CollectionAdminRequest.DeleteShard()\n        .setCollectionName(collection)\n        .setShardName(\"shard2\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = new CollectionAdminRequest.AddReplica()\n        .setCollectionName(collection)\n        .setShardName(\"shard1\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"AddReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    //cloudClient watch might take a couple of seconds to reflect it\n    Slice shard1 = client.getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    int count = 0;\n    while (shard1.getReplicas().size() != 2) {\n      if (count++ > 1000) {\n        fail(\"2nd Replica not reflecting in the cluster state\");\n      }\n      Thread.sleep(100);\n    }\n\n    state = new CollectionAdminRequest.CreateAlias()\n        .setAliasName(\"myalias\")\n        .setAliasedCollections(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(\"myalias\", query).getResults().getNumFound());\n\n    state = new CollectionAdminRequest.DeleteAlias()\n        .setAliasName(\"myalias\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    try {\n      client.query(\"myalias\", query);\n      fail(\"Alias should not exist\");\n    } catch (SolrException e) {\n      //expected\n    }\n\n    Replica replica = shard1.getReplicas().iterator().next();\n    for (String liveNode : client.getZkStateReader().getClusterState().getLiveNodes()) {\n      if (!replica.getNodeName().equals(liveNode)) {\n        state = new CollectionAdminRequest.MoveReplica(collection, replica.getName(), liveNode)\n            .processAndWait(client, MAX_TIMEOUT_SECONDS);\n        assertSame(\"MoveReplica did not complete\", RequestStatusState.COMPLETED, state);\n        break;\n      }\n    }\n\n    shard1 = client.getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    String replicaName = shard1.getReplicas().iterator().next().getName();\n    state = new CollectionAdminRequest.DeleteReplica()\n        .setCollectionName(collection)\n        .setShardName(\"shard1\")\n        .setReplica(replicaName)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = new CollectionAdminRequest.Delete()\n        .setCollectionName(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteCollection did not complete\", RequestStatusState.COMPLETED, state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIAsyncDistributedZkTest#testAsyncRequests().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIAsyncDistributedZkTest#testAsyncRequests().mjava","sourceNew":"  @Test\n  public void testAsyncRequests() throws Exception {\n\n    final String collection = \"testAsyncOperations\";\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    RequestStatusState state = CollectionAdminRequest.createCollection(collection,\"conf1\",1,1)\n        .setRouterName(\"implicit\")\n        .setShards(\"shard1\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateCollection task did not complete!\", RequestStatusState.COMPLETED, state);\n\n    //Add a few documents to shard1\n    int numDocs = TestUtil.nextInt(random(), 10, 100);\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"_route_\", \"shard1\");\n      docs.add(doc);\n    }\n    client.add(collection, docs);\n    client.commit(collection);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(collection, query).getResults().getNumFound());\n\n    state = CollectionAdminRequest.reloadCollection(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"ReloadCollection did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.createShard(collection,\"shard2\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    //Add a doc to shard2 to make sure shard2 was created properly\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", numDocs + 1);\n    doc.addField(\"_route_\", \"shard2\");\n    client.add(collection, doc);\n    client.commit(collection);\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard2\");\n    assertEquals(1, client.query(collection, query).getResults().getNumFound());\n\n    state = CollectionAdminRequest.deleteShard(collection,\"shard2\").processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n      .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"AddReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    //cloudClient watch might take a couple of seconds to reflect it\n    Slice shard1 = client.getZkStateReader().getClusterState().getCollection(collection).getSlice(\"shard1\");\n    int count = 0;\n    while (shard1.getReplicas().size() != 2) {\n      if (count++ > 1000) {\n        fail(\"2nd Replica not reflecting in the cluster state\");\n      }\n      Thread.sleep(100);\n    }\n\n    state = CollectionAdminRequest.createAlias(\"myalias\",collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(\"myalias\", query).getResults().getNumFound());\n\n    state = CollectionAdminRequest.deleteAlias(\"myalias\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    try {\n      client.query(\"myalias\", query);\n      fail(\"Alias should not exist\");\n    } catch (SolrException e) {\n      //expected\n    }\n\n    Replica replica = shard1.getReplicas().iterator().next();\n    for (String liveNode : client.getZkStateReader().getClusterState().getLiveNodes()) {\n      if (!replica.getNodeName().equals(liveNode)) {\n        state = new CollectionAdminRequest.MoveReplica(collection, replica.getName(), liveNode)\n            .processAndWait(client, MAX_TIMEOUT_SECONDS);\n        assertSame(\"MoveReplica did not complete\", RequestStatusState.COMPLETED, state);\n        break;\n      }\n    }\n\n    shard1 = client.getZkStateReader().getClusterState().getCollection(collection).getSlice(\"shard1\");\n    String replicaName = shard1.getReplicas().iterator().next().getName();\n    state = CollectionAdminRequest.deleteReplica(collection, \"shard1\", replicaName)\n      .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.deleteCollection(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteCollection did not complete\", RequestStatusState.COMPLETED, state);\n  }\n\n","sourceOld":"  @Test\n  public void testAsyncRequests() throws Exception {\n\n    final String collection = \"testAsyncOperations\";\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    RequestStatusState state = CollectionAdminRequest.createCollection(collection,\"conf1\",1,1)\n        .setRouterName(\"implicit\")\n        .setShards(\"shard1\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateCollection task did not complete!\", RequestStatusState.COMPLETED, state);\n\n    //Add a few documents to shard1\n    int numDocs = TestUtil.nextInt(random(), 10, 100);\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"_route_\", \"shard1\");\n      docs.add(doc);\n    }\n    client.add(collection, docs);\n    client.commit(collection);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(collection, query).getResults().getNumFound());\n\n    state = CollectionAdminRequest.reloadCollection(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"ReloadCollection did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.createShard(collection,\"shard2\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    //Add a doc to shard2 to make sure shard2 was created properly\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", numDocs + 1);\n    doc.addField(\"_route_\", \"shard2\");\n    client.add(collection, doc);\n    client.commit(collection);\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard2\");\n    assertEquals(1, client.query(collection, query).getResults().getNumFound());\n\n    state = CollectionAdminRequest.deleteShard(collection,\"shard2\").processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n      .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"AddReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    //cloudClient watch might take a couple of seconds to reflect it\n    Slice shard1 = client.getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    int count = 0;\n    while (shard1.getReplicas().size() != 2) {\n      if (count++ > 1000) {\n        fail(\"2nd Replica not reflecting in the cluster state\");\n      }\n      Thread.sleep(100);\n    }\n\n    state = CollectionAdminRequest.createAlias(\"myalias\",collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(\"myalias\", query).getResults().getNumFound());\n\n    state = CollectionAdminRequest.deleteAlias(\"myalias\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    try {\n      client.query(\"myalias\", query);\n      fail(\"Alias should not exist\");\n    } catch (SolrException e) {\n      //expected\n    }\n\n    Replica replica = shard1.getReplicas().iterator().next();\n    for (String liveNode : client.getZkStateReader().getClusterState().getLiveNodes()) {\n      if (!replica.getNodeName().equals(liveNode)) {\n        state = new CollectionAdminRequest.MoveReplica(collection, replica.getName(), liveNode)\n            .processAndWait(client, MAX_TIMEOUT_SECONDS);\n        assertSame(\"MoveReplica did not complete\", RequestStatusState.COMPLETED, state);\n        break;\n      }\n    }\n\n    shard1 = client.getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    String replicaName = shard1.getReplicas().iterator().next().getName();\n    state = CollectionAdminRequest.deleteReplica(collection, \"shard1\", replicaName)\n      .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.deleteCollection(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteCollection did not complete\", RequestStatusState.COMPLETED, state);\n  }\n\n","bugFix":["861a8940601b61a2fd5427f7187314d516ef1586","b54504c5305a6cc48f59c627c9c8dd727e2a8f0b"],"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIAsyncDistributedZkTest#testAsyncRequests().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIAsyncDistributedZkTest#testAsyncRequests().mjava","sourceNew":"  @Test\n  public void testAsyncRequests() throws Exception {\n\n    final String collection = \"testAsyncOperations\";\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    RequestStatusState state = CollectionAdminRequest.createCollection(collection,\"conf1\",1,1)\n        .setRouterName(\"implicit\")\n        .setShards(\"shard1\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateCollection task did not complete!\", RequestStatusState.COMPLETED, state);\n\n    //Add a few documents to shard1\n    int numDocs = TestUtil.nextInt(random(), 10, 100);\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"_route_\", \"shard1\");\n      docs.add(doc);\n    }\n    client.add(collection, docs);\n    client.commit(collection);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(collection, query).getResults().getNumFound());\n\n    state = CollectionAdminRequest.reloadCollection(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"ReloadCollection did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.createShard(collection,\"shard2\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    //Add a doc to shard2 to make sure shard2 was created properly\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", numDocs + 1);\n    doc.addField(\"_route_\", \"shard2\");\n    client.add(collection, doc);\n    client.commit(collection);\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard2\");\n    assertEquals(1, client.query(collection, query).getResults().getNumFound());\n\n    state = CollectionAdminRequest.deleteShard(collection,\"shard2\").processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n      .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"AddReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    //cloudClient watch might take a couple of seconds to reflect it\n    Slice shard1 = client.getZkStateReader().getClusterState().getCollection(collection).getSlice(\"shard1\");\n    int count = 0;\n    while (shard1.getReplicas().size() != 2) {\n      if (count++ > 1000) {\n        fail(\"2nd Replica not reflecting in the cluster state\");\n      }\n      Thread.sleep(100);\n    }\n\n    state = CollectionAdminRequest.createAlias(\"myalias\",collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(\"myalias\", query).getResults().getNumFound());\n\n    state = CollectionAdminRequest.deleteAlias(\"myalias\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    try {\n      client.query(\"myalias\", query);\n      fail(\"Alias should not exist\");\n    } catch (SolrException e) {\n      //expected\n    }\n\n    Replica replica = shard1.getReplicas().iterator().next();\n    for (String liveNode : client.getZkStateReader().getClusterState().getLiveNodes()) {\n      if (!replica.getNodeName().equals(liveNode)) {\n        state = new CollectionAdminRequest.MoveReplica(collection, replica.getName(), liveNode)\n            .processAndWait(client, MAX_TIMEOUT_SECONDS);\n        assertSame(\"MoveReplica did not complete\", RequestStatusState.COMPLETED, state);\n        break;\n      }\n    }\n\n    shard1 = client.getZkStateReader().getClusterState().getCollection(collection).getSlice(\"shard1\");\n    String replicaName = shard1.getReplicas().iterator().next().getName();\n    state = CollectionAdminRequest.deleteReplica(collection, \"shard1\", replicaName)\n      .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.deleteCollection(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteCollection did not complete\", RequestStatusState.COMPLETED, state);\n  }\n\n","sourceOld":"  @Test\n  public void testAsyncRequests() throws Exception {\n\n    final String collection = \"testAsyncOperations\";\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    RequestStatusState state = CollectionAdminRequest.createCollection(collection,\"conf1\",1,1)\n        .setRouterName(\"implicit\")\n        .setShards(\"shard1\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateCollection task did not complete!\", RequestStatusState.COMPLETED, state);\n\n    //Add a few documents to shard1\n    int numDocs = TestUtil.nextInt(random(), 10, 100);\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"_route_\", \"shard1\");\n      docs.add(doc);\n    }\n    client.add(collection, docs);\n    client.commit(collection);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(collection, query).getResults().getNumFound());\n\n    state = CollectionAdminRequest.reloadCollection(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"ReloadCollection did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.createShard(collection,\"shard2\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    //Add a doc to shard2 to make sure shard2 was created properly\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", numDocs + 1);\n    doc.addField(\"_route_\", \"shard2\");\n    client.add(collection, doc);\n    client.commit(collection);\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard2\");\n    assertEquals(1, client.query(collection, query).getResults().getNumFound());\n\n    state = CollectionAdminRequest.deleteShard(collection,\"shard2\").processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n      .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"AddReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    //cloudClient watch might take a couple of seconds to reflect it\n    Slice shard1 = client.getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    int count = 0;\n    while (shard1.getReplicas().size() != 2) {\n      if (count++ > 1000) {\n        fail(\"2nd Replica not reflecting in the cluster state\");\n      }\n      Thread.sleep(100);\n    }\n\n    state = CollectionAdminRequest.createAlias(\"myalias\",collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(\"myalias\", query).getResults().getNumFound());\n\n    state = CollectionAdminRequest.deleteAlias(\"myalias\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    try {\n      client.query(\"myalias\", query);\n      fail(\"Alias should not exist\");\n    } catch (SolrException e) {\n      //expected\n    }\n\n    Replica replica = shard1.getReplicas().iterator().next();\n    for (String liveNode : client.getZkStateReader().getClusterState().getLiveNodes()) {\n      if (!replica.getNodeName().equals(liveNode)) {\n        state = new CollectionAdminRequest.MoveReplica(collection, replica.getName(), liveNode)\n            .processAndWait(client, MAX_TIMEOUT_SECONDS);\n        assertSame(\"MoveReplica did not complete\", RequestStatusState.COMPLETED, state);\n        break;\n      }\n    }\n\n    shard1 = client.getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    String replicaName = shard1.getReplicas().iterator().next().getName();\n    state = CollectionAdminRequest.deleteReplica(collection, \"shard1\", replicaName)\n      .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.deleteCollection(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteCollection did not complete\", RequestStatusState.COMPLETED, state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIAsyncDistributedZkTest#testAsyncRequests().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIAsyncDistributedZkTest#testAsyncRequests().mjava","sourceNew":"  @Test\n  public void testAsyncRequests() throws Exception {\n\n    final String collection = \"testAsyncOperations\";\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    RequestStatusState state = CollectionAdminRequest.createCollection(collection,\"conf1\",1,1)\n        .setRouterName(\"implicit\")\n        .setShards(\"shard1\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateCollection task did not complete!\", RequestStatusState.COMPLETED, state);\n\n    //Add a few documents to shard1\n    int numDocs = TestUtil.nextInt(random(), 10, 100);\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"_route_\", \"shard1\");\n      docs.add(doc);\n    }\n    client.add(collection, docs);\n    client.commit(collection);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(collection, query).getResults().getNumFound());\n\n    state = CollectionAdminRequest.reloadCollection(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"ReloadCollection did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.createShard(collection,\"shard2\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    //Add a doc to shard2 to make sure shard2 was created properly\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", numDocs + 1);\n    doc.addField(\"_route_\", \"shard2\");\n    client.add(collection, doc);\n    client.commit(collection);\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard2\");\n    assertEquals(1, client.query(collection, query).getResults().getNumFound());\n\n    state = CollectionAdminRequest.deleteShard(collection,\"shard2\").processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n      .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"AddReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    //cloudClient watch might take a couple of seconds to reflect it\n    Slice shard1 = client.getZkStateReader().getClusterState().getCollection(collection).getSlice(\"shard1\");\n    int count = 0;\n    while (shard1.getReplicas().size() != 2) {\n      if (count++ > 1000) {\n        fail(\"2nd Replica not reflecting in the cluster state\");\n      }\n      Thread.sleep(100);\n    }\n\n    state = CollectionAdminRequest.createAlias(\"myalias\",collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(\"myalias\", query).getResults().getNumFound());\n\n    state = CollectionAdminRequest.deleteAlias(\"myalias\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    try {\n      client.query(\"myalias\", query);\n      fail(\"Alias should not exist\");\n    } catch (SolrException e) {\n      //expected\n    }\n\n    Replica replica = shard1.getReplicas().iterator().next();\n    for (String liveNode : client.getZkStateReader().getClusterState().getLiveNodes()) {\n      if (!replica.getNodeName().equals(liveNode)) {\n        state = new CollectionAdminRequest.MoveReplica(collection, replica.getName(), liveNode)\n            .processAndWait(client, MAX_TIMEOUT_SECONDS);\n        assertSame(\"MoveReplica did not complete\", RequestStatusState.COMPLETED, state);\n        break;\n      }\n    }\n\n    shard1 = client.getZkStateReader().getClusterState().getCollection(collection).getSlice(\"shard1\");\n    String replicaName = shard1.getReplicas().iterator().next().getName();\n    state = CollectionAdminRequest.deleteReplica(collection, \"shard1\", replicaName)\n      .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.deleteCollection(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteCollection did not complete\", RequestStatusState.COMPLETED, state);\n  }\n\n","sourceOld":"  @Test\n  public void testAsyncRequests() throws Exception {\n\n    final String collection = \"testAsyncOperations\";\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    RequestStatusState state = CollectionAdminRequest.createCollection(collection,\"conf1\",1,1)\n        .setRouterName(\"implicit\")\n        .setShards(\"shard1\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateCollection task did not complete!\", RequestStatusState.COMPLETED, state);\n\n    //Add a few documents to shard1\n    int numDocs = TestUtil.nextInt(random(), 10, 100);\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"_route_\", \"shard1\");\n      docs.add(doc);\n    }\n    client.add(collection, docs);\n    client.commit(collection);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(collection, query).getResults().getNumFound());\n\n    state = CollectionAdminRequest.reloadCollection(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"ReloadCollection did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.createShard(collection,\"shard2\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    //Add a doc to shard2 to make sure shard2 was created properly\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", numDocs + 1);\n    doc.addField(\"_route_\", \"shard2\");\n    client.add(collection, doc);\n    client.commit(collection);\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard2\");\n    assertEquals(1, client.query(collection, query).getResults().getNumFound());\n\n    state = CollectionAdminRequest.deleteShard(collection,\"shard2\").processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n      .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"AddReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    //cloudClient watch might take a couple of seconds to reflect it\n    Slice shard1 = client.getZkStateReader().getClusterState().getCollection(collection).getSlice(\"shard1\");\n    int count = 0;\n    while (shard1.getReplicas().size() != 2) {\n      if (count++ > 1000) {\n        fail(\"2nd Replica not reflecting in the cluster state\");\n      }\n      Thread.sleep(100);\n    }\n\n    state = CollectionAdminRequest.createAlias(\"myalias\",collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(\"myalias\", query).getResults().getNumFound());\n\n    state = CollectionAdminRequest.deleteAlias(\"myalias\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    try {\n      client.query(\"myalias\", query);\n      fail(\"Alias should not exist\");\n    } catch (SolrException e) {\n      //expected\n    }\n\n    Replica replica = shard1.getReplicas().iterator().next();\n    for (String liveNode : client.getZkStateReader().getClusterState().getLiveNodes()) {\n      if (!replica.getNodeName().equals(liveNode)) {\n        state = new CollectionAdminRequest.MoveReplica(collection, replica.getName(), liveNode)\n            .processAndWait(client, MAX_TIMEOUT_SECONDS);\n        assertSame(\"MoveReplica did not complete\", RequestStatusState.COMPLETED, state);\n        break;\n      }\n    }\n\n    shard1 = client.getZkStateReader().getClusterState().getCollection(collection).getSlice(\"shard1\");\n    String replicaName = shard1.getReplicas().iterator().next().getName();\n    state = CollectionAdminRequest.deleteReplica(collection, \"shard1\", replicaName)\n      .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.deleteCollection(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteCollection did not complete\", RequestStatusState.COMPLETED, state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIAsyncDistributedZkTest#testAsyncRequests().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIAsyncDistributedZkTest#testAsyncRequests().mjava","sourceNew":"  @Test\n  public void testAsyncRequests() throws Exception {\n\n    final String collection = \"testAsyncOperations\";\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    RequestStatusState state = CollectionAdminRequest.createCollection(collection,\"conf1\",1,1)\n        .setRouterName(\"implicit\")\n        .setShards(\"shard1\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateCollection task did not complete!\", RequestStatusState.COMPLETED, state);\n\n    //Add a few documents to shard1\n    int numDocs = TestUtil.nextInt(random(), 10, 100);\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"_route_\", \"shard1\");\n      docs.add(doc);\n    }\n    client.add(collection, docs);\n    client.commit(collection);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(collection, query).getResults().getNumFound());\n\n    state = CollectionAdminRequest.reloadCollection(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"ReloadCollection did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.createShard(collection,\"shard2\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    //Add a doc to shard2 to make sure shard2 was created properly\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", numDocs + 1);\n    doc.addField(\"_route_\", \"shard2\");\n    client.add(collection, doc);\n    client.commit(collection);\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard2\");\n    assertEquals(1, client.query(collection, query).getResults().getNumFound());\n\n    state = CollectionAdminRequest.deleteShard(collection,\"shard2\").processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n      .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"AddReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    //cloudClient watch might take a couple of seconds to reflect it\n    Slice shard1 = client.getZkStateReader().getClusterState().getCollection(collection).getSlice(\"shard1\");\n    int count = 0;\n    while (shard1.getReplicas().size() != 2) {\n      if (count++ > 1000) {\n        fail(\"2nd Replica not reflecting in the cluster state\");\n      }\n      Thread.sleep(100);\n    }\n\n    state = CollectionAdminRequest.createAlias(\"myalias\",collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(\"myalias\", query).getResults().getNumFound());\n\n    state = CollectionAdminRequest.deleteAlias(\"myalias\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    try {\n      client.query(\"myalias\", query);\n      fail(\"Alias should not exist\");\n    } catch (SolrException e) {\n      //expected\n    }\n\n    Replica replica = shard1.getReplicas().iterator().next();\n    for (String liveNode : client.getZkStateReader().getClusterState().getLiveNodes()) {\n      if (!replica.getNodeName().equals(liveNode)) {\n        state = new CollectionAdminRequest.MoveReplica(collection, replica.getName(), liveNode)\n            .processAndWait(client, MAX_TIMEOUT_SECONDS);\n        assertSame(\"MoveReplica did not complete\", RequestStatusState.COMPLETED, state);\n        break;\n      }\n    }\n\n    shard1 = client.getZkStateReader().getClusterState().getCollection(collection).getSlice(\"shard1\");\n    String replicaName = shard1.getReplicas().iterator().next().getName();\n    state = CollectionAdminRequest.deleteReplica(collection, \"shard1\", replicaName)\n      .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.deleteCollection(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteCollection did not complete\", RequestStatusState.COMPLETED, state);\n  }\n\n","sourceOld":"  @Test\n  public void testAsyncRequests() throws Exception {\n\n    final String collection = \"testAsyncOperations\";\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    RequestStatusState state = CollectionAdminRequest.createCollection(collection,\"conf1\",1,1)\n        .setRouterName(\"implicit\")\n        .setShards(\"shard1\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateCollection task did not complete!\", RequestStatusState.COMPLETED, state);\n\n    //Add a few documents to shard1\n    int numDocs = TestUtil.nextInt(random(), 10, 100);\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"_route_\", \"shard1\");\n      docs.add(doc);\n    }\n    client.add(collection, docs);\n    client.commit(collection);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(collection, query).getResults().getNumFound());\n\n    state = CollectionAdminRequest.reloadCollection(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"ReloadCollection did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.createShard(collection,\"shard2\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    //Add a doc to shard2 to make sure shard2 was created properly\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", numDocs + 1);\n    doc.addField(\"_route_\", \"shard2\");\n    client.add(collection, doc);\n    client.commit(collection);\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard2\");\n    assertEquals(1, client.query(collection, query).getResults().getNumFound());\n\n    state = CollectionAdminRequest.deleteShard(collection,\"shard2\").processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteShard did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.addReplicaToShard(collection, \"shard1\")\n      .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"AddReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    //cloudClient watch might take a couple of seconds to reflect it\n    Slice shard1 = client.getZkStateReader().getClusterState().getCollection(collection).getSlice(\"shard1\");\n    int count = 0;\n    while (shard1.getReplicas().size() != 2) {\n      if (count++ > 1000) {\n        fail(\"2nd Replica not reflecting in the cluster state\");\n      }\n      Thread.sleep(100);\n    }\n\n    state = CollectionAdminRequest.createAlias(\"myalias\",collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"CreateAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    query = new SolrQuery(\"*:*\");\n    query.set(\"shards\", \"shard1\");\n    assertEquals(numDocs, client.query(\"myalias\", query).getResults().getNumFound());\n\n    state = CollectionAdminRequest.deleteAlias(\"myalias\")\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteAlias did not complete\", RequestStatusState.COMPLETED, state);\n\n    try {\n      client.query(\"myalias\", query);\n      fail(\"Alias should not exist\");\n    } catch (SolrException e) {\n      //expected\n    }\n\n    Replica replica = shard1.getReplicas().iterator().next();\n    for (String liveNode : client.getZkStateReader().getClusterState().getLiveNodes()) {\n      if (!replica.getNodeName().equals(liveNode)) {\n        state = new CollectionAdminRequest.MoveReplica(collection, replica.getName(), liveNode)\n            .processAndWait(client, MAX_TIMEOUT_SECONDS);\n        assertSame(\"MoveReplica did not complete\", RequestStatusState.COMPLETED, state);\n        break;\n      }\n    }\n\n    shard1 = client.getZkStateReader().getClusterState().getCollection(collection).getSlice(\"shard1\");\n    String replicaName = shard1.getReplicas().iterator().next().getName();\n    state = CollectionAdminRequest.deleteReplica(collection, \"shard1\", replicaName)\n      .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteReplica did not complete\", RequestStatusState.COMPLETED, state);\n\n    state = CollectionAdminRequest.deleteCollection(collection)\n        .processAndWait(client, MAX_TIMEOUT_SECONDS);\n    assertSame(\"DeleteCollection did not complete\", RequestStatusState.COMPLETED, state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b54504c5305a6cc48f59c627c9c8dd727e2a8f0b":["d1dce8d293bb23a3bc9acca2dbdf8329ec48517d"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["d1dce8d293bb23a3bc9acca2dbdf8329ec48517d"],"b94236357aaa22b76c10629851fe4e376e0cea82":["344b0840364d990b29b97467bfcc766ff8325d11","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"3bbb741690cdafda7f1f7549c26351c912917a69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3088cdaa24ffe3ef44713ac9484114bd56eca2af":["3bbb741690cdafda7f1f7549c26351c912917a69"],"344b0840364d990b29b97467bfcc766ff8325d11":["3217321f3e1d7922898c6c633d17acfa840d6875"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["b54504c5305a6cc48f59c627c9c8dd727e2a8f0b"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["344b0840364d990b29b97467bfcc766ff8325d11"],"3217321f3e1d7922898c6c633d17acfa840d6875":["b54504c5305a6cc48f59c627c9c8dd727e2a8f0b","ac97ea104d893f16aab430d9904473bc1f233f3c"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["b54504c5305a6cc48f59c627c9c8dd727e2a8f0b","3217321f3e1d7922898c6c633d17acfa840d6875"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["e9017cf144952056066919f1ebc7897ff9bd71b1","344b0840364d990b29b97467bfcc766ff8325d11"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1dce8d293bb23a3bc9acca2dbdf8329ec48517d":["3088cdaa24ffe3ef44713ac9484114bd56eca2af","861a8940601b61a2fd5427f7187314d516ef1586"],"861a8940601b61a2fd5427f7187314d516ef1586":["3088cdaa24ffe3ef44713ac9484114bd56eca2af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b54504c5305a6cc48f59c627c9c8dd727e2a8f0b":["ac97ea104d893f16aab430d9904473bc1f233f3c","3217321f3e1d7922898c6c633d17acfa840d6875","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3bbb741690cdafda7f1f7549c26351c912917a69":["3088cdaa24ffe3ef44713ac9484114bd56eca2af"],"3088cdaa24ffe3ef44713ac9484114bd56eca2af":["d1dce8d293bb23a3bc9acca2dbdf8329ec48517d","861a8940601b61a2fd5427f7187314d516ef1586"],"344b0840364d990b29b97467bfcc766ff8325d11":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["3217321f3e1d7922898c6c633d17acfa840d6875"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"3217321f3e1d7922898c6c633d17acfa840d6875":["344b0840364d990b29b97467bfcc766ff8325d11","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bbb741690cdafda7f1f7549c26351c912917a69"],"d1dce8d293bb23a3bc9acca2dbdf8329ec48517d":["b54504c5305a6cc48f59c627c9c8dd727e2a8f0b","54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"861a8940601b61a2fd5427f7187314d516ef1586":["d1dce8d293bb23a3bc9acca2dbdf8329ec48517d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}