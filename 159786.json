{"path":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPScore#testSimpleWithScoring().mjava","commits":[{"id":"6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd","date":1438089844,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPScore#testSimpleWithScoring().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimpleWithScoring() throws Exception {\n    indexDataForScorring();\n\n    // Search for movie via subtitle\n    assertJQ(req(\"q\", \"{!join from=\" + toField + \" to=\" + idField + \" score=Max}title:random\", \"fl\", \"id\")\n        , \"/response=={'numFound':2,'start':0,'docs':[{'id':'1'},{'id':'4'}]}\");\n    //dump(req(\"q\",\"{!scorejoin from=\"+toField+\" to=\"+idField+\" score=Max}title:random\", \"fl\",\"id,score\", \"debug\", \"true\"));\n    /*\n    Query joinQuery =\n        JoinUtil.createJoinQuery(toField, false, idField, new TermQuery(new Term(\"title\", \"random\")), indexSearcher, ScoreMode.Max);\n    TopDocs result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits);\n    assertEquals(0, result.scoreDocs[0].doc);\n    assertEquals(3, result.scoreDocs[1].doc);*/\n\n\n    // Score mode max.\n    //dump(req(\"q\",\"{!scorejoin from=\"+toField+\" to=\"+idField+\" score=Max}title:movie\", \"fl\",\"id,score\", \"debug\", \"true\"));\n\n    // dump(req(\"q\",\"title:movie\", \"fl\",\"id,score\", \"debug\", \"true\"));\n    assertJQ(req(\"q\", \"{!join from=\" + toField + \" to=\" + idField + \" score=Max}title:movie\", \"fl\", \"id\")\n        , \"/response=={'numFound':2,'start':0,'docs':[{'id':'4'},{'id':'1'}]}\");\n    \n    /*joinQuery = JoinUtil.createJoinQuery(toField, false, idField, new TermQuery(new Term(\"title\", \"movie\")), indexSearcher, ScoreMode.Max);\n    result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits);\n    assertEquals(3, result.scoreDocs[0].doc);\n    assertEquals(0, result.scoreDocs[1].doc);*/\n\n    // Score mode total\n    assertJQ(req(\"q\", \"{!join from=\" + toField + \" to=\" + idField + \" score=Total}title:movie\", \"fl\", \"id\")\n        , \"/response=={'numFound':2,'start':0,'docs':[{'id':'1'},{'id':'4'}]}\");\n  /*  joinQuery = JoinUtil.createJoinQuery(toField, false, idField, new TermQuery(new Term(\"title\", \"movie\")), indexSearcher, ScoreMode.Total);\n    result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits);\n    assertEquals(0, result.scoreDocs[0].doc);\n    assertEquals(3, result.scoreDocs[1].doc);\n*/\n    //Score mode avg\n    assertJQ(req(\"q\", \"{!join from=\" + toField + \" to=\" + idField + \" score=Avg}title:movie\", \"fl\", \"id\")\n        , \"/response=={'numFound':2,'start':0,'docs':[{'id':'4'},{'id':'1'}]}\");\n    \n  /*  joinQuery = JoinUtil.createJoinQuery(toField, false, idField, new TermQuery(new Term(\"title\", \"movie\")), indexSearcher, ScoreMode.Avg);\n    result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits);\n    assertEquals(3, result.scoreDocs[0].doc);\n    assertEquals(0, result.scoreDocs[1].doc);*/\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"640ded7811e1b7d29236a5e2934ec3cd266a8199","date":1588973147,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPScore#testSimpleWithScoring().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/TestScoreJoinQPScore#testSimpleWithScoring().mjava","sourceNew":"  public void testSimpleWithScoring() throws Exception {\n    indexDataForScorring();\n\n    // Search for movie via subtitle\n    assertJQ(req(\"q\", \"{!join from=\" + toField + \" to=\" + idField + \" score=Max}title:random\", \"fl\", \"id\")\n        , \"/response=={'numFound':2,'start':0,'numFoundExact':true,'docs':[{'id':'1'},{'id':'4'}]}\");\n    //dump(req(\"q\",\"{!scorejoin from=\"+toField+\" to=\"+idField+\" score=Max}title:random\", \"fl\",\"id,score\", \"debug\", \"true\"));\n    /*\n    Query joinQuery =\n        JoinUtil.createJoinQuery(toField, false, idField, new TermQuery(new Term(\"title\", \"random\")), indexSearcher, ScoreMode.Max);\n    TopDocs result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits);\n    assertEquals(0, result.scoreDocs[0].doc);\n    assertEquals(3, result.scoreDocs[1].doc);*/\n\n\n    // Score mode max.\n    //dump(req(\"q\",\"{!scorejoin from=\"+toField+\" to=\"+idField+\" score=Max}title:movie\", \"fl\",\"id,score\", \"debug\", \"true\"));\n\n    // dump(req(\"q\",\"title:movie\", \"fl\",\"id,score\", \"debug\", \"true\"));\n    assertJQ(req(\"q\", \"{!join from=\" + toField + \" to=\" + idField + \" score=Max}title:movie\", \"fl\", \"id\")\n        , \"/response=={'numFound':2,'start':0,'numFoundExact':true,'docs':[{'id':'4'},{'id':'1'}]}\");\n    \n    /*joinQuery = JoinUtil.createJoinQuery(toField, false, idField, new TermQuery(new Term(\"title\", \"movie\")), indexSearcher, ScoreMode.Max);\n    result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits);\n    assertEquals(3, result.scoreDocs[0].doc);\n    assertEquals(0, result.scoreDocs[1].doc);*/\n\n    // Score mode total\n    assertJQ(req(\"q\", \"{!join from=\" + toField + \" to=\" + idField + \" score=Total}title:movie\", \"fl\", \"id\")\n        , \"/response=={'numFound':2,'start':0,'numFoundExact':true,'docs':[{'id':'1'},{'id':'4'}]}\");\n  /*  joinQuery = JoinUtil.createJoinQuery(toField, false, idField, new TermQuery(new Term(\"title\", \"movie\")), indexSearcher, ScoreMode.Total);\n    result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits);\n    assertEquals(0, result.scoreDocs[0].doc);\n    assertEquals(3, result.scoreDocs[1].doc);\n*/\n    //Score mode avg\n    assertJQ(req(\"q\", \"{!join from=\" + toField + \" to=\" + idField + \" score=Avg}title:movie\", \"fl\", \"id\")\n        , \"/response=={'numFound':2,'start':0,'numFoundExact':true,'docs':[{'id':'4'},{'id':'1'}]}\");\n    \n  /*  joinQuery = JoinUtil.createJoinQuery(toField, false, idField, new TermQuery(new Term(\"title\", \"movie\")), indexSearcher, ScoreMode.Avg);\n    result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits);\n    assertEquals(3, result.scoreDocs[0].doc);\n    assertEquals(0, result.scoreDocs[1].doc);*/\n\n  }\n\n","sourceOld":"  public void testSimpleWithScoring() throws Exception {\n    indexDataForScorring();\n\n    // Search for movie via subtitle\n    assertJQ(req(\"q\", \"{!join from=\" + toField + \" to=\" + idField + \" score=Max}title:random\", \"fl\", \"id\")\n        , \"/response=={'numFound':2,'start':0,'docs':[{'id':'1'},{'id':'4'}]}\");\n    //dump(req(\"q\",\"{!scorejoin from=\"+toField+\" to=\"+idField+\" score=Max}title:random\", \"fl\",\"id,score\", \"debug\", \"true\"));\n    /*\n    Query joinQuery =\n        JoinUtil.createJoinQuery(toField, false, idField, new TermQuery(new Term(\"title\", \"random\")), indexSearcher, ScoreMode.Max);\n    TopDocs result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits);\n    assertEquals(0, result.scoreDocs[0].doc);\n    assertEquals(3, result.scoreDocs[1].doc);*/\n\n\n    // Score mode max.\n    //dump(req(\"q\",\"{!scorejoin from=\"+toField+\" to=\"+idField+\" score=Max}title:movie\", \"fl\",\"id,score\", \"debug\", \"true\"));\n\n    // dump(req(\"q\",\"title:movie\", \"fl\",\"id,score\", \"debug\", \"true\"));\n    assertJQ(req(\"q\", \"{!join from=\" + toField + \" to=\" + idField + \" score=Max}title:movie\", \"fl\", \"id\")\n        , \"/response=={'numFound':2,'start':0,'docs':[{'id':'4'},{'id':'1'}]}\");\n    \n    /*joinQuery = JoinUtil.createJoinQuery(toField, false, idField, new TermQuery(new Term(\"title\", \"movie\")), indexSearcher, ScoreMode.Max);\n    result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits);\n    assertEquals(3, result.scoreDocs[0].doc);\n    assertEquals(0, result.scoreDocs[1].doc);*/\n\n    // Score mode total\n    assertJQ(req(\"q\", \"{!join from=\" + toField + \" to=\" + idField + \" score=Total}title:movie\", \"fl\", \"id\")\n        , \"/response=={'numFound':2,'start':0,'docs':[{'id':'1'},{'id':'4'}]}\");\n  /*  joinQuery = JoinUtil.createJoinQuery(toField, false, idField, new TermQuery(new Term(\"title\", \"movie\")), indexSearcher, ScoreMode.Total);\n    result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits);\n    assertEquals(0, result.scoreDocs[0].doc);\n    assertEquals(3, result.scoreDocs[1].doc);\n*/\n    //Score mode avg\n    assertJQ(req(\"q\", \"{!join from=\" + toField + \" to=\" + idField + \" score=Avg}title:movie\", \"fl\", \"id\")\n        , \"/response=={'numFound':2,'start':0,'docs':[{'id':'4'},{'id':'1'}]}\");\n    \n  /*  joinQuery = JoinUtil.createJoinQuery(toField, false, idField, new TermQuery(new Term(\"title\", \"movie\")), indexSearcher, ScoreMode.Avg);\n    result = indexSearcher.search(joinQuery, 10);\n    assertEquals(2, result.totalHits);\n    assertEquals(3, result.scoreDocs[0].doc);\n    assertEquals(0, result.scoreDocs[1].doc);*/\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"640ded7811e1b7d29236a5e2934ec3cd266a8199":["6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd"],"6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["640ded7811e1b7d29236a5e2934ec3cd266a8199"]},"commit2Childs":{"640ded7811e1b7d29236a5e2934ec3cd266a8199":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd":["640ded7811e1b7d29236a5e2934ec3cd266a8199"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}