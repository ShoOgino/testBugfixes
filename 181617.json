{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testBalanceShardUnique().mjava","commits":[{"id":"30f9ea0e61a3df8b29a67bce1ea06c83201ad871","date":1457138084,"type":1,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testBalanceShardUnique().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testBalanceShardUnique().mjava","sourceNew":"  private void testBalanceShardUnique() throws IOException,\n      SolrServerException, KeeperException, InterruptedException {\n    CollectionAdminResponse response = new CollectionAdminRequest.BalanceShardUnique()\n            .setCollection(DEFAULT_COLLECTION)\n            .setPropertyName(\"preferredLeader\").process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    verifyUniqueAcrossCollection(cloudClient, DEFAULT_COLLECTION, \"property.preferredleader\");    \n  }\n\n","sourceOld":"  private void testBalanceShardUnique() throws IOException,\n      SolrServerException, KeeperException, InterruptedException {\n    CollectionAdminResponse response = new CollectionAdminRequest.BalanceShardUnique()\n            .setCollection(DEFAULT_COLLECTION)\n            .setPropertyName(\"preferredLeader\").process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    verifyUniqueAcrossCollection(cloudClient, DEFAULT_COLLECTION, \"property.preferredleader\");    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"922ddd897402a6df25c766ea8300443be5e82b3d","date":1457157606,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testBalanceShardUnique().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testBalanceShardUnique().mjava","sourceNew":"  private void testBalanceShardUnique() throws IOException,\n      SolrServerException, KeeperException, InterruptedException {\n    CollectionAdminResponse response = new CollectionAdminRequest.BalanceShardUnique()\n            .setCollection(DEFAULT_COLLECTION)\n            .setPropertyName(\"preferredLeader\").process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    verifyUniqueAcrossCollection(cloudClient, DEFAULT_COLLECTION, \"property.preferredleader\");    \n  }\n\n","sourceOld":"  private void testBalanceShardUnique() throws IOException,\n      SolrServerException, KeeperException, InterruptedException {\n    CollectionAdminResponse response = new CollectionAdminRequest.BalanceShardUnique()\n            .setCollection(DEFAULT_COLLECTION)\n            .setPropertyName(\"preferredLeader\").process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    verifyUniqueAcrossCollection(cloudClient, DEFAULT_COLLECTION, \"property.preferredleader\");    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"636a04bc82e662bf141a55f1d10f52e1c76c727b","date":1483014160,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testBalanceShardUnique().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testBalanceShardUnique().mjava","sourceNew":"  @Test\n  public void testBalanceShardUnique() throws IOException,\n      SolrServerException, KeeperException, InterruptedException {\n\n    final String collection = \"balancedProperties\";\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 2)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminResponse response = CollectionAdminRequest.balanceReplicaProperty(collection, \"preferredLeader\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expecting 'preferredleader' property to be balanced across all shards\", collection, (n, c) -> {\n      for (Slice slice : c) {\n        int count = 0;\n        for (Replica replica : slice) {\n          if (\"true\".equals(replica.getStr(\"property.preferredleader\")))\n            count += 1;\n        }\n        if (count != 1)\n          return false;\n      }\n      return true;\n    });\n\n  }\n\n","sourceOld":"  private void testBalanceShardUnique() throws IOException,\n      SolrServerException, KeeperException, InterruptedException {\n    CollectionAdminResponse response = new CollectionAdminRequest.BalanceShardUnique()\n            .setCollection(DEFAULT_COLLECTION)\n            .setPropertyName(\"preferredLeader\").process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    verifyUniqueAcrossCollection(cloudClient, DEFAULT_COLLECTION, \"property.preferredleader\");    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testBalanceShardUnique().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testBalanceShardUnique().mjava","sourceNew":"  @Test\n  public void testBalanceShardUnique() throws IOException,\n      SolrServerException, KeeperException, InterruptedException {\n\n    final String collection = \"balancedProperties\";\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 2)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminResponse response = CollectionAdminRequest.balanceReplicaProperty(collection, \"preferredLeader\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expecting 'preferredleader' property to be balanced across all shards\", collection, (n, c) -> {\n      for (Slice slice : c) {\n        int count = 0;\n        for (Replica replica : slice) {\n          if (\"true\".equals(replica.getStr(\"property.preferredleader\")))\n            count += 1;\n        }\n        if (count != 1)\n          return false;\n      }\n      return true;\n    });\n\n  }\n\n","sourceOld":"  private void testBalanceShardUnique() throws IOException,\n      SolrServerException, KeeperException, InterruptedException {\n    CollectionAdminResponse response = new CollectionAdminRequest.BalanceShardUnique()\n            .setCollection(DEFAULT_COLLECTION)\n            .setPropertyName(\"preferredLeader\").process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    verifyUniqueAcrossCollection(cloudClient, DEFAULT_COLLECTION, \"property.preferredleader\");    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"636a7098b1923741f1d9887fad7cc27074c26d1f","date":1502268482,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testBalanceShardUnique().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testBalanceShardUnique().mjava","sourceNew":"  @Test\n  public void testBalanceShardUnique() throws IOException,\n      SolrServerException, KeeperException, InterruptedException {\n\n    final String collection = \"balancedProperties\";\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 2)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminResponse response = CollectionAdminRequest.balanceReplicaProperty(collection, \"preferredLeader\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expecting 'preferredleader' property to be balanced across all shards\", collection, (n, c) -> {\n      for (Slice slice : c) {\n        int count = 0;\n        for (Replica replica : slice) {\n          if (\"true\".equals(replica.getProperty(\"preferredleader\")))\n            count += 1;\n        }\n        if (count != 1)\n          return false;\n      }\n      return true;\n    });\n\n  }\n\n","sourceOld":"  @Test\n  public void testBalanceShardUnique() throws IOException,\n      SolrServerException, KeeperException, InterruptedException {\n\n    final String collection = \"balancedProperties\";\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 2)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminResponse response = CollectionAdminRequest.balanceReplicaProperty(collection, \"preferredLeader\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expecting 'preferredleader' property to be balanced across all shards\", collection, (n, c) -> {\n      for (Slice slice : c) {\n        int count = 0;\n        for (Replica replica : slice) {\n          if (\"true\".equals(replica.getStr(\"property.preferredleader\")))\n            count += 1;\n        }\n        if (count != 1)\n          return false;\n      }\n      return true;\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testBalanceShardUnique().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testBalanceShardUnique().mjava","sourceNew":"  @Test\n  public void testBalanceShardUnique() throws IOException,\n      SolrServerException, KeeperException, InterruptedException {\n\n    final String collection = \"balancedProperties\";\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 2)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminResponse response = CollectionAdminRequest.balanceReplicaProperty(collection, \"preferredLeader\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expecting 'preferredleader' property to be balanced across all shards\", collection, (n, c) -> {\n      for (Slice slice : c) {\n        int count = 0;\n        for (Replica replica : slice) {\n          if (\"true\".equals(replica.getProperty(\"preferredleader\")))\n            count += 1;\n        }\n        if (count != 1)\n          return false;\n      }\n      return true;\n    });\n\n  }\n\n","sourceOld":"  @Test\n  public void testBalanceShardUnique() throws IOException,\n      SolrServerException, KeeperException, InterruptedException {\n\n    final String collection = \"balancedProperties\";\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 2)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminResponse response = CollectionAdminRequest.balanceReplicaProperty(collection, \"preferredLeader\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expecting 'preferredleader' property to be balanced across all shards\", collection, (n, c) -> {\n      for (Slice slice : c) {\n        int count = 0;\n        for (Replica replica : slice) {\n          if (\"true\".equals(replica.getStr(\"property.preferredleader\")))\n            count += 1;\n        }\n        if (count != 1)\n          return false;\n      }\n      return true;\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testBalanceShardUnique().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testBalanceShardUnique().mjava","sourceNew":"  @Test\n  public void testBalanceShardUnique() throws IOException,\n      SolrServerException, KeeperException, InterruptedException {\n\n    final String collection = \"balancedProperties\";\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 2)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminResponse response = CollectionAdminRequest.balanceReplicaProperty(collection, \"preferredLeader\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expecting 'preferredleader' property to be balanced across all shards\", collection, (n, c) -> {\n      for (Slice slice : c) {\n        int count = 0;\n        for (Replica replica : slice) {\n          if (\"true\".equals(replica.getProperty(\"preferredleader\")))\n            count += 1;\n        }\n        if (count != 1)\n          return false;\n      }\n      return true;\n    });\n\n  }\n\n","sourceOld":"  @Test\n  public void testBalanceShardUnique() throws IOException,\n      SolrServerException, KeeperException, InterruptedException {\n\n    final String collection = \"balancedProperties\";\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 2)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminResponse response = CollectionAdminRequest.balanceReplicaProperty(collection, \"preferredLeader\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expecting 'preferredleader' property to be balanced across all shards\", collection, (n, c) -> {\n      for (Slice slice : c) {\n        int count = 0;\n        for (Replica replica : slice) {\n          if (\"true\".equals(replica.getStr(\"property.preferredleader\")))\n            count += 1;\n        }\n        if (count != 1)\n          return false;\n      }\n      return true;\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testBalanceShardUnique().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testBalanceShardUnique().mjava","sourceNew":"  @Test\n  public void testBalanceShardUnique() throws IOException,\n      SolrServerException, KeeperException, InterruptedException {\n\n    final String collection = \"balancedProperties\";\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 2)\n        .process(cluster.getSolrClient());\n    \n   cluster.waitForActiveCollection(collection, 2, 4);\n\n    CollectionAdminResponse response = CollectionAdminRequest.balanceReplicaProperty(collection, \"preferredLeader\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expecting 'preferredleader' property to be balanced across all shards\", collection, (n, c) -> {\n      for (Slice slice : c) {\n        int count = 0;\n        for (Replica replica : slice) {\n          if (\"true\".equals(replica.getProperty(\"preferredleader\")))\n            count += 1;\n        }\n        if (count != 1)\n          return false;\n      }\n      return true;\n    });\n\n  }\n\n","sourceOld":"  @Test\n  public void testBalanceShardUnique() throws IOException,\n      SolrServerException, KeeperException, InterruptedException {\n\n    final String collection = \"balancedProperties\";\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 2)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminResponse response = CollectionAdminRequest.balanceReplicaProperty(collection, \"preferredLeader\")\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expecting 'preferredleader' property to be balanced across all shards\", collection, (n, c) -> {\n      for (Slice slice : c) {\n        int count = 0;\n        for (Replica replica : slice) {\n          if (\"true\".equals(replica.getProperty(\"preferredleader\")))\n            count += 1;\n        }\n        if (count != 1)\n          return false;\n      }\n      return true;\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58884af1f68e9d61c217c753fbd6266d86a63b14":["636a04bc82e662bf141a55f1d10f52e1c76c727b","636a7098b1923741f1d9887fad7cc27074c26d1f"],"636a04bc82e662bf141a55f1d10f52e1c76c727b":["922ddd897402a6df25c766ea8300443be5e82b3d"],"636a7098b1923741f1d9887fad7cc27074c26d1f":["636a04bc82e662bf141a55f1d10f52e1c76c727b"],"922ddd897402a6df25c766ea8300443be5e82b3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","30f9ea0e61a3df8b29a67bce1ea06c83201ad871"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["636a7098b1923741f1d9887fad7cc27074c26d1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30f9ea0e61a3df8b29a67bce1ea06c83201ad871":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["636a04bc82e662bf141a55f1d10f52e1c76c727b","636a7098b1923741f1d9887fad7cc27074c26d1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["922ddd897402a6df25c766ea8300443be5e82b3d","636a04bc82e662bf141a55f1d10f52e1c76c727b"]},"commit2Childs":{"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"636a04bc82e662bf141a55f1d10f52e1c76c727b":["58884af1f68e9d61c217c753fbd6266d86a63b14","636a7098b1923741f1d9887fad7cc27074c26d1f","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"636a7098b1923741f1d9887fad7cc27074c26d1f":["58884af1f68e9d61c217c753fbd6266d86a63b14","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"922ddd897402a6df25c766ea8300443be5e82b3d":["636a04bc82e662bf141a55f1d10f52e1c76c727b","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["922ddd897402a6df25c766ea8300443be5e82b3d","30f9ea0e61a3df8b29a67bce1ea06c83201ad871"],"30f9ea0e61a3df8b29a67bce1ea06c83201ad871":["922ddd897402a6df25c766ea8300443be5e82b3d"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}