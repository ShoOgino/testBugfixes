{"path":"solr/core/src/java/org/apache/solr/search/Sorting#getStringSortField(String,boolean,boolean,boolean).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Sorting#getStringSortField(String,boolean,boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/Sorting#getStringSortField(String,boolean,boolean,boolean).mjava","sourceNew":"  /** Returns a {@link SortField} for a string field.\n   *  If nullLast and nullFirst are both false, then default lucene string sorting is used where\n   *  null strings sort first in an ascending sort, and last in a descending sort.\n   *\n   * @param fieldName   the name of the field to sort on\n   * @param reverse     true for a reverse (desc) sort\n   * @param nullLast    true if null should come last, regardless of sort order\n   * @param nullFirst   true if null should come first, regardless of sort order\n   * @return SortField\n   */\n  public static SortField getStringSortField(String fieldName, boolean reverse, boolean nullLast, boolean nullFirst) {\n    if (nullLast) {\n      if (!reverse) return new SortField(fieldName, nullStringLastComparatorSource);\n      else return new SortField(fieldName, SortField.Type.STRING, true);\n    } else if (nullFirst) {\n      if (reverse) return new SortField(fieldName, nullStringLastComparatorSource, true);\n      else return new SortField(fieldName, SortField.Type.STRING, false);\n    } else {\n      return new SortField(fieldName, SortField.Type.STRING, reverse);\n    }\n  }\n\n","sourceOld":"  /** Returns a {@link SortField} for a string field.\n   *  If nullLast and nullFirst are both false, then default lucene string sorting is used where\n   *  null strings sort first in an ascending sort, and last in a descending sort.\n   *\n   * @param fieldName   the name of the field to sort on\n   * @param reverse     true for a reverse (desc) sort\n   * @param nullLast    true if null should come last, regardless of sort order\n   * @param nullFirst   true if null should come first, regardless of sort order\n   * @return SortField\n   */\n  public static SortField getStringSortField(String fieldName, boolean reverse, boolean nullLast, boolean nullFirst) {\n    if (nullLast) {\n      if (!reverse) return new SortField(fieldName, nullStringLastComparatorSource);\n      else return new SortField(fieldName, SortField.Type.STRING, true);\n    } else if (nullFirst) {\n      if (reverse) return new SortField(fieldName, nullStringLastComparatorSource, true);\n      else return new SortField(fieldName, SortField.Type.STRING, false);\n    } else {\n      return new SortField(fieldName, SortField.Type.STRING, reverse);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Sorting#getStringSortField(String,boolean,boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/Sorting#getStringSortField(String,boolean,boolean,boolean).mjava","sourceNew":"  /** Returns a {@link SortField} for a string field.\n   *  If nullLast and nullFirst are both false, then default lucene string sorting is used where\n   *  null strings sort first in an ascending sort, and last in a descending sort.\n   *\n   * @param fieldName   the name of the field to sort on\n   * @param reverse     true for a reverse (desc) sort\n   * @param nullLast    true if null should come last, regardless of sort order\n   * @param nullFirst   true if null should come first, regardless of sort order\n   * @return SortField\n   */\n  public static SortField getStringSortField(String fieldName, boolean reverse, boolean nullLast, boolean nullFirst) {\n    if (nullLast) {\n      if (!reverse) return new SortField(fieldName, nullStringLastComparatorSource);\n      else return new SortField(fieldName, SortField.Type.STRING, true);\n    } else if (nullFirst) {\n      if (reverse) return new SortField(fieldName, nullStringLastComparatorSource, true);\n      else return new SortField(fieldName, SortField.Type.STRING, false);\n    } else {\n      return new SortField(fieldName, SortField.Type.STRING, reverse);\n    }\n  }\n\n","sourceOld":"  /** Returns a {@link SortField} for a string field.\n   *  If nullLast and nullFirst are both false, then default lucene string sorting is used where\n   *  null strings sort first in an ascending sort, and last in a descending sort.\n   *\n   * @param fieldName   the name of the field to sort on\n   * @param reverse     true for a reverse (desc) sort\n   * @param nullLast    true if null should come last, regardless of sort order\n   * @param nullFirst   true if null should come first, regardless of sort order\n   * @return SortField\n   */\n  public static SortField getStringSortField(String fieldName, boolean reverse, boolean nullLast, boolean nullFirst) {\n    if (nullLast) {\n      if (!reverse) return new SortField(fieldName, nullStringLastComparatorSource);\n      else return new SortField(fieldName, SortField.Type.STRING, true);\n    } else if (nullFirst) {\n      if (reverse) return new SortField(fieldName, nullStringLastComparatorSource, true);\n      else return new SortField(fieldName, SortField.Type.STRING, false);\n    } else {\n      return new SortField(fieldName, SortField.Type.STRING, reverse);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Sorting#getStringSortField(String,boolean,boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/Sorting#getStringSortField(String,boolean,boolean,boolean).mjava","sourceNew":"  /** Returns a {@link SortField} for a string field.\n   *  If nullLast and nullFirst are both false, then default lucene string sorting is used where\n   *  null strings sort first in an ascending sort, and last in a descending sort.\n   *\n   * @param fieldName   the name of the field to sort on\n   * @param reverse     true for a reverse (desc) sort\n   * @param nullLast    true if null should come last, regardless of sort order\n   * @param nullFirst   true if null should come first, regardless of sort order\n   * @return SortField\n   */\n  public static SortField getStringSortField(String fieldName, boolean reverse, boolean nullLast, boolean nullFirst) {\n    if (nullLast) {\n      if (!reverse) return new SortField(fieldName, nullStringLastComparatorSource);\n      else return new SortField(fieldName, SortField.Type.STRING, true);\n    } else if (nullFirst) {\n      if (reverse) return new SortField(fieldName, nullStringLastComparatorSource, true);\n      else return new SortField(fieldName, SortField.Type.STRING, false);\n    } else {\n      return new SortField(fieldName, SortField.Type.STRING, reverse);\n    }\n  }\n\n","sourceOld":"  /** Returns a {@link SortField} for a string field.\n   *  If nullLast and nullFirst are both false, then default lucene string sorting is used where\n   *  null strings sort first in an ascending sort, and last in a descending sort.\n   *\n   * @param fieldName   the name of the field to sort on\n   * @param reverse     true for a reverse (desc) sort\n   * @param nullLast    true if null should come last, regardless of sort order\n   * @param nullFirst   true if null should come first, regardless of sort order\n   * @return SortField\n   */\n  public static SortField getStringSortField(String fieldName, boolean reverse, boolean nullLast, boolean nullFirst) {\n    if (nullLast) {\n      if (!reverse) return new SortField(fieldName, nullStringLastComparatorSource);\n      else return new SortField(fieldName, SortField.Type.STRING, true);\n    } else if (nullFirst) {\n      if (reverse) return new SortField(fieldName, nullStringLastComparatorSource, true);\n      else return new SortField(fieldName, SortField.Type.STRING, false);\n    } else {\n      return new SortField(fieldName, SortField.Type.STRING, reverse);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea252e5e61c9d1ca6595deb9168914574963e5c3","date":1389815046,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Sorting#getStringSortField(String,boolean,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Sorting#getStringSortField(String,boolean,boolean,boolean).mjava","sourceNew":"  /** Returns a {@link SortField} for a string field.\n   *  If nullLast and nullFirst are both false, then default lucene string sorting is used where\n   *  null strings sort first in an ascending sort, and last in a descending sort.\n   *\n   * @param fieldName   the name of the field to sort on\n   * @param reverse     true for a reverse (desc) sort\n   * @param nullLast    true if null should come last, regardless of sort order\n   * @param nullFirst   true if null should come first, regardless of sort order\n   * @return SortField\n   */\n  public static SortField getStringSortField(String fieldName, boolean reverse, boolean nullLast, boolean nullFirst) {\n    if (nullFirst && nullLast) {\n      throw new IllegalArgumentException(\"Cannot specify missing values as both first and last\");\n    }\n\n    SortField sortField = new SortField(fieldName, SortField.Type.STRING, reverse);\n\n    // 4 cases:\n    // missingFirst / forward: default lucene behavior\n    // missingFirst / reverse: set sortMissingLast\n    // missingLast  / forward: set sortMissingLast\n    // missingLast  / reverse: default lucene behavior\n    \n    if (nullFirst && reverse) {\n      sortField.setMissingValue(SortField.STRING_LAST);\n    } else if (nullLast && !reverse) {\n      sortField.setMissingValue(SortField.STRING_LAST);\n    }\n\n    return sortField;\n  }\n\n","sourceOld":"  /** Returns a {@link SortField} for a string field.\n   *  If nullLast and nullFirst are both false, then default lucene string sorting is used where\n   *  null strings sort first in an ascending sort, and last in a descending sort.\n   *\n   * @param fieldName   the name of the field to sort on\n   * @param reverse     true for a reverse (desc) sort\n   * @param nullLast    true if null should come last, regardless of sort order\n   * @param nullFirst   true if null should come first, regardless of sort order\n   * @return SortField\n   */\n  public static SortField getStringSortField(String fieldName, boolean reverse, boolean nullLast, boolean nullFirst) {\n    if (nullLast) {\n      if (!reverse) return new SortField(fieldName, nullStringLastComparatorSource);\n      else return new SortField(fieldName, SortField.Type.STRING, true);\n    } else if (nullFirst) {\n      if (reverse) return new SortField(fieldName, nullStringLastComparatorSource, true);\n      else return new SortField(fieldName, SortField.Type.STRING, false);\n    } else {\n      return new SortField(fieldName, SortField.Type.STRING, reverse);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27ab7b234eab0cbc020836989b96ed430e1065bb","date":1389894025,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Sorting#getStringSortField(String,boolean,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Sorting#getStringSortField(String,boolean,boolean,boolean).mjava","sourceNew":"  /** Returns a {@link SortField} for a string field.\n   *  If nullLast and nullFirst are both false, then default lucene string sorting is used where\n   *  null strings sort first in an ascending sort, and last in a descending sort.\n   *\n   * @param fieldName   the name of the field to sort on\n   * @param reverse     true for a reverse (desc) sort\n   * @param nullLast    true if null should come last, regardless of sort order\n   * @param nullFirst   true if null should come first, regardless of sort order\n   * @return SortField\n   */\n  public static SortField getStringSortField(String fieldName, boolean reverse, boolean nullLast, boolean nullFirst) {\n    if (nullFirst && nullLast) {\n      throw new IllegalArgumentException(\"Cannot specify missing values as both first and last\");\n    }\n\n    SortField sortField = new SortField(fieldName, SortField.Type.STRING, reverse);\n\n    // 4 cases:\n    // missingFirst / forward: default lucene behavior\n    // missingFirst / reverse: set sortMissingLast\n    // missingLast  / forward: set sortMissingLast\n    // missingLast  / reverse: default lucene behavior\n    \n    if (nullFirst && reverse) {\n      sortField.setMissingValue(SortField.STRING_LAST);\n    } else if (nullLast && !reverse) {\n      sortField.setMissingValue(SortField.STRING_LAST);\n    }\n\n    return sortField;\n  }\n\n","sourceOld":"  /** Returns a {@link SortField} for a string field.\n   *  If nullLast and nullFirst are both false, then default lucene string sorting is used where\n   *  null strings sort first in an ascending sort, and last in a descending sort.\n   *\n   * @param fieldName   the name of the field to sort on\n   * @param reverse     true for a reverse (desc) sort\n   * @param nullLast    true if null should come last, regardless of sort order\n   * @param nullFirst   true if null should come first, regardless of sort order\n   * @return SortField\n   */\n  public static SortField getStringSortField(String fieldName, boolean reverse, boolean nullLast, boolean nullFirst) {\n    if (nullLast) {\n      if (!reverse) return new SortField(fieldName, nullStringLastComparatorSource);\n      else return new SortField(fieldName, SortField.Type.STRING, true);\n    } else if (nullFirst) {\n      if (reverse) return new SortField(fieldName, nullStringLastComparatorSource, true);\n      else return new SortField(fieldName, SortField.Type.STRING, false);\n    } else {\n      return new SortField(fieldName, SortField.Type.STRING, reverse);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa71ac98a8994b246ea3366e4aa282329a55e1a3","date":1400007327,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Sorting#getStringSortField(String,boolean,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Sorting#getStringSortField(String,boolean,boolean,boolean).mjava","sourceNew":"  /** Returns a {@link SortField} for a string field.\n   *  If nullLast and nullFirst are both false, then default lucene string sorting is used where\n   *  null strings sort first in an ascending sort, and last in a descending sort.\n   *\n   * @param fieldName   the name of the field to sort on\n   * @param reverse     true for a reverse (desc) sort\n   * @param nullLast    true if null should come last, regardless of sort order\n   * @param nullFirst   true if null should come first, regardless of sort order\n   * @return SortField\n   */\n  public static SortField getStringSortField(String fieldName, boolean reverse, boolean nullLast, boolean nullFirst) {\n    SortField sortField = new SortField(fieldName, SortField.Type.STRING, reverse);\n    applyMissingFirstLast(sortField, reverse, nullLast, nullFirst);\n    return sortField;\n  }\n\n","sourceOld":"  /** Returns a {@link SortField} for a string field.\n   *  If nullLast and nullFirst are both false, then default lucene string sorting is used where\n   *  null strings sort first in an ascending sort, and last in a descending sort.\n   *\n   * @param fieldName   the name of the field to sort on\n   * @param reverse     true for a reverse (desc) sort\n   * @param nullLast    true if null should come last, regardless of sort order\n   * @param nullFirst   true if null should come first, regardless of sort order\n   * @return SortField\n   */\n  public static SortField getStringSortField(String fieldName, boolean reverse, boolean nullLast, boolean nullFirst) {\n    if (nullFirst && nullLast) {\n      throw new IllegalArgumentException(\"Cannot specify missing values as both first and last\");\n    }\n\n    SortField sortField = new SortField(fieldName, SortField.Type.STRING, reverse);\n\n    // 4 cases:\n    // missingFirst / forward: default lucene behavior\n    // missingFirst / reverse: set sortMissingLast\n    // missingLast  / forward: set sortMissingLast\n    // missingLast  / reverse: default lucene behavior\n    \n    if (nullFirst && reverse) {\n      sortField.setMissingValue(SortField.STRING_LAST);\n    } else if (nullLast && !reverse) {\n      sortField.setMissingValue(SortField.STRING_LAST);\n    }\n\n    return sortField;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Sorting#getStringSortField(String,boolean,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Sorting#getStringSortField(String,boolean,boolean,boolean).mjava","sourceNew":"  /** Returns a {@link SortField} for a string field.\n   *  If nullLast and nullFirst are both false, then default lucene string sorting is used where\n   *  null strings sort first in an ascending sort, and last in a descending sort.\n   *\n   * @param fieldName   the name of the field to sort on\n   * @param reverse     true for a reverse (desc) sort\n   * @param nullLast    true if null should come last, regardless of sort order\n   * @param nullFirst   true if null should come first, regardless of sort order\n   * @return SortField\n   */\n  public static SortField getStringSortField(String fieldName, boolean reverse, boolean nullLast, boolean nullFirst) {\n    SortField sortField = new SortField(fieldName, SortField.Type.STRING, reverse);\n    applyMissingFirstLast(sortField, reverse, nullLast, nullFirst);\n    return sortField;\n  }\n\n","sourceOld":"  /** Returns a {@link SortField} for a string field.\n   *  If nullLast and nullFirst are both false, then default lucene string sorting is used where\n   *  null strings sort first in an ascending sort, and last in a descending sort.\n   *\n   * @param fieldName   the name of the field to sort on\n   * @param reverse     true for a reverse (desc) sort\n   * @param nullLast    true if null should come last, regardless of sort order\n   * @param nullFirst   true if null should come first, regardless of sort order\n   * @return SortField\n   */\n  public static SortField getStringSortField(String fieldName, boolean reverse, boolean nullLast, boolean nullFirst) {\n    if (nullFirst && nullLast) {\n      throw new IllegalArgumentException(\"Cannot specify missing values as both first and last\");\n    }\n\n    SortField sortField = new SortField(fieldName, SortField.Type.STRING, reverse);\n\n    // 4 cases:\n    // missingFirst / forward: default lucene behavior\n    // missingFirst / reverse: set sortMissingLast\n    // missingLast  / forward: set sortMissingLast\n    // missingLast  / reverse: default lucene behavior\n    \n    if (nullFirst && reverse) {\n      sortField.setMissingValue(SortField.STRING_LAST);\n    } else if (nullLast && !reverse) {\n      sortField.setMissingValue(SortField.STRING_LAST);\n    }\n\n    return sortField;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Sorting#getStringSortField(String,boolean,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Sorting#getStringSortField(String,boolean,boolean,boolean).mjava","sourceNew":"  /** Returns a {@link SortField} for a string field.\n   *  If nullLast and nullFirst are both false, then default lucene string sorting is used where\n   *  null strings sort first in an ascending sort, and last in a descending sort.\n   *\n   * @param fieldName   the name of the field to sort on\n   * @param reverse     true for a reverse (desc) sort\n   * @param nullLast    true if null should come last, regardless of sort order\n   * @param nullFirst   true if null should come first, regardless of sort order\n   * @return SortField\n   */\n  public static SortField getStringSortField(String fieldName, boolean reverse, boolean nullLast, boolean nullFirst) {\n    SortField sortField = new SortField(fieldName, SortField.Type.STRING, reverse);\n    applyMissingFirstLast(sortField, reverse, nullLast, nullFirst);\n    return sortField;\n  }\n\n","sourceOld":"  /** Returns a {@link SortField} for a string field.\n   *  If nullLast and nullFirst are both false, then default lucene string sorting is used where\n   *  null strings sort first in an ascending sort, and last in a descending sort.\n   *\n   * @param fieldName   the name of the field to sort on\n   * @param reverse     true for a reverse (desc) sort\n   * @param nullLast    true if null should come last, regardless of sort order\n   * @param nullFirst   true if null should come first, regardless of sort order\n   * @return SortField\n   */\n  public static SortField getStringSortField(String fieldName, boolean reverse, boolean nullLast, boolean nullFirst) {\n    if (nullFirst && nullLast) {\n      throw new IllegalArgumentException(\"Cannot specify missing values as both first and last\");\n    }\n\n    SortField sortField = new SortField(fieldName, SortField.Type.STRING, reverse);\n\n    // 4 cases:\n    // missingFirst / forward: default lucene behavior\n    // missingFirst / reverse: set sortMissingLast\n    // missingLast  / forward: set sortMissingLast\n    // missingLast  / reverse: default lucene behavior\n    \n    if (nullFirst && reverse) {\n      sortField.setMissingValue(SortField.STRING_LAST);\n    } else if (nullLast && !reverse) {\n      sortField.setMissingValue(SortField.STRING_LAST);\n    }\n\n    return sortField;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70052d44b40be0028db94b4cffeb9aaa5468055e","date":1505151510,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Sorting#getStringSortField(String,boolean,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Sorting#getStringSortField(String,boolean,boolean,boolean).mjava","sourceNew":"  /** Returns a {@link SortField} for a string field.\n   *  If nullLast and nullFirst are both false, then default lucene string sorting is used where\n   *  null strings sort first in an ascending sort, and last in a descending sort.\n   *\n   * @param fieldName   the name of the field to sort on\n   * @param reverse     true for a reverse (desc) sort\n   * @param nullLast    true if null should come last, regardless of sort order\n   * @param nullFirst   true if null should come first, regardless of sort order\n   * @return SortField\n   * @deprecated custom {@link FieldType}s should use {@link FieldType#getSortField}.  Other usage should leverage th underling lucene {@link SortField} classes directly.\n   */\n  @Deprecated\n  public static SortField getStringSortField(String fieldName, boolean reverse, boolean nullLast, boolean nullFirst) {\n    SortField sortField = new SortField(fieldName, SortField.Type.STRING, reverse);\n    applyMissingFirstLast(sortField, reverse, nullLast, nullFirst);\n    return sortField;\n  }\n\n","sourceOld":"  /** Returns a {@link SortField} for a string field.\n   *  If nullLast and nullFirst are both false, then default lucene string sorting is used where\n   *  null strings sort first in an ascending sort, and last in a descending sort.\n   *\n   * @param fieldName   the name of the field to sort on\n   * @param reverse     true for a reverse (desc) sort\n   * @param nullLast    true if null should come last, regardless of sort order\n   * @param nullFirst   true if null should come first, regardless of sort order\n   * @return SortField\n   */\n  public static SortField getStringSortField(String fieldName, boolean reverse, boolean nullLast, boolean nullFirst) {\n    SortField sortField = new SortField(fieldName, SortField.Type.STRING, reverse);\n    applyMissingFirstLast(sortField, reverse, nullLast, nullFirst);\n    return sortField;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffb85feece8645a035c02443a625f5af15e1106b","date":1505219692,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Sorting#getStringSortField(String,boolean,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Sorting#getStringSortField(String,boolean,boolean,boolean).mjava","sourceNew":"  /** Returns a {@link SortField} for a string field.\n   *  If nullLast and nullFirst are both false, then default lucene string sorting is used where\n   *  null strings sort first in an ascending sort, and last in a descending sort.\n   *\n   * @param fieldName   the name of the field to sort on\n   * @param reverse     true for a reverse (desc) sort\n   * @param nullLast    true if null should come last, regardless of sort order\n   * @param nullFirst   true if null should come first, regardless of sort order\n   * @return SortField\n   * @deprecated custom {@link FieldType}s should use {@link FieldType#getSortField}.  Other usage should leverage th underling lucene {@link SortField} classes directly.\n   */\n  @Deprecated\n  public static SortField getStringSortField(String fieldName, boolean reverse, boolean nullLast, boolean nullFirst) {\n    SortField sortField = new SortField(fieldName, SortField.Type.STRING, reverse);\n    applyMissingFirstLast(sortField, reverse, nullLast, nullFirst);\n    return sortField;\n  }\n\n","sourceOld":"  /** Returns a {@link SortField} for a string field.\n   *  If nullLast and nullFirst are both false, then default lucene string sorting is used where\n   *  null strings sort first in an ascending sort, and last in a descending sort.\n   *\n   * @param fieldName   the name of the field to sort on\n   * @param reverse     true for a reverse (desc) sort\n   * @param nullLast    true if null should come last, regardless of sort order\n   * @param nullFirst   true if null should come first, regardless of sort order\n   * @return SortField\n   */\n  public static SortField getStringSortField(String fieldName, boolean reverse, boolean nullLast, boolean nullFirst) {\n    SortField sortField = new SortField(fieldName, SortField.Type.STRING, reverse);\n    applyMissingFirstLast(sortField, reverse, nullLast, nullFirst);\n    return sortField;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Sorting#getStringSortField(String,boolean,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Sorting#getStringSortField(String,boolean,boolean,boolean).mjava","sourceNew":"  /** Returns a {@link SortField} for a string field.\n   *  If nullLast and nullFirst are both false, then default lucene string sorting is used where\n   *  null strings sort first in an ascending sort, and last in a descending sort.\n   *\n   * @param fieldName   the name of the field to sort on\n   * @param reverse     true for a reverse (desc) sort\n   * @param nullLast    true if null should come last, regardless of sort order\n   * @param nullFirst   true if null should come first, regardless of sort order\n   * @return SortField\n   * @deprecated custom {@link FieldType}s should use {@link FieldType#getSortField}.  Other usage should leverage th underling lucene {@link SortField} classes directly.\n   */\n  @Deprecated\n  public static SortField getStringSortField(String fieldName, boolean reverse, boolean nullLast, boolean nullFirst) {\n    SortField sortField = new SortField(fieldName, SortField.Type.STRING, reverse);\n    applyMissingFirstLast(sortField, reverse, nullLast, nullFirst);\n    return sortField;\n  }\n\n","sourceOld":"  /** Returns a {@link SortField} for a string field.\n   *  If nullLast and nullFirst are both false, then default lucene string sorting is used where\n   *  null strings sort first in an ascending sort, and last in a descending sort.\n   *\n   * @param fieldName   the name of the field to sort on\n   * @param reverse     true for a reverse (desc) sort\n   * @param nullLast    true if null should come last, regardless of sort order\n   * @param nullFirst   true if null should come first, regardless of sort order\n   * @return SortField\n   */\n  public static SortField getStringSortField(String fieldName, boolean reverse, boolean nullLast, boolean nullFirst) {\n    SortField sortField = new SortField(fieldName, SortField.Type.STRING, reverse);\n    applyMissingFirstLast(sortField, reverse, nullLast, nullFirst);\n    return sortField;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ffb85feece8645a035c02443a625f5af15e1106b":["93dd449115a9247533e44bab47e8429e5dccbc6d","70052d44b40be0028db94b4cffeb9aaa5468055e"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["c26f00b574427b55127e869b935845554afde1fa","ea252e5e61c9d1ca6595deb9168914574963e5c3"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"ea252e5e61c9d1ca6595deb9168914574963e5c3":["c26f00b574427b55127e869b935845554afde1fa"],"70052d44b40be0028db94b4cffeb9aaa5468055e":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":["27ab7b234eab0cbc020836989b96ed430e1065bb","93dd449115a9247533e44bab47e8429e5dccbc6d"],"fa71ac98a8994b246ea3366e4aa282329a55e1a3":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"685bd38810c206c93e9058f3c2cfa9827c086c27":["93dd449115a9247533e44bab47e8429e5dccbc6d","ffb85feece8645a035c02443a625f5af15e1106b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["27ab7b234eab0cbc020836989b96ed430e1065bb","fa71ac98a8994b246ea3366e4aa282329a55e1a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ffb85feece8645a035c02443a625f5af15e1106b"]},"commit2Childs":{"ffb85feece8645a035c02443a625f5af15e1106b":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["56572ec06f1407c066d6b7399413178b33176cd8","fa71ac98a8994b246ea3366e4aa282329a55e1a3","93dd449115a9247533e44bab47e8429e5dccbc6d"],"c26f00b574427b55127e869b935845554afde1fa":["27ab7b234eab0cbc020836989b96ed430e1065bb","ea252e5e61c9d1ca6595deb9168914574963e5c3"],"ea252e5e61c9d1ca6595deb9168914574963e5c3":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"70052d44b40be0028db94b4cffeb9aaa5468055e":["ffb85feece8645a035c02443a625f5af15e1106b"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"fa71ac98a8994b246ea3366e4aa282329a55e1a3":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"93dd449115a9247533e44bab47e8429e5dccbc6d":["ffb85feece8645a035c02443a625f5af15e1106b","70052d44b40be0028db94b4cffeb9aaa5468055e","56572ec06f1407c066d6b7399413178b33176cd8","685bd38810c206c93e9058f3c2cfa9827c086c27"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","685bd38810c206c93e9058f3c2cfa9827c086c27","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}