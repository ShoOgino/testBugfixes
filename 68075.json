{"path":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testSimpleDepth().mjava","commits":[{"id":"71d31a7d5773508492505519bb5230b87c8937ad","date":1573681693,"type":0,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testSimpleDepth().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimpleDepth() throws Exception {\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    BytesRef ab = new BytesRef(\"ab\");\n    BytesRef ac = new BytesRef(\"ac\");\n    BytesRef bd = new BytesRef(\"bd\");\n\n    builder.add(Util.toIntsRef(ab, new IntsRefBuilder()), 3L);\n    builder.add(Util.toIntsRef(ac, new IntsRefBuilder()), 5L);\n    builder.add(Util.toIntsRef(bd, new IntsRefBuilder()), 7L);\n\n    FST<Long> fst = builder.finish();\n\n    assertEquals(3, (long) Util.get(fst, ab));\n    assertEquals(5, (long) Util.get(fst, ac));\n    assertEquals(7, (long) Util.get(fst, bd));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testSimpleDepth().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testSimpleDepth().mjava","sourceNew":"  public void testSimpleDepth() throws Exception {\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    FSTCompiler<Long> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    BytesRef ab = new BytesRef(\"ab\");\n    BytesRef ac = new BytesRef(\"ac\");\n    BytesRef bd = new BytesRef(\"bd\");\n\n    fstCompiler.add(Util.toIntsRef(ab, new IntsRefBuilder()), 3L);\n    fstCompiler.add(Util.toIntsRef(ac, new IntsRefBuilder()), 5L);\n    fstCompiler.add(Util.toIntsRef(bd, new IntsRefBuilder()), 7L);\n\n    FST<Long> fst = fstCompiler.compile();\n\n    assertEquals(3, (long) Util.get(fst, ab));\n    assertEquals(5, (long) Util.get(fst, ac));\n    assertEquals(7, (long) Util.get(fst, bd));\n  }\n\n","sourceOld":"  public void testSimpleDepth() throws Exception {\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    BytesRef ab = new BytesRef(\"ab\");\n    BytesRef ac = new BytesRef(\"ac\");\n    BytesRef bd = new BytesRef(\"bd\");\n\n    builder.add(Util.toIntsRef(ab, new IntsRefBuilder()), 3L);\n    builder.add(Util.toIntsRef(ac, new IntsRefBuilder()), 5L);\n    builder.add(Util.toIntsRef(bd, new IntsRefBuilder()), 7L);\n\n    FST<Long> fst = builder.finish();\n\n    assertEquals(3, (long) Util.get(fst, ab));\n    assertEquals(5, (long) Util.get(fst, ac));\n    assertEquals(7, (long) Util.get(fst, bd));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testSimpleDepth().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testSimpleDepth().mjava","sourceNew":"  public void testSimpleDepth() throws Exception {\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    FSTCompiler<Long> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    BytesRef ab = new BytesRef(\"ab\");\n    BytesRef ac = new BytesRef(\"ac\");\n    BytesRef bd = new BytesRef(\"bd\");\n\n    fstCompiler.add(Util.toIntsRef(ab, new IntsRefBuilder()), 3L);\n    fstCompiler.add(Util.toIntsRef(ac, new IntsRefBuilder()), 5L);\n    fstCompiler.add(Util.toIntsRef(bd, new IntsRefBuilder()), 7L);\n\n    FST<Long> fst = fstCompiler.compile();\n\n    assertEquals(3, (long) Util.get(fst, ab));\n    assertEquals(5, (long) Util.get(fst, ac));\n    assertEquals(7, (long) Util.get(fst, bd));\n  }\n\n","sourceOld":"  public void testSimpleDepth() throws Exception {\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    BytesRef ab = new BytesRef(\"ab\");\n    BytesRef ac = new BytesRef(\"ac\");\n    BytesRef bd = new BytesRef(\"bd\");\n\n    builder.add(Util.toIntsRef(ab, new IntsRefBuilder()), 3L);\n    builder.add(Util.toIntsRef(ac, new IntsRefBuilder()), 5L);\n    builder.add(Util.toIntsRef(bd, new IntsRefBuilder()), 7L);\n\n    FST<Long> fst = builder.finish();\n\n    assertEquals(3, (long) Util.get(fst, ab));\n    assertEquals(5, (long) Util.get(fst, ac));\n    assertEquals(7, (long) Util.get(fst, bd));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71d31a7d5773508492505519bb5230b87c8937ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["71d31a7d5773508492505519bb5230b87c8937ad","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["71d31a7d5773508492505519bb5230b87c8937ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["71d31a7d5773508492505519bb5230b87c8937ad"],"71d31a7d5773508492505519bb5230b87c8937ad":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}