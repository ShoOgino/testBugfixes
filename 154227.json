{"path":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestModifiedEntryFilter#testFilter().mjava","commits":[{"id":"5d43e216d757e2276d180eba8a192e300c4bfadb","date":1149717385,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestModifiedEntryFilter#testFilter().mjava","pathOld":"/dev/null","sourceNew":"    public void testFilter() throws IOException{ \n        Searcher s = new IndexSearcher(this.reader); \n        Query q = new TermQuery(new Term(fieldFeedId,feedID)); \n        Hits hits = s.search(q); \n        assertEquals(2,hits.length()); \n         \n        hits = s.search(q,new ModifiedEntryFilter(this.excludeList)); \n        assertEquals(1,hits.length()); \n        this.excludeList.add(\"2\"); \n \n        hits = s.search(q,new ModifiedEntryFilter(this.excludeList)); \n        assertEquals(0,hits.length()); \n         \n    } \n\n","sourceOld":null,"bugFix":null,"bugIntro":["02a7f04a7293ea604e17892ba0bded7341adf3af"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02a7f04a7293ea604e17892ba0bded7341adf3af","date":1151695892,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestModifiedEntryFilter#testFilter().mjava","pathOld":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestModifiedEntryFilter#testFilter().mjava","sourceNew":"    public void testFilter() throws IOException{ \n        Searcher s = new IndexSearcher(this.reader); \n        Query q = new TermQuery(new Term(fieldFeedId,feedID)); \n        Hits hits = s.search(q); \n        assertEquals(2,hits.length()); \n         \n        hits = s.search(q,new ModifiedEntryFilter(this.excludeList.toArray(new String[0]))); \n        assertEquals(1,hits.length()); \n        this.excludeList.add(\"2\"); \n \n        hits = s.search(q,new ModifiedEntryFilter(this.excludeList.toArray(new String[0]))); \n        assertEquals(0,hits.length()); \n         \n    } \n\n","sourceOld":"    public void testFilter() throws IOException{ \n        Searcher s = new IndexSearcher(this.reader); \n        Query q = new TermQuery(new Term(fieldFeedId,feedID)); \n        Hits hits = s.search(q); \n        assertEquals(2,hits.length()); \n         \n        hits = s.search(q,new ModifiedEntryFilter(this.excludeList)); \n        assertEquals(1,hits.length()); \n        this.excludeList.add(\"2\"); \n \n        hits = s.search(q,new ModifiedEntryFilter(this.excludeList)); \n        assertEquals(0,hits.length()); \n         \n    } \n\n","bugFix":["5d43e216d757e2276d180eba8a192e300c4bfadb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09fe963da2613c724ffe82353b4ca2364a1f93c6","date":1155249160,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestModifiedEntryFilter#testFilter().mjava","pathOld":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestModifiedEntryFilter#testFilter().mjava","sourceNew":"    public void testFilter() throws IOException{ \n        Searcher s = new IndexSearcher(this.reader); \n        Query q = new TermQuery(new Term(fieldFeedId,feedID)); \n        Hits hits = s.search(q); \n        assertEquals(2,hits.length()); \n         \n        hits = s.search(q,new ModifiedEntryFilter(this.excludeList.toArray(new String[0]),StorageEntryWrapper.FIELD_ENTRY_ID)); \n        assertEquals(1,hits.length()); \n        this.excludeList.add(\"2\"); \n \n        hits = s.search(q,new ModifiedEntryFilter(this.excludeList.toArray(new String[0]),StorageEntryWrapper.FIELD_ENTRY_ID)); \n        assertEquals(0,hits.length());\n        this.excludeList.add(null);\n        this.excludeList.add(\"5\"); \n        hits = s.search(q,new ModifiedEntryFilter(this.excludeList.toArray(new String[0]),StorageEntryWrapper.FIELD_ENTRY_ID)); \n        assertEquals(0,hits.length()); \n         \n    } \n\n","sourceOld":"    public void testFilter() throws IOException{ \n        Searcher s = new IndexSearcher(this.reader); \n        Query q = new TermQuery(new Term(fieldFeedId,feedID)); \n        Hits hits = s.search(q); \n        assertEquals(2,hits.length()); \n         \n        hits = s.search(q,new ModifiedEntryFilter(this.excludeList.toArray(new String[0]))); \n        assertEquals(1,hits.length()); \n        this.excludeList.add(\"2\"); \n \n        hits = s.search(q,new ModifiedEntryFilter(this.excludeList.toArray(new String[0]))); \n        assertEquals(0,hits.length()); \n         \n    } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/storage/lucenestorage/TestModifiedEntryFilter#testFilter().mjava","pathOld":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestModifiedEntryFilter#testFilter().mjava","sourceNew":"    public void testFilter() throws IOException{ \n        Searcher s = new IndexSearcher(this.reader); \n        Query q = new TermQuery(new Term(fieldFeedId,feedID)); \n        Hits hits = s.search(q); \n        assertEquals(2,hits.length()); \n         \n        hits = s.search(q,new ModifiedEntryFilter(this.excludeList.toArray(new String[0]),StorageEntryWrapper.FIELD_ENTRY_ID)); \n        assertEquals(1,hits.length()); \n        this.excludeList.add(\"2\"); \n \n        hits = s.search(q,new ModifiedEntryFilter(this.excludeList.toArray(new String[0]),StorageEntryWrapper.FIELD_ENTRY_ID)); \n        assertEquals(0,hits.length());\n        this.excludeList.add(null);\n        this.excludeList.add(\"5\"); \n        hits = s.search(q,new ModifiedEntryFilter(this.excludeList.toArray(new String[0]),StorageEntryWrapper.FIELD_ENTRY_ID)); \n        assertEquals(0,hits.length()); \n         \n    } \n\n","sourceOld":"    public void testFilter() throws IOException{ \n        Searcher s = new IndexSearcher(this.reader); \n        Query q = new TermQuery(new Term(fieldFeedId,feedID)); \n        Hits hits = s.search(q); \n        assertEquals(2,hits.length()); \n         \n        hits = s.search(q,new ModifiedEntryFilter(this.excludeList.toArray(new String[0]),StorageEntryWrapper.FIELD_ENTRY_ID)); \n        assertEquals(1,hits.length()); \n        this.excludeList.add(\"2\"); \n \n        hits = s.search(q,new ModifiedEntryFilter(this.excludeList.toArray(new String[0]),StorageEntryWrapper.FIELD_ENTRY_ID)); \n        assertEquals(0,hits.length());\n        this.excludeList.add(null);\n        this.excludeList.add(\"5\"); \n        hits = s.search(q,new ModifiedEntryFilter(this.excludeList.toArray(new String[0]),StorageEntryWrapper.FIELD_ENTRY_ID)); \n        assertEquals(0,hits.length()); \n         \n    } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"02a7f04a7293ea604e17892ba0bded7341adf3af":["5d43e216d757e2276d180eba8a192e300c4bfadb"],"09fe963da2613c724ffe82353b4ca2364a1f93c6":["02a7f04a7293ea604e17892ba0bded7341adf3af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["09fe963da2613c724ffe82353b4ca2364a1f93c6"],"5d43e216d757e2276d180eba8a192e300c4bfadb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5824af871ba6863399636aa5989bfc0ef2ea448c"]},"commit2Childs":{"02a7f04a7293ea604e17892ba0bded7341adf3af":["09fe963da2613c724ffe82353b4ca2364a1f93c6"],"09fe963da2613c724ffe82353b4ca2364a1f93c6":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d43e216d757e2276d180eba8a192e300c4bfadb"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5d43e216d757e2276d180eba8a192e300c4bfadb":["02a7f04a7293ea604e17892ba0bded7341adf3af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}