{"path":"solr/src/java/org/apache/solr/search/TopGroupSortCollector[Grouping]#collect(int).mjava","commits":[{"id":"9d9916984e99244c407152f6cfc2c3bf89a30bc8","date":1284760018,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/TopGroupSortCollector[Grouping]#collect(int).mjava","pathOld":"solr/src/java/org/apache/solr/search/TopGroupSortCollector[MultiCollector]#collect(int).mjava","sourceNew":"  @Override\n  public void collect(int doc) throws IOException {\n    matches++;\n    filler.fillValue(doc);\n    SearchGroup group = groupMap.get(mval);\n    if (group == null) {\n      int num = groupMap.size();\n      if (groupMap.size() < nGroups) {\n        SearchGroup sg = new SearchGroup();\n        SortField[] sortGroupFields = groupSort.getSort();\n        sg.sortGroupComparators = new FieldComparator[sortGroupFields.length];\n        sg.sortGroupReversed = new int[sortGroupFields.length];\n        constructComparators(sg.sortGroupComparators, sg.sortGroupReversed, sortGroupFields, 1);\n\n        sg.groupValue = mval.duplicate();\n        sg.comparatorSlot = num++;\n        sg.matches = 1;\n        sg.topDoc = docBase + doc;\n        // sg.topDocScore = scorer.score();\n        for (FieldComparator fc : comparators)\n          fc.copy(sg.comparatorSlot, doc);\n        for (FieldComparator fc : sg.sortGroupComparators) {\n          fc.copy(0, doc);\n          fc.setBottom(0);\n        }\n        groupMap.put(sg.groupValue, sg);\n        return;\n      }\n\n      if (orderedGroups == null) {\n        buildSet();\n      }\n\n      SearchGroup leastSignificantGroup = orderedGroups.last();\n      for (int i = 0;; i++) {\n        final int c = leastSignificantGroup.sortGroupReversed[i] * leastSignificantGroup.sortGroupComparators[i].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive.\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (i == leastSignificantGroup.sortGroupComparators.length - 1) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n\n      // remove current smallest group\n      SearchGroup smallest = orderedGroups.pollLast();\n      groupMap.remove(smallest.groupValue);\n\n      // reuse the removed SearchGroup\n      smallest.groupValue.copy(mval);\n      smallest.matches = 1;\n      smallest.topDoc = docBase + doc;\n      // smallest.topDocScore = scorer.score();\n      for (FieldComparator fc : comparators)\n        fc.copy(smallest.comparatorSlot, doc);\n      for (FieldComparator fc : smallest.sortGroupComparators) {\n        fc.copy(0, doc);\n        fc.setBottom(0);\n      }\n\n      groupMap.put(smallest.groupValue, smallest);\n      orderedGroups.add(smallest);\n\n      for (FieldComparator fc : comparators)\n        fc.setBottom(orderedGroups.last().comparatorSlot);\n      for (FieldComparator fc : smallest.sortGroupComparators)\n        fc.setBottom(0);\n\n      return;\n    }\n\n    //\n    // update existing group\n    //\n\n    group.matches++; // TODO: these aren't valid if the group is every discarded then re-added.  keep track if there have been discards?\n\n    for (int i = 0;; i++) {\n      FieldComparator fc = group.sortGroupComparators[i];\n\n      final int c = group.sortGroupReversed[i] * fc.compareBottom(doc);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        // Set remaining comparators\n        for (int j = 0; j < group.sortGroupComparators.length; j++) {\n          group.sortGroupComparators[j].copy(0, doc);\n          group.sortGroupComparators[j].setBottom(0);\n        }\n        for (FieldComparator comparator : comparators) comparator.copy(spareSlot, doc);\n        break;\n      } else if (i == group.sortGroupComparators.length - 1) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n    if (orderedGroups != null)\n      orderedGroups.remove(group);\n\n    group.topDoc = docBase + doc;\n    // group.topDocScore = scorer.score();\n    int tmp = spareSlot; spareSlot = group.comparatorSlot; group.comparatorSlot=tmp;  // swap slots\n\n    // re-add the changed group\n    if (orderedGroups != null)\n      orderedGroups.add(group);\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc) throws IOException {\n    matches++;\n    filler.fillValue(doc);\n    SearchGroup group = groupMap.get(mval);\n    if (group == null) {\n      int num = groupMap.size();\n      if (groupMap.size() < nGroups) {\n        SearchGroup sg = new SearchGroup();\n        SortField[] sortGroupFields = groupSort.getSort();\n        sg.sortGroupComparators = new FieldComparator[sortGroupFields.length];\n        sg.sortGroupReversed = new int[sortGroupFields.length];\n        constructComparators(sg.sortGroupComparators, sg.sortGroupReversed, sortGroupFields, 1);\n\n        sg.groupValue = mval.duplicate();\n        sg.comparatorSlot = num++;\n        sg.matches = 1;\n        sg.topDoc = docBase + doc;\n        // sg.topDocScore = scorer.score();\n        for (FieldComparator fc : comparators)\n          fc.copy(sg.comparatorSlot, doc);\n        for (FieldComparator fc : sg.sortGroupComparators) {\n          fc.copy(0, doc);\n          fc.setBottom(0);\n        }\n        groupMap.put(sg.groupValue, sg);\n        return;\n      }\n\n      if (orderedGroups == null) {\n        buildSet();\n      }\n\n      SearchGroup leastSignificantGroup = orderedGroups.last();\n      for (int i = 0;; i++) {\n        final int c = leastSignificantGroup.sortGroupReversed[i] * leastSignificantGroup.sortGroupComparators[i].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive.\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (i == leastSignificantGroup.sortGroupComparators.length - 1) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n\n      // remove current smallest group\n      SearchGroup smallest = orderedGroups.pollLast();\n      groupMap.remove(smallest.groupValue);\n\n      // reuse the removed SearchGroup\n      smallest.groupValue.copy(mval);\n      smallest.matches = 1;\n      smallest.topDoc = docBase + doc;\n      // smallest.topDocScore = scorer.score();\n      for (FieldComparator fc : comparators)\n        fc.copy(smallest.comparatorSlot, doc);\n      for (FieldComparator fc : smallest.sortGroupComparators) {\n        fc.copy(0, doc);\n        fc.setBottom(0);\n      }\n\n      groupMap.put(smallest.groupValue, smallest);\n      orderedGroups.add(smallest);\n\n      for (FieldComparator fc : comparators)\n        fc.setBottom(orderedGroups.last().comparatorSlot);\n      for (FieldComparator fc : smallest.sortGroupComparators)\n        fc.setBottom(0);\n\n      return;\n    }\n\n    //\n    // update existing group\n    //\n\n    group.matches++; // TODO: these aren't valid if the group is every discarded then re-added.  keep track if there have been discards?\n\n    for (int i = 0;; i++) {\n      FieldComparator fc = group.sortGroupComparators[i];\n\n      final int c = group.sortGroupReversed[i] * fc.compareBottom(doc);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        // Set remaining comparators\n        for (int j = 0; j < group.sortGroupComparators.length; j++) {\n          group.sortGroupComparators[j].copy(0, doc);\n          group.sortGroupComparators[j].setBottom(0);\n        }\n        for (FieldComparator comparator : comparators) comparator.copy(spareSlot, doc);\n        break;\n      } else if (i == group.sortGroupComparators.length - 1) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n    if (orderedGroups != null)\n      orderedGroups.remove(group);\n\n    group.topDoc = docBase + doc;\n    // group.topDocScore = scorer.score();\n    int tmp = spareSlot; spareSlot = group.comparatorSlot; group.comparatorSlot=tmp;  // swap slots\n\n    // re-add the changed group\n    if (orderedGroups != null)\n      orderedGroups.add(group);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3dc5ca262ab8fbf03537ba01c49551f39ddc3b9","date":1289782557,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/TopGroupSortCollector[Grouping]#collect(int).mjava","pathOld":"solr/src/java/org/apache/solr/search/TopGroupSortCollector[Grouping]#collect(int).mjava","sourceNew":"  @Override\n  public void collect(int doc) throws IOException {\n    matches++;\n    filler.fillValue(doc);\n    SearchGroup group = groupMap.get(mval);\n    if (group == null) {\n      int num = groupMap.size();\n      if (groupMap.size() < nGroups) {\n        SearchGroup sg = new SearchGroup();\n        SortField[] sortGroupFields = groupSort.getSort();\n        sg.sortGroupComparators = new FieldComparator[sortGroupFields.length];\n        sg.sortGroupReversed = new int[sortGroupFields.length];\n        constructComparators(sg.sortGroupComparators, sg.sortGroupReversed, sortGroupFields, 1);\n\n        sg.groupValue = mval.duplicate();\n        sg.comparatorSlot = num++;\n        sg.matches = 1;\n        sg.topDoc = docBase + doc;\n        // sg.topDocScore = scorer.score();\n        for (FieldComparator fc : comparators)\n          fc.copy(sg.comparatorSlot, doc);\n        for (FieldComparator fc : sg.sortGroupComparators) {\n          fc.copy(0, doc);\n          fc.setBottom(0);\n        }\n        groupMap.put(sg.groupValue, sg);\n        return;\n      }\n\n      if (orderedGroups == null) {\n        buildSet();\n      }\n\n      // see if this new group would be competitive if this doc was the top doc\n      for (int i = 0;; i++) {\n        final int c = reversed[i] * comparators[i].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (i == comparators.length - 1) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n\n      // remove current smallest group\n      SearchGroup smallest = orderedGroups.pollLast();\n      groupMap.remove(smallest.groupValue);\n\n      // reuse the removed SearchGroup\n      smallest.groupValue.copy(mval);\n      smallest.matches = 1;\n      smallest.topDoc = docBase + doc;\n      // smallest.topDocScore = scorer.score();\n      for (FieldComparator fc : comparators)\n        fc.copy(smallest.comparatorSlot, doc);\n      for (FieldComparator fc : smallest.sortGroupComparators) {\n        fc.copy(0, doc);\n        fc.setBottom(0);\n      }\n\n      groupMap.put(smallest.groupValue, smallest);\n      orderedGroups.add(smallest);\n\n      for (FieldComparator fc : comparators)\n        fc.setBottom(orderedGroups.last().comparatorSlot);\n      for (FieldComparator fc : smallest.sortGroupComparators)\n        fc.setBottom(0);\n\n      return;\n    }\n\n    //\n    // update existing group\n    //\n\n    group.matches++; // TODO: these aren't valid if the group is every discarded then re-added.  keep track if there have been discards?\n\n    for (int i = 0;; i++) {\n      FieldComparator fc = group.sortGroupComparators[i];\n\n      final int c = group.sortGroupReversed[i] * fc.compareBottom(doc);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        // Set remaining comparators\n        for (int j = 0; j < group.sortGroupComparators.length; j++) {\n          group.sortGroupComparators[j].copy(0, doc);\n          group.sortGroupComparators[j].setBottom(0);\n        }\n        for (FieldComparator comparator : comparators) comparator.copy(spareSlot, doc);\n        break;\n      } else if (i == group.sortGroupComparators.length - 1) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n    if (orderedGroups != null)\n      orderedGroups.remove(group);\n\n    group.topDoc = docBase + doc;\n    // group.topDocScore = scorer.score();\n    int tmp = spareSlot; spareSlot = group.comparatorSlot; group.comparatorSlot=tmp;  // swap slots\n\n    // re-add the changed group\n    if (orderedGroups != null)\n      orderedGroups.add(group);\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc) throws IOException {\n    matches++;\n    filler.fillValue(doc);\n    SearchGroup group = groupMap.get(mval);\n    if (group == null) {\n      int num = groupMap.size();\n      if (groupMap.size() < nGroups) {\n        SearchGroup sg = new SearchGroup();\n        SortField[] sortGroupFields = groupSort.getSort();\n        sg.sortGroupComparators = new FieldComparator[sortGroupFields.length];\n        sg.sortGroupReversed = new int[sortGroupFields.length];\n        constructComparators(sg.sortGroupComparators, sg.sortGroupReversed, sortGroupFields, 1);\n\n        sg.groupValue = mval.duplicate();\n        sg.comparatorSlot = num++;\n        sg.matches = 1;\n        sg.topDoc = docBase + doc;\n        // sg.topDocScore = scorer.score();\n        for (FieldComparator fc : comparators)\n          fc.copy(sg.comparatorSlot, doc);\n        for (FieldComparator fc : sg.sortGroupComparators) {\n          fc.copy(0, doc);\n          fc.setBottom(0);\n        }\n        groupMap.put(sg.groupValue, sg);\n        return;\n      }\n\n      if (orderedGroups == null) {\n        buildSet();\n      }\n\n      SearchGroup leastSignificantGroup = orderedGroups.last();\n      for (int i = 0;; i++) {\n        final int c = leastSignificantGroup.sortGroupReversed[i] * leastSignificantGroup.sortGroupComparators[i].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive.\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (i == leastSignificantGroup.sortGroupComparators.length - 1) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n\n      // remove current smallest group\n      SearchGroup smallest = orderedGroups.pollLast();\n      groupMap.remove(smallest.groupValue);\n\n      // reuse the removed SearchGroup\n      smallest.groupValue.copy(mval);\n      smallest.matches = 1;\n      smallest.topDoc = docBase + doc;\n      // smallest.topDocScore = scorer.score();\n      for (FieldComparator fc : comparators)\n        fc.copy(smallest.comparatorSlot, doc);\n      for (FieldComparator fc : smallest.sortGroupComparators) {\n        fc.copy(0, doc);\n        fc.setBottom(0);\n      }\n\n      groupMap.put(smallest.groupValue, smallest);\n      orderedGroups.add(smallest);\n\n      for (FieldComparator fc : comparators)\n        fc.setBottom(orderedGroups.last().comparatorSlot);\n      for (FieldComparator fc : smallest.sortGroupComparators)\n        fc.setBottom(0);\n\n      return;\n    }\n\n    //\n    // update existing group\n    //\n\n    group.matches++; // TODO: these aren't valid if the group is every discarded then re-added.  keep track if there have been discards?\n\n    for (int i = 0;; i++) {\n      FieldComparator fc = group.sortGroupComparators[i];\n\n      final int c = group.sortGroupReversed[i] * fc.compareBottom(doc);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        // Set remaining comparators\n        for (int j = 0; j < group.sortGroupComparators.length; j++) {\n          group.sortGroupComparators[j].copy(0, doc);\n          group.sortGroupComparators[j].setBottom(0);\n        }\n        for (FieldComparator comparator : comparators) comparator.copy(spareSlot, doc);\n        break;\n      } else if (i == group.sortGroupComparators.length - 1) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n    if (orderedGroups != null)\n      orderedGroups.remove(group);\n\n    group.topDoc = docBase + doc;\n    // group.topDocScore = scorer.score();\n    int tmp = spareSlot; spareSlot = group.comparatorSlot; group.comparatorSlot=tmp;  // swap slots\n\n    // re-add the changed group\n    if (orderedGroups != null)\n      orderedGroups.add(group);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6223995486fddc7e4fde49d8798baf50b60dd9c","date":1289784654,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/TopGroupSortCollector[Grouping]#collect(int).mjava","pathOld":"solr/src/java/org/apache/solr/search/TopGroupSortCollector[Grouping]#collect(int).mjava","sourceNew":"  @Override\n  public void collect(int doc) throws IOException {\n    matches++;\n    filler.fillValue(doc);\n    SearchGroup group = groupMap.get(mval);\n    if (group == null) {\n      int num = groupMap.size();\n      if (groupMap.size() < nGroups) {\n        SearchGroup sg = new SearchGroup();\n        SortField[] sortGroupFields = groupSort.getSort();\n        sg.sortGroupComparators = new FieldComparator[sortGroupFields.length];\n        sg.sortGroupReversed = new int[sortGroupFields.length];\n        constructComparators(sg.sortGroupComparators, sg.sortGroupReversed, sortGroupFields, 1);\n\n        sg.groupValue = mval.duplicate();\n        sg.comparatorSlot = num++;\n        sg.matches = 1;\n        sg.topDoc = docBase + doc;\n        // sg.topDocScore = scorer.score();\n        for (FieldComparator fc : comparators)\n          fc.copy(sg.comparatorSlot, doc);\n        for (FieldComparator fc : sg.sortGroupComparators) {\n          fc.copy(0, doc);\n          fc.setBottom(0);\n        }\n        groupMap.put(sg.groupValue, sg);\n        return;\n      }\n\n      if (orderedGroups == null) {\n        buildSet();\n      }\n\n      // see if this new group would be competitive if this doc was the top doc\n      for (int i = 0;; i++) {\n        final int c = reversed[i] * comparators[i].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (i == comparators.length - 1) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n\n      // remove current smallest group\n      SearchGroup smallest = orderedGroups.pollLast();\n      groupMap.remove(smallest.groupValue);\n\n      // reuse the removed SearchGroup\n      smallest.groupValue.copy(mval);\n      smallest.matches = 1;\n      smallest.topDoc = docBase + doc;\n      // smallest.topDocScore = scorer.score();\n      for (FieldComparator fc : comparators)\n        fc.copy(smallest.comparatorSlot, doc);\n      for (FieldComparator fc : smallest.sortGroupComparators) {\n        fc.copy(0, doc);\n        fc.setBottom(0);\n      }\n\n      groupMap.put(smallest.groupValue, smallest);\n      orderedGroups.add(smallest);\n\n      int lastSlot = orderedGroups.last().comparatorSlot;\n      for (FieldComparator fc : comparators)\n        fc.setBottom(lastSlot);\n\n      return;\n    }\n\n    //\n    // update existing group\n    //\n\n    group.matches++; // TODO: these aren't valid if the group is every discarded then re-added.  keep track if there have been discards?\n\n    for (int i = 0;; i++) {\n      FieldComparator fc = group.sortGroupComparators[i];\n\n      final int c = group.sortGroupReversed[i] * fc.compareBottom(doc);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        // Set remaining comparators\n        for (int j = 0; j < group.sortGroupComparators.length; j++) {\n          group.sortGroupComparators[j].copy(0, doc);\n          group.sortGroupComparators[j].setBottom(0);\n        }\n        for (FieldComparator comparator : comparators) comparator.copy(spareSlot, doc);\n        break;\n      } else if (i == group.sortGroupComparators.length - 1) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n    if (orderedGroups != null)\n      orderedGroups.remove(group);\n\n    group.topDoc = docBase + doc;\n    // group.topDocScore = scorer.score();\n    int tmp = spareSlot; spareSlot = group.comparatorSlot; group.comparatorSlot=tmp;  // swap slots\n\n    // re-add the changed group\n    if (orderedGroups != null)\n      orderedGroups.add(group);\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc) throws IOException {\n    matches++;\n    filler.fillValue(doc);\n    SearchGroup group = groupMap.get(mval);\n    if (group == null) {\n      int num = groupMap.size();\n      if (groupMap.size() < nGroups) {\n        SearchGroup sg = new SearchGroup();\n        SortField[] sortGroupFields = groupSort.getSort();\n        sg.sortGroupComparators = new FieldComparator[sortGroupFields.length];\n        sg.sortGroupReversed = new int[sortGroupFields.length];\n        constructComparators(sg.sortGroupComparators, sg.sortGroupReversed, sortGroupFields, 1);\n\n        sg.groupValue = mval.duplicate();\n        sg.comparatorSlot = num++;\n        sg.matches = 1;\n        sg.topDoc = docBase + doc;\n        // sg.topDocScore = scorer.score();\n        for (FieldComparator fc : comparators)\n          fc.copy(sg.comparatorSlot, doc);\n        for (FieldComparator fc : sg.sortGroupComparators) {\n          fc.copy(0, doc);\n          fc.setBottom(0);\n        }\n        groupMap.put(sg.groupValue, sg);\n        return;\n      }\n\n      if (orderedGroups == null) {\n        buildSet();\n      }\n\n      // see if this new group would be competitive if this doc was the top doc\n      for (int i = 0;; i++) {\n        final int c = reversed[i] * comparators[i].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (i == comparators.length - 1) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n\n      // remove current smallest group\n      SearchGroup smallest = orderedGroups.pollLast();\n      groupMap.remove(smallest.groupValue);\n\n      // reuse the removed SearchGroup\n      smallest.groupValue.copy(mval);\n      smallest.matches = 1;\n      smallest.topDoc = docBase + doc;\n      // smallest.topDocScore = scorer.score();\n      for (FieldComparator fc : comparators)\n        fc.copy(smallest.comparatorSlot, doc);\n      for (FieldComparator fc : smallest.sortGroupComparators) {\n        fc.copy(0, doc);\n        fc.setBottom(0);\n      }\n\n      groupMap.put(smallest.groupValue, smallest);\n      orderedGroups.add(smallest);\n\n      for (FieldComparator fc : comparators)\n        fc.setBottom(orderedGroups.last().comparatorSlot);\n      for (FieldComparator fc : smallest.sortGroupComparators)\n        fc.setBottom(0);\n\n      return;\n    }\n\n    //\n    // update existing group\n    //\n\n    group.matches++; // TODO: these aren't valid if the group is every discarded then re-added.  keep track if there have been discards?\n\n    for (int i = 0;; i++) {\n      FieldComparator fc = group.sortGroupComparators[i];\n\n      final int c = group.sortGroupReversed[i] * fc.compareBottom(doc);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        // Set remaining comparators\n        for (int j = 0; j < group.sortGroupComparators.length; j++) {\n          group.sortGroupComparators[j].copy(0, doc);\n          group.sortGroupComparators[j].setBottom(0);\n        }\n        for (FieldComparator comparator : comparators) comparator.copy(spareSlot, doc);\n        break;\n      } else if (i == group.sortGroupComparators.length - 1) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n    if (orderedGroups != null)\n      orderedGroups.remove(group);\n\n    group.topDoc = docBase + doc;\n    // group.topDocScore = scorer.score();\n    int tmp = spareSlot; spareSlot = group.comparatorSlot; group.comparatorSlot=tmp;  // swap slots\n\n    // re-add the changed group\n    if (orderedGroups != null)\n      orderedGroups.add(group);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/TopGroupSortCollector[Grouping]#collect(int).mjava","pathOld":"solr/src/java/org/apache/solr/search/TopGroupSortCollector[Grouping]#collect(int).mjava","sourceNew":"  @Override\n  public void collect(int doc) throws IOException {\n    matches++;\n    filler.fillValue(doc);\n    SearchGroup group = groupMap.get(mval);\n    if (group == null) {\n      int num = groupMap.size();\n      if (groupMap.size() < nGroups) {\n        SearchGroup sg = new SearchGroup();\n        SortField[] sortGroupFields = groupSort.getSort();\n        sg.sortGroupComparators = new FieldComparator[sortGroupFields.length];\n        sg.sortGroupReversed = new int[sortGroupFields.length];\n        constructComparators(sg.sortGroupComparators, sg.sortGroupReversed, sortGroupFields, 1);\n\n        sg.groupValue = mval.duplicate();\n        sg.comparatorSlot = num++;\n        sg.matches = 1;\n        sg.topDoc = docBase + doc;\n        // sg.topDocScore = scorer.score();\n        for (FieldComparator fc : comparators)\n          fc.copy(sg.comparatorSlot, doc);\n        for (FieldComparator fc : sg.sortGroupComparators) {\n          fc.copy(0, doc);\n          fc.setBottom(0);\n        }\n        groupMap.put(sg.groupValue, sg);\n        return;\n      }\n\n      if (orderedGroups == null) {\n        buildSet();\n      }\n\n      // see if this new group would be competitive if this doc was the top doc\n      for (int i = 0;; i++) {\n        final int c = reversed[i] * comparators[i].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (i == comparators.length - 1) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n\n      // remove current smallest group\n      SearchGroup smallest = orderedGroups.pollLast();\n      groupMap.remove(smallest.groupValue);\n\n      // reuse the removed SearchGroup\n      smallest.groupValue.copy(mval);\n      smallest.matches = 1;\n      smallest.topDoc = docBase + doc;\n      // smallest.topDocScore = scorer.score();\n      for (FieldComparator fc : comparators)\n        fc.copy(smallest.comparatorSlot, doc);\n      for (FieldComparator fc : smallest.sortGroupComparators) {\n        fc.copy(0, doc);\n        fc.setBottom(0);\n      }\n\n      groupMap.put(smallest.groupValue, smallest);\n      orderedGroups.add(smallest);\n\n      int lastSlot = orderedGroups.last().comparatorSlot;\n      for (FieldComparator fc : comparators)\n        fc.setBottom(lastSlot);\n\n      return;\n    }\n\n    //\n    // update existing group\n    //\n\n    group.matches++; // TODO: these aren't valid if the group is every discarded then re-added.  keep track if there have been discards?\n\n    for (int i = 0;; i++) {\n      FieldComparator fc = group.sortGroupComparators[i];\n\n      final int c = group.sortGroupReversed[i] * fc.compareBottom(doc);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        // Set remaining comparators\n        for (int j = 0; j < group.sortGroupComparators.length; j++) {\n          group.sortGroupComparators[j].copy(0, doc);\n          group.sortGroupComparators[j].setBottom(0);\n        }\n        for (FieldComparator comparator : comparators) comparator.copy(spareSlot, doc);\n        break;\n      } else if (i == group.sortGroupComparators.length - 1) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n    if (orderedGroups != null)\n      orderedGroups.remove(group);\n\n    group.topDoc = docBase + doc;\n    // group.topDocScore = scorer.score();\n    int tmp = spareSlot; spareSlot = group.comparatorSlot; group.comparatorSlot=tmp;  // swap slots\n\n    // re-add the changed group\n    if (orderedGroups != null)\n      orderedGroups.add(group);\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc) throws IOException {\n    matches++;\n    filler.fillValue(doc);\n    SearchGroup group = groupMap.get(mval);\n    if (group == null) {\n      int num = groupMap.size();\n      if (groupMap.size() < nGroups) {\n        SearchGroup sg = new SearchGroup();\n        SortField[] sortGroupFields = groupSort.getSort();\n        sg.sortGroupComparators = new FieldComparator[sortGroupFields.length];\n        sg.sortGroupReversed = new int[sortGroupFields.length];\n        constructComparators(sg.sortGroupComparators, sg.sortGroupReversed, sortGroupFields, 1);\n\n        sg.groupValue = mval.duplicate();\n        sg.comparatorSlot = num++;\n        sg.matches = 1;\n        sg.topDoc = docBase + doc;\n        // sg.topDocScore = scorer.score();\n        for (FieldComparator fc : comparators)\n          fc.copy(sg.comparatorSlot, doc);\n        for (FieldComparator fc : sg.sortGroupComparators) {\n          fc.copy(0, doc);\n          fc.setBottom(0);\n        }\n        groupMap.put(sg.groupValue, sg);\n        return;\n      }\n\n      if (orderedGroups == null) {\n        buildSet();\n      }\n\n      SearchGroup leastSignificantGroup = orderedGroups.last();\n      for (int i = 0;; i++) {\n        final int c = leastSignificantGroup.sortGroupReversed[i] * leastSignificantGroup.sortGroupComparators[i].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive.\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (i == leastSignificantGroup.sortGroupComparators.length - 1) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n\n      // remove current smallest group\n      SearchGroup smallest = orderedGroups.pollLast();\n      groupMap.remove(smallest.groupValue);\n\n      // reuse the removed SearchGroup\n      smallest.groupValue.copy(mval);\n      smallest.matches = 1;\n      smallest.topDoc = docBase + doc;\n      // smallest.topDocScore = scorer.score();\n      for (FieldComparator fc : comparators)\n        fc.copy(smallest.comparatorSlot, doc);\n      for (FieldComparator fc : smallest.sortGroupComparators) {\n        fc.copy(0, doc);\n        fc.setBottom(0);\n      }\n\n      groupMap.put(smallest.groupValue, smallest);\n      orderedGroups.add(smallest);\n\n      for (FieldComparator fc : comparators)\n        fc.setBottom(orderedGroups.last().comparatorSlot);\n      for (FieldComparator fc : smallest.sortGroupComparators)\n        fc.setBottom(0);\n\n      return;\n    }\n\n    //\n    // update existing group\n    //\n\n    group.matches++; // TODO: these aren't valid if the group is every discarded then re-added.  keep track if there have been discards?\n\n    for (int i = 0;; i++) {\n      FieldComparator fc = group.sortGroupComparators[i];\n\n      final int c = group.sortGroupReversed[i] * fc.compareBottom(doc);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        // Set remaining comparators\n        for (int j = 0; j < group.sortGroupComparators.length; j++) {\n          group.sortGroupComparators[j].copy(0, doc);\n          group.sortGroupComparators[j].setBottom(0);\n        }\n        for (FieldComparator comparator : comparators) comparator.copy(spareSlot, doc);\n        break;\n      } else if (i == group.sortGroupComparators.length - 1) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n    if (orderedGroups != null)\n      orderedGroups.remove(group);\n\n    group.topDoc = docBase + doc;\n    // group.topDocScore = scorer.score();\n    int tmp = spareSlot; spareSlot = group.comparatorSlot; group.comparatorSlot=tmp;  // swap slots\n\n    // re-add the changed group\n    if (orderedGroups != null)\n      orderedGroups.add(group);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e62f57eded31ecb5e6b09f8edad73ba2819a5269","date":1290374488,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/TopGroupSortCollector[Grouping]#collect(int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void collect(int doc) throws IOException {\n    matches++;\n    filler.fillValue(doc);\n    SearchGroup group = groupMap.get(mval);\n    if (group == null) {\n      int num = groupMap.size();\n      if (groupMap.size() < nGroups) {\n        SearchGroup sg = new SearchGroup();\n        SortField[] sortGroupFields = groupSort.getSort();\n        sg.sortGroupComparators = new FieldComparator[sortGroupFields.length];\n        sg.sortGroupReversed = new int[sortGroupFields.length];\n        constructComparators(sg.sortGroupComparators, sg.sortGroupReversed, sortGroupFields, 1);\n\n        sg.groupValue = mval.duplicate();\n        sg.comparatorSlot = num++;\n        sg.matches = 1;\n        sg.topDoc = docBase + doc;\n        // sg.topDocScore = scorer.score();\n        for (FieldComparator fc : comparators)\n          fc.copy(sg.comparatorSlot, doc);\n        for (FieldComparator fc : sg.sortGroupComparators) {\n          fc.copy(0, doc);\n          fc.setBottom(0);\n        }\n        groupMap.put(sg.groupValue, sg);\n        return;\n      }\n\n      if (orderedGroups == null) {\n        buildSet();\n      }\n\n      // see if this new group would be competitive if this doc was the top doc\n      for (int i = 0;; i++) {\n        final int c = reversed[i] * comparators[i].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (i == comparators.length - 1) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n\n      // remove current smallest group\n      SearchGroup smallest = orderedGroups.pollLast();\n      groupMap.remove(smallest.groupValue);\n\n      // reuse the removed SearchGroup\n      smallest.groupValue.copy(mval);\n      smallest.matches = 1;\n      smallest.topDoc = docBase + doc;\n      // smallest.topDocScore = scorer.score();\n      for (FieldComparator fc : comparators)\n        fc.copy(smallest.comparatorSlot, doc);\n      for (FieldComparator fc : smallest.sortGroupComparators) {\n        fc.copy(0, doc);\n        fc.setBottom(0);\n      }\n\n      groupMap.put(smallest.groupValue, smallest);\n      orderedGroups.add(smallest);\n\n      int lastSlot = orderedGroups.last().comparatorSlot;\n      for (FieldComparator fc : comparators)\n        fc.setBottom(lastSlot);\n\n      return;\n    }\n\n    //\n    // update existing group\n    //\n\n    group.matches++; // TODO: these aren't valid if the group is every discarded then re-added.  keep track if there have been discards?\n\n    for (int i = 0;; i++) {\n      FieldComparator fc = group.sortGroupComparators[i];\n\n      final int c = group.sortGroupReversed[i] * fc.compareBottom(doc);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        // Set remaining comparators\n        for (int j = 0; j < group.sortGroupComparators.length; j++) {\n          group.sortGroupComparators[j].copy(0, doc);\n          group.sortGroupComparators[j].setBottom(0);\n        }\n        for (FieldComparator comparator : comparators) comparator.copy(spareSlot, doc);\n        break;\n      } else if (i == group.sortGroupComparators.length - 1) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n    if (orderedGroups != null)\n      orderedGroups.remove(group);\n\n    group.topDoc = docBase + doc;\n    // group.topDocScore = scorer.score();\n    int tmp = spareSlot; spareSlot = group.comparatorSlot; group.comparatorSlot=tmp;  // swap slots\n\n    // re-add the changed group\n    if (orderedGroups != null)\n      orderedGroups.add(group);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/TopGroupSortCollector[Grouping]#collect(int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void collect(int doc) throws IOException {\n    matches++;\n    filler.fillValue(doc);\n    SearchGroup group = groupMap.get(mval);\n    if (group == null) {\n      int num = groupMap.size();\n      if (groupMap.size() < nGroups) {\n        SearchGroup sg = new SearchGroup();\n        SortField[] sortGroupFields = groupSort.getSort();\n        sg.sortGroupComparators = new FieldComparator[sortGroupFields.length];\n        sg.sortGroupReversed = new int[sortGroupFields.length];\n        constructComparators(sg.sortGroupComparators, sg.sortGroupReversed, sortGroupFields, 1);\n\n        sg.groupValue = mval.duplicate();\n        sg.comparatorSlot = num++;\n        sg.matches = 1;\n        sg.topDoc = docBase + doc;\n        // sg.topDocScore = scorer.score();\n        for (FieldComparator fc : comparators)\n          fc.copy(sg.comparatorSlot, doc);\n        for (FieldComparator fc : sg.sortGroupComparators) {\n          fc.copy(0, doc);\n          fc.setBottom(0);\n        }\n        groupMap.put(sg.groupValue, sg);\n        return;\n      }\n\n      if (orderedGroups == null) {\n        buildSet();\n      }\n\n      // see if this new group would be competitive if this doc was the top doc\n      for (int i = 0;; i++) {\n        final int c = reversed[i] * comparators[i].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (i == comparators.length - 1) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n\n      // remove current smallest group\n      SearchGroup smallest = orderedGroups.pollLast();\n      groupMap.remove(smallest.groupValue);\n\n      // reuse the removed SearchGroup\n      smallest.groupValue.copy(mval);\n      smallest.matches = 1;\n      smallest.topDoc = docBase + doc;\n      // smallest.topDocScore = scorer.score();\n      for (FieldComparator fc : comparators)\n        fc.copy(smallest.comparatorSlot, doc);\n      for (FieldComparator fc : smallest.sortGroupComparators) {\n        fc.copy(0, doc);\n        fc.setBottom(0);\n      }\n\n      groupMap.put(smallest.groupValue, smallest);\n      orderedGroups.add(smallest);\n\n      int lastSlot = orderedGroups.last().comparatorSlot;\n      for (FieldComparator fc : comparators)\n        fc.setBottom(lastSlot);\n\n      return;\n    }\n\n    //\n    // update existing group\n    //\n\n    group.matches++; // TODO: these aren't valid if the group is every discarded then re-added.  keep track if there have been discards?\n\n    for (int i = 0;; i++) {\n      FieldComparator fc = group.sortGroupComparators[i];\n\n      final int c = group.sortGroupReversed[i] * fc.compareBottom(doc);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        // Set remaining comparators\n        for (int j = 0; j < group.sortGroupComparators.length; j++) {\n          group.sortGroupComparators[j].copy(0, doc);\n          group.sortGroupComparators[j].setBottom(0);\n        }\n        for (FieldComparator comparator : comparators) comparator.copy(spareSlot, doc);\n        break;\n      } else if (i == group.sortGroupComparators.length - 1) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n    if (orderedGroups != null)\n      orderedGroups.remove(group);\n\n    group.topDoc = docBase + doc;\n    // group.topDocScore = scorer.score();\n    int tmp = spareSlot; spareSlot = group.comparatorSlot; group.comparatorSlot=tmp;  // swap slots\n\n    // re-add the changed group\n    if (orderedGroups != null)\n      orderedGroups.add(group);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9d9916984e99244c407152f6cfc2c3bf89a30bc8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a6223995486fddc7e4fde49d8798baf50b60dd9c":["b3dc5ca262ab8fbf03537ba01c49551f39ddc3b9"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["9d9916984e99244c407152f6cfc2c3bf89a30bc8","a6223995486fddc7e4fde49d8798baf50b60dd9c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b3dc5ca262ab8fbf03537ba01c49551f39ddc3b9":["9d9916984e99244c407152f6cfc2c3bf89a30bc8"],"e62f57eded31ecb5e6b09f8edad73ba2819a5269":["a6223995486fddc7e4fde49d8798baf50b60dd9c"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","e62f57eded31ecb5e6b09f8edad73ba2819a5269"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e62f57eded31ecb5e6b09f8edad73ba2819a5269"]},"commit2Childs":{"9d9916984e99244c407152f6cfc2c3bf89a30bc8":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","b3dc5ca262ab8fbf03537ba01c49551f39ddc3b9"],"a6223995486fddc7e4fde49d8798baf50b60dd9c":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","e62f57eded31ecb5e6b09f8edad73ba2819a5269"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["3bb13258feba31ab676502787ab2e1779f129b7a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9d9916984e99244c407152f6cfc2c3bf89a30bc8"],"b3dc5ca262ab8fbf03537ba01c49551f39ddc3b9":["a6223995486fddc7e4fde49d8798baf50b60dd9c"],"e62f57eded31ecb5e6b09f8edad73ba2819a5269":["3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}