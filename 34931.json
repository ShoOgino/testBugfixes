{"path":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testBoostsSimple().mjava","commits":[{"id":"d7846472a0c5e319ab49c405925b78d8e4ded3af","date":1161124017,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testBoostsSimple().mjava","pathOld":"/dev/null","sourceNew":"  public void testBoostsSimple() throws Exception {\n      Map boosts = new HashMap();\n      boosts.put(\"b\", new Float(5));\n      boosts.put(\"t\", new Float(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(fields, new StandardAnalyzer(), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\", q.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testBoostsSimple().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n      Map boosts = new HashMap();\n      boosts.put(\"b\", Float.valueOf(5));\n      boosts.put(\"t\", Float.valueOf(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(fields, new StandardAnalyzer(), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\", q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n      Map boosts = new HashMap();\n      boosts.put(\"b\", new Float(5));\n      boosts.put(\"t\", new Float(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(fields, new StandardAnalyzer(), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testBoostsSimple().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n      Map boosts = new HashMap();\n      boosts.put(\"b\", Float.valueOf(5));\n      boosts.put(\"t\", Float.valueOf(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(fields, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\", q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n      Map boosts = new HashMap();\n      boosts.put(\"b\", Float.valueOf(5));\n      boosts.put(\"t\", Float.valueOf(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(fields, new StandardAnalyzer(), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testBoostsSimple().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n      Map boosts = new HashMap();\n      boosts.put(\"b\", Float.valueOf(5));\n      boosts.put(\"t\", Float.valueOf(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(Version.LUCENE_CURRENT, fields, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\", q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n      Map boosts = new HashMap();\n      boosts.put(\"b\", Float.valueOf(5));\n      boosts.put(\"t\", Float.valueOf(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(fields, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testBoostsSimple().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n      Map<String,Float> boosts = new HashMap<String,Float>();\n      boosts.put(\"b\", Float.valueOf(5));\n      boosts.put(\"t\", Float.valueOf(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(Version.LUCENE_CURRENT, fields, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\", q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n      Map boosts = new HashMap();\n      boosts.put(\"b\", Float.valueOf(5));\n      boosts.put(\"t\", Float.valueOf(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(Version.LUCENE_CURRENT, fields, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testBoostsSimple().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n      Map<String,Float> boosts = new HashMap<String,Float>();\n      boosts.put(\"b\", Float.valueOf(5));\n      boosts.put(\"t\", Float.valueOf(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new StandardAnalyzer(TEST_VERSION_CURRENT), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\", q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n      Map<String,Float> boosts = new HashMap<String,Float>();\n      boosts.put(\"b\", Float.valueOf(5));\n      boosts.put(\"t\", Float.valueOf(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(Version.LUCENE_CURRENT, fields, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testBoostsSimple().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n      Map<String,Float> boosts = new HashMap<String,Float>();\n      boosts.put(\"b\", Float.valueOf(5));\n      boosts.put(\"t\", Float.valueOf(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new StandardAnalyzer(TEST_VERSION_CURRENT), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\", q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n      Map<String,Float> boosts = new HashMap<String,Float>();\n      boosts.put(\"b\", Float.valueOf(5));\n      boosts.put(\"t\", Float.valueOf(10));\n      String[] fields = {\"b\", \"t\"};\n      MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new StandardAnalyzer(TEST_VERSION_CURRENT), boosts);\n      \n      \n      //Check for simple\n      Query q = mfqp.parse(\"one\");\n      assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n      \n      //Check for AND\n      q = mfqp.parse(\"one AND two\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for OR\n      q = mfqp.parse(\"one OR two\");\n      assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n      \n      //Check for AND and a field\n      q = mfqp.parse(\"one AND two AND foo:test\");\n      assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q.toString());\n      \n      q = mfqp.parse(\"one^3 AND two^4\");\n      assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\", q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bcde5e3f23911110baa101ed062b544162825b5":["d7846472a0c5e319ab49c405925b78d8e4ded3af"],"d7846472a0c5e319ab49c405925b78d8e4ded3af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["6bcde5e3f23911110baa101ed062b544162825b5"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["ba1116b3450a9c1642c89445d131b37344055245"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"ba1116b3450a9c1642c89445d131b37344055245":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"]},"commit2Childs":{"6bcde5e3f23911110baa101ed062b544162825b5":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"d7846472a0c5e319ab49c405925b78d8e4ded3af":["6bcde5e3f23911110baa101ed062b544162825b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d7846472a0c5e319ab49c405925b78d8e4ded3af"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["ba1116b3450a9c1642c89445d131b37344055245"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"ba1116b3450a9c1642c89445d131b37344055245":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}