{"path":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","sourceNew":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.getUniqueTermCount());\n      TermsEnum termsEnum = vector.iterator(null);\n      DocsEnum docsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        docsEnum = _TestUtil.docs(random, termsEnum, null, docsEnum, false);\n        assertNotNull(docsEnum);\n        int doc = docsEnum.docID();\n        assertTrue(doc == -1 || doc == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(docsEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.getUniqueTermCount());\n      TermsEnum termsEnum = vector.iterator(null);\n      DocsEnum docsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        docsEnum = _TestUtil.docs(random, termsEnum, null, docsEnum, false);\n        assertNotNull(docsEnum);\n        int doc = docsEnum.docID();\n        assertTrue(doc == -1 || doc == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(docsEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","sourceNew":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.getUniqueTermCount());\n      TermsEnum termsEnum = vector.iterator(null);\n      DocsEnum docsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        docsEnum = _TestUtil.docs(random, termsEnum, null, docsEnum, false);\n        assertNotNull(docsEnum);\n        int doc = docsEnum.docID();\n        assertTrue(doc == -1 || doc == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.getUniqueTermCount());\n      TermsEnum termsEnum = vector.iterator(null);\n      DocsEnum docsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        docsEnum = _TestUtil.docs(random, termsEnum, null, docsEnum, false);\n        assertNotNull(docsEnum);\n        int doc = docsEnum.docID();\n        assertTrue(doc == -1 || doc == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(docsEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","sourceNew":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.getUniqueTermCount());\n      TermsEnum termsEnum = vector.iterator(null);\n      DocsEnum docsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        docsEnum = _TestUtil.docs(random, termsEnum, null, docsEnum, false);\n        assertNotNull(docsEnum);\n        int doc = docsEnum.docID();\n        assertTrue(doc == -1 || doc == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.getUniqueTermCount());\n      TermsEnum termsEnum = vector.iterator(null);\n      DocsEnum docsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        docsEnum = _TestUtil.docs(random, termsEnum, null, docsEnum, false);\n        assertNotNull(docsEnum);\n        int doc = docsEnum.docID();\n        assertTrue(doc == -1 || doc == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(docsEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bdb5e42b0cecd8dfb27767a02ada71899bf17917","date":1334100099,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","sourceNew":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator(null);\n      DocsEnum docsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        docsEnum = _TestUtil.docs(random, termsEnum, null, docsEnum, false);\n        assertNotNull(docsEnum);\n        int doc = docsEnum.docID();\n        assertTrue(doc == -1 || doc == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.getUniqueTermCount());\n      TermsEnum termsEnum = vector.iterator(null);\n      DocsEnum docsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        docsEnum = _TestUtil.docs(random, termsEnum, null, docsEnum, false);\n        assertNotNull(docsEnum);\n        int doc = docsEnum.docID();\n        assertTrue(doc == -1 || doc == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a238fc456663f685a9db1ed8d680e348bb45171","date":1334173266,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","sourceNew":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator(null);\n      DocsEnum docsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        docsEnum = _TestUtil.docs(random, termsEnum, null, docsEnum, false);\n        assertNotNull(docsEnum);\n        int doc = docsEnum.docID();\n        assertTrue(doc == -1 || doc == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.getUniqueTermCount());\n      TermsEnum termsEnum = vector.iterator(null);\n      DocsEnum docsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        docsEnum = _TestUtil.docs(random, termsEnum, null, docsEnum, false);\n        assertNotNull(docsEnum);\n        int doc = docsEnum.docID();\n        assertTrue(doc == -1 || doc == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","sourceNew":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random()));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator(null);\n      DocsEnum docsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        docsEnum = _TestUtil.docs(random(), termsEnum, null, docsEnum, false);\n        assertNotNull(docsEnum);\n        int doc = docsEnum.docID();\n        assertTrue(doc == -1 || doc == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator(null);\n      DocsEnum docsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        docsEnum = _TestUtil.docs(random, termsEnum, null, docsEnum, false);\n        assertNotNull(docsEnum);\n        int doc = docsEnum.docID();\n        assertTrue(doc == -1 || doc == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":["02331260bb246364779cb6f04919ca47900d01bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","sourceNew":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg.info, fieldInfos, newIOContext(random()));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator(null);\n      DocsEnum docsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        docsEnum = _TestUtil.docs(random(), termsEnum, null, docsEnum, false);\n        assertNotNull(docsEnum);\n        int doc = docsEnum.docID();\n        assertTrue(doc == -1 || doc == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random()));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator(null);\n      DocsEnum docsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        docsEnum = _TestUtil.docs(random(), termsEnum, null, docsEnum, false);\n        assertNotNull(docsEnum);\n        int doc = docsEnum.docID();\n        assertTrue(doc == -1 || doc == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","sourceNew":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg.info, fieldInfos, newIOContext(random()));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator(null);\n      DocsEnum docsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        docsEnum = _TestUtil.docs(random(), termsEnum, null, docsEnum, false);\n        assertNotNull(docsEnum);\n        int doc = docsEnum.docID();\n        assertTrue(doc == -1 || doc == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random()));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator(null);\n      DocsEnum docsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        docsEnum = _TestUtil.docs(random(), termsEnum, null, docsEnum, false);\n        assertNotNull(docsEnum);\n        int doc = docsEnum.docID();\n        assertTrue(doc == -1 || doc == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","sourceNew":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg.info, fieldInfos, newIOContext(random()));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator(null);\n      DocsEnum docsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        docsEnum = _TestUtil.docs(random(), termsEnum, null, docsEnum, 0);\n        assertNotNull(docsEnum);\n        int doc = docsEnum.docID();\n        assertTrue(doc == -1 || doc == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg.info, fieldInfos, newIOContext(random()));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator(null);\n      DocsEnum docsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        docsEnum = _TestUtil.docs(random(), termsEnum, null, docsEnum, false);\n        assertNotNull(docsEnum);\n        int doc = docsEnum.docID();\n        assertTrue(doc == -1 || doc == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","bugFix":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","sourceNew":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg.info, fieldInfos, newIOContext(random()));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator(null);\n      DocsEnum docsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        docsEnum = _TestUtil.docs(random(), termsEnum, null, docsEnum, 0);\n        assertNotNull(docsEnum);\n        int doc = docsEnum.docID();\n        assertTrue(doc == -1 || doc == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg.info, fieldInfos, newIOContext(random()));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator(null);\n      DocsEnum docsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        docsEnum = _TestUtil.docs(random(), termsEnum, null, docsEnum, false);\n        assertNotNull(docsEnum);\n        int doc = docsEnum.docID();\n        assertTrue(doc == -1 || doc == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","sourceNew":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg.info, fieldInfos, newIOContext(random()));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator(null);\n      DocsEnum docsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        docsEnum = _TestUtil.docs(random(), termsEnum, null, docsEnum, 0);\n        assertNotNull(docsEnum);\n        int doc = docsEnum.docID();\n        assertTrue(doc == -1 || doc == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg.info, fieldInfos, newIOContext(random()));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator(null);\n      DocsEnum docsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        docsEnum = _TestUtil.docs(random(), termsEnum, null, docsEnum, false);\n        assertNotNull(docsEnum);\n        int doc = docsEnum.docID();\n        assertTrue(doc == -1 || doc == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15250ca94ba8ab3bcdd476daf6bf3f3febb92640","date":1355200097,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","sourceNew":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg.info, fieldInfos, newIOContext(random()));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator(null);\n      DocsEnum docsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        docsEnum = _TestUtil.docs(random(), termsEnum, null, docsEnum, DocsEnum.FLAG_NONE);\n        assertNotNull(docsEnum);\n        int doc = docsEnum.docID();\n        assertTrue(doc == -1 || doc == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg.info, fieldInfos, newIOContext(random()));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator(null);\n      DocsEnum docsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        docsEnum = _TestUtil.docs(random(), termsEnum, null, docsEnum, 0);\n        assertNotNull(docsEnum);\n        int doc = docsEnum.docID();\n        assertTrue(doc == -1 || doc == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","sourceNew":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg.info, fieldInfos, newIOContext(random()));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator(null);\n      DocsEnum docsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        docsEnum = _TestUtil.docs(random(), termsEnum, null, docsEnum, DocsEnum.FLAG_NONE);\n        assertNotNull(docsEnum);\n        int doc = docsEnum.docID();\n        assertTrue(doc == -1 || doc == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg.info, fieldInfos, newIOContext(random()));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator(null);\n      DocsEnum docsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        docsEnum = _TestUtil.docs(random(), termsEnum, null, docsEnum, 0);\n        assertNotNull(docsEnum);\n        int doc = docsEnum.docID();\n        assertTrue(doc == -1 || doc == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af527d067afb6ca5bd58afc7b9a5fbc0f80979af","date":1366034882,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","sourceNew":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg.info, fieldInfos, newIOContext(random()));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator(null);\n      DocsEnum docsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        docsEnum = _TestUtil.docs(random(), termsEnum, null, docsEnum, DocsEnum.FLAG_NONE);\n        assertNotNull(docsEnum);\n        int doc = docsEnum.docID();\n        assertEquals(-1, doc);\n        assertTrue(docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg.info, fieldInfos, newIOContext(random()));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator(null);\n      DocsEnum docsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        docsEnum = _TestUtil.docs(random(), termsEnum, null, docsEnum, DocsEnum.FLAG_NONE);\n        assertNotNull(docsEnum);\n        int doc = docsEnum.docID();\n        assertTrue(doc == -1 || doc == DocIdSetIterator.NO_MORE_DOCS);\n        assertTrue(docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","sourceNew":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg.info, fieldInfos, newIOContext(random()));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator(null);\n      DocsEnum docsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        docsEnum = TestUtil.docs(random(), termsEnum, null, docsEnum, DocsEnum.FLAG_NONE);\n        assertNotNull(docsEnum);\n        int doc = docsEnum.docID();\n        assertEquals(-1, doc);\n        assertTrue(docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg.info, fieldInfos, newIOContext(random()));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator(null);\n      DocsEnum docsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        docsEnum = _TestUtil.docs(random(), termsEnum, null, docsEnum, DocsEnum.FLAG_NONE);\n        assertNotNull(docsEnum);\n        int doc = docsEnum.docID();\n        assertEquals(-1, doc);\n        assertTrue(docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","sourceNew":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg.info, fieldInfos, newIOContext(random()));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator(null);\n      PostingsEnum postingsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        postingsEnum = TestUtil.docs(random(), termsEnum, null, postingsEnum, PostingsEnum.FLAG_NONE);\n        assertNotNull(postingsEnum);\n        int doc = postingsEnum.docID();\n        assertEquals(-1, doc);\n        assertTrue(postingsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, postingsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg.info, fieldInfos, newIOContext(random()));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator(null);\n      DocsEnum docsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        docsEnum = TestUtil.docs(random(), termsEnum, null, docsEnum, DocsEnum.FLAG_NONE);\n        assertNotNull(docsEnum);\n        int doc = docsEnum.docID();\n        assertEquals(-1, doc);\n        assertTrue(docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, docsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","sourceNew":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg.info, fieldInfos, newIOContext(random()));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator(null);\n      PostingsEnum postingsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        postingsEnum = TestUtil.docs(random(), termsEnum, null, postingsEnum, PostingsEnum.NONE);\n        assertNotNull(postingsEnum);\n        int doc = postingsEnum.docID();\n        assertEquals(-1, doc);\n        assertTrue(postingsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, postingsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg.info, fieldInfos, newIOContext(random()));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator(null);\n      PostingsEnum postingsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        postingsEnum = TestUtil.docs(random(), termsEnum, null, postingsEnum, PostingsEnum.FLAG_NONE);\n        assertNotNull(postingsEnum);\n        int doc = postingsEnum.docID();\n        assertEquals(-1, doc);\n        assertTrue(postingsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, postingsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","sourceNew":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg.info, fieldInfos, newIOContext(random()));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator();\n      PostingsEnum postingsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        postingsEnum = TestUtil.docs(random(), termsEnum, null, postingsEnum, PostingsEnum.NONE);\n        assertNotNull(postingsEnum);\n        int doc = postingsEnum.docID();\n        assertEquals(-1, doc);\n        assertTrue(postingsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, postingsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg.info, fieldInfos, newIOContext(random()));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator(null);\n      PostingsEnum postingsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        postingsEnum = TestUtil.docs(random(), termsEnum, null, postingsEnum, PostingsEnum.NONE);\n        assertNotNull(postingsEnum);\n        int doc = postingsEnum.docID();\n        assertEquals(-1, doc);\n        assertTrue(postingsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, postingsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testDocsEnum().mjava","sourceNew":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg.info, fieldInfos, newIOContext(random()));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator();\n      PostingsEnum postingsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        postingsEnum = TestUtil.docs(random(), termsEnum, postingsEnum, PostingsEnum.NONE);\n        assertNotNull(postingsEnum);\n        int doc = postingsEnum.docID();\n        assertEquals(-1, doc);\n        assertTrue(postingsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, postingsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testDocsEnum() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg.info, fieldInfos, newIOContext(random()));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.size());\n      TermsEnum termsEnum = vector.iterator();\n      PostingsEnum postingsEnum = null;\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n        \n        postingsEnum = TestUtil.docs(random(), termsEnum, null, postingsEnum, PostingsEnum.NONE);\n        assertNotNull(postingsEnum);\n        int doc = postingsEnum.docID();\n        assertEquals(-1, doc);\n        assertTrue(postingsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(DocIdSetIterator.NO_MORE_DOCS, postingsEnum.nextDoc());\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["02331260bb246364779cb6f04919ca47900d01bb","15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"af527d067afb6ca5bd58afc7b9a5fbc0f80979af":["15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"bdb5e42b0cecd8dfb27767a02ada71899bf17917":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"5a238fc456663f685a9db1ed8d680e348bb45171":["f08557cdb6c60ac7b88a9342c983a20cd236e74f","bdb5e42b0cecd8dfb27767a02ada71899bf17917"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"6613659748fe4411a7dcf85266e55db1f95f7315":["af527d067afb6ca5bd58afc7b9a5fbc0f80979af"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"51f5280f31484820499077f41fcdfe92d527d9dc":["6613659748fe4411a7dcf85266e55db1f95f7315"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","9d153abcf92dc5329d98571a8c3035df9bd80648"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["02331260bb246364779cb6f04919ca47900d01bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","02331260bb246364779cb6f04919ca47900d01bb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","02331260bb246364779cb6f04919ca47900d01bb"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["bdb5e42b0cecd8dfb27767a02ada71899bf17917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"02331260bb246364779cb6f04919ca47900d01bb":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"af527d067afb6ca5bd58afc7b9a5fbc0f80979af":["6613659748fe4411a7dcf85266e55db1f95f7315"],"bdb5e42b0cecd8dfb27767a02ada71899bf17917":["5a238fc456663f685a9db1ed8d680e348bb45171","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"5a238fc456663f685a9db1ed8d680e348bb45171":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["bdb5e42b0cecd8dfb27767a02ada71899bf17917","5a238fc456663f685a9db1ed8d680e348bb45171","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"6613659748fe4411a7dcf85266e55db1f95f7315":["51f5280f31484820499077f41fcdfe92d527d9dc"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","02331260bb246364779cb6f04919ca47900d01bb"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","af527d067afb6ca5bd58afc7b9a5fbc0f80979af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["9d153abcf92dc5329d98571a8c3035df9bd80648","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"02331260bb246364779cb6f04919ca47900d01bb":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","15250ca94ba8ab3bcdd476daf6bf3f3febb92640","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","5a238fc456663f685a9db1ed8d680e348bb45171","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}