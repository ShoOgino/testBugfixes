{"path":"solr/core/src/java/org/apache/solr/search/facet/UniqueMultivaluedSlotAcc[UniqueSlotAcc]#collect(int,int).mjava","commits":[{"id":"2ddd9456ddbc1edc62d5a14a84ad0e4fcd74a008","date":1431878853,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UniqueMultivaluedSlotAcc[UniqueSlotAcc]#collect(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UniqueMultivaluedSlotAcc[SlotAcc]#collect(int,int).mjava","sourceNew":"  @Override\n  public void collect(int doc, int slotNum) throws IOException {\n    bits = arr[slotNum];\n    if (bits == null) {\n      bits = new FixedBitSet(nTerms);\n      arr[slotNum] = bits;\n    }\n    docToTerm.getTerms(doc + currentDocBase, this);  // this will call back to our Callback.call(int termNum)\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc, int slotNum) throws IOException {\n    bits = arr[slotNum];\n    if (bits == null) {\n      bits = new FixedBitSet(nTerms);\n      arr[slotNum] = bits;\n    }\n    docToTerm.getTerms(doc + currentDocBase, this);  // this will call back to our Callback.call(int termNum)\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e13d0d4d8b6dc352cb304974502b9a36c153f78","date":1436492687,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UniqueMultivaluedSlotAcc[UniqueSlotAcc]#collect(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UniqueMultivaluedSlotAcc[UniqueSlotAcc]#collect(int,int).mjava","sourceNew":"  @Override\n  public void collect(int doc, int slotNum) throws IOException {\n    bits = arr[slotNum];\n    if (bits == null) {\n      bits = new FixedBitSet(nTerms);\n      arr[slotNum] = bits;\n    }\n    docToTerm.getBigTerms(doc + currentDocBase, this);  // this will call back to our Callback.call(int termNum)\n    docToTerm.getSmallTerms(doc + currentDocBase, this);\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc, int slotNum) throws IOException {\n    bits = arr[slotNum];\n    if (bits == null) {\n      bits = new FixedBitSet(nTerms);\n      arr[slotNum] = bits;\n    }\n    docToTerm.getTerms(doc + currentDocBase, this);  // this will call back to our Callback.call(int termNum)\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1319edcea595da81eb75d406bc82df2c3926862c","date":1463421250,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UniqueMultivaluedSlotAcc#collect(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UniqueMultivaluedSlotAcc[UniqueSlotAcc]#collect(int,int).mjava","sourceNew":"  @Override\n  public void collect(int doc, int slotNum) throws IOException {\n    bits = arr[slotNum];\n    if (bits == null) {\n      bits = new FixedBitSet(nTerms);\n      arr[slotNum] = bits;\n    }\n    docToTerm.getBigTerms(doc + currentDocBase, this);  // this will call back to our Callback.call(int termNum)\n    docToTerm.getSmallTerms(doc + currentDocBase, this);\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc, int slotNum) throws IOException {\n    bits = arr[slotNum];\n    if (bits == null) {\n      bits = new FixedBitSet(nTerms);\n      arr[slotNum] = bits;\n    }\n    docToTerm.getBigTerms(doc + currentDocBase, this);  // this will call back to our Callback.call(int termNum)\n    docToTerm.getSmallTerms(doc + currentDocBase, this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UniqueMultivaluedSlotAcc#collect(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UniqueMultivaluedSlotAcc[UniqueSlotAcc]#collect(int,int).mjava","sourceNew":"  @Override\n  public void collect(int doc, int slotNum) throws IOException {\n    bits = arr[slotNum];\n    if (bits == null) {\n      bits = new FixedBitSet(nTerms);\n      arr[slotNum] = bits;\n    }\n    docToTerm.getBigTerms(doc + currentDocBase, this);  // this will call back to our Callback.call(int termNum)\n    docToTerm.getSmallTerms(doc + currentDocBase, this);\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc, int slotNum) throws IOException {\n    bits = arr[slotNum];\n    if (bits == null) {\n      bits = new FixedBitSet(nTerms);\n      arr[slotNum] = bits;\n    }\n    docToTerm.getBigTerms(doc + currentDocBase, this);  // this will call back to our Callback.call(int termNum)\n    docToTerm.getSmallTerms(doc + currentDocBase, this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UniqueMultivaluedSlotAcc#collect(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UniqueMultivaluedSlotAcc[UniqueSlotAcc]#collect(int,int).mjava","sourceNew":"  @Override\n  public void collect(int doc, int slotNum) throws IOException {\n    bits = arr[slotNum];\n    if (bits == null) {\n      bits = new FixedBitSet(nTerms);\n      arr[slotNum] = bits;\n    }\n    docToTerm.getBigTerms(doc + currentDocBase, this);  // this will call back to our Callback.call(int termNum)\n    docToTerm.getSmallTerms(doc + currentDocBase, this);\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc, int slotNum) throws IOException {\n    bits = arr[slotNum];\n    if (bits == null) {\n      bits = new FixedBitSet(nTerms);\n      arr[slotNum] = bits;\n    }\n    docToTerm.getBigTerms(doc + currentDocBase, this);  // this will call back to our Callback.call(int termNum)\n    docToTerm.getSmallTerms(doc + currentDocBase, this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9e13d0d4d8b6dc352cb304974502b9a36c153f78":["2ddd9456ddbc1edc62d5a14a84ad0e4fcd74a008"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2ddd9456ddbc1edc62d5a14a84ad0e4fcd74a008":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1319edcea595da81eb75d406bc82df2c3926862c":["9e13d0d4d8b6dc352cb304974502b9a36c153f78"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9e13d0d4d8b6dc352cb304974502b9a36c153f78","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["9e13d0d4d8b6dc352cb304974502b9a36c153f78","1319edcea595da81eb75d406bc82df2c3926862c"]},"commit2Childs":{"9e13d0d4d8b6dc352cb304974502b9a36c153f78":["1319edcea595da81eb75d406bc82df2c3926862c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2ddd9456ddbc1edc62d5a14a84ad0e4fcd74a008"],"2ddd9456ddbc1edc62d5a14a84ad0e4fcd74a008":["9e13d0d4d8b6dc352cb304974502b9a36c153f78"],"1319edcea595da81eb75d406bc82df2c3926862c":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}