{"path":"lucene/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","commits":[{"id":"744486748bc5bee772100e49230e5bca39bac99a","date":1289776426,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector(result instanceof BooleanQuery);\n    collectTerms(reader, query, col);\n    \n    final Term placeholderTerm = new Term(query.field);\n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(col.termsEnum.getComparator());\n      final int[] docFreq = col.array.docFreq;\n      final float[] boost = col.array.boost;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = placeholderTerm.createTerm(col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == docFreq[pos];\n        addClause(result, term, docFreq[pos], query.getBoost() * boost[pos]);\n      }\n    }\n    query.incTotalNumberOfTerms(size);\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a6b2a07dc225cbe9888ac7543b1f557a3fa8961","date":1289809333,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final Term placeholderTerm = new Term(query.field);\n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(col.termsEnum.getComparator());\n      final int[] docFreq = col.array.docFreq;\n      final float[] boost = col.array.boost;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = placeholderTerm.createTerm(col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == docFreq[pos];\n        addClause(result, term, docFreq[pos], query.getBoost() * boost[pos]);\n      }\n    }\n    query.incTotalNumberOfTerms(size);\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector(result instanceof BooleanQuery);\n    collectTerms(reader, query, col);\n    \n    final Term placeholderTerm = new Term(query.field);\n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(col.termsEnum.getComparator());\n      final int[] docFreq = col.array.docFreq;\n      final float[] boost = col.array.boost;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = placeholderTerm.createTerm(col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == docFreq[pos];\n        addClause(result, term, docFreq[pos], query.getBoost() * boost[pos]);\n      }\n    }\n    query.incTotalNumberOfTerms(size);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final Term placeholderTerm = new Term(query.field);\n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(col.termsEnum.getComparator());\n      final int[] docFreq = col.array.docFreq;\n      final float[] boost = col.array.boost;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = placeholderTerm.createTerm(col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == docFreq[pos];\n        addClause(result, term, docFreq[pos], query.getBoost() * boost[pos]);\n      }\n    }\n    query.incTotalNumberOfTerms(size);\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final Term placeholderTerm = new Term(query.field);\n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(col.termsEnum.getComparator());\n      final int[] docFreq = col.array.docFreq;\n      final float[] boost = col.array.boost;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = placeholderTerm.createTerm(col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == docFreq[pos];\n        addClause(result, term, docFreq[pos], query.getBoost() * boost[pos]);\n      }\n    }\n    query.incTotalNumberOfTerms(size);\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa1a999d6674423e5c4ac858b410283f6fe03f20","date":1294868331,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final Term placeholderTerm = new Term(query.field);\n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(col.termsEnum.getComparator());\n      final float[] boost = col.array.boost;\n      final PerReaderTermState[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = placeholderTerm.createTerm(col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(result, term, termStates[pos].docFreq(), query.getBoost() * boost[pos], termStates[pos]);\n      }\n    }\n    query.incTotalNumberOfTerms(size);\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final Term placeholderTerm = new Term(query.field);\n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(col.termsEnum.getComparator());\n      final int[] docFreq = col.array.docFreq;\n      final float[] boost = col.array.boost;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = placeholderTerm.createTerm(col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == docFreq[pos];\n        addClause(result, term, docFreq[pos], query.getBoost() * boost[pos]);\n      }\n    }\n    query.incTotalNumberOfTerms(size);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final Term placeholderTerm = new Term(query.field);\n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(col.termsEnum.getComparator());\n      final float[] boost = col.array.boost;\n      final PerReaderTermState[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = placeholderTerm.createTerm(col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(result, term, termStates[pos].docFreq(), query.getBoost() * boost[pos], termStates[pos]);\n      }\n    }\n    query.incTotalNumberOfTerms(size);\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final Term placeholderTerm = new Term(query.field);\n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(col.termsEnum.getComparator());\n      final int[] docFreq = col.array.docFreq;\n      final float[] boost = col.array.boost;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = placeholderTerm.createTerm(col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == docFreq[pos];\n        addClause(result, term, docFreq[pos], query.getBoost() * boost[pos]);\n      }\n    }\n    query.incTotalNumberOfTerms(size);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final Term placeholderTerm = new Term(query.field);\n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(col.termsEnum.getComparator());\n      final float[] boost = col.array.boost;\n      final PerReaderTermState[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = placeholderTerm.createTerm(col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(result, term, termStates[pos].docFreq(), query.getBoost() * boost[pos], termStates[pos]);\n      }\n    }\n    query.incTotalNumberOfTerms(size);\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final Term placeholderTerm = new Term(query.field);\n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(col.termsEnum.getComparator());\n      final int[] docFreq = col.array.docFreq;\n      final float[] boost = col.array.boost;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = placeholderTerm.createTerm(col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == docFreq[pos];\n        addClause(result, term, docFreq[pos], query.getBoost() * boost[pos]);\n      }\n    }\n    query.incTotalNumberOfTerms(size);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","date":1308670974,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(col.termsEnum.getComparator());\n      final float[] boost = col.array.boost;\n      final PerReaderTermState[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(result, term, termStates[pos].docFreq(), query.getBoost() * boost[pos], termStates[pos]);\n      }\n    }\n    query.incTotalNumberOfTerms(size);\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final Term placeholderTerm = new Term(query.field);\n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(col.termsEnum.getComparator());\n      final float[] boost = col.array.boost;\n      final PerReaderTermState[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = placeholderTerm.createTerm(col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(result, term, termStates[pos].docFreq(), query.getBoost() * boost[pos], termStates[pos]);\n      }\n    }\n    query.incTotalNumberOfTerms(size);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(col.termsEnum.getComparator());\n      final float[] boost = col.array.boost;\n      final PerReaderTermState[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(result, term, termStates[pos].docFreq(), query.getBoost() * boost[pos], termStates[pos]);\n      }\n    }\n    query.incTotalNumberOfTerms(size);\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final Term placeholderTerm = new Term(query.field);\n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(col.termsEnum.getComparator());\n      final float[] boost = col.array.boost;\n      final PerReaderTermState[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = placeholderTerm.createTerm(col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(result, term, termStates[pos].docFreq(), query.getBoost() * boost[pos], termStates[pos]);\n      }\n    }\n    query.incTotalNumberOfTerms(size);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(col.termsEnum.getComparator());\n      final float[] boost = col.array.boost;\n      final PerReaderTermState[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(result, term, termStates[pos].docFreq(), query.getBoost() * boost[pos], termStates[pos]);\n      }\n    }\n    query.incTotalNumberOfTerms(size);\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final Term placeholderTerm = new Term(query.field);\n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(col.termsEnum.getComparator());\n      final float[] boost = col.array.boost;\n      final PerReaderTermState[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = placeholderTerm.createTerm(col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(result, term, termStates[pos].docFreq(), query.getBoost() * boost[pos], termStates[pos]);\n      }\n    }\n    query.incTotalNumberOfTerms(size);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(col.termsEnum.getComparator());\n      final float[] boost = col.array.boost;\n      final TermContext[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(result, term, termStates[pos].docFreq(), query.getBoost() * boost[pos], termStates[pos]);\n      }\n    }\n    query.incTotalNumberOfTerms(size);\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(col.termsEnum.getComparator());\n      final float[] boost = col.array.boost;\n      final PerReaderTermState[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(result, term, termStates[pos].docFreq(), query.getBoost() * boost[pos], termStates[pos]);\n      }\n    }\n    query.incTotalNumberOfTerms(size);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(col.termsEnum.getComparator());\n      final float[] boost = col.array.boost;\n      final TermContext[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(result, term, termStates[pos].docFreq(), query.getBoost() * boost[pos], termStates[pos]);\n      }\n    }\n    query.incTotalNumberOfTerms(size);\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(col.termsEnum.getComparator());\n      final float[] boost = col.array.boost;\n      final PerReaderTermState[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(result, term, termStates[pos].docFreq(), query.getBoost() * boost[pos], termStates[pos]);\n      }\n    }\n    query.incTotalNumberOfTerms(size);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(col.termsEnum.getComparator());\n      final float[] boost = col.array.boost;\n      final TermContext[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(result, term, termStates[pos].docFreq(), query.getBoost() * boost[pos], termStates[pos]);\n      }\n    }\n    query.incTotalNumberOfTerms(size);\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(col.termsEnum.getComparator());\n      final float[] boost = col.array.boost;\n      final PerReaderTermState[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(result, term, termStates[pos].docFreq(), query.getBoost() * boost[pos], termStates[pos]);\n      }\n    }\n    query.incTotalNumberOfTerms(size);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a4965b25e439626b575c2281b39ad875f89d891","date":1321132400,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(col.termsEnum.getComparator());\n      final float[] boost = col.array.boost;\n      final TermContext[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(result, term, termStates[pos].docFreq(), query.getBoost() * boost[pos], termStates[pos]);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(col.termsEnum.getComparator());\n      final float[] boost = col.array.boost;\n      final TermContext[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(result, term, termStates[pos].docFreq(), query.getBoost() * boost[pos], termStates[pos]);\n      }\n    }\n    query.incTotalNumberOfTerms(size);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(col.termsEnum.getComparator());\n      final float[] boost = col.array.boost;\n      final TermContext[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        // nocommit: reenable this: assert reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(result, term, termStates[pos].docFreq(), query.getBoost() * boost[pos], termStates[pos]);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(col.termsEnum.getComparator());\n      final float[] boost = col.array.boost;\n      final TermContext[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(result, term, termStates[pos].docFreq(), query.getBoost() * boost[pos], termStates[pos]);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85dda37116c8d94fccd74dfe59f4d7fe4503e74c","date":1327234819,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(col.termsEnum.getComparator());\n      final float[] boost = col.array.boost;\n      final TermContext[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(result, term, termStates[pos].docFreq(), query.getBoost() * boost[pos], termStates[pos]);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(col.termsEnum.getComparator());\n      final float[] boost = col.array.boost;\n      final TermContext[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        // nocommit: reenable this: assert reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(result, term, termStates[pos].docFreq(), query.getBoost() * boost[pos], termStates[pos]);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ScoringRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(col.termsEnum.getComparator());\n      final float[] boost = col.array.boost;\n      final TermContext[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(result, term, termStates[pos].docFreq(), query.getBoost() * boost[pos], termStates[pos]);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public final Q rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n    final Q result = getTopLevelQuery();\n    final ParallelArraysTermCollector col = new ParallelArraysTermCollector();\n    collectTerms(reader, query, col);\n    \n    final int size = col.terms.size();\n    if (size > 0) {\n      final int sort[] = col.terms.sort(col.termsEnum.getComparator());\n      final float[] boost = col.array.boost;\n      final TermContext[] termStates = col.array.termState;\n      for (int i = 0; i < size; i++) {\n        final int pos = sort[i];\n        final Term term = new Term(query.getField(), col.terms.get(pos, new BytesRef()));\n        assert reader.docFreq(term) == termStates[pos].docFreq();\n        addClause(result, term, termStates[pos].docFreq(), query.getBoost() * boost[pos], termStates[pos]);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f3cee3d20b0c786e6fca20539454262e29edcab":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"85dda37116c8d94fccd74dfe59f4d7fe4503e74c":["2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a6b2a07dc225cbe9888ac7543b1f557a3fa8961"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["2a4965b25e439626b575c2281b39ad875f89d891"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["fa1a999d6674423e5c4ac858b410283f6fe03f20"],"5a6b2a07dc225cbe9888ac7543b1f557a3fa8961":["744486748bc5bee772100e49230e5bca39bac99a"],"2553b00f699380c64959ccb27991289aae87be2e":["fa1a999d6674423e5c4ac858b410283f6fe03f20","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a6b2a07dc225cbe9888ac7543b1f557a3fa8961"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["fa1a999d6674423e5c4ac858b410283f6fe03f20","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"1291e4568eb7d9463d751627596ef14baf4c1603":["d083e83f225b11e5fdd900e83d26ddb385b6955c","0f3cee3d20b0c786e6fca20539454262e29edcab"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["2553b00f699380c64959ccb27991289aae87be2e","0f3cee3d20b0c786e6fca20539454262e29edcab"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2a4965b25e439626b575c2281b39ad875f89d891":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["5a6b2a07dc225cbe9888ac7543b1f557a3fa8961"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"744486748bc5bee772100e49230e5bca39bac99a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["2a4965b25e439626b575c2281b39ad875f89d891"]},"commit2Childs":{"0f3cee3d20b0c786e6fca20539454262e29edcab":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","2a4965b25e439626b575c2281b39ad875f89d891"],"85dda37116c8d94fccd74dfe59f4d7fe4503e74c":[],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["0f3cee3d20b0c786e6fca20539454262e29edcab","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"5a6b2a07dc225cbe9888ac7543b1f557a3fa8961":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2553b00f699380c64959ccb27991289aae87be2e":["f0b9507caf22f292ac0e5e59f62db4275adf4511"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["1291e4568eb7d9463d751627596ef14baf4c1603"],"1291e4568eb7d9463d751627596ef14baf4c1603":[],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","744486748bc5bee772100e49230e5bca39bac99a"],"2a4965b25e439626b575c2281b39ad875f89d891":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"744486748bc5bee772100e49230e5bca39bac99a":["5a6b2a07dc225cbe9888ac7543b1f557a3fa8961"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["85dda37116c8d94fccd74dfe59f4d7fe4503e74c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["85dda37116c8d94fccd74dfe59f4d7fe4503e74c","1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}