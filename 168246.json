{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#getReplicaMetricsValues(String,Collection[String]).mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#getReplicaMetricsValues(String,Collection[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Simulate getting replica metrics values. This uses per-replica properties set in\n   * {@link SimClusterStateProvider#simSetCollectionValue(String, String, Object, boolean)} and\n   * similar methods.\n   * @param node node id\n   * @param tags metrics names\n   * @return map of metrics names / values\n   */\n  public Map<String, Object> getReplicaMetricsValues(String node, Collection<String> tags) {\n    List<ReplicaInfo> replicas = clusterStateProvider.simGetReplicaInfos(node);\n    if (replicas == null || replicas.isEmpty()) {\n      return Collections.emptyMap();\n    }\n    Map<String, Object> values = new HashMap<>();\n    for (String tag : tags) {\n      String[] parts = tag.split(\":\");\n      if (parts.length < 3 || !parts[0].equals(\"metrics\")) {\n        LOG.warn(\"Invalid metrics: tag: \" + tag);\n        continue;\n      }\n      if (!parts[1].startsWith(\"solr.core.\")) {\n        // skip - this is probably solr.node or solr.jvm metric\n        continue;\n      }\n      String[] collParts = parts[1].substring(10).split(\"\\\\.\");\n      if (collParts.length != 3) {\n        LOG.warn(\"Invalid registry name: \" + parts[1]);\n        continue;\n      }\n      String collection = collParts[0];\n      String shard = collParts[1];\n      String replica = collParts[2];\n      String key = parts.length > 3 ? parts[2] + \":\" + parts[3] : parts[2];\n      replicas.forEach(r -> {\n        if (r.getCollection().equals(collection) && r.getShard().equals(shard) && r.getCore().endsWith(replica)) {\n          Object value = r.getVariables().get(key);\n          if (value != null) {\n            values.put(tag, value);\n          } else {\n            value = r.getVariables().get(tag);\n            if (value != null) {\n              values.put(tag, value);\n            }\n          }\n        }\n      });\n    }\n    return values;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","date":1523453934,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#getReplicaMetricsValues(String,Collection[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#getReplicaMetricsValues(String,Collection[String]).mjava","sourceNew":"  /**\n   * Simulate getting replica metrics values. This uses per-replica properties set in\n   * {@link SimClusterStateProvider#simSetCollectionValue(String, String, Object, boolean, boolean)} and\n   * similar methods.\n   * @param node node id\n   * @param tags metrics names\n   * @return map of metrics names / values\n   */\n  public Map<String, Object> getReplicaMetricsValues(String node, Collection<String> tags) {\n    List<ReplicaInfo> replicas = clusterStateProvider.simGetReplicaInfos(node);\n    if (replicas == null || replicas.isEmpty()) {\n      return Collections.emptyMap();\n    }\n    Map<String, Object> values = new HashMap<>();\n    for (String tag : tags) {\n      String[] parts = tag.split(\":\");\n      if (parts.length < 3 || !parts[0].equals(\"metrics\")) {\n        LOG.warn(\"Invalid metrics: tag: \" + tag);\n        continue;\n      }\n      if (!parts[1].startsWith(\"solr.core.\")) {\n        // skip - this is probably solr.node or solr.jvm metric\n        continue;\n      }\n      String[] collParts = parts[1].substring(10).split(\"\\\\.\");\n      if (collParts.length != 3) {\n        LOG.warn(\"Invalid registry name: \" + parts[1]);\n        continue;\n      }\n      String collection = collParts[0];\n      String shard = collParts[1];\n      String replica = collParts[2];\n      String key = parts.length > 3 ? parts[2] + \":\" + parts[3] : parts[2];\n      replicas.forEach(r -> {\n        if (r.getCollection().equals(collection) && r.getShard().equals(shard) && r.getCore().endsWith(replica)) {\n          Object value = r.getVariables().get(key);\n          if (value != null) {\n            values.put(tag, value);\n          } else {\n            value = r.getVariables().get(tag);\n            if (value != null) {\n              values.put(tag, value);\n            }\n          }\n        }\n      });\n    }\n    return values;\n  }\n\n","sourceOld":"  /**\n   * Simulate getting replica metrics values. This uses per-replica properties set in\n   * {@link SimClusterStateProvider#simSetCollectionValue(String, String, Object, boolean)} and\n   * similar methods.\n   * @param node node id\n   * @param tags metrics names\n   * @return map of metrics names / values\n   */\n  public Map<String, Object> getReplicaMetricsValues(String node, Collection<String> tags) {\n    List<ReplicaInfo> replicas = clusterStateProvider.simGetReplicaInfos(node);\n    if (replicas == null || replicas.isEmpty()) {\n      return Collections.emptyMap();\n    }\n    Map<String, Object> values = new HashMap<>();\n    for (String tag : tags) {\n      String[] parts = tag.split(\":\");\n      if (parts.length < 3 || !parts[0].equals(\"metrics\")) {\n        LOG.warn(\"Invalid metrics: tag: \" + tag);\n        continue;\n      }\n      if (!parts[1].startsWith(\"solr.core.\")) {\n        // skip - this is probably solr.node or solr.jvm metric\n        continue;\n      }\n      String[] collParts = parts[1].substring(10).split(\"\\\\.\");\n      if (collParts.length != 3) {\n        LOG.warn(\"Invalid registry name: \" + parts[1]);\n        continue;\n      }\n      String collection = collParts[0];\n      String shard = collParts[1];\n      String replica = collParts[2];\n      String key = parts.length > 3 ? parts[2] + \":\" + parts[3] : parts[2];\n      replicas.forEach(r -> {\n        if (r.getCollection().equals(collection) && r.getShard().equals(shard) && r.getCore().endsWith(replica)) {\n          Object value = r.getVariables().get(key);\n          if (value != null) {\n            values.put(tag, value);\n          } else {\n            value = r.getVariables().get(tag);\n            if (value != null) {\n              values.put(tag, value);\n            }\n          }\n        }\n      });\n    }\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#getReplicaMetricsValues(String,Collection[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#getReplicaMetricsValues(String,Collection[String]).mjava","sourceNew":"  /**\n   * Simulate getting replica metrics values. This uses per-replica properties set in\n   * {@link SimClusterStateProvider#simSetCollectionValue(String, String, Object, boolean, boolean)} and\n   * similar methods.\n   * @param node node id\n   * @param tags metrics names\n   * @return map of metrics names / values\n   */\n  public Map<String, Object> getReplicaMetricsValues(String node, Collection<String> tags) {\n    List<ReplicaInfo> replicas = clusterStateProvider.simGetReplicaInfos(node);\n    if (replicas == null || replicas.isEmpty()) {\n      return Collections.emptyMap();\n    }\n    Map<String, Object> values = new HashMap<>();\n    for (String tag : tags) {\n      String[] parts = tag.split(\":\");\n      if (parts.length < 3 || !parts[0].equals(\"metrics\")) {\n        LOG.warn(\"Invalid metrics: tag: \" + tag);\n        continue;\n      }\n      if (!parts[1].startsWith(\"solr.core.\")) {\n        // skip - this is probably solr.node or solr.jvm metric\n        continue;\n      }\n      String[] collParts = parts[1].substring(10).split(\"\\\\.\");\n      if (collParts.length != 3) {\n        LOG.warn(\"Invalid registry name: \" + parts[1]);\n        continue;\n      }\n      String collection = collParts[0];\n      String shard = collParts[1];\n      String replica = collParts[2];\n      String key = parts.length > 3 ? parts[2] + \":\" + parts[3] : parts[2];\n      replicas.forEach(r -> {\n        if (r.getCollection().equals(collection) && r.getShard().equals(shard) && r.getCore().endsWith(replica)) {\n          Object value = r.getVariables().get(key);\n          if (value != null) {\n            values.put(tag, value);\n          } else {\n            value = r.getVariables().get(tag);\n            if (value != null) {\n              values.put(tag, value);\n            }\n          }\n        }\n      });\n    }\n    return values;\n  }\n\n","sourceOld":"  /**\n   * Simulate getting replica metrics values. This uses per-replica properties set in\n   * {@link SimClusterStateProvider#simSetCollectionValue(String, String, Object, boolean)} and\n   * similar methods.\n   * @param node node id\n   * @param tags metrics names\n   * @return map of metrics names / values\n   */\n  public Map<String, Object> getReplicaMetricsValues(String node, Collection<String> tags) {\n    List<ReplicaInfo> replicas = clusterStateProvider.simGetReplicaInfos(node);\n    if (replicas == null || replicas.isEmpty()) {\n      return Collections.emptyMap();\n    }\n    Map<String, Object> values = new HashMap<>();\n    for (String tag : tags) {\n      String[] parts = tag.split(\":\");\n      if (parts.length < 3 || !parts[0].equals(\"metrics\")) {\n        LOG.warn(\"Invalid metrics: tag: \" + tag);\n        continue;\n      }\n      if (!parts[1].startsWith(\"solr.core.\")) {\n        // skip - this is probably solr.node or solr.jvm metric\n        continue;\n      }\n      String[] collParts = parts[1].substring(10).split(\"\\\\.\");\n      if (collParts.length != 3) {\n        LOG.warn(\"Invalid registry name: \" + parts[1]);\n        continue;\n      }\n      String collection = collParts[0];\n      String shard = collParts[1];\n      String replica = collParts[2];\n      String key = parts.length > 3 ? parts[2] + \":\" + parts[3] : parts[2];\n      replicas.forEach(r -> {\n        if (r.getCollection().equals(collection) && r.getShard().equals(shard) && r.getCore().endsWith(replica)) {\n          Object value = r.getVariables().get(key);\n          if (value != null) {\n            values.put(tag, value);\n          } else {\n            value = r.getVariables().get(tag);\n            if (value != null) {\n              values.put(tag, value);\n            }\n          }\n        }\n      });\n    }\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad60b6945c360ff89899d716d9cdec8dd674e2a0","date":1528114819,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#getReplicaMetricsValues(String,Collection[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#getReplicaMetricsValues(String,Collection[String]).mjava","sourceNew":"  /**\n   * Simulate getting replica metrics values. This uses per-replica properties set in\n   * {@link SimClusterStateProvider#simSetCollectionValue(String, String, Object, boolean, boolean)} and\n   * similar methods.\n   * @param node node id\n   * @param tags metrics names\n   * @return map of metrics names / values\n   */\n  public Map<String, Object> getReplicaMetricsValues(String node, Collection<String> tags) {\n    if (!liveNodesSet.contains(node)) {\n      throw new RuntimeException(\"non-live node \" + node);\n    }\n    List<ReplicaInfo> replicas = clusterStateProvider.simGetReplicaInfos(node);\n    if (replicas == null || replicas.isEmpty()) {\n      return Collections.emptyMap();\n    }\n    Map<String, Object> values = new HashMap<>();\n    for (String tag : tags) {\n      String[] parts = tag.split(\":\");\n      if (parts.length < 3 || !parts[0].equals(\"metrics\")) {\n        LOG.warn(\"Invalid metrics: tag: \" + tag);\n        continue;\n      }\n      if (!parts[1].startsWith(\"solr.core.\")) {\n        // skip - this is probably solr.node or solr.jvm metric\n        continue;\n      }\n      String[] collParts = parts[1].substring(10).split(\"\\\\.\");\n      if (collParts.length != 3) {\n        LOG.warn(\"Invalid registry name: \" + parts[1]);\n        continue;\n      }\n      String collection = collParts[0];\n      String shard = collParts[1];\n      String replica = collParts[2];\n      String key = parts.length > 3 ? parts[2] + \":\" + parts[3] : parts[2];\n      replicas.forEach(r -> {\n        if (r.getCollection().equals(collection) && r.getShard().equals(shard) && r.getCore().endsWith(replica)) {\n          Object value = r.getVariables().get(key);\n          if (value != null) {\n            values.put(tag, value);\n          } else {\n            value = r.getVariables().get(tag);\n            if (value != null) {\n              values.put(tag, value);\n            }\n          }\n        }\n      });\n    }\n    return values;\n  }\n\n","sourceOld":"  /**\n   * Simulate getting replica metrics values. This uses per-replica properties set in\n   * {@link SimClusterStateProvider#simSetCollectionValue(String, String, Object, boolean, boolean)} and\n   * similar methods.\n   * @param node node id\n   * @param tags metrics names\n   * @return map of metrics names / values\n   */\n  public Map<String, Object> getReplicaMetricsValues(String node, Collection<String> tags) {\n    List<ReplicaInfo> replicas = clusterStateProvider.simGetReplicaInfos(node);\n    if (replicas == null || replicas.isEmpty()) {\n      return Collections.emptyMap();\n    }\n    Map<String, Object> values = new HashMap<>();\n    for (String tag : tags) {\n      String[] parts = tag.split(\":\");\n      if (parts.length < 3 || !parts[0].equals(\"metrics\")) {\n        LOG.warn(\"Invalid metrics: tag: \" + tag);\n        continue;\n      }\n      if (!parts[1].startsWith(\"solr.core.\")) {\n        // skip - this is probably solr.node or solr.jvm metric\n        continue;\n      }\n      String[] collParts = parts[1].substring(10).split(\"\\\\.\");\n      if (collParts.length != 3) {\n        LOG.warn(\"Invalid registry name: \" + parts[1]);\n        continue;\n      }\n      String collection = collParts[0];\n      String shard = collParts[1];\n      String replica = collParts[2];\n      String key = parts.length > 3 ? parts[2] + \":\" + parts[3] : parts[2];\n      replicas.forEach(r -> {\n        if (r.getCollection().equals(collection) && r.getShard().equals(shard) && r.getCore().endsWith(replica)) {\n          Object value = r.getVariables().get(key);\n          if (value != null) {\n            values.put(tag, value);\n          } else {\n            value = r.getVariables().get(tag);\n            if (value != null) {\n              values.put(tag, value);\n            }\n          }\n        }\n      });\n    }\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#getReplicaMetricsValues(String,Collection[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#getReplicaMetricsValues(String,Collection[String]).mjava","sourceNew":"  /**\n   * Simulate getting replica metrics values. This uses per-replica properties set in\n   * {@link SimClusterStateProvider#simSetCollectionValue(String, String, Object, boolean, boolean)} and\n   * similar methods.\n   * @param node node id\n   * @param tags metrics names\n   * @return map of metrics names / values\n   */\n  public Map<String, Object> getReplicaMetricsValues(String node, Collection<String> tags) {\n    if (!liveNodesSet.contains(node)) {\n      throw new RuntimeException(\"non-live node \" + node);\n    }\n    List<ReplicaInfo> replicas = clusterStateProvider.simGetReplicaInfos(node);\n    if (replicas == null || replicas.isEmpty()) {\n      return Collections.emptyMap();\n    }\n    Map<String, Object> values = new HashMap<>();\n    for (String tag : tags) {\n      String[] parts = tag.split(\":\");\n      if (parts.length < 3 || !parts[0].equals(\"metrics\")) {\n        LOG.warn(\"Invalid metrics: tag: \" + tag);\n        continue;\n      }\n      if (!parts[1].startsWith(\"solr.core.\")) {\n        // skip - this is probably solr.node or solr.jvm metric\n        continue;\n      }\n      String[] collParts = parts[1].substring(10).split(\"\\\\.\");\n      if (collParts.length != 3) {\n        LOG.warn(\"Invalid registry name: \" + parts[1]);\n        continue;\n      }\n      String collection = collParts[0];\n      String shard = collParts[1];\n      String replica = collParts[2];\n      String key = parts.length > 3 ? parts[2] + \":\" + parts[3] : parts[2];\n      replicas.forEach(r -> {\n        if (r.getCollection().equals(collection) && r.getShard().equals(shard) && r.getCore().endsWith(replica)) {\n          Object value = r.getVariables().get(key);\n          if (value != null) {\n            values.put(tag, value);\n          } else {\n            value = r.getVariables().get(tag);\n            if (value != null) {\n              values.put(tag, value);\n            }\n          }\n        }\n      });\n    }\n    return values;\n  }\n\n","sourceOld":"  /**\n   * Simulate getting replica metrics values. This uses per-replica properties set in\n   * {@link SimClusterStateProvider#simSetCollectionValue(String, String, Object, boolean, boolean)} and\n   * similar methods.\n   * @param node node id\n   * @param tags metrics names\n   * @return map of metrics names / values\n   */\n  public Map<String, Object> getReplicaMetricsValues(String node, Collection<String> tags) {\n    List<ReplicaInfo> replicas = clusterStateProvider.simGetReplicaInfos(node);\n    if (replicas == null || replicas.isEmpty()) {\n      return Collections.emptyMap();\n    }\n    Map<String, Object> values = new HashMap<>();\n    for (String tag : tags) {\n      String[] parts = tag.split(\":\");\n      if (parts.length < 3 || !parts[0].equals(\"metrics\")) {\n        LOG.warn(\"Invalid metrics: tag: \" + tag);\n        continue;\n      }\n      if (!parts[1].startsWith(\"solr.core.\")) {\n        // skip - this is probably solr.node or solr.jvm metric\n        continue;\n      }\n      String[] collParts = parts[1].substring(10).split(\"\\\\.\");\n      if (collParts.length != 3) {\n        LOG.warn(\"Invalid registry name: \" + parts[1]);\n        continue;\n      }\n      String collection = collParts[0];\n      String shard = collParts[1];\n      String replica = collParts[2];\n      String key = parts.length > 3 ? parts[2] + \":\" + parts[3] : parts[2];\n      replicas.forEach(r -> {\n        if (r.getCollection().equals(collection) && r.getShard().equals(shard) && r.getCore().endsWith(replica)) {\n          Object value = r.getVariables().get(key);\n          if (value != null) {\n            values.put(tag, value);\n          } else {\n            value = r.getVariables().get(tag);\n            if (value != null) {\n              values.put(tag, value);\n            }\n          }\n        }\n      });\n    }\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#getReplicaMetricsValues(String,Collection[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#getReplicaMetricsValues(String,Collection[String]).mjava","sourceNew":"  /**\n   * Simulate getting replica metrics values. This uses per-replica properties set in\n   * {@link SimClusterStateProvider#simSetCollectionValue(String, String, Object, boolean, boolean)} and\n   * similar methods.\n   * @param node node id\n   * @param tags metrics names\n   * @return map of metrics names / values\n   */\n  public Map<String, Object> getReplicaMetricsValues(String node, Collection<String> tags) {\n    if (!liveNodesSet.contains(node)) {\n      throw new RuntimeException(\"non-live node \" + node);\n    }\n    List<ReplicaInfo> replicas = clusterStateProvider.simGetReplicaInfos(node);\n    if (replicas == null || replicas.isEmpty()) {\n      return Collections.emptyMap();\n    }\n    Map<String, Object> values = new HashMap<>();\n    for (String tag : tags) {\n      String[] parts = tag.split(\":\");\n      if (parts.length < 3 || !parts[0].equals(\"metrics\")) {\n        LOG.warn(\"Invalid metrics: tag: \" + tag);\n        continue;\n      }\n      if (!parts[1].startsWith(\"solr.core.\")) {\n        // skip - this is probably solr.node or solr.jvm metric\n        continue;\n      }\n      String[] collParts = parts[1].substring(10).split(\"\\\\.\");\n      if (collParts.length != 3) {\n        LOG.warn(\"Invalid registry name: \" + parts[1]);\n        continue;\n      }\n      String collection = collParts[0];\n      String shard = collParts[1];\n      String replica = collParts[2];\n      String key = parts.length > 3 ? parts[2] + \":\" + parts[3] : parts[2];\n      replicas.forEach(r -> {\n        if (r.getCollection().equals(collection) && r.getShard().equals(shard) && r.getCore().endsWith(replica)) {\n          Object value = r.getVariables().get(key);\n          if (value != null) {\n            values.put(tag, value);\n          } else {\n            value = r.getVariables().get(tag);\n            if (value != null) {\n              values.put(tag, value);\n            }\n          }\n        }\n      });\n    }\n    return values;\n  }\n\n","sourceOld":"  /**\n   * Simulate getting replica metrics values. This uses per-replica properties set in\n   * {@link SimClusterStateProvider#simSetCollectionValue(String, String, Object, boolean, boolean)} and\n   * similar methods.\n   * @param node node id\n   * @param tags metrics names\n   * @return map of metrics names / values\n   */\n  public Map<String, Object> getReplicaMetricsValues(String node, Collection<String> tags) {\n    List<ReplicaInfo> replicas = clusterStateProvider.simGetReplicaInfos(node);\n    if (replicas == null || replicas.isEmpty()) {\n      return Collections.emptyMap();\n    }\n    Map<String, Object> values = new HashMap<>();\n    for (String tag : tags) {\n      String[] parts = tag.split(\":\");\n      if (parts.length < 3 || !parts[0].equals(\"metrics\")) {\n        LOG.warn(\"Invalid metrics: tag: \" + tag);\n        continue;\n      }\n      if (!parts[1].startsWith(\"solr.core.\")) {\n        // skip - this is probably solr.node or solr.jvm metric\n        continue;\n      }\n      String[] collParts = parts[1].substring(10).split(\"\\\\.\");\n      if (collParts.length != 3) {\n        LOG.warn(\"Invalid registry name: \" + parts[1]);\n        continue;\n      }\n      String collection = collParts[0];\n      String shard = collParts[1];\n      String replica = collParts[2];\n      String key = parts.length > 3 ? parts[2] + \":\" + parts[3] : parts[2];\n      replicas.forEach(r -> {\n        if (r.getCollection().equals(collection) && r.getShard().equals(shard) && r.getCore().endsWith(replica)) {\n          Object value = r.getVariables().get(key);\n          if (value != null) {\n            values.put(tag, value);\n          } else {\n            value = r.getVariables().get(tag);\n            if (value != null) {\n              values.put(tag, value);\n            }\n          }\n        }\n      });\n    }\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042b92cf48996255bedb0c3c4bf772d7e06e4dea","date":1534272102,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#getReplicaMetricsValues(String,Collection[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#getReplicaMetricsValues(String,Collection[String]).mjava","sourceNew":"  /**\n   * Simulate getting replica metrics values. This uses per-replica properties set in\n   * {@link SimClusterStateProvider#simSetCollectionValue(String, String, Object, boolean, boolean)} and\n   * similar methods.\n   * @param node node id\n   * @param tags metrics names\n   * @return map of metrics names / values\n   */\n  public Map<String, Object> getReplicaMetricsValues(String node, Collection<String> tags) {\n    if (!liveNodesSet.contains(node)) {\n      throw new RuntimeException(\"non-live node \" + node);\n    }\n    List<ReplicaInfo> replicas = clusterStateProvider.simGetReplicaInfos(node);\n    if (replicas == null || replicas.isEmpty()) {\n      return Collections.emptyMap();\n    }\n    Map<String, Object> values = new HashMap<>();\n    for (String tag : tags) {\n      String[] parts = tag.split(\":\");\n      if (parts.length < 3 || !parts[0].equals(\"metrics\")) {\n        LOG.warn(\"Invalid metrics: tag: \" + tag);\n        continue;\n      }\n      if (!parts[1].startsWith(\"solr.core.\")) {\n        // skip - this is probably solr.node or solr.jvm metric\n        continue;\n      }\n      Matcher m = REGISTRY_PATTERN.matcher(parts[1]);\n\n      if (!m.matches()) {\n        LOG.warn(\"Invalid registry name: \" + parts[1]);\n        continue;\n      }\n      String collection = m.group(1);\n      String shard = m.group(2);\n      String replica = m.group(3);\n      String key = parts.length > 3 ? parts[2] + \":\" + parts[3] : parts[2];\n      replicas.forEach(r -> {\n        if (r.getCollection().equals(collection) && r.getShard().equals(shard) && r.getCore().endsWith(replica)) {\n          Object value = r.getVariables().get(key);\n          if (value != null) {\n            values.put(tag, value);\n          } else {\n            value = r.getVariables().get(tag);\n            if (value != null) {\n              values.put(tag, value);\n            }\n          }\n        }\n      });\n    }\n    return values;\n  }\n\n","sourceOld":"  /**\n   * Simulate getting replica metrics values. This uses per-replica properties set in\n   * {@link SimClusterStateProvider#simSetCollectionValue(String, String, Object, boolean, boolean)} and\n   * similar methods.\n   * @param node node id\n   * @param tags metrics names\n   * @return map of metrics names / values\n   */\n  public Map<String, Object> getReplicaMetricsValues(String node, Collection<String> tags) {\n    if (!liveNodesSet.contains(node)) {\n      throw new RuntimeException(\"non-live node \" + node);\n    }\n    List<ReplicaInfo> replicas = clusterStateProvider.simGetReplicaInfos(node);\n    if (replicas == null || replicas.isEmpty()) {\n      return Collections.emptyMap();\n    }\n    Map<String, Object> values = new HashMap<>();\n    for (String tag : tags) {\n      String[] parts = tag.split(\":\");\n      if (parts.length < 3 || !parts[0].equals(\"metrics\")) {\n        LOG.warn(\"Invalid metrics: tag: \" + tag);\n        continue;\n      }\n      if (!parts[1].startsWith(\"solr.core.\")) {\n        // skip - this is probably solr.node or solr.jvm metric\n        continue;\n      }\n      String[] collParts = parts[1].substring(10).split(\"\\\\.\");\n      if (collParts.length != 3) {\n        LOG.warn(\"Invalid registry name: \" + parts[1]);\n        continue;\n      }\n      String collection = collParts[0];\n      String shard = collParts[1];\n      String replica = collParts[2];\n      String key = parts.length > 3 ? parts[2] + \":\" + parts[3] : parts[2];\n      replicas.forEach(r -> {\n        if (r.getCollection().equals(collection) && r.getShard().equals(shard) && r.getCore().endsWith(replica)) {\n          Object value = r.getVariables().get(key);\n          if (value != null) {\n            values.put(tag, value);\n          } else {\n            value = r.getVariables().get(tag);\n            if (value != null) {\n              values.put(tag, value);\n            }\n          }\n        }\n      });\n    }\n    return values;\n  }\n\n","bugFix":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#getReplicaMetricsValues(String,Collection[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#getReplicaMetricsValues(String,Collection[String]).mjava","sourceNew":"  /**\n   * Simulate getting replica metrics values. This uses per-replica properties set in\n   * {@link SimClusterStateProvider#simSetCollectionValue(String, String, Object, boolean, boolean)} and\n   * similar methods.\n   * @param node node id\n   * @param tags metrics names\n   * @return map of metrics names / values\n   */\n  public Map<String, Object> getReplicaMetricsValues(String node, Collection<String> tags) {\n    if (!liveNodesSet.contains(node)) {\n      throw new RuntimeException(\"non-live node \" + node);\n    }\n    List<ReplicaInfo> replicas = clusterStateProvider.simGetReplicaInfos(node);\n    if (replicas == null || replicas.isEmpty()) {\n      return Collections.emptyMap();\n    }\n    Map<String, Object> values = new HashMap<>();\n    for (String tag : tags) {\n      String[] parts = tag.split(\":\");\n      if (parts.length < 3 || !parts[0].equals(\"metrics\")) {\n        log.warn(\"Invalid metrics: tag: \" + tag);\n        continue;\n      }\n      if (!parts[1].startsWith(\"solr.core.\")) {\n        // skip - this is probably solr.node or solr.jvm metric\n        continue;\n      }\n      Matcher m = REGISTRY_PATTERN.matcher(parts[1]);\n\n      if (!m.matches()) {\n        log.warn(\"Invalid registry name: \" + parts[1]);\n        continue;\n      }\n      String collection = m.group(1);\n      String shard = m.group(2);\n      String replica = m.group(3);\n      String key = parts.length > 3 ? parts[2] + \":\" + parts[3] : parts[2];\n      replicas.forEach(r -> {\n        if (r.getCollection().equals(collection) && r.getShard().equals(shard) && r.getCore().endsWith(replica)) {\n          Object value = r.getVariables().get(key);\n          if (value != null) {\n            values.put(tag, value);\n          } else {\n            value = r.getVariables().get(tag);\n            if (value != null) {\n              values.put(tag, value);\n            }\n          }\n        }\n      });\n    }\n    return values;\n  }\n\n","sourceOld":"  /**\n   * Simulate getting replica metrics values. This uses per-replica properties set in\n   * {@link SimClusterStateProvider#simSetCollectionValue(String, String, Object, boolean, boolean)} and\n   * similar methods.\n   * @param node node id\n   * @param tags metrics names\n   * @return map of metrics names / values\n   */\n  public Map<String, Object> getReplicaMetricsValues(String node, Collection<String> tags) {\n    if (!liveNodesSet.contains(node)) {\n      throw new RuntimeException(\"non-live node \" + node);\n    }\n    List<ReplicaInfo> replicas = clusterStateProvider.simGetReplicaInfos(node);\n    if (replicas == null || replicas.isEmpty()) {\n      return Collections.emptyMap();\n    }\n    Map<String, Object> values = new HashMap<>();\n    for (String tag : tags) {\n      String[] parts = tag.split(\":\");\n      if (parts.length < 3 || !parts[0].equals(\"metrics\")) {\n        LOG.warn(\"Invalid metrics: tag: \" + tag);\n        continue;\n      }\n      if (!parts[1].startsWith(\"solr.core.\")) {\n        // skip - this is probably solr.node or solr.jvm metric\n        continue;\n      }\n      Matcher m = REGISTRY_PATTERN.matcher(parts[1]);\n\n      if (!m.matches()) {\n        LOG.warn(\"Invalid registry name: \" + parts[1]);\n        continue;\n      }\n      String collection = m.group(1);\n      String shard = m.group(2);\n      String replica = m.group(3);\n      String key = parts.length > 3 ? parts[2] + \":\" + parts[3] : parts[2];\n      replicas.forEach(r -> {\n        if (r.getCollection().equals(collection) && r.getShard().equals(shard) && r.getCore().endsWith(replica)) {\n          Object value = r.getVariables().get(key);\n          if (value != null) {\n            values.put(tag, value);\n          } else {\n            value = r.getVariables().get(tag);\n            if (value != null) {\n              values.put(tag, value);\n            }\n          }\n        }\n      });\n    }\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc18bc8ea2e2c1e308757ff50671c774438e9f3e","date":1538052583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#getReplicaMetricsValues(String,Collection[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#getReplicaMetricsValues(String,Collection[String]).mjava","sourceNew":"  /**\n   * Simulate getting replica metrics values. This uses per-replica properties set in\n   * {@link SimClusterStateProvider#simSetCollectionValue(String, String, Object, boolean, boolean)} and\n   * similar methods.\n   * @param node node id\n   * @param tags metrics names\n   * @return map of metrics names / values\n   */\n  public Map<String, Object> getReplicaMetricsValues(String node, Collection<String> tags) {\n    if (!liveNodesSet.contains(node)) {\n      throw new RuntimeException(\"non-live node \" + node);\n    }\n    Map<String, Object> values = new HashMap<>();\n    for (String tag : tags) {\n      Matcher m = METRIC_KEY_PATTERN.matcher(tag);\n      if (!m.matches() || m.groupCount() < 2) {\n        log.warn(\"Invalid metrics: tag: \" + tag);\n        continue;\n      }\n      String registryName = m.group(1);\n      String key = m.group(3) != null ? m.group(2) + m.group(3) : m.group(2);\n      if (!registryName.startsWith(\"solr.core.\")) {\n        // skip - this is probably solr.node or solr.jvm metric\n        continue;\n      }\n      m = REGISTRY_PATTERN.matcher(registryName);\n\n      if (!m.matches()) {\n        log.warn(\"Invalid registry name: \" + registryName);\n        continue;\n      }\n      String collection = m.group(1);\n      String shard = m.group(2);\n      String replica = m.group(3);\n      List<ReplicaInfo> replicas = clusterStateProvider.simGetReplicaInfos(collection, shard);\n      replicas.forEach(r -> {\n        if (r.getNode().equals(node) && r.getCore().endsWith(replica)) {\n          Object value = r.getVariables().get(key);\n          if (value != null) {\n            values.put(tag, value);\n          } else {\n            value = r.getVariables().get(tag);\n            if (value != null) {\n              values.put(tag, value);\n            }\n          }\n        }\n      });\n    }\n    return values;\n  }\n\n","sourceOld":"  /**\n   * Simulate getting replica metrics values. This uses per-replica properties set in\n   * {@link SimClusterStateProvider#simSetCollectionValue(String, String, Object, boolean, boolean)} and\n   * similar methods.\n   * @param node node id\n   * @param tags metrics names\n   * @return map of metrics names / values\n   */\n  public Map<String, Object> getReplicaMetricsValues(String node, Collection<String> tags) {\n    if (!liveNodesSet.contains(node)) {\n      throw new RuntimeException(\"non-live node \" + node);\n    }\n    List<ReplicaInfo> replicas = clusterStateProvider.simGetReplicaInfos(node);\n    if (replicas == null || replicas.isEmpty()) {\n      return Collections.emptyMap();\n    }\n    Map<String, Object> values = new HashMap<>();\n    for (String tag : tags) {\n      String[] parts = tag.split(\":\");\n      if (parts.length < 3 || !parts[0].equals(\"metrics\")) {\n        log.warn(\"Invalid metrics: tag: \" + tag);\n        continue;\n      }\n      if (!parts[1].startsWith(\"solr.core.\")) {\n        // skip - this is probably solr.node or solr.jvm metric\n        continue;\n      }\n      Matcher m = REGISTRY_PATTERN.matcher(parts[1]);\n\n      if (!m.matches()) {\n        log.warn(\"Invalid registry name: \" + parts[1]);\n        continue;\n      }\n      String collection = m.group(1);\n      String shard = m.group(2);\n      String replica = m.group(3);\n      String key = parts.length > 3 ? parts[2] + \":\" + parts[3] : parts[2];\n      replicas.forEach(r -> {\n        if (r.getCollection().equals(collection) && r.getShard().equals(shard) && r.getCore().endsWith(replica)) {\n          Object value = r.getVariables().get(key);\n          if (value != null) {\n            values.put(tag, value);\n          } else {\n            value = r.getVariables().get(tag);\n            if (value != null) {\n              values.put(tag, value);\n            }\n          }\n        }\n      });\n    }\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#getReplicaMetricsValues(String,Collection[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#getReplicaMetricsValues(String,Collection[String]).mjava","sourceNew":"  /**\n   * Simulate getting replica metrics values. This uses per-replica properties set in\n   * {@link SimClusterStateProvider#simSetCollectionValue(String, String, Object, boolean, boolean)} and\n   * similar methods.\n   * @param node node id\n   * @param tags metrics names\n   * @return map of metrics names / values\n   */\n  public Map<String, Object> getReplicaMetricsValues(String node, Collection<String> tags) {\n    if (!liveNodesSet.contains(node)) {\n      throw new RuntimeException(\"non-live node \" + node);\n    }\n    Map<String, Object> values = new HashMap<>();\n    for (String tag : tags) {\n      Matcher m = METRIC_KEY_PATTERN.matcher(tag);\n      if (!m.matches() || m.groupCount() < 2) {\n        log.warn(\"Invalid metrics: tag: \" + tag);\n        continue;\n      }\n      String registryName = m.group(1);\n      String key = m.group(3) != null ? m.group(2) + m.group(3) : m.group(2);\n      if (!registryName.startsWith(\"solr.core.\")) {\n        // skip - this is probably solr.node or solr.jvm metric\n        continue;\n      }\n      m = REGISTRY_PATTERN.matcher(registryName);\n\n      if (!m.matches()) {\n        log.warn(\"Invalid registry name: \" + registryName);\n        continue;\n      }\n      String collection = m.group(1);\n      String shard = m.group(2);\n      String replica = m.group(3);\n      List<ReplicaInfo> replicas = clusterStateProvider.simGetReplicaInfos(collection, shard);\n      replicas.forEach(r -> {\n        if (r.getNode().equals(node) && r.getCore().endsWith(replica)) {\n          Object value = r.getVariables().get(key);\n          if (value != null) {\n            values.put(tag, value);\n          } else {\n            value = r.getVariables().get(tag);\n            if (value != null) {\n              values.put(tag, value);\n            }\n          }\n        }\n      });\n    }\n    return values;\n  }\n\n","sourceOld":"  /**\n   * Simulate getting replica metrics values. This uses per-replica properties set in\n   * {@link SimClusterStateProvider#simSetCollectionValue(String, String, Object, boolean, boolean)} and\n   * similar methods.\n   * @param node node id\n   * @param tags metrics names\n   * @return map of metrics names / values\n   */\n  public Map<String, Object> getReplicaMetricsValues(String node, Collection<String> tags) {\n    if (!liveNodesSet.contains(node)) {\n      throw new RuntimeException(\"non-live node \" + node);\n    }\n    Map<String, Object> values = new HashMap<>();\n    for (String tag : tags) {\n      Matcher m = METRIC_KEY_PATTERN.matcher(tag);\n      if (!m.matches() || m.groupCount() < 2) {\n        log.warn(\"Invalid metrics: tag: \" + tag);\n        continue;\n      }\n      String registryName = m.group(1);\n      String key = m.group(3) != null ? m.group(2) + m.group(3) : m.group(2);\n      if (!registryName.startsWith(\"solr.core.\")) {\n        // skip - this is probably solr.node or solr.jvm metric\n        continue;\n      }\n      m = REGISTRY_PATTERN.matcher(registryName);\n\n      if (!m.matches()) {\n        log.warn(\"Invalid registry name: \" + registryName);\n        continue;\n      }\n      String collection = m.group(1);\n      String shard = m.group(2);\n      String replica = m.group(3);\n      List<ReplicaInfo> replicas = clusterStateProvider.simGetReplicaInfos(collection, shard);\n      replicas.forEach(r -> {\n        if (r.getNode().equals(node) && r.getCore().endsWith(replica)) {\n          Object value = r.getVariables().get(key);\n          if (value != null) {\n            values.put(tag, value);\n          } else {\n            value = r.getVariables().get(tag);\n            if (value != null) {\n              values.put(tag, value);\n            }\n          }\n        }\n      });\n    }\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["43345f1452f9510f8aaadae6156fe0c834e7d957","ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ad60b6945c360ff89899d716d9cdec8dd674e2a0":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1"],"f592209545c71895260367152601e9200399776d":["43345f1452f9510f8aaadae6156fe0c834e7d957","ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"]},"commit2Childs":{"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","43345f1452f9510f8aaadae6156fe0c834e7d957"],"ad60b6945c360ff89899d716d9cdec8dd674e2a0":["042b92cf48996255bedb0c3c4bf772d7e06e4dea","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["b70042a8a492f7054d480ccdd2be9796510d4327","ad60b6945c360ff89899d716d9cdec8dd674e2a0","f592209545c71895260367152601e9200399776d"],"f592209545c71895260367152601e9200399776d":[],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}