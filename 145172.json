{"path":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilderTest#test2TermsIndex2Frags().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilderTest#test2TermsIndex2Frags().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilderTest#test2TermsIndex2Frags().mjava","sourceNew":"  public void test2TermsIndex2Frags() throws Exception {\n    SimpleFragListBuilder sflb = new SimpleFragListBuilder();\n    FieldFragList ffl = sflb.createFieldFragList( fpl(new TermQuery(new Term(F, \"a\")), \"a b b b b b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((28,29)))/1.0(22,42)\", ffl.getFragInfos().get( 1 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl(new TermQuery(new Term(F, \"a\")), \"a b b b b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((26,27)))/1.0(20,40)\", ffl.getFragInfos().get( 1 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl(new TermQuery(new Term(F, \"a\")), \"a b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((20,21)))/1.0(20,40)\", ffl.getFragInfos().get( 1 ).toString() );\n  }\n\n","sourceOld":"  public void test2TermsIndex2Frags() throws Exception {\n    SimpleFragListBuilder sflb = new SimpleFragListBuilder();\n    FieldFragList ffl = sflb.createFieldFragList( fpl(new TermQuery(new Term(F, \"a\")), \"a b b b b b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((28,29)))/1.0(22,42)\", ffl.getFragInfos().get( 1 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl(new TermQuery(new Term(F, \"a\")), \"a b b b b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((26,27)))/1.0(20,40)\", ffl.getFragInfos().get( 1 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl(new TermQuery(new Term(F, \"a\")), \"a b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((20,21)))/1.0(20,40)\", ffl.getFragInfos().get( 1 ).toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"335fa85a41a431b929ff93a0eb831abfc7b91e63","date":1349750333,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilderTest#test2TermsIndex2Frags().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilderTest#test2TermsIndex2Frags().mjava","sourceNew":"  public void test2TermsIndex2Frags() throws Exception {\n    SimpleFragListBuilder sflb = new SimpleFragListBuilder();\n    FieldFragList ffl = sflb.createFieldFragList( fpl(new TermQuery(new Term(F, \"a\")), \"a b b b b b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((28,29)))/1.0(20,40)\", ffl.getFragInfos().get( 1 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl(new TermQuery(new Term(F, \"a\")), \"a b b b b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((26,27)))/1.0(20,40)\", ffl.getFragInfos().get( 1 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl(new TermQuery(new Term(F, \"a\")), \"a b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((20,21)))/1.0(20,40)\", ffl.getFragInfos().get( 1 ).toString() );\n  }\n\n","sourceOld":"  public void test2TermsIndex2Frags() throws Exception {\n    SimpleFragListBuilder sflb = new SimpleFragListBuilder();\n    FieldFragList ffl = sflb.createFieldFragList( fpl(new TermQuery(new Term(F, \"a\")), \"a b b b b b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((28,29)))/1.0(22,42)\", ffl.getFragInfos().get( 1 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl(new TermQuery(new Term(F, \"a\")), \"a b b b b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((26,27)))/1.0(20,40)\", ffl.getFragInfos().get( 1 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl(new TermQuery(new Term(F, \"a\")), \"a b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((20,21)))/1.0(20,40)\", ffl.getFragInfos().get( 1 ).toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"335fa85a41a431b929ff93a0eb831abfc7b91e63":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["335fa85a41a431b929ff93a0eb831abfc7b91e63"]},"commit2Childs":{"335fa85a41a431b929ff93a0eb831abfc7b91e63":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["335fa85a41a431b929ff93a0eb831abfc7b91e63"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}