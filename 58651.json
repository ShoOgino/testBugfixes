{"path":"lucene/src/test/org/apache/lucene/search/PayloadFilter[TestPositionIncrement]#incrementToken().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/PayloadFilter[TestPositionIncrement]#incrementToken().mjava","pathOld":"src/test/org/apache/lucene/search/PayloadFilter[TestPositionIncrement]#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      payloadAttr.setPayload(new Payload((\"pos: \" + pos).getBytes()));\n      int posIncr;\n      if (i % 2 == 1) {\n        posIncr = 1;\n      } else {\n        posIncr = 0;\n      }\n      posIncrAttr.setPositionIncrement(posIncr);\n      pos += posIncr;\n      // System.out.println(\"term=\" + termAttr.term() + \" pos=\" + pos);\n      i++;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      payloadAttr.setPayload(new Payload((\"pos: \" + pos).getBytes()));\n      int posIncr;\n      if (i % 2 == 1) {\n        posIncr = 1;\n      } else {\n        posIncr = 0;\n      }\n      posIncrAttr.setPositionIncrement(posIncr);\n      pos += posIncr;\n      // System.out.println(\"term=\" + termAttr.term() + \" pos=\" + pos);\n      i++;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/PayloadFilter[TestPositionIncrement]#incrementToken().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/PayloadFilter[TestPositionIncrement]#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      payloadAttr.setPayload(new Payload((\"pos: \" + pos).getBytes()));\n      int posIncr;\n      if (i % 2 == 1) {\n        posIncr = 1;\n      } else {\n        posIncr = 0;\n      }\n      posIncrAttr.setPositionIncrement(posIncr);\n      pos += posIncr;\n      if (TestPositionIncrement.VERBOSE) {\n        System.out.println(\"term=\" + termAttr.term() + \" pos=\" + pos);\n      }\n      i++;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      payloadAttr.setPayload(new Payload((\"pos: \" + pos).getBytes()));\n      int posIncr;\n      if (i % 2 == 1) {\n        posIncr = 1;\n      } else {\n        posIncr = 0;\n      }\n      posIncrAttr.setPositionIncrement(posIncr);\n      pos += posIncr;\n      // System.out.println(\"term=\" + termAttr.term() + \" pos=\" + pos);\n      i++;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a775c547c3519b47efd41c09cb47100ddb9604c7","date":1270914087,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/PayloadFilter[TestPositionIncrement]#incrementToken().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/PayloadFilter[TestPositionIncrement]#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      payloadAttr.setPayload(new Payload((\"pos: \" + pos).getBytes()));\n      int posIncr;\n      if (i % 2 == 1) {\n        posIncr = 1;\n      } else {\n        posIncr = 0;\n      }\n      posIncrAttr.setPositionIncrement(posIncr);\n      pos += posIncr;\n      if (TestPositionIncrement.VERBOSE) {\n        System.out.println(\"term=\" + termAttr + \" pos=\" + pos);\n      }\n      i++;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      payloadAttr.setPayload(new Payload((\"pos: \" + pos).getBytes()));\n      int posIncr;\n      if (i % 2 == 1) {\n        posIncr = 1;\n      } else {\n        posIncr = 0;\n      }\n      posIncrAttr.setPositionIncrement(posIncr);\n      pos += posIncr;\n      if (TestPositionIncrement.VERBOSE) {\n        System.out.println(\"term=\" + termAttr.term() + \" pos=\" + pos);\n      }\n      i++;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"498e168d849b4dbc097ac7b31f6db170d6f55725","date":1286807836,"type":5,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/MockPayloadFilter[MockPayloadAnalyzer]#incrementToken().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/PayloadFilter[TestPositionIncrement]#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      payloadAttr.setPayload(new Payload((\"pos: \" + pos).getBytes()));\n      int posIncr;\n      if (i % 2 == 1) {\n        posIncr = 1;\n      } else {\n        posIncr = 0;\n      }\n      posIncrAttr.setPositionIncrement(posIncr);\n      pos += posIncr;\n      i++;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      payloadAttr.setPayload(new Payload((\"pos: \" + pos).getBytes()));\n      int posIncr;\n      if (i % 2 == 1) {\n        posIncr = 1;\n      } else {\n        posIncr = 0;\n      }\n      posIncrAttr.setPositionIncrement(posIncr);\n      pos += posIncr;\n      if (TestPositionIncrement.VERBOSE) {\n        System.out.println(\"term=\" + termAttr + \" pos=\" + pos);\n      }\n      i++;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/PayloadFilter[TestPositionIncrement]#incrementToken().mjava","sourceNew":null,"sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      payloadAttr.setPayload(new Payload((\"pos: \" + pos).getBytes()));\n      int posIncr;\n      if (i % 2 == 1) {\n        posIncr = 1;\n      } else {\n        posIncr = 0;\n      }\n      posIncrAttr.setPositionIncrement(posIncr);\n      pos += posIncr;\n      if (TestPositionIncrement.VERBOSE) {\n        System.out.println(\"term=\" + termAttr + \" pos=\" + pos);\n      }\n      i++;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a775c547c3519b47efd41c09cb47100ddb9604c7","498e168d849b4dbc097ac7b31f6db170d6f55725"],"498e168d849b4dbc097ac7b31f6db170d6f55725":["a775c547c3519b47efd41c09cb47100ddb9604c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["498e168d849b4dbc097ac7b31f6db170d6f55725"],"a775c547c3519b47efd41c09cb47100ddb9604c7":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a775c547c3519b47efd41c09cb47100ddb9604c7"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"498e168d849b4dbc097ac7b31f6db170d6f55725":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a775c547c3519b47efd41c09cb47100ddb9604c7":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","498e168d849b4dbc097ac7b31f6db170d6f55725"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}