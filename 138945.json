{"path":"lucene/src/test/org/apache/lucene/analysis/TestCharArrayMap#doRandom(int,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestCharArrayMap#doRandom(int,boolean).mjava","pathOld":"src/test/org/apache/lucene/analysis/TestCharArrayMap#doRandom(int,boolean).mjava","sourceNew":"  public void doRandom(int iter, boolean ignoreCase) {\n    CharArrayMap<Integer> map = new CharArrayMap<Integer>(TEST_VERSION_CURRENT, 1, ignoreCase);\n    HashMap<String,Integer> hmap = new HashMap<String,Integer>();\n\n    char[] key;\n    for (int i=0; i<iter; i++) {\n      int len = r.nextInt(5);\n      key = new char[len];\n      for (int j=0; j<key.length; j++) {\n        key[j] = (char)r.nextInt(127);\n      }\n      String keyStr = new String(key);\n      String hmapKey = ignoreCase ? keyStr.toLowerCase() : keyStr; \n\n      int val = r.nextInt();\n\n      Object o1 = map.put(key, val);\n      Object o2 = hmap.put(hmapKey,val);\n      assertEquals(o1,o2);\n\n      // add it again with the string method\n      assertEquals(val, map.put(keyStr,val).intValue());\n\n      assertEquals(val, map.get(key,0,key.length).intValue());\n      assertEquals(val, map.get(key).intValue());\n      assertEquals(val, map.get(keyStr).intValue());\n\n      assertEquals(hmap.size(), map.size());\n    }\n  }\n\n","sourceOld":"  public void doRandom(int iter, boolean ignoreCase) {\n    CharArrayMap<Integer> map = new CharArrayMap<Integer>(TEST_VERSION_CURRENT, 1, ignoreCase);\n    HashMap<String,Integer> hmap = new HashMap<String,Integer>();\n\n    char[] key;\n    for (int i=0; i<iter; i++) {\n      int len = r.nextInt(5);\n      key = new char[len];\n      for (int j=0; j<key.length; j++) {\n        key[j] = (char)r.nextInt(127);\n      }\n      String keyStr = new String(key);\n      String hmapKey = ignoreCase ? keyStr.toLowerCase() : keyStr; \n\n      int val = r.nextInt();\n\n      Object o1 = map.put(key, val);\n      Object o2 = hmap.put(hmapKey,val);\n      assertEquals(o1,o2);\n\n      // add it again with the string method\n      assertEquals(val, map.put(keyStr,val).intValue());\n\n      assertEquals(val, map.get(key,0,key.length).intValue());\n      assertEquals(val, map.get(key).intValue());\n      assertEquals(val, map.get(keyStr).intValue());\n\n      assertEquals(hmap.size(), map.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b375ac28473e1310fa9ea99d95e9c6001e3719d5","date":1274116690,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestCharArrayMap#doRandom(int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestCharArrayMap#doRandom(int,boolean).mjava","sourceNew":"  public void doRandom(int iter, boolean ignoreCase) {\n    CharArrayMap<Integer> map = new CharArrayMap<Integer>(TEST_VERSION_CURRENT, 1, ignoreCase);\n    HashMap<String,Integer> hmap = new HashMap<String,Integer>();\n\n    char[] key;\n    for (int i=0; i<iter; i++) {\n      int len = r.nextInt(5);\n      key = new char[len];\n      for (int j=0; j<key.length; j++) {\n        key[j] = (char)r.nextInt(127);\n      }\n      String keyStr = new String(key);\n      String hmapKey = ignoreCase ? keyStr.toLowerCase(Locale.ENGLISH) : keyStr; \n\n      int val = r.nextInt();\n\n      Object o1 = map.put(key, val);\n      Object o2 = hmap.put(hmapKey,val);\n      assertEquals(o1,o2);\n\n      // add it again with the string method\n      assertEquals(val, map.put(keyStr,val).intValue());\n\n      assertEquals(val, map.get(key,0,key.length).intValue());\n      assertEquals(val, map.get(key).intValue());\n      assertEquals(val, map.get(keyStr).intValue());\n\n      assertEquals(hmap.size(), map.size());\n    }\n  }\n\n","sourceOld":"  public void doRandom(int iter, boolean ignoreCase) {\n    CharArrayMap<Integer> map = new CharArrayMap<Integer>(TEST_VERSION_CURRENT, 1, ignoreCase);\n    HashMap<String,Integer> hmap = new HashMap<String,Integer>();\n\n    char[] key;\n    for (int i=0; i<iter; i++) {\n      int len = r.nextInt(5);\n      key = new char[len];\n      for (int j=0; j<key.length; j++) {\n        key[j] = (char)r.nextInt(127);\n      }\n      String keyStr = new String(key);\n      String hmapKey = ignoreCase ? keyStr.toLowerCase() : keyStr; \n\n      int val = r.nextInt();\n\n      Object o1 = map.put(key, val);\n      Object o2 = hmap.put(hmapKey,val);\n      assertEquals(o1,o2);\n\n      // add it again with the string method\n      assertEquals(val, map.put(keyStr,val).intValue());\n\n      assertEquals(val, map.get(key,0,key.length).intValue());\n      assertEquals(val, map.get(key).intValue());\n      assertEquals(val, map.get(keyStr).intValue());\n\n      assertEquals(hmap.size(), map.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9dd42aeb8984bdfef80056722e7c1c239b7e3c07","date":1274826512,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArrayMap#doRandom(int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestCharArrayMap#doRandom(int,boolean).mjava","sourceNew":"  public void doRandom(int iter, boolean ignoreCase) {\n    CharArrayMap<Integer> map = new CharArrayMap<Integer>(TEST_VERSION_CURRENT, 1, ignoreCase);\n    HashMap<String,Integer> hmap = new HashMap<String,Integer>();\n\n    char[] key;\n    for (int i=0; i<iter; i++) {\n      int len = r.nextInt(5);\n      key = new char[len];\n      for (int j=0; j<key.length; j++) {\n        key[j] = (char)r.nextInt(127);\n      }\n      String keyStr = new String(key);\n      String hmapKey = ignoreCase ? keyStr.toLowerCase(Locale.ENGLISH) : keyStr; \n\n      int val = r.nextInt();\n\n      Object o1 = map.put(key, val);\n      Object o2 = hmap.put(hmapKey,val);\n      assertEquals(o1,o2);\n\n      // add it again with the string method\n      assertEquals(val, map.put(keyStr,val).intValue());\n\n      assertEquals(val, map.get(key,0,key.length).intValue());\n      assertEquals(val, map.get(key).intValue());\n      assertEquals(val, map.get(keyStr).intValue());\n\n      assertEquals(hmap.size(), map.size());\n    }\n  }\n\n","sourceOld":"  public void doRandom(int iter, boolean ignoreCase) {\n    CharArrayMap<Integer> map = new CharArrayMap<Integer>(TEST_VERSION_CURRENT, 1, ignoreCase);\n    HashMap<String,Integer> hmap = new HashMap<String,Integer>();\n\n    char[] key;\n    for (int i=0; i<iter; i++) {\n      int len = r.nextInt(5);\n      key = new char[len];\n      for (int j=0; j<key.length; j++) {\n        key[j] = (char)r.nextInt(127);\n      }\n      String keyStr = new String(key);\n      String hmapKey = ignoreCase ? keyStr.toLowerCase(Locale.ENGLISH) : keyStr; \n\n      int val = r.nextInt();\n\n      Object o1 = map.put(key, val);\n      Object o2 = hmap.put(hmapKey,val);\n      assertEquals(o1,o2);\n\n      // add it again with the string method\n      assertEquals(val, map.put(keyStr,val).intValue());\n\n      assertEquals(val, map.get(key,0,key.length).intValue());\n      assertEquals(val, map.get(key).intValue());\n      assertEquals(val, map.get(keyStr).intValue());\n\n      assertEquals(hmap.size(), map.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9dd42aeb8984bdfef80056722e7c1c239b7e3c07":["b375ac28473e1310fa9ea99d95e9c6001e3719d5"],"b375ac28473e1310fa9ea99d95e9c6001e3719d5":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9dd42aeb8984bdfef80056722e7c1c239b7e3c07"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9dd42aeb8984bdfef80056722e7c1c239b7e3c07":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b375ac28473e1310fa9ea99d95e9c6001e3719d5":["9dd42aeb8984bdfef80056722e7c1c239b7e3c07"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b375ac28473e1310fa9ea99d95e9c6001e3719d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}