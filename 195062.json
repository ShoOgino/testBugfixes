{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/DisjunctionMaxQueryBuilder#getQuery(Element).mjava","commits":[{"id":"e9a925cfa7a240a81c26ef70871aa91f828eeffb","date":1335130095,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/DisjunctionMaxQueryBuilder#getQuery(Element).mjava","pathOld":"/dev/null","sourceNew":"  public Query getQuery(Element e) throws ParserException {\n    float tieBreaker = DOMUtils.getAttribute(e, \"tieBreaker\", 0.0f); \n    DisjunctionMaxQuery dq = new DisjunctionMaxQuery(tieBreaker);\n    dq.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n\n    NodeList nl = e.getChildNodes();\n    for (int i = 0; i < nl.getLength(); i++) {\n      Node node = nl.item(i);\n      if (node instanceof Element) { // all elements are disjuncts.\n        Element queryElem = (Element) node;\n        Query q = factory.getQuery(queryElem);\n        dq.add(q);\n      }\n    }\n\n    return dq;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/DisjunctionMaxQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/DisjunctionMaxQueryBuilder#getQuery(Element).mjava","sourceNew":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    float tieBreaker = DOMUtils.getAttribute(e, \"tieBreaker\", 0.0f); \n    DisjunctionMaxQuery dq = new DisjunctionMaxQuery(tieBreaker);\n    dq.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n\n    NodeList nl = e.getChildNodes();\n    for (int i = 0; i < nl.getLength(); i++) {\n      Node node = nl.item(i);\n      if (node instanceof Element) { // all elements are disjuncts.\n        Element queryElem = (Element) node;\n        Query q = factory.getQuery(queryElem);\n        dq.add(q);\n      }\n    }\n\n    return dq;\n  }\n\n","sourceOld":"  public Query getQuery(Element e) throws ParserException {\n    float tieBreaker = DOMUtils.getAttribute(e, \"tieBreaker\", 0.0f); \n    DisjunctionMaxQuery dq = new DisjunctionMaxQuery(tieBreaker);\n    dq.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n\n    NodeList nl = e.getChildNodes();\n    for (int i = 0; i < nl.getLength(); i++) {\n      Node node = nl.item(i);\n      if (node instanceof Element) { // all elements are disjuncts.\n        Element queryElem = (Element) node;\n        Query q = factory.getQuery(queryElem);\n        dq.add(q);\n      }\n    }\n\n    return dq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/DisjunctionMaxQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/DisjunctionMaxQueryBuilder#getQuery(Element).mjava","sourceNew":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    float tieBreaker = DOMUtils.getAttribute(e, \"tieBreaker\", 0.0f); \n    DisjunctionMaxQuery dq = new DisjunctionMaxQuery(tieBreaker);\n    dq.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n\n    NodeList nl = e.getChildNodes();\n    for (int i = 0; i < nl.getLength(); i++) {\n      Node node = nl.item(i);\n      if (node instanceof Element) { // all elements are disjuncts.\n        Element queryElem = (Element) node;\n        Query q = factory.getQuery(queryElem);\n        dq.add(q);\n      }\n    }\n\n    return dq;\n  }\n\n","sourceOld":"  public Query getQuery(Element e) throws ParserException {\n    float tieBreaker = DOMUtils.getAttribute(e, \"tieBreaker\", 0.0f); \n    DisjunctionMaxQuery dq = new DisjunctionMaxQuery(tieBreaker);\n    dq.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n\n    NodeList nl = e.getChildNodes();\n    for (int i = 0; i < nl.getLength(); i++) {\n      Node node = nl.item(i);\n      if (node instanceof Element) { // all elements are disjuncts.\n        Element queryElem = (Element) node;\n        Query q = factory.getQuery(queryElem);\n        dq.add(q);\n      }\n    }\n\n    return dq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/DisjunctionMaxQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/DisjunctionMaxQueryBuilder#getQuery(Element).mjava","sourceNew":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    float tieBreaker = DOMUtils.getAttribute(e, \"tieBreaker\", 0.0f); \n    DisjunctionMaxQuery dq = new DisjunctionMaxQuery(tieBreaker);\n\n    NodeList nl = e.getChildNodes();\n    for (int i = 0; i < nl.getLength(); i++) {\n      Node node = nl.item(i);\n      if (node instanceof Element) { // all elements are disjuncts.\n        Element queryElem = (Element) node;\n        Query q = factory.getQuery(queryElem);\n        dq.add(q);\n      }\n    }\n\n    Query q = dq;\n    float boost = DOMUtils.getAttribute(e, \"boost\", 1.0f);\n    if (boost != 1f) {\n      q = new BoostQuery(dq, boost);\n    }\n    return q;\n  }\n\n","sourceOld":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    float tieBreaker = DOMUtils.getAttribute(e, \"tieBreaker\", 0.0f); \n    DisjunctionMaxQuery dq = new DisjunctionMaxQuery(tieBreaker);\n    dq.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n\n    NodeList nl = e.getChildNodes();\n    for (int i = 0; i < nl.getLength(); i++) {\n      Node node = nl.item(i);\n      if (node instanceof Element) { // all elements are disjuncts.\n        Element queryElem = (Element) node;\n        Query q = factory.getQuery(queryElem);\n        dq.add(q);\n      }\n    }\n\n    return dq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5d3ee590efa5b1f764e8ce985d9125bc97af483","date":1446225158,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/DisjunctionMaxQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/DisjunctionMaxQueryBuilder#getQuery(Element).mjava","sourceNew":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    float tieBreaker = DOMUtils.getAttribute(e, \"tieBreaker\", 0.0f); \n\n    List<Query> disjuncts = new ArrayList<>();\n    NodeList nl = e.getChildNodes();\n    for (int i = 0; i < nl.getLength(); i++) {\n      Node node = nl.item(i);\n      if (node instanceof Element) { // all elements are disjuncts.\n        Element queryElem = (Element) node;\n        Query q = factory.getQuery(queryElem);\n        disjuncts.add(q);\n      }\n    }\n\n    Query q = new DisjunctionMaxQuery(disjuncts, tieBreaker);\n    float boost = DOMUtils.getAttribute(e, \"boost\", 1.0f);\n    if (boost != 1f) {\n      q = new BoostQuery(q, boost);\n    }\n    return q;\n  }\n\n","sourceOld":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    float tieBreaker = DOMUtils.getAttribute(e, \"tieBreaker\", 0.0f); \n    DisjunctionMaxQuery dq = new DisjunctionMaxQuery(tieBreaker);\n\n    NodeList nl = e.getChildNodes();\n    for (int i = 0; i < nl.getLength(); i++) {\n      Node node = nl.item(i);\n      if (node instanceof Element) { // all elements are disjuncts.\n        Element queryElem = (Element) node;\n        Query q = factory.getQuery(queryElem);\n        dq.add(q);\n      }\n    }\n\n    Query q = dq;\n    float boost = DOMUtils.getAttribute(e, \"boost\", 1.0f);\n    if (boost != 1f) {\n      q = new BoostQuery(dq, boost);\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5dd2d7f1bf043fe6e38915a7956cb31a4e9812c0","date":1460543237,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/DisjunctionMaxQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/DisjunctionMaxQueryBuilder#getQuery(Element).mjava","sourceNew":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    float tieBreaker = DOMUtils.getAttribute(e, \"tieBreaker\", 0.0f); \n\n    List<Query> disjuncts = new ArrayList<>();\n    NodeList nl = e.getChildNodes();\n    final int nlLen = nl.getLength();\n    for (int i = 0; i < nlLen; i++) {\n      Node node = nl.item(i);\n      if (node instanceof Element) { // all elements are disjuncts.\n        Element queryElem = (Element) node;\n        Query q = factory.getQuery(queryElem);\n        disjuncts.add(q);\n      }\n    }\n\n    Query q = new DisjunctionMaxQuery(disjuncts, tieBreaker);\n    float boost = DOMUtils.getAttribute(e, \"boost\", 1.0f);\n    if (boost != 1f) {\n      q = new BoostQuery(q, boost);\n    }\n    return q;\n  }\n\n","sourceOld":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    float tieBreaker = DOMUtils.getAttribute(e, \"tieBreaker\", 0.0f); \n\n    List<Query> disjuncts = new ArrayList<>();\n    NodeList nl = e.getChildNodes();\n    for (int i = 0; i < nl.getLength(); i++) {\n      Node node = nl.item(i);\n      if (node instanceof Element) { // all elements are disjuncts.\n        Element queryElem = (Element) node;\n        Query q = factory.getQuery(queryElem);\n        disjuncts.add(q);\n      }\n    }\n\n    Query q = new DisjunctionMaxQuery(disjuncts, tieBreaker);\n    float boost = DOMUtils.getAttribute(e, \"boost\", 1.0f);\n    if (boost != 1f) {\n      q = new BoostQuery(q, boost);\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ea9249ab9a9f76eb4132ceb4631d15315721f6a","date":1460578553,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/DisjunctionMaxQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/DisjunctionMaxQueryBuilder#getQuery(Element).mjava","sourceNew":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    float tieBreaker = DOMUtils.getAttribute(e, \"tieBreaker\", 0.0f); \n\n    List<Query> disjuncts = new ArrayList<>();\n    NodeList nl = e.getChildNodes();\n    final int nlLen = nl.getLength();\n    for (int i = 0; i < nlLen; i++) {\n      Node node = nl.item(i);\n      if (node instanceof Element) { // all elements are disjuncts.\n        Element queryElem = (Element) node;\n        Query q = factory.getQuery(queryElem);\n        disjuncts.add(q);\n      }\n    }\n\n    Query q = new DisjunctionMaxQuery(disjuncts, tieBreaker);\n    float boost = DOMUtils.getAttribute(e, \"boost\", 1.0f);\n    if (boost != 1f) {\n      q = new BoostQuery(q, boost);\n    }\n    return q;\n  }\n\n","sourceOld":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    float tieBreaker = DOMUtils.getAttribute(e, \"tieBreaker\", 0.0f); \n\n    List<Query> disjuncts = new ArrayList<>();\n    NodeList nl = e.getChildNodes();\n    for (int i = 0; i < nl.getLength(); i++) {\n      Node node = nl.item(i);\n      if (node instanceof Element) { // all elements are disjuncts.\n        Element queryElem = (Element) node;\n        Query q = factory.getQuery(queryElem);\n        disjuncts.add(q);\n      }\n    }\n\n    Query q = new DisjunctionMaxQuery(disjuncts, tieBreaker);\n    float boost = DOMUtils.getAttribute(e, \"boost\", 1.0f);\n    if (boost != 1f) {\n      q = new BoostQuery(q, boost);\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5dd2d7f1bf043fe6e38915a7956cb31a4e9812c0":["a5d3ee590efa5b1f764e8ce985d9125bc97af483"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["e9a925cfa7a240a81c26ef70871aa91f828eeffb","7530de27b87b961b51f01bd1299b7004d46e8823"],"9ea9249ab9a9f76eb4132ceb4631d15315721f6a":["a5d3ee590efa5b1f764e8ce985d9125bc97af483","5dd2d7f1bf043fe6e38915a7956cb31a4e9812c0"],"a5d3ee590efa5b1f764e8ce985d9125bc97af483":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["e9a925cfa7a240a81c26ef70871aa91f828eeffb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ea9249ab9a9f76eb4132ceb4631d15315721f6a"],"e9a925cfa7a240a81c26ef70871aa91f828eeffb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5dd2d7f1bf043fe6e38915a7956cb31a4e9812c0":["9ea9249ab9a9f76eb4132ceb4631d15315721f6a"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"9ea9249ab9a9f76eb4132ceb4631d15315721f6a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a5d3ee590efa5b1f764e8ce985d9125bc97af483":["5dd2d7f1bf043fe6e38915a7956cb31a4e9812c0","9ea9249ab9a9f76eb4132ceb4631d15315721f6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9a925cfa7a240a81c26ef70871aa91f828eeffb"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["a5d3ee590efa5b1f764e8ce985d9125bc97af483"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","2dfdf766e55e943d942055d7de53c7ad6bc45283"],"e9a925cfa7a240a81c26ef70871aa91f828eeffb":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}