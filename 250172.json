{"path":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal.ReportingMergeScheduler#merge(IndexWriter,MergeTrigger,boolean).mjava","commits":[{"id":"4853751884e55469b8cc1abab8fa0788eab240c9","date":1394565067,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal.ReportingMergeScheduler#merge(IndexWriter,MergeTrigger,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal.ReportingMergeScheduler#merge(IndexWriter).mjava","sourceNew":"    @Override\n    public void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {\n      OneMerge merge = null;\n      while ((merge = writer.getNextMerge()) != null) {\n        if (VERBOSE) {\n          System.out.println(\"executing merge \" + merge.segString(writer.getDirectory()));\n        }\n        writer.merge(merge);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void merge(IndexWriter writer) throws IOException {\n      OneMerge merge = null;\n      while ((merge = writer.getNextMerge()) != null) {\n        if (VERBOSE) {\n          System.out.println(\"executing merge \" + merge.segString(writer.getDirectory()));\n        }\n        writer.merge(merge);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5faf65b6692f15cca0f87bf8666c87899afc619f","date":1420468108,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal.ReportingMergeScheduler#merge(IndexWriter,MergeTrigger,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal.ReportingMergeScheduler#merge(IndexWriter,MergeTrigger,boolean).mjava","sourceNew":"    @Override\n    public void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {\n      OneMerge merge = null;\n      while ((merge = writer.getNextMerge()) != null) {\n        if (VERBOSE) {\n          System.out.println(\"executing merge \" + merge.segString());\n        }\n        writer.merge(merge);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {\n      OneMerge merge = null;\n      while ((merge = writer.getNextMerge()) != null) {\n        if (VERBOSE) {\n          System.out.println(\"executing merge \" + merge.segString(writer.getDirectory()));\n        }\n        writer.merge(merge);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2178aefcd4690bd53785e9673e2c918cdb64165","date":1587583605,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal.ReportingMergeScheduler#merge(IndexWriter,MergeTrigger).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal.ReportingMergeScheduler#merge(IndexWriter,MergeTrigger,boolean).mjava","sourceNew":"    @Override\n    public void merge(IndexWriter writer, MergeTrigger trigger) throws IOException {\n      OneMerge merge = null;\n      while ((merge = writer.getNextMerge()) != null) {\n        if (VERBOSE) {\n          System.out.println(\"executing merge \" + merge.segString());\n        }\n        writer.merge(merge);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {\n      OneMerge merge = null;\n      while ((merge = writer.getNextMerge()) != null) {\n        if (VERBOSE) {\n          System.out.println(\"executing merge \" + merge.segString());\n        }\n        writer.merge(merge);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2178aefcd4690bd53785e9673e2c918cdb64165":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"4853751884e55469b8cc1abab8fa0788eab240c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5faf65b6692f15cca0f87bf8666c87899afc619f":["4853751884e55469b8cc1abab8fa0788eab240c9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2178aefcd4690bd53785e9673e2c918cdb64165"]},"commit2Childs":{"d2178aefcd4690bd53785e9673e2c918cdb64165":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4853751884e55469b8cc1abab8fa0788eab240c9":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4853751884e55469b8cc1abab8fa0788eab240c9"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["d2178aefcd4690bd53785e9673e2c918cdb64165"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}