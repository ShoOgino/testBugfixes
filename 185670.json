{"path":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testRandom().mjava","commits":[{"id":"53153d3c5d39cd6b824fa6413fa8c7ee0f1b6d3e","date":1399316048,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRandom() throws Exception {\n    final int NUM_ITERS = atLeast(50);\n\n    for (int i = 0; i < NUM_ITERS; i++) { \n      SolrServer client = random().nextBoolean() ? collection1 : collection2;\n      \n      SolrQuery q = new SolrQuery();\n      q.set(\"distrib\", \"true\");\n      q.setFields(\"id\", \"text\");\n      \n      boolean shard1Results = random().nextBoolean();\n      boolean shard2Results = random().nextBoolean();\n      \n      String qs = \"_query_with_no_results_\";\n      if (shard1Results) {\n        qs += \" OR batman\";\n      }\n      if (shard2Results) {\n        qs += \" OR superman\";\n      }\n      q.setQuery(qs);\n\n      Set<String> shards = new HashSet<String>(Arrays.asList(shard1, shard2));\n      if (random().nextBoolean()) {\n        shards.remove(shard1);\n        shard1Results = false;\n      } else if (random().nextBoolean()) {\n        shards.remove(shard2);\n        shard2Results = false;\n      }\n      q.set(\"shards\", StringUtils.join(shards, \",\"));\n\n\n      List<String> debug = new ArrayList<String>(10);\n\n      boolean all = false;\n      final boolean timing = random().nextBoolean();\n      final boolean query = random().nextBoolean();\n      final boolean results = random().nextBoolean();\n      final boolean track = random().nextBoolean();\n\n      if (timing) { debug.add(\"timing\"); }\n      if (query) { debug.add(\"query\"); }\n      if (results) { debug.add(\"results\"); }\n      if (track) { debug.add(\"track\"); }\n      if (debug.isEmpty()) {\n        debug.add(\"true\");\n        all = true;\n      }\n      q.set(\"debug\", (String[])debug.toArray(new String[debug.size()]));\n\n      QueryResponse r = client.query(q);\n      try {\n        assertDebug(r, all || track, \"track\");\n        assertDebug(r, all || query, \"rawquerystring\");\n        assertDebug(r, all || query, \"querystring\");\n        assertDebug(r, all || query, \"parsedquery\");\n        assertDebug(r, all || query, \"parsedquery_toString\");\n        assertDebug(r, all || query, \"QParser\");\n        assertDebug(r, all || results, \"explain\");\n        assertDebug(r, all || timing, \"timing\");\n      } catch (AssertionError e) {\n        throw new AssertionError(q.toString() + \": \" + e.getMessage(), e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testRandom().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testRandom().mjava","sourceNew":"  @Test\n  public void testRandom() throws Exception {\n    final int NUM_ITERS = atLeast(50);\n\n    for (int i = 0; i < NUM_ITERS; i++) { \n      SolrClient client = random().nextBoolean() ? collection1 : collection2;\n      \n      SolrQuery q = new SolrQuery();\n      q.set(\"distrib\", \"true\");\n      q.setFields(\"id\", \"text\");\n      \n      boolean shard1Results = random().nextBoolean();\n      boolean shard2Results = random().nextBoolean();\n      \n      String qs = \"_query_with_no_results_\";\n      if (shard1Results) {\n        qs += \" OR batman\";\n      }\n      if (shard2Results) {\n        qs += \" OR superman\";\n      }\n      q.setQuery(qs);\n\n      Set<String> shards = new HashSet<String>(Arrays.asList(shard1, shard2));\n      if (random().nextBoolean()) {\n        shards.remove(shard1);\n        shard1Results = false;\n      } else if (random().nextBoolean()) {\n        shards.remove(shard2);\n        shard2Results = false;\n      }\n      q.set(\"shards\", StringUtils.join(shards, \",\"));\n\n\n      List<String> debug = new ArrayList<String>(10);\n\n      boolean all = false;\n      final boolean timing = random().nextBoolean();\n      final boolean query = random().nextBoolean();\n      final boolean results = random().nextBoolean();\n      final boolean track = random().nextBoolean();\n\n      if (timing) { debug.add(\"timing\"); }\n      if (query) { debug.add(\"query\"); }\n      if (results) { debug.add(\"results\"); }\n      if (track) { debug.add(\"track\"); }\n      if (debug.isEmpty()) {\n        debug.add(\"true\");\n        all = true;\n      }\n      q.set(\"debug\", (String[])debug.toArray(new String[debug.size()]));\n\n      QueryResponse r = client.query(q);\n      try {\n        assertDebug(r, all || track, \"track\");\n        assertDebug(r, all || query, \"rawquerystring\");\n        assertDebug(r, all || query, \"querystring\");\n        assertDebug(r, all || query, \"parsedquery\");\n        assertDebug(r, all || query, \"parsedquery_toString\");\n        assertDebug(r, all || query, \"QParser\");\n        assertDebug(r, all || results, \"explain\");\n        assertDebug(r, all || timing, \"timing\");\n      } catch (AssertionError e) {\n        throw new AssertionError(q.toString() + \": \" + e.getMessage(), e);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandom() throws Exception {\n    final int NUM_ITERS = atLeast(50);\n\n    for (int i = 0; i < NUM_ITERS; i++) { \n      SolrServer client = random().nextBoolean() ? collection1 : collection2;\n      \n      SolrQuery q = new SolrQuery();\n      q.set(\"distrib\", \"true\");\n      q.setFields(\"id\", \"text\");\n      \n      boolean shard1Results = random().nextBoolean();\n      boolean shard2Results = random().nextBoolean();\n      \n      String qs = \"_query_with_no_results_\";\n      if (shard1Results) {\n        qs += \" OR batman\";\n      }\n      if (shard2Results) {\n        qs += \" OR superman\";\n      }\n      q.setQuery(qs);\n\n      Set<String> shards = new HashSet<String>(Arrays.asList(shard1, shard2));\n      if (random().nextBoolean()) {\n        shards.remove(shard1);\n        shard1Results = false;\n      } else if (random().nextBoolean()) {\n        shards.remove(shard2);\n        shard2Results = false;\n      }\n      q.set(\"shards\", StringUtils.join(shards, \",\"));\n\n\n      List<String> debug = new ArrayList<String>(10);\n\n      boolean all = false;\n      final boolean timing = random().nextBoolean();\n      final boolean query = random().nextBoolean();\n      final boolean results = random().nextBoolean();\n      final boolean track = random().nextBoolean();\n\n      if (timing) { debug.add(\"timing\"); }\n      if (query) { debug.add(\"query\"); }\n      if (results) { debug.add(\"results\"); }\n      if (track) { debug.add(\"track\"); }\n      if (debug.isEmpty()) {\n        debug.add(\"true\");\n        all = true;\n      }\n      q.set(\"debug\", (String[])debug.toArray(new String[debug.size()]));\n\n      QueryResponse r = client.query(q);\n      try {\n        assertDebug(r, all || track, \"track\");\n        assertDebug(r, all || query, \"rawquerystring\");\n        assertDebug(r, all || query, \"querystring\");\n        assertDebug(r, all || query, \"parsedquery\");\n        assertDebug(r, all || query, \"parsedquery_toString\");\n        assertDebug(r, all || query, \"QParser\");\n        assertDebug(r, all || results, \"explain\");\n        assertDebug(r, all || timing, \"timing\");\n      } catch (AssertionError e) {\n        throw new AssertionError(q.toString() + \": \" + e.getMessage(), e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15af35d55d70c34451f9df5edeaeff6b31f8cbe","date":1519625627,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testRandom().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testRandom().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"resource\") // Cannot close client in this loop!\n  public void testRandom() throws Exception {\n    final int NUM_ITERS = atLeast(50);\n\n    for (int i = 0; i < NUM_ITERS; i++) {\n      final SolrClient client = random().nextBoolean() ? collection1 : collection2;\n\n      SolrQuery q = new SolrQuery();\n      q.set(\"distrib\", \"true\");\n      q.setFields(\"id\", \"text\");\n\n      boolean shard1Results = random().nextBoolean();\n      boolean shard2Results = random().nextBoolean();\n\n      String qs = \"_query_with_no_results_\";\n      if (shard1Results) {\n        qs += \" OR batman\";\n      }\n      if (shard2Results) {\n        qs += \" OR superman\";\n      }\n      q.setQuery(qs);\n\n      Set<String> shards = new HashSet<String>(Arrays.asList(shard1, shard2));\n      if (random().nextBoolean()) {\n        shards.remove(shard1);\n      } else if (random().nextBoolean()) {\n        shards.remove(shard2);\n      }\n      q.set(\"shards\", StringUtils.join(shards, \",\"));\n\n\n      List<String> debug = new ArrayList<String>(10);\n\n      boolean all = false;\n      final boolean timing = random().nextBoolean();\n      final boolean query = random().nextBoolean();\n      final boolean results = random().nextBoolean();\n      final boolean track = random().nextBoolean();\n\n      if (timing) { debug.add(\"timing\"); }\n      if (query) { debug.add(\"query\"); }\n      if (results) { debug.add(\"results\"); }\n      if (track) { debug.add(\"track\"); }\n      if (debug.isEmpty()) {\n        debug.add(\"true\");\n        all = true;\n      }\n      q.set(\"debug\", (String[])debug.toArray(new String[debug.size()]));\n\n      QueryResponse r = client.query(q);\n      try {\n        assertDebug(r, all || track, \"track\");\n        assertDebug(r, all || query, \"rawquerystring\");\n        assertDebug(r, all || query, \"querystring\");\n        assertDebug(r, all || query, \"parsedquery\");\n        assertDebug(r, all || query, \"parsedquery_toString\");\n        assertDebug(r, all || query, \"QParser\");\n        assertDebug(r, all || results, \"explain\");\n        assertDebug(r, all || timing, \"timing\");\n      } catch (AssertionError e) {\n        throw new AssertionError(q.toString() + \": \" + e.getMessage(), e);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandom() throws Exception {\n    final int NUM_ITERS = atLeast(50);\n\n    for (int i = 0; i < NUM_ITERS; i++) { \n      SolrClient client = random().nextBoolean() ? collection1 : collection2;\n      \n      SolrQuery q = new SolrQuery();\n      q.set(\"distrib\", \"true\");\n      q.setFields(\"id\", \"text\");\n      \n      boolean shard1Results = random().nextBoolean();\n      boolean shard2Results = random().nextBoolean();\n      \n      String qs = \"_query_with_no_results_\";\n      if (shard1Results) {\n        qs += \" OR batman\";\n      }\n      if (shard2Results) {\n        qs += \" OR superman\";\n      }\n      q.setQuery(qs);\n\n      Set<String> shards = new HashSet<String>(Arrays.asList(shard1, shard2));\n      if (random().nextBoolean()) {\n        shards.remove(shard1);\n        shard1Results = false;\n      } else if (random().nextBoolean()) {\n        shards.remove(shard2);\n        shard2Results = false;\n      }\n      q.set(\"shards\", StringUtils.join(shards, \",\"));\n\n\n      List<String> debug = new ArrayList<String>(10);\n\n      boolean all = false;\n      final boolean timing = random().nextBoolean();\n      final boolean query = random().nextBoolean();\n      final boolean results = random().nextBoolean();\n      final boolean track = random().nextBoolean();\n\n      if (timing) { debug.add(\"timing\"); }\n      if (query) { debug.add(\"query\"); }\n      if (results) { debug.add(\"results\"); }\n      if (track) { debug.add(\"track\"); }\n      if (debug.isEmpty()) {\n        debug.add(\"true\");\n        all = true;\n      }\n      q.set(\"debug\", (String[])debug.toArray(new String[debug.size()]));\n\n      QueryResponse r = client.query(q);\n      try {\n        assertDebug(r, all || track, \"track\");\n        assertDebug(r, all || query, \"rawquerystring\");\n        assertDebug(r, all || query, \"querystring\");\n        assertDebug(r, all || query, \"parsedquery\");\n        assertDebug(r, all || query, \"parsedquery_toString\");\n        assertDebug(r, all || query, \"QParser\");\n        assertDebug(r, all || results, \"explain\");\n        assertDebug(r, all || timing, \"timing\");\n      } catch (AssertionError e) {\n        throw new AssertionError(q.toString() + \": \" + e.getMessage(), e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ac6494315d04f68950d2f00f5436b4861bcd467","date":1553125039,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testRandom().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testRandom().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"resource\") // Cannot close client in this loop!\n  public void testRandom() throws Exception {\n    final int NUM_ITERS = atLeast(50);\n\n    for (int i = 0; i < NUM_ITERS; i++) {\n      final SolrClient client = random().nextBoolean() ? collection1 : collection2;\n\n      SolrQuery q = new SolrQuery();\n      q.set(\"distrib\", \"true\");\n      q.setFields(\"id\", \"text\");\n\n      boolean shard1Results = random().nextBoolean();\n      boolean shard2Results = random().nextBoolean();\n\n      String qs = \"_query_with_no_results_\";\n      if (shard1Results) {\n        qs += \" OR batman\";\n      }\n      if (shard2Results) {\n        qs += \" OR superman\";\n      }\n      q.setQuery(qs);\n\n      Set<String> shards = new HashSet<String>(Arrays.asList(shard1, shard2));\n      if (random().nextBoolean()) {\n        shards.remove(shard1);\n      } else if (random().nextBoolean()) {\n        shards.remove(shard2);\n      }\n      q.set(\"shards\", String.join(\",\", shards));\n\n\n      List<String> debug = new ArrayList<String>(10);\n\n      boolean all = false;\n      final boolean timing = random().nextBoolean();\n      final boolean query = random().nextBoolean();\n      final boolean results = random().nextBoolean();\n      final boolean track = random().nextBoolean();\n\n      if (timing) { debug.add(\"timing\"); }\n      if (query) { debug.add(\"query\"); }\n      if (results) { debug.add(\"results\"); }\n      if (track) { debug.add(\"track\"); }\n      if (debug.isEmpty()) {\n        debug.add(\"true\");\n        all = true;\n      }\n      q.set(\"debug\", (String[])debug.toArray(new String[debug.size()]));\n\n      QueryResponse r = client.query(q);\n      try {\n        assertDebug(r, all || track, \"track\");\n        assertDebug(r, all || query, \"rawquerystring\");\n        assertDebug(r, all || query, \"querystring\");\n        assertDebug(r, all || query, \"parsedquery\");\n        assertDebug(r, all || query, \"parsedquery_toString\");\n        assertDebug(r, all || query, \"QParser\");\n        assertDebug(r, all || results, \"explain\");\n        assertDebug(r, all || timing, \"timing\");\n      } catch (AssertionError e) {\n        throw new AssertionError(q.toString() + \": \" + e.getMessage(), e);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"resource\") // Cannot close client in this loop!\n  public void testRandom() throws Exception {\n    final int NUM_ITERS = atLeast(50);\n\n    for (int i = 0; i < NUM_ITERS; i++) {\n      final SolrClient client = random().nextBoolean() ? collection1 : collection2;\n\n      SolrQuery q = new SolrQuery();\n      q.set(\"distrib\", \"true\");\n      q.setFields(\"id\", \"text\");\n\n      boolean shard1Results = random().nextBoolean();\n      boolean shard2Results = random().nextBoolean();\n\n      String qs = \"_query_with_no_results_\";\n      if (shard1Results) {\n        qs += \" OR batman\";\n      }\n      if (shard2Results) {\n        qs += \" OR superman\";\n      }\n      q.setQuery(qs);\n\n      Set<String> shards = new HashSet<String>(Arrays.asList(shard1, shard2));\n      if (random().nextBoolean()) {\n        shards.remove(shard1);\n      } else if (random().nextBoolean()) {\n        shards.remove(shard2);\n      }\n      q.set(\"shards\", StringUtils.join(shards, \",\"));\n\n\n      List<String> debug = new ArrayList<String>(10);\n\n      boolean all = false;\n      final boolean timing = random().nextBoolean();\n      final boolean query = random().nextBoolean();\n      final boolean results = random().nextBoolean();\n      final boolean track = random().nextBoolean();\n\n      if (timing) { debug.add(\"timing\"); }\n      if (query) { debug.add(\"query\"); }\n      if (results) { debug.add(\"results\"); }\n      if (track) { debug.add(\"track\"); }\n      if (debug.isEmpty()) {\n        debug.add(\"true\");\n        all = true;\n      }\n      q.set(\"debug\", (String[])debug.toArray(new String[debug.size()]));\n\n      QueryResponse r = client.query(q);\n      try {\n        assertDebug(r, all || track, \"track\");\n        assertDebug(r, all || query, \"rawquerystring\");\n        assertDebug(r, all || query, \"querystring\");\n        assertDebug(r, all || query, \"parsedquery\");\n        assertDebug(r, all || query, \"parsedquery_toString\");\n        assertDebug(r, all || query, \"QParser\");\n        assertDebug(r, all || results, \"explain\");\n        assertDebug(r, all || timing, \"timing\");\n      } catch (AssertionError e) {\n        throw new AssertionError(q.toString() + \": \" + e.getMessage(), e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testRandom().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testRandom().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"resource\") // Cannot close client in this loop!\n  public void testRandom() throws Exception {\n    final int NUM_ITERS = atLeast(50);\n\n    for (int i = 0; i < NUM_ITERS; i++) {\n      final SolrClient client = random().nextBoolean() ? collection1 : collection2;\n\n      SolrQuery q = new SolrQuery();\n      q.set(\"distrib\", \"true\");\n      q.setFields(\"id\", \"text\");\n\n      boolean shard1Results = random().nextBoolean();\n      boolean shard2Results = random().nextBoolean();\n\n      String qs = \"_query_with_no_results_\";\n      if (shard1Results) {\n        qs += \" OR batman\";\n      }\n      if (shard2Results) {\n        qs += \" OR superman\";\n      }\n      q.setQuery(qs);\n\n      Set<String> shards = new HashSet<String>(Arrays.asList(shard1, shard2));\n      if (random().nextBoolean()) {\n        shards.remove(shard1);\n      } else if (random().nextBoolean()) {\n        shards.remove(shard2);\n      }\n      q.set(\"shards\", String.join(\",\", shards));\n\n\n      List<String> debug = new ArrayList<String>(10);\n\n      boolean all = false;\n      final boolean timing = random().nextBoolean();\n      final boolean query = random().nextBoolean();\n      final boolean results = random().nextBoolean();\n      final boolean track = random().nextBoolean();\n\n      if (timing) { debug.add(\"timing\"); }\n      if (query) { debug.add(\"query\"); }\n      if (results) { debug.add(\"results\"); }\n      if (track) { debug.add(\"track\"); }\n      if (debug.isEmpty()) {\n        debug.add(\"true\");\n        all = true;\n      }\n      q.set(\"debug\", debug.toArray(new String[debug.size()]));\n\n      QueryResponse r = client.query(q);\n      try {\n        assertDebug(r, all || track, \"track\");\n        assertDebug(r, all || query, \"rawquerystring\");\n        assertDebug(r, all || query, \"querystring\");\n        assertDebug(r, all || query, \"parsedquery\");\n        assertDebug(r, all || query, \"parsedquery_toString\");\n        assertDebug(r, all || query, \"QParser\");\n        assertDebug(r, all || results, \"explain\");\n        assertDebug(r, all || timing, \"timing\");\n      } catch (AssertionError e) {\n        throw new AssertionError(q.toString() + \": \" + e.getMessage(), e);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"resource\") // Cannot close client in this loop!\n  public void testRandom() throws Exception {\n    final int NUM_ITERS = atLeast(50);\n\n    for (int i = 0; i < NUM_ITERS; i++) {\n      final SolrClient client = random().nextBoolean() ? collection1 : collection2;\n\n      SolrQuery q = new SolrQuery();\n      q.set(\"distrib\", \"true\");\n      q.setFields(\"id\", \"text\");\n\n      boolean shard1Results = random().nextBoolean();\n      boolean shard2Results = random().nextBoolean();\n\n      String qs = \"_query_with_no_results_\";\n      if (shard1Results) {\n        qs += \" OR batman\";\n      }\n      if (shard2Results) {\n        qs += \" OR superman\";\n      }\n      q.setQuery(qs);\n\n      Set<String> shards = new HashSet<String>(Arrays.asList(shard1, shard2));\n      if (random().nextBoolean()) {\n        shards.remove(shard1);\n      } else if (random().nextBoolean()) {\n        shards.remove(shard2);\n      }\n      q.set(\"shards\", String.join(\",\", shards));\n\n\n      List<String> debug = new ArrayList<String>(10);\n\n      boolean all = false;\n      final boolean timing = random().nextBoolean();\n      final boolean query = random().nextBoolean();\n      final boolean results = random().nextBoolean();\n      final boolean track = random().nextBoolean();\n\n      if (timing) { debug.add(\"timing\"); }\n      if (query) { debug.add(\"query\"); }\n      if (results) { debug.add(\"results\"); }\n      if (track) { debug.add(\"track\"); }\n      if (debug.isEmpty()) {\n        debug.add(\"true\");\n        all = true;\n      }\n      q.set(\"debug\", (String[])debug.toArray(new String[debug.size()]));\n\n      QueryResponse r = client.query(q);\n      try {\n        assertDebug(r, all || track, \"track\");\n        assertDebug(r, all || query, \"rawquerystring\");\n        assertDebug(r, all || query, \"querystring\");\n        assertDebug(r, all || query, \"parsedquery\");\n        assertDebug(r, all || query, \"parsedquery_toString\");\n        assertDebug(r, all || query, \"QParser\");\n        assertDebug(r, all || results, \"explain\");\n        assertDebug(r, all || timing, \"timing\");\n      } catch (AssertionError e) {\n        throw new AssertionError(q.toString() + \": \" + e.getMessage(), e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ac6494315d04f68950d2f00f5436b4861bcd467":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"53153d3c5d39cd6b824fa6413fa8c7ee0f1b6d3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bafca15d8e408346a67f4282ad1143b88023893b":["53153d3c5d39cd6b824fa6413fa8c7ee0f1b6d3e"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["0ac6494315d04f68950d2f00f5436b4861bcd467"]},"commit2Childs":{"0ac6494315d04f68950d2f00f5436b4861bcd467":["e98520789adb1d5ad05afb4956eca0944a929688"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["53153d3c5d39cd6b824fa6413fa8c7ee0f1b6d3e"],"53153d3c5d39cd6b824fa6413fa8c7ee0f1b6d3e":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["0ac6494315d04f68950d2f00f5436b4861bcd467"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}