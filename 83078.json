{"path":"src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","commits":[{"id":"16efeb5e41e35037f154efba9fdbbc13f8bc5cc2","date":1202772354,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandom() throws Exception {\n    Directory dir1 = new RAMDirectory();\n    // dir1 = FSDirectory.getDirectory(\"foofoofoo\");\n    Directory dir2 = new RAMDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    Map docs = indexRandom(10, 100, 100, dir1);\n    indexSerial(docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["49adbad5232116eb2448ea8166464e6a68bca007"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"49adbad5232116eb2448ea8166464e6a68bca007","date":1202851885,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    // dir1 = FSDirectory.getDirectory(\"foofoofoo\");\n    Directory dir2 = new MockRAMDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    Map docs = indexRandom(10, 100, 100, dir1);\n    indexSerial(docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Directory dir1 = new RAMDirectory();\n    // dir1 = FSDirectory.getDirectory(\"foofoofoo\");\n    Directory dir2 = new RAMDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    Map docs = indexRandom(10, 100, 100, dir1);\n    indexSerial(docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n  }\n\n","bugFix":["16efeb5e41e35037f154efba9fdbbc13f8bc5cc2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","sourceNew":"  public void testRandom() throws Throwable {\n    Directory dir1 = new MockRAMDirectory();\n    // dir1 = FSDirectory.getDirectory(\"foofoofoo\");\n    Directory dir2 = new MockRAMDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    Map docs = indexRandom(10, 100, 100, dir1);\n    indexSerial(docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    // dir1 = FSDirectory.getDirectory(\"foofoofoo\");\n    Directory dir2 = new MockRAMDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    Map docs = indexRandom(10, 100, 100, dir1);\n    indexSerial(docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb1066f2afe9450585d0d10063ea4450085236f1","date":1233870820,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","sourceNew":"  public void testRandom() throws Throwable {\n    r = newRandom();\n    Directory dir1 = new MockRAMDirectory();\n    // dir1 = FSDirectory.getDirectory(\"foofoofoo\");\n    Directory dir2 = new MockRAMDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    Map docs = indexRandom(10, 100, 100, dir1);\n    indexSerial(docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n  }\n\n","sourceOld":"  public void testRandom() throws Throwable {\n    Directory dir1 = new MockRAMDirectory();\n    // dir1 = FSDirectory.getDirectory(\"foofoofoo\");\n    Directory dir2 = new MockRAMDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    Map docs = indexRandom(10, 100, 100, dir1);\n    indexSerial(docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"416d032f85b7ea8efc272f86ba46bc460589aff7","date":1243881250,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","sourceNew":"  public void testRandom() throws Throwable {\n    r = newRandom();\n    Directory dir1 = new MockRAMDirectory();\n    // dir1 = FSDirectory.open(\"foofoofoo\");\n    Directory dir2 = new MockRAMDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    Map docs = indexRandom(10, 100, 100, dir1);\n    indexSerial(docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n  }\n\n","sourceOld":"  public void testRandom() throws Throwable {\n    r = newRandom();\n    Directory dir1 = new MockRAMDirectory();\n    // dir1 = FSDirectory.getDirectory(\"foofoofoo\");\n    Directory dir2 = new MockRAMDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    Map docs = indexRandom(10, 100, 100, dir1);\n    indexSerial(docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90cb6b3f4e5652555b614adc90204287fbebd27c","date":1259494272,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","sourceNew":"  public void testRandom() throws Throwable {\n    r = newRandom();\n    Directory dir1 = new MockRAMDirectory();\n    // dir1 = FSDirectory.open(\"foofoofoo\");\n    Directory dir2 = new MockRAMDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    Map docs = indexRandom(10, 10, 100, dir1);\n    indexSerial(docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n  }\n\n","sourceOld":"  public void testRandom() throws Throwable {\n    r = newRandom();\n    Directory dir1 = new MockRAMDirectory();\n    // dir1 = FSDirectory.open(\"foofoofoo\");\n    Directory dir2 = new MockRAMDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    Map docs = indexRandom(10, 100, 100, dir1);\n    indexSerial(docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","sourceNew":"  public void testRandom() throws Throwable {\n    r = newRandom();\n    Directory dir1 = new MockRAMDirectory();\n    // dir1 = FSDirectory.open(\"foofoofoo\");\n    Directory dir2 = new MockRAMDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    Map<String,Document> docs = indexRandom(10, 10, 100, dir1);\n    indexSerial(docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n  }\n\n","sourceOld":"  public void testRandom() throws Throwable {\n    r = newRandom();\n    Directory dir1 = new MockRAMDirectory();\n    // dir1 = FSDirectory.open(\"foofoofoo\");\n    Directory dir2 = new MockRAMDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    Map docs = indexRandom(10, 10, 100, dir1);\n    indexSerial(docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n  }\n\n","bugFix":null,"bugIntro":["a9802bb5985cb6cc3e0a3a0ecb2158acf4d5cfcf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9802bb5985cb6cc3e0a3a0ecb2158acf4d5cfcf","date":1268662366,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","sourceNew":"  public void testRandom() throws Throwable {\n    r = newRandom();\n    Directory dir1 = new MockRAMDirectory();\n    // dir1 = FSDirectory.open(\"foofoofoo\");\n    Directory dir2 = new MockRAMDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    int maxThreadStates = 1+r.nextInt(10);\n    Map<String,Document> docs = indexRandom(10, 10, 100, dir1, maxThreadStates);\n    indexSerial(docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n  }\n\n","sourceOld":"  public void testRandom() throws Throwable {\n    r = newRandom();\n    Directory dir1 = new MockRAMDirectory();\n    // dir1 = FSDirectory.open(\"foofoofoo\");\n    Directory dir2 = new MockRAMDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    Map<String,Document> docs = indexRandom(10, 10, 100, dir1);\n    indexSerial(docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n  }\n\n","bugFix":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2#testRandom().mjava","sourceNew":"  public void testRandom() throws Throwable {\n    r = newRandom();\n    Directory dir1 = new MockRAMDirectory();\n    // dir1 = FSDirectory.open(\"foofoofoo\");\n    Directory dir2 = new MockRAMDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    int maxThreadStates = 1+r.nextInt(10);\n    Map<String,Document> docs = indexRandom(10, 10, 100, dir1, maxThreadStates);\n    indexSerial(docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n  }\n\n","sourceOld":"  public void testRandom() throws Throwable {\n    r = newRandom();\n    Directory dir1 = new MockRAMDirectory();\n    // dir1 = FSDirectory.open(\"foofoofoo\");\n    Directory dir2 = new MockRAMDirectory();\n    // mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);\n    int maxThreadStates = 1+r.nextInt(10);\n    Map<String,Document> docs = indexRandom(10, 10, 100, dir1, maxThreadStates);\n    indexSerial(docs, dir2);\n\n    // verifying verify\n    // verifyEquals(dir1, dir1, \"id\");\n    // verifyEquals(dir2, dir2, \"id\");\n\n    verifyEquals(dir1, dir2, \"id\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"49adbad5232116eb2448ea8166464e6a68bca007":["16efeb5e41e35037f154efba9fdbbc13f8bc5cc2"],"90cb6b3f4e5652555b614adc90204287fbebd27c":["416d032f85b7ea8efc272f86ba46bc460589aff7"],"cb1066f2afe9450585d0d10063ea4450085236f1":["5350389bf83287111f7760b9e3db3af8e3648474"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9802bb5985cb6cc3e0a3a0ecb2158acf4d5cfcf":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"16efeb5e41e35037f154efba9fdbbc13f8bc5cc2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["90cb6b3f4e5652555b614adc90204287fbebd27c"],"416d032f85b7ea8efc272f86ba46bc460589aff7":["cb1066f2afe9450585d0d10063ea4450085236f1"],"5350389bf83287111f7760b9e3db3af8e3648474":["49adbad5232116eb2448ea8166464e6a68bca007"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9802bb5985cb6cc3e0a3a0ecb2158acf4d5cfcf"]},"commit2Childs":{"49adbad5232116eb2448ea8166464e6a68bca007":["5350389bf83287111f7760b9e3db3af8e3648474"],"90cb6b3f4e5652555b614adc90204287fbebd27c":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"cb1066f2afe9450585d0d10063ea4450085236f1":["416d032f85b7ea8efc272f86ba46bc460589aff7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["16efeb5e41e35037f154efba9fdbbc13f8bc5cc2"],"16efeb5e41e35037f154efba9fdbbc13f8bc5cc2":["49adbad5232116eb2448ea8166464e6a68bca007"],"a9802bb5985cb6cc3e0a3a0ecb2158acf4d5cfcf":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"416d032f85b7ea8efc272f86ba46bc460589aff7":["90cb6b3f4e5652555b614adc90204287fbebd27c"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["a9802bb5985cb6cc3e0a3a0ecb2158acf4d5cfcf"],"5350389bf83287111f7760b9e3db3af8e3648474":["cb1066f2afe9450585d0d10063ea4450085236f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}