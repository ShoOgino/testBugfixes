{"path":"backwards/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    clear();\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName));\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < CURRENT_FORMAT)\n          throw new CorruptIndexException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        add(new SegmentInfo(directory, format, input));\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n\n      if (format <= FORMAT_USER_DATA) {\n        if (format <= FORMAT_DIAGNOSTICS) {\n          userData = input.readStringStringMap();\n        } else if (0 != input.readByte()) {\n          userData = Collections.singletonMap(\"userData\", input.readString());\n        } else {\n          userData = Collections.<String,String>emptyMap();\n        }\n      } else {\n        userData = Collections.<String,String>emptyMap();\n      }\n\n      if (format <= FORMAT_CHECKSUM) {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen)\n          throw new CorruptIndexException(\"checksum mismatch in segments file\");\n      }\n      success = true;\n    }\n    finally {\n      input.close();\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    clear();\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName));\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < CURRENT_FORMAT)\n          throw new CorruptIndexException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        add(new SegmentInfo(directory, format, input));\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n\n      if (format <= FORMAT_USER_DATA) {\n        if (format <= FORMAT_DIAGNOSTICS) {\n          userData = input.readStringStringMap();\n        } else if (0 != input.readByte()) {\n          userData = Collections.singletonMap(\"userData\", input.readString());\n        } else {\n          userData = Collections.<String,String>emptyMap();\n        }\n      } else {\n        userData = Collections.<String,String>emptyMap();\n      }\n\n      if (format <= FORMAT_CHECKSUM) {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen)\n          throw new CorruptIndexException(\"checksum mismatch in segments file\");\n      }\n      success = true;\n    }\n    finally {\n      input.close();\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    clear();\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName));\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < CURRENT_FORMAT)\n          throw new CorruptIndexException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        add(new SegmentInfo(directory, format, input));\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n\n      if (format <= FORMAT_USER_DATA) {\n        if (format <= FORMAT_DIAGNOSTICS) {\n          userData = input.readStringStringMap();\n        } else if (0 != input.readByte()) {\n          userData = Collections.singletonMap(\"userData\", input.readString());\n        } else {\n          userData = Collections.<String,String>emptyMap();\n        }\n      } else {\n        userData = Collections.<String,String>emptyMap();\n      }\n\n      if (format <= FORMAT_CHECKSUM) {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen)\n          throw new CorruptIndexException(\"checksum mismatch in segments file\");\n      }\n      success = true;\n    }\n    finally {\n      input.close();\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}