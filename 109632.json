{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#applyAllDeletes(DocumentsWriterDeleteQueue).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#applyAllDeletes(DocumentsWriterDeleteQueue).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#applyAllDeletes(DocumentsWriterDeleteQueue).mjava","sourceNew":"  private void applyAllDeletes(DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    if (deleteQueue != null && !flushControl.isFullFlush()) {\n      ticketQueue.addDeletesAndPurge(this, deleteQueue);\n    }\n    indexWriter.applyAllDeletes();\n    indexWriter.flushCount.incrementAndGet();\n  }\n\n","sourceOld":"  private void applyAllDeletes(DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    if (deleteQueue != null && !flushControl.isFullFlush()) {\n      ticketQueue.addDeletesAndPurge(this, deleteQueue);\n    }\n    indexWriter.applyAllDeletes();\n    indexWriter.flushCount.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7af110b00ea8df9429309d83e38e0533d82e144f","date":1376924768,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#applyAllDeletes(DocumentsWriterDeleteQueue).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#applyAllDeletes(DocumentsWriterDeleteQueue).mjava","sourceNew":"  private final boolean applyAllDeletes(DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    if (flushControl.doApplyAllDeletes()) {\n      if (deleteQueue != null && !flushControl.isFullFlush()) {\n        ticketQueue.addDeletes(deleteQueue);\n      }\n      putEvent(ApplyDeletesEvent.INSTANCE); // apply deletes event forces a purge\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  private void applyAllDeletes(DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    if (deleteQueue != null && !flushControl.isFullFlush()) {\n      ticketQueue.addDeletesAndPurge(this, deleteQueue);\n    }\n    indexWriter.applyAllDeletes();\n    indexWriter.flushCount.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#applyAllDeletes(DocumentsWriterDeleteQueue).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#applyAllDeletes(DocumentsWriterDeleteQueue).mjava","sourceNew":"  private final boolean applyAllDeletes(DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    if (flushControl.doApplyAllDeletes()) {\n      if (deleteQueue != null && !flushControl.isFullFlush()) {\n        ticketQueue.addDeletes(deleteQueue);\n      }\n      putEvent(ApplyDeletesEvent.INSTANCE); // apply deletes event forces a purge\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  private void applyAllDeletes(DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    if (deleteQueue != null && !flushControl.isFullFlush()) {\n      ticketQueue.addDeletesAndPurge(this, deleteQueue);\n    }\n    indexWriter.applyAllDeletes();\n    indexWriter.flushCount.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#applyAllDeletes(DocumentsWriterDeleteQueue).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#applyAllDeletes(DocumentsWriterDeleteQueue).mjava","sourceNew":"  private final boolean applyAllDeletes(DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    if (flushControl.doApplyAllDeletes()) {\n      if (deleteQueue != null && !flushControl.isFullFlush()) {\n        ticketQueue.addDeletes(deleteQueue);\n      }\n      putEvent(ApplyDeletesEvent.INSTANCE); // apply deletes event forces a purge\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  private void applyAllDeletes(DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    if (deleteQueue != null && !flushControl.isFullFlush()) {\n      ticketQueue.addDeletesAndPurge(this, deleteQueue);\n    }\n    indexWriter.applyAllDeletes();\n    indexWriter.flushCount.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b288771781089025c5e73be47061af91d3b6bf6","date":1380632555,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#applyAllDeletes(DocumentsWriterDeleteQueue).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#applyAllDeletes(DocumentsWriterDeleteQueue).mjava","sourceNew":"  private final boolean applyAllDeletes(DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    if (flushControl.getAndResetApplyAllDeletes()) {\n      if (deleteQueue != null && !flushControl.isFullFlush()) {\n        ticketQueue.addDeletes(deleteQueue);\n      }\n      putEvent(ApplyDeletesEvent.INSTANCE); // apply deletes event forces a purge\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  private final boolean applyAllDeletes(DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    if (flushControl.doApplyAllDeletes()) {\n      if (deleteQueue != null && !flushControl.isFullFlush()) {\n        ticketQueue.addDeletes(deleteQueue);\n      }\n      putEvent(ApplyDeletesEvent.INSTANCE); // apply deletes event forces a purge\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":["9664831d785795f0f380fccc6db560efb979fdbb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c02b804ab16489b95429791a2d8fb0e0728354d4","date":1436551798,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#applyAllDeletes(DocumentsWriterDeleteQueue).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#applyAllDeletes(DocumentsWriterDeleteQueue).mjava","sourceNew":"  private boolean applyAllDeletes(DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    if (flushControl.getAndResetApplyAllDeletes()) {\n      if (deleteQueue != null && !flushControl.isFullFlush()) {\n        ticketQueue.addDeletes(deleteQueue);\n      }\n      putEvent(ApplyDeletesEvent.INSTANCE); // apply deletes event forces a purge\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  private final boolean applyAllDeletes(DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    if (flushControl.getAndResetApplyAllDeletes()) {\n      if (deleteQueue != null && !flushControl.isFullFlush()) {\n        ticketQueue.addDeletes(deleteQueue);\n      }\n      putEvent(ApplyDeletesEvent.INSTANCE); // apply deletes event forces a purge\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#applyAllDeletes(DocumentsWriterDeleteQueue).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#applyAllDeletes(DocumentsWriterDeleteQueue).mjava","sourceNew":"  /** If buffered deletes are using too much heap, resolve them and write disk and return true. */\n  private boolean applyAllDeletes(DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    if (flushControl.getAndResetApplyAllDeletes()) {\n      if (deleteQueue != null) {\n        ticketQueue.addDeletes(deleteQueue);\n      }\n      putEvent(ApplyDeletesEvent.INSTANCE); // apply deletes event forces a purge\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  private boolean applyAllDeletes(DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    if (flushControl.getAndResetApplyAllDeletes()) {\n      if (deleteQueue != null && !flushControl.isFullFlush()) {\n        ticketQueue.addDeletes(deleteQueue);\n      }\n      putEvent(ApplyDeletesEvent.INSTANCE); // apply deletes event forces a purge\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#applyAllDeletes(DocumentsWriterDeleteQueue).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#applyAllDeletes(DocumentsWriterDeleteQueue).mjava","sourceNew":"  /** If buffered deletes are using too much heap, resolve them and write disk and return true. */\n  private boolean applyAllDeletes(DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    if (flushControl.getAndResetApplyAllDeletes()) {\n      if (deleteQueue != null) {\n        ticketQueue.addDeletes(deleteQueue);\n      }\n      putEvent(ApplyDeletesEvent.INSTANCE); // apply deletes event forces a purge\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  private boolean applyAllDeletes(DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    if (flushControl.getAndResetApplyAllDeletes()) {\n      if (deleteQueue != null && !flushControl.isFullFlush()) {\n        ticketQueue.addDeletes(deleteQueue);\n      }\n      putEvent(ApplyDeletesEvent.INSTANCE); // apply deletes event forces a purge\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#applyAllDeletes(DocumentsWriterDeleteQueue).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#applyAllDeletes(DocumentsWriterDeleteQueue).mjava","sourceNew":"  /** If buffered deletes are using too much heap, resolve them and write disk and return true. */\n  private boolean applyAllDeletes(DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    if (flushControl.getAndResetApplyAllDeletes()) {\n      if (deleteQueue != null) {\n        ticketQueue.addDeletes(deleteQueue);\n      }\n      putEvent(ApplyDeletesEvent.INSTANCE); // apply deletes event forces a purge\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  private boolean applyAllDeletes(DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    if (flushControl.getAndResetApplyAllDeletes()) {\n      if (deleteQueue != null && !flushControl.isFullFlush()) {\n        ticketQueue.addDeletes(deleteQueue);\n      }\n      putEvent(ApplyDeletesEvent.INSTANCE); // apply deletes event forces a purge\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"86a2e8a56b368d37ef3ba7180541fa317d6fd6c7","date":1524496660,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#applyAllDeletes(DocumentsWriterDeleteQueue).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#applyAllDeletes(DocumentsWriterDeleteQueue).mjava","sourceNew":"  /** If buffered deletes are using too much heap, resolve them and write disk and return true. */\n  private boolean applyAllDeletes(DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    if (flushControl.getAndResetApplyAllDeletes()) {\n      if (deleteQueue != null) {\n        ticketQueue.addDeletes(deleteQueue);\n      }\n      flushNotifications.onDeletesApplied(); // apply deletes event forces a purge\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /** If buffered deletes are using too much heap, resolve them and write disk and return true. */\n  private boolean applyAllDeletes(DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    if (flushControl.getAndResetApplyAllDeletes()) {\n      if (deleteQueue != null) {\n        ticketQueue.addDeletes(deleteQueue);\n      }\n      putEvent(ApplyDeletesEvent.INSTANCE); // apply deletes event forces a purge\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9664831d785795f0f380fccc6db560efb979fdbb","date":1526559002,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#applyAllDeletes(DocumentsWriterDeleteQueue).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#applyAllDeletes(DocumentsWriterDeleteQueue).mjava","sourceNew":"  /** If buffered deletes are using too much heap, resolve them and write disk and return true. */\n  private boolean applyAllDeletes(DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    if (flushControl.isFullFlush() == false // never apply deletes during full flush this breaks happens before relationship\n        && flushControl.getAndResetApplyAllDeletes()) {\n      if (deleteQueue != null) {\n        assert assertTicketQueueModification(deleteQueue);\n        ticketQueue.addDeletes(deleteQueue);\n      }\n      flushNotifications.onDeletesApplied(); // apply deletes event forces a purge\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /** If buffered deletes are using too much heap, resolve them and write disk and return true. */\n  private boolean applyAllDeletes(DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    if (flushControl.getAndResetApplyAllDeletes()) {\n      if (deleteQueue != null) {\n        ticketQueue.addDeletes(deleteQueue);\n      }\n      flushNotifications.onDeletesApplied(); // apply deletes event forces a purge\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":["5b288771781089025c5e73be47061af91d3b6bf6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34067df01cbbefc83d0b316037fe4e10d89ba6a3","date":1559054674,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#applyAllDeletes().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#applyAllDeletes(DocumentsWriterDeleteQueue).mjava","sourceNew":"  /** If buffered deletes are using too much heap, resolve them and write disk and return true. */\n  private boolean applyAllDeletes() throws IOException {\n    final DocumentsWriterDeleteQueue deleteQueue = this.deleteQueue;\n    if (flushControl.isFullFlush() == false // never apply deletes during full flush this breaks happens before relationship\n        && deleteQueue.isOpen() // if it's closed then it's already fully applied and we have a new delete queue\n        && flushControl.getAndResetApplyAllDeletes()) {\n      if (ticketQueue.addDeletes(deleteQueue)) {\n        flushNotifications.onDeletesApplied(); // apply deletes event forces a purge\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /** If buffered deletes are using too much heap, resolve them and write disk and return true. */\n  private boolean applyAllDeletes(DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    if (flushControl.isFullFlush() == false // never apply deletes during full flush this breaks happens before relationship\n        && flushControl.getAndResetApplyAllDeletes()) {\n      if (deleteQueue != null) {\n        assert assertTicketQueueModification(deleteQueue);\n        ticketQueue.addDeletes(deleteQueue);\n      }\n      flushNotifications.onDeletesApplied(); // apply deletes event forces a purge\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9","date":1559371943,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#applyAllDeletes().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#applyAllDeletes(DocumentsWriterDeleteQueue).mjava","sourceNew":"  /** If buffered deletes are using too much heap, resolve them and write disk and return true. */\n  private boolean applyAllDeletes() throws IOException {\n    final DocumentsWriterDeleteQueue deleteQueue = this.deleteQueue;\n    if (flushControl.isFullFlush() == false // never apply deletes during full flush this breaks happens before relationship\n        && deleteQueue.isOpen() // if it's closed then it's already fully applied and we have a new delete queue\n        && flushControl.getAndResetApplyAllDeletes()) {\n      if (ticketQueue.addDeletes(deleteQueue)) {\n        flushNotifications.onDeletesApplied(); // apply deletes event forces a purge\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /** If buffered deletes are using too much heap, resolve them and write disk and return true. */\n  private boolean applyAllDeletes(DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    if (flushControl.isFullFlush() == false // never apply deletes during full flush this breaks happens before relationship\n        && flushControl.getAndResetApplyAllDeletes()) {\n      if (deleteQueue != null) {\n        assert assertTicketQueueModification(deleteQueue);\n        ticketQueue.addDeletes(deleteQueue);\n      }\n      flushNotifications.onDeletesApplied(); // apply deletes event forces a purge\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7af110b00ea8df9429309d83e38e0533d82e144f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"86a2e8a56b368d37ef3ba7180541fa317d6fd6c7":["28288370235ed02234a64753cdbf0c6ec096304a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["c02b804ab16489b95429791a2d8fb0e0728354d4"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7af110b00ea8df9429309d83e38e0533d82e144f"],"31d4861802ca404d78ca1d15f4550eec415b9199":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7af110b00ea8df9429309d83e38e0533d82e144f"],"34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9":["9664831d785795f0f380fccc6db560efb979fdbb","34067df01cbbefc83d0b316037fe4e10d89ba6a3"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["c02b804ab16489b95429791a2d8fb0e0728354d4","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["c02b804ab16489b95429791a2d8fb0e0728354d4","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"c02b804ab16489b95429791a2d8fb0e0728354d4":["5b288771781089025c5e73be47061af91d3b6bf6"],"5b288771781089025c5e73be47061af91d3b6bf6":["7af110b00ea8df9429309d83e38e0533d82e144f"],"9664831d785795f0f380fccc6db560efb979fdbb":["86a2e8a56b368d37ef3ba7180541fa317d6fd6c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"34067df01cbbefc83d0b316037fe4e10d89ba6a3":["9664831d785795f0f380fccc6db560efb979fdbb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9"]},"commit2Childs":{"7af110b00ea8df9429309d83e38e0533d82e144f":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","5b288771781089025c5e73be47061af91d3b6bf6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7af110b00ea8df9429309d83e38e0533d82e144f","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"86a2e8a56b368d37ef3ba7180541fa317d6fd6c7":["9664831d785795f0f380fccc6db560efb979fdbb"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["86a2e8a56b368d37ef3ba7180541fa317d6fd6c7"],"c02b804ab16489b95429791a2d8fb0e0728354d4":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"5b288771781089025c5e73be47061af91d3b6bf6":["c02b804ab16489b95429791a2d8fb0e0728354d4"],"9664831d785795f0f380fccc6db560efb979fdbb":["34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9","34067df01cbbefc83d0b316037fe4e10d89ba6a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"34067df01cbbefc83d0b316037fe4e10d89ba6a3":["34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}