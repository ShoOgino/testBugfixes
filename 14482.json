{"path":"lucene/backwards/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans0().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans0().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans0().mjava","sourceNew":"  public void testSpans0() throws Exception {\n    SpanQuery q1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery q2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery q  = new SpanOrQuery(new SpanQuery[]\n      { q1, new FieldMaskingSpanQuery(q2, \"gender\")});\n    check(q, new int[] { 0, 1, 2, 3, 4 });\n  \n    Spans span = q.getSpans(searcher.getIndexReader());\n    \n    assertEquals(true, span.next());\n    assertEquals(s(0,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(1,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(1,1,2), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,1,2), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,2,3), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(3,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(4,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(4,1,2), s(span));\n\n    assertEquals(false, span.next());\n  }\n\n","sourceOld":"  public void testSpans0() throws Exception {\n    SpanQuery q1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery q2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery q  = new SpanOrQuery(new SpanQuery[]\n      { q1, new FieldMaskingSpanQuery(q2, \"gender\")});\n    check(q, new int[] { 0, 1, 2, 3, 4 });\n  \n    Spans span = q.getSpans(searcher.getIndexReader());\n    \n    assertEquals(true, span.next());\n    assertEquals(s(0,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(1,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(1,1,2), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,1,2), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,2,3), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(3,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(4,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(4,1,2), s(span));\n\n    assertEquals(false, span.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testSpans0().mjava","sourceNew":null,"sourceOld":"  public void testSpans0() throws Exception {\n    SpanQuery q1 = new SpanTermQuery(new Term(\"gender\", \"female\"));\n    SpanQuery q2 = new SpanTermQuery(new Term(\"first\",  \"james\"));\n    SpanQuery q  = new SpanOrQuery(new SpanQuery[]\n      { q1, new FieldMaskingSpanQuery(q2, \"gender\")});\n    check(q, new int[] { 0, 1, 2, 3, 4 });\n  \n    Spans span = q.getSpans(searcher.getIndexReader());\n    \n    assertEquals(true, span.next());\n    assertEquals(s(0,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(1,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(1,1,2), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,1,2), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(2,2,3), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(3,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(4,0,1), s(span));\n\n    assertEquals(true, span.next());\n    assertEquals(s(4,1,2), s(span));\n\n    assertEquals(false, span.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}