{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testColStatus().mjava","commits":[{"id":"3470ed04f0378c1ceb02e540e3296dd27c0ae3d5","date":1552136881,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testColStatus().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testColStatus() throws Exception {\n    final String collectionName = \"collectionStatusTest\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .process(cluster.getSolrClient());\n\n    cluster.waitForActiveCollection(collectionName, 2, 4);\n\n    SolrClient client = cluster.getSolrClient();\n    // index some docs\n    for (int i = 0; i < 10; i++) {\n      client.add(collectionName, new SolrInputDocument(\"id\", String.valueOf(i)));\n    }\n    client.commit(collectionName);\n\n    CollectionAdminRequest.ColStatus req = CollectionAdminRequest.collectionStatus(collectionName);\n    req.setWithFieldInfo(true);\n    req.setWithCoreInfo(true);\n    req.setWithSegments(true);\n    req.setWithSizeInfo(true);\n    CollectionAdminResponse rsp = req.process(cluster.getSolrClient());\n    assertEquals(0, rsp.getStatus());\n    NamedList<Object> segInfos = (NamedList<Object>) rsp.getResponse().findRecursive(collectionName, \"shards\", \"shard1\", \"leader\", \"segInfos\");\n    assertNotNull(Utils.toJSONString(rsp), segInfos.findRecursive(\"info\", \"core\", \"startTime\"));\n    assertNotNull(Utils.toJSONString(rsp), segInfos.get(\"fieldInfoLegend\"));\n    assertNotNull(Utils.toJSONString(rsp), segInfos.findRecursive(\"segments\", \"_0\", \"fields\", \"id\", \"flags\"));\n    assertNotNull(Utils.toJSONString(rsp), segInfos.findRecursive(\"segments\", \"_0\", \"ramBytesUsed\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ad6e19bcb4308271044d303a0308ab4788dc13a","date":1552647157,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testColStatus().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testColStatus().mjava","sourceNew":"  @Test\n  public void testColStatus() throws Exception {\n    final String collectionName = \"collectionStatusTest\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf2\", 2, 2)\n        .process(cluster.getSolrClient());\n\n    cluster.waitForActiveCollection(collectionName, 2, 4);\n\n    SolrClient client = cluster.getSolrClient();\n    byte[] binData = collectionName.getBytes(\"UTF-8\");\n    // index some docs\n    for (int i = 0; i < 10; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(i));\n      doc.addField(\"number_i\", i);\n      doc.addField(\"number_l\", i);\n      doc.addField(\"number_f\", i);\n      doc.addField(\"number_d\", i);\n      doc.addField(\"number_ti\", i);\n      doc.addField(\"number_tl\", i);\n      doc.addField(\"number_tf\", i);\n      doc.addField(\"number_td\", i);\n      doc.addField(\"point\", i + \",\" + i);\n      doc.addField(\"pointD\", i + \",\" + i);\n      doc.addField(\"store\", (i * 5) + \",\" + (i * 5));\n      doc.addField(\"boolean_b\", true);\n      doc.addField(\"multi_int_with_docvals\", i);\n      doc.addField(\"string_s\", String.valueOf(i));\n      doc.addField(\"tv_mv_string\", \"this is a test \" + i);\n      doc.addField(\"timestamp_dt\", new Date());\n      doc.addField(\"timestamp_tdt\", new Date());\n      doc.addField(\"payload\", binData);\n      client.add(collectionName, doc);\n    }\n    client.commit(collectionName);\n\n    CollectionAdminRequest.ColStatus req = CollectionAdminRequest.collectionStatus(collectionName);\n    req.setWithFieldInfo(true);\n    req.setWithCoreInfo(true);\n    req.setWithSegments(true);\n    req.setWithSizeInfo(true);\n    CollectionAdminResponse rsp = req.process(cluster.getSolrClient());\n    assertEquals(0, rsp.getStatus());\n    List<Object> nonCompliant = (List<Object>)rsp.getResponse().findRecursive(collectionName, \"schemaNonCompliant\");\n    assertEquals(nonCompliant.toString(), 1, nonCompliant.size());\n    assertTrue(nonCompliant.toString(), nonCompliant.contains(\"(NONE)\"));\n    NamedList<Object> segInfos = (NamedList<Object>) rsp.getResponse().findRecursive(collectionName, \"shards\", \"shard1\", \"leader\", \"segInfos\");\n    assertNotNull(Utils.toJSONString(rsp), segInfos.findRecursive(\"info\", \"core\", \"startTime\"));\n    assertNotNull(Utils.toJSONString(rsp), segInfos.get(\"fieldInfoLegend\"));\n    assertNotNull(Utils.toJSONString(rsp), segInfos.findRecursive(\"segments\", \"_0\", \"fields\", \"id\", \"flags\"));\n    assertNotNull(Utils.toJSONString(rsp), segInfos.findRecursive(\"segments\", \"_0\", \"ramBytesUsed\"));\n  }\n\n","sourceOld":"  @Test\n  public void testColStatus() throws Exception {\n    final String collectionName = \"collectionStatusTest\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .process(cluster.getSolrClient());\n\n    cluster.waitForActiveCollection(collectionName, 2, 4);\n\n    SolrClient client = cluster.getSolrClient();\n    // index some docs\n    for (int i = 0; i < 10; i++) {\n      client.add(collectionName, new SolrInputDocument(\"id\", String.valueOf(i)));\n    }\n    client.commit(collectionName);\n\n    CollectionAdminRequest.ColStatus req = CollectionAdminRequest.collectionStatus(collectionName);\n    req.setWithFieldInfo(true);\n    req.setWithCoreInfo(true);\n    req.setWithSegments(true);\n    req.setWithSizeInfo(true);\n    CollectionAdminResponse rsp = req.process(cluster.getSolrClient());\n    assertEquals(0, rsp.getStatus());\n    NamedList<Object> segInfos = (NamedList<Object>) rsp.getResponse().findRecursive(collectionName, \"shards\", \"shard1\", \"leader\", \"segInfos\");\n    assertNotNull(Utils.toJSONString(rsp), segInfos.findRecursive(\"info\", \"core\", \"startTime\"));\n    assertNotNull(Utils.toJSONString(rsp), segInfos.get(\"fieldInfoLegend\"));\n    assertNotNull(Utils.toJSONString(rsp), segInfos.findRecursive(\"segments\", \"_0\", \"fields\", \"id\", \"flags\"));\n    assertNotNull(Utils.toJSONString(rsp), segInfos.findRecursive(\"segments\", \"_0\", \"ramBytesUsed\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0dad9b7f87a8b63745f1abe3772caaeb25f16cbd","date":1572959165,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testColStatus().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testColStatus().mjava","sourceNew":"  @Test\n  public void testColStatus() throws Exception {\n    final String collectionName = \"collectionStatusTest\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf2\", 2, 2)\n        .process(cluster.getSolrClient());\n\n    cluster.waitForActiveCollection(collectionName, 2, 4);\n\n    SolrClient client = cluster.getSolrClient();\n    byte[] binData = collectionName.getBytes(\"UTF-8\");\n    // index some docs\n    for (int i = 0; i < 10; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(i));\n      doc.addField(\"number_i\", i);\n      doc.addField(\"number_l\", i);\n      doc.addField(\"number_f\", i);\n      doc.addField(\"number_d\", i);\n      doc.addField(\"number_ti\", i);\n      doc.addField(\"number_tl\", i);\n      doc.addField(\"number_tf\", i);\n      doc.addField(\"number_td\", i);\n      doc.addField(\"point\", i + \",\" + i);\n      doc.addField(\"pointD\", i + \",\" + i);\n      doc.addField(\"store\", (i * 5) + \",\" + (i * 5));\n      doc.addField(\"boolean_b\", true);\n      doc.addField(\"multi_int_with_docvals\", i);\n      doc.addField(\"string_s\", String.valueOf(i));\n      doc.addField(\"tv_mv_string\", \"this is a test \" + i);\n      doc.addField(\"timestamp_dt\", new Date());\n      doc.addField(\"timestamp_tdt\", new Date());\n      doc.addField(\"payload\", binData);\n      client.add(collectionName, doc);\n    }\n    client.commit(collectionName);\n\n    CollectionAdminRequest.ColStatus req = CollectionAdminRequest.collectionStatus(collectionName);\n    req.setWithFieldInfo(true);\n    req.setWithCoreInfo(true);\n    req.setWithSegments(true);\n    req.setWithSizeInfo(true);\n    CollectionAdminResponse rsp = req.process(cluster.getSolrClient());\n    assertEquals(0, rsp.getStatus());\n    List<Object> nonCompliant = (List<Object>)rsp.getResponse().findRecursive(collectionName, \"schemaNonCompliant\");\n    assertEquals(nonCompliant.toString(), 1, nonCompliant.size());\n    assertTrue(nonCompliant.toString(), nonCompliant.contains(\"(NONE)\"));\n    NamedList<Object> segInfos = (NamedList<Object>) rsp.getResponse().findRecursive(collectionName, \"shards\", \"shard1\", \"leader\", \"segInfos\");\n    assertNotNull(Utils.toJSONString(rsp), segInfos.findRecursive(\"info\", \"core\", \"startTime\"));\n    assertNotNull(Utils.toJSONString(rsp), segInfos.get(\"fieldInfoLegend\"));\n    assertNotNull(Utils.toJSONString(rsp), segInfos.findRecursive(\"segments\", \"_0\", \"fields\", \"id\", \"flags\"));\n    assertNotNull(Utils.toJSONString(rsp), segInfos.findRecursive(\"segments\", \"_0\", \"ramBytesUsed\"));\n    // test for replicas not active - SOLR-13882\n    DocCollection coll = cluster.getSolrClient().getClusterStateProvider().getClusterState().getCollection(collectionName);\n    Replica firstReplica = coll.getSlice(\"shard1\").getReplicas().iterator().next();\n    String firstNode = firstReplica.getNodeName();\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      if (jetty.getNodeName().equals(firstNode)) {\n        cluster.stopJettySolrRunner(jetty);\n      }\n    }\n    rsp = req.process(cluster.getSolrClient());\n    assertEquals(0, rsp.getStatus());\n    Number down = (Number) rsp.getResponse().findRecursive(collectionName, \"shards\", \"shard1\", \"replicas\", \"down\");\n    assertTrue(\"should be some down replicas, but there were none in shard1:\" + rsp, down.intValue() > 0);\n  }\n\n","sourceOld":"  @Test\n  public void testColStatus() throws Exception {\n    final String collectionName = \"collectionStatusTest\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf2\", 2, 2)\n        .process(cluster.getSolrClient());\n\n    cluster.waitForActiveCollection(collectionName, 2, 4);\n\n    SolrClient client = cluster.getSolrClient();\n    byte[] binData = collectionName.getBytes(\"UTF-8\");\n    // index some docs\n    for (int i = 0; i < 10; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(i));\n      doc.addField(\"number_i\", i);\n      doc.addField(\"number_l\", i);\n      doc.addField(\"number_f\", i);\n      doc.addField(\"number_d\", i);\n      doc.addField(\"number_ti\", i);\n      doc.addField(\"number_tl\", i);\n      doc.addField(\"number_tf\", i);\n      doc.addField(\"number_td\", i);\n      doc.addField(\"point\", i + \",\" + i);\n      doc.addField(\"pointD\", i + \",\" + i);\n      doc.addField(\"store\", (i * 5) + \",\" + (i * 5));\n      doc.addField(\"boolean_b\", true);\n      doc.addField(\"multi_int_with_docvals\", i);\n      doc.addField(\"string_s\", String.valueOf(i));\n      doc.addField(\"tv_mv_string\", \"this is a test \" + i);\n      doc.addField(\"timestamp_dt\", new Date());\n      doc.addField(\"timestamp_tdt\", new Date());\n      doc.addField(\"payload\", binData);\n      client.add(collectionName, doc);\n    }\n    client.commit(collectionName);\n\n    CollectionAdminRequest.ColStatus req = CollectionAdminRequest.collectionStatus(collectionName);\n    req.setWithFieldInfo(true);\n    req.setWithCoreInfo(true);\n    req.setWithSegments(true);\n    req.setWithSizeInfo(true);\n    CollectionAdminResponse rsp = req.process(cluster.getSolrClient());\n    assertEquals(0, rsp.getStatus());\n    List<Object> nonCompliant = (List<Object>)rsp.getResponse().findRecursive(collectionName, \"schemaNonCompliant\");\n    assertEquals(nonCompliant.toString(), 1, nonCompliant.size());\n    assertTrue(nonCompliant.toString(), nonCompliant.contains(\"(NONE)\"));\n    NamedList<Object> segInfos = (NamedList<Object>) rsp.getResponse().findRecursive(collectionName, \"shards\", \"shard1\", \"leader\", \"segInfos\");\n    assertNotNull(Utils.toJSONString(rsp), segInfos.findRecursive(\"info\", \"core\", \"startTime\"));\n    assertNotNull(Utils.toJSONString(rsp), segInfos.get(\"fieldInfoLegend\"));\n    assertNotNull(Utils.toJSONString(rsp), segInfos.findRecursive(\"segments\", \"_0\", \"fields\", \"id\", \"flags\"));\n    assertNotNull(Utils.toJSONString(rsp), segInfos.findRecursive(\"segments\", \"_0\", \"ramBytesUsed\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testColStatus().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testColStatus().mjava","sourceNew":"  @Test\n  public void testColStatus() throws Exception {\n    final String collectionName = \"collectionStatusTest\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf2\", 2, 2)\n        .process(cluster.getSolrClient());\n\n    cluster.waitForActiveCollection(collectionName, 2, 4);\n\n    SolrClient client = cluster.getSolrClient();\n    byte[] binData = collectionName.getBytes(\"UTF-8\");\n    // index some docs\n    for (int i = 0; i < 10; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(i));\n      doc.addField(\"number_i\", i);\n      doc.addField(\"number_l\", i);\n      doc.addField(\"number_f\", i);\n      doc.addField(\"number_d\", i);\n      doc.addField(\"number_ti\", i);\n      doc.addField(\"number_tl\", i);\n      doc.addField(\"number_tf\", i);\n      doc.addField(\"number_td\", i);\n      doc.addField(\"point\", i + \",\" + i);\n      doc.addField(\"pointD\", i + \",\" + i);\n      doc.addField(\"store\", (i * 5) + \",\" + (i * 5));\n      doc.addField(\"boolean_b\", true);\n      doc.addField(\"multi_int_with_docvals\", i);\n      doc.addField(\"string_s\", String.valueOf(i));\n      doc.addField(\"tv_mv_string\", \"this is a test \" + i);\n      doc.addField(\"timestamp_dt\", new Date());\n      doc.addField(\"timestamp_tdt\", new Date());\n      doc.addField(\"payload\", binData);\n      client.add(collectionName, doc);\n    }\n    client.commit(collectionName);\n\n    CollectionAdminRequest.ColStatus req = CollectionAdminRequest.collectionStatus(collectionName);\n    req.setWithFieldInfo(true);\n    req.setWithCoreInfo(true);\n    req.setWithSegments(true);\n    req.setWithSizeInfo(true);\n    CollectionAdminResponse rsp = req.process(cluster.getSolrClient());\n    assertEquals(0, rsp.getStatus());\n    @SuppressWarnings({\"unchecked\"})\n    List<Object> nonCompliant = (List<Object>)rsp.getResponse().findRecursive(collectionName, \"schemaNonCompliant\");\n    assertEquals(nonCompliant.toString(), 1, nonCompliant.size());\n    assertTrue(nonCompliant.toString(), nonCompliant.contains(\"(NONE)\"));\n    @SuppressWarnings({\"unchecked\"})\n    NamedList<Object> segInfos = (NamedList<Object>) rsp.getResponse().findRecursive(collectionName, \"shards\", \"shard1\", \"leader\", \"segInfos\");\n    assertNotNull(Utils.toJSONString(rsp), segInfos.findRecursive(\"info\", \"core\", \"startTime\"));\n    assertNotNull(Utils.toJSONString(rsp), segInfos.get(\"fieldInfoLegend\"));\n    assertNotNull(Utils.toJSONString(rsp), segInfos.findRecursive(\"segments\", \"_0\", \"fields\", \"id\", \"flags\"));\n    assertNotNull(Utils.toJSONString(rsp), segInfos.findRecursive(\"segments\", \"_0\", \"ramBytesUsed\"));\n    // test for replicas not active - SOLR-13882\n    DocCollection coll = cluster.getSolrClient().getClusterStateProvider().getClusterState().getCollection(collectionName);\n    Replica firstReplica = coll.getSlice(\"shard1\").getReplicas().iterator().next();\n    String firstNode = firstReplica.getNodeName();\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      if (jetty.getNodeName().equals(firstNode)) {\n        cluster.stopJettySolrRunner(jetty);\n      }\n    }\n    rsp = req.process(cluster.getSolrClient());\n    assertEquals(0, rsp.getStatus());\n    Number down = (Number) rsp.getResponse().findRecursive(collectionName, \"shards\", \"shard1\", \"replicas\", \"down\");\n    assertTrue(\"should be some down replicas, but there were none in shard1:\" + rsp, down.intValue() > 0);\n  }\n\n","sourceOld":"  @Test\n  public void testColStatus() throws Exception {\n    final String collectionName = \"collectionStatusTest\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf2\", 2, 2)\n        .process(cluster.getSolrClient());\n\n    cluster.waitForActiveCollection(collectionName, 2, 4);\n\n    SolrClient client = cluster.getSolrClient();\n    byte[] binData = collectionName.getBytes(\"UTF-8\");\n    // index some docs\n    for (int i = 0; i < 10; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", String.valueOf(i));\n      doc.addField(\"number_i\", i);\n      doc.addField(\"number_l\", i);\n      doc.addField(\"number_f\", i);\n      doc.addField(\"number_d\", i);\n      doc.addField(\"number_ti\", i);\n      doc.addField(\"number_tl\", i);\n      doc.addField(\"number_tf\", i);\n      doc.addField(\"number_td\", i);\n      doc.addField(\"point\", i + \",\" + i);\n      doc.addField(\"pointD\", i + \",\" + i);\n      doc.addField(\"store\", (i * 5) + \",\" + (i * 5));\n      doc.addField(\"boolean_b\", true);\n      doc.addField(\"multi_int_with_docvals\", i);\n      doc.addField(\"string_s\", String.valueOf(i));\n      doc.addField(\"tv_mv_string\", \"this is a test \" + i);\n      doc.addField(\"timestamp_dt\", new Date());\n      doc.addField(\"timestamp_tdt\", new Date());\n      doc.addField(\"payload\", binData);\n      client.add(collectionName, doc);\n    }\n    client.commit(collectionName);\n\n    CollectionAdminRequest.ColStatus req = CollectionAdminRequest.collectionStatus(collectionName);\n    req.setWithFieldInfo(true);\n    req.setWithCoreInfo(true);\n    req.setWithSegments(true);\n    req.setWithSizeInfo(true);\n    CollectionAdminResponse rsp = req.process(cluster.getSolrClient());\n    assertEquals(0, rsp.getStatus());\n    List<Object> nonCompliant = (List<Object>)rsp.getResponse().findRecursive(collectionName, \"schemaNonCompliant\");\n    assertEquals(nonCompliant.toString(), 1, nonCompliant.size());\n    assertTrue(nonCompliant.toString(), nonCompliant.contains(\"(NONE)\"));\n    NamedList<Object> segInfos = (NamedList<Object>) rsp.getResponse().findRecursive(collectionName, \"shards\", \"shard1\", \"leader\", \"segInfos\");\n    assertNotNull(Utils.toJSONString(rsp), segInfos.findRecursive(\"info\", \"core\", \"startTime\"));\n    assertNotNull(Utils.toJSONString(rsp), segInfos.get(\"fieldInfoLegend\"));\n    assertNotNull(Utils.toJSONString(rsp), segInfos.findRecursive(\"segments\", \"_0\", \"fields\", \"id\", \"flags\"));\n    assertNotNull(Utils.toJSONString(rsp), segInfos.findRecursive(\"segments\", \"_0\", \"ramBytesUsed\"));\n    // test for replicas not active - SOLR-13882\n    DocCollection coll = cluster.getSolrClient().getClusterStateProvider().getClusterState().getCollection(collectionName);\n    Replica firstReplica = coll.getSlice(\"shard1\").getReplicas().iterator().next();\n    String firstNode = firstReplica.getNodeName();\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      if (jetty.getNodeName().equals(firstNode)) {\n        cluster.stopJettySolrRunner(jetty);\n      }\n    }\n    rsp = req.process(cluster.getSolrClient());\n    assertEquals(0, rsp.getStatus());\n    Number down = (Number) rsp.getResponse().findRecursive(collectionName, \"shards\", \"shard1\", \"replicas\", \"down\");\n    assertTrue(\"should be some down replicas, but there were none in shard1:\" + rsp, down.intValue() > 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0dad9b7f87a8b63745f1abe3772caaeb25f16cbd":["3ad6e19bcb4308271044d303a0308ab4788dc13a"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["0dad9b7f87a8b63745f1abe3772caaeb25f16cbd"],"3ad6e19bcb4308271044d303a0308ab4788dc13a":["3470ed04f0378c1ceb02e540e3296dd27c0ae3d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3470ed04f0378c1ceb02e540e3296dd27c0ae3d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"]},"commit2Childs":{"0dad9b7f87a8b63745f1abe3772caaeb25f16cbd":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3ad6e19bcb4308271044d303a0308ab4788dc13a":["0dad9b7f87a8b63745f1abe3772caaeb25f16cbd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3470ed04f0378c1ceb02e540e3296dd27c0ae3d5"],"3470ed04f0378c1ceb02e540e3296dd27c0ae3d5":["3ad6e19bcb4308271044d303a0308ab4788dc13a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}