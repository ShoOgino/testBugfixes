{"path":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#nextLong(Random,long,long).mjava","commits":[{"id":"7dfbac05ca8694aac59eef8e62e429bf52bce36e","date":1340114344,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#nextLong(Random,long,long).mjava","pathOld":"/dev/null","sourceNew":"  /** start and end are BOTH inclusive */\n  public static long nextLong(Random r, long start, long end) {\n    assert end >= start;\n    final BigInteger range = BigInteger.valueOf(end).add(BigInteger.valueOf(1)).subtract(BigInteger.valueOf(start));\n    if (range.compareTo(BigInteger.valueOf(Integer.MAX_VALUE)) <= 0) {\n      return start + r.nextInt(range.intValue());\n    } else {\n      // probably not evenly distributed when range is large, but OK for tests\n      final BigInteger augend = new BigDecimal(range).multiply(new BigDecimal(r.nextDouble())).toBigInteger();\n      final long result = BigInteger.valueOf(start).add(augend).longValue();\n      assert result >= start;\n      assert result <= end;\n      return result;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":5,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#nextLong(Random,long,long).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#nextLong(Random,long,long).mjava","sourceNew":"  /** start and end are BOTH inclusive */\n  public static long nextLong(Random r, long start, long end) {\n    assert end >= start;\n    final BigInteger range = BigInteger.valueOf(end).add(BigInteger.valueOf(1)).subtract(BigInteger.valueOf(start));\n    if (range.compareTo(BigInteger.valueOf(Integer.MAX_VALUE)) <= 0) {\n      return start + r.nextInt(range.intValue());\n    } else {\n      // probably not evenly distributed when range is large, but OK for tests\n      final BigInteger augend = new BigDecimal(range).multiply(new BigDecimal(r.nextDouble())).toBigInteger();\n      final long result = BigInteger.valueOf(start).add(augend).longValue();\n      assert result >= start;\n      assert result <= end;\n      return result;\n    }\n  }\n\n","sourceOld":"  /** start and end are BOTH inclusive */\n  public static long nextLong(Random r, long start, long end) {\n    assert end >= start;\n    final BigInteger range = BigInteger.valueOf(end).add(BigInteger.valueOf(1)).subtract(BigInteger.valueOf(start));\n    if (range.compareTo(BigInteger.valueOf(Integer.MAX_VALUE)) <= 0) {\n      return start + r.nextInt(range.intValue());\n    } else {\n      // probably not evenly distributed when range is large, but OK for tests\n      final BigInteger augend = new BigDecimal(range).multiply(new BigDecimal(r.nextDouble())).toBigInteger();\n      final long result = BigInteger.valueOf(start).add(augend).longValue();\n      assert result >= start;\n      assert result <= end;\n      return result;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6613659748fe4411a7dcf85266e55db1f95f7315":["7dfbac05ca8694aac59eef8e62e429bf52bce36e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dfbac05ca8694aac59eef8e62e429bf52bce36e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6613659748fe4411a7dcf85266e55db1f95f7315"]},"commit2Childs":{"6613659748fe4411a7dcf85266e55db1f95f7315":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7dfbac05ca8694aac59eef8e62e429bf52bce36e"],"7dfbac05ca8694aac59eef8e62e429bf52bce36e":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}