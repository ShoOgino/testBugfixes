{"path":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#testPreExistingMultiValueMixedLang().mjava","commits":[{"id":"f773aa7ec61919212782e382986aae52b1462206","date":1391602665,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#testPreExistingMultiValueMixedLang().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test not only 1st value taken into account (ru text),\n   * but all values of 'text_multivalue' field ('ru' and 'en').\n   */\n  @Test\n  public void testPreExistingMultiValueMixedLang() throws Exception {\n    SolrInputDocument doc;\n    parameters = new ModifiableSolrParams();\n    parameters.add(\"langid.fl\", \"text_multivalue\");\n    parameters.add(\"langid.langField\", \"language\");\n    parameters.add(\"langid.langsField\", \"languages\");\n    parameters.add(\"langid.enforceSchema\", \"false\");\n    parameters.add(\"langid.map\", \"true\");\n    liProcessor = createLangIdProcessor(parameters);\n\n    doc = mixedEnglishRussianDoc();\n    assertEquals(\"en\", liProcessor.process(doc).getFieldValue(\"language\"));\n    assertEquals(\"en\", liProcessor.process(doc).getFieldValue(\"languages\"));\n\n    doc = mixedEnglishRussianDoc();\n    doc.setField(\"language\", \"no\");\n    assertEquals(\"no\", liProcessor.process(doc).getFieldValue(\"language\"));\n    assertEquals(\"no\", liProcessor.process(doc).getFieldValue(\"languages\"));\n    assertNotNull(liProcessor.process(doc).getFieldValue(\"text_multivalue_no\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1a2a2c4468a8bdff4cb7487d8b203d835d963e65","a4da5f9e2a1f2ac76feac0c0796bdce4881cb687"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a2a2c4468a8bdff4cb7487d8b203d835d963e65","date":1408126346,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#testPreExistingMultiValueMixedLang().mjava","pathOld":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#testPreExistingMultiValueMixedLang().mjava","sourceNew":"  /**\n   * Test not only 1st value taken into account (ru text),\n   * but all values of 'text_multivalue' field ('ru' and 'en').\n   */\n  @Test\n  public void testPreExistingMultiValueMixedLang() throws Exception {\n    SolrInputDocument doc;\n    ModifiableSolrParams parameters = new ModifiableSolrParams();\n    parameters.add(\"langid.fl\", \"text_multivalue\");\n    parameters.add(\"langid.langField\", \"language\");\n    parameters.add(\"langid.langsField\", \"languages\");\n    parameters.add(\"langid.enforceSchema\", \"false\");\n    parameters.add(\"langid.map\", \"true\");\n    liProcessor = createLangIdProcessor(parameters);\n\n    doc = mixedEnglishRussianDoc();\n    assertEquals(\"en\", liProcessor.process(doc).getFieldValue(\"language\"));\n    assertEquals(\"en\", liProcessor.process(doc).getFieldValue(\"languages\"));\n\n    doc = mixedEnglishRussianDoc();\n    doc.setField(\"language\", \"no\");\n    assertEquals(\"no\", liProcessor.process(doc).getFieldValue(\"language\"));\n    assertEquals(\"no\", liProcessor.process(doc).getFieldValue(\"languages\"));\n    assertNotNull(liProcessor.process(doc).getFieldValue(\"text_multivalue_no\"));\n  }\n\n","sourceOld":"  /**\n   * Test not only 1st value taken into account (ru text),\n   * but all values of 'text_multivalue' field ('ru' and 'en').\n   */\n  @Test\n  public void testPreExistingMultiValueMixedLang() throws Exception {\n    SolrInputDocument doc;\n    parameters = new ModifiableSolrParams();\n    parameters.add(\"langid.fl\", \"text_multivalue\");\n    parameters.add(\"langid.langField\", \"language\");\n    parameters.add(\"langid.langsField\", \"languages\");\n    parameters.add(\"langid.enforceSchema\", \"false\");\n    parameters.add(\"langid.map\", \"true\");\n    liProcessor = createLangIdProcessor(parameters);\n\n    doc = mixedEnglishRussianDoc();\n    assertEquals(\"en\", liProcessor.process(doc).getFieldValue(\"language\"));\n    assertEquals(\"en\", liProcessor.process(doc).getFieldValue(\"languages\"));\n\n    doc = mixedEnglishRussianDoc();\n    doc.setField(\"language\", \"no\");\n    assertEquals(\"no\", liProcessor.process(doc).getFieldValue(\"language\"));\n    assertEquals(\"no\", liProcessor.process(doc).getFieldValue(\"languages\"));\n    assertNotNull(liProcessor.process(doc).getFieldValue(\"text_multivalue_no\"));\n  }\n\n","bugFix":["f773aa7ec61919212782e382986aae52b1462206"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a4da5f9e2a1f2ac76feac0c0796bdce4881cb687","date":1546536444,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#testPreExistingMultiValueMixedLang().mjava","pathOld":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#testPreExistingMultiValueMixedLang().mjava","sourceNew":"  /**\n   * Test not only 1st value taken into account (ru text),\n   * but all values of 'text_multivalue' field ('ru' and 'en').\n   */\n  @Test\n  public void testPreExistingMultiValueMixedLang() throws Exception {\n    SolrInputDocument doc;\n    ModifiableSolrParams parameters = new ModifiableSolrParams();\n    parameters.add(\"langid.fl\", \"text_multivalue\");\n    parameters.add(\"langid.langField\", \"language\");\n    parameters.add(\"langid.langsField\", \"languages\");\n    parameters.add(\"langid.enforceSchema\", \"false\");\n    parameters.add(\"langid.map\", \"true\");\n    liProcessor = createLangIdProcessor(parameters);\n\n    doc = mixedEnglishRussianDoc();\n    assertEquals(\"en\", process(doc).getFieldValue(\"language\"));\n    assertEquals(\"en\", process(doc).getFieldValue(\"languages\"));\n\n    doc = mixedEnglishRussianDoc();\n    doc.setField(\"language\", \"no\");\n    assertEquals(\"no\", process(doc).getFieldValue(\"language\"));\n    assertEquals(\"no\", process(doc).getFieldValue(\"languages\"));\n    assertNotNull(process(doc).getFieldValue(\"text_multivalue_no\"));\n  }\n\n","sourceOld":"  /**\n   * Test not only 1st value taken into account (ru text),\n   * but all values of 'text_multivalue' field ('ru' and 'en').\n   */\n  @Test\n  public void testPreExistingMultiValueMixedLang() throws Exception {\n    SolrInputDocument doc;\n    ModifiableSolrParams parameters = new ModifiableSolrParams();\n    parameters.add(\"langid.fl\", \"text_multivalue\");\n    parameters.add(\"langid.langField\", \"language\");\n    parameters.add(\"langid.langsField\", \"languages\");\n    parameters.add(\"langid.enforceSchema\", \"false\");\n    parameters.add(\"langid.map\", \"true\");\n    liProcessor = createLangIdProcessor(parameters);\n\n    doc = mixedEnglishRussianDoc();\n    assertEquals(\"en\", liProcessor.process(doc).getFieldValue(\"language\"));\n    assertEquals(\"en\", liProcessor.process(doc).getFieldValue(\"languages\"));\n\n    doc = mixedEnglishRussianDoc();\n    doc.setField(\"language\", \"no\");\n    assertEquals(\"no\", liProcessor.process(doc).getFieldValue(\"language\"));\n    assertEquals(\"no\", liProcessor.process(doc).getFieldValue(\"languages\"));\n    assertNotNull(liProcessor.process(doc).getFieldValue(\"text_multivalue_no\"));\n  }\n\n","bugFix":["f773aa7ec61919212782e382986aae52b1462206"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a2a2c4468a8bdff4cb7487d8b203d835d963e65":["f773aa7ec61919212782e382986aae52b1462206"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f773aa7ec61919212782e382986aae52b1462206":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a4da5f9e2a1f2ac76feac0c0796bdce4881cb687":["1a2a2c4468a8bdff4cb7487d8b203d835d963e65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a4da5f9e2a1f2ac76feac0c0796bdce4881cb687"]},"commit2Childs":{"1a2a2c4468a8bdff4cb7487d8b203d835d963e65":["a4da5f9e2a1f2ac76feac0c0796bdce4881cb687"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f773aa7ec61919212782e382986aae52b1462206"],"f773aa7ec61919212782e382986aae52b1462206":["1a2a2c4468a8bdff4cb7487d8b203d835d963e65"],"a4da5f9e2a1f2ac76feac0c0796bdce4881cb687":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}