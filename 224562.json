{"path":"lucene/src/java/org/apache/lucene/codecs/BlockTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/BlockTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert stats.docFreq > 0;\n      //System.out.println(\"BTW: finishTerm term=\" + fieldInfo.name + \":\" + text.utf8ToString() + \" \" + text + \" seg=\" + segment + \" df=\" + stats.docFreq);\n\n      final boolean isIndexTerm = fieldIndexWriter.checkIndexTerm(text, stats);\n\n      if (isIndexTerm) {\n        if (pendingCount > 0) {\n          // Instead of writing each term, live, we gather terms\n          // in RAM in a pending buffer, and then write the\n          // entire block in between index terms:\n          flushBlock();\n        }\n        fieldIndexWriter.add(text, stats, out.getFilePointer());\n        //System.out.println(\"  index term!\");\n      }\n\n      if (pendingTerms.length == pendingCount) {\n        final TermEntry[] newArray = new TermEntry[ArrayUtil.oversize(pendingCount+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(pendingTerms, 0, newArray, 0, pendingCount);\n        for(int i=pendingCount;i<newArray.length;i++) {\n          newArray[i] = new TermEntry();\n        }\n        pendingTerms = newArray;\n      }\n      final TermEntry te = pendingTerms[pendingCount];\n      te.term.copyBytes(text);\n      te.stats = stats;\n\n      pendingCount++;\n\n      postingsWriter.finishTerm(stats);\n      numTerms++;\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert stats.docFreq > 0;\n      //System.out.println(\"BTW: finishTerm term=\" + fieldInfo.name + \":\" + text.utf8ToString() + \" \" + text + \" seg=\" + segment + \" df=\" + stats.docFreq);\n\n      final boolean isIndexTerm = fieldIndexWriter.checkIndexTerm(text, stats);\n\n      if (isIndexTerm) {\n        if (pendingCount > 0) {\n          // Instead of writing each term, live, we gather terms\n          // in RAM in a pending buffer, and then write the\n          // entire block in between index terms:\n          flushBlock();\n        }\n        fieldIndexWriter.add(text, stats, out.getFilePointer());\n        //System.out.println(\"  index term!\");\n      }\n\n      if (pendingTerms.length == pendingCount) {\n        final TermEntry[] newArray = new TermEntry[ArrayUtil.oversize(pendingCount+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(pendingTerms, 0, newArray, 0, pendingCount);\n        for(int i=pendingCount;i<newArray.length;i++) {\n          newArray[i] = new TermEntry();\n        }\n        pendingTerms = newArray;\n      }\n      final TermEntry te = pendingTerms[pendingCount];\n      te.term.copyBytes(text);\n      te.stats = stats;\n\n      pendingCount++;\n\n      postingsWriter.finishTerm(stats);\n      numTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/BlockTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert stats.docFreq > 0;\n      //System.out.println(\"BTW: finishTerm term=\" + fieldInfo.name + \":\" + text.utf8ToString() + \" \" + text + \" seg=\" + segment + \" df=\" + stats.docFreq);\n\n      final boolean isIndexTerm = fieldIndexWriter.checkIndexTerm(text, stats);\n\n      if (isIndexTerm) {\n        if (pendingCount > 0) {\n          // Instead of writing each term, live, we gather terms\n          // in RAM in a pending buffer, and then write the\n          // entire block in between index terms:\n          flushBlock();\n        }\n        fieldIndexWriter.add(text, stats, out.getFilePointer());\n        //System.out.println(\"  index term!\");\n      }\n\n      if (pendingTerms.length == pendingCount) {\n        final TermEntry[] newArray = new TermEntry[ArrayUtil.oversize(pendingCount+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(pendingTerms, 0, newArray, 0, pendingCount);\n        for(int i=pendingCount;i<newArray.length;i++) {\n          newArray[i] = new TermEntry();\n        }\n        pendingTerms = newArray;\n      }\n      final TermEntry te = pendingTerms[pendingCount];\n      te.term.copyBytes(text);\n      te.stats = stats;\n\n      pendingCount++;\n\n      postingsWriter.finishTerm(stats);\n      numTerms++;\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert stats.docFreq > 0;\n      //System.out.println(\"BTW: finishTerm term=\" + fieldInfo.name + \":\" + text.utf8ToString() + \" \" + text + \" seg=\" + segment + \" df=\" + stats.docFreq);\n\n      final boolean isIndexTerm = fieldIndexWriter.checkIndexTerm(text, stats);\n\n      if (isIndexTerm) {\n        if (pendingCount > 0) {\n          // Instead of writing each term, live, we gather terms\n          // in RAM in a pending buffer, and then write the\n          // entire block in between index terms:\n          flushBlock();\n        }\n        fieldIndexWriter.add(text, stats, out.getFilePointer());\n        //System.out.println(\"  index term!\");\n      }\n\n      if (pendingTerms.length == pendingCount) {\n        final TermEntry[] newArray = new TermEntry[ArrayUtil.oversize(pendingCount+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(pendingTerms, 0, newArray, 0, pendingCount);\n        for(int i=pendingCount;i<newArray.length;i++) {\n          newArray[i] = new TermEntry();\n        }\n        pendingTerms = newArray;\n      }\n      final TermEntry te = pendingTerms[pendingCount];\n      te.term.copyBytes(text);\n      te.stats = stats;\n\n      pendingCount++;\n\n      postingsWriter.finishTerm(stats);\n      numTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}