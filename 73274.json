{"path":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toMap().mjava","commits":[{"id":"531fe719c7218235a679452eb3d137bfd8fc6af1","date":1415191086,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toMap().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Map<String, Object> toMap() {\n    Map<String, Object> m = ZkNodeProps.makeMap(\"maxBufferedDocs\", maxBufferedDocs,\n        \"maxMergeDocs\", maxMergeDocs,\n        \"maxIndexingThreads\", maxIndexingThreads,\n        \"mergeFactor\", mergeFactor,\n        \"ramBufferSizeMB\", ramBufferSizeMB,\n        \"writeLockTimeout\", writeLockTimeout,\n        \"lockType\", lockType);\n    if(mergeSchedulerInfo != null) m.put(\"mergeScheduler\",mergeSchedulerInfo.toMap());\n    if(mergePolicyInfo != null) m.put(\"mergeScheduler\",mergePolicyInfo.toMap());\n    return m;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5cedf6c663f63b47755a40ae6cd1405a7fe6b24d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cedf6c663f63b47755a40ae6cd1405a7fe6b24d","date":1435939256,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toMap().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toMap().mjava","sourceNew":"  @Override\n  public Map<String, Object> toMap() {\n    Map<String, Object> m = ZkNodeProps.makeMap(\"useCompoundFile\", effectiveUseCompoundFileSetting,\n        \"maxBufferedDocs\", maxBufferedDocs,\n        \"maxMergeDocs\", maxMergeDocs,\n        \"maxIndexingThreads\", maxIndexingThreads,\n        \"mergeFactor\", mergeFactor,\n        \"ramBufferSizeMB\", ramBufferSizeMB,\n        \"writeLockTimeout\", writeLockTimeout,\n        \"lockType\", lockType,\n        \"infoStreamEnabled\", infoStream != InfoStream.NO_OUTPUT);\n    if(mergeSchedulerInfo != null) m.put(\"mergeScheduler\",mergeSchedulerInfo.toMap());\n    if(mergePolicyInfo != null) m.put(\"mergePolicy\",mergePolicyInfo.toMap());\n    if(mergedSegmentWarmerInfo != null) m.put(\"mergedSegmentWarmer\",mergedSegmentWarmerInfo.toMap());\n    return m;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> toMap() {\n    Map<String, Object> m = ZkNodeProps.makeMap(\"maxBufferedDocs\", maxBufferedDocs,\n        \"maxMergeDocs\", maxMergeDocs,\n        \"maxIndexingThreads\", maxIndexingThreads,\n        \"mergeFactor\", mergeFactor,\n        \"ramBufferSizeMB\", ramBufferSizeMB,\n        \"writeLockTimeout\", writeLockTimeout,\n        \"lockType\", lockType);\n    if(mergeSchedulerInfo != null) m.put(\"mergeScheduler\",mergeSchedulerInfo.toMap());\n    if(mergePolicyInfo != null) m.put(\"mergeScheduler\",mergePolicyInfo.toMap());\n    return m;\n  }\n\n","bugFix":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c02b804ab16489b95429791a2d8fb0e0728354d4","date":1436551798,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toMap().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toMap().mjava","sourceNew":"  @Override\n  public Map<String, Object> toMap() {\n    Map<String, Object> m = ZkNodeProps.makeMap(\"useCompoundFile\", effectiveUseCompoundFileSetting,\n        \"maxBufferedDocs\", maxBufferedDocs,\n        \"maxMergeDocs\", maxMergeDocs,\n        \"mergeFactor\", mergeFactor,\n        \"ramBufferSizeMB\", ramBufferSizeMB,\n        \"writeLockTimeout\", writeLockTimeout,\n        \"lockType\", lockType,\n        \"infoStreamEnabled\", infoStream != InfoStream.NO_OUTPUT);\n    if(mergeSchedulerInfo != null) m.put(\"mergeScheduler\",mergeSchedulerInfo.toMap());\n    if(mergePolicyInfo != null) m.put(\"mergePolicy\",mergePolicyInfo.toMap());\n    if(mergedSegmentWarmerInfo != null) m.put(\"mergedSegmentWarmer\",mergedSegmentWarmerInfo.toMap());\n    return m;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> toMap() {\n    Map<String, Object> m = ZkNodeProps.makeMap(\"useCompoundFile\", effectiveUseCompoundFileSetting,\n        \"maxBufferedDocs\", maxBufferedDocs,\n        \"maxMergeDocs\", maxMergeDocs,\n        \"maxIndexingThreads\", maxIndexingThreads,\n        \"mergeFactor\", mergeFactor,\n        \"ramBufferSizeMB\", ramBufferSizeMB,\n        \"writeLockTimeout\", writeLockTimeout,\n        \"lockType\", lockType,\n        \"infoStreamEnabled\", infoStream != InfoStream.NO_OUTPUT);\n    if(mergeSchedulerInfo != null) m.put(\"mergeScheduler\",mergeSchedulerInfo.toMap());\n    if(mergePolicyInfo != null) m.put(\"mergePolicy\",mergePolicyInfo.toMap());\n    if(mergedSegmentWarmerInfo != null) m.put(\"mergedSegmentWarmer\",mergedSegmentWarmerInfo.toMap());\n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toMap().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toMap().mjava","sourceNew":"  @Override\n  public Map<String, Object> toMap() {\n    Map<String, Object> m = Utils.makeMap(\"useCompoundFile\", effectiveUseCompoundFileSetting,\n        \"maxBufferedDocs\", maxBufferedDocs,\n        \"maxMergeDocs\", maxMergeDocs,\n        \"mergeFactor\", mergeFactor,\n        \"ramBufferSizeMB\", ramBufferSizeMB,\n        \"writeLockTimeout\", writeLockTimeout,\n        \"lockType\", lockType,\n        \"infoStreamEnabled\", infoStream != InfoStream.NO_OUTPUT);\n    if(mergeSchedulerInfo != null) m.put(\"mergeScheduler\",mergeSchedulerInfo.toMap());\n    if(mergePolicyInfo != null) m.put(\"mergePolicy\",mergePolicyInfo.toMap());\n    if(mergedSegmentWarmerInfo != null) m.put(\"mergedSegmentWarmer\",mergedSegmentWarmerInfo.toMap());\n    return m;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> toMap() {\n    Map<String, Object> m = ZkNodeProps.makeMap(\"useCompoundFile\", effectiveUseCompoundFileSetting,\n        \"maxBufferedDocs\", maxBufferedDocs,\n        \"maxMergeDocs\", maxMergeDocs,\n        \"mergeFactor\", mergeFactor,\n        \"ramBufferSizeMB\", ramBufferSizeMB,\n        \"writeLockTimeout\", writeLockTimeout,\n        \"lockType\", lockType,\n        \"infoStreamEnabled\", infoStream != InfoStream.NO_OUTPUT);\n    if(mergeSchedulerInfo != null) m.put(\"mergeScheduler\",mergeSchedulerInfo.toMap());\n    if(mergePolicyInfo != null) m.put(\"mergePolicy\",mergePolicyInfo.toMap());\n    if(mergedSegmentWarmerInfo != null) m.put(\"mergedSegmentWarmer\",mergedSegmentWarmerInfo.toMap());\n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0b63f11e3ddc945f1d021e1d7c6484267f597e1","date":1454966413,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toMap().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toMap().mjava","sourceNew":"  @Override\n  public Map<String, Object> toMap() {\n    Map<String, Object> m = Utils.makeMap(\"useCompoundFile\", effectiveUseCompoundFileSetting,\n        \"maxBufferedDocs\", maxBufferedDocs,\n        \"maxMergeDocs\", maxMergeDocs,\n        \"mergeFactor\", mergeFactor,\n        \"ramBufferSizeMB\", ramBufferSizeMB,\n        \"writeLockTimeout\", writeLockTimeout,\n        \"lockType\", lockType,\n        \"infoStreamEnabled\", infoStream != InfoStream.NO_OUTPUT);\n    if(mergeSchedulerInfo != null) m.put(\"mergeScheduler\",mergeSchedulerInfo.toMap());\n    if (mergePolicyInfo != null) {\n      m.put(\"mergePolicy\", mergePolicyInfo.toMap());\n    } else if (mergePolicyFactoryInfo != null) {\n      m.put(\"mergePolicy\", mergePolicyFactoryInfo.toMap());\n    }\n    if(mergedSegmentWarmerInfo != null) m.put(\"mergedSegmentWarmer\",mergedSegmentWarmerInfo.toMap());\n    return m;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> toMap() {\n    Map<String, Object> m = Utils.makeMap(\"useCompoundFile\", effectiveUseCompoundFileSetting,\n        \"maxBufferedDocs\", maxBufferedDocs,\n        \"maxMergeDocs\", maxMergeDocs,\n        \"mergeFactor\", mergeFactor,\n        \"ramBufferSizeMB\", ramBufferSizeMB,\n        \"writeLockTimeout\", writeLockTimeout,\n        \"lockType\", lockType,\n        \"infoStreamEnabled\", infoStream != InfoStream.NO_OUTPUT);\n    if(mergeSchedulerInfo != null) m.put(\"mergeScheduler\",mergeSchedulerInfo.toMap());\n    if(mergePolicyInfo != null) m.put(\"mergePolicy\",mergePolicyInfo.toMap());\n    if(mergedSegmentWarmerInfo != null) m.put(\"mergedSegmentWarmer\",mergedSegmentWarmerInfo.toMap());\n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f7730fa9149de890ea12da1fa93be9f5e3a1edf","date":1455303885,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toMap().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toMap().mjava","sourceNew":"  @Override\n  public Map<String, Object> toMap() {\n    Map<String, Object> m = Utils.makeMap(\"useCompoundFile\", effectiveUseCompoundFileSetting,\n        \"maxBufferedDocs\", maxBufferedDocs,\n        \"maxMergeDocs\", maxMergeDocs,\n        \"mergeFactor\", mergeFactor,\n        \"ramBufferSizeMB\", ramBufferSizeMB,\n        \"writeLockTimeout\", writeLockTimeout,\n        \"lockType\", lockType,\n        \"infoStreamEnabled\", infoStream != InfoStream.NO_OUTPUT);\n    if(mergeSchedulerInfo != null) m.put(\"mergeScheduler\",mergeSchedulerInfo.toMap());\n    if (mergePolicyInfo != null) {\n      m.put(\"mergePolicy\", mergePolicyInfo.toMap());\n    } else if (mergePolicyFactoryInfo != null) {\n      m.put(\"mergePolicyFactory\", mergePolicyFactoryInfo.toMap());\n    }\n    if(mergedSegmentWarmerInfo != null) m.put(\"mergedSegmentWarmer\",mergedSegmentWarmerInfo.toMap());\n    return m;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> toMap() {\n    Map<String, Object> m = Utils.makeMap(\"useCompoundFile\", effectiveUseCompoundFileSetting,\n        \"maxBufferedDocs\", maxBufferedDocs,\n        \"maxMergeDocs\", maxMergeDocs,\n        \"mergeFactor\", mergeFactor,\n        \"ramBufferSizeMB\", ramBufferSizeMB,\n        \"writeLockTimeout\", writeLockTimeout,\n        \"lockType\", lockType,\n        \"infoStreamEnabled\", infoStream != InfoStream.NO_OUTPUT);\n    if(mergeSchedulerInfo != null) m.put(\"mergeScheduler\",mergeSchedulerInfo.toMap());\n    if (mergePolicyInfo != null) {\n      m.put(\"mergePolicy\", mergePolicyInfo.toMap());\n    } else if (mergePolicyFactoryInfo != null) {\n      m.put(\"mergePolicy\", mergePolicyFactoryInfo.toMap());\n    }\n    if(mergedSegmentWarmerInfo != null) m.put(\"mergedSegmentWarmer\",mergedSegmentWarmerInfo.toMap());\n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f1f31880696765d6aec499d3b01fa501129af45","date":1474287317,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toMap(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toMap().mjava","sourceNew":"  @Override\n  public Map<String, Object> toMap(Map<String, Object> map) {\n    Map<String, Object> m = Utils.makeMap(\"useCompoundFile\", effectiveUseCompoundFileSetting,\n        \"maxBufferedDocs\", maxBufferedDocs,\n        \"maxMergeDocs\", maxMergeDocs,\n        \"mergeFactor\", mergeFactor,\n        \"ramBufferSizeMB\", ramBufferSizeMB,\n        \"writeLockTimeout\", writeLockTimeout,\n        \"lockType\", lockType,\n        \"infoStreamEnabled\", infoStream != InfoStream.NO_OUTPUT);\n    if(mergeSchedulerInfo != null) m.put(\"mergeScheduler\",mergeSchedulerInfo);\n    if (mergePolicyInfo != null) {\n      m.put(\"mergePolicy\", mergePolicyInfo);\n    } else if (mergePolicyFactoryInfo != null) {\n      m.put(\"mergePolicyFactory\", mergePolicyFactoryInfo);\n    }\n    if(mergedSegmentWarmerInfo != null) m.put(\"mergedSegmentWarmer\",mergedSegmentWarmerInfo);\n    return m;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> toMap() {\n    Map<String, Object> m = Utils.makeMap(\"useCompoundFile\", effectiveUseCompoundFileSetting,\n        \"maxBufferedDocs\", maxBufferedDocs,\n        \"maxMergeDocs\", maxMergeDocs,\n        \"mergeFactor\", mergeFactor,\n        \"ramBufferSizeMB\", ramBufferSizeMB,\n        \"writeLockTimeout\", writeLockTimeout,\n        \"lockType\", lockType,\n        \"infoStreamEnabled\", infoStream != InfoStream.NO_OUTPUT);\n    if(mergeSchedulerInfo != null) m.put(\"mergeScheduler\",mergeSchedulerInfo.toMap());\n    if (mergePolicyInfo != null) {\n      m.put(\"mergePolicy\", mergePolicyInfo.toMap());\n    } else if (mergePolicyFactoryInfo != null) {\n      m.put(\"mergePolicyFactory\", mergePolicyFactoryInfo.toMap());\n    }\n    if(mergedSegmentWarmerInfo != null) m.put(\"mergedSegmentWarmer\",mergedSegmentWarmerInfo.toMap());\n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toMap().mjava","sourceNew":null,"sourceOld":"  @Override\n  public Map<String, Object> toMap() {\n    Map<String, Object> m = Utils.makeMap(\"useCompoundFile\", effectiveUseCompoundFileSetting,\n        \"maxBufferedDocs\", maxBufferedDocs,\n        \"maxMergeDocs\", maxMergeDocs,\n        \"mergeFactor\", mergeFactor,\n        \"ramBufferSizeMB\", ramBufferSizeMB,\n        \"writeLockTimeout\", writeLockTimeout,\n        \"lockType\", lockType,\n        \"infoStreamEnabled\", infoStream != InfoStream.NO_OUTPUT);\n    if(mergeSchedulerInfo != null) m.put(\"mergeScheduler\",mergeSchedulerInfo.toMap());\n    if (mergePolicyInfo != null) {\n      m.put(\"mergePolicy\", mergePolicyInfo.toMap());\n    } else if (mergePolicyFactoryInfo != null) {\n      m.put(\"mergePolicyFactory\", mergePolicyFactoryInfo.toMap());\n    }\n    if(mergedSegmentWarmerInfo != null) m.put(\"mergedSegmentWarmer\",mergedSegmentWarmerInfo.toMap());\n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#toMap().mjava","sourceNew":null,"sourceOld":"  @Override\n  public Map<String, Object> toMap() {\n    Map<String, Object> m = Utils.makeMap(\"useCompoundFile\", effectiveUseCompoundFileSetting,\n        \"maxBufferedDocs\", maxBufferedDocs,\n        \"maxMergeDocs\", maxMergeDocs,\n        \"mergeFactor\", mergeFactor,\n        \"ramBufferSizeMB\", ramBufferSizeMB,\n        \"writeLockTimeout\", writeLockTimeout,\n        \"lockType\", lockType,\n        \"infoStreamEnabled\", infoStream != InfoStream.NO_OUTPUT);\n    if(mergeSchedulerInfo != null) m.put(\"mergeScheduler\",mergeSchedulerInfo.toMap());\n    if (mergePolicyInfo != null) {\n      m.put(\"mergePolicy\", mergePolicyInfo.toMap());\n    } else if (mergePolicyFactoryInfo != null) {\n      m.put(\"mergePolicyFactory\", mergePolicyFactoryInfo.toMap());\n    }\n    if(mergedSegmentWarmerInfo != null) m.put(\"mergedSegmentWarmer\",mergedSegmentWarmerInfo.toMap());\n    return m;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d0b63f11e3ddc945f1d021e1d7c6484267f597e1":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"5cedf6c663f63b47755a40ae6cd1405a7fe6b24d":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["8f7730fa9149de890ea12da1fa93be9f5e3a1edf","1f1f31880696765d6aec499d3b01fa501129af45"],"1f1f31880696765d6aec499d3b01fa501129af45":["8f7730fa9149de890ea12da1fa93be9f5e3a1edf"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["c02b804ab16489b95429791a2d8fb0e0728354d4"],"8f7730fa9149de890ea12da1fa93be9f5e3a1edf":["d0b63f11e3ddc945f1d021e1d7c6484267f597e1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8f7730fa9149de890ea12da1fa93be9f5e3a1edf","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c02b804ab16489b95429791a2d8fb0e0728354d4":["5cedf6c663f63b47755a40ae6cd1405a7fe6b24d"]},"commit2Childs":{"d0b63f11e3ddc945f1d021e1d7c6484267f597e1":["8f7730fa9149de890ea12da1fa93be9f5e3a1edf"],"5cedf6c663f63b47755a40ae6cd1405a7fe6b24d":["c02b804ab16489b95429791a2d8fb0e0728354d4"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["5cedf6c663f63b47755a40ae6cd1405a7fe6b24d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1f1f31880696765d6aec499d3b01fa501129af45":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["d0b63f11e3ddc945f1d021e1d7c6484267f597e1"],"8f7730fa9149de890ea12da1fa93be9f5e3a1edf":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","1f1f31880696765d6aec499d3b01fa501129af45","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"c02b804ab16489b95429791a2d8fb0e0728354d4":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}