{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#read(StringBuffer,String,boolean,boolean,String).mjava","commits":[{"id":"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b","date":1245355139,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#read(StringBuffer,String,boolean,boolean,String).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocMaker#read(String,StringBuffer,boolean,boolean,String).mjava","sourceNew":"  // read until finding a line that starts with the specified prefix, or a terminating tag has been found.\n  private void read(StringBuffer buf, String prefix, boolean collectMatchLine,\n                    boolean collectAll, String terminatingTag)\n      throws IOException, NoMoreDataException {\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n\n      if (line == null) {\n        openNextFile();\n        continue;\n      }\n\n      rawDocSize += line.length();\n\n      if (line.startsWith(prefix)) {\n        if (collectMatchLine) {\n          buf.append(sep).append(line);\n          sep = NEW_LINE;\n        }\n        break;\n      }\n\n      if (terminatingTag != null && line.startsWith(terminatingTag)) {\n        // didn't find the prefix that was asked, but the terminating\n        // tag was found. set the length to 0 to signal no match was\n        // found.\n        buf.setLength(0);\n        break;\n      }\n\n      if (collectAll) {\n        buf.append(sep).append(line);\n        sep = NEW_LINE;\n      }\n    }\n  }\n\n","sourceOld":"  // read until finding a line that starts with the specified prefix\n  protected StringBuffer read(String prefix, StringBuffer sb,\n                              boolean collectMatchLine, boolean collectAll,\n                              String terminatingTag) throws Exception {\n    sb = (sb==null ? new StringBuffer() : sb);\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n      if (line == null) {\n        openNextFile();\n        continue;\n      }\n      if (line.startsWith(prefix)) {\n        if (collectMatchLine) {\n          sb.append(sep).append(line);\n          sep = NEW_LINE;\n        }\n        break;\n      }\n      \n      if (terminatingTag != null && line.startsWith(terminatingTag)) {\n    \t  // didn't find the prefix that was asked, but the terminating\n    \t  // tag was found. set the length to 0 to signal no match was\n    \t  // found.\n    \t  sb.setLength(0);\n    \t  break;\n      }\n\t\t\n\n      if (collectAll) {\n        sb.append(sep).append(line);\n        sep = NEW_LINE;\n      }\n    }\n    //System.out.println(\"read: \"+sb);\n    return sb;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#read(StringBuffer,String,boolean,boolean,String).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#read(StringBuffer,String,boolean,boolean,String).mjava","sourceNew":"  // read until finding a line that starts with the specified prefix, or a terminating tag has been found.\n  private void read(StringBuffer buf, String prefix, boolean collectMatchLine,\n                    boolean collectAll, String terminatingTag)\n      throws IOException, NoMoreDataException {\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n\n      if (line == null) {\n        openNextFile();\n        continue;\n      }\n\n      rawDocSize += line.length();\n\n      if (line.startsWith(prefix)) {\n        if (collectMatchLine) {\n          buf.append(sep).append(line);\n          sep = NEW_LINE;\n        }\n        break;\n      }\n\n      if (terminatingTag != null && line.startsWith(terminatingTag)) {\n        // didn't find the prefix that was asked, but the terminating\n        // tag was found. set the length to 0 to signal no match was\n        // found.\n        buf.setLength(0);\n        break;\n      }\n\n      if (collectAll) {\n        buf.append(sep).append(line);\n        sep = NEW_LINE;\n      }\n    }\n  }\n\n","sourceOld":"  // read until finding a line that starts with the specified prefix, or a terminating tag has been found.\n  private void read(StringBuffer buf, String prefix, boolean collectMatchLine,\n                    boolean collectAll, String terminatingTag)\n      throws IOException, NoMoreDataException {\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n\n      if (line == null) {\n        openNextFile();\n        continue;\n      }\n\n      rawDocSize += line.length();\n\n      if (line.startsWith(prefix)) {\n        if (collectMatchLine) {\n          buf.append(sep).append(line);\n          sep = NEW_LINE;\n        }\n        break;\n      }\n\n      if (terminatingTag != null && line.startsWith(terminatingTag)) {\n        // didn't find the prefix that was asked, but the terminating\n        // tag was found. set the length to 0 to signal no match was\n        // found.\n        buf.setLength(0);\n        break;\n      }\n\n      if (collectAll) {\n        buf.append(sep).append(line);\n        sep = NEW_LINE;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"]},"commit2Childs":{"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}