{"path":"lucene/core/src/java/org/apache/lucene/geo/GeoEncodingUtils#computeShift(long,long).mjava","commits":[{"id":"827a82bc4dd5d485dbe63f69e8429ecff24cb602","date":1485435575,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/GeoEncodingUtils#computeShift(long,long).mjava","pathOld":"/dev/null","sourceNew":"  /** Compute the minimum shift value so that\n   * {@code (b>>>shift)-(a>>>shift)} is less that {@code ARITY}. */\n  private static int computeShift(long a, long b) {\n    assert a < b;\n    // We enforce a shift of at least 1 so that when we work with unsigned ints\n    // by doing (lat - MIN_VALUE), the result of the shift (lat - MIN_VALUE) >>> shift\n    // can be used for comparisons without particular care: the sign bit has\n    // been cleared so comparisons work the same for signed and unsigned ints\n    for (int shift = 1; ; ++shift) {\n      final long delta = (b >>> shift) - (a >>> shift);\n      if (delta >= 0 && delta < DistancePredicate.ARITY) {\n        return shift;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/GeoEncodingUtils#computeShift(long,long).mjava","pathOld":"/dev/null","sourceNew":"  /** Compute the minimum shift value so that\n   * {@code (b>>>shift)-(a>>>shift)} is less that {@code ARITY}. */\n  private static int computeShift(long a, long b) {\n    assert a < b;\n    // We enforce a shift of at least 1 so that when we work with unsigned ints\n    // by doing (lat - MIN_VALUE), the result of the shift (lat - MIN_VALUE) >>> shift\n    // can be used for comparisons without particular care: the sign bit has\n    // been cleared so comparisons work the same for signed and unsigned ints\n    for (int shift = 1; ; ++shift) {\n      final long delta = (b >>> shift) - (a >>> shift);\n      if (delta >= 0 && delta < DistancePredicate.ARITY) {\n        return shift;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee49d43fb47965f24d4ad89e7a1bdcc10410d615","date":1485765906,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/GeoEncodingUtils#computeShift(long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/GeoEncodingUtils#computeShift(long,long).mjava","sourceNew":"  /** Compute the minimum shift value so that\n   * {@code (b>>>shift)-(a>>>shift)} is less that {@code ARITY}. */\n  private static int computeShift(long a, long b) {\n    assert a <= b;\n    // We enforce a shift of at least 1 so that when we work with unsigned ints\n    // by doing (lat - MIN_VALUE), the result of the shift (lat - MIN_VALUE) >>> shift\n    // can be used for comparisons without particular care: the sign bit has\n    // been cleared so comparisons work the same for signed and unsigned ints\n    for (int shift = 1; ; ++shift) {\n      final long delta = (b >>> shift) - (a >>> shift);\n      if (delta >= 0 && delta < Grid.ARITY) {\n        return shift;\n      }\n    }\n  }\n\n","sourceOld":"  /** Compute the minimum shift value so that\n   * {@code (b>>>shift)-(a>>>shift)} is less that {@code ARITY}. */\n  private static int computeShift(long a, long b) {\n    assert a < b;\n    // We enforce a shift of at least 1 so that when we work with unsigned ints\n    // by doing (lat - MIN_VALUE), the result of the shift (lat - MIN_VALUE) >>> shift\n    // can be used for comparisons without particular care: the sign bit has\n    // been cleared so comparisons work the same for signed and unsigned ints\n    for (int shift = 1; ; ++shift) {\n      final long delta = (b >>> shift) - (a >>> shift);\n      if (delta >= 0 && delta < DistancePredicate.ARITY) {\n        return shift;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/GeoEncodingUtils#computeShift(long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/GeoEncodingUtils#computeShift(long,long).mjava","sourceNew":"  /** Compute the minimum shift value so that\n   * {@code (b>>>shift)-(a>>>shift)} is less that {@code ARITY}. */\n  private static int computeShift(long a, long b) {\n    assert a <= b;\n    // We enforce a shift of at least 1 so that when we work with unsigned ints\n    // by doing (lat - MIN_VALUE), the result of the shift (lat - MIN_VALUE) >>> shift\n    // can be used for comparisons without particular care: the sign bit has\n    // been cleared so comparisons work the same for signed and unsigned ints\n    for (int shift = 1; ; ++shift) {\n      final long delta = (b >>> shift) - (a >>> shift);\n      if (delta >= 0 && delta < Grid.ARITY) {\n        return shift;\n      }\n    }\n  }\n\n","sourceOld":"  /** Compute the minimum shift value so that\n   * {@code (b>>>shift)-(a>>>shift)} is less that {@code ARITY}. */\n  private static int computeShift(long a, long b) {\n    assert a < b;\n    // We enforce a shift of at least 1 so that when we work with unsigned ints\n    // by doing (lat - MIN_VALUE), the result of the shift (lat - MIN_VALUE) >>> shift\n    // can be used for comparisons without particular care: the sign bit has\n    // been cleared so comparisons work the same for signed and unsigned ints\n    for (int shift = 1; ; ++shift) {\n      final long delta = (b >>> shift) - (a >>> shift);\n      if (delta >= 0 && delta < DistancePredicate.ARITY) {\n        return shift;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"598b5d23aa7c9732bf473c21a9cd309c44599394":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","827a82bc4dd5d485dbe63f69e8429ecff24cb602"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["598b5d23aa7c9732bf473c21a9cd309c44599394","ee49d43fb47965f24d4ad89e7a1bdcc10410d615"],"ee49d43fb47965f24d4ad89e7a1bdcc10410d615":["827a82bc4dd5d485dbe63f69e8429ecff24cb602"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ee49d43fb47965f24d4ad89e7a1bdcc10410d615"],"827a82bc4dd5d485dbe63f69e8429ecff24cb602":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"598b5d23aa7c9732bf473c21a9cd309c44599394":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["598b5d23aa7c9732bf473c21a9cd309c44599394","827a82bc4dd5d485dbe63f69e8429ecff24cb602"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"ee49d43fb47965f24d4ad89e7a1bdcc10410d615":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"827a82bc4dd5d485dbe63f69e8429ecff24cb602":["598b5d23aa7c9732bf473c21a9cd309c44599394","ee49d43fb47965f24d4ad89e7a1bdcc10410d615"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}