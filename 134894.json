{"path":"src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter.TermGenerator#generate(IndexReader,TermEnum).mjava","commits":[{"id":"2aa365c0765407d280cd5df0569b430c6f36832e","date":1239881843,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter.TermGenerator#generate(IndexReader,TermEnum).mjava","pathOld":"/dev/null","sourceNew":"    public void generate(IndexReader reader, TermEnum enumerator) throws IOException {\n      TermDocs termDocs = reader.termDocs();\n      try {\n        do {\n          Term term = enumerator.term();\n          if (term == null)\n            break;\n          query.numberOfTerms++;\n          termDocs.seek(term);\n          while (termDocs.next()) {\n            handleDoc(termDocs.doc());\n          }\n        } while (enumerator.next());\n      } finally {\n        termDocs.close();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b20609f6fb2cd074bd08115b0c3280b9646af7c","date":1248480213,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter.TermGenerator#generate(IndexReader,TermEnum).mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter.TermGenerator#generate(IndexReader,TermEnum).mjava","sourceNew":"    public void generate(IndexReader reader, TermEnum enumerator) throws IOException {\n      final int[] docs = new int[32];\n      final int[] freqs = new int[32];\n      TermDocs termDocs = reader.termDocs();\n      try {\n        int termCount = 0;\n        do {\n          Term term = enumerator.term();\n          if (term == null)\n            break;\n          termCount++;\n          termDocs.seek(term);\n          while (true) {\n            final int count = termDocs.read(docs, freqs);\n            if (count != 0) {\n              for(int i=0;i<count;i++) {\n                handleDoc(docs[i]);\n              }\n            } else {\n              break;\n            }\n          }\n        } while (enumerator.next());\n\n        query.incTotalNumberOfTerms(termCount);\n\n      } finally {\n        termDocs.close();\n      }\n    }\n\n","sourceOld":"    public void generate(IndexReader reader, TermEnum enumerator) throws IOException {\n      TermDocs termDocs = reader.termDocs();\n      try {\n        do {\n          Term term = enumerator.term();\n          if (term == null)\n            break;\n          query.numberOfTerms++;\n          termDocs.seek(term);\n          while (termDocs.next()) {\n            handleDoc(termDocs.doc());\n          }\n        } while (enumerator.next());\n      } finally {\n        termDocs.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116afe09051f967c7ceac8abad873b0a1af89e84","date":1258585265,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter.TermGenerator#generate(IndexReader,TermEnum).mjava","sourceNew":null,"sourceOld":"    public void generate(IndexReader reader, TermEnum enumerator) throws IOException {\n      final int[] docs = new int[32];\n      final int[] freqs = new int[32];\n      TermDocs termDocs = reader.termDocs();\n      try {\n        int termCount = 0;\n        do {\n          Term term = enumerator.term();\n          if (term == null)\n            break;\n          termCount++;\n          termDocs.seek(term);\n          while (true) {\n            final int count = termDocs.read(docs, freqs);\n            if (count != 0) {\n              for(int i=0;i<count;i++) {\n                handleDoc(docs[i]);\n              }\n            } else {\n              break;\n            }\n          }\n        } while (enumerator.next());\n\n        query.incTotalNumberOfTerms(termCount);\n\n      } finally {\n        termDocs.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"116afe09051f967c7ceac8abad873b0a1af89e84":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2aa365c0765407d280cd5df0569b430c6f36832e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["2aa365c0765407d280cd5df0569b430c6f36832e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["116afe09051f967c7ceac8abad873b0a1af89e84"]},"commit2Childs":{"116afe09051f967c7ceac8abad873b0a1af89e84":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2aa365c0765407d280cd5df0569b430c6f36832e"],"2aa365c0765407d280cd5df0569b430c6f36832e":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["116afe09051f967c7ceac8abad873b0a1af89e84"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}