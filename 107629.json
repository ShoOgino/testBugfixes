{"path":"solr/core/src/test/org/apache/solr/search/TestSmileRequest#testDistribJsonRequest().mjava","commits":[{"id":"be73df8ac65c8f1ebef4eed2c0bd3a3b8167e235","date":1435150219,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSmileRequest#testDistribJsonRequest().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDistribJsonRequest() throws Exception {\n    initServers();\n    SolrTestCaseHS.Client client = servers.getClient(random().nextInt());\n    client.tester = new SolrTestCaseHS.Client.Tester() {\n      @Override\n      public void assertJQ(SolrClient client, SolrParams args, String... tests) throws Exception {\n        ((HttpSolrClient) client).setParser(SmileResponseParser.inst);\n        QueryRequest query = new QueryRequest(args);\n        String path = args.get(\"qt\");\n        if (path != null) {\n          query.setPath(path);\n        }\n        NamedList<Object> rsp = client.request(query);\n        Map m = rsp.asMap(5);\n        String jsonStr = ZkStateReader.toJSONString(m);\n        SolrTestCaseHS.matchJSON(jsonStr, tests);\n      }\n    };\n    client.queryDefaults().set(\"shards\", servers.getShards());\n    TestJsonRequest.doJsonRequest(client);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSmileRequest#testDistribJsonRequest().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSmileRequest#testDistribJsonRequest().mjava","sourceNew":"  @Test\n  public void testDistribJsonRequest() throws Exception {\n    initServers();\n    SolrTestCaseHS.Client client = servers.getClient(random().nextInt());\n    client.tester = new SolrTestCaseHS.Client.Tester() {\n      @Override\n      public void assertJQ(SolrClient client, SolrParams args, String... tests) throws Exception {\n        ((HttpSolrClient) client).setParser(SmileResponseParser.inst);\n        QueryRequest query = new QueryRequest(args);\n        String path = args.get(\"qt\");\n        if (path != null) {\n          query.setPath(path);\n        }\n        NamedList<Object> rsp = client.request(query);\n        Map m = rsp.asMap(5);\n        String jsonStr = Utils.toJSONString(m);\n        SolrTestCaseHS.matchJSON(jsonStr, tests);\n      }\n    };\n    client.queryDefaults().set(\"shards\", servers.getShards());\n    TestJsonRequest.doJsonRequest(client);\n\n  }\n\n","sourceOld":"  @Test\n  public void testDistribJsonRequest() throws Exception {\n    initServers();\n    SolrTestCaseHS.Client client = servers.getClient(random().nextInt());\n    client.tester = new SolrTestCaseHS.Client.Tester() {\n      @Override\n      public void assertJQ(SolrClient client, SolrParams args, String... tests) throws Exception {\n        ((HttpSolrClient) client).setParser(SmileResponseParser.inst);\n        QueryRequest query = new QueryRequest(args);\n        String path = args.get(\"qt\");\n        if (path != null) {\n          query.setPath(path);\n        }\n        NamedList<Object> rsp = client.request(query);\n        Map m = rsp.asMap(5);\n        String jsonStr = ZkStateReader.toJSONString(m);\n        SolrTestCaseHS.matchJSON(jsonStr, tests);\n      }\n    };\n    client.queryDefaults().set(\"shards\", servers.getShards());\n    TestJsonRequest.doJsonRequest(client);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10eda272dbca4b0397f9b0c2aa6fadad3601db47","date":1504272103,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSmileRequest#testDistribJsonRequest().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSmileRequest#testDistribJsonRequest().mjava","sourceNew":"  @Test\n  public void testDistribJsonRequest() throws Exception {\n    initServers();\n    SolrTestCaseHS.Client client = servers.getClient(random().nextInt());\n    client.tester = new SolrTestCaseHS.Client.Tester() {\n      @Override\n      public void assertJQ(SolrClient client, SolrParams args, String... tests) throws Exception {\n        ((HttpSolrClient) client).setParser(SmileResponseParser.inst);\n        QueryRequest query = new QueryRequest(args);\n        String path = args.get(\"qt\");\n        if (path != null) {\n          query.setPath(path);\n        }\n        NamedList<Object> rsp = client.request(query);\n        Map m = rsp.asMap(5);\n        String jsonStr = Utils.toJSONString(m);\n        SolrTestCaseHS.matchJSON(jsonStr, tests);\n      }\n    };\n    client.queryDefaults().set(\"shards\", servers.getShards());\n    TestJsonRequest.doJsonRequest(client, false);\n\n  }\n\n","sourceOld":"  @Test\n  public void testDistribJsonRequest() throws Exception {\n    initServers();\n    SolrTestCaseHS.Client client = servers.getClient(random().nextInt());\n    client.tester = new SolrTestCaseHS.Client.Tester() {\n      @Override\n      public void assertJQ(SolrClient client, SolrParams args, String... tests) throws Exception {\n        ((HttpSolrClient) client).setParser(SmileResponseParser.inst);\n        QueryRequest query = new QueryRequest(args);\n        String path = args.get(\"qt\");\n        if (path != null) {\n          query.setPath(path);\n        }\n        NamedList<Object> rsp = client.request(query);\n        Map m = rsp.asMap(5);\n        String jsonStr = Utils.toJSONString(m);\n        SolrTestCaseHS.matchJSON(jsonStr, tests);\n      }\n    };\n    client.queryDefaults().set(\"shards\", servers.getShards());\n    TestJsonRequest.doJsonRequest(client);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2755d836dbc419462f84f4c9953ef9f4d1bddf4b","date":1504273602,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSmileRequest#testDistribJsonRequest().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSmileRequest#testDistribJsonRequest().mjava","sourceNew":"  @Test\n  public void testDistribJsonRequest() throws Exception {\n    initServers();\n    SolrTestCaseHS.Client client = servers.getClient(random().nextInt());\n    client.tester = new SolrTestCaseHS.Client.Tester() {\n      @Override\n      public void assertJQ(SolrClient client, SolrParams args, String... tests) throws Exception {\n        ((HttpSolrClient) client).setParser(SmileResponseParser.inst);\n        QueryRequest query = new QueryRequest(args);\n        String path = args.get(\"qt\");\n        if (path != null) {\n          query.setPath(path);\n        }\n        NamedList<Object> rsp = client.request(query);\n        Map m = rsp.asMap(5);\n        String jsonStr = Utils.toJSONString(m);\n        SolrTestCaseHS.matchJSON(jsonStr, tests);\n      }\n    };\n    client.queryDefaults().set(\"shards\", servers.getShards());\n    TestJsonRequest.doJsonRequest(client, true);\n\n  }\n\n","sourceOld":"  @Test\n  public void testDistribJsonRequest() throws Exception {\n    initServers();\n    SolrTestCaseHS.Client client = servers.getClient(random().nextInt());\n    client.tester = new SolrTestCaseHS.Client.Tester() {\n      @Override\n      public void assertJQ(SolrClient client, SolrParams args, String... tests) throws Exception {\n        ((HttpSolrClient) client).setParser(SmileResponseParser.inst);\n        QueryRequest query = new QueryRequest(args);\n        String path = args.get(\"qt\");\n        if (path != null) {\n          query.setPath(path);\n        }\n        NamedList<Object> rsp = client.request(query);\n        Map m = rsp.asMap(5);\n        String jsonStr = Utils.toJSONString(m);\n        SolrTestCaseHS.matchJSON(jsonStr, tests);\n      }\n    };\n    client.queryDefaults().set(\"shards\", servers.getShards());\n    TestJsonRequest.doJsonRequest(client, false);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSmileRequest#testDistribJsonRequest().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSmileRequest#testDistribJsonRequest().mjava","sourceNew":"  @Test\n  public void testDistribJsonRequest() throws Exception {\n    initServers();\n    SolrTestCaseHS.Client client = servers.getClient(random().nextInt());\n    client.tester = new SolrTestCaseHS.Client.Tester() {\n      @Override\n      public void assertJQ(SolrClient client, SolrParams args, String... tests) throws Exception {\n        ((HttpSolrClient) client).setParser(SmileResponseParser.inst);\n        QueryRequest query = new QueryRequest(args);\n        String path = args.get(\"qt\");\n        if (path != null) {\n          query.setPath(path);\n        }\n        NamedList<Object> rsp = client.request(query);\n        Map m = rsp.asMap(5);\n        String jsonStr = Utils.toJSONString(m);\n        SolrTestCaseHS.matchJSON(jsonStr, tests);\n      }\n    };\n    client.queryDefaults().set(\"shards\", servers.getShards());\n    TestJsonRequest.doJsonRequest(client, true);\n\n  }\n\n","sourceOld":"  @Test\n  public void testDistribJsonRequest() throws Exception {\n    initServers();\n    SolrTestCaseHS.Client client = servers.getClient(random().nextInt());\n    client.tester = new SolrTestCaseHS.Client.Tester() {\n      @Override\n      public void assertJQ(SolrClient client, SolrParams args, String... tests) throws Exception {\n        ((HttpSolrClient) client).setParser(SmileResponseParser.inst);\n        QueryRequest query = new QueryRequest(args);\n        String path = args.get(\"qt\");\n        if (path != null) {\n          query.setPath(path);\n        }\n        NamedList<Object> rsp = client.request(query);\n        Map m = rsp.asMap(5);\n        String jsonStr = Utils.toJSONString(m);\n        SolrTestCaseHS.matchJSON(jsonStr, tests);\n      }\n    };\n    client.queryDefaults().set(\"shards\", servers.getShards());\n    TestJsonRequest.doJsonRequest(client);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21283ed01203901a7257aa4b7f0a0899c86e56e","date":1504689720,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSmileRequest#testDistribJsonRequest().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSmileRequest#testDistribJsonRequest().mjava","sourceNew":"  @Test\n  public void testDistribJsonRequest() throws Exception {\n    initServers();\n    SolrTestCaseHS.Client client = servers.getClient(random().nextInt());\n    client.tester = new SolrTestCaseHS.Client.Tester() {\n      @Override\n      public void assertJQ(SolrClient client, SolrParams args, String... tests) throws Exception {\n        ((HttpSolrClient) client).setParser(SmileResponseParser.inst);\n        QueryRequest query = new QueryRequest(args);\n        String path = args.get(\"qt\");\n        if (path != null) {\n          query.setPath(path);\n        }\n        NamedList<Object> rsp = client.request(query);\n        Map m = rsp.asMap(5);\n        String jsonStr = Utils.toJSONString(m);\n        SolrTestCaseHS.matchJSON(jsonStr, tests);\n      }\n    };\n    client.queryDefaults().set(\"shards\", servers.getShards());\n    TestJsonRequest.doJsonRequest(client, true);\n\n  }\n\n","sourceOld":"  @Test\n  public void testDistribJsonRequest() throws Exception {\n    initServers();\n    SolrTestCaseHS.Client client = servers.getClient(random().nextInt());\n    client.tester = new SolrTestCaseHS.Client.Tester() {\n      @Override\n      public void assertJQ(SolrClient client, SolrParams args, String... tests) throws Exception {\n        ((HttpSolrClient) client).setParser(SmileResponseParser.inst);\n        QueryRequest query = new QueryRequest(args);\n        String path = args.get(\"qt\");\n        if (path != null) {\n          query.setPath(path);\n        }\n        NamedList<Object> rsp = client.request(query);\n        Map m = rsp.asMap(5);\n        String jsonStr = Utils.toJSONString(m);\n        SolrTestCaseHS.matchJSON(jsonStr, tests);\n      }\n    };\n    client.queryDefaults().set(\"shards\", servers.getShards());\n    TestJsonRequest.doJsonRequest(client);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","date":1504848000,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSmileRequest#testDistribJsonRequest().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSmileRequest#testDistribJsonRequest().mjava","sourceNew":"  @Test\n  public void testDistribJsonRequest() throws Exception {\n    initServers();\n    SolrTestCaseHS.Client client = servers.getClient(random().nextInt());\n    client.tester = new SolrTestCaseHS.Client.Tester() {\n      @Override\n      public void assertJQ(SolrClient client, SolrParams args, String... tests) throws Exception {\n        ((HttpSolrClient) client).setParser(SmileResponseParser.inst);\n        QueryRequest query = new QueryRequest(args);\n        String path = args.get(\"qt\");\n        if (path != null) {\n          query.setPath(path);\n        }\n        NamedList<Object> rsp = client.request(query);\n        Map m = rsp.asMap(5);\n        String jsonStr = Utils.toJSONString(m);\n        SolrTestCaseHS.matchJSON(jsonStr, tests);\n      }\n    };\n    client.queryDefaults().set(\"shards\", servers.getShards());\n    TestJsonRequest.doJsonRequest(client, true);\n\n  }\n\n","sourceOld":"  @Test\n  public void testDistribJsonRequest() throws Exception {\n    initServers();\n    SolrTestCaseHS.Client client = servers.getClient(random().nextInt());\n    client.tester = new SolrTestCaseHS.Client.Tester() {\n      @Override\n      public void assertJQ(SolrClient client, SolrParams args, String... tests) throws Exception {\n        ((HttpSolrClient) client).setParser(SmileResponseParser.inst);\n        QueryRequest query = new QueryRequest(args);\n        String path = args.get(\"qt\");\n        if (path != null) {\n          query.setPath(path);\n        }\n        NamedList<Object> rsp = client.request(query);\n        Map m = rsp.asMap(5);\n        String jsonStr = Utils.toJSONString(m);\n        SolrTestCaseHS.matchJSON(jsonStr, tests);\n      }\n    };\n    client.queryDefaults().set(\"shards\", servers.getShards());\n    TestJsonRequest.doJsonRequest(client);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSmileRequest#testDistribJsonRequest().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSmileRequest#testDistribJsonRequest().mjava","sourceNew":"  @Test\n  public void testDistribJsonRequest() throws Exception {\n    initServers();\n    SolrTestCaseHS.Client client = servers.getClient(random().nextInt());\n    client.tester = new SolrTestCaseHS.Client.Tester() {\n      @Override\n      public void assertJQ(SolrClient client, SolrParams args, String... tests) throws Exception {\n        ((HttpSolrClient) client).setParser(SmileResponseParser.inst);\n        QueryRequest query = new QueryRequest(args);\n        String path = args.get(\"qt\");\n        if (path != null) {\n          query.setPath(path);\n        }\n        NamedList<Object> rsp = client.request(query);\n        @SuppressWarnings({\"rawtypes\"})\n        Map m = rsp.asMap(5);\n        String jsonStr = Utils.toJSONString(m);\n        SolrTestCaseHS.matchJSON(jsonStr, tests);\n      }\n    };\n    client.queryDefaults().set(\"shards\", servers.getShards());\n    TestJsonRequest.doJsonRequest(client, true);\n\n  }\n\n","sourceOld":"  @Test\n  public void testDistribJsonRequest() throws Exception {\n    initServers();\n    SolrTestCaseHS.Client client = servers.getClient(random().nextInt());\n    client.tester = new SolrTestCaseHS.Client.Tester() {\n      @Override\n      public void assertJQ(SolrClient client, SolrParams args, String... tests) throws Exception {\n        ((HttpSolrClient) client).setParser(SmileResponseParser.inst);\n        QueryRequest query = new QueryRequest(args);\n        String path = args.get(\"qt\");\n        if (path != null) {\n          query.setPath(path);\n        }\n        NamedList<Object> rsp = client.request(query);\n        Map m = rsp.asMap(5);\n        String jsonStr = Utils.toJSONString(m);\n        SolrTestCaseHS.matchJSON(jsonStr, tests);\n      }\n    };\n    client.queryDefaults().set(\"shards\", servers.getShards());\n    TestJsonRequest.doJsonRequest(client, true);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b21283ed01203901a7257aa4b7f0a0899c86e56e":["b693a83132c9e45afcd564fd65a25b60ed80388b","2755d836dbc419462f84f4c9953ef9f4d1bddf4b"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["b693a83132c9e45afcd564fd65a25b60ed80388b","b21283ed01203901a7257aa4b7f0a0899c86e56e"],"10eda272dbca4b0397f9b0c2aa6fadad3601db47":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["b693a83132c9e45afcd564fd65a25b60ed80388b","2755d836dbc419462f84f4c9953ef9f4d1bddf4b"],"2755d836dbc419462f84f4c9953ef9f4d1bddf4b":["10eda272dbca4b0397f9b0c2aa6fadad3601db47"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b693a83132c9e45afcd564fd65a25b60ed80388b":["be73df8ac65c8f1ebef4eed2c0bd3a3b8167e235"],"be73df8ac65c8f1ebef4eed2c0bd3a3b8167e235":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"]},"commit2Childs":{"b21283ed01203901a7257aa4b7f0a0899c86e56e":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["e98520789adb1d5ad05afb4956eca0944a929688"],"10eda272dbca4b0397f9b0c2aa6fadad3601db47":["2755d836dbc419462f84f4c9953ef9f4d1bddf4b"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"2755d836dbc419462f84f4c9953ef9f4d1bddf4b":["b21283ed01203901a7257aa4b7f0a0899c86e56e","3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["be73df8ac65c8f1ebef4eed2c0bd3a3b8167e235"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["b21283ed01203901a7257aa4b7f0a0899c86e56e","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","10eda272dbca4b0397f9b0c2aa6fadad3601db47","3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"be73df8ac65c8f1ebef4eed2c0bd3a3b8167e235":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}