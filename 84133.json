{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#finishTerm().mjava","commits":[{"id":"fc7a7bb1aa79cf53564793bb5ffa270250c679da","date":1357817084,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#finishTerm().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void finishTerm() throws IOException {\n    if (bufferedIndex > 0) {\n      // dump buffer\n      assert positions && (offsets || payloads);\n      assert bufferedIndex == bufferedFreq;\n      if (payloads) {\n        tvf.writeBytes(payloadData.bytes, payloadData.offset, payloadData.length);\n      }\n      for (int i = 0; i < bufferedIndex; i++) {\n        if (offsets) {\n          tvf.writeVInt(offsetStartBuffer[i] - lastOffset);\n          tvf.writeVInt(offsetEndBuffer[i] - offsetStartBuffer[i]);\n          lastOffset = offsetEndBuffer[i];\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5646ed4fdfbfdc743d81f7974110fc4f7e32d091","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#finishTerm().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void finishTerm() throws IOException {\n    if (bufferedIndex > 0) {\n      // dump buffer\n      assert positions && (offsets || payloads);\n      assert bufferedIndex == bufferedFreq;\n      if (payloads) {\n        tvf.writeBytes(payloadData.bytes, payloadData.offset, payloadData.length);\n      }\n      for (int i = 0; i < bufferedIndex; i++) {\n        if (offsets) {\n          tvf.writeVInt(offsetStartBuffer[i] - lastOffset);\n          tvf.writeVInt(offsetEndBuffer[i] - offsetStartBuffer[i]);\n          lastOffset = offsetEndBuffer[i];\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5646ed4fdfbfdc743d81f7974110fc4f7e32d091","date":1370536546,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#finishTerm().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#finishTerm().mjava","sourceNew":"  @Override\n  public void finishTerm() throws IOException {\n    if (bufferedIndex > 0) {\n      // dump buffer\n      assert positions && (offsets || payloads);\n      assert bufferedIndex == bufferedFreq;\n      if (payloads) {\n        tvf.writeBytes(payloadData.bytes, payloadData.offset, payloadData.length);\n      }\n      if (offsets) {\n        for (int i = 0; i < bufferedIndex; i++) {\n          tvf.writeVInt(offsetStartBuffer[i] - lastOffset);\n          tvf.writeVInt(offsetEndBuffer[i] - offsetStartBuffer[i]);\n          lastOffset = offsetEndBuffer[i];\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void finishTerm() throws IOException {\n    if (bufferedIndex > 0) {\n      // dump buffer\n      assert positions && (offsets || payloads);\n      assert bufferedIndex == bufferedFreq;\n      if (payloads) {\n        tvf.writeBytes(payloadData.bytes, payloadData.offset, payloadData.length);\n      }\n      for (int i = 0; i < bufferedIndex; i++) {\n        if (offsets) {\n          tvf.writeVInt(offsetStartBuffer[i] - lastOffset);\n          tvf.writeVInt(offsetEndBuffer[i] - offsetStartBuffer[i]);\n          lastOffset = offsetEndBuffer[i];\n        }\n      }\n    }\n  }\n\n","bugFix":["fc7a7bb1aa79cf53564793bb5ffa270250c679da"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#finishTerm().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#finishTerm().mjava","sourceNew":"  @Override\n  public void finishTerm() throws IOException {\n    if (bufferedIndex > 0) {\n      // dump buffer\n      assert positions && (offsets || payloads);\n      assert bufferedIndex == bufferedFreq;\n      if (payloads) {\n        tvf.writeBytes(payloadData.bytes(), 0, payloadData.length());\n      }\n      if (offsets) {\n        for (int i = 0; i < bufferedIndex; i++) {\n          tvf.writeVInt(offsetStartBuffer[i] - lastOffset);\n          tvf.writeVInt(offsetEndBuffer[i] - offsetStartBuffer[i]);\n          lastOffset = offsetEndBuffer[i];\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void finishTerm() throws IOException {\n    if (bufferedIndex > 0) {\n      // dump buffer\n      assert positions && (offsets || payloads);\n      assert bufferedIndex == bufferedFreq;\n      if (payloads) {\n        tvf.writeBytes(payloadData.bytes, payloadData.offset, payloadData.length);\n      }\n      if (offsets) {\n        for (int i = 0; i < bufferedIndex; i++) {\n          tvf.writeVInt(offsetStartBuffer[i] - lastOffset);\n          tvf.writeVInt(offsetEndBuffer[i] - offsetStartBuffer[i]);\n          lastOffset = offsetEndBuffer[i];\n        }\n      }\n    }\n  }\n\n","bugFix":["fc7a7bb1aa79cf53564793bb5ffa270250c679da"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22a2e66dfda83847e80095b8693c660742ab3e9c","date":1408628796,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#finishTerm().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#finishTerm().mjava","sourceNew":"  @Override\n  public void finishTerm() throws IOException {\n    if (bufferedIndex > 0) {\n      // dump buffer\n      assert positions && (offsets || payloads);\n      assert bufferedIndex == bufferedFreq;\n      if (payloads) {\n        tvf.writeBytes(payloadData.bytes(), 0, payloadData.length());\n      }\n      if (offsets) {\n        for (int i = 0; i < bufferedIndex; i++) {\n          tvf.writeVInt(offsetStartBuffer[i] - lastOffset);\n          tvf.writeVInt(offsetEndBuffer[i] - offsetStartBuffer[i]);\n          lastOffset = offsetEndBuffer[i];\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void finishTerm() throws IOException {\n    if (bufferedIndex > 0) {\n      // dump buffer\n      assert positions && (offsets || payloads);\n      assert bufferedIndex == bufferedFreq;\n      if (payloads) {\n        tvf.writeBytes(payloadData.bytes(), 0, payloadData.length());\n      }\n      if (offsets) {\n        for (int i = 0; i < bufferedIndex; i++) {\n          tvf.writeVInt(offsetStartBuffer[i] - lastOffset);\n          tvf.writeVInt(offsetEndBuffer[i] - offsetStartBuffer[i]);\n          lastOffset = offsetEndBuffer[i];\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc7a7bb1aa79cf53564793bb5ffa270250c679da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5646ed4fdfbfdc743d81f7974110fc4f7e32d091":["fc7a7bb1aa79cf53564793bb5ffa270250c679da"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["5646ed4fdfbfdc743d81f7974110fc4f7e32d091"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fc7a7bb1aa79cf53564793bb5ffa270250c679da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22a2e66dfda83847e80095b8693c660742ab3e9c"]},"commit2Childs":{"fc7a7bb1aa79cf53564793bb5ffa270250c679da":["5646ed4fdfbfdc743d81f7974110fc4f7e32d091","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fc7a7bb1aa79cf53564793bb5ffa270250c679da","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"5646ed4fdfbfdc743d81f7974110fc4f7e32d091":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}