{"path":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#defgMultiTermQueryTest(Query).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#defgMultiTermQueryTest(Query).mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#defgMultiTermQueryTest(Query).mjava","sourceNew":"  private void defgMultiTermQueryTest(Query query) throws IOException {\n    FieldQuery fq = new FieldQuery( query, reader, true, true );\n    QueryPhraseMap qpm = fq.getFieldTermMap(F, \"defg\");\n    assertNotNull (qpm);\n    assertNull (fq.getFieldTermMap(F, \"dog\"));\n    List<TermInfo> phraseCandidate = new ArrayList<TermInfo>();\n    phraseCandidate.add( new TermInfo( \"defg\", 0, 12, 0 ) );\n    assertNotNull (fq.searchPhrase(F, phraseCandidate));\n  }\n\n","sourceOld":"  private void defgMultiTermQueryTest(Query query) throws IOException {\n    FieldQuery fq = new FieldQuery( query, reader, true, true );\n    QueryPhraseMap qpm = fq.getFieldTermMap(F, \"defg\");\n    assertNotNull (qpm);\n    assertNull (fq.getFieldTermMap(F, \"dog\"));\n    List<TermInfo> phraseCandidate = new ArrayList<TermInfo>();\n    phraseCandidate.add( new TermInfo( \"defg\", 0, 12, 0 ) );\n    assertNotNull (fq.searchPhrase(F, phraseCandidate));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79acd0ca7a7750de61516c6b6687a37c8765313b","date":1338910729,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#defgMultiTermQueryTest(Query).mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#defgMultiTermQueryTest(Query).mjava","sourceNew":"  private void defgMultiTermQueryTest(Query query) throws IOException {\n    FieldQuery fq = new FieldQuery( query, reader, true, true );\n    QueryPhraseMap qpm = fq.getFieldTermMap(F, \"defg\");\n    assertNotNull (qpm);\n    assertNull (fq.getFieldTermMap(F, \"dog\"));\n    List<TermInfo> phraseCandidate = new ArrayList<TermInfo>();\n    phraseCandidate.add( new TermInfo( \"defg\", 0, 12, 0, 1 ) );\n    assertNotNull (fq.searchPhrase(F, phraseCandidate));\n  }\n\n","sourceOld":"  private void defgMultiTermQueryTest(Query query) throws IOException {\n    FieldQuery fq = new FieldQuery( query, reader, true, true );\n    QueryPhraseMap qpm = fq.getFieldTermMap(F, \"defg\");\n    assertNotNull (qpm);\n    assertNull (fq.getFieldTermMap(F, \"dog\"));\n    List<TermInfo> phraseCandidate = new ArrayList<TermInfo>();\n    phraseCandidate.add( new TermInfo( \"defg\", 0, 12, 0 ) );\n    assertNotNull (fq.searchPhrase(F, phraseCandidate));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#defgMultiTermQueryTest(Query).mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#defgMultiTermQueryTest(Query).mjava","sourceNew":"  private void defgMultiTermQueryTest(Query query) throws IOException {\n    FieldQuery fq = new FieldQuery( query, reader, true, true );\n    QueryPhraseMap qpm = fq.getFieldTermMap(F, \"defg\");\n    assertNotNull (qpm);\n    assertNull (fq.getFieldTermMap(F, \"dog\"));\n    List<TermInfo> phraseCandidate = new ArrayList<>();\n    phraseCandidate.add( new TermInfo( \"defg\", 0, 12, 0, 1 ) );\n    assertNotNull (fq.searchPhrase(F, phraseCandidate));\n  }\n\n","sourceOld":"  private void defgMultiTermQueryTest(Query query) throws IOException {\n    FieldQuery fq = new FieldQuery( query, reader, true, true );\n    QueryPhraseMap qpm = fq.getFieldTermMap(F, \"defg\");\n    assertNotNull (qpm);\n    assertNull (fq.getFieldTermMap(F, \"dog\"));\n    List<TermInfo> phraseCandidate = new ArrayList<TermInfo>();\n    phraseCandidate.add( new TermInfo( \"defg\", 0, 12, 0, 1 ) );\n    assertNotNull (fq.searchPhrase(F, phraseCandidate));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["79acd0ca7a7750de61516c6b6687a37c8765313b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"79acd0ca7a7750de61516c6b6687a37c8765313b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["79acd0ca7a7750de61516c6b6687a37c8765313b"],"79acd0ca7a7750de61516c6b6687a37c8765313b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}