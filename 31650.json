{"path":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymTokenFilter#createToken(String,AttributeSource.State).mjava","commits":[{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymTokenFilter#createToken(String,AttributeSource.State).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymTokenFilter#createToken(String,Token,Token).mjava","sourceNew":"  /**\n   * Creates and returns a token for the given synonym of the current input\n   * token; Override for custom (stateless or stateful) behavior, if desired.\n   * \n   * @param synonym \n   *            a synonym for the current token's term\n   * @param current\n   *            the current token from the underlying child stream\n   * @param reusableToken\n   *            the token to reuse\n   * @return a new token, or null to indicate that the given synonym should be\n   *         ignored\n   */\n  protected boolean createToken(String synonym, AttributeSource.State current) {\n    restoreState(current);\n    termAtt.setTermBuffer(synonym);\n    typeAtt.setType(SYNONYM_TOKEN_TYPE);\n    posIncrAtt.setPositionIncrement(0);\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Creates and returns a token for the given synonym of the current input\n   * token; Override for custom (stateless or stateful) behavior, if desired.\n   * \n   * @param synonym \n   *            a synonym for the current token's term\n   * @param current\n   *            the current token from the underlying child stream\n   * @param reusableToken\n   *            the token to reuse\n   * @return a new token, or null to indicate that the given synonym should be\n   *         ignored\n   */\n  protected Token createToken(String synonym, Token current, final Token reusableToken) {\n    reusableToken.reinit(current, synonym);\n    reusableToken.setTermBuffer(synonym);\n    reusableToken.setType(SYNONYM_TOKEN_TYPE);\n    reusableToken.setPositionIncrement(0);\n    return reusableToken;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24677ebe836c841fc7c198375595e77fcbc11468","date":1251328462,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymTokenFilter#createToken(String,AttributeSource.State).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymTokenFilter#createToken(String,AttributeSource.State).mjava","sourceNew":"  /**\n   * Creates and returns a token for the given synonym of the current input\n   * token; Override for custom (stateless or stateful) behavior, if desired.\n   * \n   * @param synonym \n   *            a synonym for the current token's term\n   * @param current\n   *            the current token from the underlying child stream\n   * @return a new token, or null to indicate that the given synonym should be\n   *         ignored\n   */\n  protected boolean createToken(String synonym, AttributeSource.State current) {\n    restoreState(current);\n    termAtt.setTermBuffer(synonym);\n    typeAtt.setType(SYNONYM_TOKEN_TYPE);\n    posIncrAtt.setPositionIncrement(0);\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Creates and returns a token for the given synonym of the current input\n   * token; Override for custom (stateless or stateful) behavior, if desired.\n   * \n   * @param synonym \n   *            a synonym for the current token's term\n   * @param current\n   *            the current token from the underlying child stream\n   * @param reusableToken\n   *            the token to reuse\n   * @return a new token, or null to indicate that the given synonym should be\n   *         ignored\n   */\n  protected boolean createToken(String synonym, AttributeSource.State current) {\n    restoreState(current);\n    termAtt.setTermBuffer(synonym);\n    typeAtt.setType(SYNONYM_TOKEN_TYPE);\n    posIncrAtt.setPositionIncrement(0);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d68e5c46e6a5ebdf4dafec4a123344092b915cc0","date":1256752193,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymTokenFilter#createToken(String,AttributeSource.State).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymTokenFilter#createToken(String,AttributeSource.State).mjava","sourceNew":"  /**\n   * Creates and returns a token for the given synonym of the current input\n   * token; Override for custom (stateless or stateful) behavior, if desired.\n   * \n   * @param synonym \n   *            a synonym for the current token's term\n   * @param current\n   *            the current token from the underlying child stream\n   * @return a new token, or null to indicate that the given synonym should be\n   *         ignored\n   */\n  protected boolean createToken(String synonym, AttributeSource.State current) {\n    restoreState(current);\n    termAtt.setTermBuffer(synonym);\n    typeAtt.setType(SYNONYM_TOKEN_TYPE);\n    posIncrAtt.setPositionIncrement(0);\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Creates and returns a token for the given synonym of the current input\n   * token; Override for custom (stateless or stateful) behavior, if desired.\n   * \n   * @param synonym \n   *            a synonym for the current token's term\n   * @param current\n   *            the current token from the underlying child stream\n   * @return a new token, or null to indicate that the given synonym should be\n   *         ignored\n   */\n  protected boolean createToken(String synonym, AttributeSource.State current) {\n    restoreState(current);\n    termAtt.setTermBuffer(synonym);\n    typeAtt.setType(SYNONYM_TOKEN_TYPE);\n    posIncrAtt.setPositionIncrement(0);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24677ebe836c841fc7c198375595e77fcbc11468":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d68e5c46e6a5ebdf4dafec4a123344092b915cc0"],"d68e5c46e6a5ebdf4dafec4a123344092b915cc0":["24677ebe836c841fc7c198375595e77fcbc11468"]},"commit2Childs":{"24677ebe836c841fc7c198375595e77fcbc11468":["d68e5c46e6a5ebdf4dafec4a123344092b915cc0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["24677ebe836c841fc7c198375595e77fcbc11468"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d68e5c46e6a5ebdf4dafec4a123344092b915cc0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}