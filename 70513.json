{"path":"lucene/backwards/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","sourceNew":"  public void testPayloadSpanUtil() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n    IndexWriter writer = new IndexWriter(directory, analyzer, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setSimilarity(similarity);\n    Document doc = new Document();\n    doc.add(new Field(PayloadHelper.FIELD,\"xx rr yy mm  pp\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n  \n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    IndexReader reader = searcher.getIndexReader();\n    PayloadSpanUtil psu = new PayloadSpanUtil(reader);\n    \n    Collection payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(DEBUG)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    Iterator it = payloads.iterator();\n    while(it.hasNext()) {\n      byte[] bytes = (byte[]) it.next();\n      if(DEBUG)\n        System.out.println(new String(bytes));\n    }\n    \n  }\n\n","sourceOld":"  public void testPayloadSpanUtil() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n    IndexWriter writer = new IndexWriter(directory, analyzer, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setSimilarity(similarity);\n    Document doc = new Document();\n    doc.add(new Field(PayloadHelper.FIELD,\"xx rr yy mm  pp\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n  \n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    IndexReader reader = searcher.getIndexReader();\n    PayloadSpanUtil psu = new PayloadSpanUtil(reader);\n    \n    Collection payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(DEBUG)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    Iterator it = payloads.iterator();\n    while(it.hasNext()) {\n      byte[] bytes = (byte[]) it.next();\n      if(DEBUG)\n        System.out.println(new String(bytes));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","sourceNew":null,"sourceOld":"  public void testPayloadSpanUtil() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n    IndexWriter writer = new IndexWriter(directory, analyzer, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setSimilarity(similarity);\n    Document doc = new Document();\n    doc.add(new Field(PayloadHelper.FIELD,\"xx rr yy mm  pp\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n  \n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    IndexReader reader = searcher.getIndexReader();\n    PayloadSpanUtil psu = new PayloadSpanUtil(reader);\n    \n    Collection payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(DEBUG)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    Iterator it = payloads.iterator();\n    while(it.hasNext()) {\n      byte[] bytes = (byte[]) it.next();\n      if(DEBUG)\n        System.out.println(new String(bytes));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}