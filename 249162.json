{"path":"src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsRefCounting().mjava","commits":[{"id":"6db660b56f04fdb2853d25cdee8ee0d36559a521","date":1233313968,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsRefCounting().mjava","pathOld":"/dev/null","sourceNew":"  public void testNormsRefCounting() throws IOException { \n    Directory dir1 = new MockRAMDirectory(); \n    TestIndexReaderReopen.createIndex(dir1, false);\n    SegmentReader reader1 = (SegmentReader) IndexReader.open(dir1);\n        \n    SegmentReader reader2C = (SegmentReader)reader1.clone();\n    reader2C.norms(\"field1\"); // load the norms for the field\n    Norm reader2CNorm = (Norm)reader2C.norms.get(\"field1\");\n    assertTrue(\"reader2CNorm.bytesRef()=\" + reader2CNorm.bytesRef(), reader2CNorm.bytesRef().refCount() == 2);\n    \n    \n    \n    SegmentReader reader3C = (SegmentReader)reader2C.clone();\n    Norm reader3CCNorm = (Norm)reader3C.norms.get(\"field1\");\n    assertEquals(3, reader3CCNorm.bytesRef().refCount());\n    \n    // edit a norm and the refcount should be 1\n    SegmentReader reader4C = (SegmentReader)reader3C.clone();\n    assertEquals(4, reader3CCNorm.bytesRef().refCount());\n    reader4C.setNorm(5, \"field1\", 0.33f);\n    \n    // generate a cannot update exception in reader1\n    try {\n      reader3C.setNorm(1, \"field1\", 0.99f);\n      fail(\"did not hit expected exception\");\n    } catch (Exception ex) {\n      // expected\n    }\n    \n    // norm values should be different \n    assertTrue(Similarity.decodeNorm(reader3C.norms(\"field1\")[5]) != Similarity.decodeNorm(reader4C.norms(\"field1\")[5]));\n    Norm reader4CCNorm = (Norm)reader4C.norms.get(\"field1\");\n    assertEquals(3, reader3CCNorm.bytesRef().refCount());\n    assertEquals(1, reader4CCNorm.bytesRef().refCount());\n        \n    SegmentReader reader5C = (SegmentReader)reader4C.clone();\n    Norm reader5CCNorm = (Norm)reader5C.norms.get(\"field1\");\n    reader5C.setNorm(5, \"field1\", 0.7f);\n    assertEquals(1, reader5CCNorm.bytesRef().refCount());    \n\n    reader5C.close();\n    reader4C.close();\n    reader3C.close();\n    reader2C.close();\n    reader1.close();\n    dir1.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsRefCounting().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsRefCounting().mjava","sourceNew":"  public void testNormsRefCounting() throws IOException { \n    Directory dir1 = new MockRAMDirectory(); \n    TestIndexReaderReopen.createIndex(dir1, false);\n    IndexReader reader1 = IndexReader.open(dir1);\n        \n    IndexReader reader2C = (IndexReader) reader1.clone();\n    SegmentReader segmentReader2C = SegmentReader.getOnlySegmentReader(reader2C);\n    segmentReader2C.norms(\"field1\"); // load the norms for the field\n    Norm reader2CNorm = (Norm)segmentReader2C.norms.get(\"field1\");\n    assertTrue(\"reader2CNorm.bytesRef()=\" + reader2CNorm.bytesRef(), reader2CNorm.bytesRef().refCount() == 2);\n    \n    \n    \n    IndexReader reader3C = (IndexReader) reader2C.clone();\n    SegmentReader segmentReader3C = SegmentReader.getOnlySegmentReader(reader3C);\n    Norm reader3CCNorm = (Norm)segmentReader3C.norms.get(\"field1\");\n    assertEquals(3, reader3CCNorm.bytesRef().refCount());\n    \n    // edit a norm and the refcount should be 1\n    IndexReader reader4C = (IndexReader) reader3C.clone();\n    SegmentReader segmentReader4C = SegmentReader.getOnlySegmentReader(reader4C);\n    assertEquals(4, reader3CCNorm.bytesRef().refCount());\n    reader4C.setNorm(5, \"field1\", 0.33f);\n    \n    // generate a cannot update exception in reader1\n    try {\n      reader3C.setNorm(1, \"field1\", 0.99f);\n      fail(\"did not hit expected exception\");\n    } catch (Exception ex) {\n      // expected\n    }\n    \n    // norm values should be different \n    assertTrue(Similarity.decodeNorm(segmentReader3C.norms(\"field1\")[5]) != Similarity.decodeNorm(segmentReader4C.norms(\"field1\")[5]));\n    Norm reader4CCNorm = (Norm)segmentReader4C.norms.get(\"field1\");\n    assertEquals(3, reader3CCNorm.bytesRef().refCount());\n    assertEquals(1, reader4CCNorm.bytesRef().refCount());\n        \n    IndexReader reader5C = (IndexReader) reader4C.clone();\n    SegmentReader segmentReader5C = SegmentReader.getOnlySegmentReader(reader5C);\n    Norm reader5CCNorm = (Norm)segmentReader5C.norms.get(\"field1\");\n    reader5C.setNorm(5, \"field1\", 0.7f);\n    assertEquals(1, reader5CCNorm.bytesRef().refCount());    \n\n    reader5C.close();\n    reader4C.close();\n    reader3C.close();\n    reader2C.close();\n    reader1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testNormsRefCounting() throws IOException { \n    Directory dir1 = new MockRAMDirectory(); \n    TestIndexReaderReopen.createIndex(dir1, false);\n    SegmentReader reader1 = (SegmentReader) IndexReader.open(dir1);\n        \n    SegmentReader reader2C = (SegmentReader)reader1.clone();\n    reader2C.norms(\"field1\"); // load the norms for the field\n    Norm reader2CNorm = (Norm)reader2C.norms.get(\"field1\");\n    assertTrue(\"reader2CNorm.bytesRef()=\" + reader2CNorm.bytesRef(), reader2CNorm.bytesRef().refCount() == 2);\n    \n    \n    \n    SegmentReader reader3C = (SegmentReader)reader2C.clone();\n    Norm reader3CCNorm = (Norm)reader3C.norms.get(\"field1\");\n    assertEquals(3, reader3CCNorm.bytesRef().refCount());\n    \n    // edit a norm and the refcount should be 1\n    SegmentReader reader4C = (SegmentReader)reader3C.clone();\n    assertEquals(4, reader3CCNorm.bytesRef().refCount());\n    reader4C.setNorm(5, \"field1\", 0.33f);\n    \n    // generate a cannot update exception in reader1\n    try {\n      reader3C.setNorm(1, \"field1\", 0.99f);\n      fail(\"did not hit expected exception\");\n    } catch (Exception ex) {\n      // expected\n    }\n    \n    // norm values should be different \n    assertTrue(Similarity.decodeNorm(reader3C.norms(\"field1\")[5]) != Similarity.decodeNorm(reader4C.norms(\"field1\")[5]));\n    Norm reader4CCNorm = (Norm)reader4C.norms.get(\"field1\");\n    assertEquals(3, reader3CCNorm.bytesRef().refCount());\n    assertEquals(1, reader4CCNorm.bytesRef().refCount());\n        \n    SegmentReader reader5C = (SegmentReader)reader4C.clone();\n    Norm reader5CCNorm = (Norm)reader5C.norms.get(\"field1\");\n    reader5C.setNorm(5, \"field1\", 0.7f);\n    assertEquals(1, reader5CCNorm.bytesRef().refCount());    \n\n    reader5C.close();\n    reader4C.close();\n    reader3C.close();\n    reader2C.close();\n    reader1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsRefCounting().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsRefCounting().mjava","sourceNew":"  public void testNormsRefCounting() throws IOException { \n    Directory dir1 = new MockRAMDirectory(); \n    TestIndexReaderReopen.createIndex(dir1, false);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n        \n    IndexReader reader2C = (IndexReader) reader1.clone();\n    SegmentReader segmentReader2C = SegmentReader.getOnlySegmentReader(reader2C);\n    segmentReader2C.norms(\"field1\"); // load the norms for the field\n    Norm reader2CNorm = (Norm)segmentReader2C.norms.get(\"field1\");\n    assertTrue(\"reader2CNorm.bytesRef()=\" + reader2CNorm.bytesRef(), reader2CNorm.bytesRef().refCount() == 2);\n    \n    \n    \n    IndexReader reader3C = (IndexReader) reader2C.clone();\n    SegmentReader segmentReader3C = SegmentReader.getOnlySegmentReader(reader3C);\n    Norm reader3CCNorm = (Norm)segmentReader3C.norms.get(\"field1\");\n    assertEquals(3, reader3CCNorm.bytesRef().refCount());\n    \n    // edit a norm and the refcount should be 1\n    IndexReader reader4C = (IndexReader) reader3C.clone();\n    SegmentReader segmentReader4C = SegmentReader.getOnlySegmentReader(reader4C);\n    assertEquals(4, reader3CCNorm.bytesRef().refCount());\n    reader4C.setNorm(5, \"field1\", 0.33f);\n    \n    // generate a cannot update exception in reader1\n    try {\n      reader3C.setNorm(1, \"field1\", 0.99f);\n      fail(\"did not hit expected exception\");\n    } catch (Exception ex) {\n      // expected\n    }\n    \n    // norm values should be different \n    assertTrue(Similarity.decodeNorm(segmentReader3C.norms(\"field1\")[5]) != Similarity.decodeNorm(segmentReader4C.norms(\"field1\")[5]));\n    Norm reader4CCNorm = (Norm)segmentReader4C.norms.get(\"field1\");\n    assertEquals(3, reader3CCNorm.bytesRef().refCount());\n    assertEquals(1, reader4CCNorm.bytesRef().refCount());\n        \n    IndexReader reader5C = (IndexReader) reader4C.clone();\n    SegmentReader segmentReader5C = SegmentReader.getOnlySegmentReader(reader5C);\n    Norm reader5CCNorm = (Norm)segmentReader5C.norms.get(\"field1\");\n    reader5C.setNorm(5, \"field1\", 0.7f);\n    assertEquals(1, reader5CCNorm.bytesRef().refCount());    \n\n    reader5C.close();\n    reader4C.close();\n    reader3C.close();\n    reader2C.close();\n    reader1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testNormsRefCounting() throws IOException { \n    Directory dir1 = new MockRAMDirectory(); \n    TestIndexReaderReopen.createIndex(dir1, false);\n    IndexReader reader1 = IndexReader.open(dir1);\n        \n    IndexReader reader2C = (IndexReader) reader1.clone();\n    SegmentReader segmentReader2C = SegmentReader.getOnlySegmentReader(reader2C);\n    segmentReader2C.norms(\"field1\"); // load the norms for the field\n    Norm reader2CNorm = (Norm)segmentReader2C.norms.get(\"field1\");\n    assertTrue(\"reader2CNorm.bytesRef()=\" + reader2CNorm.bytesRef(), reader2CNorm.bytesRef().refCount() == 2);\n    \n    \n    \n    IndexReader reader3C = (IndexReader) reader2C.clone();\n    SegmentReader segmentReader3C = SegmentReader.getOnlySegmentReader(reader3C);\n    Norm reader3CCNorm = (Norm)segmentReader3C.norms.get(\"field1\");\n    assertEquals(3, reader3CCNorm.bytesRef().refCount());\n    \n    // edit a norm and the refcount should be 1\n    IndexReader reader4C = (IndexReader) reader3C.clone();\n    SegmentReader segmentReader4C = SegmentReader.getOnlySegmentReader(reader4C);\n    assertEquals(4, reader3CCNorm.bytesRef().refCount());\n    reader4C.setNorm(5, \"field1\", 0.33f);\n    \n    // generate a cannot update exception in reader1\n    try {\n      reader3C.setNorm(1, \"field1\", 0.99f);\n      fail(\"did not hit expected exception\");\n    } catch (Exception ex) {\n      // expected\n    }\n    \n    // norm values should be different \n    assertTrue(Similarity.decodeNorm(segmentReader3C.norms(\"field1\")[5]) != Similarity.decodeNorm(segmentReader4C.norms(\"field1\")[5]));\n    Norm reader4CCNorm = (Norm)segmentReader4C.norms.get(\"field1\");\n    assertEquals(3, reader3CCNorm.bytesRef().refCount());\n    assertEquals(1, reader4CCNorm.bytesRef().refCount());\n        \n    IndexReader reader5C = (IndexReader) reader4C.clone();\n    SegmentReader segmentReader5C = SegmentReader.getOnlySegmentReader(reader5C);\n    Norm reader5CCNorm = (Norm)segmentReader5C.norms.get(\"field1\");\n    reader5C.setNorm(5, \"field1\", 0.7f);\n    assertEquals(1, reader5CCNorm.bytesRef().refCount());    \n\n    reader5C.close();\n    reader4C.close();\n    reader3C.close();\n    reader2C.close();\n    reader1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsRefCounting().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsRefCounting().mjava","sourceNew":"  public void testNormsRefCounting() throws IOException { \n    Directory dir1 = new MockRAMDirectory(); \n    TestIndexReaderReopen.createIndex(dir1, false);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n        \n    IndexReader reader2C = (IndexReader) reader1.clone();\n    SegmentReader segmentReader2C = SegmentReader.getOnlySegmentReader(reader2C);\n    segmentReader2C.norms(\"field1\"); // load the norms for the field\n    Norm reader2CNorm = (Norm)segmentReader2C.norms.get(\"field1\");\n    assertTrue(\"reader2CNorm.bytesRef()=\" + reader2CNorm.bytesRef(), reader2CNorm.bytesRef().refCount() == 2);\n    \n    \n    \n    IndexReader reader3C = (IndexReader) reader2C.clone();\n    SegmentReader segmentReader3C = SegmentReader.getOnlySegmentReader(reader3C);\n    Norm reader3CCNorm = (Norm)segmentReader3C.norms.get(\"field1\");\n    assertEquals(3, reader3CCNorm.bytesRef().refCount());\n    \n    // edit a norm and the refcount should be 1\n    IndexReader reader4C = (IndexReader) reader3C.clone();\n    SegmentReader segmentReader4C = SegmentReader.getOnlySegmentReader(reader4C);\n    assertEquals(4, reader3CCNorm.bytesRef().refCount());\n    reader4C.setNorm(5, \"field1\", 0.33f);\n    \n    // generate a cannot update exception in reader1\n    try {\n      reader3C.setNorm(1, \"field1\", 0.99f);\n      fail(\"did not hit expected exception\");\n    } catch (Exception ex) {\n      // expected\n    }\n    \n    // norm values should be different \n    assertTrue(Similarity.decodeNorm(segmentReader3C.norms(\"field1\")[5]) != Similarity.decodeNorm(segmentReader4C.norms(\"field1\")[5]));\n    Norm reader4CCNorm = (Norm)segmentReader4C.norms.get(\"field1\");\n    assertEquals(3, reader3CCNorm.bytesRef().refCount());\n    assertEquals(1, reader4CCNorm.bytesRef().refCount());\n        \n    IndexReader reader5C = (IndexReader) reader4C.clone();\n    SegmentReader segmentReader5C = SegmentReader.getOnlySegmentReader(reader5C);\n    Norm reader5CCNorm = (Norm)segmentReader5C.norms.get(\"field1\");\n    reader5C.setNorm(5, \"field1\", 0.7f);\n    assertEquals(1, reader5CCNorm.bytesRef().refCount());    \n\n    reader5C.close();\n    reader4C.close();\n    reader3C.close();\n    reader2C.close();\n    reader1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testNormsRefCounting() throws IOException { \n    Directory dir1 = new MockRAMDirectory(); \n    TestIndexReaderReopen.createIndex(dir1, false);\n    IndexReader reader1 = IndexReader.open(dir1);\n        \n    IndexReader reader2C = (IndexReader) reader1.clone();\n    SegmentReader segmentReader2C = SegmentReader.getOnlySegmentReader(reader2C);\n    segmentReader2C.norms(\"field1\"); // load the norms for the field\n    Norm reader2CNorm = (Norm)segmentReader2C.norms.get(\"field1\");\n    assertTrue(\"reader2CNorm.bytesRef()=\" + reader2CNorm.bytesRef(), reader2CNorm.bytesRef().refCount() == 2);\n    \n    \n    \n    IndexReader reader3C = (IndexReader) reader2C.clone();\n    SegmentReader segmentReader3C = SegmentReader.getOnlySegmentReader(reader3C);\n    Norm reader3CCNorm = (Norm)segmentReader3C.norms.get(\"field1\");\n    assertEquals(3, reader3CCNorm.bytesRef().refCount());\n    \n    // edit a norm and the refcount should be 1\n    IndexReader reader4C = (IndexReader) reader3C.clone();\n    SegmentReader segmentReader4C = SegmentReader.getOnlySegmentReader(reader4C);\n    assertEquals(4, reader3CCNorm.bytesRef().refCount());\n    reader4C.setNorm(5, \"field1\", 0.33f);\n    \n    // generate a cannot update exception in reader1\n    try {\n      reader3C.setNorm(1, \"field1\", 0.99f);\n      fail(\"did not hit expected exception\");\n    } catch (Exception ex) {\n      // expected\n    }\n    \n    // norm values should be different \n    assertTrue(Similarity.decodeNorm(segmentReader3C.norms(\"field1\")[5]) != Similarity.decodeNorm(segmentReader4C.norms(\"field1\")[5]));\n    Norm reader4CCNorm = (Norm)segmentReader4C.norms.get(\"field1\");\n    assertEquals(3, reader3CCNorm.bytesRef().refCount());\n    assertEquals(1, reader4CCNorm.bytesRef().refCount());\n        \n    IndexReader reader5C = (IndexReader) reader4C.clone();\n    SegmentReader segmentReader5C = SegmentReader.getOnlySegmentReader(reader5C);\n    Norm reader5CCNorm = (Norm)segmentReader5C.norms.get(\"field1\");\n    reader5C.setNorm(5, \"field1\", 0.7f);\n    assertEquals(1, reader5CCNorm.bytesRef().refCount());    \n\n    reader5C.close();\n    reader4C.close();\n    reader3C.close();\n    reader2C.close();\n    reader1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsRefCounting().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsRefCounting().mjava","sourceNew":"  public void testNormsRefCounting() throws IOException { \n    Directory dir1 = new MockRAMDirectory(); \n    TestIndexReaderReopen.createIndex(dir1, false);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n        \n    IndexReader reader2C = (IndexReader) reader1.clone();\n    SegmentReader segmentReader2C = SegmentReader.getOnlySegmentReader(reader2C);\n    segmentReader2C.norms(\"field1\"); // load the norms for the field\n    Norm reader2CNorm = segmentReader2C.norms.get(\"field1\");\n    assertTrue(\"reader2CNorm.bytesRef()=\" + reader2CNorm.bytesRef(), reader2CNorm.bytesRef().refCount() == 2);\n    \n    \n    \n    IndexReader reader3C = (IndexReader) reader2C.clone();\n    SegmentReader segmentReader3C = SegmentReader.getOnlySegmentReader(reader3C);\n    Norm reader3CCNorm = segmentReader3C.norms.get(\"field1\");\n    assertEquals(3, reader3CCNorm.bytesRef().refCount());\n    \n    // edit a norm and the refcount should be 1\n    IndexReader reader4C = (IndexReader) reader3C.clone();\n    SegmentReader segmentReader4C = SegmentReader.getOnlySegmentReader(reader4C);\n    assertEquals(4, reader3CCNorm.bytesRef().refCount());\n    reader4C.setNorm(5, \"field1\", 0.33f);\n    \n    // generate a cannot update exception in reader1\n    try {\n      reader3C.setNorm(1, \"field1\", 0.99f);\n      fail(\"did not hit expected exception\");\n    } catch (Exception ex) {\n      // expected\n    }\n    \n    // norm values should be different \n    assertTrue(Similarity.decodeNorm(segmentReader3C.norms(\"field1\")[5]) != Similarity.decodeNorm(segmentReader4C.norms(\"field1\")[5]));\n    Norm reader4CCNorm = segmentReader4C.norms.get(\"field1\");\n    assertEquals(3, reader3CCNorm.bytesRef().refCount());\n    assertEquals(1, reader4CCNorm.bytesRef().refCount());\n        \n    IndexReader reader5C = (IndexReader) reader4C.clone();\n    SegmentReader segmentReader5C = SegmentReader.getOnlySegmentReader(reader5C);\n    Norm reader5CCNorm = segmentReader5C.norms.get(\"field1\");\n    reader5C.setNorm(5, \"field1\", 0.7f);\n    assertEquals(1, reader5CCNorm.bytesRef().refCount());    \n\n    reader5C.close();\n    reader4C.close();\n    reader3C.close();\n    reader2C.close();\n    reader1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testNormsRefCounting() throws IOException { \n    Directory dir1 = new MockRAMDirectory(); \n    TestIndexReaderReopen.createIndex(dir1, false);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n        \n    IndexReader reader2C = (IndexReader) reader1.clone();\n    SegmentReader segmentReader2C = SegmentReader.getOnlySegmentReader(reader2C);\n    segmentReader2C.norms(\"field1\"); // load the norms for the field\n    Norm reader2CNorm = (Norm)segmentReader2C.norms.get(\"field1\");\n    assertTrue(\"reader2CNorm.bytesRef()=\" + reader2CNorm.bytesRef(), reader2CNorm.bytesRef().refCount() == 2);\n    \n    \n    \n    IndexReader reader3C = (IndexReader) reader2C.clone();\n    SegmentReader segmentReader3C = SegmentReader.getOnlySegmentReader(reader3C);\n    Norm reader3CCNorm = (Norm)segmentReader3C.norms.get(\"field1\");\n    assertEquals(3, reader3CCNorm.bytesRef().refCount());\n    \n    // edit a norm and the refcount should be 1\n    IndexReader reader4C = (IndexReader) reader3C.clone();\n    SegmentReader segmentReader4C = SegmentReader.getOnlySegmentReader(reader4C);\n    assertEquals(4, reader3CCNorm.bytesRef().refCount());\n    reader4C.setNorm(5, \"field1\", 0.33f);\n    \n    // generate a cannot update exception in reader1\n    try {\n      reader3C.setNorm(1, \"field1\", 0.99f);\n      fail(\"did not hit expected exception\");\n    } catch (Exception ex) {\n      // expected\n    }\n    \n    // norm values should be different \n    assertTrue(Similarity.decodeNorm(segmentReader3C.norms(\"field1\")[5]) != Similarity.decodeNorm(segmentReader4C.norms(\"field1\")[5]));\n    Norm reader4CCNorm = (Norm)segmentReader4C.norms.get(\"field1\");\n    assertEquals(3, reader3CCNorm.bytesRef().refCount());\n    assertEquals(1, reader4CCNorm.bytesRef().refCount());\n        \n    IndexReader reader5C = (IndexReader) reader4C.clone();\n    SegmentReader segmentReader5C = SegmentReader.getOnlySegmentReader(reader5C);\n    Norm reader5CCNorm = (Norm)segmentReader5C.norms.get(\"field1\");\n    reader5C.setNorm(5, \"field1\", 0.7f);\n    assertEquals(1, reader5CCNorm.bytesRef().refCount());    \n\n    reader5C.close();\n    reader4C.close();\n    reader3C.close();\n    reader2C.close();\n    reader1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0eb5b0b5b98c777dad412afbfb347d2c0889327","date":1259094367,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsRefCounting().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsRefCounting().mjava","sourceNew":"  public void testNormsRefCounting() throws IOException { \n    Directory dir1 = new MockRAMDirectory(); \n    TestIndexReaderReopen.createIndex(dir1, false);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n        \n    IndexReader reader2C = (IndexReader) reader1.clone();\n    SegmentReader segmentReader2C = SegmentReader.getOnlySegmentReader(reader2C);\n    segmentReader2C.norms(\"field1\"); // load the norms for the field\n    Norm reader2CNorm = segmentReader2C.norms.get(\"field1\");\n    assertTrue(\"reader2CNorm.bytesRef()=\" + reader2CNorm.bytesRef(), reader2CNorm.bytesRef().refCount() == 2);\n    \n    \n    \n    IndexReader reader3C = (IndexReader) reader2C.clone();\n    SegmentReader segmentReader3C = SegmentReader.getOnlySegmentReader(reader3C);\n    Norm reader3CCNorm = segmentReader3C.norms.get(\"field1\");\n    assertEquals(3, reader3CCNorm.bytesRef().refCount());\n    \n    // edit a norm and the refcount should be 1\n    IndexReader reader4C = (IndexReader) reader3C.clone();\n    SegmentReader segmentReader4C = SegmentReader.getOnlySegmentReader(reader4C);\n    assertEquals(4, reader3CCNorm.bytesRef().refCount());\n    reader4C.setNorm(5, \"field1\", 0.33f);\n    \n    // generate a cannot update exception in reader1\n    try {\n      reader3C.setNorm(1, \"field1\", 0.99f);\n      fail(\"did not hit expected exception\");\n    } catch (Exception ex) {\n      // expected\n    }\n    \n    // norm values should be different \n    assertTrue(Similarity.getDefault().decodeNormValue(segmentReader3C.norms(\"field1\")[5]) \n    \t\t!= Similarity.getDefault().decodeNormValue(segmentReader4C.norms(\"field1\")[5]));\n    Norm reader4CCNorm = segmentReader4C.norms.get(\"field1\");\n    assertEquals(3, reader3CCNorm.bytesRef().refCount());\n    assertEquals(1, reader4CCNorm.bytesRef().refCount());\n        \n    IndexReader reader5C = (IndexReader) reader4C.clone();\n    SegmentReader segmentReader5C = SegmentReader.getOnlySegmentReader(reader5C);\n    Norm reader5CCNorm = segmentReader5C.norms.get(\"field1\");\n    reader5C.setNorm(5, \"field1\", 0.7f);\n    assertEquals(1, reader5CCNorm.bytesRef().refCount());    \n\n    reader5C.close();\n    reader4C.close();\n    reader3C.close();\n    reader2C.close();\n    reader1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testNormsRefCounting() throws IOException { \n    Directory dir1 = new MockRAMDirectory(); \n    TestIndexReaderReopen.createIndex(dir1, false);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n        \n    IndexReader reader2C = (IndexReader) reader1.clone();\n    SegmentReader segmentReader2C = SegmentReader.getOnlySegmentReader(reader2C);\n    segmentReader2C.norms(\"field1\"); // load the norms for the field\n    Norm reader2CNorm = segmentReader2C.norms.get(\"field1\");\n    assertTrue(\"reader2CNorm.bytesRef()=\" + reader2CNorm.bytesRef(), reader2CNorm.bytesRef().refCount() == 2);\n    \n    \n    \n    IndexReader reader3C = (IndexReader) reader2C.clone();\n    SegmentReader segmentReader3C = SegmentReader.getOnlySegmentReader(reader3C);\n    Norm reader3CCNorm = segmentReader3C.norms.get(\"field1\");\n    assertEquals(3, reader3CCNorm.bytesRef().refCount());\n    \n    // edit a norm and the refcount should be 1\n    IndexReader reader4C = (IndexReader) reader3C.clone();\n    SegmentReader segmentReader4C = SegmentReader.getOnlySegmentReader(reader4C);\n    assertEquals(4, reader3CCNorm.bytesRef().refCount());\n    reader4C.setNorm(5, \"field1\", 0.33f);\n    \n    // generate a cannot update exception in reader1\n    try {\n      reader3C.setNorm(1, \"field1\", 0.99f);\n      fail(\"did not hit expected exception\");\n    } catch (Exception ex) {\n      // expected\n    }\n    \n    // norm values should be different \n    assertTrue(Similarity.decodeNorm(segmentReader3C.norms(\"field1\")[5]) != Similarity.decodeNorm(segmentReader4C.norms(\"field1\")[5]));\n    Norm reader4CCNorm = segmentReader4C.norms.get(\"field1\");\n    assertEquals(3, reader3CCNorm.bytesRef().refCount());\n    assertEquals(1, reader4CCNorm.bytesRef().refCount());\n        \n    IndexReader reader5C = (IndexReader) reader4C.clone();\n    SegmentReader segmentReader5C = SegmentReader.getOnlySegmentReader(reader5C);\n    Norm reader5CCNorm = segmentReader5C.norms.get(\"field1\");\n    reader5C.setNorm(5, \"field1\", 0.7f);\n    assertEquals(1, reader5CCNorm.bytesRef().refCount());    \n\n    reader5C.close();\n    reader4C.close();\n    reader3C.close();\n    reader2C.close();\n    reader1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8514024f885b40613b5ec91876ce5e9d2167d89","date":1260313529,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsRefCounting().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsRefCounting().mjava","sourceNew":"  public void testNormsRefCounting() throws IOException { \n    Directory dir1 = new MockRAMDirectory(); \n    TestIndexReaderReopen.createIndex(dir1, false);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n        \n    IndexReader reader2C = (IndexReader) reader1.clone();\n    SegmentReader segmentReader2C = SegmentReader.getOnlySegmentReader(reader2C);\n    segmentReader2C.norms(\"field1\"); // load the norms for the field\n    Norm reader2CNorm = segmentReader2C.norms.get(\"field1\");\n    assertTrue(\"reader2CNorm.bytesRef()=\" + reader2CNorm.bytesRef(), reader2CNorm.bytesRef().get() == 2);\n    \n    \n    \n    IndexReader reader3C = (IndexReader) reader2C.clone();\n    SegmentReader segmentReader3C = SegmentReader.getOnlySegmentReader(reader3C);\n    Norm reader3CCNorm = segmentReader3C.norms.get(\"field1\");\n    assertEquals(3, reader3CCNorm.bytesRef().get());\n    \n    // edit a norm and the refcount should be 1\n    IndexReader reader4C = (IndexReader) reader3C.clone();\n    SegmentReader segmentReader4C = SegmentReader.getOnlySegmentReader(reader4C);\n    assertEquals(4, reader3CCNorm.bytesRef().get());\n    reader4C.setNorm(5, \"field1\", 0.33f);\n    \n    // generate a cannot update exception in reader1\n    try {\n      reader3C.setNorm(1, \"field1\", 0.99f);\n      fail(\"did not hit expected exception\");\n    } catch (Exception ex) {\n      // expected\n    }\n    \n    // norm values should be different \n    assertTrue(Similarity.getDefault().decodeNormValue(segmentReader3C.norms(\"field1\")[5]) \n    \t\t!= Similarity.getDefault().decodeNormValue(segmentReader4C.norms(\"field1\")[5]));\n    Norm reader4CCNorm = segmentReader4C.norms.get(\"field1\");\n    assertEquals(3, reader3CCNorm.bytesRef().get());\n    assertEquals(1, reader4CCNorm.bytesRef().get());\n        \n    IndexReader reader5C = (IndexReader) reader4C.clone();\n    SegmentReader segmentReader5C = SegmentReader.getOnlySegmentReader(reader5C);\n    Norm reader5CCNorm = segmentReader5C.norms.get(\"field1\");\n    reader5C.setNorm(5, \"field1\", 0.7f);\n    assertEquals(1, reader5CCNorm.bytesRef().get());\n\n    reader5C.close();\n    reader4C.close();\n    reader3C.close();\n    reader2C.close();\n    reader1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testNormsRefCounting() throws IOException { \n    Directory dir1 = new MockRAMDirectory(); \n    TestIndexReaderReopen.createIndex(dir1, false);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n        \n    IndexReader reader2C = (IndexReader) reader1.clone();\n    SegmentReader segmentReader2C = SegmentReader.getOnlySegmentReader(reader2C);\n    segmentReader2C.norms(\"field1\"); // load the norms for the field\n    Norm reader2CNorm = segmentReader2C.norms.get(\"field1\");\n    assertTrue(\"reader2CNorm.bytesRef()=\" + reader2CNorm.bytesRef(), reader2CNorm.bytesRef().refCount() == 2);\n    \n    \n    \n    IndexReader reader3C = (IndexReader) reader2C.clone();\n    SegmentReader segmentReader3C = SegmentReader.getOnlySegmentReader(reader3C);\n    Norm reader3CCNorm = segmentReader3C.norms.get(\"field1\");\n    assertEquals(3, reader3CCNorm.bytesRef().refCount());\n    \n    // edit a norm and the refcount should be 1\n    IndexReader reader4C = (IndexReader) reader3C.clone();\n    SegmentReader segmentReader4C = SegmentReader.getOnlySegmentReader(reader4C);\n    assertEquals(4, reader3CCNorm.bytesRef().refCount());\n    reader4C.setNorm(5, \"field1\", 0.33f);\n    \n    // generate a cannot update exception in reader1\n    try {\n      reader3C.setNorm(1, \"field1\", 0.99f);\n      fail(\"did not hit expected exception\");\n    } catch (Exception ex) {\n      // expected\n    }\n    \n    // norm values should be different \n    assertTrue(Similarity.getDefault().decodeNormValue(segmentReader3C.norms(\"field1\")[5]) \n    \t\t!= Similarity.getDefault().decodeNormValue(segmentReader4C.norms(\"field1\")[5]));\n    Norm reader4CCNorm = segmentReader4C.norms.get(\"field1\");\n    assertEquals(3, reader3CCNorm.bytesRef().refCount());\n    assertEquals(1, reader4CCNorm.bytesRef().refCount());\n        \n    IndexReader reader5C = (IndexReader) reader4C.clone();\n    SegmentReader segmentReader5C = SegmentReader.getOnlySegmentReader(reader5C);\n    Norm reader5CCNorm = segmentReader5C.norms.get(\"field1\");\n    reader5C.setNorm(5, \"field1\", 0.7f);\n    assertEquals(1, reader5CCNorm.bytesRef().refCount());    \n\n    reader5C.close();\n    reader4C.close();\n    reader3C.close();\n    reader2C.close();\n    reader1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsRefCounting().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#testNormsRefCounting().mjava","sourceNew":"  public void testNormsRefCounting() throws IOException { \n    Directory dir1 = new MockRAMDirectory(); \n    TestIndexReaderReopen.createIndex(dir1, false);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n        \n    IndexReader reader2C = (IndexReader) reader1.clone();\n    SegmentReader segmentReader2C = SegmentReader.getOnlySegmentReader(reader2C);\n    segmentReader2C.norms(\"field1\"); // load the norms for the field\n    Norm reader2CNorm = segmentReader2C.norms.get(\"field1\");\n    assertTrue(\"reader2CNorm.bytesRef()=\" + reader2CNorm.bytesRef(), reader2CNorm.bytesRef().get() == 2);\n    \n    \n    \n    IndexReader reader3C = (IndexReader) reader2C.clone();\n    SegmentReader segmentReader3C = SegmentReader.getOnlySegmentReader(reader3C);\n    Norm reader3CCNorm = segmentReader3C.norms.get(\"field1\");\n    assertEquals(3, reader3CCNorm.bytesRef().get());\n    \n    // edit a norm and the refcount should be 1\n    IndexReader reader4C = (IndexReader) reader3C.clone();\n    SegmentReader segmentReader4C = SegmentReader.getOnlySegmentReader(reader4C);\n    assertEquals(4, reader3CCNorm.bytesRef().get());\n    reader4C.setNorm(5, \"field1\", 0.33f);\n    \n    // generate a cannot update exception in reader1\n    try {\n      reader3C.setNorm(1, \"field1\", 0.99f);\n      fail(\"did not hit expected exception\");\n    } catch (Exception ex) {\n      // expected\n    }\n    \n    // norm values should be different \n    assertTrue(Similarity.getDefault().decodeNormValue(segmentReader3C.norms(\"field1\")[5]) \n    \t\t!= Similarity.getDefault().decodeNormValue(segmentReader4C.norms(\"field1\")[5]));\n    Norm reader4CCNorm = segmentReader4C.norms.get(\"field1\");\n    assertEquals(3, reader3CCNorm.bytesRef().get());\n    assertEquals(1, reader4CCNorm.bytesRef().get());\n        \n    IndexReader reader5C = (IndexReader) reader4C.clone();\n    SegmentReader segmentReader5C = SegmentReader.getOnlySegmentReader(reader5C);\n    Norm reader5CCNorm = segmentReader5C.norms.get(\"field1\");\n    reader5C.setNorm(5, \"field1\", 0.7f);\n    assertEquals(1, reader5CCNorm.bytesRef().get());\n\n    reader5C.close();\n    reader4C.close();\n    reader3C.close();\n    reader2C.close();\n    reader1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testNormsRefCounting() throws IOException { \n    Directory dir1 = new MockRAMDirectory(); \n    TestIndexReaderReopen.createIndex(dir1, false);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n        \n    IndexReader reader2C = (IndexReader) reader1.clone();\n    SegmentReader segmentReader2C = SegmentReader.getOnlySegmentReader(reader2C);\n    segmentReader2C.norms(\"field1\"); // load the norms for the field\n    Norm reader2CNorm = segmentReader2C.norms.get(\"field1\");\n    assertTrue(\"reader2CNorm.bytesRef()=\" + reader2CNorm.bytesRef(), reader2CNorm.bytesRef().get() == 2);\n    \n    \n    \n    IndexReader reader3C = (IndexReader) reader2C.clone();\n    SegmentReader segmentReader3C = SegmentReader.getOnlySegmentReader(reader3C);\n    Norm reader3CCNorm = segmentReader3C.norms.get(\"field1\");\n    assertEquals(3, reader3CCNorm.bytesRef().get());\n    \n    // edit a norm and the refcount should be 1\n    IndexReader reader4C = (IndexReader) reader3C.clone();\n    SegmentReader segmentReader4C = SegmentReader.getOnlySegmentReader(reader4C);\n    assertEquals(4, reader3CCNorm.bytesRef().get());\n    reader4C.setNorm(5, \"field1\", 0.33f);\n    \n    // generate a cannot update exception in reader1\n    try {\n      reader3C.setNorm(1, \"field1\", 0.99f);\n      fail(\"did not hit expected exception\");\n    } catch (Exception ex) {\n      // expected\n    }\n    \n    // norm values should be different \n    assertTrue(Similarity.getDefault().decodeNormValue(segmentReader3C.norms(\"field1\")[5]) \n    \t\t!= Similarity.getDefault().decodeNormValue(segmentReader4C.norms(\"field1\")[5]));\n    Norm reader4CCNorm = segmentReader4C.norms.get(\"field1\");\n    assertEquals(3, reader3CCNorm.bytesRef().get());\n    assertEquals(1, reader4CCNorm.bytesRef().get());\n        \n    IndexReader reader5C = (IndexReader) reader4C.clone();\n    SegmentReader segmentReader5C = SegmentReader.getOnlySegmentReader(reader5C);\n    Norm reader5CCNorm = segmentReader5C.norms.get(\"field1\");\n    reader5C.setNorm(5, \"field1\", 0.7f);\n    assertEquals(1, reader5CCNorm.bytesRef().get());\n\n    reader5C.close();\n    reader4C.close();\n    reader3C.close();\n    reader2C.close();\n    reader1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"ef82ff03e4016c705811b2658e81471a645c0e49":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"b0eb5b0b5b98c777dad412afbfb347d2c0889327":["ef82ff03e4016c705811b2658e81471a645c0e49"],"d8514024f885b40613b5ec91876ce5e9d2167d89":["b0eb5b0b5b98c777dad412afbfb347d2c0889327"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d8514024f885b40613b5ec91876ce5e9d2167d89"]},"commit2Childs":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"ef82ff03e4016c705811b2658e81471a645c0e49":["b0eb5b0b5b98c777dad412afbfb347d2c0889327"],"0a046c0c310bc77931fc8441bd920053b607dd14":["ef82ff03e4016c705811b2658e81471a645c0e49"],"b0eb5b0b5b98c777dad412afbfb347d2c0889327":["d8514024f885b40613b5ec91876ce5e9d2167d89"],"d8514024f885b40613b5ec91876ce5e9d2167d89":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}