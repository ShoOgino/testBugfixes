{"path":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testRelateTriangle().mjava","commits":[{"id":"4312aa12218419d320e0966c3f3e72deb359afaa","date":1533146016,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testRelateTriangle().mjava","pathOld":"/dev/null","sourceNew":"  // targets the polygon directly\n  public void testRelateTriangle() {\n    for (int i = 0; i < 100; ++i) {\n      Polygon polygon = nextPolygon();\n      Polygon2D impl = Polygon2D.create(polygon);\n\n      for (int j = 0; j < 100; j++) {\n        double[] a = nextPointNear(polygon);\n        double[] b = nextPointNear(polygon);\n        double[] c = nextPointNear(polygon);\n\n        // if the point is within poly, then triangle should not intersect\n        if (impl.contains(a[0], a[1]) || impl.contains(b[0], b[1]) || impl.contains(c[0], c[1])) {\n          assertTrue(impl.relateTriangle(a[1], a[0], b[1], b[0], c[1], c[0]) != Relation.CELL_OUTSIDE_QUERY);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","date":1571074565,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testRelateTriangle().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testRelateTriangle().mjava","sourceNew":"  // targets the polygon directly\n  public void testRelateTriangle() {\n    for (int i = 0; i < 100; ++i) {\n      Polygon polygon = nextPolygon();\n      Component2D impl = Polygon2D.create(polygon);\n\n      for (int j = 0; j < 100; j++) {\n        double[] a = nextPointNear(polygon);\n        double[] b = nextPointNear(polygon);\n        double[] c = nextPointNear(polygon);\n\n        // if the point is within poly, then triangle should not intersect\n        if (impl.contains(a[1], a[0]) || impl.contains(b[1], b[0]) || impl.contains(c[1], c[0])) {\n          assertTrue(impl.relateTriangle(a[1], a[0], b[1], b[0], c[1], c[0]) != Relation.CELL_OUTSIDE_QUERY);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // targets the polygon directly\n  public void testRelateTriangle() {\n    for (int i = 0; i < 100; ++i) {\n      Polygon polygon = nextPolygon();\n      Polygon2D impl = Polygon2D.create(polygon);\n\n      for (int j = 0; j < 100; j++) {\n        double[] a = nextPointNear(polygon);\n        double[] b = nextPointNear(polygon);\n        double[] c = nextPointNear(polygon);\n\n        // if the point is within poly, then triangle should not intersect\n        if (impl.contains(a[0], a[1]) || impl.contains(b[0], b[1]) || impl.contains(c[0], c[1])) {\n          assertTrue(impl.relateTriangle(a[1], a[0], b[1], b[0], c[1], c[0]) != Relation.CELL_OUTSIDE_QUERY);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testRelateTriangle().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testRelateTriangle().mjava","sourceNew":"  // targets the polygon directly\n  public void testRelateTriangle() {\n    for (int i = 0; i < 100; ++i) {\n      Polygon polygon = nextPolygon();\n      Component2D impl = Polygon2D.create(polygon);\n\n      for (int j = 0; j < 100; j++) {\n        double[] a = nextPointNear(polygon);\n        double[] b = nextPointNear(polygon);\n        double[] c = nextPointNear(polygon);\n\n        // if the point is within poly, then triangle should not intersect\n        if (impl.contains(a[1], a[0]) || impl.contains(b[1], b[0]) || impl.contains(c[1], c[0])) {\n          assertTrue(impl.relateTriangle(a[1], a[0], b[1], b[0], c[1], c[0]) != Relation.CELL_OUTSIDE_QUERY);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // targets the polygon directly\n  public void testRelateTriangle() {\n    for (int i = 0; i < 100; ++i) {\n      Polygon polygon = nextPolygon();\n      Polygon2D impl = Polygon2D.create(polygon);\n\n      for (int j = 0; j < 100; j++) {\n        double[] a = nextPointNear(polygon);\n        double[] b = nextPointNear(polygon);\n        double[] c = nextPointNear(polygon);\n\n        // if the point is within poly, then triangle should not intersect\n        if (impl.contains(a[0], a[1]) || impl.contains(b[0], b[1]) || impl.contains(c[0], c[1])) {\n          assertTrue(impl.relateTriangle(a[1], a[0], b[1], b[0], c[1], c[0]) != Relation.CELL_OUTSIDE_QUERY);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c568a1e2a5125c2245150eebb030a81baa158b31","date":1587403489,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testRelateTriangle().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testRelateTriangle().mjava","sourceNew":"  // targets the polygon directly\n  public void testRelateTriangle() {\n    for (int i = 0; i < 100; ++i) {\n      Polygon polygon = nextPolygon();\n      Component2D impl = Polygon2D.create(polygon);\n\n      for (int j = 0; j < 100; j++) {\n        double[] a = nextPointNear(polygon);\n        double[] b = nextPointNear(polygon);\n        double[] c = nextPointNear(polygon);\n\n        // if the point is within poly, then triangle should not intersect\n        if (impl.contains(a[1], a[0]) || impl.contains(b[1], b[0]) || impl.contains(c[1], c[0])) {\n          assertTrue(impl.intersectsTriangle(a[1], a[0], b[1], b[0], c[1], c[0]));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // targets the polygon directly\n  public void testRelateTriangle() {\n    for (int i = 0; i < 100; ++i) {\n      Polygon polygon = nextPolygon();\n      Component2D impl = Polygon2D.create(polygon);\n\n      for (int j = 0; j < 100; j++) {\n        double[] a = nextPointNear(polygon);\n        double[] b = nextPointNear(polygon);\n        double[] c = nextPointNear(polygon);\n\n        // if the point is within poly, then triangle should not intersect\n        if (impl.contains(a[1], a[0]) || impl.contains(b[1], b[0]) || impl.contains(c[1], c[0])) {\n          assertTrue(impl.relateTriangle(a[1], a[0], b[1], b[0], c[1], c[0]) != Relation.CELL_OUTSIDE_QUERY);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["4312aa12218419d320e0966c3f3e72deb359afaa"],"4312aa12218419d320e0966c3f3e72deb359afaa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c568a1e2a5125c2245150eebb030a81baa158b31":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c568a1e2a5125c2245150eebb030a81baa158b31"],"b0b597c65628ca9e73913a07e81691f8229bae35":["4312aa12218419d320e0966c3f3e72deb359afaa","b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"]},"commit2Childs":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["c568a1e2a5125c2245150eebb030a81baa158b31","b0b597c65628ca9e73913a07e81691f8229bae35"],"4312aa12218419d320e0966c3f3e72deb359afaa":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4312aa12218419d320e0966c3f3e72deb359afaa"],"c568a1e2a5125c2245150eebb030a81baa158b31":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}