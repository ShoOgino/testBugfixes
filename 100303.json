{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/minhash/MinHashFilter#MinHashFilter(TokenStream,int,int,int,boolean).mjava","commits":[{"id":"af241f05539d0b41cd28a8051ad03e3d7fb051cf","date":1465897793,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/minhash/MinHashFilter#MinHashFilter(TokenStream,int,int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * create a MinHash filter\n   *\n   * @param input the token stream\n   * @param hashCount the no. of hashes\n   * @param bucketCount the no. of buckets for hashing\n   * @param hashSetSize the no. of min hashes to keep\n   * @param withRotation whether rotate or not hashes while incrementing tokens\n   */\n  MinHashFilter(TokenStream input, int hashCount, int bucketCount, int hashSetSize, boolean withRotation) {\n    super(input);\n    this.hashCount = hashCount;\n    this.bucketCount = bucketCount;\n    this.hashSetSize = hashSetSize;\n    this.withRotation = withRotation;\n    this.bucketSize = (1L << 32) / bucketCount;\n    if((1L << 32) % bucketCount != 0)\n    {\n      bucketSize++;\n    }\n    minHashSets = new ArrayList<>(this.hashCount);\n    for (int i = 0; i < this.hashCount; i++) {\n      ArrayList<FixedSizeTreeSet<LongPair>> buckets = new ArrayList<>(this.bucketCount);\n      minHashSets.add(buckets);\n      for (int j = 0; j < this.bucketCount; j++) {\n        FixedSizeTreeSet<LongPair> minSet = new FixedSizeTreeSet<>(this.hashSetSize);\n        buckets.add(minSet);\n      }\n    }\n    doRest();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["cb35209429eec59814e6dfc0850d33304cb73ab8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","date":1465913303,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/minhash/MinHashFilter#MinHashFilter(TokenStream,int,int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * create a MinHash filter\n   *\n   * @param input the token stream\n   * @param hashCount the no. of hashes\n   * @param bucketCount the no. of buckets for hashing\n   * @param hashSetSize the no. of min hashes to keep\n   * @param withRotation whether rotate or not hashes while incrementing tokens\n   */\n  MinHashFilter(TokenStream input, int hashCount, int bucketCount, int hashSetSize, boolean withRotation) {\n    super(input);\n    this.hashCount = hashCount;\n    this.bucketCount = bucketCount;\n    this.hashSetSize = hashSetSize;\n    this.withRotation = withRotation;\n    this.bucketSize = (1L << 32) / bucketCount;\n    if((1L << 32) % bucketCount != 0)\n    {\n      bucketSize++;\n    }\n    minHashSets = new ArrayList<>(this.hashCount);\n    for (int i = 0; i < this.hashCount; i++) {\n      ArrayList<FixedSizeTreeSet<LongPair>> buckets = new ArrayList<>(this.bucketCount);\n      minHashSets.add(buckets);\n      for (int j = 0; j < this.bucketCount; j++) {\n        FixedSizeTreeSet<LongPair> minSet = new FixedSizeTreeSet<>(this.hashSetSize);\n        buckets.add(minSet);\n      }\n    }\n    doRest();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cb35209429eec59814e6dfc0850d33304cb73ab8","date":1473432757,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/minhash/MinHashFilter#MinHashFilter(TokenStream,int,int,int,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/minhash/MinHashFilter#MinHashFilter(TokenStream,int,int,int,boolean).mjava","sourceNew":"  /**\n   * create a MinHash filter\n   *\n   * @param input the token stream\n   * @param hashCount the no. of hashes\n   * @param bucketCount the no. of buckets for hashing\n   * @param hashSetSize the no. of min hashes to keep\n   * @param withRotation whether rotate or not hashes while incrementing tokens\n   */\n  public MinHashFilter(TokenStream input, int hashCount, int bucketCount, int hashSetSize, boolean withRotation) {\n    super(input);\n    this.hashCount = hashCount;\n    this.bucketCount = bucketCount;\n    this.hashSetSize = hashSetSize;\n    this.withRotation = withRotation;\n    this.bucketSize = (1L << 32) / bucketCount;\n    if((1L << 32) % bucketCount != 0)\n    {\n      bucketSize++;\n    }\n    minHashSets = new ArrayList<>(this.hashCount);\n    for (int i = 0; i < this.hashCount; i++) {\n      ArrayList<FixedSizeTreeSet<LongPair>> buckets = new ArrayList<>(this.bucketCount);\n      minHashSets.add(buckets);\n      for (int j = 0; j < this.bucketCount; j++) {\n        FixedSizeTreeSet<LongPair> minSet = new FixedSizeTreeSet<>(this.hashSetSize);\n        buckets.add(minSet);\n      }\n    }\n    doRest();\n  }\n\n","sourceOld":"  /**\n   * create a MinHash filter\n   *\n   * @param input the token stream\n   * @param hashCount the no. of hashes\n   * @param bucketCount the no. of buckets for hashing\n   * @param hashSetSize the no. of min hashes to keep\n   * @param withRotation whether rotate or not hashes while incrementing tokens\n   */\n  MinHashFilter(TokenStream input, int hashCount, int bucketCount, int hashSetSize, boolean withRotation) {\n    super(input);\n    this.hashCount = hashCount;\n    this.bucketCount = bucketCount;\n    this.hashSetSize = hashSetSize;\n    this.withRotation = withRotation;\n    this.bucketSize = (1L << 32) / bucketCount;\n    if((1L << 32) % bucketCount != 0)\n    {\n      bucketSize++;\n    }\n    minHashSets = new ArrayList<>(this.hashCount);\n    for (int i = 0; i < this.hashCount; i++) {\n      ArrayList<FixedSizeTreeSet<LongPair>> buckets = new ArrayList<>(this.bucketCount);\n      minHashSets.add(buckets);\n      for (int j = 0; j < this.bucketCount; j++) {\n        FixedSizeTreeSet<LongPair> minSet = new FixedSizeTreeSet<>(this.hashSetSize);\n        buckets.add(minSet);\n      }\n    }\n    doRest();\n  }\n\n","bugFix":["af241f05539d0b41cd28a8051ad03e3d7fb051cf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1dd31b443c5e51403ccc43bf04eecef52eec7824","date":1473689909,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/minhash/MinHashFilter#MinHashFilter(TokenStream,int,int,int,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/minhash/MinHashFilter#MinHashFilter(TokenStream,int,int,int,boolean).mjava","sourceNew":"  /**\n   * create a MinHash filter\n   *\n   * @param input the token stream\n   * @param hashCount the no. of hashes\n   * @param bucketCount the no. of buckets for hashing\n   * @param hashSetSize the no. of min hashes to keep\n   * @param withRotation whether rotate or not hashes while incrementing tokens\n   */\n  public MinHashFilter(TokenStream input, int hashCount, int bucketCount, int hashSetSize, boolean withRotation) {\n    super(input);\n    if (hashCount <= 0) {\n      throw new IllegalArgumentException(\"hashCount must be greater than zero\");\n    }\n    if (bucketCount <= 0) {\n      throw new IllegalArgumentException(\"bucketCount must be greater than zero\");\n    }\n    if (hashSetSize <= 0) {\n      throw new IllegalArgumentException(\"hashSetSize must be greater than zero\");\n    }\n    this.hashCount = hashCount;\n    this.bucketCount = bucketCount;\n    this.hashSetSize = hashSetSize;\n    this.withRotation = withRotation;\n    this.bucketSize = (1L << 32) / bucketCount;\n    if((1L << 32) % bucketCount != 0)\n    {\n      bucketSize++;\n    }\n    minHashSets = new ArrayList<>(this.hashCount);\n    for (int i = 0; i < this.hashCount; i++) {\n      ArrayList<FixedSizeTreeSet<LongPair>> buckets = new ArrayList<>(this.bucketCount);\n      minHashSets.add(buckets);\n      for (int j = 0; j < this.bucketCount; j++) {\n        FixedSizeTreeSet<LongPair> minSet = new FixedSizeTreeSet<>(this.hashSetSize);\n        buckets.add(minSet);\n      }\n    }\n    doRest();\n  }\n\n","sourceOld":"  /**\n   * create a MinHash filter\n   *\n   * @param input the token stream\n   * @param hashCount the no. of hashes\n   * @param bucketCount the no. of buckets for hashing\n   * @param hashSetSize the no. of min hashes to keep\n   * @param withRotation whether rotate or not hashes while incrementing tokens\n   */\n  public MinHashFilter(TokenStream input, int hashCount, int bucketCount, int hashSetSize, boolean withRotation) {\n    super(input);\n    this.hashCount = hashCount;\n    this.bucketCount = bucketCount;\n    this.hashSetSize = hashSetSize;\n    this.withRotation = withRotation;\n    this.bucketSize = (1L << 32) / bucketCount;\n    if((1L << 32) % bucketCount != 0)\n    {\n      bucketSize++;\n    }\n    minHashSets = new ArrayList<>(this.hashCount);\n    for (int i = 0; i < this.hashCount; i++) {\n      ArrayList<FixedSizeTreeSet<LongPair>> buckets = new ArrayList<>(this.bucketCount);\n      minHashSets.add(buckets);\n      for (int j = 0; j < this.bucketCount; j++) {\n        FixedSizeTreeSet<LongPair> minSet = new FixedSizeTreeSet<>(this.hashSetSize);\n        buckets.add(minSet);\n      }\n    }\n    doRest();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/minhash/MinHashFilter#MinHashFilter(TokenStream,int,int,int,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/minhash/MinHashFilter#MinHashFilter(TokenStream,int,int,int,boolean).mjava","sourceNew":"  /**\n   * create a MinHash filter\n   *\n   * @param input the token stream\n   * @param hashCount the no. of hashes\n   * @param bucketCount the no. of buckets for hashing\n   * @param hashSetSize the no. of min hashes to keep\n   * @param withRotation whether rotate or not hashes while incrementing tokens\n   */\n  public MinHashFilter(TokenStream input, int hashCount, int bucketCount, int hashSetSize, boolean withRotation) {\n    super(input);\n    if (hashCount <= 0) {\n      throw new IllegalArgumentException(\"hashCount must be greater than zero\");\n    }\n    if (bucketCount <= 0) {\n      throw new IllegalArgumentException(\"bucketCount must be greater than zero\");\n    }\n    if (hashSetSize <= 0) {\n      throw new IllegalArgumentException(\"hashSetSize must be greater than zero\");\n    }\n    this.hashCount = hashCount;\n    this.bucketCount = bucketCount;\n    this.hashSetSize = hashSetSize;\n    this.withRotation = withRotation;\n    this.bucketSize = (1L << 32) / bucketCount;\n    if((1L << 32) % bucketCount != 0)\n    {\n      bucketSize++;\n    }\n    minHashSets = new ArrayList<>(this.hashCount);\n    for (int i = 0; i < this.hashCount; i++) {\n      ArrayList<FixedSizeTreeSet<LongPair>> buckets = new ArrayList<>(this.bucketCount);\n      minHashSets.add(buckets);\n      for (int j = 0; j < this.bucketCount; j++) {\n        FixedSizeTreeSet<LongPair> minSet = new FixedSizeTreeSet<>(this.hashSetSize);\n        buckets.add(minSet);\n      }\n    }\n    doRest();\n  }\n\n","sourceOld":"  /**\n   * create a MinHash filter\n   *\n   * @param input the token stream\n   * @param hashCount the no. of hashes\n   * @param bucketCount the no. of buckets for hashing\n   * @param hashSetSize the no. of min hashes to keep\n   * @param withRotation whether rotate or not hashes while incrementing tokens\n   */\n  MinHashFilter(TokenStream input, int hashCount, int bucketCount, int hashSetSize, boolean withRotation) {\n    super(input);\n    this.hashCount = hashCount;\n    this.bucketCount = bucketCount;\n    this.hashSetSize = hashSetSize;\n    this.withRotation = withRotation;\n    this.bucketSize = (1L << 32) / bucketCount;\n    if((1L << 32) % bucketCount != 0)\n    {\n      bucketSize++;\n    }\n    minHashSets = new ArrayList<>(this.hashCount);\n    for (int i = 0; i < this.hashCount; i++) {\n      ArrayList<FixedSizeTreeSet<LongPair>> buckets = new ArrayList<>(this.bucketCount);\n      minHashSets.add(buckets);\n      for (int j = 0; j < this.bucketCount; j++) {\n        FixedSizeTreeSet<LongPair> minSet = new FixedSizeTreeSet<>(this.hashSetSize);\n        buckets.add(minSet);\n      }\n    }\n    doRest();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/minhash/MinHashFilter#MinHashFilter(TokenStream,int,int,int,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/minhash/MinHashFilter#MinHashFilter(TokenStream,int,int,int,boolean).mjava","sourceNew":"  /**\n   * create a MinHash filter\n   *\n   * @param input the token stream\n   * @param hashCount the no. of hashes\n   * @param bucketCount the no. of buckets for hashing\n   * @param hashSetSize the no. of min hashes to keep\n   * @param withRotation whether rotate or not hashes while incrementing tokens\n   */\n  public MinHashFilter(TokenStream input, int hashCount, int bucketCount, int hashSetSize, boolean withRotation) {\n    super(input);\n    if (hashCount <= 0) {\n      throw new IllegalArgumentException(\"hashCount must be greater than zero\");\n    }\n    if (bucketCount <= 0) {\n      throw new IllegalArgumentException(\"bucketCount must be greater than zero\");\n    }\n    if (hashSetSize <= 0) {\n      throw new IllegalArgumentException(\"hashSetSize must be greater than zero\");\n    }\n    this.hashCount = hashCount;\n    this.bucketCount = bucketCount;\n    this.hashSetSize = hashSetSize;\n    this.withRotation = withRotation;\n    this.bucketSize = (1L << 32) / bucketCount;\n    if((1L << 32) % bucketCount != 0)\n    {\n      bucketSize++;\n    }\n    minHashSets = new ArrayList<>(this.hashCount);\n    for (int i = 0; i < this.hashCount; i++) {\n      ArrayList<FixedSizeTreeSet<LongPair>> buckets = new ArrayList<>(this.bucketCount);\n      minHashSets.add(buckets);\n      for (int j = 0; j < this.bucketCount; j++) {\n        FixedSizeTreeSet<LongPair> minSet = new FixedSizeTreeSet<>(this.hashSetSize);\n        buckets.add(minSet);\n      }\n    }\n    doRest();\n  }\n\n","sourceOld":"  /**\n   * create a MinHash filter\n   *\n   * @param input the token stream\n   * @param hashCount the no. of hashes\n   * @param bucketCount the no. of buckets for hashing\n   * @param hashSetSize the no. of min hashes to keep\n   * @param withRotation whether rotate or not hashes while incrementing tokens\n   */\n  MinHashFilter(TokenStream input, int hashCount, int bucketCount, int hashSetSize, boolean withRotation) {\n    super(input);\n    this.hashCount = hashCount;\n    this.bucketCount = bucketCount;\n    this.hashSetSize = hashSetSize;\n    this.withRotation = withRotation;\n    this.bucketSize = (1L << 32) / bucketCount;\n    if((1L << 32) % bucketCount != 0)\n    {\n      bucketSize++;\n    }\n    minHashSets = new ArrayList<>(this.hashCount);\n    for (int i = 0; i < this.hashCount; i++) {\n      ArrayList<FixedSizeTreeSet<LongPair>> buckets = new ArrayList<>(this.bucketCount);\n      minHashSets.add(buckets);\n      for (int j = 0; j < this.bucketCount; j++) {\n        FixedSizeTreeSet<LongPair> minSet = new FixedSizeTreeSet<>(this.hashSetSize);\n        buckets.add(minSet);\n      }\n    }\n    doRest();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/minhash/MinHashFilter#MinHashFilter(TokenStream,int,int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * create a MinHash filter\n   *\n   * @param input the token stream\n   * @param hashCount the no. of hashes\n   * @param bucketCount the no. of buckets for hashing\n   * @param hashSetSize the no. of min hashes to keep\n   * @param withRotation whether rotate or not hashes while incrementing tokens\n   */\n  public MinHashFilter(TokenStream input, int hashCount, int bucketCount, int hashSetSize, boolean withRotation) {\n    super(input);\n    if (hashCount <= 0) {\n      throw new IllegalArgumentException(\"hashCount must be greater than zero\");\n    }\n    if (bucketCount <= 0) {\n      throw new IllegalArgumentException(\"bucketCount must be greater than zero\");\n    }\n    if (hashSetSize <= 0) {\n      throw new IllegalArgumentException(\"hashSetSize must be greater than zero\");\n    }\n    this.hashCount = hashCount;\n    this.bucketCount = bucketCount;\n    this.hashSetSize = hashSetSize;\n    this.withRotation = withRotation;\n    this.bucketSize = (1L << 32) / bucketCount;\n    if((1L << 32) % bucketCount != 0)\n    {\n      bucketSize++;\n    }\n    minHashSets = new ArrayList<>(this.hashCount);\n    for (int i = 0; i < this.hashCount; i++) {\n      ArrayList<FixedSizeTreeSet<LongPair>> buckets = new ArrayList<>(this.bucketCount);\n      minHashSets.add(buckets);\n      for (int j = 0; j < this.bucketCount; j++) {\n        FixedSizeTreeSet<LongPair> minSet = new FixedSizeTreeSet<>(this.hashSetSize);\n        buckets.add(minSet);\n      }\n    }\n    doRest();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cb35209429eec59814e6dfc0850d33304cb73ab8":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"1dd31b443c5e51403ccc43bf04eecef52eec7824":["cb35209429eec59814e6dfc0850d33304cb73ab8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","89424def13674ea17829b41c5883c54ecc31a132"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","af241f05539d0b41cd28a8051ad03e3d7fb051cf"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"af241f05539d0b41cd28a8051ad03e3d7fb051cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"89424def13674ea17829b41c5883c54ecc31a132":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","1dd31b443c5e51403ccc43bf04eecef52eec7824"]},"commit2Childs":{"cb35209429eec59814e6dfc0850d33304cb73ab8":["1dd31b443c5e51403ccc43bf04eecef52eec7824"],"1dd31b443c5e51403ccc43bf04eecef52eec7824":["89424def13674ea17829b41c5883c54ecc31a132"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","af241f05539d0b41cd28a8051ad03e3d7fb051cf"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["cb35209429eec59814e6dfc0850d33304cb73ab8","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","89424def13674ea17829b41c5883c54ecc31a132"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"af241f05539d0b41cd28a8051ad03e3d7fb051cf":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}