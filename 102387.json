{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilter#tokens(String).mjava","commits":[{"id":"b59603a30f81d2af70cd2033270521dc7c8ec626","date":1273513065,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilter#tokens(String).mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestSynonymFilter#tokens(String).mjava","sourceNew":"  /***\n   * Return a list of tokens according to a test string format:\n   * a b c  =>  returns List<Token> [a,b,c]\n   * a/b   => tokens a and b share the same spot (b.positionIncrement=0)\n   * a,3/b/c => a,b,c all share same position (a.positionIncrement=3, b.positionIncrement=0, c.positionIncrement=0)\n   * a,1,10,11  => \"a\" with positionIncrement=1, startOffset=10, endOffset=11\n   * @deprecated does not support attributes api\n   */\n  private List<Token> tokens(String str) {\n    String[] arr = str.split(\" \");\n    List<Token> result = new ArrayList<Token>();\n    for (int i=0; i<arr.length; i++) {\n      String[] toks = arr[i].split(\"/\");\n      String[] params = toks[0].split(\",\");\n\n      int posInc;\n      int start;\n      int end;\n\n      if (params.length > 1) {\n        posInc = Integer.parseInt(params[1]);\n      } else {\n        posInc = 1;\n      }\n\n      if (params.length > 2) {\n        start = Integer.parseInt(params[2]);\n      } else {\n        start = 0;\n      }\n\n      if (params.length > 3) {\n        end = Integer.parseInt(params[3]);\n      } else {\n        end = start + params[0].length();\n      }\n\n      Token t = new Token(params[0],start,end,\"TEST\");\n      t.setPositionIncrement(posInc);\n      \n      result.add(t);\n      for (int j=1; j<toks.length; j++) {\n        t = new Token(toks[j],0,0,\"TEST\");\n        t.setPositionIncrement(0);\n        result.add(t);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /***\n   * Return a list of tokens according to a test string format:\n   * a b c  =>  returns List<Token> [a,b,c]\n   * a/b   => tokens a and b share the same spot (b.positionIncrement=0)\n   * a,3/b/c => a,b,c all share same position (a.positionIncrement=3, b.positionIncrement=0, c.positionIncrement=0)\n   * a,1,10,11  => \"a\" with positionIncrement=1, startOffset=10, endOffset=11\n   * @deprecated does not support attributes api\n   */\n  private List<Token> tokens(String str) {\n    String[] arr = str.split(\" \");\n    List<Token> result = new ArrayList<Token>();\n    for (int i=0; i<arr.length; i++) {\n      String[] toks = arr[i].split(\"/\");\n      String[] params = toks[0].split(\",\");\n\n      int posInc;\n      int start;\n      int end;\n\n      if (params.length > 1) {\n        posInc = Integer.parseInt(params[1]);\n      } else {\n        posInc = 1;\n      }\n\n      if (params.length > 2) {\n        start = Integer.parseInt(params[2]);\n      } else {\n        start = 0;\n      }\n\n      if (params.length > 3) {\n        end = Integer.parseInt(params[3]);\n      } else {\n        end = start + params[0].length();\n      }\n\n      Token t = new Token(params[0],start,end,\"TEST\");\n      t.setPositionIncrement(posInc);\n      \n      result.add(t);\n      for (int j=1; j<toks.length; j++) {\n        t = new Token(toks[j],0,0,\"TEST\");\n        t.setPositionIncrement(0);\n        result.add(t);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1c25e111e7f6a7353d2b9b46643b7f7507c6584","date":1286049515,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilter#tokens(String).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilter#tokens(String).mjava","sourceNew":"  /***\n   * Return a list of tokens according to a test string format:\n   * a b c  =>  returns List<Token> [a,b,c]\n   * a/b   => tokens a and b share the same spot (b.positionIncrement=0)\n   * a,3/b/c => a,b,c all share same position (a.positionIncrement=3, b.positionIncrement=0, c.positionIncrement=0)\n   * a,1,10,11  => \"a\" with positionIncrement=1, startOffset=10, endOffset=11\n   * @deprecated does not support attributes api\n   */\n  @Deprecated\n  private List<Token> tokens(String str) {\n    String[] arr = str.split(\" \");\n    List<Token> result = new ArrayList<Token>();\n    for (int i=0; i<arr.length; i++) {\n      String[] toks = arr[i].split(\"/\");\n      String[] params = toks[0].split(\",\");\n\n      int posInc;\n      int start;\n      int end;\n\n      if (params.length > 1) {\n        posInc = Integer.parseInt(params[1]);\n      } else {\n        posInc = 1;\n      }\n\n      if (params.length > 2) {\n        start = Integer.parseInt(params[2]);\n      } else {\n        start = 0;\n      }\n\n      if (params.length > 3) {\n        end = Integer.parseInt(params[3]);\n      } else {\n        end = start + params[0].length();\n      }\n\n      Token t = new Token(params[0],start,end,\"TEST\");\n      t.setPositionIncrement(posInc);\n      \n      result.add(t);\n      for (int j=1; j<toks.length; j++) {\n        t = new Token(toks[j],0,0,\"TEST\");\n        t.setPositionIncrement(0);\n        result.add(t);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /***\n   * Return a list of tokens according to a test string format:\n   * a b c  =>  returns List<Token> [a,b,c]\n   * a/b   => tokens a and b share the same spot (b.positionIncrement=0)\n   * a,3/b/c => a,b,c all share same position (a.positionIncrement=3, b.positionIncrement=0, c.positionIncrement=0)\n   * a,1,10,11  => \"a\" with positionIncrement=1, startOffset=10, endOffset=11\n   * @deprecated does not support attributes api\n   */\n  private List<Token> tokens(String str) {\n    String[] arr = str.split(\" \");\n    List<Token> result = new ArrayList<Token>();\n    for (int i=0; i<arr.length; i++) {\n      String[] toks = arr[i].split(\"/\");\n      String[] params = toks[0].split(\",\");\n\n      int posInc;\n      int start;\n      int end;\n\n      if (params.length > 1) {\n        posInc = Integer.parseInt(params[1]);\n      } else {\n        posInc = 1;\n      }\n\n      if (params.length > 2) {\n        start = Integer.parseInt(params[2]);\n      } else {\n        start = 0;\n      }\n\n      if (params.length > 3) {\n        end = Integer.parseInt(params[3]);\n      } else {\n        end = start + params[0].length();\n      }\n\n      Token t = new Token(params[0],start,end,\"TEST\");\n      t.setPositionIncrement(posInc);\n      \n      result.add(t);\n      for (int j=1; j<toks.length; j++) {\n        t = new Token(toks[j],0,0,\"TEST\");\n        t.setPositionIncrement(0);\n        result.add(t);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilter#tokens(String).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilter#tokens(String).mjava","sourceNew":"  /***\n   * Return a list of tokens according to a test string format:\n   * a b c  =>  returns List<Token> [a,b,c]\n   * a/b   => tokens a and b share the same spot (b.positionIncrement=0)\n   * a,3/b/c => a,b,c all share same position (a.positionIncrement=3, b.positionIncrement=0, c.positionIncrement=0)\n   * a,1,10,11  => \"a\" with positionIncrement=1, startOffset=10, endOffset=11\n   * @deprecated (3.0) does not support attributes api\n   */\n  @Deprecated\n  private List<Token> tokens(String str) {\n    String[] arr = str.split(\" \");\n    List<Token> result = new ArrayList<Token>();\n    for (int i=0; i<arr.length; i++) {\n      String[] toks = arr[i].split(\"/\");\n      String[] params = toks[0].split(\",\");\n\n      int posInc;\n      int start;\n      int end;\n\n      if (params.length > 1) {\n        posInc = Integer.parseInt(params[1]);\n      } else {\n        posInc = 1;\n      }\n\n      if (params.length > 2) {\n        start = Integer.parseInt(params[2]);\n      } else {\n        start = 0;\n      }\n\n      if (params.length > 3) {\n        end = Integer.parseInt(params[3]);\n      } else {\n        end = start + params[0].length();\n      }\n\n      Token t = new Token(params[0],start,end,\"TEST\");\n      t.setPositionIncrement(posInc);\n      \n      result.add(t);\n      for (int j=1; j<toks.length; j++) {\n        t = new Token(toks[j],0,0,\"TEST\");\n        t.setPositionIncrement(0);\n        result.add(t);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /***\n   * Return a list of tokens according to a test string format:\n   * a b c  =>  returns List<Token> [a,b,c]\n   * a/b   => tokens a and b share the same spot (b.positionIncrement=0)\n   * a,3/b/c => a,b,c all share same position (a.positionIncrement=3, b.positionIncrement=0, c.positionIncrement=0)\n   * a,1,10,11  => \"a\" with positionIncrement=1, startOffset=10, endOffset=11\n   * @deprecated does not support attributes api\n   */\n  @Deprecated\n  private List<Token> tokens(String str) {\n    String[] arr = str.split(\" \");\n    List<Token> result = new ArrayList<Token>();\n    for (int i=0; i<arr.length; i++) {\n      String[] toks = arr[i].split(\"/\");\n      String[] params = toks[0].split(\",\");\n\n      int posInc;\n      int start;\n      int end;\n\n      if (params.length > 1) {\n        posInc = Integer.parseInt(params[1]);\n      } else {\n        posInc = 1;\n      }\n\n      if (params.length > 2) {\n        start = Integer.parseInt(params[2]);\n      } else {\n        start = 0;\n      }\n\n      if (params.length > 3) {\n        end = Integer.parseInt(params[3]);\n      } else {\n        end = start + params[0].length();\n      }\n\n      Token t = new Token(params[0],start,end,\"TEST\");\n      t.setPositionIncrement(posInc);\n      \n      result.add(t);\n      for (int j=1; j<toks.length; j++) {\n        t = new Token(toks[j],0,0,\"TEST\");\n        t.setPositionIncrement(0);\n        result.add(t);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilter#tokens(String).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilter#tokens(String).mjava","sourceNew":"  /***\n   * Return a list of tokens according to a test string format:\n   * a b c  =>  returns List<Token> [a,b,c]\n   * a/b   => tokens a and b share the same spot (b.positionIncrement=0)\n   * a,3/b/c => a,b,c all share same position (a.positionIncrement=3, b.positionIncrement=0, c.positionIncrement=0)\n   * a,1,10,11  => \"a\" with positionIncrement=1, startOffset=10, endOffset=11\n   * @deprecated (3.0) does not support attributes api\n   */\n  @Deprecated\n  private List<Token> tokens(String str) {\n    String[] arr = str.split(\" \");\n    List<Token> result = new ArrayList<Token>();\n    for (int i=0; i<arr.length; i++) {\n      String[] toks = arr[i].split(\"/\");\n      String[] params = toks[0].split(\",\");\n\n      int posInc;\n      int start;\n      int end;\n\n      if (params.length > 1) {\n        posInc = Integer.parseInt(params[1]);\n      } else {\n        posInc = 1;\n      }\n\n      if (params.length > 2) {\n        start = Integer.parseInt(params[2]);\n      } else {\n        start = 0;\n      }\n\n      if (params.length > 3) {\n        end = Integer.parseInt(params[3]);\n      } else {\n        end = start + params[0].length();\n      }\n\n      Token t = new Token(params[0],start,end,\"TEST\");\n      t.setPositionIncrement(posInc);\n      \n      result.add(t);\n      for (int j=1; j<toks.length; j++) {\n        t = new Token(toks[j],0,0,\"TEST\");\n        t.setPositionIncrement(0);\n        result.add(t);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /***\n   * Return a list of tokens according to a test string format:\n   * a b c  =>  returns List<Token> [a,b,c]\n   * a/b   => tokens a and b share the same spot (b.positionIncrement=0)\n   * a,3/b/c => a,b,c all share same position (a.positionIncrement=3, b.positionIncrement=0, c.positionIncrement=0)\n   * a,1,10,11  => \"a\" with positionIncrement=1, startOffset=10, endOffset=11\n   * @deprecated does not support attributes api\n   */\n  @Deprecated\n  private List<Token> tokens(String str) {\n    String[] arr = str.split(\" \");\n    List<Token> result = new ArrayList<Token>();\n    for (int i=0; i<arr.length; i++) {\n      String[] toks = arr[i].split(\"/\");\n      String[] params = toks[0].split(\",\");\n\n      int posInc;\n      int start;\n      int end;\n\n      if (params.length > 1) {\n        posInc = Integer.parseInt(params[1]);\n      } else {\n        posInc = 1;\n      }\n\n      if (params.length > 2) {\n        start = Integer.parseInt(params[2]);\n      } else {\n        start = 0;\n      }\n\n      if (params.length > 3) {\n        end = Integer.parseInt(params[3]);\n      } else {\n        end = start + params[0].length();\n      }\n\n      Token t = new Token(params[0],start,end,\"TEST\");\n      t.setPositionIncrement(posInc);\n      \n      result.add(t);\n      for (int j=1; j<toks.length; j++) {\n        t = new Token(toks[j],0,0,\"TEST\");\n        t.setPositionIncrement(0);\n        result.add(t);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilter#tokens(String).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilter#tokens(String).mjava","sourceNew":"  /***\n   * Return a list of tokens according to a test string format:\n   * a b c  =>  returns List<Token> [a,b,c]\n   * a/b   => tokens a and b share the same spot (b.positionIncrement=0)\n   * a,3/b/c => a,b,c all share same position (a.positionIncrement=3, b.positionIncrement=0, c.positionIncrement=0)\n   * a,1,10,11  => \"a\" with positionIncrement=1, startOffset=10, endOffset=11\n   * @deprecated (3.0) does not support attributes api\n   */\n  @Deprecated\n  private List<Token> tokens(String str) {\n    String[] arr = str.split(\" \");\n    List<Token> result = new ArrayList<Token>();\n    for (int i=0; i<arr.length; i++) {\n      String[] toks = arr[i].split(\"/\");\n      String[] params = toks[0].split(\",\");\n\n      int posInc;\n      int start;\n      int end;\n\n      if (params.length > 1) {\n        posInc = Integer.parseInt(params[1]);\n      } else {\n        posInc = 1;\n      }\n\n      if (params.length > 2) {\n        start = Integer.parseInt(params[2]);\n      } else {\n        start = 0;\n      }\n\n      if (params.length > 3) {\n        end = Integer.parseInt(params[3]);\n      } else {\n        end = start + params[0].length();\n      }\n\n      Token t = new Token(params[0],start,end,\"TEST\");\n      t.setPositionIncrement(posInc);\n      \n      result.add(t);\n      for (int j=1; j<toks.length; j++) {\n        t = new Token(toks[j],0,0,\"TEST\");\n        t.setPositionIncrement(0);\n        result.add(t);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /***\n   * Return a list of tokens according to a test string format:\n   * a b c  =>  returns List<Token> [a,b,c]\n   * a/b   => tokens a and b share the same spot (b.positionIncrement=0)\n   * a,3/b/c => a,b,c all share same position (a.positionIncrement=3, b.positionIncrement=0, c.positionIncrement=0)\n   * a,1,10,11  => \"a\" with positionIncrement=1, startOffset=10, endOffset=11\n   * @deprecated does not support attributes api\n   */\n  private List<Token> tokens(String str) {\n    String[] arr = str.split(\" \");\n    List<Token> result = new ArrayList<Token>();\n    for (int i=0; i<arr.length; i++) {\n      String[] toks = arr[i].split(\"/\");\n      String[] params = toks[0].split(\",\");\n\n      int posInc;\n      int start;\n      int end;\n\n      if (params.length > 1) {\n        posInc = Integer.parseInt(params[1]);\n      } else {\n        posInc = 1;\n      }\n\n      if (params.length > 2) {\n        start = Integer.parseInt(params[2]);\n      } else {\n        start = 0;\n      }\n\n      if (params.length > 3) {\n        end = Integer.parseInt(params[3]);\n      } else {\n        end = start + params[0].length();\n      }\n\n      Token t = new Token(params[0],start,end,\"TEST\");\n      t.setPositionIncrement(posInc);\n      \n      result.add(t);\n      for (int j=1; j<toks.length; j++) {\n        t = new Token(toks[j],0,0,\"TEST\");\n        t.setPositionIncrement(0);\n        result.add(t);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestSlowSynonymFilter#tokens(String).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilter#tokens(String).mjava","sourceNew":"  /***\n   * Return a list of tokens according to a test string format:\n   * a b c  =>  returns List<Token> [a,b,c]\n   * a/b   => tokens a and b share the same spot (b.positionIncrement=0)\n   * a,3/b/c => a,b,c all share same position (a.positionIncrement=3, b.positionIncrement=0, c.positionIncrement=0)\n   * a,1,10,11  => \"a\" with positionIncrement=1, startOffset=10, endOffset=11\n   * @deprecated (3.0) does not support attributes api\n   */\n  @Deprecated\n  private List<Token> tokens(String str) {\n    String[] arr = str.split(\" \");\n    List<Token> result = new ArrayList<Token>();\n    for (int i=0; i<arr.length; i++) {\n      String[] toks = arr[i].split(\"/\");\n      String[] params = toks[0].split(\",\");\n\n      int posInc;\n      int start;\n      int end;\n\n      if (params.length > 1) {\n        posInc = Integer.parseInt(params[1]);\n      } else {\n        posInc = 1;\n      }\n\n      if (params.length > 2) {\n        start = Integer.parseInt(params[2]);\n      } else {\n        start = 0;\n      }\n\n      if (params.length > 3) {\n        end = Integer.parseInt(params[3]);\n      } else {\n        end = start + params[0].length();\n      }\n\n      Token t = new Token(params[0],start,end,\"TEST\");\n      t.setPositionIncrement(posInc);\n      \n      result.add(t);\n      for (int j=1; j<toks.length; j++) {\n        t = new Token(toks[j],0,0,\"TEST\");\n        t.setPositionIncrement(0);\n        result.add(t);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /***\n   * Return a list of tokens according to a test string format:\n   * a b c  =>  returns List<Token> [a,b,c]\n   * a/b   => tokens a and b share the same spot (b.positionIncrement=0)\n   * a,3/b/c => a,b,c all share same position (a.positionIncrement=3, b.positionIncrement=0, c.positionIncrement=0)\n   * a,1,10,11  => \"a\" with positionIncrement=1, startOffset=10, endOffset=11\n   * @deprecated (3.0) does not support attributes api\n   */\n  @Deprecated\n  private List<Token> tokens(String str) {\n    String[] arr = str.split(\" \");\n    List<Token> result = new ArrayList<Token>();\n    for (int i=0; i<arr.length; i++) {\n      String[] toks = arr[i].split(\"/\");\n      String[] params = toks[0].split(\",\");\n\n      int posInc;\n      int start;\n      int end;\n\n      if (params.length > 1) {\n        posInc = Integer.parseInt(params[1]);\n      } else {\n        posInc = 1;\n      }\n\n      if (params.length > 2) {\n        start = Integer.parseInt(params[2]);\n      } else {\n        start = 0;\n      }\n\n      if (params.length > 3) {\n        end = Integer.parseInt(params[3]);\n      } else {\n        end = start + params[0].length();\n      }\n\n      Token t = new Token(params[0],start,end,\"TEST\");\n      t.setPositionIncrement(posInc);\n      \n      result.add(t);\n      for (int j=1; j<toks.length; j++) {\n        t = new Token(toks[j],0,0,\"TEST\");\n        t.setPositionIncrement(0);\n        result.add(t);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b59603a30f81d2af70cd2033270521dc7c8ec626":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["b59603a30f81d2af70cd2033270521dc7c8ec626","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a1c25e111e7f6a7353d2b9b46643b7f7507c6584":["b59603a30f81d2af70cd2033270521dc7c8ec626"],"3bb13258feba31ab676502787ab2e1779f129b7a":["a1c25e111e7f6a7353d2b9b46643b7f7507c6584","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["a1c25e111e7f6a7353d2b9b46643b7f7507c6584"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b59603a30f81d2af70cd2033270521dc7c8ec626"],"b59603a30f81d2af70cd2033270521dc7c8ec626":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a1c25e111e7f6a7353d2b9b46643b7f7507c6584"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a1c25e111e7f6a7353d2b9b46643b7f7507c6584":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}