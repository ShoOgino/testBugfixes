{"path":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","commits":[{"id":"d17ffdbce80d3dce181982a9cd16f4f90bc8619a","date":1357583592,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","sourceNew":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<String>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    for( int i=0; i<rename.size(); i++ ) {\n      String from = rename.getName(i);\n      String to = rename.getVal(i);\n      okFieldNames.add( to );\n      boolean copy = (reqFieldNames!=null && reqFieldNames.contains(from));\n      if(!copy) {\n        // Check that subsequent copy/rename requests have the field they need to copy\n        for(int j=i+1; j<rename.size(); j++) {\n          if(from.equals(rename.getName(j))) {\n            rename.setName(j, to); // copy from the current target\n            if(reqFieldNames==null) {\n              reqFieldNames = new HashSet<String>();\n            }\n            reqFieldNames.add(to); // don't rename our current target\n          }\n        }\n      }\n      augmenters.addTransformer( new RenameFieldTransformer( from, to, copy ) );\n    }\n\n    if( !_wantsAllFields ) {\n      if( !globs.isEmpty() ) {\n        // TODO??? need to fill up the fields with matching field names in the index\n        // and add them to okFieldNames?\n        // maybe just get all fields?\n        // this would disable field selection optimization... i think thatis OK\n        fields.clear(); // this will get all fields, and use wantsField to limit\n      }\n      okFieldNames.addAll( fields );\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","sourceOld":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<String>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    for( int i=0; i<rename.size(); i++ ) {\n      String from = rename.getName(i);\n      String to = rename.getVal(i);\n      okFieldNames.add( to );\n      boolean copy = (reqFieldNames!=null && reqFieldNames.contains(from));\n      if(!copy) {\n        // Check that subsequent copy/rename requests have the field they need to copy\n        for(int j=i+1; j<rename.size(); j++) {\n          if(from.equals(rename.getName(j))) {\n            rename.setName(j, to); // copy from the current target\n            if(reqFieldNames==null) {\n              reqFieldNames = new HashSet<String>();\n            }\n            reqFieldNames.add(to); // don't rename our current target\n          }\n        }\n      }\n      augmenters.addTransformer( new RenameFieldTransformer( from, to, copy ) );     \n    }\n\n    if( !_wantsAllFields ) {\n      if( !globs.isEmpty() ) {\n        // TODO??? need to fill up the fields with matching field names in the index\n        // and add them to okFieldNames?\n        // maybe just get all fields?\n        // this would disable field selection optimization... i think thatis OK\n        fields.clear(); // this will get all fields, and use wantsField to limit\n      }\n      okFieldNames.addAll( fields );\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<String>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    for( int i=0; i<rename.size(); i++ ) {\n      String from = rename.getName(i);\n      String to = rename.getVal(i);\n      okFieldNames.add( to );\n      boolean copy = (reqFieldNames!=null && reqFieldNames.contains(from));\n      if(!copy) {\n        // Check that subsequent copy/rename requests have the field they need to copy\n        for(int j=i+1; j<rename.size(); j++) {\n          if(from.equals(rename.getName(j))) {\n            rename.setName(j, to); // copy from the current target\n            if(reqFieldNames==null) {\n              reqFieldNames = new HashSet<String>();\n            }\n            reqFieldNames.add(to); // don't rename our current target\n          }\n        }\n      }\n      augmenters.addTransformer( new RenameFieldTransformer( from, to, copy ) );\n    }\n\n    if( !_wantsAllFields ) {\n      if( !globs.isEmpty() ) {\n        // TODO??? need to fill up the fields with matching field names in the index\n        // and add them to okFieldNames?\n        // maybe just get all fields?\n        // this would disable field selection optimization... i think thatis OK\n        fields.clear(); // this will get all fields, and use wantsField to limit\n      }\n      okFieldNames.addAll( fields );\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cc4a7e1c7c8349744a449a0def295f2fd99d6a4","date":1366137262,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","sourceNew":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<String>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    for( int i=0; i<rename.size(); i++ ) {\n      String from = rename.getName(i);\n      String to = rename.getVal(i);\n      okFieldNames.add( to );\n      boolean copy = (reqFieldNames!=null && reqFieldNames.contains(from));\n      if(!copy) {\n        // Check that subsequent copy/rename requests have the field they need to copy\n        for(int j=i+1; j<rename.size(); j++) {\n          if(from.equals(rename.getName(j))) {\n            rename.setName(j, to); // copy from the current target\n            if(reqFieldNames==null) {\n              reqFieldNames = new LinkedHashSet<String>();\n            }\n            reqFieldNames.add(to); // don't rename our current target\n          }\n        }\n      }\n      augmenters.addTransformer( new RenameFieldTransformer( from, to, copy ) );\n    }\n\n    if( !_wantsAllFields ) {\n      if( !globs.isEmpty() ) {\n        // TODO??? need to fill up the fields with matching field names in the index\n        // and add them to okFieldNames?\n        // maybe just get all fields?\n        // this would disable field selection optimization... i think thatis OK\n        fields.clear(); // this will get all fields, and use wantsField to limit\n      }\n      okFieldNames.addAll( fields );\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","sourceOld":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<String>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    for( int i=0; i<rename.size(); i++ ) {\n      String from = rename.getName(i);\n      String to = rename.getVal(i);\n      okFieldNames.add( to );\n      boolean copy = (reqFieldNames!=null && reqFieldNames.contains(from));\n      if(!copy) {\n        // Check that subsequent copy/rename requests have the field they need to copy\n        for(int j=i+1; j<rename.size(); j++) {\n          if(from.equals(rename.getName(j))) {\n            rename.setName(j, to); // copy from the current target\n            if(reqFieldNames==null) {\n              reqFieldNames = new HashSet<String>();\n            }\n            reqFieldNames.add(to); // don't rename our current target\n          }\n        }\n      }\n      augmenters.addTransformer( new RenameFieldTransformer( from, to, copy ) );\n    }\n\n    if( !_wantsAllFields ) {\n      if( !globs.isEmpty() ) {\n        // TODO??? need to fill up the fields with matching field names in the index\n        // and add them to okFieldNames?\n        // maybe just get all fields?\n        // this would disable field selection optimization... i think thatis OK\n        fields.clear(); // this will get all fields, and use wantsField to limit\n      }\n      okFieldNames.addAll( fields );\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","sourceNew":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    for( int i=0; i<rename.size(); i++ ) {\n      String from = rename.getName(i);\n      String to = rename.getVal(i);\n      okFieldNames.add( to );\n      boolean copy = (reqFieldNames!=null && reqFieldNames.contains(from));\n      if(!copy) {\n        // Check that subsequent copy/rename requests have the field they need to copy\n        for(int j=i+1; j<rename.size(); j++) {\n          if(from.equals(rename.getName(j))) {\n            rename.setName(j, to); // copy from the current target\n            if(reqFieldNames==null) {\n              reqFieldNames = new LinkedHashSet<>();\n            }\n            reqFieldNames.add(to); // don't rename our current target\n          }\n        }\n      }\n      augmenters.addTransformer( new RenameFieldTransformer( from, to, copy ) );\n    }\n\n    if( !_wantsAllFields ) {\n      if( !globs.isEmpty() ) {\n        // TODO??? need to fill up the fields with matching field names in the index\n        // and add them to okFieldNames?\n        // maybe just get all fields?\n        // this would disable field selection optimization... i think thatis OK\n        fields.clear(); // this will get all fields, and use wantsField to limit\n      }\n      okFieldNames.addAll( fields );\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","sourceOld":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<String>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    for( int i=0; i<rename.size(); i++ ) {\n      String from = rename.getName(i);\n      String to = rename.getVal(i);\n      okFieldNames.add( to );\n      boolean copy = (reqFieldNames!=null && reqFieldNames.contains(from));\n      if(!copy) {\n        // Check that subsequent copy/rename requests have the field they need to copy\n        for(int j=i+1; j<rename.size(); j++) {\n          if(from.equals(rename.getName(j))) {\n            rename.setName(j, to); // copy from the current target\n            if(reqFieldNames==null) {\n              reqFieldNames = new LinkedHashSet<String>();\n            }\n            reqFieldNames.add(to); // don't rename our current target\n          }\n        }\n      }\n      augmenters.addTransformer( new RenameFieldTransformer( from, to, copy ) );\n    }\n\n    if( !_wantsAllFields ) {\n      if( !globs.isEmpty() ) {\n        // TODO??? need to fill up the fields with matching field names in the index\n        // and add them to okFieldNames?\n        // maybe just get all fields?\n        // this would disable field selection optimization... i think thatis OK\n        fields.clear(); // this will get all fields, and use wantsField to limit\n      }\n      okFieldNames.addAll( fields );\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6361f06d7cb11c97d6848b4e1a734c7da7ad9ba","date":1458935972,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","sourceNew":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    for( int i=0; i<rename.size(); i++ ) {\n      String from = rename.getName(i);\n      String to = rename.getVal(i);\n      okFieldNames.add( to );\n      boolean copy = (reqFieldNames!=null && reqFieldNames.contains(from));\n      if(!copy) {\n        // Check that subsequent copy/rename requests have the field they need to copy\n        for(int j=i+1; j<rename.size(); j++) {\n          if(from.equals(rename.getName(j))) {\n            rename.setName(j, to); // copy from the current target\n            if(reqFieldNames==null) {\n              reqFieldNames = new LinkedHashSet<>();\n            }\n            reqFieldNames.add(to); // don't rename our current target\n          }\n        }\n      }\n      augmenters.addTransformer( new RenameFieldTransformer( from, to, copy ) );\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","sourceOld":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    for( int i=0; i<rename.size(); i++ ) {\n      String from = rename.getName(i);\n      String to = rename.getVal(i);\n      okFieldNames.add( to );\n      boolean copy = (reqFieldNames!=null && reqFieldNames.contains(from));\n      if(!copy) {\n        // Check that subsequent copy/rename requests have the field they need to copy\n        for(int j=i+1; j<rename.size(); j++) {\n          if(from.equals(rename.getName(j))) {\n            rename.setName(j, to); // copy from the current target\n            if(reqFieldNames==null) {\n              reqFieldNames = new LinkedHashSet<>();\n            }\n            reqFieldNames.add(to); // don't rename our current target\n          }\n        }\n      }\n      augmenters.addTransformer( new RenameFieldTransformer( from, to, copy ) );\n    }\n\n    if( !_wantsAllFields ) {\n      if( !globs.isEmpty() ) {\n        // TODO??? need to fill up the fields with matching field names in the index\n        // and add them to okFieldNames?\n        // maybe just get all fields?\n        // this would disable field selection optimization... i think thatis OK\n        fields.clear(); // this will get all fields, and use wantsField to limit\n      }\n      okFieldNames.addAll( fields );\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"695b91ddc315b48c300ca30d6e15547d9fb8fa80","date":1458939068,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","sourceNew":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    for( int i=0; i<rename.size(); i++ ) {\n      String from = rename.getName(i);\n      String to = rename.getVal(i);\n      okFieldNames.add( to );\n      boolean copy = (reqFieldNames!=null && reqFieldNames.contains(from));\n      if(!copy) {\n        // Check that subsequent copy/rename requests have the field they need to copy\n        for(int j=i+1; j<rename.size(); j++) {\n          if(from.equals(rename.getName(j))) {\n            rename.setName(j, to); // copy from the current target\n            if(reqFieldNames==null) {\n              reqFieldNames = new LinkedHashSet<>();\n            }\n            reqFieldNames.add(to); // don't rename our current target\n          }\n        }\n      }\n      augmenters.addTransformer( new RenameFieldTransformer( from, to, copy ) );\n    }\n    if( !_wantsAllFields && !globs.isEmpty() ) {\n      // TODO??? need to fill up the fields with matching field names in the index\n      // and add them to okFieldNames?\n      // maybe just get all fields?\n      // this would disable field selection optimization... i think thatis OK\n      fields.clear(); // this will get all fields, and use wantsField to limit\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","sourceOld":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    for( int i=0; i<rename.size(); i++ ) {\n      String from = rename.getName(i);\n      String to = rename.getVal(i);\n      okFieldNames.add( to );\n      boolean copy = (reqFieldNames!=null && reqFieldNames.contains(from));\n      if(!copy) {\n        // Check that subsequent copy/rename requests have the field they need to copy\n        for(int j=i+1; j<rename.size(); j++) {\n          if(from.equals(rename.getName(j))) {\n            rename.setName(j, to); // copy from the current target\n            if(reqFieldNames==null) {\n              reqFieldNames = new LinkedHashSet<>();\n            }\n            reqFieldNames.add(to); // don't rename our current target\n          }\n        }\n      }\n      augmenters.addTransformer( new RenameFieldTransformer( from, to, copy ) );\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz Krasiński","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","sourceNew":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    for( int i=0; i<rename.size(); i++ ) {\n      String from = rename.getName(i);\n      String to = rename.getVal(i);\n      okFieldNames.add( to );\n      boolean copy = (reqFieldNames!=null && reqFieldNames.contains(from));\n      if(!copy) {\n        // Check that subsequent copy/rename requests have the field they need to copy\n        for(int j=i+1; j<rename.size(); j++) {\n          if(from.equals(rename.getName(j))) {\n            rename.setName(j, to); // copy from the current target\n            if(reqFieldNames==null) {\n              reqFieldNames = new LinkedHashSet<>();\n            }\n            reqFieldNames.add(to); // don't rename our current target\n          }\n        }\n      }\n      augmenters.addTransformer( new RenameFieldTransformer( from, to, copy ) );\n    }\n    if( !_wantsAllFields && !globs.isEmpty() ) {\n      // TODO??? need to fill up the fields with matching field names in the index\n      // and add them to okFieldNames?\n      // maybe just get all fields?\n      // this would disable field selection optimization... i think that is OK\n      fields.clear(); // this will get all fields, and use wantsField to limit\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","sourceOld":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    for( int i=0; i<rename.size(); i++ ) {\n      String from = rename.getName(i);\n      String to = rename.getVal(i);\n      okFieldNames.add( to );\n      boolean copy = (reqFieldNames!=null && reqFieldNames.contains(from));\n      if(!copy) {\n        // Check that subsequent copy/rename requests have the field they need to copy\n        for(int j=i+1; j<rename.size(); j++) {\n          if(from.equals(rename.getName(j))) {\n            rename.setName(j, to); // copy from the current target\n            if(reqFieldNames==null) {\n              reqFieldNames = new LinkedHashSet<>();\n            }\n            reqFieldNames.add(to); // don't rename our current target\n          }\n        }\n      }\n      augmenters.addTransformer( new RenameFieldTransformer( from, to, copy ) );\n    }\n    if( !_wantsAllFields && !globs.isEmpty() ) {\n      // TODO??? need to fill up the fields with matching field names in the index\n      // and add them to okFieldNames?\n      // maybe just get all fields?\n      // this would disable field selection optimization... i think thatis OK\n      fields.clear(); // this will get all fields, and use wantsField to limit\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","sourceNew":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    for( int i=0; i<rename.size(); i++ ) {\n      String from = rename.getName(i);\n      String to = rename.getVal(i);\n      okFieldNames.add( to );\n      boolean copy = (reqFieldNames!=null && reqFieldNames.contains(from));\n      if(!copy) {\n        // Check that subsequent copy/rename requests have the field they need to copy\n        for(int j=i+1; j<rename.size(); j++) {\n          if(from.equals(rename.getName(j))) {\n            rename.setName(j, to); // copy from the current target\n            if(reqFieldNames==null) {\n              reqFieldNames = new LinkedHashSet<>();\n            }\n            reqFieldNames.add(to); // don't rename our current target\n          }\n        }\n      }\n      augmenters.addTransformer( new RenameFieldTransformer( from, to, copy ) );\n    }\n    if( !_wantsAllFields && !globs.isEmpty() ) {\n      // TODO??? need to fill up the fields with matching field names in the index\n      // and add them to okFieldNames?\n      // maybe just get all fields?\n      // this would disable field selection optimization... i think that is OK\n      fields.clear(); // this will get all fields, and use wantsField to limit\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","sourceOld":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    for( int i=0; i<rename.size(); i++ ) {\n      String from = rename.getName(i);\n      String to = rename.getVal(i);\n      okFieldNames.add( to );\n      boolean copy = (reqFieldNames!=null && reqFieldNames.contains(from));\n      if(!copy) {\n        // Check that subsequent copy/rename requests have the field they need to copy\n        for(int j=i+1; j<rename.size(); j++) {\n          if(from.equals(rename.getName(j))) {\n            rename.setName(j, to); // copy from the current target\n            if(reqFieldNames==null) {\n              reqFieldNames = new LinkedHashSet<>();\n            }\n            reqFieldNames.add(to); // don't rename our current target\n          }\n        }\n      }\n      augmenters.addTransformer( new RenameFieldTransformer( from, to, copy ) );\n    }\n    if( !_wantsAllFields && !globs.isEmpty() ) {\n      // TODO??? need to fill up the fields with matching field names in the index\n      // and add them to okFieldNames?\n      // maybe just get all fields?\n      // this would disable field selection optimization... i think thatis OK\n      fields.clear(); // this will get all fields, and use wantsField to limit\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4aa1632edb30be45101a30485138211a97b2c5c","date":1472253048,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","sourceNew":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    for( int i=0; i<rename.size(); i++ ) {\n      String from = rename.getName(i);\n      String to = rename.getVal(i);\n      okFieldNames.add( to );\n      boolean copy = (reqFieldNames!=null && reqFieldNames.contains(from));\n      if(!copy) {\n        // Check that subsequent copy/rename requests have the field they need to copy\n        for(int j=i+1; j<rename.size(); j++) {\n          if(from.equals(rename.getName(j))) {\n            rename.setName(j, to); // copy from the current target\n            if(reqFieldNames==null) {\n              reqFieldNames = new LinkedHashSet<>();\n            }\n            reqFieldNames.add(to); // don't rename our current target\n          }\n        }\n      }\n      augmenters.addTransformer( new RenameFieldTransformer( from, to, copy ) );\n    }\n    if (rename.size() > 0 ) {\n      renameFields = rename.asShallowMap();\n    }\n    if( !_wantsAllFields && !globs.isEmpty() ) {\n      // TODO??? need to fill up the fields with matching field names in the index\n      // and add them to okFieldNames?\n      // maybe just get all fields?\n      // this would disable field selection optimization... i think that is OK\n      fields.clear(); // this will get all fields, and use wantsField to limit\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","sourceOld":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    for( int i=0; i<rename.size(); i++ ) {\n      String from = rename.getName(i);\n      String to = rename.getVal(i);\n      okFieldNames.add( to );\n      boolean copy = (reqFieldNames!=null && reqFieldNames.contains(from));\n      if(!copy) {\n        // Check that subsequent copy/rename requests have the field they need to copy\n        for(int j=i+1; j<rename.size(); j++) {\n          if(from.equals(rename.getName(j))) {\n            rename.setName(j, to); // copy from the current target\n            if(reqFieldNames==null) {\n              reqFieldNames = new LinkedHashSet<>();\n            }\n            reqFieldNames.add(to); // don't rename our current target\n          }\n        }\n      }\n      augmenters.addTransformer( new RenameFieldTransformer( from, to, copy ) );\n    }\n    if( !_wantsAllFields && !globs.isEmpty() ) {\n      // TODO??? need to fill up the fields with matching field names in the index\n      // and add them to okFieldNames?\n      // maybe just get all fields?\n      // this would disable field selection optimization... i think that is OK\n      fields.clear(); // this will get all fields, and use wantsField to limit\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","sourceNew":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    for( int i=0; i<rename.size(); i++ ) {\n      String from = rename.getName(i);\n      String to = rename.getVal(i);\n      okFieldNames.add( to );\n      boolean copy = (reqFieldNames!=null && reqFieldNames.contains(from));\n      if(!copy) {\n        // Check that subsequent copy/rename requests have the field they need to copy\n        for(int j=i+1; j<rename.size(); j++) {\n          if(from.equals(rename.getName(j))) {\n            rename.setName(j, to); // copy from the current target\n            if(reqFieldNames==null) {\n              reqFieldNames = new LinkedHashSet<>();\n            }\n            reqFieldNames.add(to); // don't rename our current target\n          }\n        }\n      }\n      augmenters.addTransformer( new RenameFieldTransformer( from, to, copy ) );\n    }\n    if (rename.size() > 0 ) {\n      renameFields = rename.asShallowMap();\n    }\n    if( !_wantsAllFields && !globs.isEmpty() ) {\n      // TODO??? need to fill up the fields with matching field names in the index\n      // and add them to okFieldNames?\n      // maybe just get all fields?\n      // this would disable field selection optimization... i think that is OK\n      fields.clear(); // this will get all fields, and use wantsField to limit\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","sourceOld":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    for( int i=0; i<rename.size(); i++ ) {\n      String from = rename.getName(i);\n      String to = rename.getVal(i);\n      okFieldNames.add( to );\n      boolean copy = (reqFieldNames!=null && reqFieldNames.contains(from));\n      if(!copy) {\n        // Check that subsequent copy/rename requests have the field they need to copy\n        for(int j=i+1; j<rename.size(); j++) {\n          if(from.equals(rename.getName(j))) {\n            rename.setName(j, to); // copy from the current target\n            if(reqFieldNames==null) {\n              reqFieldNames = new LinkedHashSet<>();\n            }\n            reqFieldNames.add(to); // don't rename our current target\n          }\n        }\n      }\n      augmenters.addTransformer( new RenameFieldTransformer( from, to, copy ) );\n    }\n    if( !_wantsAllFields && !globs.isEmpty() ) {\n      // TODO??? need to fill up the fields with matching field names in the index\n      // and add them to okFieldNames?\n      // maybe just get all fields?\n      // this would disable field selection optimization... i think that is OK\n      fields.clear(); // this will get all fields, and use wantsField to limit\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#parseFieldList(String[],SolrQueryRequest).mjava","sourceNew":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    for( int i=0; i<rename.size(); i++ ) {\n      String from = rename.getName(i);\n      String to = rename.getVal(i);\n      okFieldNames.add( to );\n      boolean copy = (reqFieldNames!=null && reqFieldNames.contains(from));\n      if(!copy) {\n        // Check that subsequent copy/rename requests have the field they need to copy\n        for(int j=i+1; j<rename.size(); j++) {\n          if(from.equals(rename.getName(j))) {\n            rename.setName(j, to); // copy from the current target\n            if(reqFieldNames==null) {\n              reqFieldNames = new LinkedHashSet<>();\n            }\n            reqFieldNames.add(to); // don't rename our current target\n          }\n        }\n      }\n      augmenters.addTransformer( new RenameFieldTransformer( from, to, copy ) );\n    }\n    if (rename.size() > 0 ) {\n      renameFields = rename.asShallowMap();\n    }\n    if( !_wantsAllFields && !globs.isEmpty() ) {\n      // TODO??? need to fill up the fields with matching field names in the index\n      // and add them to okFieldNames?\n      // maybe just get all fields?\n      // this would disable field selection optimization... i think that is OK\n      fields.clear(); // this will get all fields, and use wantsField to limit\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","sourceOld":"  private void parseFieldList(String[] fl, SolrQueryRequest req) {\n    _wantsScore = false;\n    _wantsAllFields = false;\n    if (fl == null || fl.length == 0 || fl.length == 1 && fl[0].length()==0) {\n      _wantsAllFields = true;\n      return;\n    }\n\n    NamedList<String> rename = new NamedList<>();\n    DocTransformers augmenters = new DocTransformers();\n    for (String fieldList : fl) {\n      add(fieldList,rename,augmenters,req);\n    }\n    for( int i=0; i<rename.size(); i++ ) {\n      String from = rename.getName(i);\n      String to = rename.getVal(i);\n      okFieldNames.add( to );\n      boolean copy = (reqFieldNames!=null && reqFieldNames.contains(from));\n      if(!copy) {\n        // Check that subsequent copy/rename requests have the field they need to copy\n        for(int j=i+1; j<rename.size(); j++) {\n          if(from.equals(rename.getName(j))) {\n            rename.setName(j, to); // copy from the current target\n            if(reqFieldNames==null) {\n              reqFieldNames = new LinkedHashSet<>();\n            }\n            reqFieldNames.add(to); // don't rename our current target\n          }\n        }\n      }\n      augmenters.addTransformer( new RenameFieldTransformer( from, to, copy ) );\n    }\n    if( !_wantsAllFields && !globs.isEmpty() ) {\n      // TODO??? need to fill up the fields with matching field names in the index\n      // and add them to okFieldNames?\n      // maybe just get all fields?\n      // this would disable field selection optimization... i think thatis OK\n      fields.clear(); // this will get all fields, and use wantsField to limit\n    }\n\n    if( augmenters.size() == 1 ) {\n      transformer = augmenters.getTransformer(0);\n    }\n    else if( augmenters.size() > 1 ) {\n      transformer = augmenters;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d17ffdbce80d3dce181982a9cd16f4f90bc8619a"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7cc4a7e1c7c8349744a449a0def295f2fd99d6a4"],"d17ffdbce80d3dce181982a9cd16f4f90bc8619a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"695b91ddc315b48c300ca30d6e15547d9fb8fa80":["a6361f06d7cb11c97d6848b4e1a734c7da7ad9ba"],"a6361f06d7cb11c97d6848b4e1a734c7da7ad9ba":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["695b91ddc315b48c300ca30d6e15547d9fb8fa80","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["695b91ddc315b48c300ca30d6e15547d9fb8fa80","0158ced21948b6626f733c1c42c1e18d94449789"],"a4aa1632edb30be45101a30485138211a97b2c5c":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"7cc4a7e1c7c8349744a449a0def295f2fd99d6a4":["d17ffdbce80d3dce181982a9cd16f4f90bc8619a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d470c8182e92b264680e34081b75e70a9f2b3c89","a4aa1632edb30be45101a30485138211a97b2c5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0158ced21948b6626f733c1c42c1e18d94449789":["695b91ddc315b48c300ca30d6e15547d9fb8fa80"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a6361f06d7cb11c97d6848b4e1a734c7da7ad9ba"],"d17ffdbce80d3dce181982a9cd16f4f90bc8619a":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7cc4a7e1c7c8349744a449a0def295f2fd99d6a4"],"695b91ddc315b48c300ca30d6e15547d9fb8fa80":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","0158ced21948b6626f733c1c42c1e18d94449789"],"a6361f06d7cb11c97d6848b4e1a734c7da7ad9ba":["695b91ddc315b48c300ca30d6e15547d9fb8fa80"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a4aa1632edb30be45101a30485138211a97b2c5c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a4aa1632edb30be45101a30485138211a97b2c5c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"7cc4a7e1c7c8349744a449a0def295f2fd99d6a4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d17ffdbce80d3dce181982a9cd16f4f90bc8619a"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}