{"path":"lucene/core/src/java/org/apache/lucene/geo/XYLine#XYLine(float[],float[]).mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/XYLine#XYLine(float[],float[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/XYLine#XYLine(float[],float[]).mjava","sourceNew":"  /**\n   * Creates a new Line from the supplied x/y array.\n   */\n  public XYLine(float[] x, float[] y) {\n    if (x == null) {\n      throw new IllegalArgumentException(\"x must not be null\");\n    }\n    if (y == null) {\n      throw new IllegalArgumentException(\"y must not be null\");\n    }\n    if (x.length != y.length) {\n      throw new IllegalArgumentException(\"x and y must be equal length\");\n    }\n    if (x.length < 2) {\n      throw new IllegalArgumentException(\"at least 2 line points required\");\n    }\n\n    // compute bounding box\n    double minX = x[0];\n    double minY = y[0];\n    double maxX = x[0];\n    double maxY = y[0];\n    for (int i = 0; i < x.length; ++i) {\n      minX = Math.min(x[i], minX);\n      minY = Math.min(y[i], minY);\n      maxX = Math.max(x[i], maxX);\n      maxY = Math.max(y[i], maxY);\n    }\n\n    this.x = new double[x.length];\n    this.y = new double[y.length];\n    for (int i = 0; i < x.length; ++i) {\n      this.x[i] = (double)x[i];\n      this.y[i] = (double)y[i];\n    }\n    this.minX = minX;\n    this.maxX = maxX;\n    this.minY = minY;\n    this.maxY = maxY;\n  }\n\n","sourceOld":"  /**\n   * Creates a new Line from the supplied x/y array.\n   */\n  public XYLine(float[] x, float[] y) {\n    if (x == null) {\n      throw new IllegalArgumentException(\"x must not be null\");\n    }\n    if (y == null) {\n      throw new IllegalArgumentException(\"y must not be null\");\n    }\n    if (x.length != y.length) {\n      throw new IllegalArgumentException(\"x and y must be equal length\");\n    }\n    if (x.length < 2) {\n      throw new IllegalArgumentException(\"at least 2 line points required\");\n    }\n\n    // compute bounding box\n    double minX = x[0];\n    double minY = y[0];\n    double maxX = x[0];\n    double maxY = y[0];\n    for (int i = 0; i < x.length; ++i) {\n      minX = Math.min(x[i], minX);\n      minY = Math.min(y[i], minY);\n      maxX = Math.max(x[i], maxX);\n      maxY = Math.max(y[i], maxY);\n    }\n\n    this.x = new double[x.length];\n    this.y = new double[y.length];\n    for (int i = 0; i < x.length; ++i) {\n      this.x[i] = (double)x[i];\n      this.y[i] = (double)y[i];\n    }\n    this.minX = minX;\n    this.maxX = maxX;\n    this.minY = minY;\n    this.maxY = maxY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a923e28c9d079048c6993884ec89c44f0380b923","date":1581100153,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/XYLine#XYLine(float[],float[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/XYLine#XYLine(float[],float[]).mjava","sourceNew":"  /**\n   * Creates a new Line from the supplied X/Y array.\n   */\n  public XYLine(float[] x, float[] y) {\n    if (x == null) {\n      throw new IllegalArgumentException(\"x must not be null\");\n    }\n    if (y == null) {\n      throw new IllegalArgumentException(\"y must not be null\");\n    }\n    if (x.length != y.length) {\n      throw new IllegalArgumentException(\"x and y must be equal length\");\n    }\n    if (x.length < 2) {\n      throw new IllegalArgumentException(\"at least 2 line points required\");\n    }\n\n    // compute bounding box\n    double minX = x[0];\n    double minY = y[0];\n    double maxX = x[0];\n    double maxY = y[0];\n    for (int i = 0; i < x.length; ++i) {\n      minX = Math.min(x[i], minX);\n      minY = Math.min(y[i], minY);\n      maxX = Math.max(x[i], maxX);\n      maxY = Math.max(y[i], maxY);\n    }\n\n    this.x = new double[x.length];\n    this.y = new double[y.length];\n    for (int i = 0; i < x.length; ++i) {\n      this.x[i] = (double)x[i];\n      this.y[i] = (double)y[i];\n    }\n    this.minX = minX;\n    this.maxX = maxX;\n    this.minY = minY;\n    this.maxY = maxY;\n  }\n\n","sourceOld":"  /**\n   * Creates a new Line from the supplied x/y array.\n   */\n  public XYLine(float[] x, float[] y) {\n    if (x == null) {\n      throw new IllegalArgumentException(\"x must not be null\");\n    }\n    if (y == null) {\n      throw new IllegalArgumentException(\"y must not be null\");\n    }\n    if (x.length != y.length) {\n      throw new IllegalArgumentException(\"x and y must be equal length\");\n    }\n    if (x.length < 2) {\n      throw new IllegalArgumentException(\"at least 2 line points required\");\n    }\n\n    // compute bounding box\n    double minX = x[0];\n    double minY = y[0];\n    double maxX = x[0];\n    double maxY = y[0];\n    for (int i = 0; i < x.length; ++i) {\n      minX = Math.min(x[i], minX);\n      minY = Math.min(y[i], minY);\n      maxX = Math.max(x[i], maxX);\n      maxY = Math.max(y[i], maxY);\n    }\n\n    this.x = new double[x.length];\n    this.y = new double[y.length];\n    for (int i = 0; i < x.length; ++i) {\n      this.x[i] = (double)x[i];\n      this.y[i] = (double)y[i];\n    }\n    this.minX = minX;\n    this.maxX = maxX;\n    this.minY = minY;\n    this.maxY = maxY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4d14322963cbbe599706c6c272d5cba0817ea32","date":1581676750,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/XYLine#XYLine(float[],float[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/XYLine#XYLine(float[],float[]).mjava","sourceNew":"  /**\n   * Creates a new Line from the supplied X/Y array.\n   */\n  public XYLine(float[] x, float[] y) {\n    if (x == null) {\n      throw new IllegalArgumentException(\"x must not be null\");\n    }\n    if (y == null) {\n      throw new IllegalArgumentException(\"y must not be null\");\n    }\n    if (x.length != y.length) {\n      throw new IllegalArgumentException(\"x and y must be equal length\");\n    }\n    if (x.length < 2) {\n      throw new IllegalArgumentException(\"at least 2 line points required\");\n    }\n\n    // compute bounding box\n    float minX = Float.MAX_VALUE;\n    float minY = Float.MAX_VALUE;\n    float maxX = -Float.MAX_VALUE;\n    float maxY = -Float.MAX_VALUE;\n    for (int i = 0; i < x.length; ++i) {\n      minX = Math.min(checkVal(x[i]), minX);\n      minY = Math.min(checkVal(y[i]), minY);\n      maxX = Math.max(x[i], maxX);\n      maxY = Math.max(y[i], maxY);\n    }\n    this.x = x.clone();\n    this.y = y.clone();\n\n    this.minX = minX;\n    this.maxX = maxX;\n    this.minY = minY;\n    this.maxY = maxY;\n  }\n\n","sourceOld":"  /**\n   * Creates a new Line from the supplied X/Y array.\n   */\n  public XYLine(float[] x, float[] y) {\n    if (x == null) {\n      throw new IllegalArgumentException(\"x must not be null\");\n    }\n    if (y == null) {\n      throw new IllegalArgumentException(\"y must not be null\");\n    }\n    if (x.length != y.length) {\n      throw new IllegalArgumentException(\"x and y must be equal length\");\n    }\n    if (x.length < 2) {\n      throw new IllegalArgumentException(\"at least 2 line points required\");\n    }\n\n    // compute bounding box\n    double minX = x[0];\n    double minY = y[0];\n    double maxX = x[0];\n    double maxY = y[0];\n    for (int i = 0; i < x.length; ++i) {\n      minX = Math.min(x[i], minX);\n      minY = Math.min(y[i], minY);\n      maxX = Math.max(x[i], maxX);\n      maxY = Math.max(y[i], maxY);\n    }\n\n    this.x = new double[x.length];\n    this.y = new double[y.length];\n    for (int i = 0; i < x.length; ++i) {\n      this.x[i] = (double)x[i];\n      this.y[i] = (double)y[i];\n    }\n    this.minX = minX;\n    this.maxX = maxX;\n    this.minY = minY;\n    this.maxY = maxY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f66eaefcdea9f8ffcf9508f78556159d61b8e3df","date":1581695213,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/XYLine#XYLine(float[],float[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/XYLine#XYLine(float[],float[]).mjava","sourceNew":"  /**\n   * Creates a new Line from the supplied X/Y array.\n   */\n  public XYLine(float[] x, float[] y) {\n    if (x == null) {\n      throw new IllegalArgumentException(\"x must not be null\");\n    }\n    if (y == null) {\n      throw new IllegalArgumentException(\"y must not be null\");\n    }\n    if (x.length != y.length) {\n      throw new IllegalArgumentException(\"x and y must be equal length\");\n    }\n    if (x.length < 2) {\n      throw new IllegalArgumentException(\"at least 2 line points required\");\n    }\n\n    // compute bounding box\n    float minX = Float.MAX_VALUE;\n    float minY = Float.MAX_VALUE;\n    float maxX = -Float.MAX_VALUE;\n    float maxY = -Float.MAX_VALUE;\n    for (int i = 0; i < x.length; ++i) {\n      minX = Math.min(checkVal(x[i]), minX);\n      minY = Math.min(checkVal(y[i]), minY);\n      maxX = Math.max(x[i], maxX);\n      maxY = Math.max(y[i], maxY);\n    }\n    this.x = x.clone();\n    this.y = y.clone();\n\n    this.minX = minX;\n    this.maxX = maxX;\n    this.minY = minY;\n    this.maxY = maxY;\n  }\n\n","sourceOld":"  /**\n   * Creates a new Line from the supplied X/Y array.\n   */\n  public XYLine(float[] x, float[] y) {\n    if (x == null) {\n      throw new IllegalArgumentException(\"x must not be null\");\n    }\n    if (y == null) {\n      throw new IllegalArgumentException(\"y must not be null\");\n    }\n    if (x.length != y.length) {\n      throw new IllegalArgumentException(\"x and y must be equal length\");\n    }\n    if (x.length < 2) {\n      throw new IllegalArgumentException(\"at least 2 line points required\");\n    }\n\n    // compute bounding box\n    double minX = x[0];\n    double minY = y[0];\n    double maxX = x[0];\n    double maxY = y[0];\n    for (int i = 0; i < x.length; ++i) {\n      minX = Math.min(x[i], minX);\n      minY = Math.min(y[i], minY);\n      maxX = Math.max(x[i], maxX);\n      maxY = Math.max(y[i], maxY);\n    }\n\n    this.x = new double[x.length];\n    this.y = new double[y.length];\n    for (int i = 0; i < x.length; ++i) {\n      this.x[i] = (double)x[i];\n      this.y[i] = (double)y[i];\n    }\n    this.minX = minX;\n    this.maxX = maxX;\n    this.minY = minY;\n    this.maxY = maxY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f66eaefcdea9f8ffcf9508f78556159d61b8e3df":["a923e28c9d079048c6993884ec89c44f0380b923","a4d14322963cbbe599706c6c272d5cba0817ea32"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a923e28c9d079048c6993884ec89c44f0380b923":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f66eaefcdea9f8ffcf9508f78556159d61b8e3df"],"a4d14322963cbbe599706c6c272d5cba0817ea32":["a923e28c9d079048c6993884ec89c44f0380b923"]},"commit2Childs":{"f66eaefcdea9f8ffcf9508f78556159d61b8e3df":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a923e28c9d079048c6993884ec89c44f0380b923"],"a923e28c9d079048c6993884ec89c44f0380b923":["f66eaefcdea9f8ffcf9508f78556159d61b8e3df","a4d14322963cbbe599706c6c272d5cba0817ea32"],"a4d14322963cbbe599706c6c272d5cba0817ea32":["f66eaefcdea9f8ffcf9508f78556159d61b8e3df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}