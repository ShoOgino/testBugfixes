{"path":"src/java/org/apache/lucene/search/QueryTermVector#processTerms(String[]).mjava","commits":[{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/QueryTermVector#processTerms(String[]).mjava","pathOld":"/dev/null","sourceNew":"  private void processTerms(String[] queryTerms) {\n    if (queryTerms != null) {\n      Arrays.sort(queryTerms);\n      Map tmpSet = new HashMap(queryTerms.length);\n      //filter out duplicates\n      List tmpList = new ArrayList(queryTerms.length);\n      List tmpFreqs = new ArrayList(queryTerms.length);\n      int j = 0;\n      for (int i = 0; i < queryTerms.length; i++) {\n        String term = queryTerms[i];\n        Integer position = (Integer)tmpSet.get(term);\n        if (position == null) {\n          tmpSet.put(term, new Integer(j++));\n          tmpList.add(term);\n          tmpFreqs.add(new Integer(1));\n        }       \n        else {\n          Integer integer = (Integer)tmpFreqs.get(position.intValue());\n          tmpFreqs.set(position.intValue(), new Integer(integer.intValue() + 1));          \n        }\n      }\n      terms = (String[])tmpList.toArray(terms);\n      //termFreqs = (int[])tmpFreqs.toArray(termFreqs);\n      termFreqs = new int[tmpFreqs.size()];\n      int i = 0;\n      for (Iterator iter = tmpFreqs.iterator(); iter.hasNext();) {\n        Integer integer = (Integer) iter.next();\n        termFreqs[i++] = integer.intValue();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/QueryTermVector#processTerms(String[]).mjava","pathOld":"src/java/org/apache/lucene/search/QueryTermVector#processTerms(String[]).mjava","sourceNew":"  private void processTerms(String[] queryTerms) {\n    if (queryTerms != null) {\n      Arrays.sort(queryTerms);\n      Map tmpSet = new HashMap(queryTerms.length);\n      //filter out duplicates\n      List tmpList = new ArrayList(queryTerms.length);\n      List tmpFreqs = new ArrayList(queryTerms.length);\n      int j = 0;\n      for (int i = 0; i < queryTerms.length; i++) {\n        String term = queryTerms[i];\n        Integer position = (Integer)tmpSet.get(term);\n        if (position == null) {\n          tmpSet.put(term, Integer.valueOf(j++));\n          tmpList.add(term);\n          tmpFreqs.add(Integer.valueOf(1));\n        }       \n        else {\n          Integer integer = (Integer)tmpFreqs.get(position.intValue());\n          tmpFreqs.set(position.intValue(), Integer.valueOf(integer.intValue() + 1));          \n        }\n      }\n      terms = (String[])tmpList.toArray(terms);\n      //termFreqs = (int[])tmpFreqs.toArray(termFreqs);\n      termFreqs = new int[tmpFreqs.size()];\n      int i = 0;\n      for (Iterator iter = tmpFreqs.iterator(); iter.hasNext();) {\n        Integer integer = (Integer) iter.next();\n        termFreqs[i++] = integer.intValue();\n      }\n    }\n  }\n\n","sourceOld":"  private void processTerms(String[] queryTerms) {\n    if (queryTerms != null) {\n      Arrays.sort(queryTerms);\n      Map tmpSet = new HashMap(queryTerms.length);\n      //filter out duplicates\n      List tmpList = new ArrayList(queryTerms.length);\n      List tmpFreqs = new ArrayList(queryTerms.length);\n      int j = 0;\n      for (int i = 0; i < queryTerms.length; i++) {\n        String term = queryTerms[i];\n        Integer position = (Integer)tmpSet.get(term);\n        if (position == null) {\n          tmpSet.put(term, new Integer(j++));\n          tmpList.add(term);\n          tmpFreqs.add(new Integer(1));\n        }       \n        else {\n          Integer integer = (Integer)tmpFreqs.get(position.intValue());\n          tmpFreqs.set(position.intValue(), new Integer(integer.intValue() + 1));          \n        }\n      }\n      terms = (String[])tmpList.toArray(terms);\n      //termFreqs = (int[])tmpFreqs.toArray(termFreqs);\n      termFreqs = new int[tmpFreqs.size()];\n      int i = 0;\n      for (Iterator iter = tmpFreqs.iterator(); iter.hasNext();) {\n        Integer integer = (Integer) iter.next();\n        termFreqs[i++] = integer.intValue();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/QueryTermVector#processTerms(String[]).mjava","pathOld":"src/java/org/apache/lucene/search/QueryTermVector#processTerms(String[]).mjava","sourceNew":"  private void processTerms(String[] queryTerms) {\n    if (queryTerms != null) {\n      Arrays.sort(queryTerms);\n      Map<String,Integer> tmpSet = new HashMap<String,Integer>(queryTerms.length);\n      //filter out duplicates\n      List<String> tmpList = new ArrayList<String>(queryTerms.length);\n      List<Integer> tmpFreqs = new ArrayList<Integer>(queryTerms.length);\n      int j = 0;\n      for (int i = 0; i < queryTerms.length; i++) {\n        String term = queryTerms[i];\n        Integer position = tmpSet.get(term);\n        if (position == null) {\n          tmpSet.put(term, Integer.valueOf(j++));\n          tmpList.add(term);\n          tmpFreqs.add(Integer.valueOf(1));\n        }       \n        else {\n          Integer integer = tmpFreqs.get(position.intValue());\n          tmpFreqs.set(position.intValue(), Integer.valueOf(integer.intValue() + 1));          \n        }\n      }\n      terms = tmpList.toArray(terms);\n      //termFreqs = (int[])tmpFreqs.toArray(termFreqs);\n      termFreqs = new int[tmpFreqs.size()];\n      int i = 0;\n      for (final Integer integer : tmpFreqs) {\n        termFreqs[i++] = integer.intValue();\n      }\n    }\n  }\n\n","sourceOld":"  private void processTerms(String[] queryTerms) {\n    if (queryTerms != null) {\n      Arrays.sort(queryTerms);\n      Map tmpSet = new HashMap(queryTerms.length);\n      //filter out duplicates\n      List tmpList = new ArrayList(queryTerms.length);\n      List tmpFreqs = new ArrayList(queryTerms.length);\n      int j = 0;\n      for (int i = 0; i < queryTerms.length; i++) {\n        String term = queryTerms[i];\n        Integer position = (Integer)tmpSet.get(term);\n        if (position == null) {\n          tmpSet.put(term, Integer.valueOf(j++));\n          tmpList.add(term);\n          tmpFreqs.add(Integer.valueOf(1));\n        }       \n        else {\n          Integer integer = (Integer)tmpFreqs.get(position.intValue());\n          tmpFreqs.set(position.intValue(), Integer.valueOf(integer.intValue() + 1));          \n        }\n      }\n      terms = (String[])tmpList.toArray(terms);\n      //termFreqs = (int[])tmpFreqs.toArray(termFreqs);\n      termFreqs = new int[tmpFreqs.size()];\n      int i = 0;\n      for (Iterator iter = tmpFreqs.iterator(); iter.hasNext();) {\n        Integer integer = (Integer) iter.next();\n        termFreqs[i++] = integer.intValue();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/QueryTermVector#processTerms(String[]).mjava","pathOld":"src/java/org/apache/lucene/search/QueryTermVector#processTerms(String[]).mjava","sourceNew":"  private void processTerms(String[] queryTerms) {\n    if (queryTerms != null) {\n      Arrays.sort(queryTerms);\n      Map<String,Integer> tmpSet = new HashMap<String,Integer>(queryTerms.length);\n      //filter out duplicates\n      List<String> tmpList = new ArrayList<String>(queryTerms.length);\n      List<Integer> tmpFreqs = new ArrayList<Integer>(queryTerms.length);\n      int j = 0;\n      for (int i = 0; i < queryTerms.length; i++) {\n        String term = queryTerms[i];\n        Integer position = tmpSet.get(term);\n        if (position == null) {\n          tmpSet.put(term, Integer.valueOf(j++));\n          tmpList.add(term);\n          tmpFreqs.add(Integer.valueOf(1));\n        }       \n        else {\n          Integer integer = tmpFreqs.get(position.intValue());\n          tmpFreqs.set(position.intValue(), Integer.valueOf(integer.intValue() + 1));          \n        }\n      }\n      terms = tmpList.toArray(terms);\n      //termFreqs = (int[])tmpFreqs.toArray(termFreqs);\n      termFreqs = new int[tmpFreqs.size()];\n      int i = 0;\n      for (final Integer integer : tmpFreqs) {\n        termFreqs[i++] = integer.intValue();\n      }\n    }\n  }\n\n","sourceOld":"  private void processTerms(String[] queryTerms) {\n    if (queryTerms != null) {\n      Arrays.sort(queryTerms);\n      Map<String,Integer> tmpSet = new HashMap<String,Integer>(queryTerms.length);\n      //filter out duplicates\n      List<String> tmpList = new ArrayList<String>(queryTerms.length);\n      List<Integer> tmpFreqs = new ArrayList<Integer>(queryTerms.length);\n      int j = 0;\n      for (int i = 0; i < queryTerms.length; i++) {\n        String term = queryTerms[i];\n        Integer position = tmpSet.get(term);\n        if (position == null) {\n          tmpSet.put(term, Integer.valueOf(j++));\n          tmpList.add(term);\n          tmpFreqs.add(Integer.valueOf(1));\n        }       \n        else {\n          Integer integer = tmpFreqs.get(position.intValue());\n          tmpFreqs.set(position.intValue(), Integer.valueOf(integer.intValue() + 1));          \n        }\n      }\n      terms = tmpList.toArray(terms);\n      //termFreqs = (int[])tmpFreqs.toArray(termFreqs);\n      termFreqs = new int[tmpFreqs.size()];\n      int i = 0;\n      for (final Integer integer : tmpFreqs) {\n        termFreqs[i++] = integer.intValue();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6bcde5e3f23911110baa101ed062b544162825b5":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"ef82ff03e4016c705811b2658e81471a645c0e49":["6bcde5e3f23911110baa101ed062b544162825b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ef82ff03e4016c705811b2658e81471a645c0e49"]},"commit2Childs":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["6bcde5e3f23911110baa101ed062b544162825b5"],"6bcde5e3f23911110baa101ed062b544162825b5":["ef82ff03e4016c705811b2658e81471a645c0e49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"ef82ff03e4016c705811b2658e81471a645c0e49":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}