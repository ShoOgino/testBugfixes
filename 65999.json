{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#fixResultNode(FacetResultNode,ScoredDocIDs).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#fixResultNode(FacetResultNode,ScoredDocIDs).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#fixResultNode(FacetResultNode,ScoredDocIDs).mjava","sourceNew":"  /**\n   * Fix result node count, and, recursively, fix all its children\n   * \n   * @param facetResNode\n   *          result node to be fixed\n   * @param docIds\n   *          docids in effect\n   * @throws IOException\n   */\n  private void fixResultNode(FacetResultNode facetResNode, ScoredDocIDs docIds)\n      throws IOException {\n    recount(facetResNode, docIds);\n    for (FacetResultNode frn : facetResNode.getSubResults()) {\n      fixResultNode(frn, docIds);\n    }\n  }\n\n","sourceOld":"  /**\n   * Fix result node count, and, recursively, fix all its children\n   * \n   * @param facetResNode\n   *          result node to be fixed\n   * @param docIds\n   *          docids in effect\n   * @throws IOException\n   */\n  private void fixResultNode(FacetResultNode facetResNode, ScoredDocIDs docIds)\n      throws IOException {\n    recount(facetResNode, docIds);\n    for (FacetResultNode frn : facetResNode.getSubResults()) {\n      fixResultNode(frn, docIds);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#fixResultNode(FacetResultNode,ScoredDocIDs).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#fixResultNode(FacetResultNode,ScoredDocIDs).mjava","sourceNew":"  /**\n   * Fix result node count, and, recursively, fix all its children\n   * \n   * @param facetResNode\n   *          result node to be fixed\n   * @param docIds\n   *          docids in effect\n   * @throws IOException If there is a low-level I/O error.\n   */\n  private void fixResultNode(FacetResultNode facetResNode, ScoredDocIDs docIds)\n      throws IOException {\n    recount(facetResNode, docIds);\n    for (FacetResultNode frn : facetResNode.getSubResults()) {\n      fixResultNode(frn, docIds);\n    }\n  }\n\n","sourceOld":"  /**\n   * Fix result node count, and, recursively, fix all its children\n   * \n   * @param facetResNode\n   *          result node to be fixed\n   * @param docIds\n   *          docids in effect\n   * @throws IOException\n   */\n  private void fixResultNode(FacetResultNode facetResNode, ScoredDocIDs docIds)\n      throws IOException {\n    recount(facetResNode, docIds);\n    for (FacetResultNode frn : facetResNode.getSubResults()) {\n      fixResultNode(frn, docIds);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"811cdb4a80352766eb0c762e48972707a924e5cd","date":1358767313,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#fixResultNode(FacetResultNode,ScoredDocIDs).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#fixResultNode(FacetResultNode,ScoredDocIDs).mjava","sourceNew":"  /**\n   * Fix result node count, and, recursively, fix all its children\n   * \n   * @param facetResNode\n   *          result node to be fixed\n   * @param docIds\n   *          docids in effect\n   * @throws IOException If there is a low-level I/O error.\n   */\n  private void fixResultNode(FacetResultNode facetResNode, ScoredDocIDs docIds) throws IOException {\n    recount(facetResNode, docIds);\n    for (FacetResultNode frn : facetResNode.subResults) {\n      fixResultNode(frn, docIds);\n    }\n  }\n\n","sourceOld":"  /**\n   * Fix result node count, and, recursively, fix all its children\n   * \n   * @param facetResNode\n   *          result node to be fixed\n   * @param docIds\n   *          docids in effect\n   * @throws IOException If there is a low-level I/O error.\n   */\n  private void fixResultNode(FacetResultNode facetResNode, ScoredDocIDs docIds)\n      throws IOException {\n    recount(facetResNode, docIds);\n    for (FacetResultNode frn : facetResNode.getSubResults()) {\n      fixResultNode(frn, docIds);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#fixResultNode(FacetResultNode,ScoredDocIDs).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#fixResultNode(FacetResultNode,ScoredDocIDs).mjava","sourceNew":"  /**\n   * Fix result node count, and, recursively, fix all its children\n   * \n   * @param facetResNode\n   *          result node to be fixed\n   * @param docIds\n   *          docids in effect\n   * @throws IOException If there is a low-level I/O error.\n   */\n  private void fixResultNode(FacetResultNode facetResNode, ScoredDocIDs docIds) throws IOException {\n    recount(facetResNode, docIds);\n    for (FacetResultNode frn : facetResNode.subResults) {\n      fixResultNode(frn, docIds);\n    }\n  }\n\n","sourceOld":"  /**\n   * Fix result node count, and, recursively, fix all its children\n   * \n   * @param facetResNode\n   *          result node to be fixed\n   * @param docIds\n   *          docids in effect\n   * @throws IOException If there is a low-level I/O error.\n   */\n  private void fixResultNode(FacetResultNode facetResNode, ScoredDocIDs docIds)\n      throws IOException {\n    recount(facetResNode, docIds);\n    for (FacetResultNode frn : facetResNode.getSubResults()) {\n      fixResultNode(frn, docIds);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sampling/TakmiSampleFixer#fixResultNode(FacetResultNode,ScoredDocIDs).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#fixResultNode(FacetResultNode,ScoredDocIDs).mjava","sourceNew":"  /**\n   * Fix result node count, and, recursively, fix all its children\n   * \n   * @param facetResNode\n   *          result node to be fixed\n   * @param docIds\n   *          docids in effect\n   * @throws IOException If there is a low-level I/O error.\n   */\n  private void fixResultNode(FacetResultNode facetResNode, ScoredDocIDs docIds) throws IOException {\n    recount(facetResNode, docIds);\n    for (FacetResultNode frn : facetResNode.subResults) {\n      fixResultNode(frn, docIds);\n    }\n  }\n\n","sourceOld":"  /**\n   * Fix result node count, and, recursively, fix all its children\n   * \n   * @param facetResNode\n   *          result node to be fixed\n   * @param docIds\n   *          docids in effect\n   * @throws IOException If there is a low-level I/O error.\n   */\n  private void fixResultNode(FacetResultNode facetResNode, ScoredDocIDs docIds) throws IOException {\n    recount(facetResNode, docIds);\n    for (FacetResultNode frn : facetResNode.subResults) {\n      fixResultNode(frn, docIds);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"607428da722dcb3e86bbd11c63de8986e6275c36":["811cdb4a80352766eb0c762e48972707a924e5cd"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07155cdd910937cdf6877e48884d5782845c8b8b":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","811cdb4a80352766eb0c762e48972707a924e5cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"],"811cdb4a80352766eb0c762e48972707a924e5cd":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["07155cdd910937cdf6877e48884d5782845c8b8b","811cdb4a80352766eb0c762e48972707a924e5cd"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"07155cdd910937cdf6877e48884d5782845c8b8b":[],"811cdb4a80352766eb0c762e48972707a924e5cd":["607428da722dcb3e86bbd11c63de8986e6275c36","07155cdd910937cdf6877e48884d5782845c8b8b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["07155cdd910937cdf6877e48884d5782845c8b8b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}