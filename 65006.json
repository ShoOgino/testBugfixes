{"path":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testDetectMutatedQueries().mjava","commits":[{"id":"b97b669a6c8dac1437c3856f4133d83c986515ae","date":1427703853,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testDetectMutatedQueries().mjava","pathOld":"/dev/null","sourceNew":"  public void testDetectMutatedQueries() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n\n    // size of 1 so that 2nd query evicts from the cache\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 10000);\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n    \n    BadQuery query = new BadQuery();\n    searcher.count(query);\n    query.i[0] += 1; // change the hashCode!\n    try {\n      // trigger an eviction\n      searcher.count(new MatchAllDocsQuery());\n      fail();\n    } catch (ConcurrentModificationException e) {\n      // expected\n    }\n    \n    IOUtils.close(w, reader, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["631e24c389c59f74b6d125a2a4cb909d6fbfa356"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testDetectMutatedQueries().mjava","pathOld":"/dev/null","sourceNew":"  public void testDetectMutatedQueries() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n\n    // size of 1 so that 2nd query evicts from the cache\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 10000);\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n    \n    BadQuery query = new BadQuery();\n    searcher.count(query);\n    query.i[0] += 1; // change the hashCode!\n    try {\n      // trigger an eviction\n      searcher.count(new MatchAllDocsQuery());\n      fail();\n    } catch (ConcurrentModificationException e) {\n      // expected\n    }\n    \n    IOUtils.close(w, reader, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bdc4f66ee357f981ad50b74262cb1a277f9a0ebe","date":1427848161,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testDetectMutatedQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testDetectMutatedQueries().mjava","sourceNew":"  public void testDetectMutatedQueries() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n\n    // size of 1 so that 2nd query evicts from the cache\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 10000);\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n    \n    BadQuery query = new BadQuery();\n    searcher.count(query);\n    query.i[0] += 1; // change the hashCode!\n    \n    try {\n      // trigger an eviction\n      searcher.count(new MatchAllDocsQuery());\n      fail();\n    } catch (ConcurrentModificationException e) {\n      // expected\n    } catch (RuntimeException e) {\n      // expected: wrapped when executor is in use\n      Throwable cause = e.getCause();\n      assertTrue(cause instanceof ExecutionException);\n      assertTrue(cause.getCause() instanceof ConcurrentModificationException);\n    }\n    \n    IOUtils.close(w, reader, dir);\n  }\n\n","sourceOld":"  public void testDetectMutatedQueries() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n\n    // size of 1 so that 2nd query evicts from the cache\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 10000);\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n    \n    BadQuery query = new BadQuery();\n    searcher.count(query);\n    query.i[0] += 1; // change the hashCode!\n    try {\n      // trigger an eviction\n      searcher.count(new MatchAllDocsQuery());\n      fail();\n    } catch (ConcurrentModificationException e) {\n      // expected\n    }\n    \n    IOUtils.close(w, reader, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c576bf71df117a2003cac1787df5a9a5de44eb6","date":1427849700,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testDetectMutatedQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testDetectMutatedQueries().mjava","sourceNew":"  public void testDetectMutatedQueries() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n\n    // size of 1 so that 2nd query evicts from the cache\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 10000);\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n    \n    BadQuery query = new BadQuery();\n    searcher.count(query);\n    query.i[0] += 1; // change the hashCode!\n    \n    try {\n      // trigger an eviction\n      searcher.count(new MatchAllDocsQuery());\n      fail();\n    } catch (ConcurrentModificationException e) {\n      // expected\n    } catch (RuntimeException e) {\n      // expected: wrapped when executor is in use\n      Throwable cause = e.getCause();\n      assertTrue(cause instanceof ExecutionException);\n      assertTrue(cause.getCause() instanceof ConcurrentModificationException);\n    }\n    \n    IOUtils.close(w, reader, dir);\n  }\n\n","sourceOld":"  public void testDetectMutatedQueries() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n\n    // size of 1 so that 2nd query evicts from the cache\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 10000);\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n    \n    BadQuery query = new BadQuery();\n    searcher.count(query);\n    query.i[0] += 1; // change the hashCode!\n    try {\n      // trigger an eviction\n      searcher.count(new MatchAllDocsQuery());\n      fail();\n    } catch (ConcurrentModificationException e) {\n      // expected\n    }\n    \n    IOUtils.close(w, reader, dir);\n  }\n\n","bugFix":null,"bugIntro":["631e24c389c59f74b6d125a2a4cb909d6fbfa356"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f0a65e308c1642d1ffb120ffae140f08362e92a7","date":1441197397,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testDetectMutatedQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testDetectMutatedQueries().mjava","sourceNew":"  public void testDetectMutatedQueries() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n\n    // size of 1 so that 2nd query evicts from the cache\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 10000);\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n    \n    BadQuery query = new BadQuery();\n    searcher.count(query);\n    query.i[0] += 1; // change the hashCode!\n    \n    try {\n      // trigger an eviction\n      searcher.search(new MatchAllDocsQuery(), new TotalHitCountCollector());\n      fail();\n    } catch (ConcurrentModificationException e) {\n      // expected\n    } catch (RuntimeException e) {\n      // expected: wrapped when executor is in use\n      Throwable cause = e.getCause();\n      assertTrue(cause instanceof ExecutionException);\n      assertTrue(cause.getCause() instanceof ConcurrentModificationException);\n    }\n    \n    IOUtils.close(w, reader, dir);\n  }\n\n","sourceOld":"  public void testDetectMutatedQueries() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n\n    // size of 1 so that 2nd query evicts from the cache\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 10000);\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n    \n    BadQuery query = new BadQuery();\n    searcher.count(query);\n    query.i[0] += 1; // change the hashCode!\n    \n    try {\n      // trigger an eviction\n      searcher.count(new MatchAllDocsQuery());\n      fail();\n    } catch (ConcurrentModificationException e) {\n      // expected\n    } catch (RuntimeException e) {\n      // expected: wrapped when executor is in use\n      Throwable cause = e.getCause();\n      assertTrue(cause instanceof ExecutionException);\n      assertTrue(cause.getCause() instanceof ConcurrentModificationException);\n    }\n    \n    IOUtils.close(w, reader, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"631e24c389c59f74b6d125a2a4cb909d6fbfa356","date":1445957240,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testDetectMutatedQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testDetectMutatedQueries().mjava","sourceNew":"  public void testDetectMutatedQueries() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n\n    // size of 1 so that 2nd query evicts from the cache\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 10000);\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    BadQuery query = new BadQuery();\n    searcher.count(query);\n    query.i[0] += 1; // change the hashCode!\n\n    try {\n      // trigger an eviction\n      searcher.search(new MatchAllDocsQuery(), new TotalHitCountCollector());\n      fail();\n    } catch (ConcurrentModificationException e) {\n      // expected\n    } catch (RuntimeException e) {\n      // expected: wrapped when executor is in use\n      Throwable cause = e.getCause();\n      assertTrue(cause instanceof ExecutionException);\n      assertTrue(cause.getCause() instanceof ConcurrentModificationException);\n    }\n\n    IOUtils.close(w, reader, dir);\n  }\n\n","sourceOld":"  public void testDetectMutatedQueries() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n\n    // size of 1 so that 2nd query evicts from the cache\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 10000);\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n    \n    BadQuery query = new BadQuery();\n    searcher.count(query);\n    query.i[0] += 1; // change the hashCode!\n    \n    try {\n      // trigger an eviction\n      searcher.search(new MatchAllDocsQuery(), new TotalHitCountCollector());\n      fail();\n    } catch (ConcurrentModificationException e) {\n      // expected\n    } catch (RuntimeException e) {\n      // expected: wrapped when executor is in use\n      Throwable cause = e.getCause();\n      assertTrue(cause instanceof ExecutionException);\n      assertTrue(cause.getCause() instanceof ConcurrentModificationException);\n    }\n    \n    IOUtils.close(w, reader, dir);\n  }\n\n","bugFix":["6c576bf71df117a2003cac1787df5a9a5de44eb6","b97b669a6c8dac1437c3856f4133d83c986515ae"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aac61ee5b4492f174e60bd54939aba9539906edf","date":1461245473,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testDetectMutatedQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testDetectMutatedQueries().mjava","sourceNew":"  public void testDetectMutatedQueries() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n\n    // size of 1 so that 2nd query evicts from the cache\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 10000, context -> true);\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    BadQuery query = new BadQuery();\n    searcher.count(query);\n    query.i[0] += 1; // change the hashCode!\n\n    try {\n      // trigger an eviction\n      searcher.search(new MatchAllDocsQuery(), new TotalHitCountCollector());\n      fail();\n    } catch (ConcurrentModificationException e) {\n      // expected\n    } catch (RuntimeException e) {\n      // expected: wrapped when executor is in use\n      Throwable cause = e.getCause();\n      assertTrue(cause instanceof ExecutionException);\n      assertTrue(cause.getCause() instanceof ConcurrentModificationException);\n    }\n\n    IOUtils.close(w, reader, dir);\n  }\n\n","sourceOld":"  public void testDetectMutatedQueries() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n\n    // size of 1 so that 2nd query evicts from the cache\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 10000);\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    BadQuery query = new BadQuery();\n    searcher.count(query);\n    query.i[0] += 1; // change the hashCode!\n\n    try {\n      // trigger an eviction\n      searcher.search(new MatchAllDocsQuery(), new TotalHitCountCollector());\n      fail();\n    } catch (ConcurrentModificationException e) {\n      // expected\n    } catch (RuntimeException e) {\n      // expected: wrapped when executor is in use\n      Throwable cause = e.getCause();\n      assertTrue(cause instanceof ExecutionException);\n      assertTrue(cause.getCause() instanceof ConcurrentModificationException);\n    }\n\n    IOUtils.close(w, reader, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b9d3e8d3cc46a280b63ce92478848a10a6f10ae","date":1482779706,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testDetectMutatedQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testDetectMutatedQueries().mjava","sourceNew":"  public void testDetectMutatedQueries() throws IOException {\n    LuceneTestCase.assumeFalse(\"LUCENE-7604: For some unknown reason the non-constant BadQuery#hashCode() does not trigger ConcurrentModificationException on Java 9 b150\",\n        Constants.JRE_IS_MINIMUM_JAVA9);\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n\n    // size of 1 so that 2nd query evicts from the cache\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 10000, context -> true);\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    BadQuery query = new BadQuery();\n    searcher.count(query);\n    query.i[0] += 1; // change the hashCode!\n\n    try {\n      // trigger an eviction\n      searcher.search(new MatchAllDocsQuery(), new TotalHitCountCollector());\n      fail();\n    } catch (ConcurrentModificationException e) {\n      // expected\n    } catch (RuntimeException e) {\n      // expected: wrapped when executor is in use\n      Throwable cause = e.getCause();\n      assertTrue(cause instanceof ExecutionException);\n      assertTrue(cause.getCause() instanceof ConcurrentModificationException);\n    }\n\n    IOUtils.close(w, reader, dir);\n  }\n\n","sourceOld":"  public void testDetectMutatedQueries() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n\n    // size of 1 so that 2nd query evicts from the cache\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 10000, context -> true);\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    BadQuery query = new BadQuery();\n    searcher.count(query);\n    query.i[0] += 1; // change the hashCode!\n\n    try {\n      // trigger an eviction\n      searcher.search(new MatchAllDocsQuery(), new TotalHitCountCollector());\n      fail();\n    } catch (ConcurrentModificationException e) {\n      // expected\n    } catch (RuntimeException e) {\n      // expected: wrapped when executor is in use\n      Throwable cause = e.getCause();\n      assertTrue(cause instanceof ExecutionException);\n      assertTrue(cause.getCause() instanceof ConcurrentModificationException);\n    }\n\n    IOUtils.close(w, reader, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testDetectMutatedQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testDetectMutatedQueries().mjava","sourceNew":"  public void testDetectMutatedQueries() throws IOException {\n    LuceneTestCase.assumeFalse(\"LUCENE-7604: For some unknown reason the non-constant BadQuery#hashCode() does not trigger ConcurrentModificationException on Java 9 b150\",\n        Constants.JRE_IS_MINIMUM_JAVA9);\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n\n    // size of 1 so that 2nd query evicts from the cache\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 10000, context -> true);\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    BadQuery query = new BadQuery();\n    searcher.count(query);\n    query.i[0] += 1; // change the hashCode!\n\n    try {\n      // trigger an eviction\n      searcher.search(new MatchAllDocsQuery(), new TotalHitCountCollector());\n      fail();\n    } catch (ConcurrentModificationException e) {\n      // expected\n    } catch (RuntimeException e) {\n      // expected: wrapped when executor is in use\n      Throwable cause = e.getCause();\n      assertTrue(cause instanceof ExecutionException);\n      assertTrue(cause.getCause() instanceof ConcurrentModificationException);\n    }\n\n    IOUtils.close(w, reader, dir);\n  }\n\n","sourceOld":"  public void testDetectMutatedQueries() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n\n    // size of 1 so that 2nd query evicts from the cache\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 10000, context -> true);\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    BadQuery query = new BadQuery();\n    searcher.count(query);\n    query.i[0] += 1; // change the hashCode!\n\n    try {\n      // trigger an eviction\n      searcher.search(new MatchAllDocsQuery(), new TotalHitCountCollector());\n      fail();\n    } catch (ConcurrentModificationException e) {\n      // expected\n    } catch (RuntimeException e) {\n      // expected: wrapped when executor is in use\n      Throwable cause = e.getCause();\n      assertTrue(cause instanceof ExecutionException);\n      assertTrue(cause.getCause() instanceof ConcurrentModificationException);\n    }\n\n    IOUtils.close(w, reader, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7732a106554be0db3e03ac5211e46f6e0c285b8","date":1511975378,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testDetectMutatedQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testDetectMutatedQueries().mjava","sourceNew":"  public void testDetectMutatedQueries() throws IOException {\n    LuceneTestCase.assumeFalse(\"LUCENE-7604: For some unknown reason the non-constant BadQuery#hashCode() does not trigger ConcurrentModificationException on Java 9 b150\",\n        Constants.JRE_IS_MINIMUM_JAVA9);\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n\n    // size of 1 so that 2nd query evicts from the cache\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 10000, context -> true, Float.POSITIVE_INFINITY);\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    BadQuery query = new BadQuery();\n    searcher.count(query);\n    query.i[0] += 1; // change the hashCode!\n\n    try {\n      // trigger an eviction\n      searcher.search(new MatchAllDocsQuery(), new TotalHitCountCollector());\n      fail();\n    } catch (ConcurrentModificationException e) {\n      // expected\n    } catch (RuntimeException e) {\n      // expected: wrapped when executor is in use\n      Throwable cause = e.getCause();\n      assertTrue(cause instanceof ExecutionException);\n      assertTrue(cause.getCause() instanceof ConcurrentModificationException);\n    }\n\n    IOUtils.close(w, reader, dir);\n  }\n\n","sourceOld":"  public void testDetectMutatedQueries() throws IOException {\n    LuceneTestCase.assumeFalse(\"LUCENE-7604: For some unknown reason the non-constant BadQuery#hashCode() does not trigger ConcurrentModificationException on Java 9 b150\",\n        Constants.JRE_IS_MINIMUM_JAVA9);\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n\n    // size of 1 so that 2nd query evicts from the cache\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 10000, context -> true);\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    BadQuery query = new BadQuery();\n    searcher.count(query);\n    query.i[0] += 1; // change the hashCode!\n\n    try {\n      // trigger an eviction\n      searcher.search(new MatchAllDocsQuery(), new TotalHitCountCollector());\n      fail();\n    } catch (ConcurrentModificationException e) {\n      // expected\n    } catch (RuntimeException e) {\n      // expected: wrapped when executor is in use\n      Throwable cause = e.getCause();\n      assertTrue(cause instanceof ExecutionException);\n      assertTrue(cause.getCause() instanceof ConcurrentModificationException);\n    }\n\n    IOUtils.close(w, reader, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testDetectMutatedQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testDetectMutatedQueries().mjava","sourceNew":"  public void testDetectMutatedQueries() throws IOException {\n    LuceneTestCase.assumeFalse(\"LUCENE-7604: For some unknown reason the non-constant BadQuery#hashCode() does not trigger ConcurrentModificationException on Java 9 b150\",\n        Constants.JRE_IS_MINIMUM_JAVA9);\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n\n    // size of 1 so that 2nd query evicts from the cache\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 10000, context -> true, Float.POSITIVE_INFINITY);\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    BadQuery query = new BadQuery();\n    searcher.count(query);\n    query.i[0] += 1; // change the hashCode!\n\n    try {\n      // trigger an eviction\n      searcher.search(new MatchAllDocsQuery(), new TotalHitCountCollector());\n      fail();\n    } catch (ConcurrentModificationException e) {\n      // expected\n    } catch (RuntimeException e) {\n      // expected: wrapped when executor is in use\n      Throwable cause = e.getCause();\n      assertTrue(cause instanceof ExecutionException);\n      assertTrue(cause.getCause() instanceof ConcurrentModificationException);\n    }\n\n    IOUtils.close(w, reader, dir);\n  }\n\n","sourceOld":"  public void testDetectMutatedQueries() throws IOException {\n    LuceneTestCase.assumeFalse(\"LUCENE-7604: For some unknown reason the non-constant BadQuery#hashCode() does not trigger ConcurrentModificationException on Java 9 b150\",\n        Constants.JRE_IS_MINIMUM_JAVA9);\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n\n    // size of 1 so that 2nd query evicts from the cache\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 10000, context -> true);\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    BadQuery query = new BadQuery();\n    searcher.count(query);\n    query.i[0] += 1; // change the hashCode!\n\n    try {\n      // trigger an eviction\n      searcher.search(new MatchAllDocsQuery(), new TotalHitCountCollector());\n      fail();\n    } catch (ConcurrentModificationException e) {\n      // expected\n    } catch (RuntimeException e) {\n      // expected: wrapped when executor is in use\n      Throwable cause = e.getCause();\n      assertTrue(cause instanceof ExecutionException);\n      assertTrue(cause.getCause() instanceof ConcurrentModificationException);\n    }\n\n    IOUtils.close(w, reader, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"789fb338d3c53b4478938723d60f6623e764ca38","date":1521535944,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testDetectMutatedQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testDetectMutatedQueries().mjava","sourceNew":"  public void testDetectMutatedQueries() throws IOException {\n    LuceneTestCase.assumeFalse(\"LUCENE-7604: For some unknown reason the non-constant BadQuery#hashCode() does not trigger ConcurrentModificationException on Java 9 b150\",\n        Constants.JRE_IS_MINIMUM_JAVA9);\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n\n    // size of 1 so that 2nd query evicts from the cache\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 10000, context -> true);\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    BadQuery query = new BadQuery();\n    searcher.count(query);\n    query.i[0] += 1; // change the hashCode!\n\n    try {\n      // trigger an eviction\n      searcher.search(new MatchAllDocsQuery(), new TotalHitCountCollector());\n      fail();\n    } catch (ConcurrentModificationException e) {\n      // expected\n    } catch (RuntimeException e) {\n      // expected: wrapped when executor is in use\n      Throwable cause = e.getCause();\n      assertTrue(cause instanceof ExecutionException);\n      assertTrue(cause.getCause() instanceof ConcurrentModificationException);\n    }\n\n    IOUtils.close(w, reader, dir);\n  }\n\n","sourceOld":"  public void testDetectMutatedQueries() throws IOException {\n    LuceneTestCase.assumeFalse(\"LUCENE-7604: For some unknown reason the non-constant BadQuery#hashCode() does not trigger ConcurrentModificationException on Java 9 b150\",\n        Constants.JRE_IS_MINIMUM_JAVA9);\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n\n    // size of 1 so that 2nd query evicts from the cache\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 10000, context -> true, Float.POSITIVE_INFINITY);\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    BadQuery query = new BadQuery();\n    searcher.count(query);\n    query.i[0] += 1; // change the hashCode!\n\n    try {\n      // trigger an eviction\n      searcher.search(new MatchAllDocsQuery(), new TotalHitCountCollector());\n      fail();\n    } catch (ConcurrentModificationException e) {\n      // expected\n    } catch (RuntimeException e) {\n      // expected: wrapped when executor is in use\n      Throwable cause = e.getCause();\n      assertTrue(cause instanceof ExecutionException);\n      assertTrue(cause.getCause() instanceof ConcurrentModificationException);\n    }\n\n    IOUtils.close(w, reader, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","date":1521731438,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testDetectMutatedQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testDetectMutatedQueries().mjava","sourceNew":"  public void testDetectMutatedQueries() throws IOException {\n    LuceneTestCase.assumeFalse(\"LUCENE-7604: For some unknown reason the non-constant BadQuery#hashCode() does not trigger ConcurrentModificationException on Java 9 b150\",\n        Constants.JRE_IS_MINIMUM_JAVA9);\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n\n    // size of 1 so that 2nd query evicts from the cache\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 10000, context -> true);\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    BadQuery query = new BadQuery();\n    searcher.count(query);\n    query.i[0] += 1; // change the hashCode!\n\n    try {\n      // trigger an eviction\n      searcher.search(new MatchAllDocsQuery(), new TotalHitCountCollector());\n      fail();\n    } catch (ConcurrentModificationException e) {\n      // expected\n    } catch (RuntimeException e) {\n      // expected: wrapped when executor is in use\n      Throwable cause = e.getCause();\n      assertTrue(cause instanceof ExecutionException);\n      assertTrue(cause.getCause() instanceof ConcurrentModificationException);\n    }\n\n    IOUtils.close(w, reader, dir);\n  }\n\n","sourceOld":"  public void testDetectMutatedQueries() throws IOException {\n    LuceneTestCase.assumeFalse(\"LUCENE-7604: For some unknown reason the non-constant BadQuery#hashCode() does not trigger ConcurrentModificationException on Java 9 b150\",\n        Constants.JRE_IS_MINIMUM_JAVA9);\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n\n    // size of 1 so that 2nd query evicts from the cache\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 10000, context -> true, Float.POSITIVE_INFINITY);\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    BadQuery query = new BadQuery();\n    searcher.count(query);\n    query.i[0] += 1; // change the hashCode!\n\n    try {\n      // trigger an eviction\n      searcher.search(new MatchAllDocsQuery(), new TotalHitCountCollector());\n      fail();\n    } catch (ConcurrentModificationException e) {\n      // expected\n    } catch (RuntimeException e) {\n      // expected: wrapped when executor is in use\n      Throwable cause = e.getCause();\n      assertTrue(cause instanceof ExecutionException);\n      assertTrue(cause.getCause() instanceof ConcurrentModificationException);\n    }\n\n    IOUtils.close(w, reader, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c9d00c591703058371b3dc36f4957a6f24ca302","date":1527233410,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testDetectMutatedQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testDetectMutatedQueries().mjava","sourceNew":"  public void testDetectMutatedQueries() throws IOException {\n    LuceneTestCase.assumeFalse(\"LUCENE-7604: For some unknown reason the non-constant BadQuery#hashCode() does not trigger ConcurrentModificationException on Java 9 b150\",\n        Constants.JRE_IS_MINIMUM_JAVA9);\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n\n    // size of 1 so that 2nd query evicts from the cache\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 10000, context -> true);\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    BadQuery query = new BadQuery();\n    searcher.count(query);\n    query.i[0] += 1; // change the hashCode!\n\n    try {\n      // trigger an eviction\n      searcher.search(new MatchAllDocsQuery(), new TotalHitCountCollector());\n      fail();\n    } catch (ConcurrentModificationException e) {\n      // expected\n    } catch (RuntimeException e) {\n      // expected: wrapped when executor is in use\n      Throwable cause = e.getCause();\n      assertTrue(cause instanceof ExecutionException);\n      assertTrue(cause.getCause() instanceof ConcurrentModificationException);\n    }\n\n    IOUtils.close(w, reader, dir);\n  }\n\n","sourceOld":"  public void testDetectMutatedQueries() throws IOException {\n    LuceneTestCase.assumeFalse(\"LUCENE-7604: For some unknown reason the non-constant BadQuery#hashCode() does not trigger ConcurrentModificationException on Java 9 b150\",\n        Constants.JRE_IS_MINIMUM_JAVA9);\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n\n    // size of 1 so that 2nd query evicts from the cache\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 10000, context -> true);\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    BadQuery query = new BadQuery();\n    searcher.count(query);\n    query.i[0] += 1; // change the hashCode!\n\n    try {\n      // trigger an eviction\n      searcher.search(new MatchAllDocsQuery(), new TotalHitCountCollector());\n      fail();\n    } catch (ConcurrentModificationException e) {\n      // expected\n    } catch (RuntimeException e) {\n      // expected: wrapped when executor is in use\n      Throwable cause = e.getCause();\n      assertTrue(cause instanceof ExecutionException);\n      assertTrue(cause.getCause() instanceof ConcurrentModificationException);\n    }\n\n    IOUtils.close(w, reader, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5754bd6f04f13b67e9575f8b226a0303c31c7d5","date":1573506453,"type":3,"author":"ginger","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testDetectMutatedQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testDetectMutatedQueries().mjava","sourceNew":"  public void testDetectMutatedQueries() throws IOException {\n    LuceneTestCase.assumeFalse(\"LUCENE-7604: For some unknown reason the non-constant BadQuery#hashCode() does not trigger ConcurrentModificationException on Java 9 b150\",\n        Constants.JRE_IS_MINIMUM_JAVA9);\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n\n    // size of 1 so that 2nd query evicts from the cache\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 10000, context -> true, Float.POSITIVE_INFINITY);\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    BadQuery query = new BadQuery();\n    searcher.count(query);\n    query.i[0] += 1; // change the hashCode!\n\n    try {\n      // trigger an eviction\n      searcher.search(new MatchAllDocsQuery(), new TotalHitCountCollector());\n      fail();\n    } catch (ConcurrentModificationException e) {\n      // expected\n    } catch (RuntimeException e) {\n      // expected: wrapped when executor is in use\n      Throwable cause = e.getCause();\n      assertTrue(cause instanceof ExecutionException);\n      assertTrue(cause.getCause() instanceof ConcurrentModificationException);\n    }\n\n    IOUtils.close(w, reader, dir);\n  }\n\n","sourceOld":"  public void testDetectMutatedQueries() throws IOException {\n    LuceneTestCase.assumeFalse(\"LUCENE-7604: For some unknown reason the non-constant BadQuery#hashCode() does not trigger ConcurrentModificationException on Java 9 b150\",\n        Constants.JRE_IS_MINIMUM_JAVA9);\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n\n    // size of 1 so that 2nd query evicts from the cache\n    final LRUQueryCache queryCache = new LRUQueryCache(1, 10000, context -> true);\n    final IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(ALWAYS_CACHE);\n\n    BadQuery query = new BadQuery();\n    searcher.count(query);\n    query.i[0] += 1; // change the hashCode!\n\n    try {\n      // trigger an eviction\n      searcher.search(new MatchAllDocsQuery(), new TotalHitCountCollector());\n      fail();\n    } catch (ConcurrentModificationException e) {\n      // expected\n    } catch (RuntimeException e) {\n      // expected: wrapped when executor is in use\n      Throwable cause = e.getCause();\n      assertTrue(cause instanceof ExecutionException);\n      assertTrue(cause.getCause() instanceof ConcurrentModificationException);\n    }\n\n    IOUtils.close(w, reader, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["1aad05eeff7818b0833c02ac6b743aa72054963b","789fb338d3c53b4478938723d60f6623e764ca38"],"aac61ee5b4492f174e60bd54939aba9539906edf":["631e24c389c59f74b6d125a2a4cb909d6fbfa356"],"6c9d00c591703058371b3dc36f4957a6f24ca302":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"6c576bf71df117a2003cac1787df5a9a5de44eb6":["b97b669a6c8dac1437c3856f4133d83c986515ae"],"b5754bd6f04f13b67e9575f8b226a0303c31c7d5":["6c9d00c591703058371b3dc36f4957a6f24ca302"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["aac61ee5b4492f174e60bd54939aba9539906edf","2b9d3e8d3cc46a280b63ce92478848a10a6f10ae"],"c7732a106554be0db3e03ac5211e46f6e0c285b8":["2b9d3e8d3cc46a280b63ce92478848a10a6f10ae"],"bdc4f66ee357f981ad50b74262cb1a277f9a0ebe":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["2b9d3e8d3cc46a280b63ce92478848a10a6f10ae","c7732a106554be0db3e03ac5211e46f6e0c285b8"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b97b669a6c8dac1437c3856f4133d83c986515ae"],"f0a65e308c1642d1ffb120ffae140f08362e92a7":["6c576bf71df117a2003cac1787df5a9a5de44eb6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"789fb338d3c53b4478938723d60f6623e764ca38":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"631e24c389c59f74b6d125a2a4cb909d6fbfa356":["f0a65e308c1642d1ffb120ffae140f08362e92a7"],"2b9d3e8d3cc46a280b63ce92478848a10a6f10ae":["aac61ee5b4492f174e60bd54939aba9539906edf"],"b97b669a6c8dac1437c3856f4133d83c986515ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5754bd6f04f13b67e9575f8b226a0303c31c7d5"]},"commit2Childs":{"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["6c9d00c591703058371b3dc36f4957a6f24ca302"],"aac61ee5b4492f174e60bd54939aba9539906edf":["f03e4bed5023ec3ef93a771b8888cae991cf448d","2b9d3e8d3cc46a280b63ce92478848a10a6f10ae"],"6c9d00c591703058371b3dc36f4957a6f24ca302":["b5754bd6f04f13b67e9575f8b226a0303c31c7d5"],"6c576bf71df117a2003cac1787df5a9a5de44eb6":["f0a65e308c1642d1ffb120ffae140f08362e92a7"],"b5754bd6f04f13b67e9575f8b226a0303c31c7d5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"c7732a106554be0db3e03ac5211e46f6e0c285b8":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"bdc4f66ee357f981ad50b74262cb1a277f9a0ebe":[],"1aad05eeff7818b0833c02ac6b743aa72054963b":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","789fb338d3c53b4478938723d60f6623e764ca38"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["bdc4f66ee357f981ad50b74262cb1a277f9a0ebe"],"f0a65e308c1642d1ffb120ffae140f08362e92a7":["631e24c389c59f74b6d125a2a4cb909d6fbfa356"],"789fb338d3c53b4478938723d60f6623e764ca38":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b97b669a6c8dac1437c3856f4133d83c986515ae"],"631e24c389c59f74b6d125a2a4cb909d6fbfa356":["aac61ee5b4492f174e60bd54939aba9539906edf"],"2b9d3e8d3cc46a280b63ce92478848a10a6f10ae":["f03e4bed5023ec3ef93a771b8888cae991cf448d","c7732a106554be0db3e03ac5211e46f6e0c285b8","1aad05eeff7818b0833c02ac6b743aa72054963b"],"b97b669a6c8dac1437c3856f4133d83c986515ae":["6c576bf71df117a2003cac1787df5a9a5de44eb6","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f03e4bed5023ec3ef93a771b8888cae991cf448d","bdc4f66ee357f981ad50b74262cb1a277f9a0ebe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}