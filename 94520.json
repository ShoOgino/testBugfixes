{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#[T]_newRandomArg(Random,Class[T]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#[T]_newRandomArg(Random,Class[T]).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#[T]_newRandomArg(Random,Class[T]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  static <T> T newRandomArg(Random random, Class<T> paramType) {\n    final ArgProducer producer = argProducers.get(paramType);\n    assertNotNull(\"No producer for arguments of type \" + paramType.getName() + \" found\", producer);\n    return (T) producer.create(random);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  static <T> T newRandomArg(Random random, Class<T> paramType) {\n    final ArgProducer producer = argProducers.get(paramType);\n    assertNotNull(\"No producer for arguments of type \" + paramType.getName() + \" found\", producer);\n    return (T) producer.create(random);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bb78b03a4010509ef504f049857b42aeea7b3f5","date":1482349496,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#[T]_newRandomArg(Random,Class[T]).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#[T]_newRandomArg(Random,Class[T]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  static <T> T newRandomArg(Random random, Class<T> paramType) {\n    final Function<Random,Object> producer = argProducers.get(paramType);\n    assertNotNull(\"No producer for arguments of type \" + paramType.getName() + \" found\", producer);\n    return (T) producer.apply(random);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  static <T> T newRandomArg(Random random, Class<T> paramType) {\n    final ArgProducer producer = argProducers.get(paramType);\n    assertNotNull(\"No producer for arguments of type \" + paramType.getName() + \" found\", producer);\n    return (T) producer.create(random);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#[T]_newRandomArg(Random,Class[T]).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#[T]_newRandomArg(Random,Class[T]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  static <T> T newRandomArg(Random random, Class<T> paramType) {\n    final Function<Random,Object> producer = argProducers.get(paramType);\n    assertNotNull(\"No producer for arguments of type \" + paramType.getName() + \" found\", producer);\n    return (T) producer.apply(random);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  static <T> T newRandomArg(Random random, Class<T> paramType) {\n    final ArgProducer producer = argProducers.get(paramType);\n    assertNotNull(\"No producer for arguments of type \" + paramType.getName() + \" found\", producer);\n    return (T) producer.create(random);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1bb78b03a4010509ef504f049857b42aeea7b3f5":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1bb78b03a4010509ef504f049857b42aeea7b3f5"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["b89678825b68eccaf09e6ab71675fc0b0af1e099","1bb78b03a4010509ef504f049857b42aeea7b3f5"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["1bb78b03a4010509ef504f049857b42aeea7b3f5","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"1bb78b03a4010509ef504f049857b42aeea7b3f5":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}