{"path":"lucene/analysis/icu/src/java/org/apache/lucene/collation/ICUCollationDocValuesField#ICUCollationDocValuesField(String,Collator).mjava","commits":[{"id":"4123ecaf1cf629fc5597332be9b753b0e2eaf074","date":1359067678,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/collation/ICUCollationDocValuesField#ICUCollationDocValuesField(String,Collator).mjava","pathOld":"/dev/null","sourceNew":"  public ICUCollationDocValuesField(String name, Collator collator) {\n    super(name, SortedDocValuesField.TYPE);\n    this.name = name;\n    try {\n      this.collator = (Collator) collator.clone();\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06ed528f8e32fa9a39305cc663599848779b2828","date":1359175649,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/collation/ICUCollationDocValuesField#ICUCollationDocValuesField(String,Collator).mjava","pathOld":"lucene/analysis/icu/src/java/org/apache/lucene/collation/ICUCollationDocValuesField#ICUCollationDocValuesField(String,Collator).mjava","sourceNew":"  /**\n   * Create a new ICUCollationDocValuesField.\n   * <p>\n   * NOTE: you should not create a new one for each document, instead\n   * just make one and reuse it during your indexing process, setting\n   * the value via {@link #setStringValue(String)}.\n   * @param name field name\n   * @param collator Collator for generating collation keys.\n   */\n  // TODO: can we make this trap-free? maybe just synchronize on the collator\n  // instead? \n  public ICUCollationDocValuesField(String name, Collator collator) {\n    super(name, SortedDocValuesField.TYPE);\n    this.name = name;\n    try {\n      this.collator = (Collator) collator.clone();\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  public ICUCollationDocValuesField(String name, Collator collator) {\n    super(name, SortedDocValuesField.TYPE);\n    this.name = name;\n    try {\n      this.collator = (Collator) collator.clone();\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"498626195354975ac543d575087c90185d80c813","date":1359301262,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/collation/ICUCollationDocValuesField#ICUCollationDocValuesField(String,Collator).mjava","pathOld":"lucene/analysis/icu/src/java/org/apache/lucene/collation/ICUCollationDocValuesField#ICUCollationDocValuesField(String,Collator).mjava","sourceNew":"  /**\n   * Create a new ICUCollationDocValuesField.\n   * <p>\n   * NOTE: you should not create a new one for each document, instead\n   * just make one and reuse it during your indexing process, setting\n   * the value via {@link #setStringValue(String)}.\n   * @param name field name\n   * @param collator Collator for generating collation keys.\n   */\n  // TODO: can we make this trap-free? maybe just synchronize on the collator\n  // instead? \n  public ICUCollationDocValuesField(String name, Collator collator) {\n    super(name, SortedDocValuesField.TYPE);\n    this.name = name;\n    try {\n      this.collator = (Collator) collator.clone();\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(e);\n    }\n    fieldsData = bytes; // so wrong setters cannot be called\n  }\n\n","sourceOld":"  /**\n   * Create a new ICUCollationDocValuesField.\n   * <p>\n   * NOTE: you should not create a new one for each document, instead\n   * just make one and reuse it during your indexing process, setting\n   * the value via {@link #setStringValue(String)}.\n   * @param name field name\n   * @param collator Collator for generating collation keys.\n   */\n  // TODO: can we make this trap-free? maybe just synchronize on the collator\n  // instead? \n  public ICUCollationDocValuesField(String name, Collator collator) {\n    super(name, SortedDocValuesField.TYPE);\n    this.name = name;\n    try {\n      this.collator = (Collator) collator.clone();\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/collation/ICUCollationDocValuesField#ICUCollationDocValuesField(String,Collator).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new ICUCollationDocValuesField.\n   * <p>\n   * NOTE: you should not create a new one for each document, instead\n   * just make one and reuse it during your indexing process, setting\n   * the value via {@link #setStringValue(String)}.\n   * @param name field name\n   * @param collator Collator for generating collation keys.\n   */\n  // TODO: can we make this trap-free? maybe just synchronize on the collator\n  // instead? \n  public ICUCollationDocValuesField(String name, Collator collator) {\n    super(name, SortedDocValuesField.TYPE);\n    this.name = name;\n    try {\n      this.collator = (Collator) collator.clone();\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(e);\n    }\n    fieldsData = bytes; // so wrong setters cannot be called\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7222ccbf51c085332eb28ee772f8dfb65e4d2b01","date":1601887943,"type":5,"author":"Tomoko Uchida","isMerge":false,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUCollationDocValuesField#ICUCollationDocValuesField(String,Collator).mjava","pathOld":"lucene/analysis/icu/src/java/org/apache/lucene/collation/ICUCollationDocValuesField#ICUCollationDocValuesField(String,Collator).mjava","sourceNew":"  /**\n   * Create a new ICUCollationDocValuesField.\n   * <p>\n   * NOTE: you should not create a new one for each document, instead\n   * just make one and reuse it during your indexing process, setting\n   * the value via {@link #setStringValue(String)}.\n   * @param name field name\n   * @param collator Collator for generating collation keys.\n   */\n  // TODO: can we make this trap-free? maybe just synchronize on the collator\n  // instead? \n  public ICUCollationDocValuesField(String name, Collator collator) {\n    super(name, SortedDocValuesField.TYPE);\n    this.name = name;\n    try {\n      this.collator = (Collator) collator.clone();\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(e);\n    }\n    fieldsData = bytes; // so wrong setters cannot be called\n  }\n\n","sourceOld":"  /**\n   * Create a new ICUCollationDocValuesField.\n   * <p>\n   * NOTE: you should not create a new one for each document, instead\n   * just make one and reuse it during your indexing process, setting\n   * the value via {@link #setStringValue(String)}.\n   * @param name field name\n   * @param collator Collator for generating collation keys.\n   */\n  // TODO: can we make this trap-free? maybe just synchronize on the collator\n  // instead? \n  public ICUCollationDocValuesField(String name, Collator collator) {\n    super(name, SortedDocValuesField.TYPE);\n    this.name = name;\n    try {\n      this.collator = (Collator) collator.clone();\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(e);\n    }\n    fieldsData = bytes; // so wrong setters cannot be called\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","498626195354975ac543d575087c90185d80c813"],"4123ecaf1cf629fc5597332be9b753b0e2eaf074":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06ed528f8e32fa9a39305cc663599848779b2828":["4123ecaf1cf629fc5597332be9b753b0e2eaf074"],"498626195354975ac543d575087c90185d80c813":["06ed528f8e32fa9a39305cc663599848779b2828"],"7222ccbf51c085332eb28ee772f8dfb65e4d2b01":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7222ccbf51c085332eb28ee772f8dfb65e4d2b01"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["7222ccbf51c085332eb28ee772f8dfb65e4d2b01"],"4123ecaf1cf629fc5597332be9b753b0e2eaf074":["06ed528f8e32fa9a39305cc663599848779b2828"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","4123ecaf1cf629fc5597332be9b753b0e2eaf074"],"06ed528f8e32fa9a39305cc663599848779b2828":["498626195354975ac543d575087c90185d80c813"],"498626195354975ac543d575087c90185d80c813":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"7222ccbf51c085332eb28ee772f8dfb65e4d2b01":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}