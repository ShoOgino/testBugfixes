{"path":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testPfPs().mjava","commits":[{"id":"df2d1b614e277836f9b1bb0e2bbbfd12fa9f2af6","date":1334355722,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testPfPs().mjava","pathOld":"/dev/null","sourceNew":"  // test phrase fields including pf2 pf3 and phrase slop\n  public void testPfPs() {\n    assertU(adoc(\"id\", \"s0\", \"phrase_sw\", \"foo bar a b c\", \"boost_d\", \"1.0\"));    \n    assertU(adoc(\"id\", \"s1\", \"phrase_sw\", \"foo a bar b c\", \"boost_d\", \"2.0\"));    \n    assertU(adoc(\"id\", \"s2\", \"phrase_sw\", \"foo a b bar c\", \"boost_d\", \"3.0\"));    \n    assertU(adoc(\"id\", \"s3\", \"phrase_sw\", \"foo a b c bar\", \"boost_d\", \"4.0\"));    \n    assertU(commit());\n\n    assertQ(\"default order assumption wrong\",\n        req(\"q\",   \"foo bar\", \n            \"qf\",  \"phrase_sw\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s3']\",\n        \"//doc[2]/str[@name='id'][.='s2']\",\n        \"//doc[3]/str[@name='id'][.='s1']\",\n        \"//doc[4]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"pf not working\",\n          req(\"q\",   \"foo bar\", \n              \"qf\",  \"phrase_sw\",\n              \"pf\",  \"phrase_sw^10\",\n              \"bf\",  \"boost_d\",\n              \"fl\",  \"score,*\",\n              \"defType\", \"edismax\"),\n          \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\"pf2 not working\",\n        req(\"q\",   \"foo bar\", \n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"pf3 not working\",\n        req(\"q\",   \"a b bar\", \n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s2']\"); \n\n    assertQ(\"ps not working for pf2\",\n        req(\"q\",   \"bar foo\", \n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"ps\",  \"2\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"ps not working for pf3\",\n        req(\"q\",   \"a bar foo\", \n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"ps\",  \"3\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"debugQuery\",  \"true\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\"); \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6a07f3e2a607281f2c8299665664e00c446b36a0","acb10061e140a7f3d5035b8be54d966ebcb672ad"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9e959ce5e0805c43916e999d21f2018a2b475ab","date":1337958990,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testPfPs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testPfPs().mjava","sourceNew":"  // test phrase fields including pf2 pf3 and phrase slop\n  public void testPfPs() {\n    assertU(adoc(\"id\", \"s0\", \"phrase_sw\", \"foo bar a b c\", \"boost_d\", \"1.0\"));    \n    assertU(adoc(\"id\", \"s1\", \"phrase_sw\", \"foo a bar b c\", \"boost_d\", \"2.0\"));    \n    assertU(adoc(\"id\", \"s2\", \"phrase_sw\", \"foo a b bar c\", \"boost_d\", \"3.0\"));    \n    assertU(adoc(\"id\", \"s3\", \"phrase_sw\", \"foo a b c bar\", \"boost_d\", \"4.0\"));    \n    assertU(commit());\n\n    assertQ(\"default order assumption wrong\",\n        req(\"q\",   \"foo bar\", \n            \"qf\",  \"phrase_sw\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s3']\",\n        \"//doc[2]/str[@name='id'][.='s2']\",\n        \"//doc[3]/str[@name='id'][.='s1']\",\n        \"//doc[4]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"pf not working\",\n          req(\"q\",   \"foo bar\", \n              \"qf\",  \"phrase_sw\",\n              \"pf\",  \"phrase_sw^10\",\n              \"bf\",  \"boost_d\",\n              \"fl\",  \"score,*\",\n              \"defType\", \"edismax\"),\n          \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\"pf2 not working\",\n        req(\"q\",   \"foo bar\", \n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"pf3 not working\",\n        req(\"q\",   \"a b bar\", \n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s2']\"); \n\n    assertQ(\"ps not working for pf2\",\n        req(\"q\",   \"bar foo\", \n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"ps\",  \"2\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"ps not working for pf3\",\n        req(\"q\",   \"a bar foo\", \n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"ps\",  \"3\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"debugQuery\",  \"true\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\"); \n    \n    assertQ(\"ps/ps2/ps3 with default slop overrides not working\",\n        req(\"q\", \"zzzz xxxx cccc vvvv\",\n            \"qf\", \"phrase_sw\",\n            \"pf\", \"phrase_sw~1^10 phrase_sw~2^20 phrase_sw^30\",\n            \"pf2\", \"phrase_sw~2^22 phrase_sw^33\",\n            \"pf3\", \"phrase_sw~2^222 phrase_sw^333\",\n            \"ps\", \"3\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~1^10.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~2^20.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~3^30.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"cccc vvvv\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx\\\"~3^33.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc\\\"~3^33.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"cccc vvvv\\\"~3^33.0')]\",        \n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc\\\"~2^222.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc vvvv\\\"~2^222.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc\\\"~3^333.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc vvvv\\\"~3^333.0')]\"\n     );\n  }\n\n","sourceOld":"  // test phrase fields including pf2 pf3 and phrase slop\n  public void testPfPs() {\n    assertU(adoc(\"id\", \"s0\", \"phrase_sw\", \"foo bar a b c\", \"boost_d\", \"1.0\"));    \n    assertU(adoc(\"id\", \"s1\", \"phrase_sw\", \"foo a bar b c\", \"boost_d\", \"2.0\"));    \n    assertU(adoc(\"id\", \"s2\", \"phrase_sw\", \"foo a b bar c\", \"boost_d\", \"3.0\"));    \n    assertU(adoc(\"id\", \"s3\", \"phrase_sw\", \"foo a b c bar\", \"boost_d\", \"4.0\"));    \n    assertU(commit());\n\n    assertQ(\"default order assumption wrong\",\n        req(\"q\",   \"foo bar\", \n            \"qf\",  \"phrase_sw\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s3']\",\n        \"//doc[2]/str[@name='id'][.='s2']\",\n        \"//doc[3]/str[@name='id'][.='s1']\",\n        \"//doc[4]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"pf not working\",\n          req(\"q\",   \"foo bar\", \n              \"qf\",  \"phrase_sw\",\n              \"pf\",  \"phrase_sw^10\",\n              \"bf\",  \"boost_d\",\n              \"fl\",  \"score,*\",\n              \"defType\", \"edismax\"),\n          \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\"pf2 not working\",\n        req(\"q\",   \"foo bar\", \n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"pf3 not working\",\n        req(\"q\",   \"a b bar\", \n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s2']\"); \n\n    assertQ(\"ps not working for pf2\",\n        req(\"q\",   \"bar foo\", \n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"ps\",  \"2\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"ps not working for pf3\",\n        req(\"q\",   \"a bar foo\", \n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"ps\",  \"3\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"debugQuery\",  \"true\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\"); \n  }\n\n","bugFix":null,"bugIntro":["acb10061e140a7f3d5035b8be54d966ebcb672ad"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"500052b00ecd22d5bd8b0efd25666d035ef55f85","date":1340322005,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testPfPs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testPfPs().mjava","sourceNew":"  // test phrase fields including pf2 pf3 and phrase slop\n  public void testPfPs() {\n    assertU(adoc(\"id\", \"s0\", \"phrase_sw\", \"foo bar a b c\", \"boost_d\", \"1.0\"));    \n    assertU(adoc(\"id\", \"s1\", \"phrase_sw\", \"foo a bar b c\", \"boost_d\", \"2.0\"));    \n    assertU(adoc(\"id\", \"s2\", \"phrase_sw\", \"foo a b bar c\", \"boost_d\", \"3.0\"));    \n    assertU(adoc(\"id\", \"s3\", \"phrase_sw\", \"foo a b c bar\", \"boost_d\", \"4.0\"));    \n    assertU(commit());\n\n    assertQ(\"default order assumption wrong\",\n        req(\"q\",   \"foo bar\", \n            \"qf\",  \"phrase_sw\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s3']\",\n        \"//doc[2]/str[@name='id'][.='s2']\",\n        \"//doc[3]/str[@name='id'][.='s1']\",\n        \"//doc[4]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"pf not working\",\n          req(\"q\",   \"foo bar\", \n              \"qf\",  \"phrase_sw\",\n              \"pf\",  \"phrase_sw^10\",\n              \"bf\",  \"boost_d\",\n              \"fl\",  \"score,*\",\n              \"defType\", \"edismax\"),\n          \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\"pf2 not working\",\n        req(\"q\",   \"foo bar\", \n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"pf3 not working\",\n        req(\"q\",   \"a b bar\", \n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s2']\"); \n\n    assertQ(\"ps not working for pf2\",\n        req(\"q\",   \"bar foo\", \n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"ps\",  \"2\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"ps not working for pf3\",\n        req(\"q\",   \"a bar foo\", \n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"ps\",  \"3\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"debugQuery\",  \"true\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\"); \n    \n    assertQ(\"ps/ps2/ps3 with default slop overrides not working\",\n        req(\"q\", \"zzzz xxxx cccc vvvv\",\n            \"qf\", \"phrase_sw\",\n            \"pf\", \"phrase_sw~1^10 phrase_sw~2^20 phrase_sw^30\",\n            \"pf2\", \"phrase_sw~2^22 phrase_sw^33\",\n            \"pf3\", \"phrase_sw~2^222 phrase_sw^333\",\n            \"ps\", \"3\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~1^10.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~2^20.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~3^30.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"cccc vvvv\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx\\\"~3^33.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc\\\"~3^33.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"cccc vvvv\\\"~3^33.0')]\",        \n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc\\\"~2^222.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc vvvv\\\"~2^222.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc\\\"~3^333.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc vvvv\\\"~3^333.0')]\"\n     );\n\n    assertQ(\n        \"ps2 not working\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw^10\", \"ps2\",\n            \"2\", \"bf\", \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\n        \"Specifying slop in pf2 param not working\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw~2^10\", \"bf\",\n            \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\n        \"Slop in ps2 parameter should override ps\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw^10\", \"ps\",\n            \"0\", \"ps2\", \"2\", \"bf\", \"boost_d\", \"fl\", \"score,*\", \"defType\",\n            \"edismax\"), \"//doc[1]/str[@name='id'][.='s0']\");\n\n    assertQ(\n        \"ps3 not working\",\n        req(\"q\", \"a bar foo\", \"qf\", \"phrase_sw\", \"pf3\", \"phrase_sw^10\", \"ps3\",\n            \"3\", \"bf\", \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\");\n    \n    assertQ(\n        \"Specifying slop in pf3 param not working\",\n        req(\"q\", \"a bar foo\", \"qf\", \"phrase_sw\", \"pf3\", \"phrase_sw~3^10\", \"bf\",\n            \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\");\n   \n    assertQ(\"ps2 should not override slop specified inline in pf2\",\n        req(\"q\", \"zzzz xxxx cccc vvvv\",\n            \"qf\", \"phrase_sw\",\n            \"pf2\", \"phrase_sw~2^22\",\n            \"ps2\", \"4\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx\\\"~2^22.0')]\"\n     );\n\n  }\n\n","sourceOld":"  // test phrase fields including pf2 pf3 and phrase slop\n  public void testPfPs() {\n    assertU(adoc(\"id\", \"s0\", \"phrase_sw\", \"foo bar a b c\", \"boost_d\", \"1.0\"));    \n    assertU(adoc(\"id\", \"s1\", \"phrase_sw\", \"foo a bar b c\", \"boost_d\", \"2.0\"));    \n    assertU(adoc(\"id\", \"s2\", \"phrase_sw\", \"foo a b bar c\", \"boost_d\", \"3.0\"));    \n    assertU(adoc(\"id\", \"s3\", \"phrase_sw\", \"foo a b c bar\", \"boost_d\", \"4.0\"));    \n    assertU(commit());\n\n    assertQ(\"default order assumption wrong\",\n        req(\"q\",   \"foo bar\", \n            \"qf\",  \"phrase_sw\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s3']\",\n        \"//doc[2]/str[@name='id'][.='s2']\",\n        \"//doc[3]/str[@name='id'][.='s1']\",\n        \"//doc[4]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"pf not working\",\n          req(\"q\",   \"foo bar\", \n              \"qf\",  \"phrase_sw\",\n              \"pf\",  \"phrase_sw^10\",\n              \"bf\",  \"boost_d\",\n              \"fl\",  \"score,*\",\n              \"defType\", \"edismax\"),\n          \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\"pf2 not working\",\n        req(\"q\",   \"foo bar\", \n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"pf3 not working\",\n        req(\"q\",   \"a b bar\", \n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s2']\"); \n\n    assertQ(\"ps not working for pf2\",\n        req(\"q\",   \"bar foo\", \n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"ps\",  \"2\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"ps not working for pf3\",\n        req(\"q\",   \"a bar foo\", \n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"ps\",  \"3\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"debugQuery\",  \"true\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\"); \n    \n    assertQ(\"ps/ps2/ps3 with default slop overrides not working\",\n        req(\"q\", \"zzzz xxxx cccc vvvv\",\n            \"qf\", \"phrase_sw\",\n            \"pf\", \"phrase_sw~1^10 phrase_sw~2^20 phrase_sw^30\",\n            \"pf2\", \"phrase_sw~2^22 phrase_sw^33\",\n            \"pf3\", \"phrase_sw~2^222 phrase_sw^333\",\n            \"ps\", \"3\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~1^10.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~2^20.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~3^30.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"cccc vvvv\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx\\\"~3^33.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc\\\"~3^33.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"cccc vvvv\\\"~3^33.0')]\",        \n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc\\\"~2^222.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc vvvv\\\"~2^222.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc\\\"~3^333.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc vvvv\\\"~3^333.0')]\"\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testPfPs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testPfPs().mjava","sourceNew":"  // test phrase fields including pf2 pf3 and phrase slop\n  public void testPfPs() {\n    assertU(adoc(\"id\", \"s0\", \"phrase_sw\", \"foo bar a b c\", \"boost_d\", \"1.0\"));    \n    assertU(adoc(\"id\", \"s1\", \"phrase_sw\", \"foo a bar b c\", \"boost_d\", \"2.0\"));    \n    assertU(adoc(\"id\", \"s2\", \"phrase_sw\", \"foo a b bar c\", \"boost_d\", \"3.0\"));    \n    assertU(adoc(\"id\", \"s3\", \"phrase_sw\", \"foo a b c bar\", \"boost_d\", \"4.0\"));    \n    assertU(commit());\n\n    assertQ(\"default order assumption wrong\",\n        req(\"q\",   \"foo bar\", \n            \"qf\",  \"phrase_sw\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s3']\",\n        \"//doc[2]/str[@name='id'][.='s2']\",\n        \"//doc[3]/str[@name='id'][.='s1']\",\n        \"//doc[4]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"pf not working\",\n          req(\"q\",   \"foo bar\", \n              \"qf\",  \"phrase_sw\",\n              \"pf\",  \"phrase_sw^10\",\n              \"bf\",  \"boost_d\",\n              \"fl\",  \"score,*\",\n              \"defType\", \"edismax\"),\n          \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\"pf2 not working\",\n        req(\"q\",   \"foo bar\", \n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"pf3 not working\",\n        req(\"q\",   \"a b bar\", \n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s2']\"); \n\n    assertQ(\"ps not working for pf2\",\n        req(\"q\",   \"bar foo\", \n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"ps\",  \"2\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"ps not working for pf3\",\n        req(\"q\",   \"a bar foo\", \n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"ps\",  \"3\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"debugQuery\",  \"true\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\"); \n    \n    assertQ(\"ps/ps2/ps3 with default slop overrides not working\",\n        req(\"q\", \"zzzz xxxx cccc vvvv\",\n            \"qf\", \"phrase_sw\",\n            \"pf\", \"phrase_sw~1^10 phrase_sw~2^20 phrase_sw^30\",\n            \"pf2\", \"phrase_sw~2^22 phrase_sw^33\",\n            \"pf3\", \"phrase_sw~2^222 phrase_sw^333\",\n            \"ps\", \"3\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~1^10.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~2^20.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~3^30.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"cccc vvvv\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx\\\"~3^33.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc\\\"~3^33.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"cccc vvvv\\\"~3^33.0')]\",        \n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc\\\"~2^222.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc vvvv\\\"~2^222.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc\\\"~3^333.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc vvvv\\\"~3^333.0')]\"\n     );\n\n    assertQ(\n        \"ps2 not working\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw^10\", \"ps2\",\n            \"2\", \"bf\", \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\n        \"Specifying slop in pf2 param not working\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw~2^10\", \"bf\",\n            \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\n        \"Slop in ps2 parameter should override ps\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw^10\", \"ps\",\n            \"0\", \"ps2\", \"2\", \"bf\", \"boost_d\", \"fl\", \"score,*\", \"defType\",\n            \"edismax\"), \"//doc[1]/str[@name='id'][.='s0']\");\n\n    assertQ(\n        \"ps3 not working\",\n        req(\"q\", \"a bar foo\", \"qf\", \"phrase_sw\", \"pf3\", \"phrase_sw^10\", \"ps3\",\n            \"3\", \"bf\", \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\");\n    \n    assertQ(\n        \"Specifying slop in pf3 param not working\",\n        req(\"q\", \"a bar foo\", \"qf\", \"phrase_sw\", \"pf3\", \"phrase_sw~3^10\", \"bf\",\n            \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\");\n   \n    assertQ(\"ps2 should not override slop specified inline in pf2\",\n        req(\"q\", \"zzzz xxxx cccc vvvv\",\n            \"qf\", \"phrase_sw\",\n            \"pf2\", \"phrase_sw~2^22\",\n            \"ps2\", \"4\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx\\\"~2^22.0')]\"\n     );\n\n  }\n\n","sourceOld":"  // test phrase fields including pf2 pf3 and phrase slop\n  public void testPfPs() {\n    assertU(adoc(\"id\", \"s0\", \"phrase_sw\", \"foo bar a b c\", \"boost_d\", \"1.0\"));    \n    assertU(adoc(\"id\", \"s1\", \"phrase_sw\", \"foo a bar b c\", \"boost_d\", \"2.0\"));    \n    assertU(adoc(\"id\", \"s2\", \"phrase_sw\", \"foo a b bar c\", \"boost_d\", \"3.0\"));    \n    assertU(adoc(\"id\", \"s3\", \"phrase_sw\", \"foo a b c bar\", \"boost_d\", \"4.0\"));    \n    assertU(commit());\n\n    assertQ(\"default order assumption wrong\",\n        req(\"q\",   \"foo bar\", \n            \"qf\",  \"phrase_sw\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s3']\",\n        \"//doc[2]/str[@name='id'][.='s2']\",\n        \"//doc[3]/str[@name='id'][.='s1']\",\n        \"//doc[4]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"pf not working\",\n          req(\"q\",   \"foo bar\", \n              \"qf\",  \"phrase_sw\",\n              \"pf\",  \"phrase_sw^10\",\n              \"bf\",  \"boost_d\",\n              \"fl\",  \"score,*\",\n              \"defType\", \"edismax\"),\n          \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\"pf2 not working\",\n        req(\"q\",   \"foo bar\", \n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"pf3 not working\",\n        req(\"q\",   \"a b bar\", \n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s2']\"); \n\n    assertQ(\"ps not working for pf2\",\n        req(\"q\",   \"bar foo\", \n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"ps\",  \"2\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"ps not working for pf3\",\n        req(\"q\",   \"a bar foo\", \n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"ps\",  \"3\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"debugQuery\",  \"true\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\"); \n    \n    assertQ(\"ps/ps2/ps3 with default slop overrides not working\",\n        req(\"q\", \"zzzz xxxx cccc vvvv\",\n            \"qf\", \"phrase_sw\",\n            \"pf\", \"phrase_sw~1^10 phrase_sw~2^20 phrase_sw^30\",\n            \"pf2\", \"phrase_sw~2^22 phrase_sw^33\",\n            \"pf3\", \"phrase_sw~2^222 phrase_sw^333\",\n            \"ps\", \"3\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~1^10.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~2^20.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~3^30.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"cccc vvvv\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx\\\"~3^33.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc\\\"~3^33.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"cccc vvvv\\\"~3^33.0')]\",        \n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc\\\"~2^222.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc vvvv\\\"~2^222.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc\\\"~3^333.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc vvvv\\\"~3^333.0')]\"\n     );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a07f3e2a607281f2c8299665664e00c446b36a0","date":1361907596,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testPfPs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testPfPs().mjava","sourceNew":"  // test phrase fields including pf2 pf3 and phrase slop\n  public void testPfPs() {\n    assertU(adoc(\"id\", \"s0\", \"phrase_sw\", \"foo bar a b c\", \"boost_d\", \"1.0\"));    \n    assertU(adoc(\"id\", \"s1\", \"phrase_sw\", \"foo a bar b c\", \"boost_d\", \"2.0\"));    \n    assertU(adoc(\"id\", \"s2\", \"phrase_sw\", \"foo a b bar c\", \"boost_d\", \"3.0\"));    \n    assertU(adoc(\"id\", \"s3\", \"phrase_sw\", \"foo a b c bar\", \"boost_d\", \"4.0\"));    \n    assertU(commit());\n\n    assertQ(\"default order assumption wrong\",\n        req(\"q\", \"foo bar\",\n            \"qf\", \"phrase_sw\",\n            \"bf\", \"boost_d\",\n            \"fl\", \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s3']\",\n        \"//doc[2]/str[@name='id'][.='s2']\",\n        \"//doc[3]/str[@name='id'][.='s1']\",\n        \"//doc[4]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"pf not working\",\n        req(\"q\", \"foo bar\",\n            \"qf\", \"phrase_sw\",\n            \"pf\", \"phrase_sw^10\",\n            \"bf\", \"boost_d\",\n            \"fl\", \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\"pf2 not working\",\n        req(\"q\",   \"foo bar\", \n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"pf3 not working\",\n        req(\"q\",   \"a b bar\", \n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s2']\"); \n\n    assertQ(\"ps not working for pf2\",\n        req(\"q\",   \"bar foo\", \n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"ps\",  \"2\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"ps not working for pf3\",\n        req(\"q\",   \"a bar foo\", \n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"ps\",  \"3\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"debugQuery\",  \"true\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\"); \n    \n    assertQ(\"ps/ps2/ps3 with default slop overrides not working\",\n        req(\"q\", \"zzzz xxxx cccc vvvv\",\n            \"qf\", \"phrase_sw\",\n            \"pf\", \"phrase_sw~1^10 phrase_sw~2^20 phrase_sw^30\",\n            \"pf2\", \"phrase_sw~2^22 phrase_sw^33\",\n            \"pf3\", \"phrase_sw~2^222 phrase_sw^333\",\n            \"ps\", \"3\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~1^10.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~2^20.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~3^30.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"cccc vvvv\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx\\\"~3^33.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc\\\"~3^33.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"cccc vvvv\\\"~3^33.0')]\",        \n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc\\\"~2^222.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc vvvv\\\"~2^222.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc\\\"~3^333.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc vvvv\\\"~3^333.0')]\"\n     );\n\n    assertQ(\n        \"ps2 not working\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw^10\", \"ps2\",\n            \"2\", \"bf\", \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\n        \"Specifying slop in pf2 param not working\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw~2^10\", \"bf\",\n            \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\n        \"Slop in ps2 parameter should override ps\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw^10\", \"ps\",\n            \"0\", \"ps2\", \"2\", \"bf\", \"boost_d\", \"fl\", \"score,*\", \"defType\",\n            \"edismax\"), \"//doc[1]/str[@name='id'][.='s0']\");\n\n    assertQ(\n        \"ps3 not working\",\n        req(\"q\", \"a bar foo\", \"qf\", \"phrase_sw\", \"pf3\", \"phrase_sw^10\", \"ps3\",\n            \"3\", \"bf\", \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\");\n    \n    assertQ(\n        \"Specifying slop in pf3 param not working\",\n        req(\"q\", \"a bar foo\", \"qf\", \"phrase_sw\", \"pf3\", \"phrase_sw~3^10\", \"bf\",\n            \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\");\n   \n    assertQ(\"ps2 should not override slop specified inline in pf2\",\n        req(\"q\", \"zzzz xxxx cccc vvvv\",\n            \"qf\", \"phrase_sw\",\n            \"pf2\", \"phrase_sw~2^22\",\n            \"ps2\", \"4\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx\\\"~2^22.0')]\"\n     );\n\n  }\n\n","sourceOld":"  // test phrase fields including pf2 pf3 and phrase slop\n  public void testPfPs() {\n    assertU(adoc(\"id\", \"s0\", \"phrase_sw\", \"foo bar a b c\", \"boost_d\", \"1.0\"));    \n    assertU(adoc(\"id\", \"s1\", \"phrase_sw\", \"foo a bar b c\", \"boost_d\", \"2.0\"));    \n    assertU(adoc(\"id\", \"s2\", \"phrase_sw\", \"foo a b bar c\", \"boost_d\", \"3.0\"));    \n    assertU(adoc(\"id\", \"s3\", \"phrase_sw\", \"foo a b c bar\", \"boost_d\", \"4.0\"));    \n    assertU(commit());\n\n    assertQ(\"default order assumption wrong\",\n        req(\"q\",   \"foo bar\", \n            \"qf\",  \"phrase_sw\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s3']\",\n        \"//doc[2]/str[@name='id'][.='s2']\",\n        \"//doc[3]/str[@name='id'][.='s1']\",\n        \"//doc[4]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"pf not working\",\n          req(\"q\",   \"foo bar\", \n              \"qf\",  \"phrase_sw\",\n              \"pf\",  \"phrase_sw^10\",\n              \"bf\",  \"boost_d\",\n              \"fl\",  \"score,*\",\n              \"defType\", \"edismax\"),\n          \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\"pf2 not working\",\n        req(\"q\",   \"foo bar\", \n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"pf3 not working\",\n        req(\"q\",   \"a b bar\", \n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s2']\"); \n\n    assertQ(\"ps not working for pf2\",\n        req(\"q\",   \"bar foo\", \n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"ps\",  \"2\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"ps not working for pf3\",\n        req(\"q\",   \"a bar foo\", \n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"ps\",  \"3\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"debugQuery\",  \"true\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\"); \n    \n    assertQ(\"ps/ps2/ps3 with default slop overrides not working\",\n        req(\"q\", \"zzzz xxxx cccc vvvv\",\n            \"qf\", \"phrase_sw\",\n            \"pf\", \"phrase_sw~1^10 phrase_sw~2^20 phrase_sw^30\",\n            \"pf2\", \"phrase_sw~2^22 phrase_sw^33\",\n            \"pf3\", \"phrase_sw~2^222 phrase_sw^333\",\n            \"ps\", \"3\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~1^10.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~2^20.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~3^30.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"cccc vvvv\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx\\\"~3^33.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc\\\"~3^33.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"cccc vvvv\\\"~3^33.0')]\",        \n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc\\\"~2^222.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc vvvv\\\"~2^222.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc\\\"~3^333.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc vvvv\\\"~3^333.0')]\"\n     );\n\n    assertQ(\n        \"ps2 not working\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw^10\", \"ps2\",\n            \"2\", \"bf\", \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\n        \"Specifying slop in pf2 param not working\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw~2^10\", \"bf\",\n            \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\n        \"Slop in ps2 parameter should override ps\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw^10\", \"ps\",\n            \"0\", \"ps2\", \"2\", \"bf\", \"boost_d\", \"fl\", \"score,*\", \"defType\",\n            \"edismax\"), \"//doc[1]/str[@name='id'][.='s0']\");\n\n    assertQ(\n        \"ps3 not working\",\n        req(\"q\", \"a bar foo\", \"qf\", \"phrase_sw\", \"pf3\", \"phrase_sw^10\", \"ps3\",\n            \"3\", \"bf\", \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\");\n    \n    assertQ(\n        \"Specifying slop in pf3 param not working\",\n        req(\"q\", \"a bar foo\", \"qf\", \"phrase_sw\", \"pf3\", \"phrase_sw~3^10\", \"bf\",\n            \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\");\n   \n    assertQ(\"ps2 should not override slop specified inline in pf2\",\n        req(\"q\", \"zzzz xxxx cccc vvvv\",\n            \"qf\", \"phrase_sw\",\n            \"pf2\", \"phrase_sw~2^22\",\n            \"ps2\", \"4\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx\\\"~2^22.0')]\"\n     );\n\n  }\n\n","bugFix":["df2d1b614e277836f9b1bb0e2bbbfd12fa9f2af6"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testPfPs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testPfPs().mjava","sourceNew":"  // test phrase fields including pf2 pf3 and phrase slop\n  public void testPfPs() {\n    assertU(adoc(\"id\", \"s0\", \"phrase_sw\", \"foo bar a b c\", \"boost_d\", \"1.0\"));    \n    assertU(adoc(\"id\", \"s1\", \"phrase_sw\", \"foo a bar b c\", \"boost_d\", \"2.0\"));    \n    assertU(adoc(\"id\", \"s2\", \"phrase_sw\", \"foo a b bar c\", \"boost_d\", \"3.0\"));    \n    assertU(adoc(\"id\", \"s3\", \"phrase_sw\", \"foo a b c bar\", \"boost_d\", \"4.0\"));    \n    assertU(commit());\n\n    assertQ(\"default order assumption wrong\",\n        req(\"q\", \"foo bar\",\n            \"qf\", \"phrase_sw\",\n            \"bf\", \"boost_d\",\n            \"fl\", \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s3']\",\n        \"//doc[2]/str[@name='id'][.='s2']\",\n        \"//doc[3]/str[@name='id'][.='s1']\",\n        \"//doc[4]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"pf not working\",\n        req(\"q\", \"foo bar\",\n            \"qf\", \"phrase_sw\",\n            \"pf\", \"phrase_sw^10\",\n            \"bf\", \"boost_d\",\n            \"fl\", \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\"pf2 not working\",\n        req(\"q\",   \"foo bar\", \n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"pf3 not working\",\n        req(\"q\",   \"a b bar\", \n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s2']\"); \n\n    assertQ(\"ps not working for pf2\",\n        req(\"q\",   \"bar foo\", \n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"ps\",  \"2\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"ps not working for pf3\",\n        req(\"q\",   \"a bar foo\", \n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"ps\",  \"3\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"debugQuery\",  \"true\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\"); \n    \n    assertQ(\"ps/ps2/ps3 with default slop overrides not working\",\n        req(\"q\", \"zzzz xxxx cccc vvvv\",\n            \"qf\", \"phrase_sw\",\n            \"pf\", \"phrase_sw~1^10 phrase_sw~2^20 phrase_sw^30\",\n            \"pf2\", \"phrase_sw~2^22 phrase_sw^33\",\n            \"pf3\", \"phrase_sw~2^222 phrase_sw^333\",\n            \"ps\", \"3\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~1^10.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~2^20.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~3^30.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"cccc vvvv\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx\\\"~3^33.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc\\\"~3^33.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"cccc vvvv\\\"~3^33.0')]\",        \n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc\\\"~2^222.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc vvvv\\\"~2^222.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc\\\"~3^333.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc vvvv\\\"~3^333.0')]\"\n     );\n\n    assertQ(\n        \"ps2 not working\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw^10\", \"ps2\",\n            \"2\", \"bf\", \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\n        \"Specifying slop in pf2 param not working\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw~2^10\", \"bf\",\n            \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\n        \"Slop in ps2 parameter should override ps\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw^10\", \"ps\",\n            \"0\", \"ps2\", \"2\", \"bf\", \"boost_d\", \"fl\", \"score,*\", \"defType\",\n            \"edismax\"), \"//doc[1]/str[@name='id'][.='s0']\");\n\n    assertQ(\n        \"ps3 not working\",\n        req(\"q\", \"a bar foo\", \"qf\", \"phrase_sw\", \"pf3\", \"phrase_sw^10\", \"ps3\",\n            \"3\", \"bf\", \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\");\n    \n    assertQ(\n        \"Specifying slop in pf3 param not working\",\n        req(\"q\", \"a bar foo\", \"qf\", \"phrase_sw\", \"pf3\", \"phrase_sw~3^10\", \"bf\",\n            \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\");\n   \n    assertQ(\"ps2 should not override slop specified inline in pf2\",\n        req(\"q\", \"zzzz xxxx cccc vvvv\",\n            \"qf\", \"phrase_sw\",\n            \"pf2\", \"phrase_sw~2^22\",\n            \"ps2\", \"4\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx\\\"~2^22.0')]\"\n     );\n\n  }\n\n","sourceOld":"  // test phrase fields including pf2 pf3 and phrase slop\n  public void testPfPs() {\n    assertU(adoc(\"id\", \"s0\", \"phrase_sw\", \"foo bar a b c\", \"boost_d\", \"1.0\"));    \n    assertU(adoc(\"id\", \"s1\", \"phrase_sw\", \"foo a bar b c\", \"boost_d\", \"2.0\"));    \n    assertU(adoc(\"id\", \"s2\", \"phrase_sw\", \"foo a b bar c\", \"boost_d\", \"3.0\"));    \n    assertU(adoc(\"id\", \"s3\", \"phrase_sw\", \"foo a b c bar\", \"boost_d\", \"4.0\"));    \n    assertU(commit());\n\n    assertQ(\"default order assumption wrong\",\n        req(\"q\", \"foo bar\",\n            \"qf\", \"phrase_sw\",\n            \"bf\", \"boost_d\",\n            \"fl\", \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s3']\",\n        \"//doc[2]/str[@name='id'][.='s2']\",\n        \"//doc[3]/str[@name='id'][.='s1']\",\n        \"//doc[4]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"pf not working\",\n        req(\"q\", \"foo bar\",\n            \"qf\", \"phrase_sw\",\n            \"pf\", \"phrase_sw^10\",\n            \"bf\", \"boost_d\",\n            \"fl\", \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\"pf2 not working\",\n        req(\"q\",   \"foo bar\", \n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"pf3 not working\",\n        req(\"q\",   \"a b bar\", \n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s2']\"); \n\n    assertQ(\"ps not working for pf2\",\n        req(\"q\",   \"bar foo\", \n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"ps\",  \"2\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"ps not working for pf3\",\n        req(\"q\",   \"a bar foo\", \n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"ps\",  \"3\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"debugQuery\",  \"true\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\"); \n    \n    assertQ(\"ps/ps2/ps3 with default slop overrides not working\",\n        req(\"q\", \"zzzz xxxx cccc vvvv\",\n            \"qf\", \"phrase_sw\",\n            \"pf\", \"phrase_sw~1^10 phrase_sw~2^20 phrase_sw^30\",\n            \"pf2\", \"phrase_sw~2^22 phrase_sw^33\",\n            \"pf3\", \"phrase_sw~2^222 phrase_sw^333\",\n            \"ps\", \"3\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~1^10.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~2^20.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~3^30.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"cccc vvvv\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx\\\"~3^33.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc\\\"~3^33.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"cccc vvvv\\\"~3^33.0')]\",        \n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc\\\"~2^222.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc vvvv\\\"~2^222.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc\\\"~3^333.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc vvvv\\\"~3^333.0')]\"\n     );\n\n    assertQ(\n        \"ps2 not working\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw^10\", \"ps2\",\n            \"2\", \"bf\", \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\n        \"Specifying slop in pf2 param not working\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw~2^10\", \"bf\",\n            \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\n        \"Slop in ps2 parameter should override ps\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw^10\", \"ps\",\n            \"0\", \"ps2\", \"2\", \"bf\", \"boost_d\", \"fl\", \"score,*\", \"defType\",\n            \"edismax\"), \"//doc[1]/str[@name='id'][.='s0']\");\n\n    assertQ(\n        \"ps3 not working\",\n        req(\"q\", \"a bar foo\", \"qf\", \"phrase_sw\", \"pf3\", \"phrase_sw^10\", \"ps3\",\n            \"3\", \"bf\", \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\");\n    \n    assertQ(\n        \"Specifying slop in pf3 param not working\",\n        req(\"q\", \"a bar foo\", \"qf\", \"phrase_sw\", \"pf3\", \"phrase_sw~3^10\", \"bf\",\n            \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\");\n   \n    assertQ(\"ps2 should not override slop specified inline in pf2\",\n        req(\"q\", \"zzzz xxxx cccc vvvv\",\n            \"qf\", \"phrase_sw\",\n            \"pf2\", \"phrase_sw~2^22\",\n            \"ps2\", \"4\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx\\\"~2^22.0')]\"\n     );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testPfPs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testPfPs().mjava","sourceNew":"  // test phrase fields including pf2 pf3 and phrase slop\n  public void testPfPs() {\n    assertU(adoc(\"id\", \"s0\", \"phrase_sw\", \"foo bar a b c\", \"boost_d\", \"1.0\"));    \n    assertU(adoc(\"id\", \"s1\", \"phrase_sw\", \"foo a bar b c\", \"boost_d\", \"2.0\"));    \n    assertU(adoc(\"id\", \"s2\", \"phrase_sw\", \"foo a b bar c\", \"boost_d\", \"3.0\"));    \n    assertU(adoc(\"id\", \"s3\", \"phrase_sw\", \"foo a b c bar\", \"boost_d\", \"4.0\"));    \n    assertU(commit());\n\n    assertQ(\"default order assumption wrong\",\n        req(\"q\", \"foo bar\",\n            \"qf\", \"phrase_sw\",\n            \"bf\", \"boost_d\",\n            \"fl\", \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s3']\",\n        \"//doc[2]/str[@name='id'][.='s2']\",\n        \"//doc[3]/str[@name='id'][.='s1']\",\n        \"//doc[4]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"pf not working\",\n        req(\"q\", \"foo bar\",\n            \"qf\", \"phrase_sw\",\n            \"pf\", \"phrase_sw^10\",\n            \"bf\", \"boost_d\",\n            \"fl\", \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\"pf2 not working\",\n        req(\"q\",   \"foo bar\", \n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"pf3 not working\",\n        req(\"q\",   \"a b bar\", \n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s2']\"); \n\n    assertQ(\"ps not working for pf2\",\n        req(\"q\",   \"bar foo\", \n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"ps\",  \"2\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"ps not working for pf3\",\n        req(\"q\",   \"a bar foo\", \n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"ps\",  \"3\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"debugQuery\",  \"true\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\"); \n    \n    assertQ(\"ps/ps2/ps3 with default slop overrides not working\",\n        req(\"q\", \"zzzz xxxx cccc vvvv\",\n            \"qf\", \"phrase_sw\",\n            \"pf\", \"phrase_sw~1^10 phrase_sw~2^20 phrase_sw^30\",\n            \"pf2\", \"phrase_sw~2^22 phrase_sw^33\",\n            \"pf3\", \"phrase_sw~2^222 phrase_sw^333\",\n            \"ps\", \"3\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~1^10.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~2^20.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~3^30.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"cccc vvvv\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx\\\"~3^33.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc\\\"~3^33.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"cccc vvvv\\\"~3^33.0')]\",        \n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc\\\"~2^222.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc vvvv\\\"~2^222.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc\\\"~3^333.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc vvvv\\\"~3^333.0')]\"\n     );\n\n    assertQ(\n        \"ps2 not working\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw^10\", \"ps2\",\n            \"2\", \"bf\", \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\n        \"Specifying slop in pf2 param not working\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw~2^10\", \"bf\",\n            \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\n        \"Slop in ps2 parameter should override ps\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw^10\", \"ps\",\n            \"0\", \"ps2\", \"2\", \"bf\", \"boost_d\", \"fl\", \"score,*\", \"defType\",\n            \"edismax\"), \"//doc[1]/str[@name='id'][.='s0']\");\n\n    assertQ(\n        \"ps3 not working\",\n        req(\"q\", \"a bar foo\", \"qf\", \"phrase_sw\", \"pf3\", \"phrase_sw^10\", \"ps3\",\n            \"3\", \"bf\", \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\");\n    \n    assertQ(\n        \"Specifying slop in pf3 param not working\",\n        req(\"q\", \"a bar foo\", \"qf\", \"phrase_sw\", \"pf3\", \"phrase_sw~3^10\", \"bf\",\n            \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\");\n   \n    assertQ(\"ps2 should not override slop specified inline in pf2\",\n        req(\"q\", \"zzzz xxxx cccc vvvv\",\n            \"qf\", \"phrase_sw\",\n            \"pf2\", \"phrase_sw~2^22\",\n            \"ps2\", \"4\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx\\\"~2^22.0')]\"\n     );\n\n  }\n\n","sourceOld":"  // test phrase fields including pf2 pf3 and phrase slop\n  public void testPfPs() {\n    assertU(adoc(\"id\", \"s0\", \"phrase_sw\", \"foo bar a b c\", \"boost_d\", \"1.0\"));    \n    assertU(adoc(\"id\", \"s1\", \"phrase_sw\", \"foo a bar b c\", \"boost_d\", \"2.0\"));    \n    assertU(adoc(\"id\", \"s2\", \"phrase_sw\", \"foo a b bar c\", \"boost_d\", \"3.0\"));    \n    assertU(adoc(\"id\", \"s3\", \"phrase_sw\", \"foo a b c bar\", \"boost_d\", \"4.0\"));    \n    assertU(commit());\n\n    assertQ(\"default order assumption wrong\",\n        req(\"q\", \"foo bar\",\n            \"qf\", \"phrase_sw\",\n            \"bf\", \"boost_d\",\n            \"fl\", \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s3']\",\n        \"//doc[2]/str[@name='id'][.='s2']\",\n        \"//doc[3]/str[@name='id'][.='s1']\",\n        \"//doc[4]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"pf not working\",\n        req(\"q\", \"foo bar\",\n            \"qf\", \"phrase_sw\",\n            \"pf\", \"phrase_sw^10\",\n            \"bf\", \"boost_d\",\n            \"fl\", \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\"pf2 not working\",\n        req(\"q\",   \"foo bar\", \n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"pf3 not working\",\n        req(\"q\",   \"a b bar\", \n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s2']\"); \n\n    assertQ(\"ps not working for pf2\",\n        req(\"q\",   \"bar foo\", \n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"ps\",  \"2\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"ps not working for pf3\",\n        req(\"q\",   \"a bar foo\", \n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"ps\",  \"3\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"debugQuery\",  \"true\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\"); \n    \n    assertQ(\"ps/ps2/ps3 with default slop overrides not working\",\n        req(\"q\", \"zzzz xxxx cccc vvvv\",\n            \"qf\", \"phrase_sw\",\n            \"pf\", \"phrase_sw~1^10 phrase_sw~2^20 phrase_sw^30\",\n            \"pf2\", \"phrase_sw~2^22 phrase_sw^33\",\n            \"pf3\", \"phrase_sw~2^222 phrase_sw^333\",\n            \"ps\", \"3\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~1^10.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~2^20.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~3^30.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"cccc vvvv\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx\\\"~3^33.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc\\\"~3^33.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"cccc vvvv\\\"~3^33.0')]\",        \n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc\\\"~2^222.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc vvvv\\\"~2^222.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc\\\"~3^333.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc vvvv\\\"~3^333.0')]\"\n     );\n\n    assertQ(\n        \"ps2 not working\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw^10\", \"ps2\",\n            \"2\", \"bf\", \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\n        \"Specifying slop in pf2 param not working\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw~2^10\", \"bf\",\n            \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\n        \"Slop in ps2 parameter should override ps\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw^10\", \"ps\",\n            \"0\", \"ps2\", \"2\", \"bf\", \"boost_d\", \"fl\", \"score,*\", \"defType\",\n            \"edismax\"), \"//doc[1]/str[@name='id'][.='s0']\");\n\n    assertQ(\n        \"ps3 not working\",\n        req(\"q\", \"a bar foo\", \"qf\", \"phrase_sw\", \"pf3\", \"phrase_sw^10\", \"ps3\",\n            \"3\", \"bf\", \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\");\n    \n    assertQ(\n        \"Specifying slop in pf3 param not working\",\n        req(\"q\", \"a bar foo\", \"qf\", \"phrase_sw\", \"pf3\", \"phrase_sw~3^10\", \"bf\",\n            \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\");\n   \n    assertQ(\"ps2 should not override slop specified inline in pf2\",\n        req(\"q\", \"zzzz xxxx cccc vvvv\",\n            \"qf\", \"phrase_sw\",\n            \"pf2\", \"phrase_sw~2^22\",\n            \"ps2\", \"4\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx\\\"~2^22.0')]\"\n     );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acb10061e140a7f3d5035b8be54d966ebcb672ad","date":1407934573,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testPfPs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testPfPs().mjava","sourceNew":"  // test phrase fields including pf2 pf3 and phrase slop\n  public void testPfPs() {\n    assertU(adoc(\"id\", \"s0\", \"phrase_sw\", \"foo bar a b c\", \"boost_d\", \"1.0\"));    \n    assertU(adoc(\"id\", \"s1\", \"phrase_sw\", \"foo a bar b c\", \"boost_d\", \"2.0\"));    \n    assertU(adoc(\"id\", \"s2\", \"phrase_sw\", \"foo a b bar c\", \"boost_d\", \"3.0\"));    \n    assertU(adoc(\"id\", \"s3\", \"phrase_sw\", \"foo a b c bar\", \"boost_d\", \"4.0\"));\n    assertU(commit());\n\n    assertQ(\"default order assumption wrong\",\n        req(\"q\", \"foo bar\",\n            \"qf\", \"phrase_sw\",\n            \"bf\", \"boost_d\",\n            \"fl\", \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s3']\",\n        \"//doc[2]/str[@name='id'][.='s2']\",\n        \"//doc[3]/str[@name='id'][.='s1']\",\n        \"//doc[4]/str[@name='id'][.='s0']\");\n\n    assertQ(\"pf not working\",\n        req(\"q\", \"foo bar\",\n            \"qf\", \"phrase_sw\",\n            \"pf\", \"phrase_sw^10\",\n            \"bf\", \"boost_d\",\n            \"fl\", \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n\n    assertQ(\"pf2 not working\",\n        req(\"q\",   \"foo bar\",\n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n\n    assertQ(\"pf3 not working\",\n        req(\"q\",   \"a b bar\",\n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s2']\");\n\n    assertQ(\"ps not working for pf2\",\n        req(\"q\",   \"bar foo\",\n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"ps\",  \"2\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n\n    assertQ(\"ps not working for pf3\",\n        req(\"q\",   \"a bar foo\",\n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"ps\",  \"3\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"debugQuery\",  \"true\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\");\n\n    assertQ(\"ps/ps2/ps3 with default slop overrides not working\",\n        req(\"q\", \"zzzz xxxx cccc vvvv\",\n            \"qf\", \"phrase_sw\",\n            \"pf\", \"phrase_sw~1^10 phrase_sw~2^20 phrase_sw^30\",\n            \"pf2\", \"phrase_sw~2^22 phrase_sw^33\",\n            \"pf3\", \"phrase_sw~2^222 phrase_sw^333\",\n            \"ps\", \"3\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~1^10.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~2^20.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~3^30.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"cccc vvvv\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx\\\"~3^33.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc\\\"~3^33.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"cccc vvvv\\\"~3^33.0')]\",        \n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc\\\"~2^222.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc vvvv\\\"~2^222.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc\\\"~3^333.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc vvvv\\\"~3^333.0')]\"\n     );\n\n    assertQ(\n        \"ps2 not working\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw^10\", \"ps2\",\n            \"2\", \"bf\", \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\n        \"Specifying slop in pf2 param not working\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw~2^10\", \"bf\",\n            \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\n        \"Slop in ps2 parameter should override ps\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw^10\", \"ps\",\n            \"0\", \"ps2\", \"2\", \"bf\", \"boost_d\", \"fl\", \"score,*\", \"defType\",\n            \"edismax\"), \"//doc[1]/str[@name='id'][.='s0']\");\n\n    assertQ(\n        \"ps3 not working\",\n        req(\"q\", \"a bar foo\", \"qf\", \"phrase_sw\", \"pf3\", \"phrase_sw^10\", \"ps3\",\n            \"3\", \"bf\", \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\");\n    \n    assertQ(\n        \"Specifying slop in pf3 param not working\",\n        req(\"q\", \"a bar foo\", \"qf\", \"phrase_sw\", \"pf3\", \"phrase_sw~3^10\", \"bf\",\n            \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\");\n   \n    assertQ(\"ps2 should not override slop specified inline in pf2\",\n        req(\"q\", \"zzzz xxxx cccc vvvv\",\n            \"qf\", \"phrase_sw\",\n            \"pf2\", \"phrase_sw~2^22\",\n            \"ps2\", \"4\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx\\\"~2^22.0')]\"\n     );\n\n    assertQ(\"phrase field queries spanning multiple fields should be within their own dismax queries\",\n        req(\"q\", \"aaaa bbbb cccc\",\n            \"qf\", \"phrase_sw phrase1_sw\",\n            \"pf2\", \"phrase_sw phrase1_sw\",\n            \"pf3\", \"phrase_sw phrase1_sw\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"aaaa bbbb\\\" | phrase1_sw:\\\"aaaa bbbb\\\")')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"bbbb cccc\\\" | phrase1_sw:\\\"bbbb cccc\\\")')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"aaaa bbbb cccc\\\" | phrase1_sw:\\\"aaaa bbbb cccc\\\")')]\"\n    );\n  }\n\n","sourceOld":"  // test phrase fields including pf2 pf3 and phrase slop\n  public void testPfPs() {\n    assertU(adoc(\"id\", \"s0\", \"phrase_sw\", \"foo bar a b c\", \"boost_d\", \"1.0\"));    \n    assertU(adoc(\"id\", \"s1\", \"phrase_sw\", \"foo a bar b c\", \"boost_d\", \"2.0\"));    \n    assertU(adoc(\"id\", \"s2\", \"phrase_sw\", \"foo a b bar c\", \"boost_d\", \"3.0\"));    \n    assertU(adoc(\"id\", \"s3\", \"phrase_sw\", \"foo a b c bar\", \"boost_d\", \"4.0\"));    \n    assertU(commit());\n\n    assertQ(\"default order assumption wrong\",\n        req(\"q\", \"foo bar\",\n            \"qf\", \"phrase_sw\",\n            \"bf\", \"boost_d\",\n            \"fl\", \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s3']\",\n        \"//doc[2]/str[@name='id'][.='s2']\",\n        \"//doc[3]/str[@name='id'][.='s1']\",\n        \"//doc[4]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"pf not working\",\n        req(\"q\", \"foo bar\",\n            \"qf\", \"phrase_sw\",\n            \"pf\", \"phrase_sw^10\",\n            \"bf\", \"boost_d\",\n            \"fl\", \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\"pf2 not working\",\n        req(\"q\",   \"foo bar\", \n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"pf3 not working\",\n        req(\"q\",   \"a b bar\", \n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s2']\"); \n\n    assertQ(\"ps not working for pf2\",\n        req(\"q\",   \"bar foo\", \n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"ps\",  \"2\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"ps not working for pf3\",\n        req(\"q\",   \"a bar foo\", \n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"ps\",  \"3\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"debugQuery\",  \"true\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\"); \n    \n    assertQ(\"ps/ps2/ps3 with default slop overrides not working\",\n        req(\"q\", \"zzzz xxxx cccc vvvv\",\n            \"qf\", \"phrase_sw\",\n            \"pf\", \"phrase_sw~1^10 phrase_sw~2^20 phrase_sw^30\",\n            \"pf2\", \"phrase_sw~2^22 phrase_sw^33\",\n            \"pf3\", \"phrase_sw~2^222 phrase_sw^333\",\n            \"ps\", \"3\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~1^10.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~2^20.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~3^30.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"cccc vvvv\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx\\\"~3^33.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc\\\"~3^33.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"cccc vvvv\\\"~3^33.0')]\",        \n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc\\\"~2^222.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc vvvv\\\"~2^222.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc\\\"~3^333.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc vvvv\\\"~3^333.0')]\"\n     );\n\n    assertQ(\n        \"ps2 not working\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw^10\", \"ps2\",\n            \"2\", \"bf\", \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\n        \"Specifying slop in pf2 param not working\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw~2^10\", \"bf\",\n            \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\n        \"Slop in ps2 parameter should override ps\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw^10\", \"ps\",\n            \"0\", \"ps2\", \"2\", \"bf\", \"boost_d\", \"fl\", \"score,*\", \"defType\",\n            \"edismax\"), \"//doc[1]/str[@name='id'][.='s0']\");\n\n    assertQ(\n        \"ps3 not working\",\n        req(\"q\", \"a bar foo\", \"qf\", \"phrase_sw\", \"pf3\", \"phrase_sw^10\", \"ps3\",\n            \"3\", \"bf\", \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\");\n    \n    assertQ(\n        \"Specifying slop in pf3 param not working\",\n        req(\"q\", \"a bar foo\", \"qf\", \"phrase_sw\", \"pf3\", \"phrase_sw~3^10\", \"bf\",\n            \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\");\n   \n    assertQ(\"ps2 should not override slop specified inline in pf2\",\n        req(\"q\", \"zzzz xxxx cccc vvvv\",\n            \"qf\", \"phrase_sw\",\n            \"pf2\", \"phrase_sw~2^22\",\n            \"ps2\", \"4\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx\\\"~2^22.0')]\"\n     );\n\n  }\n\n","bugFix":["df2d1b614e277836f9b1bb0e2bbbfd12fa9f2af6","d9e959ce5e0805c43916e999d21f2018a2b475ab"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0cdf628dda21ad509f09608c835dc27541d1ca3","date":1444665868,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testPfPs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testPfPs().mjava","sourceNew":"  // test phrase fields including pf2 pf3 and phrase slop\n  public void testPfPs() {\n    assertU(adoc(\"id\", \"s0\", \"phrase_sw\", \"foo bar a b c\", \"boost_d\", \"1.0\"));    \n    assertU(adoc(\"id\", \"s1\", \"phrase_sw\", \"foo a bar b c\", \"boost_d\", \"2.0\"));    \n    assertU(adoc(\"id\", \"s2\", \"phrase_sw\", \"foo a b bar c\", \"boost_d\", \"3.0\"));    \n    assertU(adoc(\"id\", \"s3\", \"phrase_sw\", \"foo a b c bar\", \"boost_d\", \"4.0\"));\n    assertU(commit());\n\n    assertQ(\"default order assumption wrong\",\n        req(\"q\", \"foo bar\",\n            \"qf\", \"phrase_sw\",\n            \"bf\", \"boost_d\",\n            \"fl\", \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s3']\",\n        \"//doc[2]/str[@name='id'][.='s2']\",\n        \"//doc[3]/str[@name='id'][.='s1']\",\n        \"//doc[4]/str[@name='id'][.='s0']\");\n\n    assertQ(\"pf not working\",\n        req(\"q\", \"foo bar\",\n            \"qf\", \"phrase_sw\",\n            \"pf\", \"phrase_sw^10\",\n            \"bf\", \"boost_d\",\n            \"fl\", \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n\n    assertQ(\"pf2 not working\",\n        req(\"q\",   \"foo bar\",\n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n\n    assertQ(\"pf3 not working\",\n        req(\"q\",   \"a b bar\",\n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s2']\");\n\n    assertQ(\"ps not working for pf2\",\n        req(\"q\",   \"bar foo\",\n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"ps\",  \"2\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n\n    assertQ(\"ps not working for pf3\",\n        req(\"q\",   \"a bar foo\",\n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"ps\",  \"3\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"debugQuery\",  \"true\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\");\n\n    assertQ(\"ps/ps2/ps3 with default slop overrides not working\",\n        req(\"q\", \"zzzz xxxx cccc vvvv\",\n            \"qf\", \"phrase_sw\",\n            \"pf\", \"phrase_sw~1^10 phrase_sw~2^20 phrase_sw^30\",\n            \"pf2\", \"phrase_sw~2^22 phrase_sw^33\",\n            \"pf3\", \"phrase_sw~2^222 phrase_sw^333\",\n            \"ps\", \"3\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~1)^10.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~2)^20.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~3)^30.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx\\\"~2)^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"xxxx cccc\\\"~2)^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"cccc vvvv\\\"~2)^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx\\\"~3)^33.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"xxxx cccc\\\"~3)^33.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"cccc vvvv\\\"~3)^33.0')]\",        \n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx cccc\\\"~2)^222.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"xxxx cccc vvvv\\\"~2)^222.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx cccc\\\"~3)^333.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"xxxx cccc vvvv\\\"~3)^333.0')]\"\n     );\n\n    assertQ(\n        \"ps2 not working\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw^10\", \"ps2\",\n            \"2\", \"bf\", \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\n        \"Specifying slop in pf2 param not working\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw~2^10\", \"bf\",\n            \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\n        \"Slop in ps2 parameter should override ps\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw^10\", \"ps\",\n            \"0\", \"ps2\", \"2\", \"bf\", \"boost_d\", \"fl\", \"score,*\", \"defType\",\n            \"edismax\"), \"//doc[1]/str[@name='id'][.='s0']\");\n\n    assertQ(\n        \"ps3 not working\",\n        req(\"q\", \"a bar foo\", \"qf\", \"phrase_sw\", \"pf3\", \"phrase_sw^10\", \"ps3\",\n            \"3\", \"bf\", \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\");\n    \n    assertQ(\n        \"Specifying slop in pf3 param not working\",\n        req(\"q\", \"a bar foo\", \"qf\", \"phrase_sw\", \"pf3\", \"phrase_sw~3^10\", \"bf\",\n            \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\");\n   \n    assertQ(\"ps2 should not override slop specified inline in pf2\",\n        req(\"q\", \"zzzz xxxx cccc vvvv\",\n            \"qf\", \"phrase_sw\",\n            \"pf2\", \"phrase_sw~2^22\",\n            \"ps2\", \"4\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx\\\"~2)^22.0')]\"\n     );\n\n    assertQ(\"phrase field queries spanning multiple fields should be within their own dismax queries\",\n        req(\"q\", \"aaaa bbbb cccc\",\n            \"qf\", \"phrase_sw phrase1_sw\",\n            \"pf2\", \"phrase_sw phrase1_sw\",\n            \"pf3\", \"phrase_sw phrase1_sw\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"aaaa bbbb\\\" | phrase1_sw:\\\"aaaa bbbb\\\")')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"bbbb cccc\\\" | phrase1_sw:\\\"bbbb cccc\\\")')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"aaaa bbbb cccc\\\" | phrase1_sw:\\\"aaaa bbbb cccc\\\")')]\"\n    );\n  }\n\n","sourceOld":"  // test phrase fields including pf2 pf3 and phrase slop\n  public void testPfPs() {\n    assertU(adoc(\"id\", \"s0\", \"phrase_sw\", \"foo bar a b c\", \"boost_d\", \"1.0\"));    \n    assertU(adoc(\"id\", \"s1\", \"phrase_sw\", \"foo a bar b c\", \"boost_d\", \"2.0\"));    \n    assertU(adoc(\"id\", \"s2\", \"phrase_sw\", \"foo a b bar c\", \"boost_d\", \"3.0\"));    \n    assertU(adoc(\"id\", \"s3\", \"phrase_sw\", \"foo a b c bar\", \"boost_d\", \"4.0\"));\n    assertU(commit());\n\n    assertQ(\"default order assumption wrong\",\n        req(\"q\", \"foo bar\",\n            \"qf\", \"phrase_sw\",\n            \"bf\", \"boost_d\",\n            \"fl\", \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s3']\",\n        \"//doc[2]/str[@name='id'][.='s2']\",\n        \"//doc[3]/str[@name='id'][.='s1']\",\n        \"//doc[4]/str[@name='id'][.='s0']\");\n\n    assertQ(\"pf not working\",\n        req(\"q\", \"foo bar\",\n            \"qf\", \"phrase_sw\",\n            \"pf\", \"phrase_sw^10\",\n            \"bf\", \"boost_d\",\n            \"fl\", \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n\n    assertQ(\"pf2 not working\",\n        req(\"q\",   \"foo bar\",\n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n\n    assertQ(\"pf3 not working\",\n        req(\"q\",   \"a b bar\",\n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s2']\");\n\n    assertQ(\"ps not working for pf2\",\n        req(\"q\",   \"bar foo\",\n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"ps\",  \"2\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n\n    assertQ(\"ps not working for pf3\",\n        req(\"q\",   \"a bar foo\",\n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"ps\",  \"3\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"debugQuery\",  \"true\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\");\n\n    assertQ(\"ps/ps2/ps3 with default slop overrides not working\",\n        req(\"q\", \"zzzz xxxx cccc vvvv\",\n            \"qf\", \"phrase_sw\",\n            \"pf\", \"phrase_sw~1^10 phrase_sw~2^20 phrase_sw^30\",\n            \"pf2\", \"phrase_sw~2^22 phrase_sw^33\",\n            \"pf3\", \"phrase_sw~2^222 phrase_sw^333\",\n            \"ps\", \"3\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~1^10.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~2^20.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~3^30.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"cccc vvvv\\\"~2^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx\\\"~3^33.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc\\\"~3^33.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"cccc vvvv\\\"~3^33.0')]\",        \n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc\\\"~2^222.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc vvvv\\\"~2^222.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx cccc\\\"~3^333.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"xxxx cccc vvvv\\\"~3^333.0')]\"\n     );\n\n    assertQ(\n        \"ps2 not working\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw^10\", \"ps2\",\n            \"2\", \"bf\", \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\n        \"Specifying slop in pf2 param not working\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw~2^10\", \"bf\",\n            \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\n        \"Slop in ps2 parameter should override ps\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw^10\", \"ps\",\n            \"0\", \"ps2\", \"2\", \"bf\", \"boost_d\", \"fl\", \"score,*\", \"defType\",\n            \"edismax\"), \"//doc[1]/str[@name='id'][.='s0']\");\n\n    assertQ(\n        \"ps3 not working\",\n        req(\"q\", \"a bar foo\", \"qf\", \"phrase_sw\", \"pf3\", \"phrase_sw^10\", \"ps3\",\n            \"3\", \"bf\", \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\");\n    \n    assertQ(\n        \"Specifying slop in pf3 param not working\",\n        req(\"q\", \"a bar foo\", \"qf\", \"phrase_sw\", \"pf3\", \"phrase_sw~3^10\", \"bf\",\n            \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\");\n   \n    assertQ(\"ps2 should not override slop specified inline in pf2\",\n        req(\"q\", \"zzzz xxxx cccc vvvv\",\n            \"qf\", \"phrase_sw\",\n            \"pf2\", \"phrase_sw~2^22\",\n            \"ps2\", \"4\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'phrase_sw:\\\"zzzz xxxx\\\"~2^22.0')]\"\n     );\n\n    assertQ(\"phrase field queries spanning multiple fields should be within their own dismax queries\",\n        req(\"q\", \"aaaa bbbb cccc\",\n            \"qf\", \"phrase_sw phrase1_sw\",\n            \"pf2\", \"phrase_sw phrase1_sw\",\n            \"pf3\", \"phrase_sw phrase1_sw\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"aaaa bbbb\\\" | phrase1_sw:\\\"aaaa bbbb\\\")')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"bbbb cccc\\\" | phrase1_sw:\\\"bbbb cccc\\\")')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"aaaa bbbb cccc\\\" | phrase1_sw:\\\"aaaa bbbb cccc\\\")')]\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49dd2950028d6b59839f54d3801d77f769fa22ef","date":1447264120,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testPfPs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testPfPs().mjava","sourceNew":"  // test phrase fields including pf2 pf3 and phrase slop\n  public void testPfPs() {\n    assertU(adoc(\"id\", \"s0\", \"phrase_sw\", \"foo bar a b c\", \"boost_d\", \"1.0\"));    \n    assertU(adoc(\"id\", \"s1\", \"phrase_sw\", \"foo a bar b c\", \"boost_d\", \"2.0\"));    \n    assertU(adoc(\"id\", \"s2\", \"phrase_sw\", \"foo a b bar c\", \"boost_d\", \"3.0\"));    \n    assertU(adoc(\"id\", \"s3\", \"phrase_sw\", \"foo a b c bar\", \"boost_d\", \"4.0\"));\n    assertU(commit());\n\n    assertQ(\"default order assumption wrong\",\n        req(\"q\", \"foo bar\",\n            \"qf\", \"phrase_sw\",\n            \"bf\", \"boost_d\",\n            \"fl\", \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s3']\",\n        \"//doc[2]/str[@name='id'][.='s2']\",\n        \"//doc[3]/str[@name='id'][.='s1']\",\n        \"//doc[4]/str[@name='id'][.='s0']\");\n\n    assertQ(\"pf not working\",\n        req(\"q\", \"foo bar\",\n            \"qf\", \"phrase_sw\",\n            \"pf\", \"phrase_sw^10\",\n            \"fl\", \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n\n    assertQ(\"pf2 not working\",\n        req(\"q\",   \"foo bar\",\n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n\n    assertQ(\"pf3 not working\",\n        req(\"q\",   \"a b bar\",\n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s2']\");\n\n    assertQ(\"ps not working for pf2\",\n        req(\"q\",   \"bar foo\",\n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"ps\",  \"2\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n\n    assertQ(\"ps not working for pf3\",\n        req(\"q\",   \"a bar foo\",\n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"ps\",  \"3\",\n            \"fl\",  \"score,*\",\n            \"debugQuery\",  \"true\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\");\n\n    assertQ(\"ps/ps2/ps3 with default slop overrides not working\",\n        req(\"q\", \"zzzz xxxx cccc vvvv\",\n            \"qf\", \"phrase_sw\",\n            \"pf\", \"phrase_sw~1^10 phrase_sw~2^20 phrase_sw^30\",\n            \"pf2\", \"phrase_sw~2^22 phrase_sw^33\",\n            \"pf3\", \"phrase_sw~2^222 phrase_sw^333\",\n            \"ps\", \"3\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~1)^10.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~2)^20.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~3)^30.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx\\\"~2)^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"xxxx cccc\\\"~2)^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"cccc vvvv\\\"~2)^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx\\\"~3)^33.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"xxxx cccc\\\"~3)^33.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"cccc vvvv\\\"~3)^33.0')]\",        \n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx cccc\\\"~2)^222.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"xxxx cccc vvvv\\\"~2)^222.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx cccc\\\"~3)^333.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"xxxx cccc vvvv\\\"~3)^333.0')]\"\n     );\n\n    assertQ(\n        \"ps2 not working\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw^10\", \"ps2\",\n            \"2\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\n        \"Specifying slop in pf2 param not working\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw~2^10\", \n            \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\n        \"Slop in ps2 parameter should override ps\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw^10\", \"ps\",\n            \"0\", \"ps2\", \"2\", \"fl\", \"score,*\", \"defType\",\n            \"edismax\"), \"//doc[1]/str[@name='id'][.='s0']\");\n\n    assertQ(\n        \"ps3 not working\",\n        req(\"q\", \"a bar foo\", \"qf\", \"phrase_sw\", \"pf3\", \"phrase_sw^10\", \"ps3\",\n            \"3\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\");\n    \n    assertQ(\n        \"Specifying slop in pf3 param not working\",\n        req(\"q\", \"a bar foo\", \"qf\", \"phrase_sw\", \"pf3\", \"phrase_sw~3^10\",\n            \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\");\n   \n    assertQ(\"ps2 should not override slop specified inline in pf2\",\n        req(\"q\", \"zzzz xxxx cccc vvvv\",\n            \"qf\", \"phrase_sw\",\n            \"pf2\", \"phrase_sw~2^22\",\n            \"ps2\", \"4\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx\\\"~2)^22.0')]\"\n     );\n\n    assertQ(\"phrase field queries spanning multiple fields should be within their own dismax queries\",\n        req(\"q\", \"aaaa bbbb cccc\",\n            \"qf\", \"phrase_sw phrase1_sw\",\n            \"pf2\", \"phrase_sw phrase1_sw\",\n            \"pf3\", \"phrase_sw phrase1_sw\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"aaaa bbbb\\\" | phrase1_sw:\\\"aaaa bbbb\\\")')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"bbbb cccc\\\" | phrase1_sw:\\\"bbbb cccc\\\")')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"aaaa bbbb cccc\\\" | phrase1_sw:\\\"aaaa bbbb cccc\\\")')]\"\n    );\n  }\n\n","sourceOld":"  // test phrase fields including pf2 pf3 and phrase slop\n  public void testPfPs() {\n    assertU(adoc(\"id\", \"s0\", \"phrase_sw\", \"foo bar a b c\", \"boost_d\", \"1.0\"));    \n    assertU(adoc(\"id\", \"s1\", \"phrase_sw\", \"foo a bar b c\", \"boost_d\", \"2.0\"));    \n    assertU(adoc(\"id\", \"s2\", \"phrase_sw\", \"foo a b bar c\", \"boost_d\", \"3.0\"));    \n    assertU(adoc(\"id\", \"s3\", \"phrase_sw\", \"foo a b c bar\", \"boost_d\", \"4.0\"));\n    assertU(commit());\n\n    assertQ(\"default order assumption wrong\",\n        req(\"q\", \"foo bar\",\n            \"qf\", \"phrase_sw\",\n            \"bf\", \"boost_d\",\n            \"fl\", \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s3']\",\n        \"//doc[2]/str[@name='id'][.='s2']\",\n        \"//doc[3]/str[@name='id'][.='s1']\",\n        \"//doc[4]/str[@name='id'][.='s0']\");\n\n    assertQ(\"pf not working\",\n        req(\"q\", \"foo bar\",\n            \"qf\", \"phrase_sw\",\n            \"pf\", \"phrase_sw^10\",\n            \"bf\", \"boost_d\",\n            \"fl\", \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n\n    assertQ(\"pf2 not working\",\n        req(\"q\",   \"foo bar\",\n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n\n    assertQ(\"pf3 not working\",\n        req(\"q\",   \"a b bar\",\n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s2']\");\n\n    assertQ(\"ps not working for pf2\",\n        req(\"q\",   \"bar foo\",\n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"ps\",  \"2\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n\n    assertQ(\"ps not working for pf3\",\n        req(\"q\",   \"a bar foo\",\n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"ps\",  \"3\",\n            \"bf\",  \"boost_d\",\n            \"fl\",  \"score,*\",\n            \"debugQuery\",  \"true\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\");\n\n    assertQ(\"ps/ps2/ps3 with default slop overrides not working\",\n        req(\"q\", \"zzzz xxxx cccc vvvv\",\n            \"qf\", \"phrase_sw\",\n            \"pf\", \"phrase_sw~1^10 phrase_sw~2^20 phrase_sw^30\",\n            \"pf2\", \"phrase_sw~2^22 phrase_sw^33\",\n            \"pf3\", \"phrase_sw~2^222 phrase_sw^333\",\n            \"ps\", \"3\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~1)^10.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~2)^20.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~3)^30.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx\\\"~2)^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"xxxx cccc\\\"~2)^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"cccc vvvv\\\"~2)^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx\\\"~3)^33.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"xxxx cccc\\\"~3)^33.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"cccc vvvv\\\"~3)^33.0')]\",        \n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx cccc\\\"~2)^222.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"xxxx cccc vvvv\\\"~2)^222.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx cccc\\\"~3)^333.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"xxxx cccc vvvv\\\"~3)^333.0')]\"\n     );\n\n    assertQ(\n        \"ps2 not working\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw^10\", \"ps2\",\n            \"2\", \"bf\", \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\n        \"Specifying slop in pf2 param not working\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw~2^10\", \"bf\",\n            \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\n        \"Slop in ps2 parameter should override ps\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw^10\", \"ps\",\n            \"0\", \"ps2\", \"2\", \"bf\", \"boost_d\", \"fl\", \"score,*\", \"defType\",\n            \"edismax\"), \"//doc[1]/str[@name='id'][.='s0']\");\n\n    assertQ(\n        \"ps3 not working\",\n        req(\"q\", \"a bar foo\", \"qf\", \"phrase_sw\", \"pf3\", \"phrase_sw^10\", \"ps3\",\n            \"3\", \"bf\", \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\");\n    \n    assertQ(\n        \"Specifying slop in pf3 param not working\",\n        req(\"q\", \"a bar foo\", \"qf\", \"phrase_sw\", \"pf3\", \"phrase_sw~3^10\", \"bf\",\n            \"boost_d\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\");\n   \n    assertQ(\"ps2 should not override slop specified inline in pf2\",\n        req(\"q\", \"zzzz xxxx cccc vvvv\",\n            \"qf\", \"phrase_sw\",\n            \"pf2\", \"phrase_sw~2^22\",\n            \"ps2\", \"4\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx\\\"~2)^22.0')]\"\n     );\n\n    assertQ(\"phrase field queries spanning multiple fields should be within their own dismax queries\",\n        req(\"q\", \"aaaa bbbb cccc\",\n            \"qf\", \"phrase_sw phrase1_sw\",\n            \"pf2\", \"phrase_sw phrase1_sw\",\n            \"pf3\", \"phrase_sw phrase1_sw\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"aaaa bbbb\\\" | phrase1_sw:\\\"aaaa bbbb\\\")')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"bbbb cccc\\\" | phrase1_sw:\\\"bbbb cccc\\\")')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"aaaa bbbb cccc\\\" | phrase1_sw:\\\"aaaa bbbb cccc\\\")')]\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a08695eb0e2c01d06dd662674e3136641f093be","date":1450145331,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testPfPs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testPfPs().mjava","sourceNew":"  // test phrase fields including pf2 pf3 and phrase slop\n  public void testPfPs() {\n    assertU(adoc(\"id\", \"s0\", \"phrase_sw\", \"foo bar a b c\", \"boost_d\", \"1.0\"));    \n    assertU(adoc(\"id\", \"s1\", \"phrase_sw\", \"foo a bar b c\", \"boost_d\", \"2.0\"));    \n    assertU(adoc(\"id\", \"s2\", \"phrase_sw\", \"foo a b bar c\", \"boost_d\", \"3.0\"));    \n    assertU(adoc(\"id\", \"s3\", \"phrase_sw\", \"foo a b c bar\", \"boost_d\", \"4.0\"));    \n    assertU(commit());\n\n    assertQ(\"default order assumption wrong\",\n        req(\"q\", \"foo bar\",\n            \"qf\", \"phrase_sw\",\n            \"bf\", \"boost_d\",\n            \"fl\", \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s3']\",\n        \"//doc[2]/str[@name='id'][.='s2']\",\n        \"//doc[3]/str[@name='id'][.='s1']\",\n        \"//doc[4]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"pf not working\",\n        req(\"q\", \"foo bar\",\n            \"qf\", \"phrase_sw\",\n            \"pf\", \"phrase_sw^10\",\n            \"fl\", \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\"pf2 not working\",\n        req(\"q\",   \"foo bar\", \n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"pf3 not working\",\n        req(\"q\",   \"a b bar\", \n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s2']\"); \n\n    assertQ(\"ps not working for pf2\",\n        req(\"q\",   \"bar foo\", \n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"ps\",  \"2\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\"); \n\n    assertQ(\"ps not working for pf3\",\n        req(\"q\",   \"a bar foo\", \n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"ps\",  \"3\",\n            \"fl\",  \"score,*\",\n            \"debugQuery\",  \"true\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\"); \n    \n    assertQ(\"ps/ps2/ps3 with default slop overrides not working\",\n        req(\"q\", \"zzzz xxxx cccc vvvv\",\n            \"qf\", \"phrase_sw\",\n            \"pf\", \"phrase_sw~1^10 phrase_sw~2^20 phrase_sw^30\",\n            \"pf2\", \"phrase_sw~2^22 phrase_sw^33\",\n            \"pf3\", \"phrase_sw~2^222 phrase_sw^333\",\n            \"ps\", \"3\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~1)^10.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~2)^20.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~3)^30.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx\\\"~2)^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"xxxx cccc\\\"~2)^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"cccc vvvv\\\"~2)^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx\\\"~3)^33.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"xxxx cccc\\\"~3)^33.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"cccc vvvv\\\"~3)^33.0')]\",        \n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx cccc\\\"~2)^222.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"xxxx cccc vvvv\\\"~2)^222.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx cccc\\\"~3)^333.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"xxxx cccc vvvv\\\"~3)^333.0')]\"\n     );\n\n    assertQ(\n        \"ps2 not working\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw^10\", \"ps2\",\n            \"2\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\n        \"Specifying slop in pf2 param not working\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw~2^10\", \n            \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\n        \"Slop in ps2 parameter should override ps\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw^10\", \"ps\",\n            \"0\", \"ps2\", \"2\", \"fl\", \"score,*\", \"defType\",\n            \"edismax\"), \"//doc[1]/str[@name='id'][.='s0']\");\n\n    assertQ(\n        \"ps3 not working\",\n        req(\"q\", \"a bar foo\", \"qf\", \"phrase_sw\", \"pf3\", \"phrase_sw^10\", \"ps3\",\n            \"3\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\");\n    \n    assertQ(\n        \"Specifying slop in pf3 param not working\",\n        req(\"q\", \"a bar foo\", \"qf\", \"phrase_sw\", \"pf3\", \"phrase_sw~3^10\",\n            \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\");\n   \n    assertQ(\"ps2 should not override slop specified inline in pf2\",\n        req(\"q\", \"zzzz xxxx cccc vvvv\",\n            \"qf\", \"phrase_sw\",\n            \"pf2\", \"phrase_sw~2^22\",\n            \"ps2\", \"4\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx\\\"~2)^22.0')]\"\n     );\n\n    assertQ(\"phrase field queries spanning multiple fields should be within their own dismax queries\",\n        req(\"q\", \"aaaa bbbb cccc\",\n            \"qf\", \"phrase_sw phrase1_sw\",\n            \"pf2\", \"phrase_sw phrase1_sw\",\n            \"pf3\", \"phrase_sw phrase1_sw\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"aaaa bbbb\\\" | phrase1_sw:\\\"aaaa bbbb\\\")')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"bbbb cccc\\\" | phrase1_sw:\\\"bbbb cccc\\\")')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"aaaa bbbb cccc\\\" | phrase1_sw:\\\"aaaa bbbb cccc\\\")')]\"\n    );\n  }\n\n","sourceOld":"  // test phrase fields including pf2 pf3 and phrase slop\n  public void testPfPs() {\n    assertU(adoc(\"id\", \"s0\", \"phrase_sw\", \"foo bar a b c\", \"boost_d\", \"1.0\"));    \n    assertU(adoc(\"id\", \"s1\", \"phrase_sw\", \"foo a bar b c\", \"boost_d\", \"2.0\"));    \n    assertU(adoc(\"id\", \"s2\", \"phrase_sw\", \"foo a b bar c\", \"boost_d\", \"3.0\"));    \n    assertU(adoc(\"id\", \"s3\", \"phrase_sw\", \"foo a b c bar\", \"boost_d\", \"4.0\"));\n    assertU(commit());\n\n    assertQ(\"default order assumption wrong\",\n        req(\"q\", \"foo bar\",\n            \"qf\", \"phrase_sw\",\n            \"bf\", \"boost_d\",\n            \"fl\", \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s3']\",\n        \"//doc[2]/str[@name='id'][.='s2']\",\n        \"//doc[3]/str[@name='id'][.='s1']\",\n        \"//doc[4]/str[@name='id'][.='s0']\");\n\n    assertQ(\"pf not working\",\n        req(\"q\", \"foo bar\",\n            \"qf\", \"phrase_sw\",\n            \"pf\", \"phrase_sw^10\",\n            \"fl\", \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n\n    assertQ(\"pf2 not working\",\n        req(\"q\",   \"foo bar\",\n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n\n    assertQ(\"pf3 not working\",\n        req(\"q\",   \"a b bar\",\n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s2']\");\n\n    assertQ(\"ps not working for pf2\",\n        req(\"q\",   \"bar foo\",\n            \"qf\",  \"phrase_sw\",\n            \"pf2\", \"phrase_sw^10\",\n            \"ps\",  \"2\",\n            \"fl\",  \"score,*\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n\n    assertQ(\"ps not working for pf3\",\n        req(\"q\",   \"a bar foo\",\n            \"qf\",  \"phrase_sw\",\n            \"pf3\", \"phrase_sw^10\",\n            \"ps\",  \"3\",\n            \"fl\",  \"score,*\",\n            \"debugQuery\",  \"true\",\n            \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\");\n\n    assertQ(\"ps/ps2/ps3 with default slop overrides not working\",\n        req(\"q\", \"zzzz xxxx cccc vvvv\",\n            \"qf\", \"phrase_sw\",\n            \"pf\", \"phrase_sw~1^10 phrase_sw~2^20 phrase_sw^30\",\n            \"pf2\", \"phrase_sw~2^22 phrase_sw^33\",\n            \"pf3\", \"phrase_sw~2^222 phrase_sw^333\",\n            \"ps\", \"3\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~1)^10.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~2)^20.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx cccc vvvv\\\"~3)^30.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx\\\"~2)^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"xxxx cccc\\\"~2)^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"cccc vvvv\\\"~2)^22.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx\\\"~3)^33.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"xxxx cccc\\\"~3)^33.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"cccc vvvv\\\"~3)^33.0')]\",        \n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx cccc\\\"~2)^222.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"xxxx cccc vvvv\\\"~2)^222.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx cccc\\\"~3)^333.0')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"xxxx cccc vvvv\\\"~3)^333.0')]\"\n     );\n\n    assertQ(\n        \"ps2 not working\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw^10\", \"ps2\",\n            \"2\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\n        \"Specifying slop in pf2 param not working\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw~2^10\", \n            \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s0']\");\n    \n    assertQ(\n        \"Slop in ps2 parameter should override ps\",\n        req(\"q\", \"bar foo\", \"qf\", \"phrase_sw\", \"pf2\", \"phrase_sw^10\", \"ps\",\n            \"0\", \"ps2\", \"2\", \"fl\", \"score,*\", \"defType\",\n            \"edismax\"), \"//doc[1]/str[@name='id'][.='s0']\");\n\n    assertQ(\n        \"ps3 not working\",\n        req(\"q\", \"a bar foo\", \"qf\", \"phrase_sw\", \"pf3\", \"phrase_sw^10\", \"ps3\",\n            \"3\", \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\");\n    \n    assertQ(\n        \"Specifying slop in pf3 param not working\",\n        req(\"q\", \"a bar foo\", \"qf\", \"phrase_sw\", \"pf3\", \"phrase_sw~3^10\",\n            \"fl\", \"score,*\", \"defType\", \"edismax\"),\n        \"//doc[1]/str[@name='id'][.='s1']\");\n   \n    assertQ(\"ps2 should not override slop specified inline in pf2\",\n        req(\"q\", \"zzzz xxxx cccc vvvv\",\n            \"qf\", \"phrase_sw\",\n            \"pf2\", \"phrase_sw~2^22\",\n            \"ps2\", \"4\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"zzzz xxxx\\\"~2)^22.0')]\"\n     );\n\n    assertQ(\"phrase field queries spanning multiple fields should be within their own dismax queries\",\n        req(\"q\", \"aaaa bbbb cccc\",\n            \"qf\", \"phrase_sw phrase1_sw\",\n            \"pf2\", \"phrase_sw phrase1_sw\",\n            \"pf3\", \"phrase_sw phrase1_sw\",\n            \"defType\", \"edismax\",\n            \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"aaaa bbbb\\\" | phrase1_sw:\\\"aaaa bbbb\\\")')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"bbbb cccc\\\" | phrase1_sw:\\\"bbbb cccc\\\")')]\",\n        \"//str[@name='parsedquery'][contains(.,'(phrase_sw:\\\"aaaa bbbb cccc\\\" | phrase1_sw:\\\"aaaa bbbb cccc\\\")')]\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["6a07f3e2a607281f2c8299665664e00c446b36a0","19275ba31e621f6da1b83bf13af75233876fd3d4"],"49dd2950028d6b59839f54d3801d77f769fa22ef":["b0cdf628dda21ad509f09608c835dc27541d1ca3"],"d9e959ce5e0805c43916e999d21f2018a2b475ab":["df2d1b614e277836f9b1bb0e2bbbfd12fa9f2af6"],"6a07f3e2a607281f2c8299665664e00c446b36a0":["500052b00ecd22d5bd8b0efd25666d035ef55f85"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["6a07f3e2a607281f2c8299665664e00c446b36a0"],"acb10061e140a7f3d5035b8be54d966ebcb672ad":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"df2d1b614e277836f9b1bb0e2bbbfd12fa9f2af6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["d9e959ce5e0805c43916e999d21f2018a2b475ab","500052b00ecd22d5bd8b0efd25666d035ef55f85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a08695eb0e2c01d06dd662674e3136641f093be":["49dd2950028d6b59839f54d3801d77f769fa22ef"],"b0cdf628dda21ad509f09608c835dc27541d1ca3":["acb10061e140a7f3d5035b8be54d966ebcb672ad"],"500052b00ecd22d5bd8b0efd25666d035ef55f85":["d9e959ce5e0805c43916e999d21f2018a2b475ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a08695eb0e2c01d06dd662674e3136641f093be"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"49dd2950028d6b59839f54d3801d77f769fa22ef":["8a08695eb0e2c01d06dd662674e3136641f093be"],"d9e959ce5e0805c43916e999d21f2018a2b475ab":["fe33227f6805edab2036cbb80645cc4e2d1fa424","500052b00ecd22d5bd8b0efd25666d035ef55f85"],"6a07f3e2a607281f2c8299665664e00c446b36a0":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","acb10061e140a7f3d5035b8be54d966ebcb672ad"],"acb10061e140a7f3d5035b8be54d966ebcb672ad":["b0cdf628dda21ad509f09608c835dc27541d1ca3"],"df2d1b614e277836f9b1bb0e2bbbfd12fa9f2af6":["d9e959ce5e0805c43916e999d21f2018a2b475ab"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["df2d1b614e277836f9b1bb0e2bbbfd12fa9f2af6"],"8a08695eb0e2c01d06dd662674e3136641f093be":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b0cdf628dda21ad509f09608c835dc27541d1ca3":["49dd2950028d6b59839f54d3801d77f769fa22ef"],"500052b00ecd22d5bd8b0efd25666d035ef55f85":["6a07f3e2a607281f2c8299665664e00c446b36a0","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}