{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoDistanceUtils#linearDistance(double[],double[]).mjava","commits":[{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoDistanceUtils#linearDistance(double[],double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoDistanceUtils#linearDistance(double[],double[]).mjava","sourceNew":"  /**\n   * Computes distance between two points in a cartesian (x, y, {z - optional}) coordinate system\n   */\n  public static double linearDistance(double[] pt1, double[] pt2) {\n    assert pt1 != null && pt2 != null && pt1.length == pt2.length && pt1.length > 1;\n    final double d0 = pt1[0] - pt2[0];\n    final double d1 = pt1[1] - pt2[1];\n    if (pt1.length == 3) {\n      final double d2 = pt1[2] - pt2[2];\n      return Math.sqrt(d0*d0 + d1*d1 + d2*d2);\n    }\n    return Math.sqrt(d0*d0 + d1*d1);\n  }\n\n","sourceOld":"  /**\n   * Computes distance between two points in a cartesian (x, y, {z - optional}) coordinate system\n   */\n  public static double linearDistance(double[] pt1, double[] pt2) {\n    assert pt1 != null && pt2 != null && pt1.length == pt2.length && pt1.length > 1;\n    final double d0 = pt1[0] - pt2[0];\n    final double d1 = pt1[1] - pt2[1];\n    if (pt1.length == 3) {\n      final double d2 = pt1[2] - pt2[2];\n      return Math.sqrt(d0*d0 + d1*d1 + d2*d2);\n    }\n    return Math.sqrt(d0*d0 + d1*d1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoDistanceUtils#linearDistance(double[],double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoDistanceUtils#linearDistance(double[],double[]).mjava","sourceNew":"  /**\n   * Computes distance between two points in a cartesian (x, y, {z - optional}) coordinate system\n   */\n  public static double linearDistance(double[] pt1, double[] pt2) {\n    assert pt1 != null && pt2 != null && pt1.length == pt2.length && pt1.length > 1;\n    final double d0 = pt1[0] - pt2[0];\n    final double d1 = pt1[1] - pt2[1];\n    if (pt1.length == 3) {\n      final double d2 = pt1[2] - pt2[2];\n      return Math.sqrt(d0*d0 + d1*d1 + d2*d2);\n    }\n    return Math.sqrt(d0*d0 + d1*d1);\n  }\n\n","sourceOld":"  /**\n   * Computes distance between two points in a cartesian (x, y, {z - optional}) coordinate system\n   */\n  public static double linearDistance(double[] pt1, double[] pt2) {\n    assert pt1 != null && pt2 != null && pt1.length == pt2.length && pt1.length > 1;\n    final double d0 = pt1[0] - pt2[0];\n    final double d1 = pt1[1] - pt2[1];\n    if (pt1.length == 3) {\n      final double d2 = pt1[2] - pt2[2];\n      return Math.sqrt(d0*d0 + d1*d1 + d2*d2);\n    }\n    return Math.sqrt(d0*d0 + d1*d1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca8abb1a4010d2a9e71b0162d3600e898a8a4f56","date":1458685284,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoDistanceUtils#linearDistance(double[],double[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Computes distance between two points in a cartesian (x, y, {z - optional}) coordinate system\n   */\n  public static double linearDistance(double[] pt1, double[] pt2) {\n    assert pt1 != null && pt2 != null && pt1.length == pt2.length && pt1.length > 1;\n    final double d0 = pt1[0] - pt2[0];\n    final double d1 = pt1[1] - pt2[1];\n    if (pt1.length == 3) {\n      final double d2 = pt1[2] - pt2[2];\n      return Math.sqrt(d0*d0 + d1*d1 + d2*d2);\n    }\n    return Math.sqrt(d0*d0 + d1*d1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ca8abb1a4010d2a9e71b0162d3600e898a8a4f56":["937923083e4d137932336fc80f3d78758ff698a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","937923083e4d137932336fc80f3d78758ff698a6"],"937923083e4d137932336fc80f3d78758ff698a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ca8abb1a4010d2a9e71b0162d3600e898a8a4f56"]},"commit2Childs":{"ca8abb1a4010d2a9e71b0162d3600e898a8a4f56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"937923083e4d137932336fc80f3d78758ff698a6":["ca8abb1a4010d2a9e71b0162d3600e898a8a4f56","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}