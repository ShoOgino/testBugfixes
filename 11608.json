{"path":"lucene/core/src/java/org/apache/lucene/geo/SimpleWKTShapeParser#parseMultiPolygon(StreamTokenizer).mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/SimpleWKTShapeParser#parseMultiPolygon(StreamTokenizer).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/SimpleWKTShapeParser#parseMultiPolygon(StreamTokenizer).mjava","sourceNew":"  /** parses a MULTIPOLYGON */\n  private static Polygon[] parseMultiPolygon(StreamTokenizer stream) throws IOException, ParseException {\n    String token = nextEmptyOrOpen(stream);\n    if (token.equals(EMPTY)) {\n      return null;\n    }\n    ArrayList<Polygon> polygons = new ArrayList();\n    polygons.add(parsePolygon(stream));\n    while (nextCloserOrComma(stream).equals(COMMA)) {\n      polygons.add(parsePolygon(stream));\n    }\n    return polygons.toArray(new Polygon[polygons.size()]);\n  }\n\n","sourceOld":"  /** parses a MULTIPOLYGON */\n  private static Polygon[] parseMultiPolygon(StreamTokenizer stream) throws IOException, ParseException {\n    String token = nextEmptyOrOpen(stream);\n    if (token.equals(EMPTY)) {\n      return null;\n    }\n    ArrayList<Polygon> polygons = new ArrayList();\n    polygons.add(parsePolygon(stream));\n    while (nextCloserOrComma(stream).equals(COMMA)) {\n      polygons.add(parsePolygon(stream));\n    }\n    return polygons.toArray(new Polygon[polygons.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c21918ef3ad23e254f39cb0cd6c86851fcb993","date":1580123310,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/SimpleWKTShapeParser#parseMultiPolygon(StreamTokenizer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/SimpleWKTShapeParser#parseMultiPolygon(StreamTokenizer).mjava","sourceNew":"  /** parses a MULTIPOLYGON */\n  private static Polygon[] parseMultiPolygon(StreamTokenizer stream) throws IOException, ParseException {\n    String token = nextEmptyOrOpen(stream);\n    if (token.equals(EMPTY)) {\n      return null;\n    }\n    ArrayList<Polygon> polygons = new ArrayList<>();\n    polygons.add(parsePolygon(stream));\n    while (nextCloserOrComma(stream).equals(COMMA)) {\n      polygons.add(parsePolygon(stream));\n    }\n    return polygons.toArray(new Polygon[polygons.size()]);\n  }\n\n","sourceOld":"  /** parses a MULTIPOLYGON */\n  private static Polygon[] parseMultiPolygon(StreamTokenizer stream) throws IOException, ParseException {\n    String token = nextEmptyOrOpen(stream);\n    if (token.equals(EMPTY)) {\n      return null;\n    }\n    ArrayList<Polygon> polygons = new ArrayList();\n    polygons.add(parsePolygon(stream));\n    while (nextCloserOrComma(stream).equals(COMMA)) {\n      polygons.add(parsePolygon(stream));\n    }\n    return polygons.toArray(new Polygon[polygons.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30c21918ef3ad23e254f39cb0cd6c86851fcb993":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30c21918ef3ad23e254f39cb0cd6c86851fcb993"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["30c21918ef3ad23e254f39cb0cd6c86851fcb993"],"30c21918ef3ad23e254f39cb0cd6c86851fcb993":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}