{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(AtomicReader,PrintStream).mjava","commits":[{"id":"e99275efa2c9c9ae3bdba986218af82f2bf3dc30","date":1354658499,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(AtomicReader,PrintStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(FieldInfos,SegmentReader).mjava","sourceNew":"  /**\n   * Test field norms.\n   * @lucene.experimental\n   */\n  public static Status.FieldNormStatus testFieldNorms(AtomicReader reader, PrintStream infoStream) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          DocValues dv = reader.normValues(info.name);\n          checkDocValues(dv, info.name, info.getNormType(), reader.maxDoc());\n          ++status.totFields;\n        } else {\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : fieldInfos) {\n        if (info.hasNorms()) {\n          DocValues dv = reader.normValues(info.name);\n          checkDocValues(dv, info.name, info.getNormType(), reader.maxDoc());\n          ++status.totFields;\n        } else {\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50599bdf4e0c26952f76b740a4280d058cab3539","date":1355180801,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(AtomicReader,PrintStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(AtomicReader,PrintStream).mjava","sourceNew":"  /**\n   * Test field norms.\n   * @lucene.experimental\n   */\n  public static Status.FieldNormStatus testFieldNorms(AtomicReader reader, PrintStream infoStream) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          DocValues dv = reader.normValues(info.name);\n          checkDocValues(dv, info.name, info.getNormType(), reader.maxDoc());\n          checkSimpleNorms(info, reader, infoStream);\n          ++status.totFields;\n        } else {\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test field norms.\n   * @lucene.experimental\n   */\n  public static Status.FieldNormStatus testFieldNorms(AtomicReader reader, PrintStream infoStream) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          DocValues dv = reader.normValues(info.name);\n          checkDocValues(dv, info.name, info.getNormType(), reader.maxDoc());\n          ++status.totFields;\n        } else {\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(AtomicReader,PrintStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(AtomicReader,PrintStream).mjava","sourceNew":"  /**\n   * Test field norms.\n   * @lucene.experimental\n   */\n  public static Status.FieldNormStatus testFieldNorms(AtomicReader reader, PrintStream infoStream) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkSimpleNorms(info, reader, infoStream);\n          ++status.totFields;\n        } else {\n          if (reader.simpleNormValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test field norms.\n   * @lucene.experimental\n   */\n  public static Status.FieldNormStatus testFieldNorms(AtomicReader reader, PrintStream infoStream) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          DocValues dv = reader.normValues(info.name);\n          checkDocValues(dv, info.name, info.getNormType(), reader.maxDoc());\n          checkSimpleNorms(info, reader, infoStream);\n          ++status.totFields;\n        } else {\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","date":1358521790,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(AtomicReader,PrintStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(AtomicReader,PrintStream).mjava","sourceNew":"  /**\n   * Test field norms.\n   * @lucene.experimental\n   */\n  public static Status.FieldNormStatus testFieldNorms(AtomicReader reader, PrintStream infoStream) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkSimpleNorms(info, reader, infoStream);\n          ++status.totFields;\n        } else {\n          if (reader.getNormValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test field norms.\n   * @lucene.experimental\n   */\n  public static Status.FieldNormStatus testFieldNorms(AtomicReader reader, PrintStream infoStream) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkSimpleNorms(info, reader, infoStream);\n          ++status.totFields;\n        } else {\n          if (reader.simpleNormValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e13bf6998389e201ae22c6e84079b9d6b5da0af","date":1358809420,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(AtomicReader,PrintStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(AtomicReader,PrintStream).mjava","sourceNew":"  /**\n   * Test field norms.\n   * @lucene.experimental\n   */\n  public static Status.FieldNormStatus testFieldNorms(AtomicReader reader, PrintStream infoStream) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNorms(info, reader, infoStream);\n          ++status.totFields;\n        } else {\n          if (reader.getNormValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test field norms.\n   * @lucene.experimental\n   */\n  public static Status.FieldNormStatus testFieldNorms(AtomicReader reader, PrintStream infoStream) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkSimpleNorms(info, reader, infoStream);\n          ++status.totFields;\n        } else {\n          if (reader.getNormValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(AtomicReader,PrintStream).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test field norms.\n   * @lucene.experimental\n   */\n  public static Status.FieldNormStatus testFieldNorms(AtomicReader reader, PrintStream infoStream) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNorms(info, reader, infoStream);\n          ++status.totFields;\n        } else {\n          if (reader.getNormValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cdf9cc6702d60334a616bd7db3ae91501d1dce7","date":1405858112,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(AtomicReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(AtomicReader,PrintStream).mjava","sourceNew":"  /**\n   * Test field norms.\n   * @lucene.experimental\n   */\n  public static Status.FieldNormStatus testFieldNorms(AtomicReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNorms(info, reader, infoStream);\n          ++status.totFields;\n        } else {\n          if (reader.getNormValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test field norms.\n   * @lucene.experimental\n   */\n  public static Status.FieldNormStatus testFieldNorms(AtomicReader reader, PrintStream infoStream) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          checkNorms(info, reader, infoStream);\n          ++status.totFields;\n        } else {\n          if (reader.getNormValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["0837ab0472feecb3a54260729d845f839e1cbd72"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1e13bf6998389e201ae22c6e84079b9d6b5da0af"],"50599bdf4e0c26952f76b740a4280d058cab3539":["e99275efa2c9c9ae3bdba986218af82f2bf3dc30"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e99275efa2c9c9ae3bdba986218af82f2bf3dc30":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0837ab0472feecb3a54260729d845f839e1cbd72":["50599bdf4e0c26952f76b740a4280d058cab3539"],"1e13bf6998389e201ae22c6e84079b9d6b5da0af":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"]},"commit2Childs":{"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["1e13bf6998389e201ae22c6e84079b9d6b5da0af"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"50599bdf4e0c26952f76b740a4280d058cab3539":["0837ab0472feecb3a54260729d845f839e1cbd72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","e99275efa2c9c9ae3bdba986218af82f2bf3dc30"],"e99275efa2c9c9ae3bdba986218af82f2bf3dc30":["50599bdf4e0c26952f76b740a4280d058cab3539"],"0837ab0472feecb3a54260729d845f839e1cbd72":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"1e13bf6998389e201ae22c6e84079b9d6b5da0af":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}