{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getLiveStatesToAccept(Automaton).mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getLiveStatesToAccept(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#getLiveStatesToAccept(LightAutomaton).mjava","sourceNew":"  /** Returns bitset marking states that can reach an accept state. */\n  private static BitSet getLiveStatesToAccept(Automaton a) {\n    Automaton.Builder builder = new Automaton.Builder();\n\n    // NOTE: not quite the same thing as what SpecialOperations.reverse does:\n    Transition t = new Transition();\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      builder.createState();\n    }\n    for(int s=0;s<numStates;s++) {\n      int count = a.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        builder.addTransition(t.dest, s, t.min, t.max);\n      }\n    }\n    Automaton a2 = builder.finish();\n\n    LinkedList<Integer> workList = new LinkedList<>();\n    BitSet live = new BitSet(numStates);\n    for (int s : a.getAcceptStates()) {\n      live.set(s);\n      workList.add(s);\n    }\n\n    while (workList.isEmpty() == false) {\n      int s = workList.removeFirst();\n      int count = a2.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a2.getNextTransition(t);\n        if (live.get(t.dest) == false) {\n          live.set(t.dest);\n          workList.add(t.dest);\n        }\n      }\n    }\n\n    return live;\n  }\n\n","sourceOld":"  /** Returns bitset marking states that can reach an accept state. */\n  private static BitSet getLiveStatesToAccept(LightAutomaton a) {\n    LightAutomaton.Builder builder = new LightAutomaton.Builder();\n\n    // NOTE: not quite the same thing as what SpecialOperations.reverse does:\n    Transition t = new Transition();\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      builder.createState();\n    }\n    for(int s=0;s<numStates;s++) {\n      int count = a.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        builder.addTransition(t.dest, s, t.min, t.max);\n      }\n    }\n    LightAutomaton a2 = builder.finish();\n\n    LinkedList<Integer> workList = new LinkedList<>();\n    BitSet live = new BitSet(numStates);\n    for (int s : a.getAcceptStates()) {\n      live.set(s);\n      workList.add(s);\n    }\n\n    while (workList.isEmpty() == false) {\n      int s = workList.removeFirst();\n      int count = a2.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a2.getNextTransition(t);\n        if (live.get(t.dest) == false) {\n          live.set(t.dest);\n          workList.add(t.dest);\n        }\n      }\n    }\n\n    return live;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a546f0e920177e9588c7ac5e8c46ce22c43f8ee0","date":1403106109,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getLiveStatesToAccept(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getLiveStatesToAccept(Automaton).mjava","sourceNew":"  /** Returns bitset marking states that can reach an accept state. */\n  private static BitSet getLiveStatesToAccept(Automaton a) {\n    Automaton.Builder builder = new Automaton.Builder();\n\n    // NOTE: not quite the same thing as what SpecialOperations.reverse does:\n    Transition t = new Transition();\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      builder.createState();\n    }\n    for(int s=0;s<numStates;s++) {\n      int count = a.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        builder.addTransition(t.dest, s, t.min, t.max);\n      }\n    }\n    Automaton a2 = builder.finish();\n\n    LinkedList<Integer> workList = new LinkedList<>();\n    BitSet live = new BitSet(numStates);\n    FixedBitSet acceptBits = a.getAcceptStates();\n    int s = 0;\n    while (s < numStates && (s = acceptBits.nextSetBit(s)) != -1) {\n      live.set(s);\n      workList.add(s);\n      s++;\n    }\n\n    while (workList.isEmpty() == false) {\n      s = workList.removeFirst();\n      int count = a2.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a2.getNextTransition(t);\n        if (live.get(t.dest) == false) {\n          live.set(t.dest);\n          workList.add(t.dest);\n        }\n      }\n    }\n\n    return live;\n  }\n\n","sourceOld":"  /** Returns bitset marking states that can reach an accept state. */\n  private static BitSet getLiveStatesToAccept(Automaton a) {\n    Automaton.Builder builder = new Automaton.Builder();\n\n    // NOTE: not quite the same thing as what SpecialOperations.reverse does:\n    Transition t = new Transition();\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      builder.createState();\n    }\n    for(int s=0;s<numStates;s++) {\n      int count = a.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        builder.addTransition(t.dest, s, t.min, t.max);\n      }\n    }\n    Automaton a2 = builder.finish();\n\n    LinkedList<Integer> workList = new LinkedList<>();\n    BitSet live = new BitSet(numStates);\n    for (int s : a.getAcceptStates()) {\n      live.set(s);\n      workList.add(s);\n    }\n\n    while (workList.isEmpty() == false) {\n      int s = workList.removeFirst();\n      int count = a2.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a2.getNextTransition(t);\n        if (live.get(t.dest) == false) {\n          live.set(t.dest);\n          workList.add(t.dest);\n        }\n      }\n    }\n\n    return live;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6950511e8508a30eaacc2f8469121cf32be2ef6d","date":1403109868,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getLiveStatesToAccept(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getLiveStatesToAccept(Automaton).mjava","sourceNew":"  /** Returns bitset marking states that can reach an accept state. */\n  private static BitSet getLiveStatesToAccept(Automaton a) {\n    Automaton.Builder builder = new Automaton.Builder();\n\n    // NOTE: not quite the same thing as what SpecialOperations.reverse does:\n    Transition t = new Transition();\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      builder.createState();\n    }\n    for(int s=0;s<numStates;s++) {\n      int count = a.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        builder.addTransition(t.dest, s, t.min, t.max);\n      }\n    }\n    Automaton a2 = builder.finish();\n\n    LinkedList<Integer> workList = new LinkedList<>();\n    BitSet live = new BitSet(numStates);\n    BitSet acceptBits = a.getAcceptStates();\n    int s = 0;\n    while (s < numStates && (s = acceptBits.nextSetBit(s)) != -1) {\n      live.set(s);\n      workList.add(s);\n      s++;\n    }\n\n    while (workList.isEmpty() == false) {\n      s = workList.removeFirst();\n      int count = a2.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a2.getNextTransition(t);\n        if (live.get(t.dest) == false) {\n          live.set(t.dest);\n          workList.add(t.dest);\n        }\n      }\n    }\n\n    return live;\n  }\n\n","sourceOld":"  /** Returns bitset marking states that can reach an accept state. */\n  private static BitSet getLiveStatesToAccept(Automaton a) {\n    Automaton.Builder builder = new Automaton.Builder();\n\n    // NOTE: not quite the same thing as what SpecialOperations.reverse does:\n    Transition t = new Transition();\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      builder.createState();\n    }\n    for(int s=0;s<numStates;s++) {\n      int count = a.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        builder.addTransition(t.dest, s, t.min, t.max);\n      }\n    }\n    Automaton a2 = builder.finish();\n\n    LinkedList<Integer> workList = new LinkedList<>();\n    BitSet live = new BitSet(numStates);\n    FixedBitSet acceptBits = a.getAcceptStates();\n    int s = 0;\n    while (s < numStates && (s = acceptBits.nextSetBit(s)) != -1) {\n      live.set(s);\n      workList.add(s);\n      s++;\n    }\n\n    while (workList.isEmpty() == false) {\n      s = workList.removeFirst();\n      int count = a2.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a2.getNextTransition(t);\n        if (live.get(t.dest) == false) {\n          live.set(t.dest);\n          workList.add(t.dest);\n        }\n      }\n    }\n\n    return live;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getLiveStatesToAccept(Automaton).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns bitset marking states that can reach an accept state. */\n  private static BitSet getLiveStatesToAccept(Automaton a) {\n    Automaton.Builder builder = new Automaton.Builder();\n\n    // NOTE: not quite the same thing as what SpecialOperations.reverse does:\n    Transition t = new Transition();\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      builder.createState();\n    }\n    for(int s=0;s<numStates;s++) {\n      int count = a.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        builder.addTransition(t.dest, s, t.min, t.max);\n      }\n    }\n    Automaton a2 = builder.finish();\n\n    LinkedList<Integer> workList = new LinkedList<>();\n    BitSet live = new BitSet(numStates);\n    BitSet acceptBits = a.getAcceptStates();\n    int s = 0;\n    while (s < numStates && (s = acceptBits.nextSetBit(s)) != -1) {\n      live.set(s);\n      workList.add(s);\n      s++;\n    }\n\n    while (workList.isEmpty() == false) {\n      s = workList.removeFirst();\n      int count = a2.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a2.getNextTransition(t);\n        if (live.get(t.dest) == false) {\n          live.set(t.dest);\n          workList.add(t.dest);\n        }\n      }\n    }\n\n    return live;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ddee54b1c3df60fd6198e3aa64c78038a1be8df","date":1487008231,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getLiveStatesToAccept(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getLiveStatesToAccept(Automaton).mjava","sourceNew":"  /** Returns bitset marking states that can reach an accept state. */\n  private static BitSet getLiveStatesToAccept(Automaton a) {\n    Automaton.Builder builder = new Automaton.Builder();\n\n    // NOTE: not quite the same thing as what SpecialOperations.reverse does:\n    Transition t = new Transition();\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      builder.createState();\n    }\n    for(int s=0;s<numStates;s++) {\n      int count = a.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        builder.addTransition(t.dest, s, t.min, t.max);\n      }\n    }\n    Automaton a2 = builder.finish();\n\n    ArrayDeque<Integer> workList = new ArrayDeque<>();\n    BitSet live = new BitSet(numStates);\n    BitSet acceptBits = a.getAcceptStates();\n    int s = 0;\n    while (s < numStates && (s = acceptBits.nextSetBit(s)) != -1) {\n      live.set(s);\n      workList.add(s);\n      s++;\n    }\n\n    while (workList.isEmpty() == false) {\n      s = workList.removeFirst();\n      int count = a2.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a2.getNextTransition(t);\n        if (live.get(t.dest) == false) {\n          live.set(t.dest);\n          workList.add(t.dest);\n        }\n      }\n    }\n\n    return live;\n  }\n\n","sourceOld":"  /** Returns bitset marking states that can reach an accept state. */\n  private static BitSet getLiveStatesToAccept(Automaton a) {\n    Automaton.Builder builder = new Automaton.Builder();\n\n    // NOTE: not quite the same thing as what SpecialOperations.reverse does:\n    Transition t = new Transition();\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      builder.createState();\n    }\n    for(int s=0;s<numStates;s++) {\n      int count = a.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        builder.addTransition(t.dest, s, t.min, t.max);\n      }\n    }\n    Automaton a2 = builder.finish();\n\n    LinkedList<Integer> workList = new LinkedList<>();\n    BitSet live = new BitSet(numStates);\n    BitSet acceptBits = a.getAcceptStates();\n    int s = 0;\n    while (s < numStates && (s = acceptBits.nextSetBit(s)) != -1) {\n      live.set(s);\n      workList.add(s);\n      s++;\n    }\n\n    while (workList.isEmpty() == false) {\n      s = workList.removeFirst();\n      int count = a2.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a2.getNextTransition(t);\n        if (live.get(t.dest) == false) {\n          live.set(t.dest);\n          workList.add(t.dest);\n        }\n      }\n    }\n\n    return live;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"022a4de90e0479b604264ca9c2e134c996454ab3","date":1487118265,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getLiveStatesToAccept(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getLiveStatesToAccept(Automaton).mjava","sourceNew":"  /** Returns bitset marking states that can reach an accept state. */\n  private static BitSet getLiveStatesToAccept(Automaton a) {\n    Automaton.Builder builder = new Automaton.Builder();\n\n    // NOTE: not quite the same thing as what SpecialOperations.reverse does:\n    Transition t = new Transition();\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      builder.createState();\n    }\n    for(int s=0;s<numStates;s++) {\n      int count = a.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        builder.addTransition(t.dest, s, t.min, t.max);\n      }\n    }\n    Automaton a2 = builder.finish();\n\n    ArrayDeque<Integer> workList = new ArrayDeque<>();\n    BitSet live = new BitSet(numStates);\n    BitSet acceptBits = a.getAcceptStates();\n    int s = 0;\n    while (s < numStates && (s = acceptBits.nextSetBit(s)) != -1) {\n      live.set(s);\n      workList.add(s);\n      s++;\n    }\n\n    while (workList.isEmpty() == false) {\n      s = workList.removeFirst();\n      int count = a2.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a2.getNextTransition(t);\n        if (live.get(t.dest) == false) {\n          live.set(t.dest);\n          workList.add(t.dest);\n        }\n      }\n    }\n\n    return live;\n  }\n\n","sourceOld":"  /** Returns bitset marking states that can reach an accept state. */\n  private static BitSet getLiveStatesToAccept(Automaton a) {\n    Automaton.Builder builder = new Automaton.Builder();\n\n    // NOTE: not quite the same thing as what SpecialOperations.reverse does:\n    Transition t = new Transition();\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      builder.createState();\n    }\n    for(int s=0;s<numStates;s++) {\n      int count = a.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        builder.addTransition(t.dest, s, t.min, t.max);\n      }\n    }\n    Automaton a2 = builder.finish();\n\n    LinkedList<Integer> workList = new LinkedList<>();\n    BitSet live = new BitSet(numStates);\n    BitSet acceptBits = a.getAcceptStates();\n    int s = 0;\n    while (s < numStates && (s = acceptBits.nextSetBit(s)) != -1) {\n      live.set(s);\n      workList.add(s);\n      s++;\n    }\n\n    while (workList.isEmpty() == false) {\n      s = workList.removeFirst();\n      int count = a2.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a2.getNextTransition(t);\n        if (live.get(t.dest) == false) {\n          live.set(t.dest);\n          workList.add(t.dest);\n        }\n      }\n    }\n\n    return live;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96","date":1487122334,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getLiveStatesToAccept(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getLiveStatesToAccept(Automaton).mjava","sourceNew":"  /** Returns bitset marking states that can reach an accept state. */\n  private static BitSet getLiveStatesToAccept(Automaton a) {\n    Automaton.Builder builder = new Automaton.Builder();\n\n    // NOTE: not quite the same thing as what SpecialOperations.reverse does:\n    Transition t = new Transition();\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      builder.createState();\n    }\n    for(int s=0;s<numStates;s++) {\n      int count = a.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        builder.addTransition(t.dest, s, t.min, t.max);\n      }\n    }\n    Automaton a2 = builder.finish();\n\n    LinkedList<Integer> workList = new LinkedList<>();\n    BitSet live = new BitSet(numStates);\n    BitSet acceptBits = a.getAcceptStates();\n    int s = 0;\n    while (s < numStates && (s = acceptBits.nextSetBit(s)) != -1) {\n      live.set(s);\n      workList.add(s);\n      s++;\n    }\n\n    while (workList.isEmpty() == false) {\n      s = workList.removeFirst();\n      int count = a2.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a2.getNextTransition(t);\n        if (live.get(t.dest) == false) {\n          live.set(t.dest);\n          workList.add(t.dest);\n        }\n      }\n    }\n\n    return live;\n  }\n\n","sourceOld":"  /** Returns bitset marking states that can reach an accept state. */\n  private static BitSet getLiveStatesToAccept(Automaton a) {\n    Automaton.Builder builder = new Automaton.Builder();\n\n    // NOTE: not quite the same thing as what SpecialOperations.reverse does:\n    Transition t = new Transition();\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      builder.createState();\n    }\n    for(int s=0;s<numStates;s++) {\n      int count = a.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        builder.addTransition(t.dest, s, t.min, t.max);\n      }\n    }\n    Automaton a2 = builder.finish();\n\n    ArrayDeque<Integer> workList = new ArrayDeque<>();\n    BitSet live = new BitSet(numStates);\n    BitSet acceptBits = a.getAcceptStates();\n    int s = 0;\n    while (s < numStates && (s = acceptBits.nextSetBit(s)) != -1) {\n      live.set(s);\n      workList.add(s);\n      s++;\n    }\n\n    while (workList.isEmpty() == false) {\n      s = workList.removeFirst();\n      int count = a2.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a2.getNextTransition(t);\n        if (live.get(t.dest) == false) {\n          live.set(t.dest);\n          workList.add(t.dest);\n        }\n      }\n    }\n\n    return live;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"897b06b1364bd1f658a8be7591e43f0851458e7f","date":1487123008,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getLiveStatesToAccept(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#getLiveStatesToAccept(Automaton).mjava","sourceNew":"  /** Returns bitset marking states that can reach an accept state. */\n  private static BitSet getLiveStatesToAccept(Automaton a) {\n    Automaton.Builder builder = new Automaton.Builder();\n\n    // NOTE: not quite the same thing as what SpecialOperations.reverse does:\n    Transition t = new Transition();\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      builder.createState();\n    }\n    for(int s=0;s<numStates;s++) {\n      int count = a.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        builder.addTransition(t.dest, s, t.min, t.max);\n      }\n    }\n    Automaton a2 = builder.finish();\n\n    ArrayDeque<Integer> workList = new ArrayDeque<>();\n    BitSet live = new BitSet(numStates);\n    BitSet acceptBits = a.getAcceptStates();\n    int s = 0;\n    while (s < numStates && (s = acceptBits.nextSetBit(s)) != -1) {\n      live.set(s);\n      workList.add(s);\n      s++;\n    }\n\n    while (workList.isEmpty() == false) {\n      s = workList.removeFirst();\n      int count = a2.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a2.getNextTransition(t);\n        if (live.get(t.dest) == false) {\n          live.set(t.dest);\n          workList.add(t.dest);\n        }\n      }\n    }\n\n    return live;\n  }\n\n","sourceOld":"  /** Returns bitset marking states that can reach an accept state. */\n  private static BitSet getLiveStatesToAccept(Automaton a) {\n    Automaton.Builder builder = new Automaton.Builder();\n\n    // NOTE: not quite the same thing as what SpecialOperations.reverse does:\n    Transition t = new Transition();\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      builder.createState();\n    }\n    for(int s=0;s<numStates;s++) {\n      int count = a.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        builder.addTransition(t.dest, s, t.min, t.max);\n      }\n    }\n    Automaton a2 = builder.finish();\n\n    LinkedList<Integer> workList = new LinkedList<>();\n    BitSet live = new BitSet(numStates);\n    BitSet acceptBits = a.getAcceptStates();\n    int s = 0;\n    while (s < numStates && (s = acceptBits.nextSetBit(s)) != -1) {\n      live.set(s);\n      workList.add(s);\n      s++;\n    }\n\n    while (workList.isEmpty() == false) {\n      s = workList.removeFirst();\n      int count = a2.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        a2.getNextTransition(t);\n        if (live.get(t.dest) == false) {\n          live.set(t.dest);\n          workList.add(t.dest);\n        }\n      }\n    }\n\n    return live;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["022a4de90e0479b604264ca9c2e134c996454ab3"],"a546f0e920177e9588c7ac5e8c46ce22c43f8ee0":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"022a4de90e0479b604264ca9c2e134c996454ab3":["5c84485629d80d203608e8975a1139de9933cc38","5ddee54b1c3df60fd6198e3aa64c78038a1be8df"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6950511e8508a30eaacc2f8469121cf32be2ef6d":["a546f0e920177e9588c7ac5e8c46ce22c43f8ee0"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6950511e8508a30eaacc2f8469121cf32be2ef6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"5ddee54b1c3df60fd6198e3aa64c78038a1be8df":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"022a4de90e0479b604264ca9c2e134c996454ab3":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"a546f0e920177e9588c7ac5e8c46ce22c43f8ee0":["6950511e8508a30eaacc2f8469121cf32be2ef6d"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a546f0e920177e9588c7ac5e8c46ce22c43f8ee0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"6950511e8508a30eaacc2f8469121cf32be2ef6d":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["022a4de90e0479b604264ca9c2e134c996454ab3","5ddee54b1c3df60fd6198e3aa64c78038a1be8df"],"5ddee54b1c3df60fd6198e3aa64c78038a1be8df":["022a4de90e0479b604264ca9c2e134c996454ab3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}