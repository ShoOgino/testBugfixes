{"path":"src/java/org/apache/lucene/util/RamUsageEstimator#humanReadableUnits(long,DecimalFormat).mjava","commits":[{"id":"e69f59b863731d864bf3047235e718f0f88f8841","date":1250105498,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/RamUsageEstimator#humanReadableUnits(long,DecimalFormat).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return good default units based on byte size.\n   */\n  public static String humanReadableUnits(long bytes, DecimalFormat df) {\n    String newSizeAndUnits;\n\n    if (bytes / ONE_GB > 0) {\n      newSizeAndUnits = String.valueOf(df.format((float) bytes / ONE_GB))\n          + \" GB\";\n    } else if (bytes / ONE_MB > 0) {\n      newSizeAndUnits = String.valueOf(df.format((float) bytes / ONE_MB))\n          + \" MB\";\n    } else if (bytes / ONE_KB > 0) {\n      newSizeAndUnits = String.valueOf(df.format((float) bytes / ONE_KB))\n          + \" KB\";\n    } else {\n      newSizeAndUnits = String.valueOf(bytes) + \" bytes\";\n    }\n\n    return newSizeAndUnits;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/RamUsageEstimator#humanReadableUnits(long,DecimalFormat).mjava","pathOld":"src/java/org/apache/lucene/util/RamUsageEstimator#humanReadableUnits(long,DecimalFormat).mjava","sourceNew":"  /**\n   * Return good default units based on byte size.\n   */\n  public static String humanReadableUnits(long bytes, DecimalFormat df) {\n    String newSizeAndUnits;\n\n    if (bytes / ONE_GB > 0) {\n      newSizeAndUnits = String.valueOf(df.format((float) bytes / ONE_GB))\n          + \" GB\";\n    } else if (bytes / ONE_MB > 0) {\n      newSizeAndUnits = String.valueOf(df.format((float) bytes / ONE_MB))\n          + \" MB\";\n    } else if (bytes / ONE_KB > 0) {\n      newSizeAndUnits = String.valueOf(df.format((float) bytes / ONE_KB))\n          + \" KB\";\n    } else {\n      newSizeAndUnits = String.valueOf(bytes) + \" bytes\";\n    }\n\n    return newSizeAndUnits;\n  }\n\n","sourceOld":"  /**\n   * Return good default units based on byte size.\n   */\n  public static String humanReadableUnits(long bytes, DecimalFormat df) {\n    String newSizeAndUnits;\n\n    if (bytes / ONE_GB > 0) {\n      newSizeAndUnits = String.valueOf(df.format((float) bytes / ONE_GB))\n          + \" GB\";\n    } else if (bytes / ONE_MB > 0) {\n      newSizeAndUnits = String.valueOf(df.format((float) bytes / ONE_MB))\n          + \" MB\";\n    } else if (bytes / ONE_KB > 0) {\n      newSizeAndUnits = String.valueOf(df.format((float) bytes / ONE_KB))\n          + \" KB\";\n    } else {\n      newSizeAndUnits = String.valueOf(bytes) + \" bytes\";\n    }\n\n    return newSizeAndUnits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e69f59b863731d864bf3047235e718f0f88f8841":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e69f59b863731d864bf3047235e718f0f88f8841"]},"commit2Childs":{"e69f59b863731d864bf3047235e718f0f88f8841":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e69f59b863731d864bf3047235e718f0f88f8841"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}