{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getStartPoints().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getStartPoints().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#getStartPoints().mjava","sourceNew":"  /**\n   * Returns sorted array of all interval start points.\n   */\n  int[] getStartPoints() {\n    final State[] states = getNumberedStates();\n    Set<Integer> pointset = new HashSet<Integer>();\n    pointset.add(Character.MIN_CODE_POINT);\n    for (State s : states) {\n      for (Transition t : s.getTransitions()) {\n        pointset.add(t.min);\n        if (t.max < Character.MAX_CODE_POINT) pointset.add((t.max + 1));\n      }\n    }\n    int[] points = new int[pointset.size()];\n    int n = 0;\n    for (Integer m : pointset)\n      points[n++] = m;\n    Arrays.sort(points);\n    return points;\n  }\n\n","sourceOld":"  /**\n   * Returns sorted array of all interval start points.\n   */\n  int[] getStartPoints() {\n    final State[] states = getNumberedStates();\n    Set<Integer> pointset = new HashSet<Integer>();\n    pointset.add(Character.MIN_CODE_POINT);\n    for (State s : states) {\n      for (Transition t : s.getTransitions()) {\n        pointset.add(t.min);\n        if (t.max < Character.MAX_CODE_POINT) pointset.add((t.max + 1));\n      }\n    }\n    int[] points = new int[pointset.size()];\n    int n = 0;\n    for (Integer m : pointset)\n      points[n++] = m;\n    Arrays.sort(points);\n    return points;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getStartPoints().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getStartPoints().mjava","sourceNew":"  /**\n   * Returns sorted array of all interval start points.\n   */\n  int[] getStartPoints() {\n    final State[] states = getNumberedStates();\n    Set<Integer> pointset = new HashSet<>();\n    pointset.add(Character.MIN_CODE_POINT);\n    for (State s : states) {\n      for (Transition t : s.getTransitions()) {\n        pointset.add(t.min);\n        if (t.max < Character.MAX_CODE_POINT) pointset.add((t.max + 1));\n      }\n    }\n    int[] points = new int[pointset.size()];\n    int n = 0;\n    for (Integer m : pointset)\n      points[n++] = m;\n    Arrays.sort(points);\n    return points;\n  }\n\n","sourceOld":"  /**\n   * Returns sorted array of all interval start points.\n   */\n  int[] getStartPoints() {\n    final State[] states = getNumberedStates();\n    Set<Integer> pointset = new HashSet<Integer>();\n    pointset.add(Character.MIN_CODE_POINT);\n    for (State s : states) {\n      for (Transition t : s.getTransitions()) {\n        pointset.add(t.min);\n        if (t.max < Character.MAX_CODE_POINT) pointset.add((t.max + 1));\n      }\n    }\n    int[] points = new int[pointset.size()];\n    int n = 0;\n    for (Integer m : pointset)\n      points[n++] = m;\n    Arrays.sort(points);\n    return points;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getStartPoints().mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns sorted array of all interval start points.\n   */\n  int[] getStartPoints() {\n    final State[] states = getNumberedStates();\n    Set<Integer> pointset = new HashSet<>();\n    pointset.add(Character.MIN_CODE_POINT);\n    for (State s : states) {\n      for (Transition t : s.getTransitions()) {\n        pointset.add(t.min);\n        if (t.max < Character.MAX_CODE_POINT) pointset.add((t.max + 1));\n      }\n    }\n    int[] points = new int[pointset.size()];\n    int n = 0;\n    for (Integer m : pointset)\n      points[n++] = m;\n    Arrays.sort(points);\n    return points;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getStartPoints().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton#getStartPoints().mjava","sourceNew":"  /**\n   * Returns sorted array of all interval start points.\n   */\n  int[] getStartPoints() {\n    Set<Integer> pointset = new HashSet<>();\n    pointset.add(Character.MIN_CODE_POINT);\n    //System.out.println(\"getStartPoints\");\n    for (int s=0;s<nextState;s+=2) {\n      int trans = states[s];\n      int limit = trans+3*states[s+1];\n      //System.out.println(\"  state=\" + (s/2) + \" trans=\" + trans + \" limit=\" + limit);\n      while (trans < limit) {\n        int min = transitions[trans+1];\n        int max = transitions[trans+2];\n        //System.out.println(\"    min=\" + min);\n        pointset.add(min);\n        if (max < Character.MAX_CODE_POINT) {\n          pointset.add(max + 1);\n        }\n        trans += 3;\n      }\n    }\n    int[] points = new int[pointset.size()];\n    int n = 0;\n    for (Integer m : pointset) {\n      points[n++] = m;\n    }\n    Arrays.sort(points);\n    return points;\n  }\n\n","sourceOld":"  /**\n   * Returns sorted array of all interval start points.\n   */\n  int[] getStartPoints() {\n    Set<Integer> pointset = new HashSet<>();\n    pointset.add(Character.MIN_CODE_POINT);\n    //System.out.println(\"getStartPoints\");\n    for (int s=0;s<nextState;s+=2) {\n      int trans = states[s];\n      int limit = trans+3*states[s+1];\n      //System.out.println(\"  state=\" + (s/2) + \" trans=\" + trans + \" limit=\" + limit);\n      while (trans < limit) {\n        int min = transitions[trans+1];\n        int max = transitions[trans+2];\n        //System.out.println(\"    min=\" + min);\n        pointset.add(min);\n        if (max < Character.MAX_CODE_POINT) {\n          pointset.add(max + 1);\n        }\n        trans += 3;\n      }\n    }\n    int[] points = new int[pointset.size()];\n    int n = 0;\n    for (Integer m : pointset) {\n      points[n++] = m;\n    }\n    Arrays.sort(points);\n    return points;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getStartPoints().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getStartPoints().mjava","sourceNew":"  /**\n   * Returns sorted array of all interval start points.\n   */\n  int[] getStartPoints() {\n    Set<Integer> pointset = new HashSet<>();\n    pointset.add(Character.MIN_CODE_POINT);\n    //System.out.println(\"getStartPoints\");\n    for (int s=0;s<nextState;s+=2) {\n      int trans = states[s];\n      int limit = trans+3*states[s+1];\n      //System.out.println(\"  state=\" + (s/2) + \" trans=\" + trans + \" limit=\" + limit);\n      while (trans < limit) {\n        int min = transitions[trans+1];\n        int max = transitions[trans+2];\n        //System.out.println(\"    min=\" + min);\n        pointset.add(min);\n        if (max < Character.MAX_CODE_POINT) {\n          pointset.add(max + 1);\n        }\n        trans += 3;\n      }\n    }\n    int[] points = new int[pointset.size()];\n    int n = 0;\n    for (Integer m : pointset) {\n      points[n++] = m;\n    }\n    Arrays.sort(points);\n    return points;\n  }\n\n","sourceOld":"  /**\n   * Returns sorted array of all interval start points.\n   */\n  int[] getStartPoints() {\n    final State[] states = getNumberedStates();\n    Set<Integer> pointset = new HashSet<>();\n    pointset.add(Character.MIN_CODE_POINT);\n    for (State s : states) {\n      for (Transition t : s.getTransitions()) {\n        pointset.add(t.min);\n        if (t.max < Character.MAX_CODE_POINT) pointset.add((t.max + 1));\n      }\n    }\n    int[] points = new int[pointset.size()];\n    int n = 0;\n    for (Integer m : pointset)\n      points[n++] = m;\n    Arrays.sort(points);\n    return points;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"5c84485629d80d203608e8975a1139de9933cc38":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}