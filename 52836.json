{"path":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#doFacets(String,String...).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#doFacets(String,String...).mjava","pathOld":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#doFacets(String,String...).mjava","sourceNew":"  public void doFacets(String f, String... params) {\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n\n\n    assertQ(\"check counts for unlimited facet\",\n            req(params, \"q\", \"id:[* TO *]\", \"indent\",\"true\"\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[@name='G'][.='5']\"\n            ,pre+\"/int[@name='E'][.='3']\"\n            ,pre+\"/int[@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for facet with generous limit\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"100\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for limited facet\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"2\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            );\n\n   assertQ(\"check offset\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.offset\", \"1\"\n                ,\"facet.limit\", \"1\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (don't count in limit)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='A'][.='1']\"\n            ,pre+\"/int[4][@name='B'][.='1']\"\n            ,pre+\"/int[5][@name='D'][.='1']\"\n            ,pre+\"/int[6][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (test offset correctness)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"count\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='D'][.='1']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='A'][.='1']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n            ,pre+\"/int[3][@name='D'][.='1']\"\n            ,pre+\"/int[4][@name='E'][.='3']\"\n            ,pre+\"/int[5][@name='F'][.='1']\"\n            ,pre+\"/int[6][@name='G'][.='5']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            ,pre+\"/int[2][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test facet unsorted paging, mincount=2\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"2\"\n                ,\"facet.offset\",\"1\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            );\n  }\n\n","sourceOld":"  public void doFacets(String f, String... params) {\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n\n\n    assertQ(\"check counts for unlimited facet\",\n            req(params, \"q\", \"id:[* TO *]\", \"indent\",\"true\"\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[@name='G'][.='5']\"\n            ,pre+\"/int[@name='E'][.='3']\"\n            ,pre+\"/int[@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for facet with generous limit\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"100\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for limited facet\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"2\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            );\n\n   assertQ(\"check offset\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.offset\", \"1\"\n                ,\"facet.limit\", \"1\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (don't count in limit)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='A'][.='1']\"\n            ,pre+\"/int[4][@name='B'][.='1']\"\n            ,pre+\"/int[5][@name='D'][.='1']\"\n            ,pre+\"/int[6][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (test offset correctness)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"count\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='D'][.='1']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='A'][.='1']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n            ,pre+\"/int[3][@name='D'][.='1']\"\n            ,pre+\"/int[4][@name='E'][.='3']\"\n            ,pre+\"/int[5][@name='F'][.='1']\"\n            ,pre+\"/int[6][@name='G'][.='5']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            ,pre+\"/int[2][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test facet unsorted paging, mincount=2\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"2\"\n                ,\"facet.offset\",\"1\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#doFacets(String,String...).mjava","pathOld":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#doFacets(String,String...).mjava","sourceNew":"  public void doFacets(String f, String... params) {\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n\n\n    assertQ(\"check counts for unlimited facet\",\n            req(params, \"q\", \"id:[* TO *]\", \"indent\",\"true\"\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[@name='G'][.='5']\"\n            ,pre+\"/int[@name='E'][.='3']\"\n            ,pre+\"/int[@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for facet with generous limit\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"100\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for limited facet\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"2\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            );\n\n   assertQ(\"check offset\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.offset\", \"1\"\n                ,\"facet.limit\", \"1\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (don't count in limit)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='A'][.='1']\"\n            ,pre+\"/int[4][@name='B'][.='1']\"\n            ,pre+\"/int[5][@name='D'][.='1']\"\n            ,pre+\"/int[6][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (test offset correctness)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"count\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='D'][.='1']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='A'][.='1']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n            ,pre+\"/int[3][@name='D'][.='1']\"\n            ,pre+\"/int[4][@name='E'][.='3']\"\n            ,pre+\"/int[5][@name='F'][.='1']\"\n            ,pre+\"/int[6][@name='G'][.='5']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            ,pre+\"/int[2][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test facet unsorted paging, mincount=2\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"2\"\n                ,\"facet.offset\",\"1\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            );\n  }\n\n","sourceOld":"  public void doFacets(String f, String... params) {\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n\n\n    assertQ(\"check counts for unlimited facet\",\n            req(params, \"q\", \"id:[* TO *]\", \"indent\",\"true\"\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[@name='G'][.='5']\"\n            ,pre+\"/int[@name='E'][.='3']\"\n            ,pre+\"/int[@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for facet with generous limit\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"100\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for limited facet\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"2\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            );\n\n   assertQ(\"check offset\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.offset\", \"1\"\n                ,\"facet.limit\", \"1\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (don't count in limit)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='A'][.='1']\"\n            ,pre+\"/int[4][@name='B'][.='1']\"\n            ,pre+\"/int[5][@name='D'][.='1']\"\n            ,pre+\"/int[6][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (test offset correctness)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"count\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='D'][.='1']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='A'][.='1']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n            ,pre+\"/int[3][@name='D'][.='1']\"\n            ,pre+\"/int[4][@name='E'][.='3']\"\n            ,pre+\"/int[5][@name='F'][.='1']\"\n            ,pre+\"/int[6][@name='G'][.='5']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            ,pre+\"/int[2][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test facet unsorted paging, mincount=2\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"2\"\n                ,\"facet.offset\",\"1\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#doFacets(String,String...).mjava","pathOld":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#doFacets(String,String...).mjava","sourceNew":"  public void doFacets(String f, String... params) {\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n\n\n    assertQ(\"check counts for unlimited facet\",\n            req(params, \"q\", \"id:[* TO *]\", \"indent\",\"true\"\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[@name='G'][.='5']\"\n            ,pre+\"/int[@name='E'][.='3']\"\n            ,pre+\"/int[@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for facet with generous limit\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"100\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for limited facet\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"2\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            );\n\n   assertQ(\"check offset\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.offset\", \"1\"\n                ,\"facet.limit\", \"1\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (don't count in limit)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='A'][.='1']\"\n            ,pre+\"/int[4][@name='B'][.='1']\"\n            ,pre+\"/int[5][@name='D'][.='1']\"\n            ,pre+\"/int[6][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (test offset correctness)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"count\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='D'][.='1']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='A'][.='1']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n            ,pre+\"/int[3][@name='D'][.='1']\"\n            ,pre+\"/int[4][@name='E'][.='3']\"\n            ,pre+\"/int[5][@name='F'][.='1']\"\n            ,pre+\"/int[6][@name='G'][.='5']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            ,pre+\"/int[2][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test facet unsorted paging, mincount=2\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"2\"\n                ,\"facet.offset\",\"1\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            );\n  }\n\n","sourceOld":"  public void doFacets(String f, String... params) {\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n\n\n    assertQ(\"check counts for unlimited facet\",\n            req(params, \"q\", \"id:[* TO *]\", \"indent\",\"true\"\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[@name='G'][.='5']\"\n            ,pre+\"/int[@name='E'][.='3']\"\n            ,pre+\"/int[@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for facet with generous limit\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"100\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for limited facet\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"2\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            );\n\n   assertQ(\"check offset\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.offset\", \"1\"\n                ,\"facet.limit\", \"1\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (don't count in limit)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='A'][.='1']\"\n            ,pre+\"/int[4][@name='B'][.='1']\"\n            ,pre+\"/int[5][@name='D'][.='1']\"\n            ,pre+\"/int[6][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (test offset correctness)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"count\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='D'][.='1']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='A'][.='1']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n            ,pre+\"/int[3][@name='D'][.='1']\"\n            ,pre+\"/int[4][@name='E'][.='3']\"\n            ,pre+\"/int[5][@name='F'][.='1']\"\n            ,pre+\"/int[6][@name='G'][.='5']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            ,pre+\"/int[2][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test facet unsorted paging, mincount=2\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"2\"\n                ,\"facet.offset\",\"1\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}