{"path":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#setUp().mjava","commits":[{"id":"27639bb5e041490ce599065875dd2f6d8beef62a","date":1532829373,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    if (zkClient().exists(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true))  {\n      zkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, \"{}\".getBytes(StandardCharsets.UTF_8), true);\n    }\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    for (Map.Entry<String, ClusterState.CollectionRef> entry : clusterState.getCollectionStates().entrySet()) {\n      if (entry.getKey().contains(\"_xyz\"))  {\n        try {\n          CollectionAdminRequest.deleteCollection(entry.getKey()).process(cluster.getSolrClient());\n        } catch (Exception e) {\n          log.error(\"Exception while deleting collection: \" + entry.getKey());\n        }\n      }\n    }\n    cluster.deleteAllCollections();\n    cluster.getSolrClient().setDefaultCollection(null);\n\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    LATCH = new CountDownLatch(1);\n\n    int jettys = cluster.getJettySolrRunners().size();\n    if (jettys < NUM_JETTIES) {\n      for (int i = jettys; i < NUM_JETTIES; i++) {\n        cluster.startJettySolrRunner();\n      }\n    } else  {\n      for (int i = jettys; i > NUM_JETTIES; i--) {\n        cluster.stopJettySolrRunner(i - 1);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a819c69d1a3488b540e1e98d7fa419ecd8457a0d","date":1536143830,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    if (zkClient().exists(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true))  {\n      zkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, \"{}\".getBytes(StandardCharsets.UTF_8), true);\n    }\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    for (Map.Entry<String, ClusterState.CollectionRef> entry : clusterState.getCollectionStates().entrySet()) {\n      if (entry.getKey().contains(\"_xyz\"))  {\n        try {\n          CollectionAdminRequest.deleteCollection(entry.getKey()).process(cluster.getSolrClient());\n        } catch (Exception e) {\n          log.error(\"Exception while deleting collection: \" + entry.getKey());\n        }\n      }\n    }\n    cluster.deleteAllCollections();\n    cluster.getSolrClient().setDefaultCollection(null);\n\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    LATCH = new CountDownLatch(1);\n\n    int jettys = cluster.getJettySolrRunners().size();\n    if (jettys < NUM_JETTIES) {\n      for (int i = jettys; i < NUM_JETTIES; i++) {\n        cluster.startJettySolrRunner();\n      }\n    } else  {\n      for (int i = jettys; i > NUM_JETTIES; i--) {\n        cluster.stopJettySolrRunner(i - 1);\n      }\n    }\n    cluster.waitForAllNodes(30);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    if (zkClient().exists(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true))  {\n      zkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, \"{}\".getBytes(StandardCharsets.UTF_8), true);\n    }\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    for (Map.Entry<String, ClusterState.CollectionRef> entry : clusterState.getCollectionStates().entrySet()) {\n      if (entry.getKey().contains(\"_xyz\"))  {\n        try {\n          CollectionAdminRequest.deleteCollection(entry.getKey()).process(cluster.getSolrClient());\n        } catch (Exception e) {\n          log.error(\"Exception while deleting collection: \" + entry.getKey());\n        }\n      }\n    }\n    cluster.deleteAllCollections();\n    cluster.getSolrClient().setDefaultCollection(null);\n\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    LATCH = new CountDownLatch(1);\n\n    int jettys = cluster.getJettySolrRunners().size();\n    if (jettys < NUM_JETTIES) {\n      for (int i = jettys; i < NUM_JETTIES; i++) {\n        cluster.startJettySolrRunner();\n      }\n    } else  {\n      for (int i = jettys; i > NUM_JETTIES; i--) {\n        cluster.stopJettySolrRunner(i - 1);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":4,"author":"markrmiller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#setUp().mjava","sourceNew":null,"sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    if (zkClient().exists(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true))  {\n      zkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, \"{}\".getBytes(StandardCharsets.UTF_8), true);\n    }\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    for (Map.Entry<String, ClusterState.CollectionRef> entry : clusterState.getCollectionStates().entrySet()) {\n      if (entry.getKey().contains(\"_xyz\"))  {\n        try {\n          CollectionAdminRequest.deleteCollection(entry.getKey()).process(cluster.getSolrClient());\n        } catch (Exception e) {\n          log.error(\"Exception while deleting collection: \" + entry.getKey());\n        }\n      }\n    }\n    cluster.deleteAllCollections();\n    cluster.getSolrClient().setDefaultCollection(null);\n\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    LATCH = new CountDownLatch(1);\n\n    int jettys = cluster.getJettySolrRunners().size();\n    if (jettys < NUM_JETTIES) {\n      for (int i = jettys; i < NUM_JETTIES; i++) {\n        cluster.startJettySolrRunner();\n      }\n    } else  {\n      for (int i = jettys; i > NUM_JETTIES; i--) {\n        cluster.stopJettySolrRunner(i - 1);\n      }\n    }\n    cluster.waitForAllNodes(30);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a819c69d1a3488b540e1e98d7fa419ecd8457a0d":["27639bb5e041490ce599065875dd2f6d8beef62a"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a819c69d1a3488b540e1e98d7fa419ecd8457a0d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"27639bb5e041490ce599065875dd2f6d8beef62a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"a819c69d1a3488b540e1e98d7fa419ecd8457a0d":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["27639bb5e041490ce599065875dd2f6d8beef62a"],"27639bb5e041490ce599065875dd2f6d8beef62a":["a819c69d1a3488b540e1e98d7fa419ecd8457a0d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}