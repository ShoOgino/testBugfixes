{"path":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,DirContext,String).mjava","commits":[{"id":"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674","date":1358098706,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,DirContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,String).mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String)\n   */\n  @Override\n  public final Directory get(String path,  DirContext dirContext, String rawLockType)\n      throws IOException {\n    return get(path, dirContext, rawLockType, false);\n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String)\n   */\n  @Override\n  public final Directory get(String path, String rawLockType)\n      throws IOException {\n    return get(path, rawLockType, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,DirContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,String).mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String)\n   */\n  @Override\n  public final Directory get(String path,  DirContext dirContext, String rawLockType)\n      throws IOException {\n    return get(path, dirContext, rawLockType, false);\n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String)\n   */\n  @Override\n  public final Directory get(String path, String rawLockType)\n      throws IOException {\n    return get(path, rawLockType, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54f9a16329716fa08b653c53f1c3dfc6b284d2cc","date":1363905854,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,DirContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,DirContext,String).mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path,  DirContext dirContext, String rawLockType)\n      throws IOException {\n    String fullPath = normalize(path);\n    synchronized (this) {\n      if (closed) {\n        throw new RuntimeException(\"Already closed\");\n      }\n      \n      final CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n      }\n      \n      if (directory == null) { \n        directory = create(fullPath, dirContext);\n        \n        directory = rateLimit(directory);\n        \n        CacheValue newCacheValue = new CacheValue(fullPath, directory);\n        \n        injectLockFactory(directory, fullPath, rawLockType);\n        \n        byDirectoryCache.put(directory, newCacheValue);\n        byPathCache.put(fullPath, newCacheValue);\n        log.info(\"return new directory for \" + fullPath);\n      } else {\n        cacheValue.refCnt++;\n      }\n      \n      return directory;\n    }\n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String)\n   */\n  @Override\n  public final Directory get(String path,  DirContext dirContext, String rawLockType)\n      throws IOException {\n    return get(path, dirContext, rawLockType, false);\n  }\n\n","bugFix":null,"bugIntro":["b50b4ff48426c9a923988e967c6aa5b4693592b4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0471d0887ea55e42e2ed693cd5656136e34e3c25","date":1363930474,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,DirContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,DirContext,String).mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path,  DirContext dirContext, String rawLockType)\n      throws IOException {\n    String fullPath = normalize(path);\n    synchronized (this) {\n      if (closed) {\n        throw new AlreadyClosedException(\"Already closed\");\n      }\n      \n      final CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n      }\n      \n      if (directory == null) { \n        directory = create(fullPath, dirContext);\n        \n        directory = rateLimit(directory);\n        \n        CacheValue newCacheValue = new CacheValue(fullPath, directory);\n        \n        injectLockFactory(directory, fullPath, rawLockType);\n        \n        byDirectoryCache.put(directory, newCacheValue);\n        byPathCache.put(fullPath, newCacheValue);\n        log.info(\"return new directory for \" + fullPath);\n      } else {\n        cacheValue.refCnt++;\n      }\n      \n      return directory;\n    }\n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path,  DirContext dirContext, String rawLockType)\n      throws IOException {\n    String fullPath = normalize(path);\n    synchronized (this) {\n      if (closed) {\n        throw new RuntimeException(\"Already closed\");\n      }\n      \n      final CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n      }\n      \n      if (directory == null) { \n        directory = create(fullPath, dirContext);\n        \n        directory = rateLimit(directory);\n        \n        CacheValue newCacheValue = new CacheValue(fullPath, directory);\n        \n        injectLockFactory(directory, fullPath, rawLockType);\n        \n        byDirectoryCache.put(directory, newCacheValue);\n        byPathCache.put(fullPath, newCacheValue);\n        log.info(\"return new directory for \" + fullPath);\n      } else {\n        cacheValue.refCnt++;\n      }\n      \n      return directory;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"25bbd8e76cd29f2d4b262a24d6a42c754706b143","date":1365910543,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,DirContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,DirContext,String).mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path,  DirContext dirContext, String rawLockType)\n      throws IOException {\n    String fullPath = normalize(path);\n    synchronized (this) {\n      if (closed) {\n        throw new AlreadyClosedException(\"Already closed\");\n      }\n      \n      final CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n      }\n      \n      if (directory == null) { \n        directory = create(fullPath, dirContext);\n        \n        directory = rateLimit(directory);\n        \n        CacheValue newCacheValue = new CacheValue(fullPath, directory);\n        \n        injectLockFactory(directory, fullPath, rawLockType);\n        \n        byDirectoryCache.put(directory, newCacheValue);\n        byPathCache.put(fullPath, newCacheValue);\n        log.info(\"return new directory for \" + fullPath);\n      } else {\n        cacheValue.refCnt++;\n        log.debug(\"Reusing cached directory: {}\", cacheValue);\n      }\n      \n      return directory;\n    }\n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path,  DirContext dirContext, String rawLockType)\n      throws IOException {\n    String fullPath = normalize(path);\n    synchronized (this) {\n      if (closed) {\n        throw new AlreadyClosedException(\"Already closed\");\n      }\n      \n      final CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n      }\n      \n      if (directory == null) { \n        directory = create(fullPath, dirContext);\n        \n        directory = rateLimit(directory);\n        \n        CacheValue newCacheValue = new CacheValue(fullPath, directory);\n        \n        injectLockFactory(directory, fullPath, rawLockType);\n        \n        byDirectoryCache.put(directory, newCacheValue);\n        byPathCache.put(fullPath, newCacheValue);\n        log.info(\"return new directory for \" + fullPath);\n      } else {\n        cacheValue.refCnt++;\n      }\n      \n      return directory;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b50b4ff48426c9a923988e967c6aa5b4693592b4","date":1410742167,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,DirContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,DirContext,String).mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path,  DirContext dirContext, String rawLockType)\n      throws IOException {\n    String fullPath = normalize(path);\n    synchronized (this) {\n      if (closed) {\n        throw new AlreadyClosedException(\"Already closed\");\n      }\n      \n      final CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n      }\n      \n      if (directory == null) {\n        directory = create(fullPath, dirContext);\n        boolean success = false;\n        try {\n          directory = rateLimit(directory);\n          \n          CacheValue newCacheValue = new CacheValue(fullPath, directory);\n          \n          injectLockFactory(directory, fullPath, rawLockType);\n          \n          byDirectoryCache.put(directory, newCacheValue);\n          byPathCache.put(fullPath, newCacheValue);\n          log.info(\"return new directory for \" + fullPath);\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeWhileHandlingException(directory);\n          }\n        }\n      } else {\n        cacheValue.refCnt++;\n        log.debug(\"Reusing cached directory: {}\", cacheValue);\n      }\n      \n      return directory;\n    }\n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path,  DirContext dirContext, String rawLockType)\n      throws IOException {\n    String fullPath = normalize(path);\n    synchronized (this) {\n      if (closed) {\n        throw new AlreadyClosedException(\"Already closed\");\n      }\n      \n      final CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n      }\n      \n      if (directory == null) { \n        directory = create(fullPath, dirContext);\n        \n        directory = rateLimit(directory);\n        \n        CacheValue newCacheValue = new CacheValue(fullPath, directory);\n        \n        injectLockFactory(directory, fullPath, rawLockType);\n        \n        byDirectoryCache.put(directory, newCacheValue);\n        byPathCache.put(fullPath, newCacheValue);\n        log.info(\"return new directory for \" + fullPath);\n      } else {\n        cacheValue.refCnt++;\n        log.debug(\"Reusing cached directory: {}\", cacheValue);\n      }\n      \n      return directory;\n    }\n  }\n\n","bugFix":["54f9a16329716fa08b653c53f1c3dfc6b284d2cc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0a506fe165b26e024afa1aec8a4a7d758e837ff","date":1410971446,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,DirContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,DirContext,String).mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path,  DirContext dirContext, String rawLockType)\n      throws IOException {\n    String fullPath = normalize(path);\n    synchronized (this) {\n      if (closed) {\n        throw new AlreadyClosedException(\"Already closed\");\n      }\n      \n      final CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n      }\n      \n      if (directory == null) {\n        directory = create(fullPath, createLockFactory(fullPath, rawLockType), dirContext);\n        boolean success = false;\n        try {\n          directory = rateLimit(directory);\n          CacheValue newCacheValue = new CacheValue(fullPath, directory);\n          byDirectoryCache.put(directory, newCacheValue);\n          byPathCache.put(fullPath, newCacheValue);\n          log.info(\"return new directory for \" + fullPath);\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeWhileHandlingException(directory);\n          }\n        }\n      } else {\n        cacheValue.refCnt++;\n        log.debug(\"Reusing cached directory: {}\", cacheValue);\n      }\n      \n      return directory;\n    }\n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path,  DirContext dirContext, String rawLockType)\n      throws IOException {\n    String fullPath = normalize(path);\n    synchronized (this) {\n      if (closed) {\n        throw new AlreadyClosedException(\"Already closed\");\n      }\n      \n      final CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n      }\n      \n      if (directory == null) {\n        directory = create(fullPath, dirContext);\n        boolean success = false;\n        try {\n          directory = rateLimit(directory);\n          \n          CacheValue newCacheValue = new CacheValue(fullPath, directory);\n          \n          injectLockFactory(directory, fullPath, rawLockType);\n          \n          byDirectoryCache.put(directory, newCacheValue);\n          byPathCache.put(fullPath, newCacheValue);\n          log.info(\"return new directory for \" + fullPath);\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeWhileHandlingException(directory);\n          }\n        }\n      } else {\n        cacheValue.refCnt++;\n        log.debug(\"Reusing cached directory: {}\", cacheValue);\n      }\n      \n      return directory;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,DirContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,DirContext,String).mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path,  DirContext dirContext, String rawLockType)\n      throws IOException {\n    String fullPath = normalize(path);\n    synchronized (this) {\n      if (closed) {\n        throw new AlreadyClosedException(\"Already closed\");\n      }\n      \n      final CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n      }\n      \n      if (directory == null) {\n        directory = create(fullPath, createLockFactory(rawLockType), dirContext);\n        boolean success = false;\n        try {\n          directory = rateLimit(directory);\n          CacheValue newCacheValue = new CacheValue(fullPath, directory);\n          byDirectoryCache.put(directory, newCacheValue);\n          byPathCache.put(fullPath, newCacheValue);\n          log.info(\"return new directory for \" + fullPath);\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeWhileHandlingException(directory);\n          }\n        }\n      } else {\n        cacheValue.refCnt++;\n        log.debug(\"Reusing cached directory: {}\", cacheValue);\n      }\n      \n      return directory;\n    }\n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path,  DirContext dirContext, String rawLockType)\n      throws IOException {\n    String fullPath = normalize(path);\n    synchronized (this) {\n      if (closed) {\n        throw new AlreadyClosedException(\"Already closed\");\n      }\n      \n      final CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n      }\n      \n      if (directory == null) {\n        directory = create(fullPath, createLockFactory(fullPath, rawLockType), dirContext);\n        boolean success = false;\n        try {\n          directory = rateLimit(directory);\n          CacheValue newCacheValue = new CacheValue(fullPath, directory);\n          byDirectoryCache.put(directory, newCacheValue);\n          byPathCache.put(fullPath, newCacheValue);\n          log.info(\"return new directory for \" + fullPath);\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeWhileHandlingException(directory);\n          }\n        }\n      } else {\n        cacheValue.refCnt++;\n        log.debug(\"Reusing cached directory: {}\", cacheValue);\n      }\n      \n      return directory;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5faf65b6692f15cca0f87bf8666c87899afc619f","date":1420468108,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,DirContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,DirContext,String).mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path,  DirContext dirContext, String rawLockType)\n      throws IOException {\n    String fullPath = normalize(path);\n    synchronized (this) {\n      if (closed) {\n        throw new AlreadyClosedException(\"Already closed\");\n      }\n      \n      final CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n      }\n      \n      if (directory == null) {\n        directory = create(fullPath, createLockFactory(rawLockType), dirContext);\n        boolean success = false;\n        try {\n          CacheValue newCacheValue = new CacheValue(fullPath, directory);\n          byDirectoryCache.put(directory, newCacheValue);\n          byPathCache.put(fullPath, newCacheValue);\n          log.info(\"return new directory for \" + fullPath);\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeWhileHandlingException(directory);\n          }\n        }\n      } else {\n        cacheValue.refCnt++;\n        log.debug(\"Reusing cached directory: {}\", cacheValue);\n      }\n      \n      return directory;\n    }\n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path,  DirContext dirContext, String rawLockType)\n      throws IOException {\n    String fullPath = normalize(path);\n    synchronized (this) {\n      if (closed) {\n        throw new AlreadyClosedException(\"Already closed\");\n      }\n      \n      final CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n      }\n      \n      if (directory == null) {\n        directory = create(fullPath, createLockFactory(rawLockType), dirContext);\n        boolean success = false;\n        try {\n          directory = rateLimit(directory);\n          CacheValue newCacheValue = new CacheValue(fullPath, directory);\n          byDirectoryCache.put(directory, newCacheValue);\n          byPathCache.put(fullPath, newCacheValue);\n          log.info(\"return new directory for \" + fullPath);\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeWhileHandlingException(directory);\n          }\n        }\n      } else {\n        cacheValue.refCnt++;\n        log.debug(\"Reusing cached directory: {}\", cacheValue);\n      }\n      \n      return directory;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"536b47681314488eb94706248be6047a3f142841","date":1450372090,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,DirContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,DirContext,String).mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path,  DirContext dirContext, String rawLockType)\n      throws IOException {\n    String fullPath = normalize(path);\n    synchronized (this) {\n      if (closed) {\n        throw new AlreadyClosedException(\"Already closed\");\n      }\n      \n      final CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n      }\n      \n      if (directory == null) {\n        directory = create(fullPath, createLockFactory(rawLockType), dirContext);\n        assert ObjectReleaseTracker.track(directory);\n        boolean success = false;\n        try {\n          CacheValue newCacheValue = new CacheValue(fullPath, directory);\n          byDirectoryCache.put(directory, newCacheValue);\n          byPathCache.put(fullPath, newCacheValue);\n          log.info(\"return new directory for \" + fullPath);\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeWhileHandlingException(directory);\n          }\n        }\n      } else {\n        cacheValue.refCnt++;\n        log.debug(\"Reusing cached directory: {}\", cacheValue);\n      }\n      \n      return directory;\n    }\n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path,  DirContext dirContext, String rawLockType)\n      throws IOException {\n    String fullPath = normalize(path);\n    synchronized (this) {\n      if (closed) {\n        throw new AlreadyClosedException(\"Already closed\");\n      }\n      \n      final CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n      }\n      \n      if (directory == null) {\n        directory = create(fullPath, createLockFactory(rawLockType), dirContext);\n        boolean success = false;\n        try {\n          CacheValue newCacheValue = new CacheValue(fullPath, directory);\n          byDirectoryCache.put(directory, newCacheValue);\n          byPathCache.put(fullPath, newCacheValue);\n          log.info(\"return new directory for \" + fullPath);\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeWhileHandlingException(directory);\n          }\n        }\n      } else {\n        cacheValue.refCnt++;\n        log.debug(\"Reusing cached directory: {}\", cacheValue);\n      }\n      \n      return directory;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f0c8426396c925de8db3ed3f8ff40fd73670a5c","date":1474556641,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,DirContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,DirContext,String).mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path,  DirContext dirContext, String rawLockType)\n      throws IOException {\n    String fullPath = normalize(path);\n    synchronized (this) {\n      if (closed) {\n        throw new AlreadyClosedException(\"Already closed\");\n      }\n      \n      final CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n      }\n      \n      if (directory == null) {\n        directory = create(fullPath, createLockFactory(rawLockType), dirContext);\n        assert ObjectReleaseTracker.track(directory);\n        boolean success = false;\n        try {\n          CacheValue newCacheValue = new CacheValue(fullPath, directory);\n          byDirectoryCache.put(directory, newCacheValue);\n          byPathCache.put(fullPath, newCacheValue);\n          log.debug(\"return new directory for \" + fullPath);\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeWhileHandlingException(directory);\n          }\n        }\n      } else {\n        cacheValue.refCnt++;\n        log.debug(\"Reusing cached directory: {}\", cacheValue);\n      }\n      \n      return directory;\n    }\n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path,  DirContext dirContext, String rawLockType)\n      throws IOException {\n    String fullPath = normalize(path);\n    synchronized (this) {\n      if (closed) {\n        throw new AlreadyClosedException(\"Already closed\");\n      }\n      \n      final CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n      }\n      \n      if (directory == null) {\n        directory = create(fullPath, createLockFactory(rawLockType), dirContext);\n        assert ObjectReleaseTracker.track(directory);\n        boolean success = false;\n        try {\n          CacheValue newCacheValue = new CacheValue(fullPath, directory);\n          byDirectoryCache.put(directory, newCacheValue);\n          byPathCache.put(fullPath, newCacheValue);\n          log.info(\"return new directory for \" + fullPath);\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeWhileHandlingException(directory);\n          }\n        }\n      } else {\n        cacheValue.refCnt++;\n        log.debug(\"Reusing cached directory: {}\", cacheValue);\n      }\n      \n      return directory;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"126d6ad24eed13163ba0959435d5a80e5672837c","date":1474567302,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,DirContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,DirContext,String).mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path,  DirContext dirContext, String rawLockType)\n      throws IOException {\n    String fullPath = normalize(path);\n    synchronized (this) {\n      if (closed) {\n        throw new AlreadyClosedException(\"Already closed\");\n      }\n      \n      final CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n      }\n      \n      if (directory == null) {\n        directory = create(fullPath, createLockFactory(rawLockType), dirContext);\n        assert ObjectReleaseTracker.track(directory);\n        boolean success = false;\n        try {\n          CacheValue newCacheValue = new CacheValue(fullPath, directory);\n          byDirectoryCache.put(directory, newCacheValue);\n          byPathCache.put(fullPath, newCacheValue);\n          log.debug(\"return new directory for \" + fullPath);\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeWhileHandlingException(directory);\n          }\n        }\n      } else {\n        cacheValue.refCnt++;\n        log.debug(\"Reusing cached directory: {}\", cacheValue);\n      }\n      \n      return directory;\n    }\n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path,  DirContext dirContext, String rawLockType)\n      throws IOException {\n    String fullPath = normalize(path);\n    synchronized (this) {\n      if (closed) {\n        throw new AlreadyClosedException(\"Already closed\");\n      }\n      \n      final CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n      }\n      \n      if (directory == null) {\n        directory = create(fullPath, createLockFactory(rawLockType), dirContext);\n        assert ObjectReleaseTracker.track(directory);\n        boolean success = false;\n        try {\n          CacheValue newCacheValue = new CacheValue(fullPath, directory);\n          byDirectoryCache.put(directory, newCacheValue);\n          byPathCache.put(fullPath, newCacheValue);\n          log.info(\"return new directory for \" + fullPath);\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeWhileHandlingException(directory);\n          }\n        }\n      } else {\n        cacheValue.refCnt++;\n        log.debug(\"Reusing cached directory: {}\", cacheValue);\n      }\n      \n      return directory;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5d615d62cd8aff3690943d765e46942551f98b6","date":1474881754,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,DirContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,DirContext,String).mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path,  DirContext dirContext, String rawLockType)\n      throws IOException {\n    String fullPath = normalize(path);\n    synchronized (this) {\n      if (closed) {\n        throw new AlreadyClosedException(\"Already closed\");\n      }\n      \n      final CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n      }\n      \n      if (directory == null) {\n        directory = create(fullPath, createLockFactory(rawLockType), dirContext);\n        assert ObjectReleaseTracker.track(directory);\n        boolean success = false;\n        try {\n          CacheValue newCacheValue = new CacheValue(fullPath, directory);\n          byDirectoryCache.put(directory, newCacheValue);\n          byPathCache.put(fullPath, newCacheValue);\n          log.debug(\"return new directory for {}\", fullPath);\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeWhileHandlingException(directory);\n          }\n        }\n      } else {\n        cacheValue.refCnt++;\n        log.debug(\"Reusing cached directory: {}\", cacheValue);\n      }\n      \n      return directory;\n    }\n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path,  DirContext dirContext, String rawLockType)\n      throws IOException {\n    String fullPath = normalize(path);\n    synchronized (this) {\n      if (closed) {\n        throw new AlreadyClosedException(\"Already closed\");\n      }\n      \n      final CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n      }\n      \n      if (directory == null) {\n        directory = create(fullPath, createLockFactory(rawLockType), dirContext);\n        assert ObjectReleaseTracker.track(directory);\n        boolean success = false;\n        try {\n          CacheValue newCacheValue = new CacheValue(fullPath, directory);\n          byDirectoryCache.put(directory, newCacheValue);\n          byPathCache.put(fullPath, newCacheValue);\n          log.debug(\"return new directory for \" + fullPath);\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeWhileHandlingException(directory);\n          }\n        }\n      } else {\n        cacheValue.refCnt++;\n        log.debug(\"Reusing cached directory: {}\", cacheValue);\n      }\n      \n      return directory;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,DirContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,DirContext,String).mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path,  DirContext dirContext, String rawLockType)\n      throws IOException {\n    String fullPath = normalize(path);\n    synchronized (this) {\n      if (closed) {\n        throw new AlreadyClosedException(\"Already closed\");\n      }\n      \n      final CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n      }\n      \n      if (directory == null) {\n        directory = create(fullPath, createLockFactory(rawLockType), dirContext);\n        assert ObjectReleaseTracker.track(directory);\n        boolean success = false;\n        try {\n          CacheValue newCacheValue = new CacheValue(fullPath, directory);\n          byDirectoryCache.put(directory, newCacheValue);\n          byPathCache.put(fullPath, newCacheValue);\n          log.debug(\"return new directory for {}\", fullPath);\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeWhileHandlingException(directory);\n          }\n        }\n      } else {\n        cacheValue.refCnt++;\n        log.debug(\"Reusing cached directory: {}\", cacheValue);\n      }\n      \n      return directory;\n    }\n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path,  DirContext dirContext, String rawLockType)\n      throws IOException {\n    String fullPath = normalize(path);\n    synchronized (this) {\n      if (closed) {\n        throw new AlreadyClosedException(\"Already closed\");\n      }\n      \n      final CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n      }\n      \n      if (directory == null) {\n        directory = create(fullPath, createLockFactory(rawLockType), dirContext);\n        assert ObjectReleaseTracker.track(directory);\n        boolean success = false;\n        try {\n          CacheValue newCacheValue = new CacheValue(fullPath, directory);\n          byDirectoryCache.put(directory, newCacheValue);\n          byPathCache.put(fullPath, newCacheValue);\n          log.info(\"return new directory for \" + fullPath);\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeWhileHandlingException(directory);\n          }\n        }\n      } else {\n        cacheValue.refCnt++;\n        log.debug(\"Reusing cached directory: {}\", cacheValue);\n      }\n      \n      return directory;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,DirContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,DirContext,String).mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path,  DirContext dirContext, String rawLockType)\n      throws IOException {\n    String fullPath = normalize(path);\n    synchronized (this) {\n      if (closed) {\n        throw new AlreadyClosedException(\"Already closed\");\n      }\n      \n      final CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n      }\n      \n      if (directory == null) {\n        directory = create(fullPath, createLockFactory(rawLockType), dirContext);\n        assert ObjectReleaseTracker.track(directory);\n        boolean success = false;\n        try {\n          CacheValue newCacheValue = new CacheValue(fullPath, directory);\n          byDirectoryCache.put(directory, newCacheValue);\n          byPathCache.put(fullPath, newCacheValue);\n          log.debug(\"return new directory for {}\", fullPath);\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeWhileHandlingException(directory);\n          }\n        }\n      } else {\n        cacheValue.refCnt++;\n        log.debug(\"Reusing cached directory: {}\", cacheValue);\n      }\n      \n      return directory;\n    }\n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path,  DirContext dirContext, String rawLockType)\n      throws IOException {\n    String fullPath = normalize(path);\n    synchronized (this) {\n      if (closed) {\n        throw new AlreadyClosedException(\"Already closed\");\n      }\n      \n      final CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n      }\n      \n      if (directory == null) {\n        directory = create(fullPath, createLockFactory(rawLockType), dirContext);\n        assert ObjectReleaseTracker.track(directory);\n        boolean success = false;\n        try {\n          CacheValue newCacheValue = new CacheValue(fullPath, directory);\n          byDirectoryCache.put(directory, newCacheValue);\n          byPathCache.put(fullPath, newCacheValue);\n          log.info(\"return new directory for \" + fullPath);\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeWhileHandlingException(directory);\n          }\n        }\n      } else {\n        cacheValue.refCnt++;\n        log.debug(\"Reusing cached directory: {}\", cacheValue);\n      }\n      \n      return directory;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,DirContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#get(String,DirContext,String).mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   *\n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path, DirContext dirContext, String rawLockType)\n      throws IOException {\n    String fullPath = normalize(path);\n    synchronized (this) {\n      if (closed) {\n        throw new AlreadyClosedException(\"Already closed\");\n      }\n\n      final CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n      }\n\n      if (directory == null) {\n        directory = create(fullPath, createLockFactory(rawLockType), dirContext);\n        assert ObjectReleaseTracker.track(directory);\n        boolean success = false;\n        try {\n          CacheValue newCacheValue = new CacheValue(fullPath, directory);\n          byDirectoryCache.put(directory, newCacheValue);\n          byPathCache.put(fullPath, newCacheValue);\n          log.debug(\"return new directory for {}\", fullPath);\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeWhileHandlingException(directory);\n          }\n        }\n      } else {\n        cacheValue.refCnt++;\n        log.debug(\"Reusing cached directory: {}\", cacheValue);\n      }\n\n      return directory;\n    }\n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,\n   * java.lang.String, boolean)\n   */\n  @Override\n  public final Directory get(String path,  DirContext dirContext, String rawLockType)\n      throws IOException {\n    String fullPath = normalize(path);\n    synchronized (this) {\n      if (closed) {\n        throw new AlreadyClosedException(\"Already closed\");\n      }\n      \n      final CacheValue cacheValue = byPathCache.get(fullPath);\n      Directory directory = null;\n      if (cacheValue != null) {\n        directory = cacheValue.directory;\n      }\n      \n      if (directory == null) {\n        directory = create(fullPath, createLockFactory(rawLockType), dirContext);\n        assert ObjectReleaseTracker.track(directory);\n        boolean success = false;\n        try {\n          CacheValue newCacheValue = new CacheValue(fullPath, directory);\n          byDirectoryCache.put(directory, newCacheValue);\n          byPathCache.put(fullPath, newCacheValue);\n          log.debug(\"return new directory for {}\", fullPath);\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeWhileHandlingException(directory);\n          }\n        }\n      } else {\n        cacheValue.refCnt++;\n        log.debug(\"Reusing cached directory: {}\", cacheValue);\n      }\n      \n      return directory;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0a506fe165b26e024afa1aec8a4a7d758e837ff":["b50b4ff48426c9a923988e967c6aa5b4693592b4"],"536b47681314488eb94706248be6047a3f142841":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"285cdc737de75b7cc7c284a156b20214deb67bca":["a0a506fe165b26e024afa1aec8a4a7d758e837ff"],"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["536b47681314488eb94706248be6047a3f142841"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["536b47681314488eb94706248be6047a3f142841","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a5d615d62cd8aff3690943d765e46942551f98b6":["126d6ad24eed13163ba0959435d5a80e5672837c"],"126d6ad24eed13163ba0959435d5a80e5672837c":["536b47681314488eb94706248be6047a3f142841","7f0c8426396c925de8db3ed3f8ff40fd73670a5c"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["536b47681314488eb94706248be6047a3f142841","a5d615d62cd8aff3690943d765e46942551f98b6"],"54f9a16329716fa08b653c53f1c3dfc6b284d2cc":["1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["285cdc737de75b7cc7c284a156b20214deb67bca"],"b50b4ff48426c9a923988e967c6aa5b4693592b4":["25bbd8e76cd29f2d4b262a24d6a42c754706b143"],"25bbd8e76cd29f2d4b262a24d6a42c754706b143":["0471d0887ea55e42e2ed693cd5656136e34e3c25"],"0471d0887ea55e42e2ed693cd5656136e34e3c25":["54f9a16329716fa08b653c53f1c3dfc6b284d2cc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2668c99990e4c94a78bac005aa682b7c5986d23a"]},"commit2Childs":{"a0a506fe165b26e024afa1aec8a4a7d758e837ff":["285cdc737de75b7cc7c284a156b20214deb67bca"],"536b47681314488eb94706248be6047a3f142841":["7f0c8426396c925de8db3ed3f8ff40fd73670a5c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","126d6ad24eed13163ba0959435d5a80e5672837c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674":["8917bfede3b4ca30f4305c1e391e9218959cd723","54f9a16329716fa08b653c53f1c3dfc6b284d2cc"],"285cdc737de75b7cc7c284a156b20214deb67bca":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["126d6ad24eed13163ba0959435d5a80e5672837c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"a5d615d62cd8aff3690943d765e46942551f98b6":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"126d6ad24eed13163ba0959435d5a80e5672837c":["a5d615d62cd8aff3690943d765e46942551f98b6"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8917bfede3b4ca30f4305c1e391e9218959cd723","1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","2668c99990e4c94a78bac005aa682b7c5986d23a"],"54f9a16329716fa08b653c53f1c3dfc6b284d2cc":["0471d0887ea55e42e2ed693cd5656136e34e3c25"],"b50b4ff48426c9a923988e967c6aa5b4693592b4":["a0a506fe165b26e024afa1aec8a4a7d758e837ff"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["536b47681314488eb94706248be6047a3f142841"],"25bbd8e76cd29f2d4b262a24d6a42c754706b143":["b50b4ff48426c9a923988e967c6aa5b4693592b4"],"0471d0887ea55e42e2ed693cd5656136e34e3c25":["25bbd8e76cd29f2d4b262a24d6a42c754706b143"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}