{"path":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testStressLuceneNRT().mjava","commits":[{"id":"4aa2440480b1dcdc4da1711d161e7d62248dcabb","date":1311784060,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testStressLuceneNRT().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testStressLuceneNRT() throws Exception {\n    // update variables\n    final int commitPercent = 10;\n    final int softCommitPercent = 50; // what percent of the commits are soft\n    final int deletePercent = 8;\n    final int deleteByQueryPercent = 4;\n    final int ndocs = 100;\n    int nWriteThreads = 10;\n    final int maxConcurrentCommits = 2;   // number of committers at a time... needed if we want to avoid commit errors due to exceeding the max\n\n    // query variables\n    final AtomicLong operations = new AtomicLong(100000);  // number of query operations to perform in total\n    int nReadThreads = 10;\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n    RAMDirectory dir = new RAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_40, new WhitespaceAnalyzer(Version.LUCENE_40)));\n    writer.commit();\n    reader = IndexReader.open(dir);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,Long> newCommittedModel;\n                  long version;\n\n                  synchronized(TestRealTimeGet.this) {\n                    newCommittedModel = new HashMap<Integer,Long>(model);  // take a snapshot\n                    version = snapshotCount++;\n                  }\n\n                  IndexReader newReader;\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    // assertU(h.commit(\"softCommit\",\"true\"));\n                    newReader = reader.reopen(writer, true);\n                  } else {\n                    // assertU(commit());\n                    writer.commit();\n                    newReader = reader.reopen();\n                  }\n\n                  synchronized(TestRealTimeGet.this) {\n                    // install the new reader if it's newest\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      reader.decRef();\n                      reader = newReader;\n                    } else if (newReader != reader) {\n                      newReader.decRef();\n                    }\n\n                    // install this snapshot only if it's newer than the current one\n                    if (version >= committedModelClock) {\n                      committedModel = newCommittedModel;\n                      committedModelClock = version;\n                    }\n\n                  }\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id = rand.nextInt(ndocs);\n              Object sync = syncArr[id];\n\n              // set the lastId before we actually change it sometimes to try and\n              // uncover more race conditions between writing and reading\n              boolean before = random.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              // We can't concurrently update the same document and retain our invariants of increasing values\n              // since we can't guarantee what order the updates will be executed.\n              synchronized (sync) {\n                Long val = model.get(id);\n                long nextVal = Math.abs(val)+1;\n\n                if (oper < commitPercent + deletePercent) {\n                  // assertU(\"<delete><id>\" + id + \"</id></delete>\");\n                  writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                  model.put(id, -nextVal);\n                } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                  //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n                  writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                  model.put(id, -nextVal);\n                } else {\n                  // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                  Document d = new Document();\n                  d.add(new Field(\"id\",Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                  d.add(new Field(field, Long.toString(nextVal), Field.Store.YES, Field.Index.NO));\n                  writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                  model.put(id, nextVal);\n                }\n              }\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Exception  ex) {\n            throw new RuntimeException(ex);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              int oper = rand.nextInt(100);\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              long val;\n\n              synchronized(TestRealTimeGet.this) {\n                val = committedModel.get(id);\n              }\n\n\n              IndexReader r;\n              synchronized(TestRealTimeGet.this) {\n                r = reader;\n                r.incRef();\n              }\n\n              //  sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              IndexSearcher searcher = new IndexSearcher(r);\n              Query q = new TermQuery(new Term(\"id\",Integer.toString(id)));\n              TopDocs results = searcher.search(q, 10);\n\n              if (results.totalHits == 0) {\n                // there's no info we can get back with a delete, so not much we can check without further synchronization\n              } else {\n                assertEquals(1, results.totalHits);\n                Document doc = searcher.doc(results.scoreDocs[0].doc);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  System.out.println(\"model_val=\"+val+\" foundVal=\"+foundVal);\n                }\n                assertTrue(foundVal >= Math.abs(val));\n              }\n\n              r.decRef();\n            }\n          }\n          catch (Throwable e) {\n            operations.set(-1L);\n            SolrException.log(log,e);\n            fail(e.toString());\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    reader.close();\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d8e411397bc0d26f70339dbe2d59dc162d92237","date":1311795429,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testStressLuceneNRT().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testStressLuceneNRT().mjava","sourceNew":"  @Test\n  public void testStressLuceneNRT() throws Exception {\n    // update variables\n    final int commitPercent = 10;\n    final int softCommitPercent = 50; // what percent of the commits are soft\n    final int deletePercent = 8;\n    final int deleteByQueryPercent = 4;\n    final int ndocs = 100;\n    int nWriteThreads = 10;\n    final int maxConcurrentCommits = 2;   // number of committers at a time... needed if we want to avoid commit errors due to exceeding the max\n\n    // query variables\n    final AtomicLong operations = new AtomicLong(10000000);  // number of query operations to perform in total       // TODO: temporarily high due to lack of stability\n    int nReadThreads = 10;\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n    RAMDirectory dir = new RAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_40, new WhitespaceAnalyzer(Version.LUCENE_40)));\n    writer.commit();\n    reader = IndexReader.open(dir);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,Long> newCommittedModel;\n                  long version;\n                  IndexReader oldReader;\n\n                  synchronized(TestRealTimeGet.this) {\n                    newCommittedModel = new HashMap<Integer,Long>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  IndexReader newReader;\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    // assertU(h.commit(\"softCommit\",\"true\"));\n                    newReader = oldReader.reopen(writer, true);\n                  } else {\n                    // assertU(commit());\n                    writer.commit();\n                    newReader = oldReader.reopen();\n                  }\n\n                  synchronized(TestRealTimeGet.this) {\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      reader.decRef();\n                      reader = newReader;\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      }\n\n                    } else if (newReader != oldReader) {\n                      // if the same reader, don't decRef.\n                      newReader.decRef();\n                    }\n\n                    oldReader.decRef();\n                  }\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id = rand.nextInt(ndocs);\n              Object sync = syncArr[id];\n\n              // set the lastId before we actually change it sometimes to try and\n              // uncover more race conditions between writing and reading\n              boolean before = random.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              // We can't concurrently update the same document and retain our invariants of increasing values\n              // since we can't guarantee what order the updates will be executed.\n              synchronized (sync) {\n                Long val = model.get(id);\n                long nextVal = Math.abs(val)+1;\n\n                if (oper < commitPercent + deletePercent) {\n                  // assertU(\"<delete><id>\" + id + \"</id></delete>\");\n                  writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                  model.put(id, -nextVal);\n                } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                  //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n                  writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                  model.put(id, -nextVal);\n                } else {\n                  // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                  Document d = new Document();\n                  d.add(new Field(\"id\",Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                  d.add(new Field(field, Long.toString(nextVal), Field.Store.YES, Field.Index.NO));\n                  writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                  model.put(id, nextVal);\n                }\n              }\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Exception  ex) {\n            throw new RuntimeException(ex);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              long val;\n\n              synchronized(TestRealTimeGet.this) {\n                val = committedModel.get(id);\n              }\n\n\n              IndexReader r;\n              synchronized(TestRealTimeGet.this) {\n                r = reader;\n                r.incRef();\n              }\n\n              //  sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              IndexSearcher searcher = new IndexSearcher(r);\n              Query q = new TermQuery(new Term(\"id\",Integer.toString(id)));\n              TopDocs results = searcher.search(q, 10);\n\n              if (results.totalHits == 0) {\n                // there's no info we can get back with a delete, so not much we can check without further synchronization\n              } else {\n                assertEquals(1, results.totalHits);\n                Document doc = searcher.doc(results.scoreDocs[0].doc);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  System.out.println(\"model_val=\"+val+\" foundVal=\"+foundVal);\n                }\n                assertTrue(foundVal >= Math.abs(val));\n              }\n\n              r.decRef();\n            }\n          }\n          catch (Throwable e) {\n            operations.set(-1L);\n            SolrException.log(log,e);\n            fail(e.toString());\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    reader.close();\n\n  }\n\n","sourceOld":"  @Test\n  public void testStressLuceneNRT() throws Exception {\n    // update variables\n    final int commitPercent = 10;\n    final int softCommitPercent = 50; // what percent of the commits are soft\n    final int deletePercent = 8;\n    final int deleteByQueryPercent = 4;\n    final int ndocs = 100;\n    int nWriteThreads = 10;\n    final int maxConcurrentCommits = 2;   // number of committers at a time... needed if we want to avoid commit errors due to exceeding the max\n\n    // query variables\n    final AtomicLong operations = new AtomicLong(100000);  // number of query operations to perform in total\n    int nReadThreads = 10;\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n    RAMDirectory dir = new RAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_40, new WhitespaceAnalyzer(Version.LUCENE_40)));\n    writer.commit();\n    reader = IndexReader.open(dir);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,Long> newCommittedModel;\n                  long version;\n\n                  synchronized(TestRealTimeGet.this) {\n                    newCommittedModel = new HashMap<Integer,Long>(model);  // take a snapshot\n                    version = snapshotCount++;\n                  }\n\n                  IndexReader newReader;\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    // assertU(h.commit(\"softCommit\",\"true\"));\n                    newReader = reader.reopen(writer, true);\n                  } else {\n                    // assertU(commit());\n                    writer.commit();\n                    newReader = reader.reopen();\n                  }\n\n                  synchronized(TestRealTimeGet.this) {\n                    // install the new reader if it's newest\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      reader.decRef();\n                      reader = newReader;\n                    } else if (newReader != reader) {\n                      newReader.decRef();\n                    }\n\n                    // install this snapshot only if it's newer than the current one\n                    if (version >= committedModelClock) {\n                      committedModel = newCommittedModel;\n                      committedModelClock = version;\n                    }\n\n                  }\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id = rand.nextInt(ndocs);\n              Object sync = syncArr[id];\n\n              // set the lastId before we actually change it sometimes to try and\n              // uncover more race conditions between writing and reading\n              boolean before = random.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              // We can't concurrently update the same document and retain our invariants of increasing values\n              // since we can't guarantee what order the updates will be executed.\n              synchronized (sync) {\n                Long val = model.get(id);\n                long nextVal = Math.abs(val)+1;\n\n                if (oper < commitPercent + deletePercent) {\n                  // assertU(\"<delete><id>\" + id + \"</id></delete>\");\n                  writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                  model.put(id, -nextVal);\n                } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                  //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n                  writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                  model.put(id, -nextVal);\n                } else {\n                  // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                  Document d = new Document();\n                  d.add(new Field(\"id\",Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                  d.add(new Field(field, Long.toString(nextVal), Field.Store.YES, Field.Index.NO));\n                  writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                  model.put(id, nextVal);\n                }\n              }\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Exception  ex) {\n            throw new RuntimeException(ex);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              int oper = rand.nextInt(100);\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              long val;\n\n              synchronized(TestRealTimeGet.this) {\n                val = committedModel.get(id);\n              }\n\n\n              IndexReader r;\n              synchronized(TestRealTimeGet.this) {\n                r = reader;\n                r.incRef();\n              }\n\n              //  sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              IndexSearcher searcher = new IndexSearcher(r);\n              Query q = new TermQuery(new Term(\"id\",Integer.toString(id)));\n              TopDocs results = searcher.search(q, 10);\n\n              if (results.totalHits == 0) {\n                // there's no info we can get back with a delete, so not much we can check without further synchronization\n              } else {\n                assertEquals(1, results.totalHits);\n                Document doc = searcher.doc(results.scoreDocs[0].doc);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  System.out.println(\"model_val=\"+val+\" foundVal=\"+foundVal);\n                }\n                assertTrue(foundVal >= Math.abs(val));\n              }\n\n              r.decRef();\n            }\n          }\n          catch (Throwable e) {\n            operations.set(-1L);\n            SolrException.log(log,e);\n            fail(e.toString());\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    reader.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73f40b658bbabc7fa3c8db81a47ba2e03af28f8a","date":1311798814,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testStressLuceneNRT().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testStressLuceneNRT().mjava","sourceNew":"  @Test\n  public void testStressLuceneNRT() throws Exception {\n    // update variables\n    final int commitPercent = 10;\n    final int softCommitPercent = 50; // what percent of the commits are soft\n    final int deletePercent = 8;\n    final int deleteByQueryPercent = 4;\n    final int ndocs = 100;\n    int nWriteThreads = 10;\n    final int maxConcurrentCommits = 2;   // number of committers at a time... needed if we want to avoid commit errors due to exceeding the max\n    final boolean tombstones = false;\n\n    // query variables\n    final AtomicLong operations = new AtomicLong(10000000);  // number of query operations to perform in total       // TODO: temporarily high due to lack of stability\n    int nReadThreads = 10;\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n    RAMDirectory dir = new RAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_40, new WhitespaceAnalyzer(Version.LUCENE_40)));\n    writer.commit();\n    reader = IndexReader.open(dir);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,Long> newCommittedModel;\n                  long version;\n                  IndexReader oldReader;\n\n                  synchronized(TestRealTimeGet.this) {\n                    newCommittedModel = new HashMap<Integer,Long>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  IndexReader newReader;\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    // assertU(h.commit(\"softCommit\",\"true\"));\n                    newReader = oldReader.reopen(writer, true);\n                  } else {\n                    // assertU(commit());\n                    writer.commit();\n                    newReader = oldReader.reopen();\n                  }\n\n                  synchronized(TestRealTimeGet.this) {\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      reader.decRef();\n                      reader = newReader;\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      }\n\n                    } else if (newReader != oldReader) {\n                      // if the same reader, don't decRef.\n                      newReader.decRef();\n                    }\n\n                    oldReader.decRef();\n                  }\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id = rand.nextInt(ndocs);\n              Object sync = syncArr[id];\n\n              // set the lastId before we actually change it sometimes to try and\n              // uncover more race conditions between writing and reading\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              // We can't concurrently update the same document and retain our invariants of increasing values\n              // since we can't guarantee what order the updates will be executed.\n              synchronized (sync) {\n                Long val = model.get(id);\n                long nextVal = Math.abs(val)+1;\n\n                if (oper < commitPercent + deletePercent) {\n                  // assertU(\"<delete><id>\" + id + \"</id></delete>\");\n\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                    d.add(new Field(field, Long.toString(nextVal), Field.Store.YES, Field.Index.NO));\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                  model.put(id, -nextVal);\n                } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                  //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                    d.add(new Field(field, Long.toString(nextVal), Field.Store.YES, Field.Index.NO));\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                  model.put(id, -nextVal);\n                } else {\n                  // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                  Document d = new Document();\n                  d.add(new Field(\"id\",Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                  d.add(new Field(field, Long.toString(nextVal), Field.Store.YES, Field.Index.NO));\n                  writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n\n                  if (tombstones) {\n                    // remove tombstone after new addition (this should be optional?)\n                    writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                  }\n\n                  model.put(id, nextVal);\n                }\n              }\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Exception  ex) {\n            throw new RuntimeException(ex);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              long val;\n\n              synchronized(TestRealTimeGet.this) {\n                val = committedModel.get(id);\n              }\n\n\n              IndexReader r;\n              synchronized(TestRealTimeGet.this) {\n                r = reader;\n                r.incRef();\n              }\n\n              //  sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              IndexSearcher searcher = new IndexSearcher(r);\n              Query q = new TermQuery(new Term(\"id\",Integer.toString(id)));\n              TopDocs results = searcher.search(q, 1);\n\n              if (results.totalHits == 0 && tombstones) {\n                // if we couldn't find the doc, look for it's tombstone\n                q = new TermQuery(new Term(\"id\",\"-\"+Integer.toString(id)));\n                results = searcher.search(q, 1);\n                if (results.totalHits == 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    continue;\n                  }\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val);\n                }\n              }\n\n              if (results.totalHits == 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                assertEquals(1, results.totalHits);   // we should have found the document, or it's tombstone\n                Document doc = searcher.doc(results.scoreDocs[0].doc);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  System.out.println(\"model_val=\"+val+\" foundVal=\"+foundVal);\n                }\n                assertTrue(foundVal >= Math.abs(val));\n              }\n\n              r.decRef();\n            }\n          }\n          catch (Throwable e) {\n            operations.set(-1L);\n            SolrException.log(log,e);\n            fail(e.toString());\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    reader.close();\n\n  }\n\n","sourceOld":"  @Test\n  public void testStressLuceneNRT() throws Exception {\n    // update variables\n    final int commitPercent = 10;\n    final int softCommitPercent = 50; // what percent of the commits are soft\n    final int deletePercent = 8;\n    final int deleteByQueryPercent = 4;\n    final int ndocs = 100;\n    int nWriteThreads = 10;\n    final int maxConcurrentCommits = 2;   // number of committers at a time... needed if we want to avoid commit errors due to exceeding the max\n\n    // query variables\n    final AtomicLong operations = new AtomicLong(10000000);  // number of query operations to perform in total       // TODO: temporarily high due to lack of stability\n    int nReadThreads = 10;\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n    RAMDirectory dir = new RAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_40, new WhitespaceAnalyzer(Version.LUCENE_40)));\n    writer.commit();\n    reader = IndexReader.open(dir);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,Long> newCommittedModel;\n                  long version;\n                  IndexReader oldReader;\n\n                  synchronized(TestRealTimeGet.this) {\n                    newCommittedModel = new HashMap<Integer,Long>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  IndexReader newReader;\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    // assertU(h.commit(\"softCommit\",\"true\"));\n                    newReader = oldReader.reopen(writer, true);\n                  } else {\n                    // assertU(commit());\n                    writer.commit();\n                    newReader = oldReader.reopen();\n                  }\n\n                  synchronized(TestRealTimeGet.this) {\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      reader.decRef();\n                      reader = newReader;\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      }\n\n                    } else if (newReader != oldReader) {\n                      // if the same reader, don't decRef.\n                      newReader.decRef();\n                    }\n\n                    oldReader.decRef();\n                  }\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id = rand.nextInt(ndocs);\n              Object sync = syncArr[id];\n\n              // set the lastId before we actually change it sometimes to try and\n              // uncover more race conditions between writing and reading\n              boolean before = random.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              // We can't concurrently update the same document and retain our invariants of increasing values\n              // since we can't guarantee what order the updates will be executed.\n              synchronized (sync) {\n                Long val = model.get(id);\n                long nextVal = Math.abs(val)+1;\n\n                if (oper < commitPercent + deletePercent) {\n                  // assertU(\"<delete><id>\" + id + \"</id></delete>\");\n                  writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                  model.put(id, -nextVal);\n                } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                  //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n                  writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                  model.put(id, -nextVal);\n                } else {\n                  // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                  Document d = new Document();\n                  d.add(new Field(\"id\",Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                  d.add(new Field(field, Long.toString(nextVal), Field.Store.YES, Field.Index.NO));\n                  writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                  model.put(id, nextVal);\n                }\n              }\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Exception  ex) {\n            throw new RuntimeException(ex);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              long val;\n\n              synchronized(TestRealTimeGet.this) {\n                val = committedModel.get(id);\n              }\n\n\n              IndexReader r;\n              synchronized(TestRealTimeGet.this) {\n                r = reader;\n                r.incRef();\n              }\n\n              //  sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              IndexSearcher searcher = new IndexSearcher(r);\n              Query q = new TermQuery(new Term(\"id\",Integer.toString(id)));\n              TopDocs results = searcher.search(q, 10);\n\n              if (results.totalHits == 0) {\n                // there's no info we can get back with a delete, so not much we can check without further synchronization\n              } else {\n                assertEquals(1, results.totalHits);\n                Document doc = searcher.doc(results.scoreDocs[0].doc);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  System.out.println(\"model_val=\"+val+\" foundVal=\"+foundVal);\n                }\n                assertTrue(foundVal >= Math.abs(val));\n              }\n\n              r.decRef();\n            }\n          }\n          catch (Throwable e) {\n            operations.set(-1L);\n            SolrException.log(log,e);\n            fail(e.toString());\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    reader.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb3c909db13817ccc1cb1f2177972451dc48e24","date":1311886455,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testStressLuceneNRT().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testStressLuceneNRT().mjava","sourceNew":"  @Ignore\n  @Test\n  public void testStressLuceneNRT() throws Exception {\n    // update variables\n    final int commitPercent = 10;\n    final int softCommitPercent = 50; // what percent of the commits are soft\n    final int deletePercent = 8;\n    final int deleteByQueryPercent = 4;\n    final int ndocs = 100;\n    int nWriteThreads = 10;\n    final int maxConcurrentCommits = 2;   // number of committers at a time... needed if we want to avoid commit errors due to exceeding the max\n    final boolean tombstones = false;\n\n    // query variables\n    final AtomicLong operations = new AtomicLong(10000000);  // number of query operations to perform in total       // TODO: temporarily high due to lack of stability\n    int nReadThreads = 10;\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n    RAMDirectory dir = new RAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_40, new WhitespaceAnalyzer(Version.LUCENE_40)));\n    writer.commit();\n    reader = IndexReader.open(dir);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,Long> newCommittedModel;\n                  long version;\n                  IndexReader oldReader;\n\n                  synchronized(TestRealTimeGet.this) {\n                    newCommittedModel = new HashMap<Integer,Long>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  IndexReader newReader;\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    // assertU(h.commit(\"softCommit\",\"true\"));\n                    newReader = oldReader.reopen(writer, true);\n                  } else {\n                    // assertU(commit());\n                    writer.commit();\n                    newReader = oldReader.reopen();\n                  }\n\n                  synchronized(TestRealTimeGet.this) {\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      reader.decRef();\n                      reader = newReader;\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      }\n\n                    } else if (newReader != oldReader) {\n                      // if the same reader, don't decRef.\n                      newReader.decRef();\n                    }\n\n                    oldReader.decRef();\n                  }\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id = rand.nextInt(ndocs);\n              Object sync = syncArr[id];\n\n              // set the lastId before we actually change it sometimes to try and\n              // uncover more race conditions between writing and reading\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              // We can't concurrently update the same document and retain our invariants of increasing values\n              // since we can't guarantee what order the updates will be executed.\n              synchronized (sync) {\n                Long val = model.get(id);\n                long nextVal = Math.abs(val)+1;\n\n                if (oper < commitPercent + deletePercent) {\n                  // assertU(\"<delete><id>\" + id + \"</id></delete>\");\n\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                    d.add(new Field(field, Long.toString(nextVal), Field.Store.YES, Field.Index.NO));\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                  model.put(id, -nextVal);\n                } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                  //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                    d.add(new Field(field, Long.toString(nextVal), Field.Store.YES, Field.Index.NO));\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                  model.put(id, -nextVal);\n                } else {\n                  // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                  Document d = new Document();\n                  d.add(new Field(\"id\",Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                  d.add(new Field(field, Long.toString(nextVal), Field.Store.YES, Field.Index.NO));\n                  writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n\n                  if (tombstones) {\n                    // remove tombstone after new addition (this should be optional?)\n                    writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                  }\n\n                  model.put(id, nextVal);\n                }\n              }\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Exception  ex) {\n            throw new RuntimeException(ex);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              long val;\n\n              synchronized(TestRealTimeGet.this) {\n                val = committedModel.get(id);\n              }\n\n\n              IndexReader r;\n              synchronized(TestRealTimeGet.this) {\n                r = reader;\n                r.incRef();\n              }\n\n              //  sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              IndexSearcher searcher = new IndexSearcher(r);\n              Query q = new TermQuery(new Term(\"id\",Integer.toString(id)));\n              TopDocs results = searcher.search(q, 1);\n\n              if (results.totalHits == 0 && tombstones) {\n                // if we couldn't find the doc, look for it's tombstone\n                q = new TermQuery(new Term(\"id\",\"-\"+Integer.toString(id)));\n                results = searcher.search(q, 1);\n                if (results.totalHits == 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    continue;\n                  }\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val);\n                }\n              }\n\n              if (results.totalHits == 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                assertEquals(1, results.totalHits);   // we should have found the document, or it's tombstone\n                Document doc = searcher.doc(results.scoreDocs[0].doc);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  System.out.println(\"model_val=\"+val+\" foundVal=\"+foundVal);\n                }\n                assertTrue(foundVal >= Math.abs(val));\n              }\n\n              r.decRef();\n            }\n          }\n          catch (Throwable e) {\n            operations.set(-1L);\n            SolrException.log(log,e);\n            fail(e.toString());\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    reader.close();\n\n  }\n\n","sourceOld":"  @Test\n  public void testStressLuceneNRT() throws Exception {\n    // update variables\n    final int commitPercent = 10;\n    final int softCommitPercent = 50; // what percent of the commits are soft\n    final int deletePercent = 8;\n    final int deleteByQueryPercent = 4;\n    final int ndocs = 100;\n    int nWriteThreads = 10;\n    final int maxConcurrentCommits = 2;   // number of committers at a time... needed if we want to avoid commit errors due to exceeding the max\n    final boolean tombstones = false;\n\n    // query variables\n    final AtomicLong operations = new AtomicLong(10000000);  // number of query operations to perform in total       // TODO: temporarily high due to lack of stability\n    int nReadThreads = 10;\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n    RAMDirectory dir = new RAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_40, new WhitespaceAnalyzer(Version.LUCENE_40)));\n    writer.commit();\n    reader = IndexReader.open(dir);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,Long> newCommittedModel;\n                  long version;\n                  IndexReader oldReader;\n\n                  synchronized(TestRealTimeGet.this) {\n                    newCommittedModel = new HashMap<Integer,Long>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  IndexReader newReader;\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    // assertU(h.commit(\"softCommit\",\"true\"));\n                    newReader = oldReader.reopen(writer, true);\n                  } else {\n                    // assertU(commit());\n                    writer.commit();\n                    newReader = oldReader.reopen();\n                  }\n\n                  synchronized(TestRealTimeGet.this) {\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      reader.decRef();\n                      reader = newReader;\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      }\n\n                    } else if (newReader != oldReader) {\n                      // if the same reader, don't decRef.\n                      newReader.decRef();\n                    }\n\n                    oldReader.decRef();\n                  }\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id = rand.nextInt(ndocs);\n              Object sync = syncArr[id];\n\n              // set the lastId before we actually change it sometimes to try and\n              // uncover more race conditions between writing and reading\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              // We can't concurrently update the same document and retain our invariants of increasing values\n              // since we can't guarantee what order the updates will be executed.\n              synchronized (sync) {\n                Long val = model.get(id);\n                long nextVal = Math.abs(val)+1;\n\n                if (oper < commitPercent + deletePercent) {\n                  // assertU(\"<delete><id>\" + id + \"</id></delete>\");\n\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                    d.add(new Field(field, Long.toString(nextVal), Field.Store.YES, Field.Index.NO));\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                  model.put(id, -nextVal);\n                } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                  //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                    d.add(new Field(field, Long.toString(nextVal), Field.Store.YES, Field.Index.NO));\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                  model.put(id, -nextVal);\n                } else {\n                  // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                  Document d = new Document();\n                  d.add(new Field(\"id\",Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                  d.add(new Field(field, Long.toString(nextVal), Field.Store.YES, Field.Index.NO));\n                  writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n\n                  if (tombstones) {\n                    // remove tombstone after new addition (this should be optional?)\n                    writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                  }\n\n                  model.put(id, nextVal);\n                }\n              }\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Exception  ex) {\n            throw new RuntimeException(ex);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              long val;\n\n              synchronized(TestRealTimeGet.this) {\n                val = committedModel.get(id);\n              }\n\n\n              IndexReader r;\n              synchronized(TestRealTimeGet.this) {\n                r = reader;\n                r.incRef();\n              }\n\n              //  sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              IndexSearcher searcher = new IndexSearcher(r);\n              Query q = new TermQuery(new Term(\"id\",Integer.toString(id)));\n              TopDocs results = searcher.search(q, 1);\n\n              if (results.totalHits == 0 && tombstones) {\n                // if we couldn't find the doc, look for it's tombstone\n                q = new TermQuery(new Term(\"id\",\"-\"+Integer.toString(id)));\n                results = searcher.search(q, 1);\n                if (results.totalHits == 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    continue;\n                  }\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val);\n                }\n              }\n\n              if (results.totalHits == 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                assertEquals(1, results.totalHits);   // we should have found the document, or it's tombstone\n                Document doc = searcher.doc(results.scoreDocs[0].doc);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  System.out.println(\"model_val=\"+val+\" foundVal=\"+foundVal);\n                }\n                assertTrue(foundVal >= Math.abs(val));\n              }\n\n              r.decRef();\n            }\n          }\n          catch (Throwable e) {\n            operations.set(-1L);\n            SolrException.log(log,e);\n            fail(e.toString());\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    reader.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"671279fa1676e7f2755c2745a25abd77a169f992","date":1312053489,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testStressLuceneNRT().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testStressLuceneNRT().mjava","sourceNew":"  @Ignore\n  @Test\n  public void testStressLuceneNRT() throws Exception {\n    // update variables\n    final int commitPercent = 10;\n    final int softCommitPercent = 50; // what percent of the commits are soft\n    final int deletePercent = 8;\n    final int deleteByQueryPercent = 4;\n    final int ndocs = 100;\n    int nWriteThreads = 10;\n    final int maxConcurrentCommits = 2;   // number of committers at a time... needed if we want to avoid commit errors due to exceeding the max\n    final boolean tombstones = false;\n\n    // query variables\n    final AtomicLong operations = new AtomicLong(0);  // number of query operations to perform in total       // TODO: temporarily high due to lack of stability\n    int nReadThreads = 10;\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n    RAMDirectory dir = new RAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_40, new WhitespaceAnalyzer(Version.LUCENE_40)));\n    writer.commit();\n    reader = IndexReader.open(dir);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,Long> newCommittedModel;\n                  long version;\n                  IndexReader oldReader;\n\n                  synchronized(TestRealTimeGet.this) {\n                    newCommittedModel = new HashMap<Integer,Long>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  IndexReader newReader;\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    // assertU(h.commit(\"softCommit\",\"true\"));\n                    newReader = oldReader.reopen(writer, true);\n                  } else {\n                    // assertU(commit());\n                    writer.commit();\n                    newReader = oldReader.reopen();\n                  }\n\n                  synchronized(TestRealTimeGet.this) {\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      reader.decRef();\n                      reader = newReader;\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      }\n\n                    } else if (newReader != oldReader) {\n                      // if the same reader, don't decRef.\n                      newReader.decRef();\n                    }\n\n                    oldReader.decRef();\n                  }\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id = rand.nextInt(ndocs);\n              Object sync = syncArr[id];\n\n              // set the lastId before we actually change it sometimes to try and\n              // uncover more race conditions between writing and reading\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              // We can't concurrently update the same document and retain our invariants of increasing values\n              // since we can't guarantee what order the updates will be executed.\n              synchronized (sync) {\n                Long val = model.get(id);\n                long nextVal = Math.abs(val)+1;\n\n                if (oper < commitPercent + deletePercent) {\n                  // assertU(\"<delete><id>\" + id + \"</id></delete>\");\n\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                    d.add(new Field(field, Long.toString(nextVal), Field.Store.YES, Field.Index.NO));\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                  model.put(id, -nextVal);\n                } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                  //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                    d.add(new Field(field, Long.toString(nextVal), Field.Store.YES, Field.Index.NO));\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                  model.put(id, -nextVal);\n                } else {\n                  // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                  Document d = new Document();\n                  d.add(new Field(\"id\",Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                  d.add(new Field(field, Long.toString(nextVal), Field.Store.YES, Field.Index.NO));\n                  writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n\n                  if (tombstones) {\n                    // remove tombstone after new addition (this should be optional?)\n                    writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                  }\n\n                  model.put(id, nextVal);\n                }\n              }\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Exception  ex) {\n            throw new RuntimeException(ex);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              long val;\n\n              synchronized(TestRealTimeGet.this) {\n                val = committedModel.get(id);\n              }\n\n\n              IndexReader r;\n              synchronized(TestRealTimeGet.this) {\n                r = reader;\n                r.incRef();\n              }\n\n              //  sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              IndexSearcher searcher = new IndexSearcher(r);\n              Query q = new TermQuery(new Term(\"id\",Integer.toString(id)));\n              TopDocs results = searcher.search(q, 1);\n\n              if (results.totalHits == 0 && tombstones) {\n                // if we couldn't find the doc, look for it's tombstone\n                q = new TermQuery(new Term(\"id\",\"-\"+Integer.toString(id)));\n                results = searcher.search(q, 1);\n                if (results.totalHits == 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    continue;\n                  }\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val);\n                }\n              }\n\n              if (results.totalHits == 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                assertEquals(1, results.totalHits);   // we should have found the document, or it's tombstone\n                Document doc = searcher.doc(results.scoreDocs[0].doc);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  System.out.println(\"model_val=\"+val+\" foundVal=\"+foundVal);\n                }\n                assertTrue(foundVal >= Math.abs(val));\n              }\n\n              r.decRef();\n            }\n          }\n          catch (Throwable e) {\n            operations.set(-1L);\n            SolrException.log(log,e);\n            fail(e.toString());\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    reader.close();\n\n  }\n\n","sourceOld":"  @Ignore\n  @Test\n  public void testStressLuceneNRT() throws Exception {\n    // update variables\n    final int commitPercent = 10;\n    final int softCommitPercent = 50; // what percent of the commits are soft\n    final int deletePercent = 8;\n    final int deleteByQueryPercent = 4;\n    final int ndocs = 100;\n    int nWriteThreads = 10;\n    final int maxConcurrentCommits = 2;   // number of committers at a time... needed if we want to avoid commit errors due to exceeding the max\n    final boolean tombstones = false;\n\n    // query variables\n    final AtomicLong operations = new AtomicLong(10000000);  // number of query operations to perform in total       // TODO: temporarily high due to lack of stability\n    int nReadThreads = 10;\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n    RAMDirectory dir = new RAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_40, new WhitespaceAnalyzer(Version.LUCENE_40)));\n    writer.commit();\n    reader = IndexReader.open(dir);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,Long> newCommittedModel;\n                  long version;\n                  IndexReader oldReader;\n\n                  synchronized(TestRealTimeGet.this) {\n                    newCommittedModel = new HashMap<Integer,Long>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  IndexReader newReader;\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    // assertU(h.commit(\"softCommit\",\"true\"));\n                    newReader = oldReader.reopen(writer, true);\n                  } else {\n                    // assertU(commit());\n                    writer.commit();\n                    newReader = oldReader.reopen();\n                  }\n\n                  synchronized(TestRealTimeGet.this) {\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      reader.decRef();\n                      reader = newReader;\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      }\n\n                    } else if (newReader != oldReader) {\n                      // if the same reader, don't decRef.\n                      newReader.decRef();\n                    }\n\n                    oldReader.decRef();\n                  }\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id = rand.nextInt(ndocs);\n              Object sync = syncArr[id];\n\n              // set the lastId before we actually change it sometimes to try and\n              // uncover more race conditions between writing and reading\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              // We can't concurrently update the same document and retain our invariants of increasing values\n              // since we can't guarantee what order the updates will be executed.\n              synchronized (sync) {\n                Long val = model.get(id);\n                long nextVal = Math.abs(val)+1;\n\n                if (oper < commitPercent + deletePercent) {\n                  // assertU(\"<delete><id>\" + id + \"</id></delete>\");\n\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                    d.add(new Field(field, Long.toString(nextVal), Field.Store.YES, Field.Index.NO));\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                  model.put(id, -nextVal);\n                } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                  //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                    d.add(new Field(field, Long.toString(nextVal), Field.Store.YES, Field.Index.NO));\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                  model.put(id, -nextVal);\n                } else {\n                  // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                  Document d = new Document();\n                  d.add(new Field(\"id\",Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                  d.add(new Field(field, Long.toString(nextVal), Field.Store.YES, Field.Index.NO));\n                  writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n\n                  if (tombstones) {\n                    // remove tombstone after new addition (this should be optional?)\n                    writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                  }\n\n                  model.put(id, nextVal);\n                }\n              }\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Exception  ex) {\n            throw new RuntimeException(ex);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              long val;\n\n              synchronized(TestRealTimeGet.this) {\n                val = committedModel.get(id);\n              }\n\n\n              IndexReader r;\n              synchronized(TestRealTimeGet.this) {\n                r = reader;\n                r.incRef();\n              }\n\n              //  sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              IndexSearcher searcher = new IndexSearcher(r);\n              Query q = new TermQuery(new Term(\"id\",Integer.toString(id)));\n              TopDocs results = searcher.search(q, 1);\n\n              if (results.totalHits == 0 && tombstones) {\n                // if we couldn't find the doc, look for it's tombstone\n                q = new TermQuery(new Term(\"id\",\"-\"+Integer.toString(id)));\n                results = searcher.search(q, 1);\n                if (results.totalHits == 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    continue;\n                  }\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val);\n                }\n              }\n\n              if (results.totalHits == 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                assertEquals(1, results.totalHits);   // we should have found the document, or it's tombstone\n                Document doc = searcher.doc(results.scoreDocs[0].doc);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  System.out.println(\"model_val=\"+val+\" foundVal=\"+foundVal);\n                }\n                assertTrue(foundVal >= Math.abs(val));\n              }\n\n              r.decRef();\n            }\n          }\n          catch (Throwable e) {\n            operations.set(-1L);\n            SolrException.log(log,e);\n            fail(e.toString());\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    reader.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c00afe74a80796ed1f30a9509b150ff104746a1f","date":1312881735,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressNRT#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testStressLuceneNRT().mjava","sourceNew":"  public void test() throws Exception {\n    // update variables\n    final int commitPercent = random.nextInt(20);\n    final int softCommitPercent = random.nextInt(100); // what percent of the commits are soft\n    final int deletePercent = random.nextInt(50);\n    final int deleteByQueryPercent = random.nextInt(25);\n    final int ndocs = atLeast(50);\n    final int nWriteThreads = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);\n    final int maxConcurrentCommits = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);   // number of committers at a time... needed if we want to avoid commit errors due to exceeding the max\n    \n    final boolean tombstones = random.nextBoolean();\n\n    // query variables\n    final AtomicLong operations = new AtomicLong(atLeast(50000));  // number of query operations to perform in total\n\n    final int nReadThreads = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);\n    initModel(ndocs);\n\n    if (VERBOSE) {\n      System.out.println(\"\\n\");\n      System.out.println(\"TEST: commitPercent=\" + commitPercent);\n      System.out.println(\"TEST: softCommitPercent=\" + softCommitPercent);\n      System.out.println(\"TEST: deletePercent=\" + deletePercent);\n      System.out.println(\"TEST: deleteByQueryPercent=\" + deleteByQueryPercent);\n      System.out.println(\"TEST: ndocs=\" + ndocs);\n      System.out.println(\"TEST: nWriteThreads=\" + nWriteThreads);\n      System.out.println(\"TEST: nReadThreads=\" + nReadThreads);\n      System.out.println(\"TEST: maxConcurrentCommits=\" + maxConcurrentCommits);\n      System.out.println(\"TEST: tombstones=\" + tombstones);\n      System.out.println(\"TEST: operations=\" + operations);\n      System.out.println(\"\\n\");\n    }\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setDoRandomOptimizeAssert(false);\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    writer.commit();\n    reader = IndexReader.open(dir);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,Long> newCommittedModel;\n                  long version;\n                  IndexReader oldReader;\n\n                  synchronized(TestStressNRT.this) {\n                    newCommittedModel = new HashMap<Integer,Long>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  IndexReader newReader;\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    // assertU(h.commit(\"softCommit\",\"true\"));\n                    if (random.nextBoolean()) {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": call writer.getReader\");\n                      }\n                      newReader = writer.getReader(true);\n                    } else {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": reopen reader=\" + oldReader + \" version=\" + version);\n                      }\n                      newReader = oldReader.reopen(writer.w, true);\n                    }\n                  } else {\n                    // assertU(commit());\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": commit+reopen reader=\" + oldReader + \" version=\" + version);\n                    }\n                    writer.commit();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": now reopen after commit\");\n                    }\n                    newReader = oldReader.reopen();\n                  }\n\n                  // Code below assumes newReader comes w/\n                  // extra ref:\n                  if (newReader == oldReader) {\n                    newReader.incRef();\n                  }\n\n                  oldReader.decRef();\n\n                  synchronized(TestStressNRT.this) {\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    //System.out.println(Thread.currentThread().getName() + \": newVersion=\" + newReader.getVersion());\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": install new reader=\" + newReader);\n                      }\n                      reader.decRef();\n                      reader = newReader;\n\n                      // Silly: forces fieldInfos to be\n                      // loaded so we don't hit IOE on later\n                      // reader.toString\n                      newReader.toString();\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        if (VERBOSE) {\n                          System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": install new model version=\" + version);\n                        }\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      } else {\n                        if (VERBOSE) {\n                          System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": skip install new model version=\" + version);\n                        }\n                      }\n                    } else {\n                      // if the same reader, don't decRef.\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": skip install new reader=\" + newReader);\n                      }\n                      newReader.decRef();\n                    }\n                  }\n                }\n                numCommitting.decrementAndGet();\n              } else {\n\n                int id = rand.nextInt(ndocs);\n                Object sync = syncArr[id];\n\n                // set the lastId before we actually change it sometimes to try and\n                // uncover more race conditions between writing and reading\n                boolean before = random.nextBoolean();\n                if (before) {\n                  lastId = id;\n                }\n\n                // We can't concurrently update the same document and retain our invariants of increasing values\n                // since we can't guarantee what order the updates will be executed.\n                synchronized (sync) {\n                  Long val = model.get(id);\n                  long nextVal = Math.abs(val)+1;\n\n                  if (oper < commitPercent + deletePercent) {\n                    // assertU(\"<delete><id>\" + id + \"</id></delete>\");\n\n                    // add tombstone first\n                    if (tombstones) {\n                      Document d = new Document();\n                      d.add(new Field(\"id\",\"-\"+Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                      d.add(new Field(field, Long.toString(nextVal), Field.Store.YES, Field.Index.NO));\n                      writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                    }\n\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": term delDocs id:\" + id + \" nextVal=\" + nextVal);\n                    }\n                    writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                    model.put(id, -nextVal);\n                  } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                    //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                    // add tombstone first\n                    if (tombstones) {\n                      Document d = new Document();\n                      d.add(new Field(\"id\",\"-\"+Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                      d.add(new Field(field, Long.toString(nextVal), Field.Store.YES, Field.Index.NO));\n                      writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                    }\n\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": query delDocs id:\" + id + \" nextVal=\" + nextVal);\n                    }\n                    writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                    model.put(id, -nextVal);\n                  } else {\n                    // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                    Document d = new Document();\n                    d.add(newField(\"id\",Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                    d.add(newField(field, Long.toString(nextVal), Field.Store.YES, Field.Index.NO));\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": u id:\" + id + \" val=\" + nextVal);\n                    }\n                    writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                    if (tombstones) {\n                      // remove tombstone after new addition (this should be optional?)\n                      writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    }\n                    model.put(id, nextVal);\n                  }\n                }\n\n                if (!before) {\n                  lastId = id;\n                }\n              }\n            }\n          } catch (Throwable e) {\n            System.out.println(Thread.currentThread().getName() + \": FAILED: unexpected exception\");\n            e.printStackTrace(System.out);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              long val;\n              IndexReader r;\n              synchronized(TestStressNRT.this) {\n                val = committedModel.get(id);\n                r = reader;\n                r.incRef();\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": s id=\" + id + \" val=\" + val + \" r=\" + r.getVersion());\n              }\n\n              //  sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              IndexSearcher searcher = new IndexSearcher(r);\n              Query q = new TermQuery(new Term(\"id\",Integer.toString(id)));\n              TopDocs results = searcher.search(q, 10);\n\n              if (results.totalHits == 0 && tombstones) {\n                // if we couldn't find the doc, look for its tombstone\n                q = new TermQuery(new Term(\"id\",\"-\"+Integer.toString(id)));\n                results = searcher.search(q, 1);\n                if (results.totalHits == 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val + \" reader=\" + r);\n                }\n              }\n\n              if (results.totalHits == 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                // we should have found the document, or its tombstone\n                if (results.totalHits != 1) {\n                  System.out.println(\"FAIL: hits id:\" + id + \" val=\" + val);\n                  for(ScoreDoc sd : results.scoreDocs) {\n                    final Document doc = r.document(sd.doc);\n                    System.out.println(\"  docID=\" + sd.doc + \" id:\" + doc.get(\"id\") + \" foundVal=\" + doc.get(field));\n                  }\n                  fail(\"id=\" + id + \" reader=\" + r + \" totalHits=\" + results.totalHits);\n                }\n                Document doc = searcher.doc(results.scoreDocs[0].doc);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  fail(\"foundVal=\" + foundVal + \" val=\" + val + \" id=\" + id + \" reader=\" + r);\n                }\n              }\n\n              r.decRef();\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            System.out.println(Thread.currentThread().getName() + \": FAILED: unexpected exception\");\n            e.printStackTrace(System.out);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: close reader=\" + reader);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Ignore\n  @Test\n  public void testStressLuceneNRT() throws Exception {\n    // update variables\n    final int commitPercent = 10;\n    final int softCommitPercent = 50; // what percent of the commits are soft\n    final int deletePercent = 8;\n    final int deleteByQueryPercent = 4;\n    final int ndocs = 100;\n    int nWriteThreads = 10;\n    final int maxConcurrentCommits = 2;   // number of committers at a time... needed if we want to avoid commit errors due to exceeding the max\n    final boolean tombstones = false;\n\n    // query variables\n    final AtomicLong operations = new AtomicLong(0);  // number of query operations to perform in total       // TODO: temporarily high due to lack of stability\n    int nReadThreads = 10;\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n    RAMDirectory dir = new RAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_40, new WhitespaceAnalyzer(Version.LUCENE_40)));\n    writer.commit();\n    reader = IndexReader.open(dir);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,Long> newCommittedModel;\n                  long version;\n                  IndexReader oldReader;\n\n                  synchronized(TestRealTimeGet.this) {\n                    newCommittedModel = new HashMap<Integer,Long>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  IndexReader newReader;\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    // assertU(h.commit(\"softCommit\",\"true\"));\n                    newReader = oldReader.reopen(writer, true);\n                  } else {\n                    // assertU(commit());\n                    writer.commit();\n                    newReader = oldReader.reopen();\n                  }\n\n                  synchronized(TestRealTimeGet.this) {\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      reader.decRef();\n                      reader = newReader;\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      }\n\n                    } else if (newReader != oldReader) {\n                      // if the same reader, don't decRef.\n                      newReader.decRef();\n                    }\n\n                    oldReader.decRef();\n                  }\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id = rand.nextInt(ndocs);\n              Object sync = syncArr[id];\n\n              // set the lastId before we actually change it sometimes to try and\n              // uncover more race conditions between writing and reading\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              // We can't concurrently update the same document and retain our invariants of increasing values\n              // since we can't guarantee what order the updates will be executed.\n              synchronized (sync) {\n                Long val = model.get(id);\n                long nextVal = Math.abs(val)+1;\n\n                if (oper < commitPercent + deletePercent) {\n                  // assertU(\"<delete><id>\" + id + \"</id></delete>\");\n\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                    d.add(new Field(field, Long.toString(nextVal), Field.Store.YES, Field.Index.NO));\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                  model.put(id, -nextVal);\n                } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                  //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                    d.add(new Field(field, Long.toString(nextVal), Field.Store.YES, Field.Index.NO));\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                  model.put(id, -nextVal);\n                } else {\n                  // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                  Document d = new Document();\n                  d.add(new Field(\"id\",Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                  d.add(new Field(field, Long.toString(nextVal), Field.Store.YES, Field.Index.NO));\n                  writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n\n                  if (tombstones) {\n                    // remove tombstone after new addition (this should be optional?)\n                    writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                  }\n\n                  model.put(id, nextVal);\n                }\n              }\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Exception  ex) {\n            throw new RuntimeException(ex);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              long val;\n\n              synchronized(TestRealTimeGet.this) {\n                val = committedModel.get(id);\n              }\n\n\n              IndexReader r;\n              synchronized(TestRealTimeGet.this) {\n                r = reader;\n                r.incRef();\n              }\n\n              //  sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              IndexSearcher searcher = new IndexSearcher(r);\n              Query q = new TermQuery(new Term(\"id\",Integer.toString(id)));\n              TopDocs results = searcher.search(q, 1);\n\n              if (results.totalHits == 0 && tombstones) {\n                // if we couldn't find the doc, look for it's tombstone\n                q = new TermQuery(new Term(\"id\",\"-\"+Integer.toString(id)));\n                results = searcher.search(q, 1);\n                if (results.totalHits == 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    continue;\n                  }\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val);\n                }\n              }\n\n              if (results.totalHits == 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                assertEquals(1, results.totalHits);   // we should have found the document, or it's tombstone\n                Document doc = searcher.doc(results.scoreDocs[0].doc);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  System.out.println(\"model_val=\"+val+\" foundVal=\"+foundVal);\n                }\n                assertTrue(foundVal >= Math.abs(val));\n              }\n\n              r.decRef();\n            }\n          }\n          catch (Throwable e) {\n            operations.set(-1L);\n            SolrException.log(log,e);\n            fail(e.toString());\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    reader.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a3554ff15950ad0e3bcbb4e4e2ddb45b0b0f27e","date":1320267737,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testStressLuceneNRT().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testStressLuceneNRT() throws Exception {\n    final int commitPercent = 5 + random.nextInt(20);\n    final int softCommitPercent = 30+random.nextInt(75); // what percent of the commits are soft\n    final int deletePercent = 4+random.nextInt(25);\n    final int deleteByQueryPercent = 0;  // real-time get isn't currently supported with delete-by-query\n    final int ndocs = 5 + (random.nextBoolean() ? random.nextInt(25) : random.nextInt(200));\n    int nWriteThreads = 5 + random.nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;   // number of committers at a time... it should be <= maxWarmingSearchers\n\n    final AtomicLong operations = new AtomicLong(10000);  // number of query operations to perform in total - crank up if\n    int nReadThreads = 5 + random.nextInt(25);\n    final boolean tombstones = random.nextBoolean();\n    final boolean syncCommits = random.nextBoolean();\n\n    verbose(\"commitPercent=\", commitPercent);\n    verbose(\"softCommitPercent=\",softCommitPercent);\n    verbose(\"deletePercent=\",deletePercent);\n    verbose(\"deleteByQueryPercent=\", deleteByQueryPercent);\n    verbose(\"ndocs=\", ndocs);\n    verbose(\"nWriteThreads=\", nWriteThreads);\n    verbose(\"nReadThreads=\", nReadThreads);\n    verbose(\"maxConcurrentCommits=\", maxConcurrentCommits);\n    verbose(\"operations=\", operations);\n    verbose(\"tombstones=\", tombstones);\n    verbose(\"syncCommits=\", syncCommits);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n\n    final FieldType idFt = new FieldType();\n    idFt.setIndexed(true);\n    idFt.setStored(true);\n    idFt.setOmitNorms(true);\n    idFt.setTokenized(false);\n    idFt.setIndexOptions(FieldInfo.IndexOptions.DOCS_ONLY);\n\n    final FieldType ft2 = new FieldType();\n    ft2.setIndexed(false);\n    ft2.setStored(true);\n\n\n    // model how solr does locking - only allow one thread to do a hard commit at once, and only one thread to do a soft commit, but\n    // a hard commit in progress does not stop a soft commit.\n    final Lock hardCommitLock = syncCommits ? new ReentrantLock() : null;\n    final Lock reopenLock = syncCommits ? new ReentrantLock() : null;\n\n\n    // RAMDirectory dir = new RAMDirectory();\n    // final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_40, new WhitespaceAnalyzer(Version.LUCENE_40)));\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setDoRandomOptimizeAssert(false);\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    writer.w.setInfoStream(null);\n\n    // writer.commit();\n    // reader = IndexReader.open(dir);\n    // make this reader an NRT reader from the start to avoid the first non-writer openIfChanged\n    // to only opening at the last commit point.\n    reader = IndexReader.open(writer.w, true);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,Long> newCommittedModel;\n                  long version;\n                  IndexReader oldReader;\n\n                  boolean softCommit = rand.nextInt(100) < softCommitPercent;\n\n                  if (!softCommit) {\n                    // only allow one hard commit to proceed at once\n                    if (hardCommitLock != null) hardCommitLock.lock();\n                    verbose(\"hardCommit start\");\n\n                    writer.commit();\n                  }\n\n                  if (reopenLock != null) reopenLock.lock();\n\n                  synchronized(TestRealTimeGet.this) {\n                    newCommittedModel = new HashMap<Integer,Long>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  if (!softCommit) {\n                    // must commit after taking a snapshot of the model\n                    // writer.commit();\n                  }\n\n                  verbose(\"reopen start using\", oldReader);\n\n                  IndexReader newReader;\n                  if (softCommit) {\n                    newReader = IndexReader.openIfChanged(oldReader, writer.w, true);\n                  } else {\n                    // will only open to last commit\n                   newReader = IndexReader.openIfChanged(oldReader);\n                  }\n\n\n                  if (newReader == null) {\n                    oldReader.incRef();\n                    newReader = oldReader;\n                  }\n                  oldReader.decRef();\n\n                  verbose(\"reopen result\", newReader);\n\n                  synchronized(TestRealTimeGet.this) {\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      reader.decRef();\n                      reader = newReader;\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      }\n\n                    } else {\n                      // close if unused\n                      newReader.decRef();\n                    }\n\n                  }\n\n                  if (reopenLock != null) reopenLock.unlock();\n\n                  if (!softCommit) {\n                    if (hardCommitLock != null) hardCommitLock.unlock();\n                  }\n\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id = rand.nextInt(ndocs);\n              Object sync = syncArr[id];\n\n              // set the lastId before we actually change it sometimes to try and\n              // uncover more race conditions between writing and reading\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              // We can't concurrently update the same document and retain our invariants of increasing values\n              // since we can't guarantee what order the updates will be executed.\n              synchronized (sync) {\n                Long val = model.get(id);\n                long nextVal = Math.abs(val)+1;\n\n                if (oper < commitPercent + deletePercent) {\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleting id\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                  model.put(id, -nextVal);\n                  verbose(\"deleting id\",id,\"val=\",nextVal,\"DONE\");\n\n                } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                  //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                  model.put(id, -nextVal);\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal,\"DONE\");\n                } else {\n                  // model.put(id, nextVal);   // uncomment this and this test should fail.\n\n                  // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                  Document d = new Document();\n                  d.add(new Field(\"id\",Integer.toString(id), idFt));\n                  d.add(new Field(field, Long.toString(nextVal), ft2));\n                  verbose(\"adding id\",id,\"val=\",nextVal);\n                  writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                  if (tombstones) {\n                    // remove tombstone after new addition (this should be optional?)\n                    verbose(\"deleting tombstone for id\",id);\n                    writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    verbose(\"deleting tombstone for id\",id,\"DONE\");\n                  }\n\n                  model.put(id, nextVal);\n                  verbose(\"adding id\",id,\"val=\",nextVal,\"DONE\");\n                }\n              }\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Exception  ex) {\n            throw new RuntimeException(ex);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              long val;\n\n              synchronized(TestRealTimeGet.this) {\n                val = committedModel.get(id);\n              }\n\n\n              IndexReader r;\n              synchronized(TestRealTimeGet.this) {\n                r = reader;\n                r.incRef();\n              }\n\n              int docid = getFirstMatch(r, new Term(\"id\",Integer.toString(id)));\n\n              if (docid < 0 && tombstones) {\n                // if we couldn't find the doc, look for it's tombstone\n                docid = getFirstMatch(r, new Term(\"id\",\"-\"+Integer.toString(id)));\n                if (docid < 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  verbose(\"ERROR: Couldn't find a doc  or tombstone for id\", id, \"using reader\",r,\"expected value\",val);\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val);\n                }\n              }\n\n              if (docid < 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                if (docid < 0) {\n                  verbose(\"ERROR: Couldn't find a doc for id\", id, \"using reader\",r);\n                }\n                assertTrue(docid >= 0);   // we should have found the document, or it's tombstone\n                Document doc = r.document(docid);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  verbose(\"ERROR: id\",id,\"model_val=\",val,\" foundVal=\",foundVal,\"reader=\",reader);\n                }\n                assertTrue(foundVal >= Math.abs(val));\n              }\n\n              r.decRef();\n            }\n          }\n          catch (Throwable e) {\n            operations.set(-1L);\n            SolrException.log(log,e);\n            fail(e.toString());\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0bf41419d452997826ec5f17684993377be77f49"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testStressLuceneNRT().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testStressLuceneNRT().mjava","sourceNew":"  @Test\n  public void testStressLuceneNRT() throws Exception {\n    final int commitPercent = 5 + random.nextInt(20);\n    final int softCommitPercent = 30+random.nextInt(75); // what percent of the commits are soft\n    final int deletePercent = 4+random.nextInt(25);\n    final int deleteByQueryPercent = 0;  // real-time get isn't currently supported with delete-by-query\n    final int ndocs = 5 + (random.nextBoolean() ? random.nextInt(25) : random.nextInt(200));\n    int nWriteThreads = 5 + random.nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;   // number of committers at a time... it should be <= maxWarmingSearchers\n\n    final AtomicLong operations = new AtomicLong(10000);  // number of query operations to perform in total - crank up if\n    int nReadThreads = 5 + random.nextInt(25);\n    final boolean tombstones = random.nextBoolean();\n    final boolean syncCommits = random.nextBoolean();\n\n    verbose(\"commitPercent=\", commitPercent);\n    verbose(\"softCommitPercent=\",softCommitPercent);\n    verbose(\"deletePercent=\",deletePercent);\n    verbose(\"deleteByQueryPercent=\", deleteByQueryPercent);\n    verbose(\"ndocs=\", ndocs);\n    verbose(\"nWriteThreads=\", nWriteThreads);\n    verbose(\"nReadThreads=\", nReadThreads);\n    verbose(\"maxConcurrentCommits=\", maxConcurrentCommits);\n    verbose(\"operations=\", operations);\n    verbose(\"tombstones=\", tombstones);\n    verbose(\"syncCommits=\", syncCommits);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n\n    final FieldType idFt = new FieldType();\n    idFt.setIndexed(true);\n    idFt.setStored(true);\n    idFt.setOmitNorms(true);\n    idFt.setTokenized(false);\n    idFt.setIndexOptions(FieldInfo.IndexOptions.DOCS_ONLY);\n\n    final FieldType ft2 = new FieldType();\n    ft2.setIndexed(false);\n    ft2.setStored(true);\n\n\n    // model how solr does locking - only allow one thread to do a hard commit at once, and only one thread to do a soft commit, but\n    // a hard commit in progress does not stop a soft commit.\n    final Lock hardCommitLock = syncCommits ? new ReentrantLock() : null;\n    final Lock reopenLock = syncCommits ? new ReentrantLock() : null;\n\n\n    // RAMDirectory dir = new RAMDirectory();\n    // final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_40, new WhitespaceAnalyzer(Version.LUCENE_40)));\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setDoRandomOptimizeAssert(false);\n\n    // writer.commit();\n    // reader = IndexReader.open(dir);\n    // make this reader an NRT reader from the start to avoid the first non-writer openIfChanged\n    // to only opening at the last commit point.\n    reader = IndexReader.open(writer.w, true);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,Long> newCommittedModel;\n                  long version;\n                  IndexReader oldReader;\n\n                  boolean softCommit = rand.nextInt(100) < softCommitPercent;\n\n                  if (!softCommit) {\n                    // only allow one hard commit to proceed at once\n                    if (hardCommitLock != null) hardCommitLock.lock();\n                    verbose(\"hardCommit start\");\n\n                    writer.commit();\n                  }\n\n                  if (reopenLock != null) reopenLock.lock();\n\n                  synchronized(TestRealTimeGet.this) {\n                    newCommittedModel = new HashMap<Integer,Long>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  if (!softCommit) {\n                    // must commit after taking a snapshot of the model\n                    // writer.commit();\n                  }\n\n                  verbose(\"reopen start using\", oldReader);\n\n                  IndexReader newReader;\n                  if (softCommit) {\n                    newReader = IndexReader.openIfChanged(oldReader, writer.w, true);\n                  } else {\n                    // will only open to last commit\n                   newReader = IndexReader.openIfChanged(oldReader);\n                  }\n\n\n                  if (newReader == null) {\n                    oldReader.incRef();\n                    newReader = oldReader;\n                  }\n                  oldReader.decRef();\n\n                  verbose(\"reopen result\", newReader);\n\n                  synchronized(TestRealTimeGet.this) {\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      reader.decRef();\n                      reader = newReader;\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      }\n\n                    } else {\n                      // close if unused\n                      newReader.decRef();\n                    }\n\n                  }\n\n                  if (reopenLock != null) reopenLock.unlock();\n\n                  if (!softCommit) {\n                    if (hardCommitLock != null) hardCommitLock.unlock();\n                  }\n\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id = rand.nextInt(ndocs);\n              Object sync = syncArr[id];\n\n              // set the lastId before we actually change it sometimes to try and\n              // uncover more race conditions between writing and reading\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              // We can't concurrently update the same document and retain our invariants of increasing values\n              // since we can't guarantee what order the updates will be executed.\n              synchronized (sync) {\n                Long val = model.get(id);\n                long nextVal = Math.abs(val)+1;\n\n                if (oper < commitPercent + deletePercent) {\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleting id\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                  model.put(id, -nextVal);\n                  verbose(\"deleting id\",id,\"val=\",nextVal,\"DONE\");\n\n                } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                  //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                  model.put(id, -nextVal);\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal,\"DONE\");\n                } else {\n                  // model.put(id, nextVal);   // uncomment this and this test should fail.\n\n                  // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                  Document d = new Document();\n                  d.add(new Field(\"id\",Integer.toString(id), idFt));\n                  d.add(new Field(field, Long.toString(nextVal), ft2));\n                  verbose(\"adding id\",id,\"val=\",nextVal);\n                  writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                  if (tombstones) {\n                    // remove tombstone after new addition (this should be optional?)\n                    verbose(\"deleting tombstone for id\",id);\n                    writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    verbose(\"deleting tombstone for id\",id,\"DONE\");\n                  }\n\n                  model.put(id, nextVal);\n                  verbose(\"adding id\",id,\"val=\",nextVal,\"DONE\");\n                }\n              }\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Exception  ex) {\n            throw new RuntimeException(ex);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              long val;\n\n              synchronized(TestRealTimeGet.this) {\n                val = committedModel.get(id);\n              }\n\n\n              IndexReader r;\n              synchronized(TestRealTimeGet.this) {\n                r = reader;\n                r.incRef();\n              }\n\n              int docid = getFirstMatch(r, new Term(\"id\",Integer.toString(id)));\n\n              if (docid < 0 && tombstones) {\n                // if we couldn't find the doc, look for it's tombstone\n                docid = getFirstMatch(r, new Term(\"id\",\"-\"+Integer.toString(id)));\n                if (docid < 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  verbose(\"ERROR: Couldn't find a doc  or tombstone for id\", id, \"using reader\",r,\"expected value\",val);\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val);\n                }\n              }\n\n              if (docid < 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                if (docid < 0) {\n                  verbose(\"ERROR: Couldn't find a doc for id\", id, \"using reader\",r);\n                }\n                assertTrue(docid >= 0);   // we should have found the document, or it's tombstone\n                Document doc = r.document(docid);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  verbose(\"ERROR: id\",id,\"model_val=\",val,\" foundVal=\",foundVal,\"reader=\",reader);\n                }\n                assertTrue(foundVal >= Math.abs(val));\n              }\n\n              r.decRef();\n            }\n          }\n          catch (Throwable e) {\n            operations.set(-1L);\n            SolrException.log(log,e);\n            fail(e.toString());\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStressLuceneNRT() throws Exception {\n    final int commitPercent = 5 + random.nextInt(20);\n    final int softCommitPercent = 30+random.nextInt(75); // what percent of the commits are soft\n    final int deletePercent = 4+random.nextInt(25);\n    final int deleteByQueryPercent = 0;  // real-time get isn't currently supported with delete-by-query\n    final int ndocs = 5 + (random.nextBoolean() ? random.nextInt(25) : random.nextInt(200));\n    int nWriteThreads = 5 + random.nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;   // number of committers at a time... it should be <= maxWarmingSearchers\n\n    final AtomicLong operations = new AtomicLong(10000);  // number of query operations to perform in total - crank up if\n    int nReadThreads = 5 + random.nextInt(25);\n    final boolean tombstones = random.nextBoolean();\n    final boolean syncCommits = random.nextBoolean();\n\n    verbose(\"commitPercent=\", commitPercent);\n    verbose(\"softCommitPercent=\",softCommitPercent);\n    verbose(\"deletePercent=\",deletePercent);\n    verbose(\"deleteByQueryPercent=\", deleteByQueryPercent);\n    verbose(\"ndocs=\", ndocs);\n    verbose(\"nWriteThreads=\", nWriteThreads);\n    verbose(\"nReadThreads=\", nReadThreads);\n    verbose(\"maxConcurrentCommits=\", maxConcurrentCommits);\n    verbose(\"operations=\", operations);\n    verbose(\"tombstones=\", tombstones);\n    verbose(\"syncCommits=\", syncCommits);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n\n    final FieldType idFt = new FieldType();\n    idFt.setIndexed(true);\n    idFt.setStored(true);\n    idFt.setOmitNorms(true);\n    idFt.setTokenized(false);\n    idFt.setIndexOptions(FieldInfo.IndexOptions.DOCS_ONLY);\n\n    final FieldType ft2 = new FieldType();\n    ft2.setIndexed(false);\n    ft2.setStored(true);\n\n\n    // model how solr does locking - only allow one thread to do a hard commit at once, and only one thread to do a soft commit, but\n    // a hard commit in progress does not stop a soft commit.\n    final Lock hardCommitLock = syncCommits ? new ReentrantLock() : null;\n    final Lock reopenLock = syncCommits ? new ReentrantLock() : null;\n\n\n    // RAMDirectory dir = new RAMDirectory();\n    // final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_40, new WhitespaceAnalyzer(Version.LUCENE_40)));\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setDoRandomOptimizeAssert(false);\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    writer.w.setInfoStream(null);\n\n    // writer.commit();\n    // reader = IndexReader.open(dir);\n    // make this reader an NRT reader from the start to avoid the first non-writer openIfChanged\n    // to only opening at the last commit point.\n    reader = IndexReader.open(writer.w, true);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,Long> newCommittedModel;\n                  long version;\n                  IndexReader oldReader;\n\n                  boolean softCommit = rand.nextInt(100) < softCommitPercent;\n\n                  if (!softCommit) {\n                    // only allow one hard commit to proceed at once\n                    if (hardCommitLock != null) hardCommitLock.lock();\n                    verbose(\"hardCommit start\");\n\n                    writer.commit();\n                  }\n\n                  if (reopenLock != null) reopenLock.lock();\n\n                  synchronized(TestRealTimeGet.this) {\n                    newCommittedModel = new HashMap<Integer,Long>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  if (!softCommit) {\n                    // must commit after taking a snapshot of the model\n                    // writer.commit();\n                  }\n\n                  verbose(\"reopen start using\", oldReader);\n\n                  IndexReader newReader;\n                  if (softCommit) {\n                    newReader = IndexReader.openIfChanged(oldReader, writer.w, true);\n                  } else {\n                    // will only open to last commit\n                   newReader = IndexReader.openIfChanged(oldReader);\n                  }\n\n\n                  if (newReader == null) {\n                    oldReader.incRef();\n                    newReader = oldReader;\n                  }\n                  oldReader.decRef();\n\n                  verbose(\"reopen result\", newReader);\n\n                  synchronized(TestRealTimeGet.this) {\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      reader.decRef();\n                      reader = newReader;\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      }\n\n                    } else {\n                      // close if unused\n                      newReader.decRef();\n                    }\n\n                  }\n\n                  if (reopenLock != null) reopenLock.unlock();\n\n                  if (!softCommit) {\n                    if (hardCommitLock != null) hardCommitLock.unlock();\n                  }\n\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id = rand.nextInt(ndocs);\n              Object sync = syncArr[id];\n\n              // set the lastId before we actually change it sometimes to try and\n              // uncover more race conditions between writing and reading\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              // We can't concurrently update the same document and retain our invariants of increasing values\n              // since we can't guarantee what order the updates will be executed.\n              synchronized (sync) {\n                Long val = model.get(id);\n                long nextVal = Math.abs(val)+1;\n\n                if (oper < commitPercent + deletePercent) {\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleting id\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                  model.put(id, -nextVal);\n                  verbose(\"deleting id\",id,\"val=\",nextVal,\"DONE\");\n\n                } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                  //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                  model.put(id, -nextVal);\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal,\"DONE\");\n                } else {\n                  // model.put(id, nextVal);   // uncomment this and this test should fail.\n\n                  // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                  Document d = new Document();\n                  d.add(new Field(\"id\",Integer.toString(id), idFt));\n                  d.add(new Field(field, Long.toString(nextVal), ft2));\n                  verbose(\"adding id\",id,\"val=\",nextVal);\n                  writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                  if (tombstones) {\n                    // remove tombstone after new addition (this should be optional?)\n                    verbose(\"deleting tombstone for id\",id);\n                    writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    verbose(\"deleting tombstone for id\",id,\"DONE\");\n                  }\n\n                  model.put(id, nextVal);\n                  verbose(\"adding id\",id,\"val=\",nextVal,\"DONE\");\n                }\n              }\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Exception  ex) {\n            throw new RuntimeException(ex);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              long val;\n\n              synchronized(TestRealTimeGet.this) {\n                val = committedModel.get(id);\n              }\n\n\n              IndexReader r;\n              synchronized(TestRealTimeGet.this) {\n                r = reader;\n                r.incRef();\n              }\n\n              int docid = getFirstMatch(r, new Term(\"id\",Integer.toString(id)));\n\n              if (docid < 0 && tombstones) {\n                // if we couldn't find the doc, look for it's tombstone\n                docid = getFirstMatch(r, new Term(\"id\",\"-\"+Integer.toString(id)));\n                if (docid < 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  verbose(\"ERROR: Couldn't find a doc  or tombstone for id\", id, \"using reader\",r,\"expected value\",val);\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val);\n                }\n              }\n\n              if (docid < 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                if (docid < 0) {\n                  verbose(\"ERROR: Couldn't find a doc for id\", id, \"using reader\",r);\n                }\n                assertTrue(docid >= 0);   // we should have found the document, or it's tombstone\n                Document doc = r.document(docid);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  verbose(\"ERROR: id\",id,\"model_val=\",val,\" foundVal=\",foundVal,\"reader=\",reader);\n                }\n                assertTrue(foundVal >= Math.abs(val));\n              }\n\n              r.decRef();\n            }\n          }\n          catch (Throwable e) {\n            operations.set(-1L);\n            SolrException.log(log,e);\n            fail(e.toString());\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testStressLuceneNRT().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testStressLuceneNRT().mjava","sourceNew":"  @Test\n  public void testStressLuceneNRT() throws Exception {\n    final int commitPercent = 5 + random.nextInt(20);\n    final int softCommitPercent = 30+random.nextInt(75); // what percent of the commits are soft\n    final int deletePercent = 4+random.nextInt(25);\n    final int deleteByQueryPercent = 0;  // real-time get isn't currently supported with delete-by-query\n    final int ndocs = 5 + (random.nextBoolean() ? random.nextInt(25) : random.nextInt(200));\n    int nWriteThreads = 5 + random.nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;   // number of committers at a time... it should be <= maxWarmingSearchers\n\n    final AtomicLong operations = new AtomicLong(10000);  // number of query operations to perform in total - crank up if\n    int nReadThreads = 5 + random.nextInt(25);\n    final boolean tombstones = random.nextBoolean();\n    final boolean syncCommits = random.nextBoolean();\n\n    verbose(\"commitPercent=\", commitPercent);\n    verbose(\"softCommitPercent=\",softCommitPercent);\n    verbose(\"deletePercent=\",deletePercent);\n    verbose(\"deleteByQueryPercent=\", deleteByQueryPercent);\n    verbose(\"ndocs=\", ndocs);\n    verbose(\"nWriteThreads=\", nWriteThreads);\n    verbose(\"nReadThreads=\", nReadThreads);\n    verbose(\"maxConcurrentCommits=\", maxConcurrentCommits);\n    verbose(\"operations=\", operations);\n    verbose(\"tombstones=\", tombstones);\n    verbose(\"syncCommits=\", syncCommits);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n\n    final FieldType idFt = new FieldType();\n    idFt.setIndexed(true);\n    idFt.setStored(true);\n    idFt.setOmitNorms(true);\n    idFt.setTokenized(false);\n    idFt.setIndexOptions(FieldInfo.IndexOptions.DOCS_ONLY);\n\n    final FieldType ft2 = new FieldType();\n    ft2.setIndexed(false);\n    ft2.setStored(true);\n\n\n    // model how solr does locking - only allow one thread to do a hard commit at once, and only one thread to do a soft commit, but\n    // a hard commit in progress does not stop a soft commit.\n    final Lock hardCommitLock = syncCommits ? new ReentrantLock() : null;\n    final Lock reopenLock = syncCommits ? new ReentrantLock() : null;\n\n\n    // RAMDirectory dir = new RAMDirectory();\n    // final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_40, new WhitespaceAnalyzer(Version.LUCENE_40)));\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setDoRandomForceMergeAssert(false);\n\n    // writer.commit();\n    // reader = IndexReader.open(dir);\n    // make this reader an NRT reader from the start to avoid the first non-writer openIfChanged\n    // to only opening at the last commit point.\n    reader = IndexReader.open(writer.w, true);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,Long> newCommittedModel;\n                  long version;\n                  IndexReader oldReader;\n\n                  boolean softCommit = rand.nextInt(100) < softCommitPercent;\n\n                  if (!softCommit) {\n                    // only allow one hard commit to proceed at once\n                    if (hardCommitLock != null) hardCommitLock.lock();\n                    verbose(\"hardCommit start\");\n\n                    writer.commit();\n                  }\n\n                  if (reopenLock != null) reopenLock.lock();\n\n                  synchronized(TestRealTimeGet.this) {\n                    newCommittedModel = new HashMap<Integer,Long>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  if (!softCommit) {\n                    // must commit after taking a snapshot of the model\n                    // writer.commit();\n                  }\n\n                  verbose(\"reopen start using\", oldReader);\n\n                  IndexReader newReader;\n                  if (softCommit) {\n                    newReader = IndexReader.openIfChanged(oldReader, writer.w, true);\n                  } else {\n                    // will only open to last commit\n                   newReader = IndexReader.openIfChanged(oldReader);\n                  }\n\n\n                  if (newReader == null) {\n                    oldReader.incRef();\n                    newReader = oldReader;\n                  }\n                  oldReader.decRef();\n\n                  verbose(\"reopen result\", newReader);\n\n                  synchronized(TestRealTimeGet.this) {\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      reader.decRef();\n                      reader = newReader;\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      }\n\n                    } else {\n                      // close if unused\n                      newReader.decRef();\n                    }\n\n                  }\n\n                  if (reopenLock != null) reopenLock.unlock();\n\n                  if (!softCommit) {\n                    if (hardCommitLock != null) hardCommitLock.unlock();\n                  }\n\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id = rand.nextInt(ndocs);\n              Object sync = syncArr[id];\n\n              // set the lastId before we actually change it sometimes to try and\n              // uncover more race conditions between writing and reading\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              // We can't concurrently update the same document and retain our invariants of increasing values\n              // since we can't guarantee what order the updates will be executed.\n              synchronized (sync) {\n                Long val = model.get(id);\n                long nextVal = Math.abs(val)+1;\n\n                if (oper < commitPercent + deletePercent) {\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleting id\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                  model.put(id, -nextVal);\n                  verbose(\"deleting id\",id,\"val=\",nextVal,\"DONE\");\n\n                } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                  //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                  model.put(id, -nextVal);\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal,\"DONE\");\n                } else {\n                  // model.put(id, nextVal);   // uncomment this and this test should fail.\n\n                  // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                  Document d = new Document();\n                  d.add(new Field(\"id\",Integer.toString(id), idFt));\n                  d.add(new Field(field, Long.toString(nextVal), ft2));\n                  verbose(\"adding id\",id,\"val=\",nextVal);\n                  writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                  if (tombstones) {\n                    // remove tombstone after new addition (this should be optional?)\n                    verbose(\"deleting tombstone for id\",id);\n                    writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    verbose(\"deleting tombstone for id\",id,\"DONE\");\n                  }\n\n                  model.put(id, nextVal);\n                  verbose(\"adding id\",id,\"val=\",nextVal,\"DONE\");\n                }\n              }\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Exception  ex) {\n            throw new RuntimeException(ex);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              long val;\n\n              synchronized(TestRealTimeGet.this) {\n                val = committedModel.get(id);\n              }\n\n\n              IndexReader r;\n              synchronized(TestRealTimeGet.this) {\n                r = reader;\n                r.incRef();\n              }\n\n              int docid = getFirstMatch(r, new Term(\"id\",Integer.toString(id)));\n\n              if (docid < 0 && tombstones) {\n                // if we couldn't find the doc, look for it's tombstone\n                docid = getFirstMatch(r, new Term(\"id\",\"-\"+Integer.toString(id)));\n                if (docid < 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  verbose(\"ERROR: Couldn't find a doc  or tombstone for id\", id, \"using reader\",r,\"expected value\",val);\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val);\n                }\n              }\n\n              if (docid < 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                if (docid < 0) {\n                  verbose(\"ERROR: Couldn't find a doc for id\", id, \"using reader\",r);\n                }\n                assertTrue(docid >= 0);   // we should have found the document, or it's tombstone\n                Document doc = r.document(docid);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  verbose(\"ERROR: id\",id,\"model_val=\",val,\" foundVal=\",foundVal,\"reader=\",reader);\n                }\n                assertTrue(foundVal >= Math.abs(val));\n              }\n\n              r.decRef();\n            }\n          }\n          catch (Throwable e) {\n            operations.set(-1L);\n            SolrException.log(log,e);\n            fail(e.toString());\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStressLuceneNRT() throws Exception {\n    final int commitPercent = 5 + random.nextInt(20);\n    final int softCommitPercent = 30+random.nextInt(75); // what percent of the commits are soft\n    final int deletePercent = 4+random.nextInt(25);\n    final int deleteByQueryPercent = 0;  // real-time get isn't currently supported with delete-by-query\n    final int ndocs = 5 + (random.nextBoolean() ? random.nextInt(25) : random.nextInt(200));\n    int nWriteThreads = 5 + random.nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;   // number of committers at a time... it should be <= maxWarmingSearchers\n\n    final AtomicLong operations = new AtomicLong(10000);  // number of query operations to perform in total - crank up if\n    int nReadThreads = 5 + random.nextInt(25);\n    final boolean tombstones = random.nextBoolean();\n    final boolean syncCommits = random.nextBoolean();\n\n    verbose(\"commitPercent=\", commitPercent);\n    verbose(\"softCommitPercent=\",softCommitPercent);\n    verbose(\"deletePercent=\",deletePercent);\n    verbose(\"deleteByQueryPercent=\", deleteByQueryPercent);\n    verbose(\"ndocs=\", ndocs);\n    verbose(\"nWriteThreads=\", nWriteThreads);\n    verbose(\"nReadThreads=\", nReadThreads);\n    verbose(\"maxConcurrentCommits=\", maxConcurrentCommits);\n    verbose(\"operations=\", operations);\n    verbose(\"tombstones=\", tombstones);\n    verbose(\"syncCommits=\", syncCommits);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n\n    final FieldType idFt = new FieldType();\n    idFt.setIndexed(true);\n    idFt.setStored(true);\n    idFt.setOmitNorms(true);\n    idFt.setTokenized(false);\n    idFt.setIndexOptions(FieldInfo.IndexOptions.DOCS_ONLY);\n\n    final FieldType ft2 = new FieldType();\n    ft2.setIndexed(false);\n    ft2.setStored(true);\n\n\n    // model how solr does locking - only allow one thread to do a hard commit at once, and only one thread to do a soft commit, but\n    // a hard commit in progress does not stop a soft commit.\n    final Lock hardCommitLock = syncCommits ? new ReentrantLock() : null;\n    final Lock reopenLock = syncCommits ? new ReentrantLock() : null;\n\n\n    // RAMDirectory dir = new RAMDirectory();\n    // final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_40, new WhitespaceAnalyzer(Version.LUCENE_40)));\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setDoRandomOptimizeAssert(false);\n\n    // writer.commit();\n    // reader = IndexReader.open(dir);\n    // make this reader an NRT reader from the start to avoid the first non-writer openIfChanged\n    // to only opening at the last commit point.\n    reader = IndexReader.open(writer.w, true);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,Long> newCommittedModel;\n                  long version;\n                  IndexReader oldReader;\n\n                  boolean softCommit = rand.nextInt(100) < softCommitPercent;\n\n                  if (!softCommit) {\n                    // only allow one hard commit to proceed at once\n                    if (hardCommitLock != null) hardCommitLock.lock();\n                    verbose(\"hardCommit start\");\n\n                    writer.commit();\n                  }\n\n                  if (reopenLock != null) reopenLock.lock();\n\n                  synchronized(TestRealTimeGet.this) {\n                    newCommittedModel = new HashMap<Integer,Long>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  if (!softCommit) {\n                    // must commit after taking a snapshot of the model\n                    // writer.commit();\n                  }\n\n                  verbose(\"reopen start using\", oldReader);\n\n                  IndexReader newReader;\n                  if (softCommit) {\n                    newReader = IndexReader.openIfChanged(oldReader, writer.w, true);\n                  } else {\n                    // will only open to last commit\n                   newReader = IndexReader.openIfChanged(oldReader);\n                  }\n\n\n                  if (newReader == null) {\n                    oldReader.incRef();\n                    newReader = oldReader;\n                  }\n                  oldReader.decRef();\n\n                  verbose(\"reopen result\", newReader);\n\n                  synchronized(TestRealTimeGet.this) {\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      reader.decRef();\n                      reader = newReader;\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      }\n\n                    } else {\n                      // close if unused\n                      newReader.decRef();\n                    }\n\n                  }\n\n                  if (reopenLock != null) reopenLock.unlock();\n\n                  if (!softCommit) {\n                    if (hardCommitLock != null) hardCommitLock.unlock();\n                  }\n\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id = rand.nextInt(ndocs);\n              Object sync = syncArr[id];\n\n              // set the lastId before we actually change it sometimes to try and\n              // uncover more race conditions between writing and reading\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              // We can't concurrently update the same document and retain our invariants of increasing values\n              // since we can't guarantee what order the updates will be executed.\n              synchronized (sync) {\n                Long val = model.get(id);\n                long nextVal = Math.abs(val)+1;\n\n                if (oper < commitPercent + deletePercent) {\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleting id\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                  model.put(id, -nextVal);\n                  verbose(\"deleting id\",id,\"val=\",nextVal,\"DONE\");\n\n                } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                  //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                  model.put(id, -nextVal);\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal,\"DONE\");\n                } else {\n                  // model.put(id, nextVal);   // uncomment this and this test should fail.\n\n                  // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                  Document d = new Document();\n                  d.add(new Field(\"id\",Integer.toString(id), idFt));\n                  d.add(new Field(field, Long.toString(nextVal), ft2));\n                  verbose(\"adding id\",id,\"val=\",nextVal);\n                  writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                  if (tombstones) {\n                    // remove tombstone after new addition (this should be optional?)\n                    verbose(\"deleting tombstone for id\",id);\n                    writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    verbose(\"deleting tombstone for id\",id,\"DONE\");\n                  }\n\n                  model.put(id, nextVal);\n                  verbose(\"adding id\",id,\"val=\",nextVal,\"DONE\");\n                }\n              }\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Exception  ex) {\n            throw new RuntimeException(ex);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              long val;\n\n              synchronized(TestRealTimeGet.this) {\n                val = committedModel.get(id);\n              }\n\n\n              IndexReader r;\n              synchronized(TestRealTimeGet.this) {\n                r = reader;\n                r.incRef();\n              }\n\n              int docid = getFirstMatch(r, new Term(\"id\",Integer.toString(id)));\n\n              if (docid < 0 && tombstones) {\n                // if we couldn't find the doc, look for it's tombstone\n                docid = getFirstMatch(r, new Term(\"id\",\"-\"+Integer.toString(id)));\n                if (docid < 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  verbose(\"ERROR: Couldn't find a doc  or tombstone for id\", id, \"using reader\",r,\"expected value\",val);\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val);\n                }\n              }\n\n              if (docid < 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                if (docid < 0) {\n                  verbose(\"ERROR: Couldn't find a doc for id\", id, \"using reader\",r);\n                }\n                assertTrue(docid >= 0);   // we should have found the document, or it's tombstone\n                Document doc = r.document(docid);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  verbose(\"ERROR: id\",id,\"model_val=\",val,\" foundVal=\",foundVal,\"reader=\",reader);\n                }\n                assertTrue(foundVal >= Math.abs(val));\n              }\n\n              r.decRef();\n            }\n          }\n          catch (Throwable e) {\n            operations.set(-1L);\n            SolrException.log(log,e);\n            fail(e.toString());\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testStressLuceneNRT().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testStressLuceneNRT().mjava","sourceNew":"  @Test\n  public void testStressLuceneNRT() throws Exception {\n    final int commitPercent = 5 + random.nextInt(20);\n    final int softCommitPercent = 30+random.nextInt(75); // what percent of the commits are soft\n    final int deletePercent = 4+random.nextInt(25);\n    final int deleteByQueryPercent = 1+random.nextInt(5);\n    final int ndocs = 5 + (random.nextBoolean() ? random.nextInt(25) : random.nextInt(200));\n    int nWriteThreads = 5 + random.nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;   // number of committers at a time... it should be <= maxWarmingSearchers\n\n    final AtomicLong operations = new AtomicLong(1000);  // number of query operations to perform in total - crank up if\n    int nReadThreads = 5 + random.nextInt(25);\n    final boolean tombstones = random.nextBoolean();\n    final boolean syncCommits = random.nextBoolean();\n\n    verbose(\"commitPercent=\", commitPercent);\n    verbose(\"softCommitPercent=\",softCommitPercent);\n    verbose(\"deletePercent=\",deletePercent);\n    verbose(\"deleteByQueryPercent=\", deleteByQueryPercent);\n    verbose(\"ndocs=\", ndocs);\n    verbose(\"nWriteThreads=\", nWriteThreads);\n    verbose(\"nReadThreads=\", nReadThreads);\n    verbose(\"maxConcurrentCommits=\", maxConcurrentCommits);\n    verbose(\"operations=\", operations);\n    verbose(\"tombstones=\", tombstones);\n    verbose(\"syncCommits=\", syncCommits);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n\n    final FieldType idFt = new FieldType();\n    idFt.setIndexed(true);\n    idFt.setStored(true);\n    idFt.setOmitNorms(true);\n    idFt.setTokenized(false);\n    idFt.setIndexOptions(FieldInfo.IndexOptions.DOCS_ONLY);\n\n    final FieldType ft2 = new FieldType();\n    ft2.setIndexed(false);\n    ft2.setStored(true);\n\n\n    // model how solr does locking - only allow one thread to do a hard commit at once, and only one thread to do a soft commit, but\n    // a hard commit in progress does not stop a soft commit.\n    final Lock hardCommitLock = syncCommits ? new ReentrantLock() : null;\n    final Lock reopenLock = syncCommits ? new ReentrantLock() : null;\n\n\n    // RAMDirectory dir = new RAMDirectory();\n    // final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_40, new WhitespaceAnalyzer(Version.LUCENE_40)));\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setDoRandomForceMergeAssert(false);\n\n    // writer.commit();\n    // reader = IndexReader.open(dir);\n    // make this reader an NRT reader from the start to avoid the first non-writer openIfChanged\n    // to only opening at the last commit point.\n    reader = IndexReader.open(writer.w, true);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,DocInfo> newCommittedModel;\n                  long version;\n                  IndexReader oldReader;\n\n                  boolean softCommit = rand.nextInt(100) < softCommitPercent;\n\n                  if (!softCommit) {\n                    // only allow one hard commit to proceed at once\n                    if (hardCommitLock != null) hardCommitLock.lock();\n                    verbose(\"hardCommit start\");\n\n                    writer.commit();\n                  }\n\n                  if (reopenLock != null) reopenLock.lock();\n\n                  synchronized(TestRealTimeGet.this) {\n                    newCommittedModel = new HashMap<Integer,DocInfo>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  if (!softCommit) {\n                    // must commit after taking a snapshot of the model\n                    // writer.commit();\n                  }\n\n                  verbose(\"reopen start using\", oldReader);\n\n                  IndexReader newReader;\n                  if (softCommit) {\n                    newReader = IndexReader.openIfChanged(oldReader, writer.w, true);\n                  } else {\n                    // will only open to last commit\n                   newReader = IndexReader.openIfChanged(oldReader);\n                  }\n\n\n                  if (newReader == null) {\n                    oldReader.incRef();\n                    newReader = oldReader;\n                  }\n                  oldReader.decRef();\n\n                  verbose(\"reopen result\", newReader);\n\n                  synchronized(TestRealTimeGet.this) {\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      reader.decRef();\n                      reader = newReader;\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      }\n\n                    } else {\n                      // close if unused\n                      newReader.decRef();\n                    }\n\n                  }\n\n                  if (reopenLock != null) reopenLock.unlock();\n\n                  if (!softCommit) {\n                    if (hardCommitLock != null) hardCommitLock.unlock();\n                  }\n\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id = rand.nextInt(ndocs);\n              Object sync = syncArr[id];\n\n              // set the lastId before we actually change it sometimes to try and\n              // uncover more race conditions between writing and reading\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              // We can't concurrently update the same document and retain our invariants of increasing values\n              // since we can't guarantee what order the updates will be executed.\n              synchronized (sync) {\n                DocInfo info = model.get(id);\n                long val = info.val;\n                long nextVal = Math.abs(val)+1;\n\n                if (oper < commitPercent + deletePercent) {\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleting id\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                  model.put(id, new DocInfo(0,-nextVal));\n                  verbose(\"deleting id\",id,\"val=\",nextVal,\"DONE\");\n\n                } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                  //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                  model.put(id, new DocInfo(0,-nextVal));\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal,\"DONE\");\n                } else {\n                  // model.put(id, nextVal);   // uncomment this and this test should fail.\n\n                  // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                  Document d = new Document();\n                  d.add(new Field(\"id\",Integer.toString(id), idFt));\n                  d.add(new Field(field, Long.toString(nextVal), ft2));\n                  verbose(\"adding id\",id,\"val=\",nextVal);\n                  writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                  if (tombstones) {\n                    // remove tombstone after new addition (this should be optional?)\n                    verbose(\"deleting tombstone for id\",id);\n                    writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    verbose(\"deleting tombstone for id\",id,\"DONE\");\n                  }\n\n                  model.put(id, new DocInfo(0,nextVal));\n                  verbose(\"adding id\",id,\"val=\",nextVal,\"DONE\");\n                }\n              }\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Exception  ex) {\n            throw new RuntimeException(ex);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              DocInfo info;\n              synchronized(TestRealTimeGet.this) {\n                info = committedModel.get(id);\n              }\n              long val = info.val;\n\n              IndexReader r;\n              synchronized(TestRealTimeGet.this) {\n                r = reader;\n                r.incRef();\n              }\n\n              int docid = getFirstMatch(r, new Term(\"id\",Integer.toString(id)));\n\n              if (docid < 0 && tombstones) {\n                // if we couldn't find the doc, look for it's tombstone\n                docid = getFirstMatch(r, new Term(\"id\",\"-\"+Integer.toString(id)));\n                if (docid < 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  verbose(\"ERROR: Couldn't find a doc  or tombstone for id\", id, \"using reader\",r,\"expected value\",val);\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val);\n                }\n              }\n\n              if (docid < 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                if (docid < 0) {\n                  verbose(\"ERROR: Couldn't find a doc for id\", id, \"using reader\",r);\n                }\n                assertTrue(docid >= 0);   // we should have found the document, or it's tombstone\n                Document doc = r.document(docid);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  verbose(\"ERROR: id\",id,\"model_val=\",val,\" foundVal=\",foundVal,\"reader=\",reader);\n                }\n                assertTrue(foundVal >= Math.abs(val));\n              }\n\n              r.decRef();\n            }\n          }\n          catch (Throwable e) {\n            operations.set(-1L);\n            SolrException.log(log,e);\n            fail(e.toString());\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStressLuceneNRT() throws Exception {\n    final int commitPercent = 5 + random.nextInt(20);\n    final int softCommitPercent = 30+random.nextInt(75); // what percent of the commits are soft\n    final int deletePercent = 4+random.nextInt(25);\n    final int deleteByQueryPercent = 0;  // real-time get isn't currently supported with delete-by-query\n    final int ndocs = 5 + (random.nextBoolean() ? random.nextInt(25) : random.nextInt(200));\n    int nWriteThreads = 5 + random.nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;   // number of committers at a time... it should be <= maxWarmingSearchers\n\n    final AtomicLong operations = new AtomicLong(10000);  // number of query operations to perform in total - crank up if\n    int nReadThreads = 5 + random.nextInt(25);\n    final boolean tombstones = random.nextBoolean();\n    final boolean syncCommits = random.nextBoolean();\n\n    verbose(\"commitPercent=\", commitPercent);\n    verbose(\"softCommitPercent=\",softCommitPercent);\n    verbose(\"deletePercent=\",deletePercent);\n    verbose(\"deleteByQueryPercent=\", deleteByQueryPercent);\n    verbose(\"ndocs=\", ndocs);\n    verbose(\"nWriteThreads=\", nWriteThreads);\n    verbose(\"nReadThreads=\", nReadThreads);\n    verbose(\"maxConcurrentCommits=\", maxConcurrentCommits);\n    verbose(\"operations=\", operations);\n    verbose(\"tombstones=\", tombstones);\n    verbose(\"syncCommits=\", syncCommits);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n\n    final FieldType idFt = new FieldType();\n    idFt.setIndexed(true);\n    idFt.setStored(true);\n    idFt.setOmitNorms(true);\n    idFt.setTokenized(false);\n    idFt.setIndexOptions(FieldInfo.IndexOptions.DOCS_ONLY);\n\n    final FieldType ft2 = new FieldType();\n    ft2.setIndexed(false);\n    ft2.setStored(true);\n\n\n    // model how solr does locking - only allow one thread to do a hard commit at once, and only one thread to do a soft commit, but\n    // a hard commit in progress does not stop a soft commit.\n    final Lock hardCommitLock = syncCommits ? new ReentrantLock() : null;\n    final Lock reopenLock = syncCommits ? new ReentrantLock() : null;\n\n\n    // RAMDirectory dir = new RAMDirectory();\n    // final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_40, new WhitespaceAnalyzer(Version.LUCENE_40)));\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setDoRandomForceMergeAssert(false);\n\n    // writer.commit();\n    // reader = IndexReader.open(dir);\n    // make this reader an NRT reader from the start to avoid the first non-writer openIfChanged\n    // to only opening at the last commit point.\n    reader = IndexReader.open(writer.w, true);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,Long> newCommittedModel;\n                  long version;\n                  IndexReader oldReader;\n\n                  boolean softCommit = rand.nextInt(100) < softCommitPercent;\n\n                  if (!softCommit) {\n                    // only allow one hard commit to proceed at once\n                    if (hardCommitLock != null) hardCommitLock.lock();\n                    verbose(\"hardCommit start\");\n\n                    writer.commit();\n                  }\n\n                  if (reopenLock != null) reopenLock.lock();\n\n                  synchronized(TestRealTimeGet.this) {\n                    newCommittedModel = new HashMap<Integer,Long>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  if (!softCommit) {\n                    // must commit after taking a snapshot of the model\n                    // writer.commit();\n                  }\n\n                  verbose(\"reopen start using\", oldReader);\n\n                  IndexReader newReader;\n                  if (softCommit) {\n                    newReader = IndexReader.openIfChanged(oldReader, writer.w, true);\n                  } else {\n                    // will only open to last commit\n                   newReader = IndexReader.openIfChanged(oldReader);\n                  }\n\n\n                  if (newReader == null) {\n                    oldReader.incRef();\n                    newReader = oldReader;\n                  }\n                  oldReader.decRef();\n\n                  verbose(\"reopen result\", newReader);\n\n                  synchronized(TestRealTimeGet.this) {\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      reader.decRef();\n                      reader = newReader;\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      }\n\n                    } else {\n                      // close if unused\n                      newReader.decRef();\n                    }\n\n                  }\n\n                  if (reopenLock != null) reopenLock.unlock();\n\n                  if (!softCommit) {\n                    if (hardCommitLock != null) hardCommitLock.unlock();\n                  }\n\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id = rand.nextInt(ndocs);\n              Object sync = syncArr[id];\n\n              // set the lastId before we actually change it sometimes to try and\n              // uncover more race conditions between writing and reading\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              // We can't concurrently update the same document and retain our invariants of increasing values\n              // since we can't guarantee what order the updates will be executed.\n              synchronized (sync) {\n                Long val = model.get(id);\n                long nextVal = Math.abs(val)+1;\n\n                if (oper < commitPercent + deletePercent) {\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleting id\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                  model.put(id, -nextVal);\n                  verbose(\"deleting id\",id,\"val=\",nextVal,\"DONE\");\n\n                } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                  //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                  model.put(id, -nextVal);\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal,\"DONE\");\n                } else {\n                  // model.put(id, nextVal);   // uncomment this and this test should fail.\n\n                  // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                  Document d = new Document();\n                  d.add(new Field(\"id\",Integer.toString(id), idFt));\n                  d.add(new Field(field, Long.toString(nextVal), ft2));\n                  verbose(\"adding id\",id,\"val=\",nextVal);\n                  writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                  if (tombstones) {\n                    // remove tombstone after new addition (this should be optional?)\n                    verbose(\"deleting tombstone for id\",id);\n                    writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    verbose(\"deleting tombstone for id\",id,\"DONE\");\n                  }\n\n                  model.put(id, nextVal);\n                  verbose(\"adding id\",id,\"val=\",nextVal,\"DONE\");\n                }\n              }\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Exception  ex) {\n            throw new RuntimeException(ex);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              long val;\n\n              synchronized(TestRealTimeGet.this) {\n                val = committedModel.get(id);\n              }\n\n\n              IndexReader r;\n              synchronized(TestRealTimeGet.this) {\n                r = reader;\n                r.incRef();\n              }\n\n              int docid = getFirstMatch(r, new Term(\"id\",Integer.toString(id)));\n\n              if (docid < 0 && tombstones) {\n                // if we couldn't find the doc, look for it's tombstone\n                docid = getFirstMatch(r, new Term(\"id\",\"-\"+Integer.toString(id)));\n                if (docid < 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  verbose(\"ERROR: Couldn't find a doc  or tombstone for id\", id, \"using reader\",r,\"expected value\",val);\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val);\n                }\n              }\n\n              if (docid < 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                if (docid < 0) {\n                  verbose(\"ERROR: Couldn't find a doc for id\", id, \"using reader\",r);\n                }\n                assertTrue(docid >= 0);   // we should have found the document, or it's tombstone\n                Document doc = r.document(docid);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  verbose(\"ERROR: id\",id,\"model_val=\",val,\" foundVal=\",foundVal,\"reader=\",reader);\n                }\n                assertTrue(foundVal >= Math.abs(val));\n              }\n\n              r.decRef();\n            }\n          }\n          catch (Throwable e) {\n            operations.set(-1L);\n            SolrException.log(log,e);\n            fail(e.toString());\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testStressLuceneNRT().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testStressLuceneNRT().mjava","sourceNew":"  @Test\n  public void testStressLuceneNRT() throws Exception {\n    final int commitPercent = 5 + random.nextInt(20);\n    final int softCommitPercent = 30+random.nextInt(75); // what percent of the commits are soft\n    final int deletePercent = 4+random.nextInt(25);\n    final int deleteByQueryPercent = 1+random.nextInt(5);\n    final int ndocs = 5 + (random.nextBoolean() ? random.nextInt(25) : random.nextInt(200));\n    int nWriteThreads = 5 + random.nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;   // number of committers at a time... it should be <= maxWarmingSearchers\n\n    final AtomicLong operations = new AtomicLong(1000);  // number of query operations to perform in total - crank up if\n    int nReadThreads = 5 + random.nextInt(25);\n    final boolean tombstones = random.nextBoolean();\n    final boolean syncCommits = random.nextBoolean();\n\n    verbose(\"commitPercent=\", commitPercent);\n    verbose(\"softCommitPercent=\",softCommitPercent);\n    verbose(\"deletePercent=\",deletePercent);\n    verbose(\"deleteByQueryPercent=\", deleteByQueryPercent);\n    verbose(\"ndocs=\", ndocs);\n    verbose(\"nWriteThreads=\", nWriteThreads);\n    verbose(\"nReadThreads=\", nReadThreads);\n    verbose(\"maxConcurrentCommits=\", maxConcurrentCommits);\n    verbose(\"operations=\", operations);\n    verbose(\"tombstones=\", tombstones);\n    verbose(\"syncCommits=\", syncCommits);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n\n    final FieldType idFt = new FieldType();\n    idFt.setIndexed(true);\n    idFt.setStored(true);\n    idFt.setOmitNorms(true);\n    idFt.setTokenized(false);\n    idFt.setIndexOptions(FieldInfo.IndexOptions.DOCS_ONLY);\n\n    final FieldType ft2 = new FieldType();\n    ft2.setIndexed(false);\n    ft2.setStored(true);\n\n\n    // model how solr does locking - only allow one thread to do a hard commit at once, and only one thread to do a soft commit, but\n    // a hard commit in progress does not stop a soft commit.\n    final Lock hardCommitLock = syncCommits ? new ReentrantLock() : null;\n    final Lock reopenLock = syncCommits ? new ReentrantLock() : null;\n\n\n    // RAMDirectory dir = new RAMDirectory();\n    // final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_40, new WhitespaceAnalyzer(Version.LUCENE_40)));\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setDoRandomForceMergeAssert(false);\n\n    // writer.commit();\n    // reader = IndexReader.open(dir);\n    // make this reader an NRT reader from the start to avoid the first non-writer openIfChanged\n    // to only opening at the last commit point.\n    reader = IndexReader.open(writer.w, true);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,DocInfo> newCommittedModel;\n                  long version;\n                  IndexReader oldReader;\n\n                  boolean softCommit = rand.nextInt(100) < softCommitPercent;\n\n                  if (!softCommit) {\n                    // only allow one hard commit to proceed at once\n                    if (hardCommitLock != null) hardCommitLock.lock();\n                    verbose(\"hardCommit start\");\n\n                    writer.commit();\n                  }\n\n                  if (reopenLock != null) reopenLock.lock();\n\n                  synchronized(TestRealTimeGet.this) {\n                    newCommittedModel = new HashMap<Integer,DocInfo>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  if (!softCommit) {\n                    // must commit after taking a snapshot of the model\n                    // writer.commit();\n                  }\n\n                  verbose(\"reopen start using\", oldReader);\n\n                  IndexReader newReader;\n                  if (softCommit) {\n                    newReader = IndexReader.openIfChanged(oldReader, writer.w, true);\n                  } else {\n                    // will only open to last commit\n                   newReader = IndexReader.openIfChanged(oldReader);\n                  }\n\n\n                  if (newReader == null) {\n                    oldReader.incRef();\n                    newReader = oldReader;\n                  }\n                  oldReader.decRef();\n\n                  verbose(\"reopen result\", newReader);\n\n                  synchronized(TestRealTimeGet.this) {\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      reader.decRef();\n                      reader = newReader;\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      }\n\n                    } else {\n                      // close if unused\n                      newReader.decRef();\n                    }\n\n                  }\n\n                  if (reopenLock != null) reopenLock.unlock();\n\n                  if (!softCommit) {\n                    if (hardCommitLock != null) hardCommitLock.unlock();\n                  }\n\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id = rand.nextInt(ndocs);\n              Object sync = syncArr[id];\n\n              // set the lastId before we actually change it sometimes to try and\n              // uncover more race conditions between writing and reading\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              // We can't concurrently update the same document and retain our invariants of increasing values\n              // since we can't guarantee what order the updates will be executed.\n              synchronized (sync) {\n                DocInfo info = model.get(id);\n                long val = info.val;\n                long nextVal = Math.abs(val)+1;\n\n                if (oper < commitPercent + deletePercent) {\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleting id\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                  model.put(id, new DocInfo(0,-nextVal));\n                  verbose(\"deleting id\",id,\"val=\",nextVal,\"DONE\");\n\n                } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                  //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                  model.put(id, new DocInfo(0,-nextVal));\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal,\"DONE\");\n                } else {\n                  // model.put(id, nextVal);   // uncomment this and this test should fail.\n\n                  // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                  Document d = new Document();\n                  d.add(new Field(\"id\",Integer.toString(id), idFt));\n                  d.add(new Field(field, Long.toString(nextVal), ft2));\n                  verbose(\"adding id\",id,\"val=\",nextVal);\n                  writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                  if (tombstones) {\n                    // remove tombstone after new addition (this should be optional?)\n                    verbose(\"deleting tombstone for id\",id);\n                    writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    verbose(\"deleting tombstone for id\",id,\"DONE\");\n                  }\n\n                  model.put(id, new DocInfo(0,nextVal));\n                  verbose(\"adding id\",id,\"val=\",nextVal,\"DONE\");\n                }\n              }\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Exception  ex) {\n            throw new RuntimeException(ex);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              DocInfo info;\n              synchronized(TestRealTimeGet.this) {\n                info = committedModel.get(id);\n              }\n              long val = info.val;\n\n              IndexReader r;\n              synchronized(TestRealTimeGet.this) {\n                r = reader;\n                r.incRef();\n              }\n\n              int docid = getFirstMatch(r, new Term(\"id\",Integer.toString(id)));\n\n              if (docid < 0 && tombstones) {\n                // if we couldn't find the doc, look for it's tombstone\n                docid = getFirstMatch(r, new Term(\"id\",\"-\"+Integer.toString(id)));\n                if (docid < 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  verbose(\"ERROR: Couldn't find a doc  or tombstone for id\", id, \"using reader\",r,\"expected value\",val);\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val);\n                }\n              }\n\n              if (docid < 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                if (docid < 0) {\n                  verbose(\"ERROR: Couldn't find a doc for id\", id, \"using reader\",r);\n                }\n                assertTrue(docid >= 0);   // we should have found the document, or it's tombstone\n                Document doc = r.document(docid);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  verbose(\"ERROR: id\",id,\"model_val=\",val,\" foundVal=\",foundVal,\"reader=\",reader);\n                }\n                assertTrue(foundVal >= Math.abs(val));\n              }\n\n              r.decRef();\n            }\n          }\n          catch (Throwable e) {\n            operations.set(-1L);\n            SolrException.log(log,e);\n            fail(e.toString());\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStressLuceneNRT() throws Exception {\n    final int commitPercent = 5 + random.nextInt(20);\n    final int softCommitPercent = 30+random.nextInt(75); // what percent of the commits are soft\n    final int deletePercent = 4+random.nextInt(25);\n    final int deleteByQueryPercent = 0;  // real-time get isn't currently supported with delete-by-query\n    final int ndocs = 5 + (random.nextBoolean() ? random.nextInt(25) : random.nextInt(200));\n    int nWriteThreads = 5 + random.nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;   // number of committers at a time... it should be <= maxWarmingSearchers\n\n    final AtomicLong operations = new AtomicLong(10000);  // number of query operations to perform in total - crank up if\n    int nReadThreads = 5 + random.nextInt(25);\n    final boolean tombstones = random.nextBoolean();\n    final boolean syncCommits = random.nextBoolean();\n\n    verbose(\"commitPercent=\", commitPercent);\n    verbose(\"softCommitPercent=\",softCommitPercent);\n    verbose(\"deletePercent=\",deletePercent);\n    verbose(\"deleteByQueryPercent=\", deleteByQueryPercent);\n    verbose(\"ndocs=\", ndocs);\n    verbose(\"nWriteThreads=\", nWriteThreads);\n    verbose(\"nReadThreads=\", nReadThreads);\n    verbose(\"maxConcurrentCommits=\", maxConcurrentCommits);\n    verbose(\"operations=\", operations);\n    verbose(\"tombstones=\", tombstones);\n    verbose(\"syncCommits=\", syncCommits);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n\n    final FieldType idFt = new FieldType();\n    idFt.setIndexed(true);\n    idFt.setStored(true);\n    idFt.setOmitNorms(true);\n    idFt.setTokenized(false);\n    idFt.setIndexOptions(FieldInfo.IndexOptions.DOCS_ONLY);\n\n    final FieldType ft2 = new FieldType();\n    ft2.setIndexed(false);\n    ft2.setStored(true);\n\n\n    // model how solr does locking - only allow one thread to do a hard commit at once, and only one thread to do a soft commit, but\n    // a hard commit in progress does not stop a soft commit.\n    final Lock hardCommitLock = syncCommits ? new ReentrantLock() : null;\n    final Lock reopenLock = syncCommits ? new ReentrantLock() : null;\n\n\n    // RAMDirectory dir = new RAMDirectory();\n    // final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_40, new WhitespaceAnalyzer(Version.LUCENE_40)));\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setDoRandomForceMergeAssert(false);\n\n    // writer.commit();\n    // reader = IndexReader.open(dir);\n    // make this reader an NRT reader from the start to avoid the first non-writer openIfChanged\n    // to only opening at the last commit point.\n    reader = IndexReader.open(writer.w, true);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,Long> newCommittedModel;\n                  long version;\n                  IndexReader oldReader;\n\n                  boolean softCommit = rand.nextInt(100) < softCommitPercent;\n\n                  if (!softCommit) {\n                    // only allow one hard commit to proceed at once\n                    if (hardCommitLock != null) hardCommitLock.lock();\n                    verbose(\"hardCommit start\");\n\n                    writer.commit();\n                  }\n\n                  if (reopenLock != null) reopenLock.lock();\n\n                  synchronized(TestRealTimeGet.this) {\n                    newCommittedModel = new HashMap<Integer,Long>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  if (!softCommit) {\n                    // must commit after taking a snapshot of the model\n                    // writer.commit();\n                  }\n\n                  verbose(\"reopen start using\", oldReader);\n\n                  IndexReader newReader;\n                  if (softCommit) {\n                    newReader = IndexReader.openIfChanged(oldReader, writer.w, true);\n                  } else {\n                    // will only open to last commit\n                   newReader = IndexReader.openIfChanged(oldReader);\n                  }\n\n\n                  if (newReader == null) {\n                    oldReader.incRef();\n                    newReader = oldReader;\n                  }\n                  oldReader.decRef();\n\n                  verbose(\"reopen result\", newReader);\n\n                  synchronized(TestRealTimeGet.this) {\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      reader.decRef();\n                      reader = newReader;\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      }\n\n                    } else {\n                      // close if unused\n                      newReader.decRef();\n                    }\n\n                  }\n\n                  if (reopenLock != null) reopenLock.unlock();\n\n                  if (!softCommit) {\n                    if (hardCommitLock != null) hardCommitLock.unlock();\n                  }\n\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id = rand.nextInt(ndocs);\n              Object sync = syncArr[id];\n\n              // set the lastId before we actually change it sometimes to try and\n              // uncover more race conditions between writing and reading\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              // We can't concurrently update the same document and retain our invariants of increasing values\n              // since we can't guarantee what order the updates will be executed.\n              synchronized (sync) {\n                Long val = model.get(id);\n                long nextVal = Math.abs(val)+1;\n\n                if (oper < commitPercent + deletePercent) {\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleting id\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                  model.put(id, -nextVal);\n                  verbose(\"deleting id\",id,\"val=\",nextVal,\"DONE\");\n\n                } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                  //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                  model.put(id, -nextVal);\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal,\"DONE\");\n                } else {\n                  // model.put(id, nextVal);   // uncomment this and this test should fail.\n\n                  // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                  Document d = new Document();\n                  d.add(new Field(\"id\",Integer.toString(id), idFt));\n                  d.add(new Field(field, Long.toString(nextVal), ft2));\n                  verbose(\"adding id\",id,\"val=\",nextVal);\n                  writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                  if (tombstones) {\n                    // remove tombstone after new addition (this should be optional?)\n                    verbose(\"deleting tombstone for id\",id);\n                    writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    verbose(\"deleting tombstone for id\",id,\"DONE\");\n                  }\n\n                  model.put(id, nextVal);\n                  verbose(\"adding id\",id,\"val=\",nextVal,\"DONE\");\n                }\n              }\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Exception  ex) {\n            throw new RuntimeException(ex);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              long val;\n\n              synchronized(TestRealTimeGet.this) {\n                val = committedModel.get(id);\n              }\n\n\n              IndexReader r;\n              synchronized(TestRealTimeGet.this) {\n                r = reader;\n                r.incRef();\n              }\n\n              int docid = getFirstMatch(r, new Term(\"id\",Integer.toString(id)));\n\n              if (docid < 0 && tombstones) {\n                // if we couldn't find the doc, look for it's tombstone\n                docid = getFirstMatch(r, new Term(\"id\",\"-\"+Integer.toString(id)));\n                if (docid < 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  verbose(\"ERROR: Couldn't find a doc  or tombstone for id\", id, \"using reader\",r,\"expected value\",val);\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val);\n                }\n              }\n\n              if (docid < 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                if (docid < 0) {\n                  verbose(\"ERROR: Couldn't find a doc for id\", id, \"using reader\",r);\n                }\n                assertTrue(docid >= 0);   // we should have found the document, or it's tombstone\n                Document doc = r.document(docid);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  verbose(\"ERROR: id\",id,\"model_val=\",val,\" foundVal=\",foundVal,\"reader=\",reader);\n                }\n                assertTrue(foundVal >= Math.abs(val));\n              }\n\n              r.decRef();\n            }\n          }\n          catch (Throwable e) {\n            operations.set(-1L);\n            SolrException.log(log,e);\n            fail(e.toString());\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testStressLuceneNRT().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testStressLuceneNRT().mjava","sourceNew":"  @Test\n  public void testStressLuceneNRT() throws Exception {\n    final int commitPercent = 5 + random.nextInt(20);\n    final int softCommitPercent = 30+random.nextInt(75); // what percent of the commits are soft\n    final int deletePercent = 4+random.nextInt(25);\n    final int deleteByQueryPercent = 1+random.nextInt(5);\n    final int ndocs = 5 + (random.nextBoolean() ? random.nextInt(25) : random.nextInt(200));\n    int nWriteThreads = 5 + random.nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;   // number of committers at a time... it should be <= maxWarmingSearchers\n\n    final AtomicLong operations = new AtomicLong(1000);  // number of query operations to perform in total - crank up if\n    int nReadThreads = 5 + random.nextInt(25);\n    final boolean tombstones = random.nextBoolean();\n    final boolean syncCommits = random.nextBoolean();\n\n    verbose(\"commitPercent=\", commitPercent);\n    verbose(\"softCommitPercent=\",softCommitPercent);\n    verbose(\"deletePercent=\",deletePercent);\n    verbose(\"deleteByQueryPercent=\", deleteByQueryPercent);\n    verbose(\"ndocs=\", ndocs);\n    verbose(\"nWriteThreads=\", nWriteThreads);\n    verbose(\"nReadThreads=\", nReadThreads);\n    verbose(\"maxConcurrentCommits=\", maxConcurrentCommits);\n    verbose(\"operations=\", operations);\n    verbose(\"tombstones=\", tombstones);\n    verbose(\"syncCommits=\", syncCommits);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n\n    final FieldType idFt = new FieldType();\n    idFt.setIndexed(true);\n    idFt.setStored(true);\n    idFt.setOmitNorms(true);\n    idFt.setTokenized(false);\n    idFt.setIndexOptions(FieldInfo.IndexOptions.DOCS_ONLY);\n\n    final FieldType ft2 = new FieldType();\n    ft2.setIndexed(false);\n    ft2.setStored(true);\n\n\n    // model how solr does locking - only allow one thread to do a hard commit at once, and only one thread to do a soft commit, but\n    // a hard commit in progress does not stop a soft commit.\n    final Lock hardCommitLock = syncCommits ? new ReentrantLock() : null;\n    final Lock reopenLock = syncCommits ? new ReentrantLock() : null;\n\n\n    // RAMDirectory dir = new RAMDirectory();\n    // final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_40, new WhitespaceAnalyzer(Version.LUCENE_40)));\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setDoRandomForceMergeAssert(false);\n\n    // writer.commit();\n    // reader = IndexReader.open(dir);\n    // make this reader an NRT reader from the start to avoid the first non-writer openIfChanged\n    // to only opening at the last commit point.\n    reader = IndexReader.open(writer.w, true);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,DocInfo> newCommittedModel;\n                  long version;\n                  IndexReader oldReader;\n\n                  boolean softCommit = rand.nextInt(100) < softCommitPercent;\n\n                  if (!softCommit) {\n                    // only allow one hard commit to proceed at once\n                    if (hardCommitLock != null) hardCommitLock.lock();\n                    verbose(\"hardCommit start\");\n\n                    writer.commit();\n                  }\n\n                  if (reopenLock != null) reopenLock.lock();\n\n                  synchronized(TestRealTimeGet.this) {\n                    newCommittedModel = new HashMap<Integer,DocInfo>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  if (!softCommit) {\n                    // must commit after taking a snapshot of the model\n                    // writer.commit();\n                  }\n\n                  verbose(\"reopen start using\", oldReader);\n\n                  IndexReader newReader;\n                  if (softCommit) {\n                    newReader = IndexReader.openIfChanged(oldReader, writer.w, true);\n                  } else {\n                    // will only open to last commit\n                   newReader = IndexReader.openIfChanged(oldReader);\n                  }\n\n\n                  if (newReader == null) {\n                    oldReader.incRef();\n                    newReader = oldReader;\n                  }\n                  oldReader.decRef();\n\n                  verbose(\"reopen result\", newReader);\n\n                  synchronized(TestRealTimeGet.this) {\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      reader.decRef();\n                      reader = newReader;\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      }\n\n                    } else {\n                      // close if unused\n                      newReader.decRef();\n                    }\n\n                  }\n\n                  if (reopenLock != null) reopenLock.unlock();\n\n                  if (!softCommit) {\n                    if (hardCommitLock != null) hardCommitLock.unlock();\n                  }\n\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id = rand.nextInt(ndocs);\n              Object sync = syncArr[id];\n\n              // set the lastId before we actually change it sometimes to try and\n              // uncover more race conditions between writing and reading\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              // We can't concurrently update the same document and retain our invariants of increasing values\n              // since we can't guarantee what order the updates will be executed.\n              synchronized (sync) {\n                DocInfo info = model.get(id);\n                long val = info.val;\n                long nextVal = Math.abs(val)+1;\n\n                if (oper < commitPercent + deletePercent) {\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleting id\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                  model.put(id, new DocInfo(0,-nextVal));\n                  verbose(\"deleting id\",id,\"val=\",nextVal,\"DONE\");\n\n                } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                  //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                  model.put(id, new DocInfo(0,-nextVal));\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal,\"DONE\");\n                } else {\n                  // model.put(id, nextVal);   // uncomment this and this test should fail.\n\n                  // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                  Document d = new Document();\n                  d.add(new Field(\"id\",Integer.toString(id), idFt));\n                  d.add(new Field(field, Long.toString(nextVal), ft2));\n                  verbose(\"adding id\",id,\"val=\",nextVal);\n                  writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                  if (tombstones) {\n                    // remove tombstone after new addition (this should be optional?)\n                    verbose(\"deleting tombstone for id\",id);\n                    writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    verbose(\"deleting tombstone for id\",id,\"DONE\");\n                  }\n\n                  model.put(id, new DocInfo(0,nextVal));\n                  verbose(\"adding id\",id,\"val=\",nextVal,\"DONE\");\n                }\n              }\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Exception  ex) {\n            throw new RuntimeException(ex);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              DocInfo info;\n              synchronized(TestRealTimeGet.this) {\n                info = committedModel.get(id);\n              }\n              long val = info.val;\n\n              IndexReader r;\n              synchronized(TestRealTimeGet.this) {\n                r = reader;\n                r.incRef();\n              }\n\n              int docid = getFirstMatch(r, new Term(\"id\",Integer.toString(id)));\n\n              if (docid < 0 && tombstones) {\n                // if we couldn't find the doc, look for it's tombstone\n                docid = getFirstMatch(r, new Term(\"id\",\"-\"+Integer.toString(id)));\n                if (docid < 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  verbose(\"ERROR: Couldn't find a doc  or tombstone for id\", id, \"using reader\",r,\"expected value\",val);\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val);\n                }\n              }\n\n              if (docid < 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                if (docid < 0) {\n                  verbose(\"ERROR: Couldn't find a doc for id\", id, \"using reader\",r);\n                }\n                assertTrue(docid >= 0);   // we should have found the document, or it's tombstone\n                Document doc = r.document(docid);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  verbose(\"ERROR: id\",id,\"model_val=\",val,\" foundVal=\",foundVal,\"reader=\",reader);\n                }\n                assertTrue(foundVal >= Math.abs(val));\n              }\n\n              r.decRef();\n            }\n          }\n          catch (Throwable e) {\n            operations.set(-1L);\n            SolrException.log(log,e);\n            fail(e.toString());\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStressLuceneNRT() throws Exception {\n    final int commitPercent = 5 + random.nextInt(20);\n    final int softCommitPercent = 30+random.nextInt(75); // what percent of the commits are soft\n    final int deletePercent = 4+random.nextInt(25);\n    final int deleteByQueryPercent = 0;  // real-time get isn't currently supported with delete-by-query\n    final int ndocs = 5 + (random.nextBoolean() ? random.nextInt(25) : random.nextInt(200));\n    int nWriteThreads = 5 + random.nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;   // number of committers at a time... it should be <= maxWarmingSearchers\n\n    final AtomicLong operations = new AtomicLong(10000);  // number of query operations to perform in total - crank up if\n    int nReadThreads = 5 + random.nextInt(25);\n    final boolean tombstones = random.nextBoolean();\n    final boolean syncCommits = random.nextBoolean();\n\n    verbose(\"commitPercent=\", commitPercent);\n    verbose(\"softCommitPercent=\",softCommitPercent);\n    verbose(\"deletePercent=\",deletePercent);\n    verbose(\"deleteByQueryPercent=\", deleteByQueryPercent);\n    verbose(\"ndocs=\", ndocs);\n    verbose(\"nWriteThreads=\", nWriteThreads);\n    verbose(\"nReadThreads=\", nReadThreads);\n    verbose(\"maxConcurrentCommits=\", maxConcurrentCommits);\n    verbose(\"operations=\", operations);\n    verbose(\"tombstones=\", tombstones);\n    verbose(\"syncCommits=\", syncCommits);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n\n    final FieldType idFt = new FieldType();\n    idFt.setIndexed(true);\n    idFt.setStored(true);\n    idFt.setOmitNorms(true);\n    idFt.setTokenized(false);\n    idFt.setIndexOptions(FieldInfo.IndexOptions.DOCS_ONLY);\n\n    final FieldType ft2 = new FieldType();\n    ft2.setIndexed(false);\n    ft2.setStored(true);\n\n\n    // model how solr does locking - only allow one thread to do a hard commit at once, and only one thread to do a soft commit, but\n    // a hard commit in progress does not stop a soft commit.\n    final Lock hardCommitLock = syncCommits ? new ReentrantLock() : null;\n    final Lock reopenLock = syncCommits ? new ReentrantLock() : null;\n\n\n    // RAMDirectory dir = new RAMDirectory();\n    // final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_40, new WhitespaceAnalyzer(Version.LUCENE_40)));\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setDoRandomForceMergeAssert(false);\n\n    // writer.commit();\n    // reader = IndexReader.open(dir);\n    // make this reader an NRT reader from the start to avoid the first non-writer openIfChanged\n    // to only opening at the last commit point.\n    reader = IndexReader.open(writer.w, true);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,Long> newCommittedModel;\n                  long version;\n                  IndexReader oldReader;\n\n                  boolean softCommit = rand.nextInt(100) < softCommitPercent;\n\n                  if (!softCommit) {\n                    // only allow one hard commit to proceed at once\n                    if (hardCommitLock != null) hardCommitLock.lock();\n                    verbose(\"hardCommit start\");\n\n                    writer.commit();\n                  }\n\n                  if (reopenLock != null) reopenLock.lock();\n\n                  synchronized(TestRealTimeGet.this) {\n                    newCommittedModel = new HashMap<Integer,Long>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  if (!softCommit) {\n                    // must commit after taking a snapshot of the model\n                    // writer.commit();\n                  }\n\n                  verbose(\"reopen start using\", oldReader);\n\n                  IndexReader newReader;\n                  if (softCommit) {\n                    newReader = IndexReader.openIfChanged(oldReader, writer.w, true);\n                  } else {\n                    // will only open to last commit\n                   newReader = IndexReader.openIfChanged(oldReader);\n                  }\n\n\n                  if (newReader == null) {\n                    oldReader.incRef();\n                    newReader = oldReader;\n                  }\n                  oldReader.decRef();\n\n                  verbose(\"reopen result\", newReader);\n\n                  synchronized(TestRealTimeGet.this) {\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      reader.decRef();\n                      reader = newReader;\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      }\n\n                    } else {\n                      // close if unused\n                      newReader.decRef();\n                    }\n\n                  }\n\n                  if (reopenLock != null) reopenLock.unlock();\n\n                  if (!softCommit) {\n                    if (hardCommitLock != null) hardCommitLock.unlock();\n                  }\n\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id = rand.nextInt(ndocs);\n              Object sync = syncArr[id];\n\n              // set the lastId before we actually change it sometimes to try and\n              // uncover more race conditions between writing and reading\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              // We can't concurrently update the same document and retain our invariants of increasing values\n              // since we can't guarantee what order the updates will be executed.\n              synchronized (sync) {\n                Long val = model.get(id);\n                long nextVal = Math.abs(val)+1;\n\n                if (oper < commitPercent + deletePercent) {\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleting id\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                  model.put(id, -nextVal);\n                  verbose(\"deleting id\",id,\"val=\",nextVal,\"DONE\");\n\n                } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                  //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                  model.put(id, -nextVal);\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal,\"DONE\");\n                } else {\n                  // model.put(id, nextVal);   // uncomment this and this test should fail.\n\n                  // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                  Document d = new Document();\n                  d.add(new Field(\"id\",Integer.toString(id), idFt));\n                  d.add(new Field(field, Long.toString(nextVal), ft2));\n                  verbose(\"adding id\",id,\"val=\",nextVal);\n                  writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                  if (tombstones) {\n                    // remove tombstone after new addition (this should be optional?)\n                    verbose(\"deleting tombstone for id\",id);\n                    writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    verbose(\"deleting tombstone for id\",id,\"DONE\");\n                  }\n\n                  model.put(id, nextVal);\n                  verbose(\"adding id\",id,\"val=\",nextVal,\"DONE\");\n                }\n              }\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Exception  ex) {\n            throw new RuntimeException(ex);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              long val;\n\n              synchronized(TestRealTimeGet.this) {\n                val = committedModel.get(id);\n              }\n\n\n              IndexReader r;\n              synchronized(TestRealTimeGet.this) {\n                r = reader;\n                r.incRef();\n              }\n\n              int docid = getFirstMatch(r, new Term(\"id\",Integer.toString(id)));\n\n              if (docid < 0 && tombstones) {\n                // if we couldn't find the doc, look for it's tombstone\n                docid = getFirstMatch(r, new Term(\"id\",\"-\"+Integer.toString(id)));\n                if (docid < 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  verbose(\"ERROR: Couldn't find a doc  or tombstone for id\", id, \"using reader\",r,\"expected value\",val);\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val);\n                }\n              }\n\n              if (docid < 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                if (docid < 0) {\n                  verbose(\"ERROR: Couldn't find a doc for id\", id, \"using reader\",r);\n                }\n                assertTrue(docid >= 0);   // we should have found the document, or it's tombstone\n                Document doc = r.document(docid);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  verbose(\"ERROR: id\",id,\"model_val=\",val,\" foundVal=\",foundVal,\"reader=\",reader);\n                }\n                assertTrue(foundVal >= Math.abs(val));\n              }\n\n              r.decRef();\n            }\n          }\n          catch (Throwable e) {\n            operations.set(-1L);\n            SolrException.log(log,e);\n            fail(e.toString());\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96d207426bd26fa5c1014e26d21d87603aea68b7","date":1327944562,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testStressLuceneNRT().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testStressLuceneNRT().mjava","sourceNew":"  @Test\n  public void testStressLuceneNRT() throws Exception {\n    final int commitPercent = 5 + random.nextInt(20);\n    final int softCommitPercent = 30+random.nextInt(75); // what percent of the commits are soft\n    final int deletePercent = 4+random.nextInt(25);\n    final int deleteByQueryPercent = 1+random.nextInt(5);\n    final int ndocs = 5 + (random.nextBoolean() ? random.nextInt(25) : random.nextInt(200));\n    int nWriteThreads = 5 + random.nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;   // number of committers at a time... it should be <= maxWarmingSearchers\n\n    final AtomicLong operations = new AtomicLong(1000);  // number of query operations to perform in total - crank up if\n    int nReadThreads = 5 + random.nextInt(25);\n    final boolean tombstones = random.nextBoolean();\n    final boolean syncCommits = random.nextBoolean();\n\n    verbose(\"commitPercent=\", commitPercent);\n    verbose(\"softCommitPercent=\",softCommitPercent);\n    verbose(\"deletePercent=\",deletePercent);\n    verbose(\"deleteByQueryPercent=\", deleteByQueryPercent);\n    verbose(\"ndocs=\", ndocs);\n    verbose(\"nWriteThreads=\", nWriteThreads);\n    verbose(\"nReadThreads=\", nReadThreads);\n    verbose(\"maxConcurrentCommits=\", maxConcurrentCommits);\n    verbose(\"operations=\", operations);\n    verbose(\"tombstones=\", tombstones);\n    verbose(\"syncCommits=\", syncCommits);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n\n    final FieldType idFt = new FieldType();\n    idFt.setIndexed(true);\n    idFt.setStored(true);\n    idFt.setOmitNorms(true);\n    idFt.setTokenized(false);\n    idFt.setIndexOptions(FieldInfo.IndexOptions.DOCS_ONLY);\n\n    final FieldType ft2 = new FieldType();\n    ft2.setIndexed(false);\n    ft2.setStored(true);\n\n\n    // model how solr does locking - only allow one thread to do a hard commit at once, and only one thread to do a soft commit, but\n    // a hard commit in progress does not stop a soft commit.\n    final Lock hardCommitLock = syncCommits ? new ReentrantLock() : null;\n    final Lock reopenLock = syncCommits ? new ReentrantLock() : null;\n\n\n    // RAMDirectory dir = new RAMDirectory();\n    // final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_40, new WhitespaceAnalyzer(Version.LUCENE_40)));\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setDoRandomForceMergeAssert(false);\n\n    // writer.commit();\n    // reader = IndexReader.open(dir);\n    // make this reader an NRT reader from the start to avoid the first non-writer openIfChanged\n    // to only opening at the last commit point.\n    reader = DirectoryReader.open(writer.w, true);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,DocInfo> newCommittedModel;\n                  long version;\n                  DirectoryReader oldReader;\n\n                  boolean softCommit = rand.nextInt(100) < softCommitPercent;\n\n                  if (!softCommit) {\n                    // only allow one hard commit to proceed at once\n                    if (hardCommitLock != null) hardCommitLock.lock();\n                    verbose(\"hardCommit start\");\n\n                    writer.commit();\n                  }\n\n                  if (reopenLock != null) reopenLock.lock();\n\n                  synchronized(TestRealTimeGet.this) {\n                    newCommittedModel = new HashMap<Integer,DocInfo>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  if (!softCommit) {\n                    // must commit after taking a snapshot of the model\n                    // writer.commit();\n                  }\n\n                  verbose(\"reopen start using\", oldReader);\n\n                  DirectoryReader newReader;\n                  if (softCommit) {\n                    newReader = DirectoryReader.openIfChanged(oldReader, writer.w, true);\n                  } else {\n                    // will only open to last commit\n                   newReader = DirectoryReader.openIfChanged(oldReader);\n                  }\n\n\n                  if (newReader == null) {\n                    oldReader.incRef();\n                    newReader = oldReader;\n                  }\n                  oldReader.decRef();\n\n                  verbose(\"reopen result\", newReader);\n\n                  synchronized(TestRealTimeGet.this) {\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      reader.decRef();\n                      reader = newReader;\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      }\n\n                    } else {\n                      // close if unused\n                      newReader.decRef();\n                    }\n\n                  }\n\n                  if (reopenLock != null) reopenLock.unlock();\n\n                  if (!softCommit) {\n                    if (hardCommitLock != null) hardCommitLock.unlock();\n                  }\n\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id = rand.nextInt(ndocs);\n              Object sync = syncArr[id];\n\n              // set the lastId before we actually change it sometimes to try and\n              // uncover more race conditions between writing and reading\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              // We can't concurrently update the same document and retain our invariants of increasing values\n              // since we can't guarantee what order the updates will be executed.\n              synchronized (sync) {\n                DocInfo info = model.get(id);\n                long val = info.val;\n                long nextVal = Math.abs(val)+1;\n\n                if (oper < commitPercent + deletePercent) {\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleting id\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                  model.put(id, new DocInfo(0,-nextVal));\n                  verbose(\"deleting id\",id,\"val=\",nextVal,\"DONE\");\n\n                } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                  //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                  model.put(id, new DocInfo(0,-nextVal));\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal,\"DONE\");\n                } else {\n                  // model.put(id, nextVal);   // uncomment this and this test should fail.\n\n                  // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                  Document d = new Document();\n                  d.add(new Field(\"id\",Integer.toString(id), idFt));\n                  d.add(new Field(field, Long.toString(nextVal), ft2));\n                  verbose(\"adding id\",id,\"val=\",nextVal);\n                  writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                  if (tombstones) {\n                    // remove tombstone after new addition (this should be optional?)\n                    verbose(\"deleting tombstone for id\",id);\n                    writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    verbose(\"deleting tombstone for id\",id,\"DONE\");\n                  }\n\n                  model.put(id, new DocInfo(0,nextVal));\n                  verbose(\"adding id\",id,\"val=\",nextVal,\"DONE\");\n                }\n              }\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Exception  ex) {\n            throw new RuntimeException(ex);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              DocInfo info;\n              synchronized(TestRealTimeGet.this) {\n                info = committedModel.get(id);\n              }\n              long val = info.val;\n\n              IndexReader r;\n              synchronized(TestRealTimeGet.this) {\n                r = reader;\n                r.incRef();\n              }\n\n              int docid = getFirstMatch(r, new Term(\"id\",Integer.toString(id)));\n\n              if (docid < 0 && tombstones) {\n                // if we couldn't find the doc, look for it's tombstone\n                docid = getFirstMatch(r, new Term(\"id\",\"-\"+Integer.toString(id)));\n                if (docid < 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  verbose(\"ERROR: Couldn't find a doc  or tombstone for id\", id, \"using reader\",r,\"expected value\",val);\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val);\n                }\n              }\n\n              if (docid < 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                if (docid < 0) {\n                  verbose(\"ERROR: Couldn't find a doc for id\", id, \"using reader\",r);\n                }\n                assertTrue(docid >= 0);   // we should have found the document, or it's tombstone\n                Document doc = r.document(docid);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  verbose(\"ERROR: id\",id,\"model_val=\",val,\" foundVal=\",foundVal,\"reader=\",reader);\n                }\n                assertTrue(foundVal >= Math.abs(val));\n              }\n\n              r.decRef();\n            }\n          }\n          catch (Throwable e) {\n            operations.set(-1L);\n            SolrException.log(log,e);\n            fail(e.toString());\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStressLuceneNRT() throws Exception {\n    final int commitPercent = 5 + random.nextInt(20);\n    final int softCommitPercent = 30+random.nextInt(75); // what percent of the commits are soft\n    final int deletePercent = 4+random.nextInt(25);\n    final int deleteByQueryPercent = 1+random.nextInt(5);\n    final int ndocs = 5 + (random.nextBoolean() ? random.nextInt(25) : random.nextInt(200));\n    int nWriteThreads = 5 + random.nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;   // number of committers at a time... it should be <= maxWarmingSearchers\n\n    final AtomicLong operations = new AtomicLong(1000);  // number of query operations to perform in total - crank up if\n    int nReadThreads = 5 + random.nextInt(25);\n    final boolean tombstones = random.nextBoolean();\n    final boolean syncCommits = random.nextBoolean();\n\n    verbose(\"commitPercent=\", commitPercent);\n    verbose(\"softCommitPercent=\",softCommitPercent);\n    verbose(\"deletePercent=\",deletePercent);\n    verbose(\"deleteByQueryPercent=\", deleteByQueryPercent);\n    verbose(\"ndocs=\", ndocs);\n    verbose(\"nWriteThreads=\", nWriteThreads);\n    verbose(\"nReadThreads=\", nReadThreads);\n    verbose(\"maxConcurrentCommits=\", maxConcurrentCommits);\n    verbose(\"operations=\", operations);\n    verbose(\"tombstones=\", tombstones);\n    verbose(\"syncCommits=\", syncCommits);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n\n    final FieldType idFt = new FieldType();\n    idFt.setIndexed(true);\n    idFt.setStored(true);\n    idFt.setOmitNorms(true);\n    idFt.setTokenized(false);\n    idFt.setIndexOptions(FieldInfo.IndexOptions.DOCS_ONLY);\n\n    final FieldType ft2 = new FieldType();\n    ft2.setIndexed(false);\n    ft2.setStored(true);\n\n\n    // model how solr does locking - only allow one thread to do a hard commit at once, and only one thread to do a soft commit, but\n    // a hard commit in progress does not stop a soft commit.\n    final Lock hardCommitLock = syncCommits ? new ReentrantLock() : null;\n    final Lock reopenLock = syncCommits ? new ReentrantLock() : null;\n\n\n    // RAMDirectory dir = new RAMDirectory();\n    // final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_40, new WhitespaceAnalyzer(Version.LUCENE_40)));\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setDoRandomForceMergeAssert(false);\n\n    // writer.commit();\n    // reader = IndexReader.open(dir);\n    // make this reader an NRT reader from the start to avoid the first non-writer openIfChanged\n    // to only opening at the last commit point.\n    reader = IndexReader.open(writer.w, true);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,DocInfo> newCommittedModel;\n                  long version;\n                  IndexReader oldReader;\n\n                  boolean softCommit = rand.nextInt(100) < softCommitPercent;\n\n                  if (!softCommit) {\n                    // only allow one hard commit to proceed at once\n                    if (hardCommitLock != null) hardCommitLock.lock();\n                    verbose(\"hardCommit start\");\n\n                    writer.commit();\n                  }\n\n                  if (reopenLock != null) reopenLock.lock();\n\n                  synchronized(TestRealTimeGet.this) {\n                    newCommittedModel = new HashMap<Integer,DocInfo>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  if (!softCommit) {\n                    // must commit after taking a snapshot of the model\n                    // writer.commit();\n                  }\n\n                  verbose(\"reopen start using\", oldReader);\n\n                  IndexReader newReader;\n                  if (softCommit) {\n                    newReader = IndexReader.openIfChanged(oldReader, writer.w, true);\n                  } else {\n                    // will only open to last commit\n                   newReader = IndexReader.openIfChanged(oldReader);\n                  }\n\n\n                  if (newReader == null) {\n                    oldReader.incRef();\n                    newReader = oldReader;\n                  }\n                  oldReader.decRef();\n\n                  verbose(\"reopen result\", newReader);\n\n                  synchronized(TestRealTimeGet.this) {\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      reader.decRef();\n                      reader = newReader;\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      }\n\n                    } else {\n                      // close if unused\n                      newReader.decRef();\n                    }\n\n                  }\n\n                  if (reopenLock != null) reopenLock.unlock();\n\n                  if (!softCommit) {\n                    if (hardCommitLock != null) hardCommitLock.unlock();\n                  }\n\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id = rand.nextInt(ndocs);\n              Object sync = syncArr[id];\n\n              // set the lastId before we actually change it sometimes to try and\n              // uncover more race conditions between writing and reading\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              // We can't concurrently update the same document and retain our invariants of increasing values\n              // since we can't guarantee what order the updates will be executed.\n              synchronized (sync) {\n                DocInfo info = model.get(id);\n                long val = info.val;\n                long nextVal = Math.abs(val)+1;\n\n                if (oper < commitPercent + deletePercent) {\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleting id\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                  model.put(id, new DocInfo(0,-nextVal));\n                  verbose(\"deleting id\",id,\"val=\",nextVal,\"DONE\");\n\n                } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                  //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                  model.put(id, new DocInfo(0,-nextVal));\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal,\"DONE\");\n                } else {\n                  // model.put(id, nextVal);   // uncomment this and this test should fail.\n\n                  // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                  Document d = new Document();\n                  d.add(new Field(\"id\",Integer.toString(id), idFt));\n                  d.add(new Field(field, Long.toString(nextVal), ft2));\n                  verbose(\"adding id\",id,\"val=\",nextVal);\n                  writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                  if (tombstones) {\n                    // remove tombstone after new addition (this should be optional?)\n                    verbose(\"deleting tombstone for id\",id);\n                    writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    verbose(\"deleting tombstone for id\",id,\"DONE\");\n                  }\n\n                  model.put(id, new DocInfo(0,nextVal));\n                  verbose(\"adding id\",id,\"val=\",nextVal,\"DONE\");\n                }\n              }\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Exception  ex) {\n            throw new RuntimeException(ex);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              DocInfo info;\n              synchronized(TestRealTimeGet.this) {\n                info = committedModel.get(id);\n              }\n              long val = info.val;\n\n              IndexReader r;\n              synchronized(TestRealTimeGet.this) {\n                r = reader;\n                r.incRef();\n              }\n\n              int docid = getFirstMatch(r, new Term(\"id\",Integer.toString(id)));\n\n              if (docid < 0 && tombstones) {\n                // if we couldn't find the doc, look for it's tombstone\n                docid = getFirstMatch(r, new Term(\"id\",\"-\"+Integer.toString(id)));\n                if (docid < 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  verbose(\"ERROR: Couldn't find a doc  or tombstone for id\", id, \"using reader\",r,\"expected value\",val);\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val);\n                }\n              }\n\n              if (docid < 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                if (docid < 0) {\n                  verbose(\"ERROR: Couldn't find a doc for id\", id, \"using reader\",r);\n                }\n                assertTrue(docid >= 0);   // we should have found the document, or it's tombstone\n                Document doc = r.document(docid);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  verbose(\"ERROR: id\",id,\"model_val=\",val,\" foundVal=\",foundVal,\"reader=\",reader);\n                }\n                assertTrue(foundVal >= Math.abs(val));\n              }\n\n              r.decRef();\n            }\n          }\n          catch (Throwable e) {\n            operations.set(-1L);\n            SolrException.log(log,e);\n            fail(e.toString());\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testStressLuceneNRT().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testStressLuceneNRT().mjava","sourceNew":"  @Test\n  public void testStressLuceneNRT() throws Exception {\n    final int commitPercent = 5 + random.nextInt(20);\n    final int softCommitPercent = 30+random.nextInt(75); // what percent of the commits are soft\n    final int deletePercent = 4+random.nextInt(25);\n    final int deleteByQueryPercent = 1+random.nextInt(5);\n    final int ndocs = 5 + (random.nextBoolean() ? random.nextInt(25) : random.nextInt(200));\n    int nWriteThreads = 5 + random.nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;   // number of committers at a time... it should be <= maxWarmingSearchers\n\n    final AtomicLong operations = new AtomicLong(1000);  // number of query operations to perform in total - crank up if\n    int nReadThreads = 5 + random.nextInt(25);\n    final boolean tombstones = random.nextBoolean();\n    final boolean syncCommits = random.nextBoolean();\n\n    verbose(\"commitPercent=\", commitPercent);\n    verbose(\"softCommitPercent=\",softCommitPercent);\n    verbose(\"deletePercent=\",deletePercent);\n    verbose(\"deleteByQueryPercent=\", deleteByQueryPercent);\n    verbose(\"ndocs=\", ndocs);\n    verbose(\"nWriteThreads=\", nWriteThreads);\n    verbose(\"nReadThreads=\", nReadThreads);\n    verbose(\"maxConcurrentCommits=\", maxConcurrentCommits);\n    verbose(\"operations=\", operations);\n    verbose(\"tombstones=\", tombstones);\n    verbose(\"syncCommits=\", syncCommits);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n\n    final FieldType idFt = new FieldType();\n    idFt.setIndexed(true);\n    idFt.setStored(true);\n    idFt.setOmitNorms(true);\n    idFt.setTokenized(false);\n    idFt.setIndexOptions(FieldInfo.IndexOptions.DOCS_ONLY);\n\n    final FieldType ft2 = new FieldType();\n    ft2.setIndexed(false);\n    ft2.setStored(true);\n\n\n    // model how solr does locking - only allow one thread to do a hard commit at once, and only one thread to do a soft commit, but\n    // a hard commit in progress does not stop a soft commit.\n    final Lock hardCommitLock = syncCommits ? new ReentrantLock() : null;\n    final Lock reopenLock = syncCommits ? new ReentrantLock() : null;\n\n\n    // RAMDirectory dir = new RAMDirectory();\n    // final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_40, new WhitespaceAnalyzer(Version.LUCENE_40)));\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setDoRandomForceMergeAssert(false);\n\n    // writer.commit();\n    // reader = IndexReader.open(dir);\n    // make this reader an NRT reader from the start to avoid the first non-writer openIfChanged\n    // to only opening at the last commit point.\n    reader = DirectoryReader.open(writer.w, true);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,DocInfo> newCommittedModel;\n                  long version;\n                  DirectoryReader oldReader;\n\n                  boolean softCommit = rand.nextInt(100) < softCommitPercent;\n\n                  if (!softCommit) {\n                    // only allow one hard commit to proceed at once\n                    if (hardCommitLock != null) hardCommitLock.lock();\n                    verbose(\"hardCommit start\");\n\n                    writer.commit();\n                  }\n\n                  if (reopenLock != null) reopenLock.lock();\n\n                  synchronized(TestRealTimeGet.this) {\n                    newCommittedModel = new HashMap<Integer,DocInfo>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  if (!softCommit) {\n                    // must commit after taking a snapshot of the model\n                    // writer.commit();\n                  }\n\n                  verbose(\"reopen start using\", oldReader);\n\n                  DirectoryReader newReader;\n                  if (softCommit) {\n                    newReader = DirectoryReader.openIfChanged(oldReader, writer.w, true);\n                  } else {\n                    // will only open to last commit\n                   newReader = DirectoryReader.openIfChanged(oldReader);\n                  }\n\n\n                  if (newReader == null) {\n                    oldReader.incRef();\n                    newReader = oldReader;\n                  }\n                  oldReader.decRef();\n\n                  verbose(\"reopen result\", newReader);\n\n                  synchronized(TestRealTimeGet.this) {\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      reader.decRef();\n                      reader = newReader;\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      }\n\n                    } else {\n                      // close if unused\n                      newReader.decRef();\n                    }\n\n                  }\n\n                  if (reopenLock != null) reopenLock.unlock();\n\n                  if (!softCommit) {\n                    if (hardCommitLock != null) hardCommitLock.unlock();\n                  }\n\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id = rand.nextInt(ndocs);\n              Object sync = syncArr[id];\n\n              // set the lastId before we actually change it sometimes to try and\n              // uncover more race conditions between writing and reading\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              // We can't concurrently update the same document and retain our invariants of increasing values\n              // since we can't guarantee what order the updates will be executed.\n              synchronized (sync) {\n                DocInfo info = model.get(id);\n                long val = info.val;\n                long nextVal = Math.abs(val)+1;\n\n                if (oper < commitPercent + deletePercent) {\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleting id\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                  model.put(id, new DocInfo(0,-nextVal));\n                  verbose(\"deleting id\",id,\"val=\",nextVal,\"DONE\");\n\n                } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                  //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                  model.put(id, new DocInfo(0,-nextVal));\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal,\"DONE\");\n                } else {\n                  // model.put(id, nextVal);   // uncomment this and this test should fail.\n\n                  // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                  Document d = new Document();\n                  d.add(new Field(\"id\",Integer.toString(id), idFt));\n                  d.add(new Field(field, Long.toString(nextVal), ft2));\n                  verbose(\"adding id\",id,\"val=\",nextVal);\n                  writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                  if (tombstones) {\n                    // remove tombstone after new addition (this should be optional?)\n                    verbose(\"deleting tombstone for id\",id);\n                    writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    verbose(\"deleting tombstone for id\",id,\"DONE\");\n                  }\n\n                  model.put(id, new DocInfo(0,nextVal));\n                  verbose(\"adding id\",id,\"val=\",nextVal,\"DONE\");\n                }\n              }\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Exception  ex) {\n            throw new RuntimeException(ex);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              DocInfo info;\n              synchronized(TestRealTimeGet.this) {\n                info = committedModel.get(id);\n              }\n              long val = info.val;\n\n              IndexReader r;\n              synchronized(TestRealTimeGet.this) {\n                r = reader;\n                r.incRef();\n              }\n\n              int docid = getFirstMatch(r, new Term(\"id\",Integer.toString(id)));\n\n              if (docid < 0 && tombstones) {\n                // if we couldn't find the doc, look for it's tombstone\n                docid = getFirstMatch(r, new Term(\"id\",\"-\"+Integer.toString(id)));\n                if (docid < 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  verbose(\"ERROR: Couldn't find a doc  or tombstone for id\", id, \"using reader\",r,\"expected value\",val);\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val);\n                }\n              }\n\n              if (docid < 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                if (docid < 0) {\n                  verbose(\"ERROR: Couldn't find a doc for id\", id, \"using reader\",r);\n                }\n                assertTrue(docid >= 0);   // we should have found the document, or it's tombstone\n                Document doc = r.document(docid);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  verbose(\"ERROR: id\",id,\"model_val=\",val,\" foundVal=\",foundVal,\"reader=\",reader);\n                }\n                assertTrue(foundVal >= Math.abs(val));\n              }\n\n              r.decRef();\n            }\n          }\n          catch (Throwable e) {\n            operations.set(-1L);\n            SolrException.log(log,e);\n            fail(e.toString());\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStressLuceneNRT() throws Exception {\n    final int commitPercent = 5 + random.nextInt(20);\n    final int softCommitPercent = 30+random.nextInt(75); // what percent of the commits are soft\n    final int deletePercent = 4+random.nextInt(25);\n    final int deleteByQueryPercent = 1+random.nextInt(5);\n    final int ndocs = 5 + (random.nextBoolean() ? random.nextInt(25) : random.nextInt(200));\n    int nWriteThreads = 5 + random.nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;   // number of committers at a time... it should be <= maxWarmingSearchers\n\n    final AtomicLong operations = new AtomicLong(1000);  // number of query operations to perform in total - crank up if\n    int nReadThreads = 5 + random.nextInt(25);\n    final boolean tombstones = random.nextBoolean();\n    final boolean syncCommits = random.nextBoolean();\n\n    verbose(\"commitPercent=\", commitPercent);\n    verbose(\"softCommitPercent=\",softCommitPercent);\n    verbose(\"deletePercent=\",deletePercent);\n    verbose(\"deleteByQueryPercent=\", deleteByQueryPercent);\n    verbose(\"ndocs=\", ndocs);\n    verbose(\"nWriteThreads=\", nWriteThreads);\n    verbose(\"nReadThreads=\", nReadThreads);\n    verbose(\"maxConcurrentCommits=\", maxConcurrentCommits);\n    verbose(\"operations=\", operations);\n    verbose(\"tombstones=\", tombstones);\n    verbose(\"syncCommits=\", syncCommits);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n\n    final FieldType idFt = new FieldType();\n    idFt.setIndexed(true);\n    idFt.setStored(true);\n    idFt.setOmitNorms(true);\n    idFt.setTokenized(false);\n    idFt.setIndexOptions(FieldInfo.IndexOptions.DOCS_ONLY);\n\n    final FieldType ft2 = new FieldType();\n    ft2.setIndexed(false);\n    ft2.setStored(true);\n\n\n    // model how solr does locking - only allow one thread to do a hard commit at once, and only one thread to do a soft commit, but\n    // a hard commit in progress does not stop a soft commit.\n    final Lock hardCommitLock = syncCommits ? new ReentrantLock() : null;\n    final Lock reopenLock = syncCommits ? new ReentrantLock() : null;\n\n\n    // RAMDirectory dir = new RAMDirectory();\n    // final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_40, new WhitespaceAnalyzer(Version.LUCENE_40)));\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setDoRandomForceMergeAssert(false);\n\n    // writer.commit();\n    // reader = IndexReader.open(dir);\n    // make this reader an NRT reader from the start to avoid the first non-writer openIfChanged\n    // to only opening at the last commit point.\n    reader = IndexReader.open(writer.w, true);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,DocInfo> newCommittedModel;\n                  long version;\n                  IndexReader oldReader;\n\n                  boolean softCommit = rand.nextInt(100) < softCommitPercent;\n\n                  if (!softCommit) {\n                    // only allow one hard commit to proceed at once\n                    if (hardCommitLock != null) hardCommitLock.lock();\n                    verbose(\"hardCommit start\");\n\n                    writer.commit();\n                  }\n\n                  if (reopenLock != null) reopenLock.lock();\n\n                  synchronized(TestRealTimeGet.this) {\n                    newCommittedModel = new HashMap<Integer,DocInfo>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  if (!softCommit) {\n                    // must commit after taking a snapshot of the model\n                    // writer.commit();\n                  }\n\n                  verbose(\"reopen start using\", oldReader);\n\n                  IndexReader newReader;\n                  if (softCommit) {\n                    newReader = IndexReader.openIfChanged(oldReader, writer.w, true);\n                  } else {\n                    // will only open to last commit\n                   newReader = IndexReader.openIfChanged(oldReader);\n                  }\n\n\n                  if (newReader == null) {\n                    oldReader.incRef();\n                    newReader = oldReader;\n                  }\n                  oldReader.decRef();\n\n                  verbose(\"reopen result\", newReader);\n\n                  synchronized(TestRealTimeGet.this) {\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      reader.decRef();\n                      reader = newReader;\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      }\n\n                    } else {\n                      // close if unused\n                      newReader.decRef();\n                    }\n\n                  }\n\n                  if (reopenLock != null) reopenLock.unlock();\n\n                  if (!softCommit) {\n                    if (hardCommitLock != null) hardCommitLock.unlock();\n                  }\n\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id = rand.nextInt(ndocs);\n              Object sync = syncArr[id];\n\n              // set the lastId before we actually change it sometimes to try and\n              // uncover more race conditions between writing and reading\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              // We can't concurrently update the same document and retain our invariants of increasing values\n              // since we can't guarantee what order the updates will be executed.\n              synchronized (sync) {\n                DocInfo info = model.get(id);\n                long val = info.val;\n                long nextVal = Math.abs(val)+1;\n\n                if (oper < commitPercent + deletePercent) {\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleting id\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                  model.put(id, new DocInfo(0,-nextVal));\n                  verbose(\"deleting id\",id,\"val=\",nextVal,\"DONE\");\n\n                } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                  //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                  model.put(id, new DocInfo(0,-nextVal));\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal,\"DONE\");\n                } else {\n                  // model.put(id, nextVal);   // uncomment this and this test should fail.\n\n                  // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                  Document d = new Document();\n                  d.add(new Field(\"id\",Integer.toString(id), idFt));\n                  d.add(new Field(field, Long.toString(nextVal), ft2));\n                  verbose(\"adding id\",id,\"val=\",nextVal);\n                  writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                  if (tombstones) {\n                    // remove tombstone after new addition (this should be optional?)\n                    verbose(\"deleting tombstone for id\",id);\n                    writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    verbose(\"deleting tombstone for id\",id,\"DONE\");\n                  }\n\n                  model.put(id, new DocInfo(0,nextVal));\n                  verbose(\"adding id\",id,\"val=\",nextVal,\"DONE\");\n                }\n              }\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Exception  ex) {\n            throw new RuntimeException(ex);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              DocInfo info;\n              synchronized(TestRealTimeGet.this) {\n                info = committedModel.get(id);\n              }\n              long val = info.val;\n\n              IndexReader r;\n              synchronized(TestRealTimeGet.this) {\n                r = reader;\n                r.incRef();\n              }\n\n              int docid = getFirstMatch(r, new Term(\"id\",Integer.toString(id)));\n\n              if (docid < 0 && tombstones) {\n                // if we couldn't find the doc, look for it's tombstone\n                docid = getFirstMatch(r, new Term(\"id\",\"-\"+Integer.toString(id)));\n                if (docid < 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  verbose(\"ERROR: Couldn't find a doc  or tombstone for id\", id, \"using reader\",r,\"expected value\",val);\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val);\n                }\n              }\n\n              if (docid < 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                if (docid < 0) {\n                  verbose(\"ERROR: Couldn't find a doc for id\", id, \"using reader\",r);\n                }\n                assertTrue(docid >= 0);   // we should have found the document, or it's tombstone\n                Document doc = r.document(docid);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  verbose(\"ERROR: id\",id,\"model_val=\",val,\" foundVal=\",foundVal,\"reader=\",reader);\n                }\n                assertTrue(foundVal >= Math.abs(val));\n              }\n\n              r.decRef();\n            }\n          }\n          catch (Throwable e) {\n            operations.set(-1L);\n            SolrException.log(log,e);\n            fail(e.toString());\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testStressLuceneNRT().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testStressLuceneNRT().mjava","sourceNew":"  @Test\n  public void testStressLuceneNRT() throws Exception {\n    final int commitPercent = 5 + random().nextInt(20);\n    final int softCommitPercent = 30+random().nextInt(75); // what percent of the commits are soft\n    final int deletePercent = 4+random().nextInt(25);\n    final int deleteByQueryPercent = 1+random().nextInt(5);\n    final int ndocs = 5 + (random().nextBoolean() ? random().nextInt(25) : random().nextInt(200));\n    int nWriteThreads = 5 + random().nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;   // number of committers at a time... it should be <= maxWarmingSearchers\n\n    final AtomicLong operations = new AtomicLong(1000);  // number of query operations to perform in total - crank up if\n    int nReadThreads = 5 + random().nextInt(25);\n    final boolean tombstones = random().nextBoolean();\n    final boolean syncCommits = random().nextBoolean();\n\n    verbose(\"commitPercent=\", commitPercent);\n    verbose(\"softCommitPercent=\",softCommitPercent);\n    verbose(\"deletePercent=\",deletePercent);\n    verbose(\"deleteByQueryPercent=\", deleteByQueryPercent);\n    verbose(\"ndocs=\", ndocs);\n    verbose(\"nWriteThreads=\", nWriteThreads);\n    verbose(\"nReadThreads=\", nReadThreads);\n    verbose(\"maxConcurrentCommits=\", maxConcurrentCommits);\n    verbose(\"operations=\", operations);\n    verbose(\"tombstones=\", tombstones);\n    verbose(\"syncCommits=\", syncCommits);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n\n    final FieldType idFt = new FieldType();\n    idFt.setIndexed(true);\n    idFt.setStored(true);\n    idFt.setOmitNorms(true);\n    idFt.setTokenized(false);\n    idFt.setIndexOptions(FieldInfo.IndexOptions.DOCS_ONLY);\n\n    final FieldType ft2 = new FieldType();\n    ft2.setIndexed(false);\n    ft2.setStored(true);\n\n\n    // model how solr does locking - only allow one thread to do a hard commit at once, and only one thread to do a soft commit, but\n    // a hard commit in progress does not stop a soft commit.\n    final Lock hardCommitLock = syncCommits ? new ReentrantLock() : null;\n    final Lock reopenLock = syncCommits ? new ReentrantLock() : null;\n\n\n    // RAMDirectory dir = new RAMDirectory();\n    // final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_40, new WhitespaceAnalyzer(Version.LUCENE_40)));\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    writer.setDoRandomForceMergeAssert(false);\n\n    // writer.commit();\n    // reader = IndexReader.open(dir);\n    // make this reader an NRT reader from the start to avoid the first non-writer openIfChanged\n    // to only opening at the last commit point.\n    reader = DirectoryReader.open(writer.w, true);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,DocInfo> newCommittedModel;\n                  long version;\n                  DirectoryReader oldReader;\n\n                  boolean softCommit = rand.nextInt(100) < softCommitPercent;\n\n                  if (!softCommit) {\n                    // only allow one hard commit to proceed at once\n                    if (hardCommitLock != null) hardCommitLock.lock();\n                    verbose(\"hardCommit start\");\n\n                    writer.commit();\n                  }\n\n                  if (reopenLock != null) reopenLock.lock();\n\n                  synchronized(TestRealTimeGet.this) {\n                    newCommittedModel = new HashMap<Integer,DocInfo>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  if (!softCommit) {\n                    // must commit after taking a snapshot of the model\n                    // writer.commit();\n                  }\n\n                  verbose(\"reopen start using\", oldReader);\n\n                  DirectoryReader newReader;\n                  if (softCommit) {\n                    newReader = DirectoryReader.openIfChanged(oldReader, writer.w, true);\n                  } else {\n                    // will only open to last commit\n                   newReader = DirectoryReader.openIfChanged(oldReader);\n                  }\n\n\n                  if (newReader == null) {\n                    oldReader.incRef();\n                    newReader = oldReader;\n                  }\n                  oldReader.decRef();\n\n                  verbose(\"reopen result\", newReader);\n\n                  synchronized(TestRealTimeGet.this) {\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      reader.decRef();\n                      reader = newReader;\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      }\n\n                    } else {\n                      // close if unused\n                      newReader.decRef();\n                    }\n\n                  }\n\n                  if (reopenLock != null) reopenLock.unlock();\n\n                  if (!softCommit) {\n                    if (hardCommitLock != null) hardCommitLock.unlock();\n                  }\n\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id = rand.nextInt(ndocs);\n              Object sync = syncArr[id];\n\n              // set the lastId before we actually change it sometimes to try and\n              // uncover more race conditions between writing and reading\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              // We can't concurrently update the same document and retain our invariants of increasing values\n              // since we can't guarantee what order the updates will be executed.\n              synchronized (sync) {\n                DocInfo info = model.get(id);\n                long val = info.val;\n                long nextVal = Math.abs(val)+1;\n\n                if (oper < commitPercent + deletePercent) {\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleting id\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                  model.put(id, new DocInfo(0,-nextVal));\n                  verbose(\"deleting id\",id,\"val=\",nextVal,\"DONE\");\n\n                } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                  //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                  model.put(id, new DocInfo(0,-nextVal));\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal,\"DONE\");\n                } else {\n                  // model.put(id, nextVal);   // uncomment this and this test should fail.\n\n                  // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                  Document d = new Document();\n                  d.add(new Field(\"id\",Integer.toString(id), idFt));\n                  d.add(new Field(field, Long.toString(nextVal), ft2));\n                  verbose(\"adding id\",id,\"val=\",nextVal);\n                  writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                  if (tombstones) {\n                    // remove tombstone after new addition (this should be optional?)\n                    verbose(\"deleting tombstone for id\",id);\n                    writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    verbose(\"deleting tombstone for id\",id,\"DONE\");\n                  }\n\n                  model.put(id, new DocInfo(0,nextVal));\n                  verbose(\"adding id\",id,\"val=\",nextVal,\"DONE\");\n                }\n              }\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Exception  ex) {\n            throw new RuntimeException(ex);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              DocInfo info;\n              synchronized(TestRealTimeGet.this) {\n                info = committedModel.get(id);\n              }\n              long val = info.val;\n\n              IndexReader r;\n              synchronized(TestRealTimeGet.this) {\n                r = reader;\n                r.incRef();\n              }\n\n              int docid = getFirstMatch(r, new Term(\"id\",Integer.toString(id)));\n\n              if (docid < 0 && tombstones) {\n                // if we couldn't find the doc, look for it's tombstone\n                docid = getFirstMatch(r, new Term(\"id\",\"-\"+Integer.toString(id)));\n                if (docid < 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  verbose(\"ERROR: Couldn't find a doc  or tombstone for id\", id, \"using reader\",r,\"expected value\",val);\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val);\n                }\n              }\n\n              if (docid < 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                if (docid < 0) {\n                  verbose(\"ERROR: Couldn't find a doc for id\", id, \"using reader\",r);\n                }\n                assertTrue(docid >= 0);   // we should have found the document, or it's tombstone\n                Document doc = r.document(docid);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  verbose(\"ERROR: id\",id,\"model_val=\",val,\" foundVal=\",foundVal,\"reader=\",reader);\n                }\n                assertTrue(foundVal >= Math.abs(val));\n              }\n\n              r.decRef();\n            }\n          }\n          catch (Throwable e) {\n            operations.set(-1L);\n            SolrException.log(log,e);\n            fail(e.toString());\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStressLuceneNRT() throws Exception {\n    final int commitPercent = 5 + random.nextInt(20);\n    final int softCommitPercent = 30+random.nextInt(75); // what percent of the commits are soft\n    final int deletePercent = 4+random.nextInt(25);\n    final int deleteByQueryPercent = 1+random.nextInt(5);\n    final int ndocs = 5 + (random.nextBoolean() ? random.nextInt(25) : random.nextInt(200));\n    int nWriteThreads = 5 + random.nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;   // number of committers at a time... it should be <= maxWarmingSearchers\n\n    final AtomicLong operations = new AtomicLong(1000);  // number of query operations to perform in total - crank up if\n    int nReadThreads = 5 + random.nextInt(25);\n    final boolean tombstones = random.nextBoolean();\n    final boolean syncCommits = random.nextBoolean();\n\n    verbose(\"commitPercent=\", commitPercent);\n    verbose(\"softCommitPercent=\",softCommitPercent);\n    verbose(\"deletePercent=\",deletePercent);\n    verbose(\"deleteByQueryPercent=\", deleteByQueryPercent);\n    verbose(\"ndocs=\", ndocs);\n    verbose(\"nWriteThreads=\", nWriteThreads);\n    verbose(\"nReadThreads=\", nReadThreads);\n    verbose(\"maxConcurrentCommits=\", maxConcurrentCommits);\n    verbose(\"operations=\", operations);\n    verbose(\"tombstones=\", tombstones);\n    verbose(\"syncCommits=\", syncCommits);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n\n    final FieldType idFt = new FieldType();\n    idFt.setIndexed(true);\n    idFt.setStored(true);\n    idFt.setOmitNorms(true);\n    idFt.setTokenized(false);\n    idFt.setIndexOptions(FieldInfo.IndexOptions.DOCS_ONLY);\n\n    final FieldType ft2 = new FieldType();\n    ft2.setIndexed(false);\n    ft2.setStored(true);\n\n\n    // model how solr does locking - only allow one thread to do a hard commit at once, and only one thread to do a soft commit, but\n    // a hard commit in progress does not stop a soft commit.\n    final Lock hardCommitLock = syncCommits ? new ReentrantLock() : null;\n    final Lock reopenLock = syncCommits ? new ReentrantLock() : null;\n\n\n    // RAMDirectory dir = new RAMDirectory();\n    // final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_40, new WhitespaceAnalyzer(Version.LUCENE_40)));\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setDoRandomForceMergeAssert(false);\n\n    // writer.commit();\n    // reader = IndexReader.open(dir);\n    // make this reader an NRT reader from the start to avoid the first non-writer openIfChanged\n    // to only opening at the last commit point.\n    reader = DirectoryReader.open(writer.w, true);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,DocInfo> newCommittedModel;\n                  long version;\n                  DirectoryReader oldReader;\n\n                  boolean softCommit = rand.nextInt(100) < softCommitPercent;\n\n                  if (!softCommit) {\n                    // only allow one hard commit to proceed at once\n                    if (hardCommitLock != null) hardCommitLock.lock();\n                    verbose(\"hardCommit start\");\n\n                    writer.commit();\n                  }\n\n                  if (reopenLock != null) reopenLock.lock();\n\n                  synchronized(TestRealTimeGet.this) {\n                    newCommittedModel = new HashMap<Integer,DocInfo>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  if (!softCommit) {\n                    // must commit after taking a snapshot of the model\n                    // writer.commit();\n                  }\n\n                  verbose(\"reopen start using\", oldReader);\n\n                  DirectoryReader newReader;\n                  if (softCommit) {\n                    newReader = DirectoryReader.openIfChanged(oldReader, writer.w, true);\n                  } else {\n                    // will only open to last commit\n                   newReader = DirectoryReader.openIfChanged(oldReader);\n                  }\n\n\n                  if (newReader == null) {\n                    oldReader.incRef();\n                    newReader = oldReader;\n                  }\n                  oldReader.decRef();\n\n                  verbose(\"reopen result\", newReader);\n\n                  synchronized(TestRealTimeGet.this) {\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      reader.decRef();\n                      reader = newReader;\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      }\n\n                    } else {\n                      // close if unused\n                      newReader.decRef();\n                    }\n\n                  }\n\n                  if (reopenLock != null) reopenLock.unlock();\n\n                  if (!softCommit) {\n                    if (hardCommitLock != null) hardCommitLock.unlock();\n                  }\n\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id = rand.nextInt(ndocs);\n              Object sync = syncArr[id];\n\n              // set the lastId before we actually change it sometimes to try and\n              // uncover more race conditions between writing and reading\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              // We can't concurrently update the same document and retain our invariants of increasing values\n              // since we can't guarantee what order the updates will be executed.\n              synchronized (sync) {\n                DocInfo info = model.get(id);\n                long val = info.val;\n                long nextVal = Math.abs(val)+1;\n\n                if (oper < commitPercent + deletePercent) {\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleting id\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                  model.put(id, new DocInfo(0,-nextVal));\n                  verbose(\"deleting id\",id,\"val=\",nextVal,\"DONE\");\n\n                } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                  //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                  model.put(id, new DocInfo(0,-nextVal));\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal,\"DONE\");\n                } else {\n                  // model.put(id, nextVal);   // uncomment this and this test should fail.\n\n                  // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                  Document d = new Document();\n                  d.add(new Field(\"id\",Integer.toString(id), idFt));\n                  d.add(new Field(field, Long.toString(nextVal), ft2));\n                  verbose(\"adding id\",id,\"val=\",nextVal);\n                  writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                  if (tombstones) {\n                    // remove tombstone after new addition (this should be optional?)\n                    verbose(\"deleting tombstone for id\",id);\n                    writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    verbose(\"deleting tombstone for id\",id,\"DONE\");\n                  }\n\n                  model.put(id, new DocInfo(0,nextVal));\n                  verbose(\"adding id\",id,\"val=\",nextVal,\"DONE\");\n                }\n              }\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Exception  ex) {\n            throw new RuntimeException(ex);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              DocInfo info;\n              synchronized(TestRealTimeGet.this) {\n                info = committedModel.get(id);\n              }\n              long val = info.val;\n\n              IndexReader r;\n              synchronized(TestRealTimeGet.this) {\n                r = reader;\n                r.incRef();\n              }\n\n              int docid = getFirstMatch(r, new Term(\"id\",Integer.toString(id)));\n\n              if (docid < 0 && tombstones) {\n                // if we couldn't find the doc, look for it's tombstone\n                docid = getFirstMatch(r, new Term(\"id\",\"-\"+Integer.toString(id)));\n                if (docid < 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  verbose(\"ERROR: Couldn't find a doc  or tombstone for id\", id, \"using reader\",r,\"expected value\",val);\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val);\n                }\n              }\n\n              if (docid < 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                if (docid < 0) {\n                  verbose(\"ERROR: Couldn't find a doc for id\", id, \"using reader\",r);\n                }\n                assertTrue(docid >= 0);   // we should have found the document, or it's tombstone\n                Document doc = r.document(docid);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  verbose(\"ERROR: id\",id,\"model_val=\",val,\" foundVal=\",foundVal,\"reader=\",reader);\n                }\n                assertTrue(foundVal >= Math.abs(val));\n              }\n\n              r.decRef();\n            }\n          }\n          catch (Throwable e) {\n            operations.set(-1L);\n            SolrException.log(log,e);\n            fail(e.toString());\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1bea3922196318026c4274f2013416acb60c691e","date":1336496433,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testStressLuceneNRT().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testStressLuceneNRT().mjava","sourceNew":"  @Test\n  public void testStressLuceneNRT() throws Exception {\n    final int commitPercent = 5 + random().nextInt(20);\n    final int softCommitPercent = 30+random().nextInt(75); // what percent of the commits are soft\n    final int deletePercent = 4+random().nextInt(25);\n    final int deleteByQueryPercent = 1+random().nextInt(5);\n    final int ndocs = 5 + (random().nextBoolean() ? random().nextInt(25) : random().nextInt(200));\n    int nWriteThreads = 5 + random().nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;   // number of committers at a time... it should be <= maxWarmingSearchers\n\n    final AtomicLong operations = new AtomicLong(1000);  // number of query operations to perform in total - crank up if\n    int nReadThreads = 5 + random().nextInt(25);\n    final boolean tombstones = random().nextBoolean();\n    final boolean syncCommits = random().nextBoolean();\n\n    verbose(\"commitPercent=\", commitPercent);\n    verbose(\"softCommitPercent=\",softCommitPercent);\n    verbose(\"deletePercent=\",deletePercent);\n    verbose(\"deleteByQueryPercent=\", deleteByQueryPercent);\n    verbose(\"ndocs=\", ndocs);\n    verbose(\"nWriteThreads=\", nWriteThreads);\n    verbose(\"nReadThreads=\", nReadThreads);\n    verbose(\"maxConcurrentCommits=\", maxConcurrentCommits);\n    verbose(\"operations=\", operations);\n    verbose(\"tombstones=\", tombstones);\n    verbose(\"syncCommits=\", syncCommits);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n\n    final FieldType idFt = new FieldType();\n    idFt.setIndexed(true);\n    idFt.setStored(true);\n    idFt.setOmitNorms(true);\n    idFt.setTokenized(false);\n    idFt.setIndexOptions(FieldInfo.IndexOptions.DOCS_ONLY);\n\n    final FieldType ft2 = new FieldType();\n    ft2.setIndexed(false);\n    ft2.setStored(true);\n\n\n    // model how solr does locking - only allow one thread to do a hard commit at once, and only one thread to do a soft commit, but\n    // a hard commit in progress does not stop a soft commit.\n    final Lock hardCommitLock = syncCommits ? new ReentrantLock() : null;\n    final Lock reopenLock = syncCommits ? new ReentrantLock() : null;\n\n\n    // RAMDirectory dir = new RAMDirectory();\n    // final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_40, new WhitespaceAnalyzer(Version.LUCENE_40)));\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    writer.setDoRandomForceMergeAssert(false);\n\n    // writer.commit();\n    // reader = IndexReader.open(dir);\n    // make this reader an NRT reader from the start to avoid the first non-writer openIfChanged\n    // to only opening at the last commit point.\n    reader = DirectoryReader.open(writer.w, true);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,DocInfo> newCommittedModel;\n                  long version;\n                  DirectoryReader oldReader;\n\n                  boolean softCommit = rand.nextInt(100) < softCommitPercent;\n\n                  if (!softCommit) {\n                    // only allow one hard commit to proceed at once\n                    if (hardCommitLock != null) hardCommitLock.lock();\n                    verbose(\"hardCommit start\");\n\n                    writer.commit();\n                  }\n\n                  if (reopenLock != null) reopenLock.lock();\n\n                  synchronized(TestRealTimeGet.this) {\n                    newCommittedModel = new HashMap<Integer,DocInfo>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  if (!softCommit) {\n                    // must commit after taking a snapshot of the model\n                    // writer.commit();\n                  }\n\n                  verbose(\"reopen start using\", oldReader);\n\n                  DirectoryReader newReader;\n                  if (softCommit) {\n                    newReader = DirectoryReader.openIfChanged(oldReader, writer.w, true);\n                  } else {\n                    // will only open to last commit\n                   newReader = DirectoryReader.openIfChanged(oldReader);\n                  }\n\n\n                  if (newReader == null) {\n                    oldReader.incRef();\n                    newReader = oldReader;\n                  }\n                  oldReader.decRef();\n\n                  verbose(\"reopen result\", newReader);\n\n                  synchronized(TestRealTimeGet.this) {\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      reader.decRef();\n                      reader = newReader;\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      }\n\n                    } else {\n                      // close if unused\n                      newReader.decRef();\n                    }\n\n                  }\n\n                  if (reopenLock != null) reopenLock.unlock();\n\n                  if (!softCommit) {\n                    if (hardCommitLock != null) hardCommitLock.unlock();\n                  }\n\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id = rand.nextInt(ndocs);\n              Object sync = syncArr[id];\n\n              // set the lastId before we actually change it sometimes to try and\n              // uncover more race conditions between writing and reading\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              // We can't concurrently update the same document and retain our invariants of increasing values\n              // since we can't guarantee what order the updates will be executed.\n              synchronized (sync) {\n                DocInfo info = model.get(id);\n                long val = info.val;\n                long nextVal = Math.abs(val)+1;\n\n                if (oper < commitPercent + deletePercent) {\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleting id\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                  model.put(id, new DocInfo(0,-nextVal));\n                  verbose(\"deleting id\",id,\"val=\",nextVal,\"DONE\");\n\n                } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                  //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                  model.put(id, new DocInfo(0,-nextVal));\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal,\"DONE\");\n                } else {\n                  // model.put(id, nextVal);   // uncomment this and this test should fail.\n\n                  // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                  Document d = new Document();\n                  d.add(new Field(\"id\",Integer.toString(id), idFt));\n                  d.add(new Field(field, Long.toString(nextVal), ft2));\n                  verbose(\"adding id\",id,\"val=\",nextVal);\n                  writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                  if (tombstones) {\n                    // remove tombstone after new addition (this should be optional?)\n                    verbose(\"deleting tombstone for id\",id);\n                    writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    verbose(\"deleting tombstone for id\",id,\"DONE\");\n                  }\n\n                  model.put(id, new DocInfo(0,nextVal));\n                  verbose(\"adding id\",id,\"val=\",nextVal,\"DONE\");\n                }\n              }\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Exception  ex) {\n            throw new RuntimeException(ex);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              DocInfo info;\n              synchronized(TestRealTimeGet.this) {\n                info = committedModel.get(id);\n              }\n              long val = info.val;\n\n              IndexReader r;\n              synchronized(TestRealTimeGet.this) {\n                r = reader;\n                r.incRef();\n              }\n\n              int docid = getFirstMatch(r, new Term(\"id\",Integer.toString(id)));\n\n              if (docid < 0 && tombstones) {\n                // if we couldn't find the doc, look for it's tombstone\n                docid = getFirstMatch(r, new Term(\"id\",\"-\"+Integer.toString(id)));\n                if (docid < 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  verbose(\"ERROR: Couldn't find a doc  or tombstone for id\", id, \"using reader\",r,\"expected value\",val);\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val);\n                }\n              }\n\n              if (docid < 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                if (docid < 0) {\n                  verbose(\"ERROR: Couldn't find a doc for id\", id, \"using reader\",r);\n                }\n                assertTrue(docid >= 0);   // we should have found the document, or it's tombstone\n                Document doc = r.document(docid);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  verbose(\"ERROR: id\",id,\"model_val=\",val,\" foundVal=\",foundVal,\"reader=\",reader);\n                }\n                assertTrue(foundVal >= Math.abs(val));\n              }\n\n              r.decRef();\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStressLuceneNRT() throws Exception {\n    final int commitPercent = 5 + random().nextInt(20);\n    final int softCommitPercent = 30+random().nextInt(75); // what percent of the commits are soft\n    final int deletePercent = 4+random().nextInt(25);\n    final int deleteByQueryPercent = 1+random().nextInt(5);\n    final int ndocs = 5 + (random().nextBoolean() ? random().nextInt(25) : random().nextInt(200));\n    int nWriteThreads = 5 + random().nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;   // number of committers at a time... it should be <= maxWarmingSearchers\n\n    final AtomicLong operations = new AtomicLong(1000);  // number of query operations to perform in total - crank up if\n    int nReadThreads = 5 + random().nextInt(25);\n    final boolean tombstones = random().nextBoolean();\n    final boolean syncCommits = random().nextBoolean();\n\n    verbose(\"commitPercent=\", commitPercent);\n    verbose(\"softCommitPercent=\",softCommitPercent);\n    verbose(\"deletePercent=\",deletePercent);\n    verbose(\"deleteByQueryPercent=\", deleteByQueryPercent);\n    verbose(\"ndocs=\", ndocs);\n    verbose(\"nWriteThreads=\", nWriteThreads);\n    verbose(\"nReadThreads=\", nReadThreads);\n    verbose(\"maxConcurrentCommits=\", maxConcurrentCommits);\n    verbose(\"operations=\", operations);\n    verbose(\"tombstones=\", tombstones);\n    verbose(\"syncCommits=\", syncCommits);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n\n    final FieldType idFt = new FieldType();\n    idFt.setIndexed(true);\n    idFt.setStored(true);\n    idFt.setOmitNorms(true);\n    idFt.setTokenized(false);\n    idFt.setIndexOptions(FieldInfo.IndexOptions.DOCS_ONLY);\n\n    final FieldType ft2 = new FieldType();\n    ft2.setIndexed(false);\n    ft2.setStored(true);\n\n\n    // model how solr does locking - only allow one thread to do a hard commit at once, and only one thread to do a soft commit, but\n    // a hard commit in progress does not stop a soft commit.\n    final Lock hardCommitLock = syncCommits ? new ReentrantLock() : null;\n    final Lock reopenLock = syncCommits ? new ReentrantLock() : null;\n\n\n    // RAMDirectory dir = new RAMDirectory();\n    // final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_40, new WhitespaceAnalyzer(Version.LUCENE_40)));\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    writer.setDoRandomForceMergeAssert(false);\n\n    // writer.commit();\n    // reader = IndexReader.open(dir);\n    // make this reader an NRT reader from the start to avoid the first non-writer openIfChanged\n    // to only opening at the last commit point.\n    reader = DirectoryReader.open(writer.w, true);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,DocInfo> newCommittedModel;\n                  long version;\n                  DirectoryReader oldReader;\n\n                  boolean softCommit = rand.nextInt(100) < softCommitPercent;\n\n                  if (!softCommit) {\n                    // only allow one hard commit to proceed at once\n                    if (hardCommitLock != null) hardCommitLock.lock();\n                    verbose(\"hardCommit start\");\n\n                    writer.commit();\n                  }\n\n                  if (reopenLock != null) reopenLock.lock();\n\n                  synchronized(TestRealTimeGet.this) {\n                    newCommittedModel = new HashMap<Integer,DocInfo>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  if (!softCommit) {\n                    // must commit after taking a snapshot of the model\n                    // writer.commit();\n                  }\n\n                  verbose(\"reopen start using\", oldReader);\n\n                  DirectoryReader newReader;\n                  if (softCommit) {\n                    newReader = DirectoryReader.openIfChanged(oldReader, writer.w, true);\n                  } else {\n                    // will only open to last commit\n                   newReader = DirectoryReader.openIfChanged(oldReader);\n                  }\n\n\n                  if (newReader == null) {\n                    oldReader.incRef();\n                    newReader = oldReader;\n                  }\n                  oldReader.decRef();\n\n                  verbose(\"reopen result\", newReader);\n\n                  synchronized(TestRealTimeGet.this) {\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      reader.decRef();\n                      reader = newReader;\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      }\n\n                    } else {\n                      // close if unused\n                      newReader.decRef();\n                    }\n\n                  }\n\n                  if (reopenLock != null) reopenLock.unlock();\n\n                  if (!softCommit) {\n                    if (hardCommitLock != null) hardCommitLock.unlock();\n                  }\n\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id = rand.nextInt(ndocs);\n              Object sync = syncArr[id];\n\n              // set the lastId before we actually change it sometimes to try and\n              // uncover more race conditions between writing and reading\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              // We can't concurrently update the same document and retain our invariants of increasing values\n              // since we can't guarantee what order the updates will be executed.\n              synchronized (sync) {\n                DocInfo info = model.get(id);\n                long val = info.val;\n                long nextVal = Math.abs(val)+1;\n\n                if (oper < commitPercent + deletePercent) {\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleting id\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                  model.put(id, new DocInfo(0,-nextVal));\n                  verbose(\"deleting id\",id,\"val=\",nextVal,\"DONE\");\n\n                } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                  //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                  model.put(id, new DocInfo(0,-nextVal));\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal,\"DONE\");\n                } else {\n                  // model.put(id, nextVal);   // uncomment this and this test should fail.\n\n                  // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                  Document d = new Document();\n                  d.add(new Field(\"id\",Integer.toString(id), idFt));\n                  d.add(new Field(field, Long.toString(nextVal), ft2));\n                  verbose(\"adding id\",id,\"val=\",nextVal);\n                  writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                  if (tombstones) {\n                    // remove tombstone after new addition (this should be optional?)\n                    verbose(\"deleting tombstone for id\",id);\n                    writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    verbose(\"deleting tombstone for id\",id,\"DONE\");\n                  }\n\n                  model.put(id, new DocInfo(0,nextVal));\n                  verbose(\"adding id\",id,\"val=\",nextVal,\"DONE\");\n                }\n              }\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Exception  ex) {\n            throw new RuntimeException(ex);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              DocInfo info;\n              synchronized(TestRealTimeGet.this) {\n                info = committedModel.get(id);\n              }\n              long val = info.val;\n\n              IndexReader r;\n              synchronized(TestRealTimeGet.this) {\n                r = reader;\n                r.incRef();\n              }\n\n              int docid = getFirstMatch(r, new Term(\"id\",Integer.toString(id)));\n\n              if (docid < 0 && tombstones) {\n                // if we couldn't find the doc, look for it's tombstone\n                docid = getFirstMatch(r, new Term(\"id\",\"-\"+Integer.toString(id)));\n                if (docid < 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  verbose(\"ERROR: Couldn't find a doc  or tombstone for id\", id, \"using reader\",r,\"expected value\",val);\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val);\n                }\n              }\n\n              if (docid < 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                if (docid < 0) {\n                  verbose(\"ERROR: Couldn't find a doc for id\", id, \"using reader\",r);\n                }\n                assertTrue(docid >= 0);   // we should have found the document, or it's tombstone\n                Document doc = r.document(docid);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  verbose(\"ERROR: id\",id,\"model_val=\",val,\" foundVal=\",foundVal,\"reader=\",reader);\n                }\n                assertTrue(foundVal >= Math.abs(val));\n              }\n\n              r.decRef();\n            }\n          }\n          catch (Throwable e) {\n            operations.set(-1L);\n            SolrException.log(log,e);\n            fail(e.toString());\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2b2e7536fb06d1abad6c7543a0657bdad5242c5e","date":1341417762,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestStressLucene#testStressLuceneNRT().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testStressLuceneNRT().mjava","sourceNew":"  @Test\n  public void testStressLuceneNRT() throws Exception {\n    final int commitPercent = 5 + random().nextInt(20);\n    final int softCommitPercent = 30+random().nextInt(75); // what percent of the commits are soft\n    final int deletePercent = 4+random().nextInt(25);\n    final int deleteByQueryPercent = 1+random().nextInt(5);\n    final int ndocs = 5 + (random().nextBoolean() ? random().nextInt(25) : random().nextInt(200));\n    int nWriteThreads = 5 + random().nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;   // number of committers at a time... it should be <= maxWarmingSearchers\n\n    final AtomicLong operations = new AtomicLong(100000);  // number of query operations to perform in total\n    int nReadThreads = 5 + random().nextInt(25);\n    final boolean tombstones = random().nextBoolean();\n    final boolean syncCommits = random().nextBoolean();\n\n    verbose(\"commitPercent=\", commitPercent);\n    verbose(\"softCommitPercent=\",softCommitPercent);\n    verbose(\"deletePercent=\",deletePercent);\n    verbose(\"deleteByQueryPercent=\", deleteByQueryPercent);\n    verbose(\"ndocs=\", ndocs);\n    verbose(\"nWriteThreads=\", nWriteThreads);\n    verbose(\"nReadThreads=\", nReadThreads);\n    verbose(\"maxConcurrentCommits=\", maxConcurrentCommits);\n    verbose(\"operations=\", operations);\n    verbose(\"tombstones=\", tombstones);\n    verbose(\"syncCommits=\", syncCommits);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n\n    final FieldType idFt = new FieldType();\n    idFt.setIndexed(true);\n    idFt.setStored(true);\n    idFt.setOmitNorms(true);\n    idFt.setTokenized(false);\n    idFt.setIndexOptions(FieldInfo.IndexOptions.DOCS_ONLY);\n\n    final FieldType ft2 = new FieldType();\n    ft2.setIndexed(false);\n    ft2.setStored(true);\n\n\n    // model how solr does locking - only allow one thread to do a hard commit at once, and only one thread to do a soft commit, but\n    // a hard commit in progress does not stop a soft commit.\n    final Lock hardCommitLock = syncCommits ? new ReentrantLock() : null;\n    final Lock reopenLock = syncCommits ? new ReentrantLock() : null;\n\n\n    // RAMDirectory dir = new RAMDirectory();\n    // final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_40, new WhitespaceAnalyzer(Version.LUCENE_40)));\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    writer.setDoRandomForceMergeAssert(false);\n\n    // writer.commit();\n    // reader = IndexReader.open(dir);\n    // make this reader an NRT reader from the start to avoid the first non-writer openIfChanged\n    // to only opening at the last commit point.\n    reader = DirectoryReader.open(writer.w, true);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,DocInfo> newCommittedModel;\n                  long version;\n                  DirectoryReader oldReader;\n\n                  boolean softCommit = rand.nextInt(100) < softCommitPercent;\n\n                  if (!softCommit) {\n                    // only allow one hard commit to proceed at once\n                    if (hardCommitLock != null) hardCommitLock.lock();\n                    verbose(\"hardCommit start\");\n\n                    writer.commit();\n                  }\n\n                  if (reopenLock != null) reopenLock.lock();\n\n                  synchronized(globalLock) {\n                    newCommittedModel = new HashMap<Integer,DocInfo>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  if (!softCommit) {\n                    // must commit after taking a snapshot of the model\n                    // writer.commit();\n                  }\n\n                  verbose(\"reopen start using\", oldReader);\n\n                  DirectoryReader newReader;\n                  if (softCommit) {\n                    newReader = DirectoryReader.openIfChanged(oldReader, writer.w, true);\n                  } else {\n                    // will only open to last commit\n                    newReader = DirectoryReader.openIfChanged(oldReader);\n                  }\n\n\n                  if (newReader == null) {\n                    oldReader.incRef();\n                    newReader = oldReader;\n                  }\n                  oldReader.decRef();\n\n                  verbose(\"reopen result\", newReader);\n\n                  synchronized(globalLock) {\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      reader.decRef();\n                      reader = newReader;\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      }\n\n                    } else {\n                      // close if unused\n                      newReader.decRef();\n                    }\n\n                  }\n\n                  if (reopenLock != null) reopenLock.unlock();\n\n                  if (!softCommit) {\n                    if (hardCommitLock != null) hardCommitLock.unlock();\n                  }\n\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id = rand.nextInt(ndocs);\n              Object sync = syncArr[id];\n\n              // set the lastId before we actually change it sometimes to try and\n              // uncover more race conditions between writing and reading\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              // We can't concurrently update the same document and retain our invariants of increasing values\n              // since we can't guarantee what order the updates will be executed.\n              synchronized (sync) {\n                DocInfo info = model.get(id);\n                long val = info.val;\n                long nextVal = Math.abs(val)+1;\n\n                if (oper < commitPercent + deletePercent) {\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleting id\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                  model.put(id, new DocInfo(0,-nextVal));\n                  verbose(\"deleting id\",id,\"val=\",nextVal,\"DONE\");\n\n                } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                  //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                  model.put(id, new DocInfo(0,-nextVal));\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal,\"DONE\");\n                } else {\n                  // model.put(id, nextVal);   // uncomment this and this test should fail.\n\n                  // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                  Document d = new Document();\n                  d.add(new Field(\"id\",Integer.toString(id), idFt));\n                  d.add(new Field(field, Long.toString(nextVal), ft2));\n                  verbose(\"adding id\",id,\"val=\",nextVal);\n                  writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                  if (tombstones) {\n                    // remove tombstone after new addition (this should be optional?)\n                    verbose(\"deleting tombstone for id\",id);\n                    writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    verbose(\"deleting tombstone for id\",id,\"DONE\");\n                  }\n\n                  model.put(id, new DocInfo(0,nextVal));\n                  verbose(\"adding id\",id,\"val=\",nextVal,\"DONE\");\n                }\n              }\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Exception  ex) {\n            throw new RuntimeException(ex);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              DocInfo info;\n              synchronized(globalLock) {\n                info = committedModel.get(id);\n              }\n              long val = info.val;\n\n              IndexReader r;\n              synchronized(globalLock) {\n                r = reader;\n                r.incRef();\n              }\n\n              int docid = getFirstMatch(r, new Term(\"id\",Integer.toString(id)));\n\n              if (docid < 0 && tombstones) {\n                // if we couldn't find the doc, look for it's tombstone\n                docid = getFirstMatch(r, new Term(\"id\",\"-\"+Integer.toString(id)));\n                if (docid < 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  verbose(\"ERROR: Couldn't find a doc  or tombstone for id\", id, \"using reader\",r,\"expected value\",val);\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val);\n                }\n              }\n\n              if (docid < 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                if (docid < 0) {\n                  verbose(\"ERROR: Couldn't find a doc for id\", id, \"using reader\",r);\n                }\n                assertTrue(docid >= 0);   // we should have found the document, or it's tombstone\n                Document doc = r.document(docid);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  verbose(\"ERROR: id\",id,\"model_val=\",val,\" foundVal=\",foundVal,\"reader=\",reader);\n                }\n                assertTrue(foundVal >= Math.abs(val));\n              }\n\n              r.decRef();\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStressLuceneNRT() throws Exception {\n    final int commitPercent = 5 + random().nextInt(20);\n    final int softCommitPercent = 30+random().nextInt(75); // what percent of the commits are soft\n    final int deletePercent = 4+random().nextInt(25);\n    final int deleteByQueryPercent = 1+random().nextInt(5);\n    final int ndocs = 5 + (random().nextBoolean() ? random().nextInt(25) : random().nextInt(200));\n    int nWriteThreads = 5 + random().nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;   // number of committers at a time... it should be <= maxWarmingSearchers\n\n    final AtomicLong operations = new AtomicLong(1000);  // number of query operations to perform in total - crank up if\n    int nReadThreads = 5 + random().nextInt(25);\n    final boolean tombstones = random().nextBoolean();\n    final boolean syncCommits = random().nextBoolean();\n\n    verbose(\"commitPercent=\", commitPercent);\n    verbose(\"softCommitPercent=\",softCommitPercent);\n    verbose(\"deletePercent=\",deletePercent);\n    verbose(\"deleteByQueryPercent=\", deleteByQueryPercent);\n    verbose(\"ndocs=\", ndocs);\n    verbose(\"nWriteThreads=\", nWriteThreads);\n    verbose(\"nReadThreads=\", nReadThreads);\n    verbose(\"maxConcurrentCommits=\", maxConcurrentCommits);\n    verbose(\"operations=\", operations);\n    verbose(\"tombstones=\", tombstones);\n    verbose(\"syncCommits=\", syncCommits);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n\n    final FieldType idFt = new FieldType();\n    idFt.setIndexed(true);\n    idFt.setStored(true);\n    idFt.setOmitNorms(true);\n    idFt.setTokenized(false);\n    idFt.setIndexOptions(FieldInfo.IndexOptions.DOCS_ONLY);\n\n    final FieldType ft2 = new FieldType();\n    ft2.setIndexed(false);\n    ft2.setStored(true);\n\n\n    // model how solr does locking - only allow one thread to do a hard commit at once, and only one thread to do a soft commit, but\n    // a hard commit in progress does not stop a soft commit.\n    final Lock hardCommitLock = syncCommits ? new ReentrantLock() : null;\n    final Lock reopenLock = syncCommits ? new ReentrantLock() : null;\n\n\n    // RAMDirectory dir = new RAMDirectory();\n    // final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_40, new WhitespaceAnalyzer(Version.LUCENE_40)));\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    writer.setDoRandomForceMergeAssert(false);\n\n    // writer.commit();\n    // reader = IndexReader.open(dir);\n    // make this reader an NRT reader from the start to avoid the first non-writer openIfChanged\n    // to only opening at the last commit point.\n    reader = DirectoryReader.open(writer.w, true);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,DocInfo> newCommittedModel;\n                  long version;\n                  DirectoryReader oldReader;\n\n                  boolean softCommit = rand.nextInt(100) < softCommitPercent;\n\n                  if (!softCommit) {\n                    // only allow one hard commit to proceed at once\n                    if (hardCommitLock != null) hardCommitLock.lock();\n                    verbose(\"hardCommit start\");\n\n                    writer.commit();\n                  }\n\n                  if (reopenLock != null) reopenLock.lock();\n\n                  synchronized(TestRealTimeGet.this) {\n                    newCommittedModel = new HashMap<Integer,DocInfo>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  if (!softCommit) {\n                    // must commit after taking a snapshot of the model\n                    // writer.commit();\n                  }\n\n                  verbose(\"reopen start using\", oldReader);\n\n                  DirectoryReader newReader;\n                  if (softCommit) {\n                    newReader = DirectoryReader.openIfChanged(oldReader, writer.w, true);\n                  } else {\n                    // will only open to last commit\n                   newReader = DirectoryReader.openIfChanged(oldReader);\n                  }\n\n\n                  if (newReader == null) {\n                    oldReader.incRef();\n                    newReader = oldReader;\n                  }\n                  oldReader.decRef();\n\n                  verbose(\"reopen result\", newReader);\n\n                  synchronized(TestRealTimeGet.this) {\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      reader.decRef();\n                      reader = newReader;\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      }\n\n                    } else {\n                      // close if unused\n                      newReader.decRef();\n                    }\n\n                  }\n\n                  if (reopenLock != null) reopenLock.unlock();\n\n                  if (!softCommit) {\n                    if (hardCommitLock != null) hardCommitLock.unlock();\n                  }\n\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id = rand.nextInt(ndocs);\n              Object sync = syncArr[id];\n\n              // set the lastId before we actually change it sometimes to try and\n              // uncover more race conditions between writing and reading\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              // We can't concurrently update the same document and retain our invariants of increasing values\n              // since we can't guarantee what order the updates will be executed.\n              synchronized (sync) {\n                DocInfo info = model.get(id);\n                long val = info.val;\n                long nextVal = Math.abs(val)+1;\n\n                if (oper < commitPercent + deletePercent) {\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleting id\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                  model.put(id, new DocInfo(0,-nextVal));\n                  verbose(\"deleting id\",id,\"val=\",nextVal,\"DONE\");\n\n                } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                  //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                  model.put(id, new DocInfo(0,-nextVal));\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal,\"DONE\");\n                } else {\n                  // model.put(id, nextVal);   // uncomment this and this test should fail.\n\n                  // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                  Document d = new Document();\n                  d.add(new Field(\"id\",Integer.toString(id), idFt));\n                  d.add(new Field(field, Long.toString(nextVal), ft2));\n                  verbose(\"adding id\",id,\"val=\",nextVal);\n                  writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                  if (tombstones) {\n                    // remove tombstone after new addition (this should be optional?)\n                    verbose(\"deleting tombstone for id\",id);\n                    writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    verbose(\"deleting tombstone for id\",id,\"DONE\");\n                  }\n\n                  model.put(id, new DocInfo(0,nextVal));\n                  verbose(\"adding id\",id,\"val=\",nextVal,\"DONE\");\n                }\n              }\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Exception  ex) {\n            throw new RuntimeException(ex);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              DocInfo info;\n              synchronized(TestRealTimeGet.this) {\n                info = committedModel.get(id);\n              }\n              long val = info.val;\n\n              IndexReader r;\n              synchronized(TestRealTimeGet.this) {\n                r = reader;\n                r.incRef();\n              }\n\n              int docid = getFirstMatch(r, new Term(\"id\",Integer.toString(id)));\n\n              if (docid < 0 && tombstones) {\n                // if we couldn't find the doc, look for it's tombstone\n                docid = getFirstMatch(r, new Term(\"id\",\"-\"+Integer.toString(id)));\n                if (docid < 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  verbose(\"ERROR: Couldn't find a doc  or tombstone for id\", id, \"using reader\",r,\"expected value\",val);\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val);\n                }\n              }\n\n              if (docid < 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                if (docid < 0) {\n                  verbose(\"ERROR: Couldn't find a doc for id\", id, \"using reader\",r);\n                }\n                assertTrue(docid >= 0);   // we should have found the document, or it's tombstone\n                Document doc = r.document(docid);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  verbose(\"ERROR: id\",id,\"model_val=\",val,\" foundVal=\",foundVal,\"reader=\",reader);\n                }\n                assertTrue(foundVal >= Math.abs(val));\n              }\n\n              r.decRef();\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testStressLuceneNRT().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testStressLuceneNRT() throws Exception {\n    final int commitPercent = 5 + random().nextInt(20);\n    final int softCommitPercent = 30+random().nextInt(75); // what percent of the commits are soft\n    final int deletePercent = 4+random().nextInt(25);\n    final int deleteByQueryPercent = 1+random().nextInt(5);\n    final int ndocs = 5 + (random().nextBoolean() ? random().nextInt(25) : random().nextInt(200));\n    int nWriteThreads = 5 + random().nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;   // number of committers at a time... it should be <= maxWarmingSearchers\n\n    final AtomicLong operations = new AtomicLong(1000);  // number of query operations to perform in total - crank up if\n    int nReadThreads = 5 + random().nextInt(25);\n    final boolean tombstones = random().nextBoolean();\n    final boolean syncCommits = random().nextBoolean();\n\n    verbose(\"commitPercent=\", commitPercent);\n    verbose(\"softCommitPercent=\",softCommitPercent);\n    verbose(\"deletePercent=\",deletePercent);\n    verbose(\"deleteByQueryPercent=\", deleteByQueryPercent);\n    verbose(\"ndocs=\", ndocs);\n    verbose(\"nWriteThreads=\", nWriteThreads);\n    verbose(\"nReadThreads=\", nReadThreads);\n    verbose(\"maxConcurrentCommits=\", maxConcurrentCommits);\n    verbose(\"operations=\", operations);\n    verbose(\"tombstones=\", tombstones);\n    verbose(\"syncCommits=\", syncCommits);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n\n    final FieldType idFt = new FieldType();\n    idFt.setIndexed(true);\n    idFt.setStored(true);\n    idFt.setOmitNorms(true);\n    idFt.setTokenized(false);\n    idFt.setIndexOptions(FieldInfo.IndexOptions.DOCS_ONLY);\n\n    final FieldType ft2 = new FieldType();\n    ft2.setIndexed(false);\n    ft2.setStored(true);\n\n\n    // model how solr does locking - only allow one thread to do a hard commit at once, and only one thread to do a soft commit, but\n    // a hard commit in progress does not stop a soft commit.\n    final Lock hardCommitLock = syncCommits ? new ReentrantLock() : null;\n    final Lock reopenLock = syncCommits ? new ReentrantLock() : null;\n\n\n    // RAMDirectory dir = new RAMDirectory();\n    // final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_40, new WhitespaceAnalyzer(Version.LUCENE_40)));\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    writer.setDoRandomForceMergeAssert(false);\n\n    // writer.commit();\n    // reader = IndexReader.open(dir);\n    // make this reader an NRT reader from the start to avoid the first non-writer openIfChanged\n    // to only opening at the last commit point.\n    reader = DirectoryReader.open(writer.w, true);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,DocInfo> newCommittedModel;\n                  long version;\n                  DirectoryReader oldReader;\n\n                  boolean softCommit = rand.nextInt(100) < softCommitPercent;\n\n                  if (!softCommit) {\n                    // only allow one hard commit to proceed at once\n                    if (hardCommitLock != null) hardCommitLock.lock();\n                    verbose(\"hardCommit start\");\n\n                    writer.commit();\n                  }\n\n                  if (reopenLock != null) reopenLock.lock();\n\n                  synchronized(TestRealTimeGet.this) {\n                    newCommittedModel = new HashMap<Integer,DocInfo>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  if (!softCommit) {\n                    // must commit after taking a snapshot of the model\n                    // writer.commit();\n                  }\n\n                  verbose(\"reopen start using\", oldReader);\n\n                  DirectoryReader newReader;\n                  if (softCommit) {\n                    newReader = DirectoryReader.openIfChanged(oldReader, writer.w, true);\n                  } else {\n                    // will only open to last commit\n                   newReader = DirectoryReader.openIfChanged(oldReader);\n                  }\n\n\n                  if (newReader == null) {\n                    oldReader.incRef();\n                    newReader = oldReader;\n                  }\n                  oldReader.decRef();\n\n                  verbose(\"reopen result\", newReader);\n\n                  synchronized(TestRealTimeGet.this) {\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      reader.decRef();\n                      reader = newReader;\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      }\n\n                    } else {\n                      // close if unused\n                      newReader.decRef();\n                    }\n\n                  }\n\n                  if (reopenLock != null) reopenLock.unlock();\n\n                  if (!softCommit) {\n                    if (hardCommitLock != null) hardCommitLock.unlock();\n                  }\n\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id = rand.nextInt(ndocs);\n              Object sync = syncArr[id];\n\n              // set the lastId before we actually change it sometimes to try and\n              // uncover more race conditions between writing and reading\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              // We can't concurrently update the same document and retain our invariants of increasing values\n              // since we can't guarantee what order the updates will be executed.\n              synchronized (sync) {\n                DocInfo info = model.get(id);\n                long val = info.val;\n                long nextVal = Math.abs(val)+1;\n\n                if (oper < commitPercent + deletePercent) {\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleting id\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                  model.put(id, new DocInfo(0,-nextVal));\n                  verbose(\"deleting id\",id,\"val=\",nextVal,\"DONE\");\n\n                } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                  //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), idFt));\n                    d.add(new Field(field, Long.toString(nextVal), ft2));\n                    verbose(\"adding tombstone for id\",id,\"val=\",nextVal);\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal);\n                  writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                  model.put(id, new DocInfo(0,-nextVal));\n                  verbose(\"deleteByQuery\",id,\"val=\",nextVal,\"DONE\");\n                } else {\n                  // model.put(id, nextVal);   // uncomment this and this test should fail.\n\n                  // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                  Document d = new Document();\n                  d.add(new Field(\"id\",Integer.toString(id), idFt));\n                  d.add(new Field(field, Long.toString(nextVal), ft2));\n                  verbose(\"adding id\",id,\"val=\",nextVal);\n                  writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                  if (tombstones) {\n                    // remove tombstone after new addition (this should be optional?)\n                    verbose(\"deleting tombstone for id\",id);\n                    writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    verbose(\"deleting tombstone for id\",id,\"DONE\");\n                  }\n\n                  model.put(id, new DocInfo(0,nextVal));\n                  verbose(\"adding id\",id,\"val=\",nextVal,\"DONE\");\n                }\n              }\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Exception  ex) {\n            throw new RuntimeException(ex);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              DocInfo info;\n              synchronized(TestRealTimeGet.this) {\n                info = committedModel.get(id);\n              }\n              long val = info.val;\n\n              IndexReader r;\n              synchronized(TestRealTimeGet.this) {\n                r = reader;\n                r.incRef();\n              }\n\n              int docid = getFirstMatch(r, new Term(\"id\",Integer.toString(id)));\n\n              if (docid < 0 && tombstones) {\n                // if we couldn't find the doc, look for it's tombstone\n                docid = getFirstMatch(r, new Term(\"id\",\"-\"+Integer.toString(id)));\n                if (docid < 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  verbose(\"ERROR: Couldn't find a doc  or tombstone for id\", id, \"using reader\",r,\"expected value\",val);\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val);\n                }\n              }\n\n              if (docid < 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                if (docid < 0) {\n                  verbose(\"ERROR: Couldn't find a doc for id\", id, \"using reader\",r);\n                }\n                assertTrue(docid >= 0);   // we should have found the document, or it's tombstone\n                Document doc = r.document(docid);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  verbose(\"ERROR: id\",id,\"model_val=\",val,\" foundVal=\",foundVal,\"reader=\",reader);\n                }\n                assertTrue(foundVal >= Math.abs(val));\n              }\n\n              r.decRef();\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73f40b658bbabc7fa3c8db81a47ba2e03af28f8a":["7d8e411397bc0d26f70339dbe2d59dc162d92237"],"06584e6e98d592b34e1329b384182f368d2025e8":["7a3554ff15950ad0e3bcbb4e4e2ddb45b0b0f27e"],"96d207426bd26fa5c1014e26d21d87603aea68b7":["0d22ac6a4146774c1bc8400160fc0b6150294e92"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["06584e6e98d592b34e1329b384182f368d2025e8"],"1bea3922196318026c4274f2013416acb60c691e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"c00afe74a80796ed1f30a9509b150ff104746a1f":["671279fa1676e7f2755c2745a25abd77a169f992"],"5eb3c909db13817ccc1cb1f2177972451dc48e24":["73f40b658bbabc7fa3c8db81a47ba2e03af28f8a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","96d207426bd26fa5c1014e26d21d87603aea68b7"],"7a3554ff15950ad0e3bcbb4e4e2ddb45b0b0f27e":["c00afe74a80796ed1f30a9509b150ff104746a1f"],"671279fa1676e7f2755c2745a25abd77a169f992":["5eb3c909db13817ccc1cb1f2177972451dc48e24"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"4aa2440480b1dcdc4da1711d161e7d62248dcabb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7d8e411397bc0d26f70339dbe2d59dc162d92237":["4aa2440480b1dcdc4da1711d161e7d62248dcabb"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["1bea3922196318026c4274f2013416acb60c691e","2b2e7536fb06d1abad6c7543a0657bdad5242c5e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2b2e7536fb06d1abad6c7543a0657bdad5242c5e":["1bea3922196318026c4274f2013416acb60c691e"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b2e7536fb06d1abad6c7543a0657bdad5242c5e"]},"commit2Childs":{"73f40b658bbabc7fa3c8db81a47ba2e03af28f8a":["5eb3c909db13817ccc1cb1f2177972451dc48e24"],"06584e6e98d592b34e1329b384182f368d2025e8":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"96d207426bd26fa5c1014e26d21d87603aea68b7":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"1bea3922196318026c4274f2013416acb60c691e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","2b2e7536fb06d1abad6c7543a0657bdad5242c5e"],"c00afe74a80796ed1f30a9509b150ff104746a1f":["7a3554ff15950ad0e3bcbb4e4e2ddb45b0b0f27e"],"5eb3c909db13817ccc1cb1f2177972451dc48e24":["671279fa1676e7f2755c2745a25abd77a169f992"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"7a3554ff15950ad0e3bcbb4e4e2ddb45b0b0f27e":["06584e6e98d592b34e1329b384182f368d2025e8"],"671279fa1676e7f2755c2745a25abd77a169f992":["c00afe74a80796ed1f30a9509b150ff104746a1f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["96d207426bd26fa5c1014e26d21d87603aea68b7"],"4aa2440480b1dcdc4da1711d161e7d62248dcabb":["7d8e411397bc0d26f70339dbe2d59dc162d92237"],"7d8e411397bc0d26f70339dbe2d59dc162d92237":["73f40b658bbabc7fa3c8db81a47ba2e03af28f8a"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4aa2440480b1dcdc4da1711d161e7d62248dcabb"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","5cab9a86bd67202d20b6adc463008c8e982b070a","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"2b2e7536fb06d1abad6c7543a0657bdad5242c5e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["1bea3922196318026c4274f2013416acb60c691e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}