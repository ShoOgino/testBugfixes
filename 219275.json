{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionWithDownNodes().mjava","commits":[{"id":"587bce86f07b072818f585d0fd32bb3fc7a1c647","date":1366063632,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionWithDownNodes().mjava","pathOld":"/dev/null","sourceNew":"  private void deleteCollectionWithDownNodes() throws Exception {\n    String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    // now try to remove a collection when a couple of it's nodes are down\n    createCollection(null, \"halfdeletedcollection2\", 3, 2, 6,\n        createNewSolrServer(\"\", baseUrl), null);\n    \n    // stop a couple nodes\n    ChaosMonkey.stop(jettys.get(0));\n    ChaosMonkey.stop(jettys.get(1));\n    \n    baseUrl = getBaseUrl((HttpSolrServer) clients.get(2));\n    \n    // remove a collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"halfdeletedcollection2\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n    createNewSolrServer(\"\", baseUrl).request(request);\n    \n    cloudClient.getZkStateReader().updateClusterState(true);\n    assertFalse(cloudClient.getZkStateReader().getClusterState()\n        .getCollections().contains(\"halfdeletedcollection2\"));\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c414435ee215dd34e85568a155429a327111772a","5a82d855abc18f7ee3e1ec359d8f256c8c86977a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b2f2b4d90132144e6b3633dc8eeeab22f348c8c7","date":1366912012,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionWithDownNodes().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionWithDownNodes().mjava","sourceNew":"  private void deleteCollectionWithDownNodes() throws Exception {\n    String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    // now try to remove a collection when a couple of it's nodes are down\n    createCollection(null, \"halfdeletedcollection2\", 3, 2, 6,\n        createNewSolrServer(\"\", baseUrl), null);\n    \n    waitForRecoveriesToFinish(\"halfdeletedcollection2\", false);\n    \n    // stop a couple nodes\n    ChaosMonkey.stop(jettys.get(0));\n    ChaosMonkey.stop(jettys.get(1));\n    \n    baseUrl = getBaseUrl((HttpSolrServer) clients.get(2));\n    \n    // remove a collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"halfdeletedcollection2\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n    createNewSolrServer(\"\", baseUrl).request(request);\n    \n    cloudClient.getZkStateReader().updateClusterState(true);\n    assertFalse(cloudClient.getZkStateReader().getClusterState()\n        .getCollections().contains(\"halfdeletedcollection2\"));\n    \n  }\n\n","sourceOld":"  private void deleteCollectionWithDownNodes() throws Exception {\n    String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    // now try to remove a collection when a couple of it's nodes are down\n    createCollection(null, \"halfdeletedcollection2\", 3, 2, 6,\n        createNewSolrServer(\"\", baseUrl), null);\n    \n    // stop a couple nodes\n    ChaosMonkey.stop(jettys.get(0));\n    ChaosMonkey.stop(jettys.get(1));\n    \n    baseUrl = getBaseUrl((HttpSolrServer) clients.get(2));\n    \n    // remove a collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"halfdeletedcollection2\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n    createNewSolrServer(\"\", baseUrl).request(request);\n    \n    cloudClient.getZkStateReader().updateClusterState(true);\n    assertFalse(cloudClient.getZkStateReader().getClusterState()\n        .getCollections().contains(\"halfdeletedcollection2\"));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a82d855abc18f7ee3e1ec359d8f256c8c86977a","date":1381347960,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionWithDownNodes().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionWithDownNodes().mjava","sourceNew":"  private void deleteCollectionWithDownNodes() throws Exception {\n    String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    // now try to remove a collection when a couple of it's nodes are down\n    if (secondConfigSet) {\n      createCollection(null, \"halfdeletedcollection2\", 3, 2, 6,\n          createNewSolrServer(\"\", baseUrl), null, \"conf2\");\n    } else {\n      createCollection(null, \"halfdeletedcollection2\", 3, 2, 6,\n          createNewSolrServer(\"\", baseUrl), null);\n    }\n    \n    waitForRecoveriesToFinish(\"halfdeletedcollection2\", false);\n    \n    // stop a couple nodes\n    ChaosMonkey.stop(jettys.get(0));\n    ChaosMonkey.stop(jettys.get(1));\n    \n    baseUrl = getBaseUrl((HttpSolrServer) clients.get(2));\n    \n    // remove a collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"halfdeletedcollection2\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n    createNewSolrServer(\"\", baseUrl).request(request);\n    \n    cloudClient.getZkStateReader().updateClusterState(true);\n    assertFalse(cloudClient.getZkStateReader().getClusterState()\n        .getCollections().contains(\"halfdeletedcollection2\"));\n    \n  }\n\n","sourceOld":"  private void deleteCollectionWithDownNodes() throws Exception {\n    String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    // now try to remove a collection when a couple of it's nodes are down\n    createCollection(null, \"halfdeletedcollection2\", 3, 2, 6,\n        createNewSolrServer(\"\", baseUrl), null);\n    \n    waitForRecoveriesToFinish(\"halfdeletedcollection2\", false);\n    \n    // stop a couple nodes\n    ChaosMonkey.stop(jettys.get(0));\n    ChaosMonkey.stop(jettys.get(1));\n    \n    baseUrl = getBaseUrl((HttpSolrServer) clients.get(2));\n    \n    // remove a collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"halfdeletedcollection2\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n    createNewSolrServer(\"\", baseUrl).request(request);\n    \n    cloudClient.getZkStateReader().updateClusterState(true);\n    assertFalse(cloudClient.getZkStateReader().getClusterState()\n        .getCollections().contains(\"halfdeletedcollection2\"));\n    \n  }\n\n","bugFix":["587bce86f07b072818f585d0fd32bb3fc7a1c647"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b753f4bd40fd8ec5276ceae15e867d2dceeb5552","date":1387799061,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionWithDownNodes().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionWithDownNodes().mjava","sourceNew":"  private void deleteCollectionWithDownNodes() throws Exception {\n    String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    // now try to remove a collection when a couple of it's nodes are down\n    if (secondConfigSet) {\n      createCollection(null, \"halfdeletedcollection2\", 3, 2, 6,\n          createNewSolrServer(\"\", baseUrl), null, \"conf2\");\n    } else {\n      createCollection(null, \"halfdeletedcollection2\", 3, 2, 6,\n          createNewSolrServer(\"\", baseUrl), null);\n    }\n    \n    waitForRecoveriesToFinish(\"halfdeletedcollection2\", false);\n    \n    // stop a couple nodes\n    ChaosMonkey.stop(jettys.get(0));\n    ChaosMonkey.stop(jettys.get(1));\n    \n    baseUrl = getBaseUrl((HttpSolrServer) clients.get(2));\n    \n    // remove a collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"halfdeletedcollection2\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n    createNewSolrServer(\"\", baseUrl).request(request);\n    \n    cloudClient.getZkStateReader().updateClusterState(true);\n    assertFalse(cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\"));\n    \n  }\n\n","sourceOld":"  private void deleteCollectionWithDownNodes() throws Exception {\n    String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    // now try to remove a collection when a couple of it's nodes are down\n    if (secondConfigSet) {\n      createCollection(null, \"halfdeletedcollection2\", 3, 2, 6,\n          createNewSolrServer(\"\", baseUrl), null, \"conf2\");\n    } else {\n      createCollection(null, \"halfdeletedcollection2\", 3, 2, 6,\n          createNewSolrServer(\"\", baseUrl), null);\n    }\n    \n    waitForRecoveriesToFinish(\"halfdeletedcollection2\", false);\n    \n    // stop a couple nodes\n    ChaosMonkey.stop(jettys.get(0));\n    ChaosMonkey.stop(jettys.get(1));\n    \n    baseUrl = getBaseUrl((HttpSolrServer) clients.get(2));\n    \n    // remove a collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"halfdeletedcollection2\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n    createNewSolrServer(\"\", baseUrl).request(request);\n    \n    cloudClient.getZkStateReader().updateClusterState(true);\n    assertFalse(cloudClient.getZkStateReader().getClusterState()\n        .getCollections().contains(\"halfdeletedcollection2\"));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"db7875a54a4330e509f0d4b45d873887bfb5eb99","date":1390173787,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionWithDownNodes().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionWithDownNodes().mjava","sourceNew":"  private void deleteCollectionWithDownNodes() throws Exception {\n    String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    // now try to remove a collection when a couple of it's nodes are down\n    if (secondConfigSet) {\n      createCollection(null, \"halfdeletedcollection2\", 3, 2, 6,\n          createNewSolrServer(\"\", baseUrl), null, \"conf2\");\n    } else {\n      createCollection(null, \"halfdeletedcollection2\", 3, 2, 6,\n          createNewSolrServer(\"\", baseUrl), null);\n    }\n    \n    waitForRecoveriesToFinish(\"halfdeletedcollection2\", false);\n    \n    // stop a couple nodes\n    ChaosMonkey.stop(jettys.get(0));\n    ChaosMonkey.stop(jettys.get(1));\n    \n    // wait for leaders to settle out\n    for (int i = 1; i < 4; i++) {\n      cloudClient.getZkStateReader().getLeaderRetry(\"halfdeletedcollection2\", \"shard\" + i);\n    }\n    \n    baseUrl = getBaseUrl((HttpSolrServer) clients.get(2));\n    \n    // remove a collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"halfdeletedcollection2\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n    createNewSolrServer(\"\", baseUrl).request(request);\n    \n    cloudClient.getZkStateReader().updateClusterState(true);\n    assertFalse(\"Still found collection that should be gone\", cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\"));\n    \n  }\n\n","sourceOld":"  private void deleteCollectionWithDownNodes() throws Exception {\n    String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    // now try to remove a collection when a couple of it's nodes are down\n    if (secondConfigSet) {\n      createCollection(null, \"halfdeletedcollection2\", 3, 2, 6,\n          createNewSolrServer(\"\", baseUrl), null, \"conf2\");\n    } else {\n      createCollection(null, \"halfdeletedcollection2\", 3, 2, 6,\n          createNewSolrServer(\"\", baseUrl), null);\n    }\n    \n    waitForRecoveriesToFinish(\"halfdeletedcollection2\", false);\n    \n    // stop a couple nodes\n    ChaosMonkey.stop(jettys.get(0));\n    ChaosMonkey.stop(jettys.get(1));\n    \n    baseUrl = getBaseUrl((HttpSolrServer) clients.get(2));\n    \n    // remove a collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"halfdeletedcollection2\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n    createNewSolrServer(\"\", baseUrl).request(request);\n    \n    cloudClient.getZkStateReader().updateClusterState(true);\n    assertFalse(cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\"));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bae4e5ceb2a79c2b8419ec35aaf11378028d940f","date":1390175316,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionWithDownNodes().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionWithDownNodes().mjava","sourceNew":"  private void deleteCollectionWithDownNodes() throws Exception {\n    String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    // now try to remove a collection when a couple of it's nodes are down\n    if (secondConfigSet) {\n      createCollection(null, \"halfdeletedcollection2\", 3, 3, 6,\n          createNewSolrServer(\"\", baseUrl), null, \"conf2\");\n    } else {\n      createCollection(null, \"halfdeletedcollection2\", 3, 3, 6,\n          createNewSolrServer(\"\", baseUrl), null);\n    }\n    \n    waitForRecoveriesToFinish(\"halfdeletedcollection2\", false);\n    \n    // stop a couple nodes\n    ChaosMonkey.stop(jettys.get(0));\n    ChaosMonkey.stop(jettys.get(1));\n    \n    // wait for leaders to settle out\n    for (int i = 1; i < 4; i++) {\n      cloudClient.getZkStateReader().getLeaderRetry(\"halfdeletedcollection2\", \"shard\" + i, 15000);\n    }\n    \n    baseUrl = getBaseUrl((HttpSolrServer) clients.get(2));\n    \n    // remove a collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"halfdeletedcollection2\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n    createNewSolrServer(\"\", baseUrl).request(request);\n    \n    cloudClient.getZkStateReader().updateClusterState(true);\n    assertFalse(\"Still found collection that should be gone\", cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\"));\n    \n  }\n\n","sourceOld":"  private void deleteCollectionWithDownNodes() throws Exception {\n    String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    // now try to remove a collection when a couple of it's nodes are down\n    if (secondConfigSet) {\n      createCollection(null, \"halfdeletedcollection2\", 3, 2, 6,\n          createNewSolrServer(\"\", baseUrl), null, \"conf2\");\n    } else {\n      createCollection(null, \"halfdeletedcollection2\", 3, 2, 6,\n          createNewSolrServer(\"\", baseUrl), null);\n    }\n    \n    waitForRecoveriesToFinish(\"halfdeletedcollection2\", false);\n    \n    // stop a couple nodes\n    ChaosMonkey.stop(jettys.get(0));\n    ChaosMonkey.stop(jettys.get(1));\n    \n    // wait for leaders to settle out\n    for (int i = 1; i < 4; i++) {\n      cloudClient.getZkStateReader().getLeaderRetry(\"halfdeletedcollection2\", \"shard\" + i);\n    }\n    \n    baseUrl = getBaseUrl((HttpSolrServer) clients.get(2));\n    \n    // remove a collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"halfdeletedcollection2\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n    createNewSolrServer(\"\", baseUrl).request(request);\n    \n    cloudClient.getZkStateReader().updateClusterState(true);\n    assertFalse(\"Still found collection that should be gone\", cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\"));\n    \n  }\n\n","bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c414435ee215dd34e85568a155429a327111772a","date":1391999179,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionWithDownNodes().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionWithDownNodes().mjava","sourceNew":"  private void deleteCollectionWithDownNodes() throws Exception {\n    String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    // now try to remove a collection when a couple of it's nodes are down\n    if (secondConfigSet) {\n      createCollection(null, \"halfdeletedcollection2\", 3, 3, 6,\n          createNewSolrServer(\"\", baseUrl), null, \"conf2\");\n    } else {\n      createCollection(null, \"halfdeletedcollection2\", 3, 3, 6,\n          createNewSolrServer(\"\", baseUrl), null);\n    }\n    \n    waitForRecoveriesToFinish(\"halfdeletedcollection2\", false);\n    \n    // stop a couple nodes\n    ChaosMonkey.stop(jettys.get(0));\n    ChaosMonkey.stop(jettys.get(1));\n    \n    // wait for leaders to settle out\n    for (int i = 1; i < 4; i++) {\n      cloudClient.getZkStateReader().getLeaderRetry(\"halfdeletedcollection2\", \"shard\" + i, 15000);\n    }\n    \n    baseUrl = getBaseUrl((HttpSolrServer) clients.get(2));\n    \n    // remove a collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"halfdeletedcollection2\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n    createNewSolrServer(\"\", baseUrl).request(request);\n    \n    long timeout = System.currentTimeMillis() + 10000;\n    while (cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\")) {\n      if (System.currentTimeMillis() > timeout) {\n        throw new AssertionError(\"Timeout waiting to see removed collection leave clusterstate\");\n      }\n      \n      Thread.sleep(200);\n      cloudClient.getZkStateReader().updateClusterState(true);\n    }\n\n    assertFalse(\"Still found collection that should be gone\", cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\"));\n    \n  }\n\n","sourceOld":"  private void deleteCollectionWithDownNodes() throws Exception {\n    String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    // now try to remove a collection when a couple of it's nodes are down\n    if (secondConfigSet) {\n      createCollection(null, \"halfdeletedcollection2\", 3, 3, 6,\n          createNewSolrServer(\"\", baseUrl), null, \"conf2\");\n    } else {\n      createCollection(null, \"halfdeletedcollection2\", 3, 3, 6,\n          createNewSolrServer(\"\", baseUrl), null);\n    }\n    \n    waitForRecoveriesToFinish(\"halfdeletedcollection2\", false);\n    \n    // stop a couple nodes\n    ChaosMonkey.stop(jettys.get(0));\n    ChaosMonkey.stop(jettys.get(1));\n    \n    // wait for leaders to settle out\n    for (int i = 1; i < 4; i++) {\n      cloudClient.getZkStateReader().getLeaderRetry(\"halfdeletedcollection2\", \"shard\" + i, 15000);\n    }\n    \n    baseUrl = getBaseUrl((HttpSolrServer) clients.get(2));\n    \n    // remove a collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"halfdeletedcollection2\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n    createNewSolrServer(\"\", baseUrl).request(request);\n    \n    cloudClient.getZkStateReader().updateClusterState(true);\n    assertFalse(\"Still found collection that should be gone\", cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\"));\n    \n  }\n\n","bugFix":["587bce86f07b072818f585d0fd32bb3fc7a1c647"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1ee378bd9179ad317e08686ff398ed48ebb28b04","date":1392845259,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionWithDownNodes().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionWithDownNodes().mjava","sourceNew":"  private void deleteCollectionWithDownNodes() throws Exception {\n    String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    // now try to remove a collection when a couple of it's nodes are down\n    if (secondConfigSet) {\n      createCollection(null, \"halfdeletedcollection2\", 3, 3, 6,\n          createNewSolrServer(\"\", baseUrl), null, \"conf2\");\n    } else {\n      createCollection(null, \"halfdeletedcollection2\", 3, 3, 6,\n          createNewSolrServer(\"\", baseUrl), null);\n    }\n    \n    waitForRecoveriesToFinish(\"halfdeletedcollection2\", false);\n    \n    // stop a couple nodes\n    ChaosMonkey.stop(jettys.get(0));\n    ChaosMonkey.stop(jettys.get(1));\n    \n    // wait for leaders to settle out\n    for (int i = 1; i < 4; i++) {\n      cloudClient.getZkStateReader().getLeaderRetry(\"halfdeletedcollection2\", \"shard\" + i, 30000);\n    }\n    \n    baseUrl = getBaseUrl((HttpSolrServer) clients.get(2));\n    \n    // remove a collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"halfdeletedcollection2\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n    createNewSolrServer(\"\", baseUrl).request(request);\n    \n    long timeout = System.currentTimeMillis() + 10000;\n    while (cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\")) {\n      if (System.currentTimeMillis() > timeout) {\n        throw new AssertionError(\"Timeout waiting to see removed collection leave clusterstate\");\n      }\n      \n      Thread.sleep(200);\n      cloudClient.getZkStateReader().updateClusterState(true);\n    }\n\n    assertFalse(\"Still found collection that should be gone\", cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\"));\n    \n  }\n\n","sourceOld":"  private void deleteCollectionWithDownNodes() throws Exception {\n    String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    // now try to remove a collection when a couple of it's nodes are down\n    if (secondConfigSet) {\n      createCollection(null, \"halfdeletedcollection2\", 3, 3, 6,\n          createNewSolrServer(\"\", baseUrl), null, \"conf2\");\n    } else {\n      createCollection(null, \"halfdeletedcollection2\", 3, 3, 6,\n          createNewSolrServer(\"\", baseUrl), null);\n    }\n    \n    waitForRecoveriesToFinish(\"halfdeletedcollection2\", false);\n    \n    // stop a couple nodes\n    ChaosMonkey.stop(jettys.get(0));\n    ChaosMonkey.stop(jettys.get(1));\n    \n    // wait for leaders to settle out\n    for (int i = 1; i < 4; i++) {\n      cloudClient.getZkStateReader().getLeaderRetry(\"halfdeletedcollection2\", \"shard\" + i, 15000);\n    }\n    \n    baseUrl = getBaseUrl((HttpSolrServer) clients.get(2));\n    \n    // remove a collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"halfdeletedcollection2\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n    createNewSolrServer(\"\", baseUrl).request(request);\n    \n    long timeout = System.currentTimeMillis() + 10000;\n    while (cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\")) {\n      if (System.currentTimeMillis() > timeout) {\n        throw new AssertionError(\"Timeout waiting to see removed collection leave clusterstate\");\n      }\n      \n      Thread.sleep(200);\n      cloudClient.getZkStateReader().updateClusterState(true);\n    }\n\n    assertFalse(\"Still found collection that should be gone\", cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\"));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionWithDownNodes().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionWithDownNodes().mjava","sourceNew":"  private void deleteCollectionWithDownNodes() throws Exception {\n    String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    // now try to remove a collection when a couple of it's nodes are down\n    if (secondConfigSet) {\n      createCollection(null, \"halfdeletedcollection2\", 3, 3, 6,\n          createNewSolrServer(\"\", baseUrl), null, \"conf2\");\n    } else {\n      createCollection(null, \"halfdeletedcollection2\", 3, 3, 6,\n          createNewSolrServer(\"\", baseUrl), null);\n    }\n    \n    waitForRecoveriesToFinish(\"halfdeletedcollection2\", false);\n    \n    // stop a couple nodes\n    ChaosMonkey.stop(jettys.get(0));\n    ChaosMonkey.stop(jettys.get(1));\n    \n    // wait for leaders to settle out\n    for (int i = 1; i < 4; i++) {\n      cloudClient.getZkStateReader().getLeaderRetry(\"halfdeletedcollection2\", \"shard\" + i, 30000);\n    }\n    \n    baseUrl = getBaseUrl((HttpSolrServer) clients.get(2));\n    \n    // remove a collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"halfdeletedcollection2\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n    createNewSolrServer(\"\", baseUrl).request(request);\n    \n    long timeout = System.currentTimeMillis() + 10000;\n    while (cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\")) {\n      if (System.currentTimeMillis() > timeout) {\n        throw new AssertionError(\"Timeout waiting to see removed collection leave clusterstate\");\n      }\n      \n      Thread.sleep(200);\n      cloudClient.getZkStateReader().updateClusterState(true);\n    }\n\n    assertFalse(\"Still found collection that should be gone\", cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\"));\n\n  }\n\n","sourceOld":"  private void deleteCollectionWithDownNodes() throws Exception {\n    String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    // now try to remove a collection when a couple of it's nodes are down\n    if (secondConfigSet) {\n      createCollection(null, \"halfdeletedcollection2\", 3, 3, 6,\n          createNewSolrServer(\"\", baseUrl), null, \"conf2\");\n    } else {\n      createCollection(null, \"halfdeletedcollection2\", 3, 3, 6,\n          createNewSolrServer(\"\", baseUrl), null);\n    }\n    \n    waitForRecoveriesToFinish(\"halfdeletedcollection2\", false);\n    \n    // stop a couple nodes\n    ChaosMonkey.stop(jettys.get(0));\n    ChaosMonkey.stop(jettys.get(1));\n    \n    // wait for leaders to settle out\n    for (int i = 1; i < 4; i++) {\n      cloudClient.getZkStateReader().getLeaderRetry(\"halfdeletedcollection2\", \"shard\" + i, 30000);\n    }\n    \n    baseUrl = getBaseUrl((HttpSolrServer) clients.get(2));\n    \n    // remove a collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"halfdeletedcollection2\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n    createNewSolrServer(\"\", baseUrl).request(request);\n    \n    long timeout = System.currentTimeMillis() + 10000;\n    while (cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\")) {\n      if (System.currentTimeMillis() > timeout) {\n        throw new AssertionError(\"Timeout waiting to see removed collection leave clusterstate\");\n      }\n      \n      Thread.sleep(200);\n      cloudClient.getZkStateReader().updateClusterState(true);\n    }\n\n    assertFalse(\"Still found collection that should be gone\", cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\"));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionWithDownNodes().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionWithDownNodes().mjava","sourceNew":"  private void deleteCollectionWithDownNodes() throws Exception {\n    String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    // now try to remove a collection when a couple of its nodes are down\n    if (secondConfigSet) {\n      createCollection(null, \"halfdeletedcollection2\", 3, 3, 6,\n          createNewSolrServer(\"\", baseUrl), null, \"conf2\");\n    } else {\n      createCollection(null, \"halfdeletedcollection2\", 3, 3, 6,\n          createNewSolrServer(\"\", baseUrl), null);\n    }\n    \n    waitForRecoveriesToFinish(\"halfdeletedcollection2\", false);\n    \n    // stop a couple nodes\n    ChaosMonkey.stop(jettys.get(0));\n    ChaosMonkey.stop(jettys.get(1));\n    \n    // wait for leaders to settle out\n    for (int i = 1; i < 4; i++) {\n      cloudClient.getZkStateReader().getLeaderRetry(\"halfdeletedcollection2\", \"shard\" + i, 30000);\n    }\n    \n    baseUrl = getBaseUrl((HttpSolrServer) clients.get(2));\n    \n    // remove a collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"halfdeletedcollection2\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n    createNewSolrServer(\"\", baseUrl).request(request);\n    \n    long timeout = System.currentTimeMillis() + 10000;\n    while (cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\")) {\n      if (System.currentTimeMillis() > timeout) {\n        throw new AssertionError(\"Timeout waiting to see removed collection leave clusterstate\");\n      }\n      \n      Thread.sleep(200);\n      cloudClient.getZkStateReader().updateClusterState(true);\n    }\n\n    assertFalse(\"Still found collection that should be gone\", cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\"));\n\n  }\n\n","sourceOld":"  private void deleteCollectionWithDownNodes() throws Exception {\n    String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    // now try to remove a collection when a couple of it's nodes are down\n    if (secondConfigSet) {\n      createCollection(null, \"halfdeletedcollection2\", 3, 3, 6,\n          createNewSolrServer(\"\", baseUrl), null, \"conf2\");\n    } else {\n      createCollection(null, \"halfdeletedcollection2\", 3, 3, 6,\n          createNewSolrServer(\"\", baseUrl), null);\n    }\n    \n    waitForRecoveriesToFinish(\"halfdeletedcollection2\", false);\n    \n    // stop a couple nodes\n    ChaosMonkey.stop(jettys.get(0));\n    ChaosMonkey.stop(jettys.get(1));\n    \n    // wait for leaders to settle out\n    for (int i = 1; i < 4; i++) {\n      cloudClient.getZkStateReader().getLeaderRetry(\"halfdeletedcollection2\", \"shard\" + i, 30000);\n    }\n    \n    baseUrl = getBaseUrl((HttpSolrServer) clients.get(2));\n    \n    // remove a collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"halfdeletedcollection2\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n    createNewSolrServer(\"\", baseUrl).request(request);\n    \n    long timeout = System.currentTimeMillis() + 10000;\n    while (cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\")) {\n      if (System.currentTimeMillis() > timeout) {\n        throw new AssertionError(\"Timeout waiting to see removed collection leave clusterstate\");\n      }\n      \n      Thread.sleep(200);\n      cloudClient.getZkStateReader().updateClusterState(true);\n    }\n\n    assertFalse(\"Still found collection that should be gone\", cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionWithDownNodes().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionWithDownNodes().mjava","sourceNew":"  private void deleteCollectionWithDownNodes() throws Exception {\n    String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    // now try to remove a collection when a couple of its nodes are down\n    if (secondConfigSet) {\n      createCollection(null, \"halfdeletedcollection2\", 3, 3, 6,\n          createNewSolrClient(\"\", baseUrl), null, \"conf2\");\n    } else {\n      createCollection(null, \"halfdeletedcollection2\", 3, 3, 6,\n          createNewSolrClient(\"\", baseUrl), null);\n    }\n    \n    waitForRecoveriesToFinish(\"halfdeletedcollection2\", false);\n    \n    // stop a couple nodes\n    ChaosMonkey.stop(jettys.get(0));\n    ChaosMonkey.stop(jettys.get(1));\n    \n    // wait for leaders to settle out\n    for (int i = 1; i < 4; i++) {\n      cloudClient.getZkStateReader().getLeaderRetry(\"halfdeletedcollection2\", \"shard\" + i, 30000);\n    }\n    \n    baseUrl = getBaseUrl((HttpSolrClient) clients.get(2));\n    \n    // remove a collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"halfdeletedcollection2\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n    createNewSolrClient(\"\", baseUrl).request(request);\n    \n    long timeout = System.currentTimeMillis() + 10000;\n    while (cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\")) {\n      if (System.currentTimeMillis() > timeout) {\n        throw new AssertionError(\"Timeout waiting to see removed collection leave clusterstate\");\n      }\n      \n      Thread.sleep(200);\n      cloudClient.getZkStateReader().updateClusterState(true);\n    }\n\n    assertFalse(\"Still found collection that should be gone\", cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\"));\n\n  }\n\n","sourceOld":"  private void deleteCollectionWithDownNodes() throws Exception {\n    String baseUrl = getBaseUrl((HttpSolrServer) clients.get(0));\n    // now try to remove a collection when a couple of its nodes are down\n    if (secondConfigSet) {\n      createCollection(null, \"halfdeletedcollection2\", 3, 3, 6,\n          createNewSolrServer(\"\", baseUrl), null, \"conf2\");\n    } else {\n      createCollection(null, \"halfdeletedcollection2\", 3, 3, 6,\n          createNewSolrServer(\"\", baseUrl), null);\n    }\n    \n    waitForRecoveriesToFinish(\"halfdeletedcollection2\", false);\n    \n    // stop a couple nodes\n    ChaosMonkey.stop(jettys.get(0));\n    ChaosMonkey.stop(jettys.get(1));\n    \n    // wait for leaders to settle out\n    for (int i = 1; i < 4; i++) {\n      cloudClient.getZkStateReader().getLeaderRetry(\"halfdeletedcollection2\", \"shard\" + i, 30000);\n    }\n    \n    baseUrl = getBaseUrl((HttpSolrServer) clients.get(2));\n    \n    // remove a collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"halfdeletedcollection2\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n    createNewSolrServer(\"\", baseUrl).request(request);\n    \n    long timeout = System.currentTimeMillis() + 10000;\n    while (cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\")) {\n      if (System.currentTimeMillis() > timeout) {\n        throw new AssertionError(\"Timeout waiting to see removed collection leave clusterstate\");\n      }\n      \n      Thread.sleep(200);\n      cloudClient.getZkStateReader().updateClusterState(true);\n    }\n\n    assertFalse(\"Still found collection that should be gone\", cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\"));\n\n  }\n\n","bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionWithDownNodes().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionWithDownNodes().mjava","sourceNew":"  private void deleteCollectionWithDownNodes() throws Exception {\n    String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    // now try to remove a collection when a couple of its nodes are down\n    if (secondConfigSet) {\n      SolrClient client = createNewSolrClient(\"\", baseUrl);\n      try {\n        createCollection(null, \"halfdeletedcollection2\", 3, 3, 6, client, null,\n            \"conf2\");\n      } finally {\n        client.shutdown();\n      }\n    } else {\n      SolrClient client = createNewSolrClient(\"\", baseUrl);\n      try {\n        createCollection(null, \"halfdeletedcollection2\", 3, 3, 6,\n          client, null);\n      } finally {\n        client.shutdown();\n      }\n    }\n    \n    waitForRecoveriesToFinish(\"halfdeletedcollection2\", false);\n    \n    // stop a couple nodes\n    ChaosMonkey.stop(jettys.get(0));\n    ChaosMonkey.stop(jettys.get(1));\n    \n    // wait for leaders to settle out\n    for (int i = 1; i < 4; i++) {\n      cloudClient.getZkStateReader().getLeaderRetry(\"halfdeletedcollection2\", \"shard\" + i, 30000);\n    }\n    \n    baseUrl = getBaseUrl((HttpSolrClient) clients.get(2));\n    \n    // remove a collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"halfdeletedcollection2\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n    makeRequest(baseUrl, request);\n    \n    long timeout = System.currentTimeMillis() + 10000;\n    while (cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\")) {\n      if (System.currentTimeMillis() > timeout) {\n        throw new AssertionError(\"Timeout waiting to see removed collection leave clusterstate\");\n      }\n      \n      Thread.sleep(200);\n      cloudClient.getZkStateReader().updateClusterState(true);\n    }\n\n    assertFalse(\"Still found collection that should be gone\", cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\"));\n\n  }\n\n","sourceOld":"  private void deleteCollectionWithDownNodes() throws Exception {\n    String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    // now try to remove a collection when a couple of its nodes are down\n    if (secondConfigSet) {\n      createCollection(null, \"halfdeletedcollection2\", 3, 3, 6,\n          createNewSolrClient(\"\", baseUrl), null, \"conf2\");\n    } else {\n      createCollection(null, \"halfdeletedcollection2\", 3, 3, 6,\n          createNewSolrClient(\"\", baseUrl), null);\n    }\n    \n    waitForRecoveriesToFinish(\"halfdeletedcollection2\", false);\n    \n    // stop a couple nodes\n    ChaosMonkey.stop(jettys.get(0));\n    ChaosMonkey.stop(jettys.get(1));\n    \n    // wait for leaders to settle out\n    for (int i = 1; i < 4; i++) {\n      cloudClient.getZkStateReader().getLeaderRetry(\"halfdeletedcollection2\", \"shard\" + i, 30000);\n    }\n    \n    baseUrl = getBaseUrl((HttpSolrClient) clients.get(2));\n    \n    // remove a collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"halfdeletedcollection2\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n    createNewSolrClient(\"\", baseUrl).request(request);\n    \n    long timeout = System.currentTimeMillis() + 10000;\n    while (cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\")) {\n      if (System.currentTimeMillis() > timeout) {\n        throw new AssertionError(\"Timeout waiting to see removed collection leave clusterstate\");\n      }\n      \n      Thread.sleep(200);\n      cloudClient.getZkStateReader().updateClusterState(true);\n    }\n\n    assertFalse(\"Still found collection that should be gone\", cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\"));\n\n  }\n\n","bugFix":["bafca15d8e408346a67f4282ad1143b88023893b","bae4e5ceb2a79c2b8419ec35aaf11378028d940f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionWithDownNodes().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionWithDownNodes().mjava","sourceNew":"  private void deleteCollectionWithDownNodes() throws Exception {\n    String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    // now try to remove a collection when a couple of its nodes are down\n    if (secondConfigSet) {\n      try (SolrClient client = createNewSolrClient(\"\", baseUrl)) {\n        createCollection(null, \"halfdeletedcollection2\", 3, 3, 6, client, null, \"conf2\");\n      }\n    } else {\n      try (SolrClient client = createNewSolrClient(\"\", baseUrl)) {\n        createCollection(null, \"halfdeletedcollection2\", 3, 3, 6, client, null);\n      }\n    }\n    \n    waitForRecoveriesToFinish(\"halfdeletedcollection2\", false);\n    \n    // stop a couple nodes\n    ChaosMonkey.stop(jettys.get(0));\n    ChaosMonkey.stop(jettys.get(1));\n    \n    // wait for leaders to settle out\n    for (int i = 1; i < 4; i++) {\n      cloudClient.getZkStateReader().getLeaderRetry(\"halfdeletedcollection2\", \"shard\" + i, 30000);\n    }\n    \n    baseUrl = getBaseUrl((HttpSolrClient) clients.get(2));\n    \n    // remove a collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"halfdeletedcollection2\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n    makeRequest(baseUrl, request);\n    \n    long timeout = System.currentTimeMillis() + 10000;\n    while (cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\")) {\n      if (System.currentTimeMillis() > timeout) {\n        throw new AssertionError(\"Timeout waiting to see removed collection leave clusterstate\");\n      }\n      \n      Thread.sleep(200);\n      cloudClient.getZkStateReader().updateClusterState(true);\n    }\n\n    assertFalse(\"Still found collection that should be gone\", cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\"));\n\n  }\n\n","sourceOld":"  private void deleteCollectionWithDownNodes() throws Exception {\n    String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    // now try to remove a collection when a couple of its nodes are down\n    if (secondConfigSet) {\n      SolrClient client = createNewSolrClient(\"\", baseUrl);\n      try {\n        createCollection(null, \"halfdeletedcollection2\", 3, 3, 6, client, null,\n            \"conf2\");\n      } finally {\n        client.shutdown();\n      }\n    } else {\n      SolrClient client = createNewSolrClient(\"\", baseUrl);\n      try {\n        createCollection(null, \"halfdeletedcollection2\", 3, 3, 6,\n          client, null);\n      } finally {\n        client.shutdown();\n      }\n    }\n    \n    waitForRecoveriesToFinish(\"halfdeletedcollection2\", false);\n    \n    // stop a couple nodes\n    ChaosMonkey.stop(jettys.get(0));\n    ChaosMonkey.stop(jettys.get(1));\n    \n    // wait for leaders to settle out\n    for (int i = 1; i < 4; i++) {\n      cloudClient.getZkStateReader().getLeaderRetry(\"halfdeletedcollection2\", \"shard\" + i, 30000);\n    }\n    \n    baseUrl = getBaseUrl((HttpSolrClient) clients.get(2));\n    \n    // remove a collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"halfdeletedcollection2\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n    makeRequest(baseUrl, request);\n    \n    long timeout = System.currentTimeMillis() + 10000;\n    while (cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\")) {\n      if (System.currentTimeMillis() > timeout) {\n        throw new AssertionError(\"Timeout waiting to see removed collection leave clusterstate\");\n      }\n      \n      Thread.sleep(200);\n      cloudClient.getZkStateReader().updateClusterState(true);\n    }\n\n    assertFalse(\"Still found collection that should be gone\", cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"102da6baafc0f534a59f31729343dbab9d3b9e9a","date":1438410244,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionWithDownNodes().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionWithDownNodes().mjava","sourceNew":"  private void deleteCollectionWithDownNodes() throws Exception {\n    String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    // now try to remove a collection when a couple of its nodes are down\n    if (secondConfigSet) {\n      try (SolrClient client = createNewSolrClient(\"\", baseUrl)) {\n        createCollection(null, \"halfdeletedcollection2\", 3, 3, 6, client, null, \"conf2\");\n      }\n    } else {\n      try (SolrClient client = createNewSolrClient(\"\", baseUrl)) {\n        createCollection(null, \"halfdeletedcollection2\", 3, 3, 6, client, null);\n      }\n    }\n    \n    waitForRecoveriesToFinish(\"halfdeletedcollection2\", false);\n    \n    // stop a couple nodes\n    ChaosMonkey.stop(jettys.get(0));\n    ChaosMonkey.stop(jettys.get(1));\n    \n    // wait for leaders to settle out\n    for (int i = 1; i < 4; i++) {\n      cloudClient.getZkStateReader().getLeaderRetry(\"halfdeletedcollection2\", \"shard\" + i, 30000);\n    }\n    \n    baseUrl = getBaseUrl((HttpSolrClient) clients.get(2));\n    \n    // remove a collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"halfdeletedcollection2\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n    makeRequest(baseUrl, request);\n    \n    long timeout = System.currentTimeMillis() + 10000;\n    while (cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\")) {\n      if (System.currentTimeMillis() > timeout) {\n        throw new AssertionError(\"Timeout waiting to see removed collection leave clusterstate\");\n      }\n      \n      Thread.sleep(200);\n      cloudClient.getZkStateReader().updateClusterState();\n    }\n\n    assertFalse(\"Still found collection that should be gone\", cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\"));\n\n  }\n\n","sourceOld":"  private void deleteCollectionWithDownNodes() throws Exception {\n    String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    // now try to remove a collection when a couple of its nodes are down\n    if (secondConfigSet) {\n      try (SolrClient client = createNewSolrClient(\"\", baseUrl)) {\n        createCollection(null, \"halfdeletedcollection2\", 3, 3, 6, client, null, \"conf2\");\n      }\n    } else {\n      try (SolrClient client = createNewSolrClient(\"\", baseUrl)) {\n        createCollection(null, \"halfdeletedcollection2\", 3, 3, 6, client, null);\n      }\n    }\n    \n    waitForRecoveriesToFinish(\"halfdeletedcollection2\", false);\n    \n    // stop a couple nodes\n    ChaosMonkey.stop(jettys.get(0));\n    ChaosMonkey.stop(jettys.get(1));\n    \n    // wait for leaders to settle out\n    for (int i = 1; i < 4; i++) {\n      cloudClient.getZkStateReader().getLeaderRetry(\"halfdeletedcollection2\", \"shard\" + i, 30000);\n    }\n    \n    baseUrl = getBaseUrl((HttpSolrClient) clients.get(2));\n    \n    // remove a collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"halfdeletedcollection2\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n    makeRequest(baseUrl, request);\n    \n    long timeout = System.currentTimeMillis() + 10000;\n    while (cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\")) {\n      if (System.currentTimeMillis() > timeout) {\n        throw new AssertionError(\"Timeout waiting to see removed collection leave clusterstate\");\n      }\n      \n      Thread.sleep(200);\n      cloudClient.getZkStateReader().updateClusterState(true);\n    }\n\n    assertFalse(\"Still found collection that should be gone\", cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionWithDownNodes().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionWithDownNodes().mjava","sourceNew":"  private void deleteCollectionWithDownNodes() throws Exception {\n    String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    // now try to remove a collection when a couple of its nodes are down\n    if (secondConfigSet) {\n      try (SolrClient client = createNewSolrClient(\"\", baseUrl)) {\n        createCollection(null, \"halfdeletedcollection2\", 3, 3, 6, client, null, \"conf2\");\n      }\n    } else {\n      try (SolrClient client = createNewSolrClient(\"\", baseUrl)) {\n        createCollection(null, \"halfdeletedcollection2\", 3, 3, 6, client, null);\n      }\n    }\n    \n    waitForRecoveriesToFinish(\"halfdeletedcollection2\", false);\n    \n    // stop a couple nodes\n    ChaosMonkey.stop(jettys.get(0));\n    ChaosMonkey.stop(jettys.get(1));\n    \n    // wait for leaders to settle out\n    for (int i = 1; i < 4; i++) {\n      cloudClient.getZkStateReader().getLeaderRetry(\"halfdeletedcollection2\", \"shard\" + i, 30000);\n    }\n    \n    baseUrl = getBaseUrl((HttpSolrClient) clients.get(2));\n    \n    // remove a collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"halfdeletedcollection2\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n    makeRequest(baseUrl, request);\n\n    TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS);\n    while (cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\")) {\n      if (timeout.hasTimedOut()) {\n        throw new AssertionError(\"Timeout waiting to see removed collection leave clusterstate\");\n      }\n      \n      Thread.sleep(200);\n      cloudClient.getZkStateReader().updateClusterState();\n    }\n\n    assertFalse(\"Still found collection that should be gone\", cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\"));\n\n  }\n\n","sourceOld":"  private void deleteCollectionWithDownNodes() throws Exception {\n    String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    // now try to remove a collection when a couple of its nodes are down\n    if (secondConfigSet) {\n      try (SolrClient client = createNewSolrClient(\"\", baseUrl)) {\n        createCollection(null, \"halfdeletedcollection2\", 3, 3, 6, client, null, \"conf2\");\n      }\n    } else {\n      try (SolrClient client = createNewSolrClient(\"\", baseUrl)) {\n        createCollection(null, \"halfdeletedcollection2\", 3, 3, 6, client, null);\n      }\n    }\n    \n    waitForRecoveriesToFinish(\"halfdeletedcollection2\", false);\n    \n    // stop a couple nodes\n    ChaosMonkey.stop(jettys.get(0));\n    ChaosMonkey.stop(jettys.get(1));\n    \n    // wait for leaders to settle out\n    for (int i = 1; i < 4; i++) {\n      cloudClient.getZkStateReader().getLeaderRetry(\"halfdeletedcollection2\", \"shard\" + i, 30000);\n    }\n    \n    baseUrl = getBaseUrl((HttpSolrClient) clients.get(2));\n    \n    // remove a collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"halfdeletedcollection2\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n    makeRequest(baseUrl, request);\n    \n    long timeout = System.currentTimeMillis() + 10000;\n    while (cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\")) {\n      if (System.currentTimeMillis() > timeout) {\n        throw new AssertionError(\"Timeout waiting to see removed collection leave clusterstate\");\n      }\n      \n      Thread.sleep(200);\n      cloudClient.getZkStateReader().updateClusterState();\n    }\n\n    assertFalse(\"Still found collection that should be gone\", cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionWithDownNodes().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionWithDownNodes().mjava","sourceNew":"  private void deleteCollectionWithDownNodes() throws Exception {\n    String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    // now try to remove a collection when a couple of its nodes are down\n    if (secondConfigSet) {\n      try (SolrClient client = createNewSolrClient(\"\", baseUrl)) {\n        createCollection(null, \"halfdeletedcollection2\", 3, 3, 6, client, null, \"conf2\");\n      }\n    } else {\n      try (SolrClient client = createNewSolrClient(\"\", baseUrl)) {\n        createCollection(null, \"halfdeletedcollection2\", 3, 3, 6, client, null);\n      }\n    }\n    \n    waitForRecoveriesToFinish(\"halfdeletedcollection2\", false);\n    \n    // stop a couple nodes\n    ChaosMonkey.stop(jettys.get(0));\n    ChaosMonkey.stop(jettys.get(1));\n    \n    // wait for leaders to settle out\n    for (int i = 1; i < 4; i++) {\n      cloudClient.getZkStateReader().getLeaderRetry(\"halfdeletedcollection2\", \"shard\" + i, 30000);\n    }\n    \n    baseUrl = getBaseUrl((HttpSolrClient) clients.get(2));\n    \n    // remove a collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"halfdeletedcollection2\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n    makeRequest(baseUrl, request);\n\n    TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS);\n    while (cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\")) {\n      if (timeout.hasTimedOut()) {\n        throw new AssertionError(\"Timeout waiting to see removed collection leave clusterstate\");\n      }\n      \n      Thread.sleep(200);\n    }\n\n    assertFalse(\"Still found collection that should be gone\", cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\"));\n\n  }\n\n","sourceOld":"  private void deleteCollectionWithDownNodes() throws Exception {\n    String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    // now try to remove a collection when a couple of its nodes are down\n    if (secondConfigSet) {\n      try (SolrClient client = createNewSolrClient(\"\", baseUrl)) {\n        createCollection(null, \"halfdeletedcollection2\", 3, 3, 6, client, null, \"conf2\");\n      }\n    } else {\n      try (SolrClient client = createNewSolrClient(\"\", baseUrl)) {\n        createCollection(null, \"halfdeletedcollection2\", 3, 3, 6, client, null);\n      }\n    }\n    \n    waitForRecoveriesToFinish(\"halfdeletedcollection2\", false);\n    \n    // stop a couple nodes\n    ChaosMonkey.stop(jettys.get(0));\n    ChaosMonkey.stop(jettys.get(1));\n    \n    // wait for leaders to settle out\n    for (int i = 1; i < 4; i++) {\n      cloudClient.getZkStateReader().getLeaderRetry(\"halfdeletedcollection2\", \"shard\" + i, 30000);\n    }\n    \n    baseUrl = getBaseUrl((HttpSolrClient) clients.get(2));\n    \n    // remove a collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"halfdeletedcollection2\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n    makeRequest(baseUrl, request);\n\n    TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS);\n    while (cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\")) {\n      if (timeout.hasTimedOut()) {\n        throw new AssertionError(\"Timeout waiting to see removed collection leave clusterstate\");\n      }\n      \n      Thread.sleep(200);\n      cloudClient.getZkStateReader().updateClusterState();\n    }\n\n    assertFalse(\"Still found collection that should be gone\", cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4efd3fffdd7acd625bb88e455c8097e17f75735","date":1477647201,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionWithDownNodes().mjava","sourceNew":null,"sourceOld":"  private void deleteCollectionWithDownNodes() throws Exception {\n    String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    // now try to remove a collection when a couple of its nodes are down\n    if (secondConfigSet) {\n      try (SolrClient client = createNewSolrClient(\"\", baseUrl)) {\n        createCollection(null, \"halfdeletedcollection2\", 3, 3, 6, client, null, \"conf2\");\n      }\n    } else {\n      try (SolrClient client = createNewSolrClient(\"\", baseUrl)) {\n        createCollection(null, \"halfdeletedcollection2\", 3, 3, 6, client, null);\n      }\n    }\n    \n    waitForRecoveriesToFinish(\"halfdeletedcollection2\", false);\n    \n    // stop a couple nodes\n    ChaosMonkey.stop(jettys.get(0));\n    ChaosMonkey.stop(jettys.get(1));\n    \n    // wait for leaders to settle out\n    for (int i = 1; i < 4; i++) {\n      cloudClient.getZkStateReader().getLeaderRetry(\"halfdeletedcollection2\", \"shard\" + i, 30000);\n    }\n    \n    baseUrl = getBaseUrl((HttpSolrClient) clients.get(2));\n    \n    // remove a collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"halfdeletedcollection2\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n    makeRequest(baseUrl, request);\n\n    TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS);\n    while (cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\")) {\n      if (timeout.hasTimedOut()) {\n        throw new AssertionError(\"Timeout waiting to see removed collection leave clusterstate\");\n      }\n      \n      Thread.sleep(200);\n    }\n\n    assertFalse(\"Still found collection that should be gone\", cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59dce44d6a0b58c171de1d47ad8c0a75831f94fd","date":1477668573,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#deleteCollectionWithDownNodes().mjava","sourceNew":null,"sourceOld":"  private void deleteCollectionWithDownNodes() throws Exception {\n    String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    // now try to remove a collection when a couple of its nodes are down\n    if (secondConfigSet) {\n      try (SolrClient client = createNewSolrClient(\"\", baseUrl)) {\n        createCollection(null, \"halfdeletedcollection2\", 3, 3, 6, client, null, \"conf2\");\n      }\n    } else {\n      try (SolrClient client = createNewSolrClient(\"\", baseUrl)) {\n        createCollection(null, \"halfdeletedcollection2\", 3, 3, 6, client, null);\n      }\n    }\n    \n    waitForRecoveriesToFinish(\"halfdeletedcollection2\", false);\n    \n    // stop a couple nodes\n    ChaosMonkey.stop(jettys.get(0));\n    ChaosMonkey.stop(jettys.get(1));\n    \n    // wait for leaders to settle out\n    for (int i = 1; i < 4; i++) {\n      cloudClient.getZkStateReader().getLeaderRetry(\"halfdeletedcollection2\", \"shard\" + i, 30000);\n    }\n    \n    baseUrl = getBaseUrl((HttpSolrClient) clients.get(2));\n    \n    // remove a collection\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.DELETE.toString());\n    params.set(\"name\", \"halfdeletedcollection2\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n    makeRequest(baseUrl, request);\n\n    TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS);\n    while (cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\")) {\n      if (timeout.hasTimedOut()) {\n        throw new AssertionError(\"Timeout waiting to see removed collection leave clusterstate\");\n      }\n      \n      Thread.sleep(200);\n    }\n\n    assertFalse(\"Still found collection that should be gone\", cloudClient.getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","a4efd3fffdd7acd625bb88e455c8097e17f75735"],"587bce86f07b072818f585d0fd32bb3fc7a1c647":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b753f4bd40fd8ec5276ceae15e867d2dceeb5552":["5a82d855abc18f7ee3e1ec359d8f256c8c86977a"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"1ee378bd9179ad317e08686ff398ed48ebb28b04":["c414435ee215dd34e85568a155429a327111772a"],"db7875a54a4330e509f0d4b45d873887bfb5eb99":["b753f4bd40fd8ec5276ceae15e867d2dceeb5552"],"c414435ee215dd34e85568a155429a327111772a":["bae4e5ceb2a79c2b8419ec35aaf11378028d940f"],"bafca15d8e408346a67f4282ad1143b88023893b":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"5a82d855abc18f7ee3e1ec359d8f256c8c86977a":["b2f2b4d90132144e6b3633dc8eeeab22f348c8c7"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"bae4e5ceb2a79c2b8419ec35aaf11378028d940f":["db7875a54a4330e509f0d4b45d873887bfb5eb99"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["bafca15d8e408346a67f4282ad1143b88023893b"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["1ee378bd9179ad317e08686ff398ed48ebb28b04"],"b2f2b4d90132144e6b3633dc8eeeab22f348c8c7":["587bce86f07b072818f585d0fd32bb3fc7a1c647"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a4efd3fffdd7acd625bb88e455c8097e17f75735"]},"commit2Childs":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["59dce44d6a0b58c171de1d47ad8c0a75831f94fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":[],"587bce86f07b072818f585d0fd32bb3fc7a1c647":["b2f2b4d90132144e6b3633dc8eeeab22f348c8c7"],"b753f4bd40fd8ec5276ceae15e867d2dceeb5552":["db7875a54a4330e509f0d4b45d873887bfb5eb99"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"1ee378bd9179ad317e08686ff398ed48ebb28b04":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"db7875a54a4330e509f0d4b45d873887bfb5eb99":["bae4e5ceb2a79c2b8419ec35aaf11378028d940f"],"c414435ee215dd34e85568a155429a327111772a":["1ee378bd9179ad317e08686ff398ed48ebb28b04"],"bafca15d8e408346a67f4282ad1143b88023893b":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["a4efd3fffdd7acd625bb88e455c8097e17f75735","59dce44d6a0b58c171de1d47ad8c0a75831f94fd"],"5a82d855abc18f7ee3e1ec359d8f256c8c86977a":["b753f4bd40fd8ec5276ceae15e867d2dceeb5552"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["bafca15d8e408346a67f4282ad1143b88023893b"],"bae4e5ceb2a79c2b8419ec35aaf11378028d940f":["c414435ee215dd34e85568a155429a327111772a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["587bce86f07b072818f585d0fd32bb3fc7a1c647"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"b2f2b4d90132144e6b3633dc8eeeab22f348c8c7":["5a82d855abc18f7ee3e1ec359d8f256c8c86977a"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["59dce44d6a0b58c171de1d47ad8c0a75831f94fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}