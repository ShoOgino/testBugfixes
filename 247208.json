{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#reloadCollection(Replica,String).mjava","commits":[{"id":"29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3","date":1460654262,"type":1,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#reloadCollection(Replica,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionReloadTest#reloadCollection(Replica,String).mjava","sourceNew":"  protected boolean reloadCollection(Replica replica, String testCollectionName) throws Exception {\n    ZkCoreNodeProps coreProps = new ZkCoreNodeProps(replica);\n    String coreName = coreProps.getCoreName();\n    boolean reloadedOk = false;\n    try (HttpSolrClient client = getHttpSolrClient(coreProps.getBaseUrl())) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(coreName, client);\n      long leaderCoreStartTime = statusResp.getStartTime(coreName).getTime();\n\n      Thread.sleep(1000);\n\n      // send reload command for the collection\n      log.info(\"Sending RELOAD command for \"+testCollectionName);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.RELOAD.toString());\n      params.set(\"name\", testCollectionName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n      Thread.sleep(2000); // reload can take a short while\n\n      // verify reload is done, waiting up to 30 seconds for slow test environments\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n      while (System.nanoTime() < timeout) {\n        statusResp = CoreAdminRequest.getStatus(coreName, client);\n        long startTimeAfterReload = statusResp.getStartTime(coreName).getTime();\n        if (startTimeAfterReload > leaderCoreStartTime) {\n          reloadedOk = true;\n          break;\n        }\n        // else ... still waiting to see the reloaded core report a later start time\n        Thread.sleep(1000);\n      }\n    }\n    return reloadedOk;\n  }\n\n","sourceOld":"  protected boolean reloadCollection(Replica replica, String testCollectionName) throws Exception {\n    ZkCoreNodeProps coreProps = new ZkCoreNodeProps(replica);\n    String coreName = coreProps.getCoreName();\n    boolean reloadedOk = false;\n    try (HttpSolrClient client = getHttpSolrClient(coreProps.getBaseUrl())) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(coreName, client);\n      long leaderCoreStartTime = statusResp.getStartTime(coreName).getTime();\n\n      Thread.sleep(1000);\n\n      // send reload command for the collection\n      log.info(\"Sending RELOAD command for \"+testCollectionName);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.RELOAD.toString());\n      params.set(\"name\", testCollectionName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n      Thread.sleep(2000); // reload can take a short while\n\n      // verify reload is done, waiting up to 30 seconds for slow test environments\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n      while (System.nanoTime() < timeout) {\n        statusResp = CoreAdminRequest.getStatus(coreName, client);\n        long startTimeAfterReload = statusResp.getStartTime(coreName).getTime();\n        if (startTimeAfterReload > leaderCoreStartTime) {\n          reloadedOk = true;\n          break;\n        }\n        // else ... still waiting to see the reloaded core report a later start time\n        Thread.sleep(1000);\n      }\n    }\n    return reloadedOk;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#reloadCollection(Replica,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#reloadCollection(Replica,String).mjava","sourceNew":"  protected boolean reloadCollection(Replica replica, String testCollectionName) throws Exception {\n    ZkCoreNodeProps coreProps = new ZkCoreNodeProps(replica);\n    String coreName = coreProps.getCoreName();\n    boolean reloadedOk = false;\n    try (HttpSolrClient client = getHttpSolrClient(coreProps.getBaseUrl())) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(coreName, client);\n      long leaderCoreStartTime = statusResp.getStartTime(coreName).getTime();\n\n      Thread.sleep(1000);\n\n      // send reload command for the collection\n      log.info(\"Sending RELOAD command for {}\", testCollectionName);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.RELOAD.toString());\n      params.set(\"name\", testCollectionName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n      Thread.sleep(2000); // reload can take a short while\n\n      // verify reload is done, waiting up to 30 seconds for slow test environments\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n      while (System.nanoTime() < timeout) {\n        statusResp = CoreAdminRequest.getStatus(coreName, client);\n        long startTimeAfterReload = statusResp.getStartTime(coreName).getTime();\n        if (startTimeAfterReload > leaderCoreStartTime) {\n          reloadedOk = true;\n          break;\n        }\n        // else ... still waiting to see the reloaded core report a later start time\n        Thread.sleep(1000);\n      }\n    }\n    return reloadedOk;\n  }\n\n","sourceOld":"  protected boolean reloadCollection(Replica replica, String testCollectionName) throws Exception {\n    ZkCoreNodeProps coreProps = new ZkCoreNodeProps(replica);\n    String coreName = coreProps.getCoreName();\n    boolean reloadedOk = false;\n    try (HttpSolrClient client = getHttpSolrClient(coreProps.getBaseUrl())) {\n      CoreAdminResponse statusResp = CoreAdminRequest.getStatus(coreName, client);\n      long leaderCoreStartTime = statusResp.getStartTime(coreName).getTime();\n\n      Thread.sleep(1000);\n\n      // send reload command for the collection\n      log.info(\"Sending RELOAD command for \"+testCollectionName);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.RELOAD.toString());\n      params.set(\"name\", testCollectionName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n      Thread.sleep(2000); // reload can take a short while\n\n      // verify reload is done, waiting up to 30 seconds for slow test environments\n      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n      while (System.nanoTime() < timeout) {\n        statusResp = CoreAdminRequest.getStatus(coreName, client);\n        long startTimeAfterReload = statusResp.getStartTime(coreName).getTime();\n        if (startTimeAfterReload > leaderCoreStartTime) {\n          reloadedOk = true;\n          break;\n        }\n        // else ... still waiting to see the reloaded core report a later start time\n        Thread.sleep(1000);\n      }\n    }\n    return reloadedOk;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3"],"29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}