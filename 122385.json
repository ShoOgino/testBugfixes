{"path":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestNumberFormatTransformer#testTransformRow_MultipleNumbers().mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestNumberFormatTransformer#testTransformRow_MultipleNumbers().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testTransformRow_MultipleNumbers() throws Exception {\n    List fields = new ArrayList();\n    fields.add(AbstractDataImportHandlerTest.createMap(DataImporter.COLUMN,\n            \"inputs\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(DataImporter.COLUMN,\n            \"outputs\", RegexTransformer.SRC_COL_NAME, \"inputs\",\n            NumberFormatTransformer.FORMAT_STYLE, NumberFormatTransformer.NUMBER));\n\n    List inputs = new ArrayList();\n    inputs.add(\"123,567\");\n    inputs.add(\"245,678\");\n    Map row = AbstractDataImportHandlerTest.createMap(\"inputs\", inputs);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n\n    Context context = AbstractDataImportHandlerTest.getContext(null, resolver,\n            null, 0, fields, null);\n    new NumberFormatTransformer().transformRow(row, context);\n\n    List output = new ArrayList();\n    output.add(new Long(123567));\n    output.add(new Long(245678));\n    Map outputRow = AbstractDataImportHandlerTest.createMap(\"inputs\", inputs,\n            \"outputs\", output);\n\n    Assert.assertEquals(outputRow, row);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1377c0b1c5b1c273b200b230cf18dd0ef05c766a","date":1218790175,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestNumberFormatTransformer#testTransformRow_MultipleNumbers().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestNumberFormatTransformer#testTransformRow_MultipleNumbers().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testTransformRow_MultipleNumbers() throws Exception {\n    List fields = new ArrayList();\n    fields.add(AbstractDataImportHandlerTest.createMap(DataImporter.COLUMN,\n            \"inputs\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(DataImporter.COLUMN,\n            \"outputs\", RegexTransformer.SRC_COL_NAME, \"inputs\",\n            NumberFormatTransformer.FORMAT_STYLE, NumberFormatTransformer.NUMBER));\n\n    List inputs = new ArrayList();\n    inputs.add(\"123\" + GROUPING_SEP + \"567\");\n    inputs.add(\"245\" + GROUPING_SEP + \"678\");\n    Map row = AbstractDataImportHandlerTest.createMap(\"inputs\", inputs);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n\n    Context context = AbstractDataImportHandlerTest.getContext(null, resolver,\n            null, 0, fields, null);\n    new NumberFormatTransformer().transformRow(row, context);\n\n    List output = new ArrayList();\n    output.add(new Long(123567));\n    output.add(new Long(245678));\n    Map outputRow = AbstractDataImportHandlerTest.createMap(\"inputs\", inputs,\n            \"outputs\", output);\n\n    Assert.assertEquals(outputRow, row);\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testTransformRow_MultipleNumbers() throws Exception {\n    List fields = new ArrayList();\n    fields.add(AbstractDataImportHandlerTest.createMap(DataImporter.COLUMN,\n            \"inputs\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(DataImporter.COLUMN,\n            \"outputs\", RegexTransformer.SRC_COL_NAME, \"inputs\",\n            NumberFormatTransformer.FORMAT_STYLE, NumberFormatTransformer.NUMBER));\n\n    List inputs = new ArrayList();\n    inputs.add(\"123,567\");\n    inputs.add(\"245,678\");\n    Map row = AbstractDataImportHandlerTest.createMap(\"inputs\", inputs);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n\n    Context context = AbstractDataImportHandlerTest.getContext(null, resolver,\n            null, 0, fields, null);\n    new NumberFormatTransformer().transformRow(row, context);\n\n    List output = new ArrayList();\n    output.add(new Long(123567));\n    output.add(new Long(245678));\n    Map outputRow = AbstractDataImportHandlerTest.createMap(\"inputs\", inputs,\n            \"outputs\", output);\n\n    Assert.assertEquals(outputRow, row);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"594d4ee17b3d941ed34827ca6646e378cf7d8d2a","date":1239868870,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestNumberFormatTransformer#testTransformRow_MultipleNumbers().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestNumberFormatTransformer#testTransformRow_MultipleNumbers().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testTransformRow_MultipleNumbers() throws Exception {\n    List fields = new ArrayList();\n    fields.add(AbstractDataImportHandlerTest.createMap(DataImporter.COLUMN,\n            \"inputs\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(DataImporter.COLUMN,\n            \"outputs\", RegexTransformer.SRC_COL_NAME, \"inputs\",\n            NumberFormatTransformer.FORMAT_STYLE, NumberFormatTransformer.NUMBER));\n\n    List inputs = new ArrayList();\n    inputs.add(\"123\" + GROUPING_SEP + \"567\");\n    inputs.add(\"245\" + GROUPING_SEP + \"678\");\n    Map row = AbstractDataImportHandlerTest.createMap(\"inputs\", inputs);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n\n    Context context = AbstractDataImportHandlerTest.getContext(null, resolver, null, Context.FULL_DUMP, fields, null);\n    new NumberFormatTransformer().transformRow(row, context);\n\n    List output = new ArrayList();\n    output.add(new Long(123567));\n    output.add(new Long(245678));\n    Map outputRow = AbstractDataImportHandlerTest.createMap(\"inputs\", inputs,\n            \"outputs\", output);\n\n    Assert.assertEquals(outputRow, row);\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testTransformRow_MultipleNumbers() throws Exception {\n    List fields = new ArrayList();\n    fields.add(AbstractDataImportHandlerTest.createMap(DataImporter.COLUMN,\n            \"inputs\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(DataImporter.COLUMN,\n            \"outputs\", RegexTransformer.SRC_COL_NAME, \"inputs\",\n            NumberFormatTransformer.FORMAT_STYLE, NumberFormatTransformer.NUMBER));\n\n    List inputs = new ArrayList();\n    inputs.add(\"123\" + GROUPING_SEP + \"567\");\n    inputs.add(\"245\" + GROUPING_SEP + \"678\");\n    Map row = AbstractDataImportHandlerTest.createMap(\"inputs\", inputs);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n\n    Context context = AbstractDataImportHandlerTest.getContext(null, resolver,\n            null, 0, fields, null);\n    new NumberFormatTransformer().transformRow(row, context);\n\n    List output = new ArrayList();\n    output.add(new Long(123567));\n    output.add(new Long(245678));\n    Map outputRow = AbstractDataImportHandlerTest.createMap(\"inputs\", inputs,\n            \"outputs\", output);\n\n    Assert.assertEquals(outputRow, row);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestNumberFormatTransformer#testTransformRow_MultipleNumbers().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestNumberFormatTransformer#testTransformRow_MultipleNumbers().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testTransformRow_MultipleNumbers() throws Exception {\n    List fields = new ArrayList();\n    fields.add(AbstractDataImportHandlerTest.createMap(DataImporter.COLUMN,\n            \"inputs\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(DataImporter.COLUMN,\n            \"outputs\", RegexTransformer.SRC_COL_NAME, \"inputs\",\n            NumberFormatTransformer.FORMAT_STYLE, NumberFormatTransformer.NUMBER));\n\n    List inputs = new ArrayList();\n    inputs.add(\"123\" + GROUPING_SEP + \"567\");\n    inputs.add(\"245\" + GROUPING_SEP + \"678\");\n    Map row = AbstractDataImportHandlerTest.createMap(\"inputs\", inputs);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n\n    Context context = AbstractDataImportHandlerTest.getContext(null, resolver, null, Context.FULL_DUMP, fields, null);\n    new NumberFormatTransformer().transformRow(row, context);\n\n    List output = new ArrayList();\n    output.add(new Long(123567));\n    output.add(new Long(245678));\n    Map outputRow = AbstractDataImportHandlerTest.createMap(\"inputs\", inputs,\n            \"outputs\", output);\n\n    Assert.assertEquals(outputRow, row);\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testTransformRow_MultipleNumbers() throws Exception {\n    List fields = new ArrayList();\n    fields.add(AbstractDataImportHandlerTest.createMap(DataImporter.COLUMN,\n            \"inputs\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(DataImporter.COLUMN,\n            \"outputs\", RegexTransformer.SRC_COL_NAME, \"inputs\",\n            NumberFormatTransformer.FORMAT_STYLE, NumberFormatTransformer.NUMBER));\n\n    List inputs = new ArrayList();\n    inputs.add(\"123\" + GROUPING_SEP + \"567\");\n    inputs.add(\"245\" + GROUPING_SEP + \"678\");\n    Map row = AbstractDataImportHandlerTest.createMap(\"inputs\", inputs);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n\n    Context context = AbstractDataImportHandlerTest.getContext(null, resolver, null, Context.FULL_DUMP, fields, null);\n    new NumberFormatTransformer().transformRow(row, context);\n\n    List output = new ArrayList();\n    output.add(new Long(123567));\n    output.add(new Long(245678));\n    Map outputRow = AbstractDataImportHandlerTest.createMap(\"inputs\", inputs,\n            \"outputs\", output);\n\n    Assert.assertEquals(outputRow, row);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1377c0b1c5b1c273b200b230cf18dd0ef05c766a":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["594d4ee17b3d941ed34827ca6646e378cf7d8d2a"],"594d4ee17b3d941ed34827ca6646e378cf7d8d2a":["1377c0b1c5b1c273b200b230cf18dd0ef05c766a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["1377c0b1c5b1c273b200b230cf18dd0ef05c766a"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1377c0b1c5b1c273b200b230cf18dd0ef05c766a":["594d4ee17b3d941ed34827ca6646e378cf7d8d2a"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"594d4ee17b3d941ed34827ca6646e378cf7d8d2a":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}