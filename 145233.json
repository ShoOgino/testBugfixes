{"path":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testGetTermSet().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testGetTermSet().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testGetTermSet().mjava","sourceNew":"  public void testGetTermSet() throws Exception {\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(F, \"A\")), Occur.MUST);\n    query.add(new TermQuery(new Term(F, \"B\")), Occur.MUST);\n    query.add(new TermQuery(new Term(\"x\", \"C\")), Occur.SHOULD);\n\n    BooleanQuery innerQuery = new BooleanQuery();\n    innerQuery.add(new TermQuery(new Term(F, \"D\")), Occur.MUST);\n    innerQuery.add(new TermQuery(new Term(F, \"E\")), Occur.MUST);\n    query.add(innerQuery, Occur.MUST_NOT);\n\n    FieldQuery fq = new FieldQuery( query, true, true );\n    assertEquals( 2, fq.termSetMap.size() );\n    Set<String> termSet = fq.getTermSet( F );\n    assertEquals( 2, termSet.size() );\n    assertTrue( termSet.contains( \"A\" ) );\n    assertTrue( termSet.contains( \"B\" ) );\n    termSet = fq.getTermSet( \"x\" );\n    assertEquals( 1, termSet.size() );\n    assertTrue( termSet.contains( \"C\" ) );\n    termSet = fq.getTermSet( \"y\" );\n    assertNull( termSet );\n  }\n\n","sourceOld":"  public void testGetTermSet() throws Exception {\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(F, \"A\")), Occur.MUST);\n    query.add(new TermQuery(new Term(F, \"B\")), Occur.MUST);\n    query.add(new TermQuery(new Term(\"x\", \"C\")), Occur.SHOULD);\n\n    BooleanQuery innerQuery = new BooleanQuery();\n    innerQuery.add(new TermQuery(new Term(F, \"D\")), Occur.MUST);\n    innerQuery.add(new TermQuery(new Term(F, \"E\")), Occur.MUST);\n    query.add(innerQuery, Occur.MUST_NOT);\n\n    FieldQuery fq = new FieldQuery( query, true, true );\n    assertEquals( 2, fq.termSetMap.size() );\n    Set<String> termSet = fq.getTermSet( F );\n    assertEquals( 2, termSet.size() );\n    assertTrue( termSet.contains( \"A\" ) );\n    assertTrue( termSet.contains( \"B\" ) );\n    termSet = fq.getTermSet( \"x\" );\n    assertEquals( 1, termSet.size() );\n    assertTrue( termSet.contains( \"C\" ) );\n    termSet = fq.getTermSet( \"y\" );\n    assertNull( termSet );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testGetTermSet().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testGetTermSet().mjava","sourceNew":"  public void testGetTermSet() throws Exception {\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(F, \"A\")), Occur.MUST);\n    query.add(new TermQuery(new Term(F, \"B\")), Occur.MUST);\n    query.add(new TermQuery(new Term(\"x\", \"C\")), Occur.SHOULD);\n\n    BooleanQuery.Builder innerQuery = new BooleanQuery.Builder();\n    innerQuery.add(new TermQuery(new Term(F, \"D\")), Occur.MUST);\n    innerQuery.add(new TermQuery(new Term(F, \"E\")), Occur.MUST);\n    query.add(innerQuery.build(), Occur.MUST_NOT);\n\n    FieldQuery fq = new FieldQuery( query.build(), true, true );\n    assertEquals( 2, fq.termSetMap.size() );\n    Set<String> termSet = fq.getTermSet( F );\n    assertEquals( 2, termSet.size() );\n    assertTrue( termSet.contains( \"A\" ) );\n    assertTrue( termSet.contains( \"B\" ) );\n    termSet = fq.getTermSet( \"x\" );\n    assertEquals( 1, termSet.size() );\n    assertTrue( termSet.contains( \"C\" ) );\n    termSet = fq.getTermSet( \"y\" );\n    assertNull( termSet );\n  }\n\n","sourceOld":"  public void testGetTermSet() throws Exception {\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(F, \"A\")), Occur.MUST);\n    query.add(new TermQuery(new Term(F, \"B\")), Occur.MUST);\n    query.add(new TermQuery(new Term(\"x\", \"C\")), Occur.SHOULD);\n\n    BooleanQuery innerQuery = new BooleanQuery();\n    innerQuery.add(new TermQuery(new Term(F, \"D\")), Occur.MUST);\n    innerQuery.add(new TermQuery(new Term(F, \"E\")), Occur.MUST);\n    query.add(innerQuery, Occur.MUST_NOT);\n\n    FieldQuery fq = new FieldQuery( query, true, true );\n    assertEquals( 2, fq.termSetMap.size() );\n    Set<String> termSet = fq.getTermSet( F );\n    assertEquals( 2, termSet.size() );\n    assertTrue( termSet.contains( \"A\" ) );\n    assertTrue( termSet.contains( \"B\" ) );\n    termSet = fq.getTermSet( \"x\" );\n    assertEquals( 1, termSet.size() );\n    assertTrue( termSet.contains( \"C\" ) );\n    termSet = fq.getTermSet( \"y\" );\n    assertNull( termSet );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}