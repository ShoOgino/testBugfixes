{"path":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleDeleteShardAction(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"4ee5a5186e7187cd42c6f7ff64b6e7206a780325","date":1372914261,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleDeleteShardAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  private void handleDeleteShardAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws InterruptedException, KeeperException {\n    log.info(\"Deleting Shard : \" + req.getParamString());\n    String name = req.getParams().required().get(\"collection\");\n    String shard = req.getParams().required().get(\"shard\");\n    \n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(\"collection\", name);\n    props.put(Overseer.QUEUE_OPERATION, OverseerCollectionProcessor.DELETESHARD);\n    props.put(ZkStateReader.SHARD_ID_PROP, shard);\n\n    ZkNodeProps m = new ZkNodeProps(props);\n    handleResponse(OverseerCollectionProcessor.DELETESHARD, m, rsp);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0b5f2c825882b5378afd6f911e0d1cd0274b7410"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleDeleteShardAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  private void handleDeleteShardAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws InterruptedException, KeeperException {\n    log.info(\"Deleting Shard : \" + req.getParamString());\n    String name = req.getParams().required().get(\"collection\");\n    String shard = req.getParams().required().get(\"shard\");\n    \n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(\"collection\", name);\n    props.put(Overseer.QUEUE_OPERATION, OverseerCollectionProcessor.DELETESHARD);\n    props.put(ZkStateReader.SHARD_ID_PROP, shard);\n\n    ZkNodeProps m = new ZkNodeProps(props);\n    handleResponse(OverseerCollectionProcessor.DELETESHARD, m, rsp);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b5f2c825882b5378afd6f911e0d1cd0274b7410","date":1378970050,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleDeleteShardAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleDeleteShardAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleDeleteShardAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws InterruptedException, KeeperException {\n    log.info(\"Deleting Shard : \" + req.getParamString());\n    String name = req.getParams().required().get(ZkStateReader.COLLECTION_PROP);\n    String shard = req.getParams().required().get(ZkStateReader.SHARD_ID_PROP);\n    \n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(ZkStateReader.COLLECTION_PROP, name);\n    props.put(Overseer.QUEUE_OPERATION, OverseerCollectionProcessor.DELETESHARD);\n    props.put(ZkStateReader.SHARD_ID_PROP, shard);\n\n    ZkNodeProps m = new ZkNodeProps(props);\n    handleResponse(OverseerCollectionProcessor.DELETESHARD, m, rsp);\n  }\n\n","sourceOld":"  private void handleDeleteShardAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws InterruptedException, KeeperException {\n    log.info(\"Deleting Shard : \" + req.getParamString());\n    String name = req.getParams().required().get(\"collection\");\n    String shard = req.getParams().required().get(\"shard\");\n    \n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(\"collection\", name);\n    props.put(Overseer.QUEUE_OPERATION, OverseerCollectionProcessor.DELETESHARD);\n    props.put(ZkStateReader.SHARD_ID_PROP, shard);\n\n    ZkNodeProps m = new ZkNodeProps(props);\n    handleResponse(OverseerCollectionProcessor.DELETESHARD, m, rsp);\n  }\n\n","bugFix":["4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleDeleteShardAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleDeleteShardAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleDeleteShardAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws InterruptedException, KeeperException {\n    log.info(\"Deleting Shard : \" + req.getParamString());\n    String name = req.getParams().required().get(ZkStateReader.COLLECTION_PROP);\n    String shard = req.getParams().required().get(ZkStateReader.SHARD_ID_PROP);\n    \n    Map<String,Object> props = new HashMap<>();\n    props.put(ZkStateReader.COLLECTION_PROP, name);\n    props.put(Overseer.QUEUE_OPERATION, OverseerCollectionProcessor.DELETESHARD);\n    props.put(ZkStateReader.SHARD_ID_PROP, shard);\n\n    ZkNodeProps m = new ZkNodeProps(props);\n    handleResponse(OverseerCollectionProcessor.DELETESHARD, m, rsp);\n  }\n\n","sourceOld":"  private void handleDeleteShardAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws InterruptedException, KeeperException {\n    log.info(\"Deleting Shard : \" + req.getParamString());\n    String name = req.getParams().required().get(ZkStateReader.COLLECTION_PROP);\n    String shard = req.getParams().required().get(ZkStateReader.SHARD_ID_PROP);\n    \n    Map<String,Object> props = new HashMap<String,Object>();\n    props.put(ZkStateReader.COLLECTION_PROP, name);\n    props.put(Overseer.QUEUE_OPERATION, OverseerCollectionProcessor.DELETESHARD);\n    props.put(ZkStateReader.SHARD_ID_PROP, shard);\n\n    ZkNodeProps m = new ZkNodeProps(props);\n    handleResponse(OverseerCollectionProcessor.DELETESHARD, m, rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleDeleteShardAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleDeleteShardAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleDeleteShardAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws InterruptedException, KeeperException {\n    log.info(\"Deleting Shard : \" + req.getParamString());\n    String name = req.getParams().required().get(ZkStateReader.COLLECTION_PROP);\n    String shard = req.getParams().required().get(ZkStateReader.SHARD_ID_PROP);\n\n    Map<String,Object> props = new HashMap<>();\n    props.put(ZkStateReader.COLLECTION_PROP, name);\n    props.put(Overseer.QUEUE_OPERATION, OverseerCollectionProcessor.DELETESHARD);\n    props.put(ZkStateReader.SHARD_ID_PROP, shard);\n\n    ZkNodeProps m = new ZkNodeProps(props);\n    handleResponse(OverseerCollectionProcessor.DELETESHARD, m, rsp);\n  }\n\n","sourceOld":"  private void handleDeleteShardAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws InterruptedException, KeeperException {\n    log.info(\"Deleting Shard : \" + req.getParamString());\n    String name = req.getParams().required().get(ZkStateReader.COLLECTION_PROP);\n    String shard = req.getParams().required().get(ZkStateReader.SHARD_ID_PROP);\n    \n    Map<String,Object> props = new HashMap<>();\n    props.put(ZkStateReader.COLLECTION_PROP, name);\n    props.put(Overseer.QUEUE_OPERATION, OverseerCollectionProcessor.DELETESHARD);\n    props.put(ZkStateReader.SHARD_ID_PROP, shard);\n\n    ZkNodeProps m = new ZkNodeProps(props);\n    handleResponse(OverseerCollectionProcessor.DELETESHARD, m, rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleDeleteShardAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleDeleteShardAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleDeleteShardAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws InterruptedException, KeeperException {\n    log.info(\"Deleting Shard : \" + req.getParamString());\n    String name = req.getParams().required().get(ZkStateReader.COLLECTION_PROP);\n    String shard = req.getParams().required().get(ZkStateReader.SHARD_ID_PROP);\n    \n    Map<String,Object> props = new HashMap<>();\n    props.put(ZkStateReader.COLLECTION_PROP, name);\n    props.put(Overseer.QUEUE_OPERATION, OverseerCollectionProcessor.DELETESHARD);\n    props.put(ZkStateReader.SHARD_ID_PROP, shard);\n\n    ZkNodeProps m = new ZkNodeProps(props);\n    handleResponse(OverseerCollectionProcessor.DELETESHARD, m, rsp);\n  }\n\n","sourceOld":"  private void handleDeleteShardAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws InterruptedException, KeeperException {\n    log.info(\"Deleting Shard : \" + req.getParamString());\n    String name = req.getParams().required().get(ZkStateReader.COLLECTION_PROP);\n    String shard = req.getParams().required().get(ZkStateReader.SHARD_ID_PROP);\n\n    Map<String,Object> props = new HashMap<>();\n    props.put(ZkStateReader.COLLECTION_PROP, name);\n    props.put(Overseer.QUEUE_OPERATION, OverseerCollectionProcessor.DELETESHARD);\n    props.put(ZkStateReader.SHARD_ID_PROP, shard);\n\n    ZkNodeProps m = new ZkNodeProps(props);\n    handleResponse(OverseerCollectionProcessor.DELETESHARD, m, rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c688f7052130cef7bd419c85e3c5be214f7b9e","date":1411018984,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleDeleteShardAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleDeleteShardAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleDeleteShardAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws InterruptedException, KeeperException {\n    log.info(\"Deleting Shard : \" + req.getParamString());\n    String name = req.getParams().required().get(ZkStateReader.COLLECTION_PROP);\n    String shard = req.getParams().required().get(ZkStateReader.SHARD_ID_PROP);\n    \n    Map<String,Object> props = new HashMap<>();\n    props.put(ZkStateReader.COLLECTION_PROP, name);\n    props.put(Overseer.QUEUE_OPERATION, DELETESHARD.toLower());\n    props.put(ZkStateReader.SHARD_ID_PROP, shard);\n\n    ZkNodeProps m = new ZkNodeProps(props);\n    handleResponse(DELETESHARD.toLower(), m, rsp);\n  }\n\n","sourceOld":"  private void handleDeleteShardAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws InterruptedException, KeeperException {\n    log.info(\"Deleting Shard : \" + req.getParamString());\n    String name = req.getParams().required().get(ZkStateReader.COLLECTION_PROP);\n    String shard = req.getParams().required().get(ZkStateReader.SHARD_ID_PROP);\n    \n    Map<String,Object> props = new HashMap<>();\n    props.put(ZkStateReader.COLLECTION_PROP, name);\n    props.put(Overseer.QUEUE_OPERATION, OverseerCollectionProcessor.DELETESHARD);\n    props.put(ZkStateReader.SHARD_ID_PROP, shard);\n\n    ZkNodeProps m = new ZkNodeProps(props);\n    handleResponse(OverseerCollectionProcessor.DELETESHARD, m, rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ebd3a557326ef3eab85b73a8cff781f7d801248","date":1431620752,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleDeleteShardAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  private void handleDeleteShardAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws InterruptedException, KeeperException {\n    log.info(\"Deleting Shard : \" + req.getParamString());\n    String name = req.getParams().required().get(ZkStateReader.COLLECTION_PROP);\n    String shard = req.getParams().required().get(ZkStateReader.SHARD_ID_PROP);\n    \n    Map<String,Object> props = new HashMap<>();\n    props.put(ZkStateReader.COLLECTION_PROP, name);\n    props.put(Overseer.QUEUE_OPERATION, DELETESHARD.toLower());\n    props.put(ZkStateReader.SHARD_ID_PROP, shard);\n\n    ZkNodeProps m = new ZkNodeProps(props);\n    handleResponse(DELETESHARD.toLower(), m, rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0b5f2c825882b5378afd6f911e0d1cd0274b7410"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ebd3a557326ef3eab85b73a8cff781f7d801248":["30c688f7052130cef7bd419c85e3c5be214f7b9e"],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"0b5f2c825882b5378afd6f911e0d1cd0274b7410":["4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"4ee5a5186e7187cd42c6f7ff64b6e7206a780325":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ebd3a557326ef3eab85b73a8cff781f7d801248"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["30c688f7052130cef7bd419c85e3c5be214f7b9e"],"9ebd3a557326ef3eab85b73a8cff781f7d801248":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0b5f2c825882b5378afd6f911e0d1cd0274b7410":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["9ebd3a557326ef3eab85b73a8cff781f7d801248"],"4ee5a5186e7187cd42c6f7ff64b6e7206a780325":["37a0f60745e53927c4c876cfe5b5a58170f0646c","0b5f2c825882b5378afd6f911e0d1cd0274b7410"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}