{"path":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testCoreUnload().mjava","commits":[{"id":"c51a2dcb8b4e1820a44f35f11961110201e06cdb","date":1329994529,"type":0,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testCoreUnload().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCoreUnload() throws Exception {\n    \n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n      System.setProperty(\"solrcloud.skip.autorecovery\", \"true\");\n      \n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT,\n          10000, \"localhost\", \"8983\", \"solr\",\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      \n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/conf\")\n          .getAbsolutePath());\n      \n      final int numShards = 2;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegisterSetup(null, desc1, false);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard1\", ids[1]);\n      \n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      \n      // unregister current leader\n      final ZkNodeProps shard1LeaderProps = reader.getLeaderProps(\n          \"collection1\", \"shard1\");\n      final String leaderUrl = reader.getLeaderUrl(\"collection1\", \"shard1\",\n          15000);\n      \n      final CloudDescriptor collection1Desc = new CloudDescriptor();\n      collection1Desc.setCollectionName(\"collection1\");\n      final CoreDescriptor desc1 = new CoreDescriptor(null,\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), \"\");\n      desc1.setCloudDescriptor(collection1Desc);\n      zkController.unregister(\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), collection1Desc);\n      assertNotSame(\n          \"New leader was not promoted after unregistering the current leader.\",\n          leaderUrl, reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(\"New leader was null.\",\n          reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f02d397443607939c8230cae13093449e065bd18"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1fa075b2493faf88afb5a68a9495e8421aeb61ce","date":1329994717,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testCoreUnload().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testCoreUnload().mjava","sourceNew":"  @Test\n  public void testCoreUnload() throws Exception {\n    \n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n      System.setProperty(\"solrcloud.skip.autorecovery\", \"true\");\n      \n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT,\n          10000, \"localhost\", \"8983\", \"solr\",\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      \n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/conf\")\n          .getAbsolutePath());\n      \n      final int numShards = 2;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegisterSetup(null, desc1, false);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard1\", ids[1]);\n      \n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      \n      // unregister current leader\n      final ZkNodeProps shard1LeaderProps = reader.getLeaderProps(\n          \"collection1\", \"shard1\");\n      final String leaderUrl = reader.getLeaderUrl(\"collection1\", \"shard1\",\n          15000);\n      \n      final CloudDescriptor collection1Desc = new CloudDescriptor();\n      collection1Desc.setCollectionName(\"collection1\");\n      final CoreDescriptor desc1 = new CoreDescriptor(null,\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), \"\");\n      desc1.setCloudDescriptor(collection1Desc);\n      zkController.unregister(\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), collection1Desc);\n      assertNotSame(\n          \"New leader was not promoted after unregistering the current leader.\",\n          leaderUrl, reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(\"New leader was null.\",\n          reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n      System.clearProperty(\"solrcloud.skip.autorecovery\");\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCoreUnload() throws Exception {\n    \n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n      System.setProperty(\"solrcloud.skip.autorecovery\", \"true\");\n      \n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT,\n          10000, \"localhost\", \"8983\", \"solr\",\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      \n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/conf\")\n          .getAbsolutePath());\n      \n      final int numShards = 2;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegisterSetup(null, desc1, false);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard1\", ids[1]);\n      \n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      \n      // unregister current leader\n      final ZkNodeProps shard1LeaderProps = reader.getLeaderProps(\n          \"collection1\", \"shard1\");\n      final String leaderUrl = reader.getLeaderUrl(\"collection1\", \"shard1\",\n          15000);\n      \n      final CloudDescriptor collection1Desc = new CloudDescriptor();\n      collection1Desc.setCollectionName(\"collection1\");\n      final CoreDescriptor desc1 = new CoreDescriptor(null,\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), \"\");\n      desc1.setCloudDescriptor(collection1Desc);\n      zkController.unregister(\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), collection1Desc);\n      assertNotSame(\n          \"New leader was not promoted after unregistering the current leader.\",\n          leaderUrl, reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(\"New leader was null.\",\n          reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    }\n  }\n\n","bugFix":null,"bugIntro":["f02d397443607939c8230cae13093449e065bd18"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"931370eedd3a5fac34f9e939f0144fa2d8d87699","date":1329997440,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testCoreUnload().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testCoreUnload().mjava","sourceNew":"  @Test\n  public void testCoreUnload() throws Exception {\n    \n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n      System.setProperty(\"solrcloud.skip.autorecovery\", \"true\");\n      \n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT,\n          10000, \"localhost\", \"8983\", \"solr\",\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      \n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/conf\")\n          .getAbsolutePath());\n      \n      final int numShards = 2;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegisterSetup(null, desc1, false);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard1\", ids[1]);\n      \n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      \n      assertEquals(\"Shard(s) missing from cloudstate\", 2, zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size());\n      \n      // unregister current leader\n      final ZkNodeProps shard1LeaderProps = reader.getLeaderProps(\n          \"collection1\", \"shard1\");\n      final String leaderUrl = reader.getLeaderUrl(\"collection1\", \"shard1\",\n          15000);\n      \n      final CloudDescriptor collection1Desc = new CloudDescriptor();\n      collection1Desc.setCollectionName(\"collection1\");\n      final CoreDescriptor desc1 = new CoreDescriptor(null,\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), \"\");\n      desc1.setCloudDescriptor(collection1Desc);\n      zkController.unregister(\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), collection1Desc);\n      assertNotSame(\n          \"New leader was not promoted after unregistering the current leader.\",\n          leaderUrl, reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(\"New leader was null.\",\n          reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n\n      Thread.sleep(1000);\n      assertEquals(\"shard was not unregistered\", 1, zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size());\n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n      System.clearProperty(\"solrcloud.skip.autorecovery\");\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCoreUnload() throws Exception {\n    \n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n      System.setProperty(\"solrcloud.skip.autorecovery\", \"true\");\n      \n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT,\n          10000, \"localhost\", \"8983\", \"solr\",\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      \n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/conf\")\n          .getAbsolutePath());\n      \n      final int numShards = 2;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegisterSetup(null, desc1, false);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard1\", ids[1]);\n      \n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      \n      // unregister current leader\n      final ZkNodeProps shard1LeaderProps = reader.getLeaderProps(\n          \"collection1\", \"shard1\");\n      final String leaderUrl = reader.getLeaderUrl(\"collection1\", \"shard1\",\n          15000);\n      \n      final CloudDescriptor collection1Desc = new CloudDescriptor();\n      collection1Desc.setCollectionName(\"collection1\");\n      final CoreDescriptor desc1 = new CoreDescriptor(null,\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), \"\");\n      desc1.setCloudDescriptor(collection1Desc);\n      zkController.unregister(\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), collection1Desc);\n      assertNotSame(\n          \"New leader was not promoted after unregistering the current leader.\",\n          leaderUrl, reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(\"New leader was null.\",\n          reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n      System.clearProperty(\"solrcloud.skip.autorecovery\");\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e5d7ab59f0099e16088708b33380ac2f851705a6","date":1330068668,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testCoreUnload().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testCoreUnload().mjava","sourceNew":"  @Test\n  public void testCoreUnload() throws Exception {\n    \n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n      System.setProperty(\"solrcloud.skip.autorecovery\", \"true\");\n      \n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT,\n          10000, \"localhost\", \"8983\", \"solr\",\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      \n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/conf\")\n          .getAbsolutePath());\n      \n      final int numShards = 2;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegisterSetup(null, desc1, false);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard1\", ids[1]);\n      \n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      \n      assertEquals(\"Shard(s) missing from cloudstate\", 2, zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size());\n      \n      // unregister current leader\n      final ZkNodeProps shard1LeaderProps = reader.getLeaderProps(\n          \"collection1\", \"shard1\");\n      final String leaderUrl = reader.getLeaderUrl(\"collection1\", \"shard1\",\n          15000);\n      \n      final CloudDescriptor collection1Desc = new CloudDescriptor();\n      collection1Desc.setCollectionName(\"collection1\");\n      final CoreDescriptor desc1 = new CoreDescriptor(null,\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), \"\");\n      desc1.setCloudDescriptor(collection1Desc);\n      zkController.unregister(\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), collection1Desc);\n      assertNotSame(\n          \"New leader was not promoted after unregistering the current leader.\",\n          leaderUrl, reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(\"New leader was null.\",\n          reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n\n      Thread.sleep(2000);\n      assertEquals(\"shard was not unregistered\", 1, zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size());\n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n      System.clearProperty(\"solrcloud.skip.autorecovery\");\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCoreUnload() throws Exception {\n    \n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n      System.setProperty(\"solrcloud.skip.autorecovery\", \"true\");\n      \n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT,\n          10000, \"localhost\", \"8983\", \"solr\",\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      \n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/conf\")\n          .getAbsolutePath());\n      \n      final int numShards = 2;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegisterSetup(null, desc1, false);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard1\", ids[1]);\n      \n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      \n      assertEquals(\"Shard(s) missing from cloudstate\", 2, zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size());\n      \n      // unregister current leader\n      final ZkNodeProps shard1LeaderProps = reader.getLeaderProps(\n          \"collection1\", \"shard1\");\n      final String leaderUrl = reader.getLeaderUrl(\"collection1\", \"shard1\",\n          15000);\n      \n      final CloudDescriptor collection1Desc = new CloudDescriptor();\n      collection1Desc.setCollectionName(\"collection1\");\n      final CoreDescriptor desc1 = new CoreDescriptor(null,\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), \"\");\n      desc1.setCloudDescriptor(collection1Desc);\n      zkController.unregister(\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), collection1Desc);\n      assertNotSame(\n          \"New leader was not promoted after unregistering the current leader.\",\n          leaderUrl, reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(\"New leader was null.\",\n          reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n\n      Thread.sleep(1000);\n      assertEquals(\"shard was not unregistered\", 1, zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size());\n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n      System.clearProperty(\"solrcloud.skip.autorecovery\");\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9813dd0748537c429b7c0a9b4723ea1ba496c047","date":1330304954,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testCoreUnload().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testCoreUnload().mjava","sourceNew":"  @Test\n  public void testCoreUnload() throws Exception {\n    \n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n      System.setProperty(\"solrcloud.skip.autorecovery\", \"true\");\n      \n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT,\n          10000, \"localhost\", \"8983\", \"solr\",\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      \n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/conf\")\n          .getAbsolutePath());\n      \n      final int numShards = 2;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegister(desc1);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard1\", ids[1]);\n      \n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      \n      assertEquals(\"Shard(s) missing from cloudstate\", 2, zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size());\n      \n      // unregister current leader\n      final ZkNodeProps shard1LeaderProps = reader.getLeaderProps(\n          \"collection1\", \"shard1\");\n      final String leaderUrl = reader.getLeaderUrl(\"collection1\", \"shard1\",\n          15000);\n      \n      final CloudDescriptor collection1Desc = new CloudDescriptor();\n      collection1Desc.setCollectionName(\"collection1\");\n      final CoreDescriptor desc1 = new CoreDescriptor(null,\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), \"\");\n      desc1.setCloudDescriptor(collection1Desc);\n      zkController.unregister(\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), collection1Desc);\n      assertNotSame(\n          \"New leader was not promoted after unregistering the current leader.\",\n          leaderUrl, reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(\"New leader was null.\",\n          reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n\n      Thread.sleep(2000);\n      assertEquals(\"shard was not unregistered\", 1, zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size());\n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n      System.clearProperty(\"solrcloud.skip.autorecovery\");\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCoreUnload() throws Exception {\n    \n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n      System.setProperty(\"solrcloud.skip.autorecovery\", \"true\");\n      \n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT,\n          10000, \"localhost\", \"8983\", \"solr\",\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      \n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/conf\")\n          .getAbsolutePath());\n      \n      final int numShards = 2;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegisterSetup(null, desc1, false);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard1\", ids[1]);\n      \n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      \n      assertEquals(\"Shard(s) missing from cloudstate\", 2, zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size());\n      \n      // unregister current leader\n      final ZkNodeProps shard1LeaderProps = reader.getLeaderProps(\n          \"collection1\", \"shard1\");\n      final String leaderUrl = reader.getLeaderUrl(\"collection1\", \"shard1\",\n          15000);\n      \n      final CloudDescriptor collection1Desc = new CloudDescriptor();\n      collection1Desc.setCollectionName(\"collection1\");\n      final CoreDescriptor desc1 = new CoreDescriptor(null,\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), \"\");\n      desc1.setCloudDescriptor(collection1Desc);\n      zkController.unregister(\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), collection1Desc);\n      assertNotSame(\n          \"New leader was not promoted after unregistering the current leader.\",\n          leaderUrl, reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(\"New leader was null.\",\n          reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n\n      Thread.sleep(2000);\n      assertEquals(\"shard was not unregistered\", 1, zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size());\n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n      System.clearProperty(\"solrcloud.skip.autorecovery\");\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f02d397443607939c8230cae13093449e065bd18","date":1330884364,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testCoreUnload().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testCoreUnload().mjava","sourceNew":"  @Test\n  public void testCoreUnload() throws Exception {\n    \n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n      System.setProperty(\"solrcloud.skip.autorecovery\", \"true\");\n      \n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT,\n          10000, \"localhost\", \"8983\", \"solr\",\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      \n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/conf\")\n          .getAbsolutePath());\n      \n      final int numShards = 2;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegister(desc1);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard1\", ids[1]);\n      \n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      \n      assertEquals(\"Shard(s) missing from cloudstate\", 2, zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size());\n      \n      // unregister current leader\n      final ZkNodeProps shard1LeaderProps = reader.getLeaderProps(\n          \"collection1\", \"shard1\");\n      final String leaderUrl = reader.getLeaderUrl(\"collection1\", \"shard1\",\n          15000);\n      \n      final CloudDescriptor collection1Desc = new CloudDescriptor();\n      collection1Desc.setCollectionName(\"collection1\");\n      final CoreDescriptor desc1 = new CoreDescriptor(null,\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), \"\");\n      desc1.setCloudDescriptor(collection1Desc);\n      zkController.unregister(\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), collection1Desc);\n      assertNotSame(\n          \"New leader was not promoted after unregistering the current leader.\",\n          leaderUrl, reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(\"New leader was null.\",\n          reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n\n      Thread.sleep(2000);\n      assertEquals(\"shard was not unregistered\", 1, zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size());\n    } finally {\n      System.clearProperty(\"solrcloud.skip.autorecovery\");\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      System.clearProperty(\"bootstrap_confdir\");\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCoreUnload() throws Exception {\n    \n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n      System.setProperty(\"solrcloud.skip.autorecovery\", \"true\");\n      \n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT,\n          10000, \"localhost\", \"8983\", \"solr\",\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      \n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/conf\")\n          .getAbsolutePath());\n      \n      final int numShards = 2;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegister(desc1);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard1\", ids[1]);\n      \n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      \n      assertEquals(\"Shard(s) missing from cloudstate\", 2, zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size());\n      \n      // unregister current leader\n      final ZkNodeProps shard1LeaderProps = reader.getLeaderProps(\n          \"collection1\", \"shard1\");\n      final String leaderUrl = reader.getLeaderUrl(\"collection1\", \"shard1\",\n          15000);\n      \n      final CloudDescriptor collection1Desc = new CloudDescriptor();\n      collection1Desc.setCollectionName(\"collection1\");\n      final CoreDescriptor desc1 = new CoreDescriptor(null,\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), \"\");\n      desc1.setCloudDescriptor(collection1Desc);\n      zkController.unregister(\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), collection1Desc);\n      assertNotSame(\n          \"New leader was not promoted after unregistering the current leader.\",\n          leaderUrl, reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(\"New leader was null.\",\n          reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n\n      Thread.sleep(2000);\n      assertEquals(\"shard was not unregistered\", 1, zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size());\n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n      System.clearProperty(\"solrcloud.skip.autorecovery\");\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n    }\n  }\n\n","bugFix":["1fa075b2493faf88afb5a68a9495e8421aeb61ce","c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testCoreUnload().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCoreUnload() throws Exception {\n    \n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n      System.setProperty(\"solrcloud.skip.autorecovery\", \"true\");\n      \n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT,\n          10000, \"localhost\", \"8983\", \"solr\",\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      \n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/conf\")\n          .getAbsolutePath());\n      \n      final int numShards = 2;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegister(desc1);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard1\", ids[1]);\n      \n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      \n      assertEquals(\"Shard(s) missing from cloudstate\", 2, zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size());\n      \n      // unregister current leader\n      final ZkNodeProps shard1LeaderProps = reader.getLeaderProps(\n          \"collection1\", \"shard1\");\n      final String leaderUrl = reader.getLeaderUrl(\"collection1\", \"shard1\",\n          15000);\n      \n      final CloudDescriptor collection1Desc = new CloudDescriptor();\n      collection1Desc.setCollectionName(\"collection1\");\n      final CoreDescriptor desc1 = new CoreDescriptor(null,\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), \"\");\n      desc1.setCloudDescriptor(collection1Desc);\n      zkController.unregister(\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), collection1Desc);\n      assertNotSame(\n          \"New leader was not promoted after unregistering the current leader.\",\n          leaderUrl, reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(\"New leader was null.\",\n          reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n\n      Thread.sleep(2000);\n      assertEquals(\"shard was not unregistered\", 1, zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size());\n    } finally {\n      System.clearProperty(\"solrcloud.skip.autorecovery\");\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      System.clearProperty(\"bootstrap_confdir\");\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7402488871c6419828f7d78f77318d1d6ebbf206","date":1339672556,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testCoreUnload().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testCoreUnload().mjava","sourceNew":"  @Test\n  public void testCoreUnload() throws Exception {\n    \n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n      System.setProperty(\"solrcloud.skip.autorecovery\", \"true\");\n      \n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT,\n          10000, \"localhost\", \"8983\", \"solr\",\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      \n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/conf\")\n          .getAbsolutePath());\n      \n      final int numShards = 2;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegister(desc1);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard1\", ids[1]);\n      \n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      \n      assertEquals(\"Shard(s) missing from cloudstate\", 2, zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size());\n      \n      // unregister current leader\n      final ZkNodeProps shard1LeaderProps = reader.getLeaderProps(\n          \"collection1\", \"shard1\");\n      final String leaderUrl = reader.getLeaderUrl(\"collection1\", \"shard1\",\n          15000);\n      \n      final CloudDescriptor collection1Desc = new CloudDescriptor();\n      collection1Desc.setCollectionName(\"collection1\");\n      final CoreDescriptor desc1 = new CoreDescriptor(null,\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), \"\");\n      desc1.setCloudDescriptor(collection1Desc);\n      zkController.unregister(\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), collection1Desc);\n      assertNotSame(\n          \"New leader was not promoted after unregistering the current leader.\",\n          leaderUrl, reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(\"New leader was null.\",\n          reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n\n      for(int i=0;i<30;i++) {\n        if(zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size()==1) break; \n        Thread.sleep(500);\n      }\n      assertEquals(\"shard was not unregistered\", 1, zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size());\n    } finally {\n      System.clearProperty(\"solrcloud.skip.autorecovery\");\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      System.clearProperty(\"bootstrap_confdir\");\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCoreUnload() throws Exception {\n    \n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n      System.setProperty(\"solrcloud.skip.autorecovery\", \"true\");\n      \n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT,\n          10000, \"localhost\", \"8983\", \"solr\",\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      \n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/conf\")\n          .getAbsolutePath());\n      \n      final int numShards = 2;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegister(desc1);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard1\", ids[1]);\n      \n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      \n      assertEquals(\"Shard(s) missing from cloudstate\", 2, zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size());\n      \n      // unregister current leader\n      final ZkNodeProps shard1LeaderProps = reader.getLeaderProps(\n          \"collection1\", \"shard1\");\n      final String leaderUrl = reader.getLeaderUrl(\"collection1\", \"shard1\",\n          15000);\n      \n      final CloudDescriptor collection1Desc = new CloudDescriptor();\n      collection1Desc.setCollectionName(\"collection1\");\n      final CoreDescriptor desc1 = new CoreDescriptor(null,\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), \"\");\n      desc1.setCloudDescriptor(collection1Desc);\n      zkController.unregister(\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), collection1Desc);\n      assertNotSame(\n          \"New leader was not promoted after unregistering the current leader.\",\n          leaderUrl, reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(\"New leader was null.\",\n          reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n\n      Thread.sleep(2000);\n      assertEquals(\"shard was not unregistered\", 1, zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size());\n    } finally {\n      System.clearProperty(\"solrcloud.skip.autorecovery\");\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      System.clearProperty(\"bootstrap_confdir\");\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21591922fb4db3e2a6ffb2cb342b3d61c053a973","date":1340761680,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testCoreUnload().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testCoreUnload().mjava","sourceNew":"  @Test\n  public void testCoreUnload() throws Exception {\n    \n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n      System.setProperty(\"solrcloud.skip.autorecovery\", \"true\");\n      \n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT,\n          10000, \"localhost\", \"8983\", \"solr\",\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      \n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/collection1/conf\")\n          .getAbsolutePath());\n      \n      final int numShards = 2;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegister(desc1);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard1\", ids[1]);\n      \n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      \n      assertEquals(\"Shard(s) missing from cloudstate\", 2, zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size());\n      \n      // unregister current leader\n      final ZkNodeProps shard1LeaderProps = reader.getLeaderProps(\n          \"collection1\", \"shard1\");\n      final String leaderUrl = reader.getLeaderUrl(\"collection1\", \"shard1\",\n          15000);\n      \n      final CloudDescriptor collection1Desc = new CloudDescriptor();\n      collection1Desc.setCollectionName(\"collection1\");\n      final CoreDescriptor desc1 = new CoreDescriptor(null,\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), \"\");\n      desc1.setCloudDescriptor(collection1Desc);\n      zkController.unregister(\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), collection1Desc);\n      assertNotSame(\n          \"New leader was not promoted after unregistering the current leader.\",\n          leaderUrl, reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(\"New leader was null.\",\n          reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n\n      for(int i=0;i<30;i++) {\n        if(zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size()==1) break; \n        Thread.sleep(500);\n      }\n      assertEquals(\"shard was not unregistered\", 1, zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size());\n    } finally {\n      System.clearProperty(\"solrcloud.skip.autorecovery\");\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      System.clearProperty(\"bootstrap_confdir\");\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCoreUnload() throws Exception {\n    \n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n      System.setProperty(\"solrcloud.skip.autorecovery\", \"true\");\n      \n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT,\n          10000, \"localhost\", \"8983\", \"solr\",\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      \n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/conf\")\n          .getAbsolutePath());\n      \n      final int numShards = 2;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegister(desc1);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard1\", ids[1]);\n      \n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      \n      assertEquals(\"Shard(s) missing from cloudstate\", 2, zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size());\n      \n      // unregister current leader\n      final ZkNodeProps shard1LeaderProps = reader.getLeaderProps(\n          \"collection1\", \"shard1\");\n      final String leaderUrl = reader.getLeaderUrl(\"collection1\", \"shard1\",\n          15000);\n      \n      final CloudDescriptor collection1Desc = new CloudDescriptor();\n      collection1Desc.setCollectionName(\"collection1\");\n      final CoreDescriptor desc1 = new CoreDescriptor(null,\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), \"\");\n      desc1.setCloudDescriptor(collection1Desc);\n      zkController.unregister(\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), collection1Desc);\n      assertNotSame(\n          \"New leader was not promoted after unregistering the current leader.\",\n          leaderUrl, reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(\"New leader was null.\",\n          reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n\n      for(int i=0;i<30;i++) {\n        if(zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size()==1) break; \n        Thread.sleep(500);\n      }\n      assertEquals(\"shard was not unregistered\", 1, zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size());\n    } finally {\n      System.clearProperty(\"solrcloud.skip.autorecovery\");\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      System.clearProperty(\"bootstrap_confdir\");\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testCoreUnload().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testCoreUnload().mjava","sourceNew":"  @Test\n  public void testCoreUnload() throws Exception {\n    \n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n      System.setProperty(\"solrcloud.skip.autorecovery\", \"true\");\n      \n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT,\n          10000, \"localhost\", \"8983\", \"solr\",\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      \n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/collection1/conf\")\n          .getAbsolutePath());\n      \n      final int numShards = 2;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegister(desc1);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard1\", ids[1]);\n      \n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      \n      assertEquals(\"Shard(s) missing from cloudstate\", 2, zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size());\n      \n      // unregister current leader\n      final ZkNodeProps shard1LeaderProps = reader.getLeaderProps(\n          \"collection1\", \"shard1\");\n      final String leaderUrl = reader.getLeaderUrl(\"collection1\", \"shard1\",\n          15000);\n      \n      final CloudDescriptor collection1Desc = new CloudDescriptor();\n      collection1Desc.setCollectionName(\"collection1\");\n      final CoreDescriptor desc1 = new CoreDescriptor(null,\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), \"\");\n      desc1.setCloudDescriptor(collection1Desc);\n      zkController.unregister(\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), collection1Desc);\n      assertNotSame(\n          \"New leader was not promoted after unregistering the current leader.\",\n          leaderUrl, reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(\"New leader was null.\",\n          reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n\n      for(int i=0;i<30;i++) {\n        if(zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size()==1) break; \n        Thread.sleep(500);\n      }\n      assertEquals(\"shard was not unregistered\", 1, zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size());\n    } finally {\n      System.clearProperty(\"solrcloud.skip.autorecovery\");\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      System.clearProperty(\"bootstrap_confdir\");\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCoreUnload() throws Exception {\n    \n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n      System.setProperty(\"solrcloud.skip.autorecovery\", \"true\");\n      \n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT,\n          10000, \"localhost\", \"8983\", \"solr\",\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      \n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/conf\")\n          .getAbsolutePath());\n      \n      final int numShards = 2;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegister(desc1);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard1\", ids[1]);\n      \n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      \n      assertEquals(\"Shard(s) missing from cloudstate\", 2, zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size());\n      \n      // unregister current leader\n      final ZkNodeProps shard1LeaderProps = reader.getLeaderProps(\n          \"collection1\", \"shard1\");\n      final String leaderUrl = reader.getLeaderUrl(\"collection1\", \"shard1\",\n          15000);\n      \n      final CloudDescriptor collection1Desc = new CloudDescriptor();\n      collection1Desc.setCollectionName(\"collection1\");\n      final CoreDescriptor desc1 = new CoreDescriptor(null,\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), \"\");\n      desc1.setCloudDescriptor(collection1Desc);\n      zkController.unregister(\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), collection1Desc);\n      assertNotSame(\n          \"New leader was not promoted after unregistering the current leader.\",\n          leaderUrl, reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(\"New leader was null.\",\n          reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n\n      for(int i=0;i<30;i++) {\n        if(zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size()==1) break; \n        Thread.sleep(500);\n      }\n      assertEquals(\"shard was not unregistered\", 1, zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size());\n    } finally {\n      System.clearProperty(\"solrcloud.skip.autorecovery\");\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      System.clearProperty(\"bootstrap_confdir\");\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testCoreUnload().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testCoreUnload().mjava","sourceNew":"  @Test\n  public void testCoreUnload() throws Exception {\n    \n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n      System.setProperty(\"solrcloud.skip.autorecovery\", \"true\");\n      \n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT,\n          10000, \"localhost\", \"8983\", \"solr\",\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      \n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/collection1/conf\")\n          .getAbsolutePath());\n      \n      final int numShards = 2;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegister(desc1);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard1\", ids[1]);\n      \n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      \n      assertEquals(\"Shard(s) missing from cloudstate\", 2, zkController.getZkStateReader().getClusterState().getSlice(\"collection1\", \"shard1\").getShards().size());\n      \n      // unregister current leader\n      final ZkNodeProps shard1LeaderProps = reader.getLeaderProps(\n          \"collection1\", \"shard1\");\n      final String leaderUrl = reader.getLeaderUrl(\"collection1\", \"shard1\",\n          15000);\n      \n      final CloudDescriptor collection1Desc = new CloudDescriptor();\n      collection1Desc.setCollectionName(\"collection1\");\n      final CoreDescriptor desc1 = new CoreDescriptor(null,\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), \"\");\n      desc1.setCloudDescriptor(collection1Desc);\n      zkController.unregister(\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), collection1Desc);\n      assertNotSame(\n          \"New leader was not promoted after unregistering the current leader.\",\n          leaderUrl, reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(\"New leader was null.\",\n          reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n\n      for(int i=0;i<30;i++) {\n        if(zkController.getZkStateReader().getClusterState().getSlice(\"collection1\", \"shard1\").getShards().size()==1) break; \n        Thread.sleep(500);\n      }\n      assertEquals(\"shard was not unregistered\", 1, zkController.getZkStateReader().getClusterState().getSlice(\"collection1\", \"shard1\").getShards().size());\n    } finally {\n      System.clearProperty(\"solrcloud.skip.autorecovery\");\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      System.clearProperty(\"bootstrap_confdir\");\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCoreUnload() throws Exception {\n    \n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n      System.setProperty(\"solrcloud.skip.autorecovery\", \"true\");\n      \n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT,\n          10000, \"localhost\", \"8983\", \"solr\",\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      \n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/collection1/conf\")\n          .getAbsolutePath());\n      \n      final int numShards = 2;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegister(desc1);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard1\", ids[1]);\n      \n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      \n      assertEquals(\"Shard(s) missing from cloudstate\", 2, zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size());\n      \n      // unregister current leader\n      final ZkNodeProps shard1LeaderProps = reader.getLeaderProps(\n          \"collection1\", \"shard1\");\n      final String leaderUrl = reader.getLeaderUrl(\"collection1\", \"shard1\",\n          15000);\n      \n      final CloudDescriptor collection1Desc = new CloudDescriptor();\n      collection1Desc.setCollectionName(\"collection1\");\n      final CoreDescriptor desc1 = new CoreDescriptor(null,\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), \"\");\n      desc1.setCloudDescriptor(collection1Desc);\n      zkController.unregister(\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), collection1Desc);\n      assertNotSame(\n          \"New leader was not promoted after unregistering the current leader.\",\n          leaderUrl, reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(\"New leader was null.\",\n          reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n\n      for(int i=0;i<30;i++) {\n        if(zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size()==1) break; \n        Thread.sleep(500);\n      }\n      assertEquals(\"shard was not unregistered\", 1, zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size());\n    } finally {\n      System.clearProperty(\"solrcloud.skip.autorecovery\");\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      System.clearProperty(\"bootstrap_confdir\");\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testCoreUnload().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testCoreUnload().mjava","sourceNew":"  @Test\n  public void testCoreUnload() throws Exception {\n    \n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n      System.setProperty(\"solrcloud.skip.autorecovery\", \"true\");\n      \n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT,\n          10000, \"localhost\", \"8983\", \"solr\",\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      \n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/collection1/conf\")\n          .getAbsolutePath());\n      \n      final int numShards = 2;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegister(desc1);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard1\", ids[1]);\n      \n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      \n      assertEquals(\"Shard(s) missing from cloudstate\", 2, zkController.getZkStateReader().getClusterState().getSlice(\"collection1\", \"shard1\").getShards().size());\n      \n      // unregister current leader\n      final ZkNodeProps shard1LeaderProps = reader.getLeaderProps(\n          \"collection1\", \"shard1\");\n      final String leaderUrl = reader.getLeaderUrl(\"collection1\", \"shard1\",\n          15000);\n      \n      final CloudDescriptor collection1Desc = new CloudDescriptor();\n      collection1Desc.setCollectionName(\"collection1\");\n      final CoreDescriptor desc1 = new CoreDescriptor(null,\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), \"\");\n      desc1.setCloudDescriptor(collection1Desc);\n      zkController.unregister(\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), collection1Desc);\n      assertNotSame(\n          \"New leader was not promoted after unregistering the current leader.\",\n          leaderUrl, reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(\"New leader was null.\",\n          reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n\n      for(int i=0;i<30;i++) {\n        if(zkController.getZkStateReader().getClusterState().getSlice(\"collection1\", \"shard1\").getShards().size()==1) break; \n        Thread.sleep(500);\n      }\n      assertEquals(\"shard was not unregistered\", 1, zkController.getZkStateReader().getClusterState().getSlice(\"collection1\", \"shard1\").getShards().size());\n    } finally {\n      System.clearProperty(\"solrcloud.skip.autorecovery\");\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      System.clearProperty(\"bootstrap_confdir\");\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCoreUnload() throws Exception {\n    \n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n      System.setProperty(\"solrcloud.skip.autorecovery\", \"true\");\n      \n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT,\n          10000, \"localhost\", \"8983\", \"solr\",\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      \n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/collection1/conf\")\n          .getAbsolutePath());\n      \n      final int numShards = 2;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegister(desc1);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard1\", ids[1]);\n      \n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      \n      assertEquals(\"Shard(s) missing from cloudstate\", 2, zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size());\n      \n      // unregister current leader\n      final ZkNodeProps shard1LeaderProps = reader.getLeaderProps(\n          \"collection1\", \"shard1\");\n      final String leaderUrl = reader.getLeaderUrl(\"collection1\", \"shard1\",\n          15000);\n      \n      final CloudDescriptor collection1Desc = new CloudDescriptor();\n      collection1Desc.setCollectionName(\"collection1\");\n      final CoreDescriptor desc1 = new CoreDescriptor(null,\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), \"\");\n      desc1.setCloudDescriptor(collection1Desc);\n      zkController.unregister(\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), collection1Desc);\n      assertNotSame(\n          \"New leader was not promoted after unregistering the current leader.\",\n          leaderUrl, reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(\"New leader was null.\",\n          reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n\n      for(int i=0;i<30;i++) {\n        if(zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size()==1) break; \n        Thread.sleep(500);\n      }\n      assertEquals(\"shard was not unregistered\", 1, zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size());\n    } finally {\n      System.clearProperty(\"solrcloud.skip.autorecovery\");\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      System.clearProperty(\"bootstrap_confdir\");\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testCoreUnload().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testCoreUnload().mjava","sourceNew":"  @Test\n  public void testCoreUnload() throws Exception {\n    \n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n      System.setProperty(\"solrcloud.skip.autorecovery\", \"true\");\n      \n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT,\n          10000, \"localhost\", \"8983\", \"solr\",\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      \n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/collection1/conf\")\n          .getAbsolutePath());\n      \n      final int numShards = 2;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegister(desc1);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard1\", ids[1]);\n      \n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      \n      assertEquals(\"Shard(s) missing from cloudstate\", 2, zkController.getZkStateReader().getClusterState().getSlice(\"collection1\", \"shard1\").getShards().size());\n      \n      // unregister current leader\n      final ZkNodeProps shard1LeaderProps = reader.getLeaderProps(\n          \"collection1\", \"shard1\");\n      final String leaderUrl = reader.getLeaderUrl(\"collection1\", \"shard1\",\n          15000);\n      \n      final CloudDescriptor collection1Desc = new CloudDescriptor();\n      collection1Desc.setCollectionName(\"collection1\");\n      final CoreDescriptor desc1 = new CoreDescriptor(null,\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), \"\");\n      desc1.setCloudDescriptor(collection1Desc);\n      zkController.unregister(\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), collection1Desc);\n      assertNotSame(\n          \"New leader was not promoted after unregistering the current leader.\",\n          leaderUrl, reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(\"New leader was null.\",\n          reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n\n      for(int i=0;i<30;i++) {\n        if(zkController.getZkStateReader().getClusterState().getSlice(\"collection1\", \"shard1\").getShards().size()==1) break; \n        Thread.sleep(500);\n      }\n      assertEquals(\"shard was not unregistered\", 1, zkController.getZkStateReader().getClusterState().getSlice(\"collection1\", \"shard1\").getShards().size());\n    } finally {\n      System.clearProperty(\"solrcloud.skip.autorecovery\");\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      System.clearProperty(\"bootstrap_confdir\");\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCoreUnload() throws Exception {\n    \n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n      System.setProperty(\"solrcloud.skip.autorecovery\", \"true\");\n      \n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT,\n          10000, \"localhost\", \"8983\", \"solr\",\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      \n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/collection1/conf\")\n          .getAbsolutePath());\n      \n      final int numShards = 2;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegister(desc1);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard1\", ids[1]);\n      \n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      \n      assertEquals(\"Shard(s) missing from cloudstate\", 2, zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size());\n      \n      // unregister current leader\n      final ZkNodeProps shard1LeaderProps = reader.getLeaderProps(\n          \"collection1\", \"shard1\");\n      final String leaderUrl = reader.getLeaderUrl(\"collection1\", \"shard1\",\n          15000);\n      \n      final CloudDescriptor collection1Desc = new CloudDescriptor();\n      collection1Desc.setCollectionName(\"collection1\");\n      final CoreDescriptor desc1 = new CoreDescriptor(null,\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), \"\");\n      desc1.setCloudDescriptor(collection1Desc);\n      zkController.unregister(\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), collection1Desc);\n      assertNotSame(\n          \"New leader was not promoted after unregistering the current leader.\",\n          leaderUrl, reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(\"New leader was null.\",\n          reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n\n      for(int i=0;i<30;i++) {\n        if(zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size()==1) break; \n        Thread.sleep(500);\n      }\n      assertEquals(\"shard was not unregistered\", 1, zkController.getZkStateReader().getCloudState().getSlice(\"collection1\", \"shard1\").getShards().size());\n    } finally {\n      System.clearProperty(\"solrcloud.skip.autorecovery\");\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      System.clearProperty(\"bootstrap_confdir\");\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"adc2388a5005de25370273411bc713d0ff722805","date":1345719157,"type":4,"author":"Sami Siren","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testCoreUnload().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testCoreUnload() throws Exception {\n    \n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n      System.setProperty(\"solrcloud.skip.autorecovery\", \"true\");\n      \n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT,\n          10000, \"localhost\", \"8983\", \"solr\",\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      \n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/collection1/conf\")\n          .getAbsolutePath());\n      \n      final int numShards = 2;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegister(desc1);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard1\", ids[1]);\n      \n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      \n      assertEquals(\"Shard(s) missing from cloudstate\", 2, zkController.getZkStateReader().getClusterState().getSlice(\"collection1\", \"shard1\").getShards().size());\n      \n      // unregister current leader\n      final ZkNodeProps shard1LeaderProps = reader.getLeaderProps(\n          \"collection1\", \"shard1\");\n      final String leaderUrl = reader.getLeaderUrl(\"collection1\", \"shard1\",\n          15000);\n      \n      final CloudDescriptor collection1Desc = new CloudDescriptor();\n      collection1Desc.setCollectionName(\"collection1\");\n      final CoreDescriptor desc1 = new CoreDescriptor(null,\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), \"\");\n      desc1.setCloudDescriptor(collection1Desc);\n      zkController.unregister(\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), collection1Desc);\n      assertNotSame(\n          \"New leader was not promoted after unregistering the current leader.\",\n          leaderUrl, reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(\"New leader was null.\",\n          reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n\n      for(int i=0;i<30;i++) {\n        if(zkController.getZkStateReader().getClusterState().getSlice(\"collection1\", \"shard1\").getShards().size()==1) break; \n        Thread.sleep(500);\n      }\n      assertEquals(\"shard was not unregistered\", 1, zkController.getZkStateReader().getClusterState().getSlice(\"collection1\", \"shard1\").getShards().size());\n    } finally {\n      System.clearProperty(\"solrcloud.skip.autorecovery\");\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      System.clearProperty(\"bootstrap_confdir\");\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testCoreUnload().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testCoreUnload() throws Exception {\n    \n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"1\");\n      System.setProperty(\"solrcloud.skip.autorecovery\", \"true\");\n      \n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT,\n          10000, \"localhost\", \"8983\", \"solr\",\n          new CurrentCoreDescriptorProvider() {\n            \n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n      \n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/collection1/conf\")\n          .getAbsolutePath());\n      \n      final int numShards = 2;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegister(desc1);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard1\", ids[1]);\n      \n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      \n      assertEquals(\"Shard(s) missing from cloudstate\", 2, zkController.getZkStateReader().getClusterState().getSlice(\"collection1\", \"shard1\").getShards().size());\n      \n      // unregister current leader\n      final ZkNodeProps shard1LeaderProps = reader.getLeaderProps(\n          \"collection1\", \"shard1\");\n      final String leaderUrl = reader.getLeaderUrl(\"collection1\", \"shard1\",\n          15000);\n      \n      final CloudDescriptor collection1Desc = new CloudDescriptor();\n      collection1Desc.setCollectionName(\"collection1\");\n      final CoreDescriptor desc1 = new CoreDescriptor(null,\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), \"\");\n      desc1.setCloudDescriptor(collection1Desc);\n      zkController.unregister(\n          shard1LeaderProps.get(ZkStateReader.CORE_NAME_PROP), collection1Desc);\n      assertNotSame(\n          \"New leader was not promoted after unregistering the current leader.\",\n          leaderUrl, reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(\"New leader was null.\",\n          reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n\n      for(int i=0;i<30;i++) {\n        if(zkController.getZkStateReader().getClusterState().getSlice(\"collection1\", \"shard1\").getShards().size()==1) break; \n        Thread.sleep(500);\n      }\n      assertEquals(\"shard was not unregistered\", 1, zkController.getZkStateReader().getClusterState().getSlice(\"collection1\", \"shard1\").getShards().size());\n    } finally {\n      System.clearProperty(\"solrcloud.skip.autorecovery\");\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      System.clearProperty(\"bootstrap_confdir\");\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["d6f074e73200c07d54f242d3880a8da5a35ff97b","adc2388a5005de25370273411bc713d0ff722805"],"9813dd0748537c429b7c0a9b4723ea1ba496c047":["e5d7ab59f0099e16088708b33380ac2f851705a6"],"adc2388a5005de25370273411bc713d0ff722805":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"21591922fb4db3e2a6ffb2cb342b3d61c053a973":["7402488871c6419828f7d78f77318d1d6ebbf206"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f02d397443607939c8230cae13093449e065bd18"],"1fa075b2493faf88afb5a68a9495e8421aeb61ce":["c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"f02d397443607939c8230cae13093449e065bd18":["9813dd0748537c429b7c0a9b4723ea1ba496c047"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["fe33227f6805edab2036cbb80645cc4e2d1fa424","3f767f8c99eaedb984df754fe61f21c5de260f94"],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["21591922fb4db3e2a6ffb2cb342b3d61c053a973"],"e5d7ab59f0099e16088708b33380ac2f851705a6":["931370eedd3a5fac34f9e939f0144fa2d8d87699"],"931370eedd3a5fac34f9e939f0144fa2d8d87699":["1fa075b2493faf88afb5a68a9495e8421aeb61ce"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["7402488871c6419828f7d78f77318d1d6ebbf206","21591922fb4db3e2a6ffb2cb342b3d61c053a973"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7402488871c6419828f7d78f77318d1d6ebbf206":["f02d397443607939c8230cae13093449e065bd18"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["21591922fb4db3e2a6ffb2cb342b3d61c053a973","3f767f8c99eaedb984df754fe61f21c5de260f94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["adc2388a5005de25370273411bc713d0ff722805"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"9813dd0748537c429b7c0a9b4723ea1ba496c047":["f02d397443607939c8230cae13093449e065bd18"],"adc2388a5005de25370273411bc713d0ff722805":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"21591922fb4db3e2a6ffb2cb342b3d61c053a973":["3f767f8c99eaedb984df754fe61f21c5de260f94","fe33227f6805edab2036cbb80645cc4e2d1fa424","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"1fa075b2493faf88afb5a68a9495e8421aeb61ce":["931370eedd3a5fac34f9e939f0144fa2d8d87699"],"f02d397443607939c8230cae13093449e065bd18":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","7402488871c6419828f7d78f77318d1d6ebbf206"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["1fa075b2493faf88afb5a68a9495e8421aeb61ce"],"e5d7ab59f0099e16088708b33380ac2f851705a6":["9813dd0748537c429b7c0a9b4723ea1ba496c047"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["adc2388a5005de25370273411bc713d0ff722805","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"931370eedd3a5fac34f9e939f0144fa2d8d87699":["e5d7ab59f0099e16088708b33380ac2f851705a6"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["8fd5be977c105554c6a7b68afcdbc511439723ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["001b25b42373b22a52f399dbf072f1224632e8e6"],"7402488871c6419828f7d78f77318d1d6ebbf206":["21591922fb4db3e2a6ffb2cb342b3d61c053a973","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}