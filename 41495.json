{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#queryIntersects(byte[]).mjava","commits":[{"id":"97f74f84954e9fefbac4cb38b9bf339e1757600d","date":1533750605,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#queryIntersects(byte[]).mjava","pathOld":"/dev/null","sourceNew":"  /** returns true if the query intersects the encoded triangle */\n  protected boolean queryIntersects(byte[] t) {\n\n    // 1. query contains any triangle points\n    if (queryContains(t, 0) || queryContains(t, 1) || queryContains(t, 2)) {\n      return true;\n    }\n\n    int aY = NumericUtils.sortableBytesToInt(t, 0);\n    int aX = NumericUtils.sortableBytesToInt(t, LatLonPoint.BYTES);\n    int bY = NumericUtils.sortableBytesToInt(t, 2 * LatLonPoint.BYTES);\n    int bX = NumericUtils.sortableBytesToInt(t, 3 * LatLonPoint.BYTES);\n    int cY = NumericUtils.sortableBytesToInt(t, 4 * LatLonPoint.BYTES);\n    int cX = NumericUtils.sortableBytesToInt(t, 5 * LatLonPoint.BYTES);\n\n    int tMinX = StrictMath.min(StrictMath.min(aX, bX), cX);\n    int tMaxX = StrictMath.max(StrictMath.max(aX, bX), cX);\n    int tMinY = StrictMath.min(StrictMath.min(aY, bY), cY);\n    int tMaxY = StrictMath.max(StrictMath.max(aY, bY), cY);\n\n    // 2. check bounding boxes are disjoint\n    if (tMaxX < minX || tMinX > maxX || tMinY > maxY || tMaxY < minY) {\n      return false;\n    }\n\n    // 3. check triangle contains any query points\n    if (Tessellator.pointInTriangle(minX, minY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(maxX, minY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(maxX, maxY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(minX, maxY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    }\n\n\n    // 4. last ditch effort: check crossings\n    if (queryIntersects(aX, aY, bX, bY, cX, cY)) {\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e48f589a9604e11db23a025a27efbf3d14ab4e3b","date":1539887418,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#queryMatches(int,int,int,int,int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#queryIntersects(byte[]).mjava","sourceNew":"  protected boolean queryMatches(int aX, int aY, int bX, int bY, int cX, int cY) {\n    // 1. query contains any triangle points\n    if (queryContains(aX, aY, bX, bY, cX, cY)) {\n      return true;\n    }\n\n    int tMinX = StrictMath.min(StrictMath.min(aX, bX), cX);\n    int tMaxX = StrictMath.max(StrictMath.max(aX, bX), cX);\n    int tMinY = StrictMath.min(StrictMath.min(aY, bY), cY);\n    int tMaxY = StrictMath.max(StrictMath.max(aY, bY), cY);\n\n    // 2. check bounding boxes are disjoint\n    if (tMaxX < minX || tMinX > maxX || tMinY > maxY || tMaxY < minY) {\n      return false;\n    }\n\n    // 3. check triangle contains any query points\n    if (Tessellator.pointInTriangle(minX, minY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(maxX, minY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(maxX, maxY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(minX, maxY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    }\n\n\n    // 4. last ditch effort: check crossings\n    if (queryIntersects(aX, aY, bX, bY, cX, cY)) {\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /** returns true if the query intersects the encoded triangle */\n  protected boolean queryIntersects(byte[] t) {\n\n    // 1. query contains any triangle points\n    if (queryContains(t, 0) || queryContains(t, 1) || queryContains(t, 2)) {\n      return true;\n    }\n\n    int aY = NumericUtils.sortableBytesToInt(t, 0);\n    int aX = NumericUtils.sortableBytesToInt(t, LatLonPoint.BYTES);\n    int bY = NumericUtils.sortableBytesToInt(t, 2 * LatLonPoint.BYTES);\n    int bX = NumericUtils.sortableBytesToInt(t, 3 * LatLonPoint.BYTES);\n    int cY = NumericUtils.sortableBytesToInt(t, 4 * LatLonPoint.BYTES);\n    int cX = NumericUtils.sortableBytesToInt(t, 5 * LatLonPoint.BYTES);\n\n    int tMinX = StrictMath.min(StrictMath.min(aX, bX), cX);\n    int tMaxX = StrictMath.max(StrictMath.max(aX, bX), cX);\n    int tMinY = StrictMath.min(StrictMath.min(aY, bY), cY);\n    int tMaxY = StrictMath.max(StrictMath.max(aY, bY), cY);\n\n    // 2. check bounding boxes are disjoint\n    if (tMaxX < minX || tMinX > maxX || tMinY > maxY || tMaxY < minY) {\n      return false;\n    }\n\n    // 3. check triangle contains any query points\n    if (Tessellator.pointInTriangle(minX, minY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(maxX, minY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(maxX, maxY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    } else if (Tessellator.pointInTriangle(minX, maxY, aX, aY, bX, bY, cX, cY)) {\n      return true;\n    }\n\n\n    // 4. last ditch effort: check crossings\n    if (queryIntersects(aX, aY, bX, bY, cX, cY)) {\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e48f589a9604e11db23a025a27efbf3d14ab4e3b":["97f74f84954e9fefbac4cb38b9bf339e1757600d"],"97f74f84954e9fefbac4cb38b9bf339e1757600d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e48f589a9604e11db23a025a27efbf3d14ab4e3b"]},"commit2Childs":{"e48f589a9604e11db23a025a27efbf3d14ab4e3b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"97f74f84954e9fefbac4cb38b9bf339e1757600d":["e48f589a9604e11db23a025a27efbf3d14ab4e3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97f74f84954e9fefbac4cb38b9bf339e1757600d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}