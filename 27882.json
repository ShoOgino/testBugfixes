{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrServer,ThreadPoolExecutor,String,int,int).mjava","commits":[{"id":"82f063229e39b59c960866c1bc49285b95676491","date":1352733047,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrServer,ThreadPoolExecutor,String,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void createCores(final HttpSolrServer server,\n      ThreadPoolExecutor executor, final String collection, final int numShards, int cnt) {\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      executor.execute(new Runnable() {\n        \n        @Override\n        public void run() {\n          Create createCmd = new Create();\n          createCmd.setCoreName(collection + freezeI);\n          createCmd.setCollection(collection);\n          String core3dataDir = dataDir.getAbsolutePath() + File.separator\n              + System.currentTimeMillis() + collection + \"_3n\" + freezeI;\n          createCmd.setDataDir(core3dataDir);\n          createCmd.setNumShards(numShards);\n          try {\n            server.request(createCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n        \n      });\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrServer,ThreadPoolExecutor,String,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void createCores(final HttpSolrServer server,\n      ThreadPoolExecutor executor, final String collection, final int numShards, int cnt) {\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      executor.execute(new Runnable() {\n        \n        @Override\n        public void run() {\n          Create createCmd = new Create();\n          createCmd.setCoreName(collection + freezeI);\n          createCmd.setCollection(collection);\n          String core3dataDir = dataDir.getAbsolutePath() + File.separator\n              + System.currentTimeMillis() + collection + \"_3n\" + freezeI;\n          createCmd.setDataDir(core3dataDir);\n          createCmd.setNumShards(numShards);\n          try {\n            server.request(createCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n        \n      });\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81a4a1810b619aea1d002a09c1878b498e20bf33","date":1361142322,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrServer,ThreadPoolExecutor,String,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrServer,ThreadPoolExecutor,String,int,int).mjava","sourceNew":"  protected void createCores(final HttpSolrServer server,\n      ThreadPoolExecutor executor, final String collection, final int numShards, int cnt) {\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      executor.execute(new Runnable() {\n        \n        @Override\n        public void run() {\n          Create createCmd = new Create();\n          createCmd.setCoreName(collection + freezeI);\n          createCmd.setCollection(collection);\n          String core3dataDir = dataDir.getAbsolutePath() + File.separator\n              + System.currentTimeMillis() + collection + \"_3n\" + freezeI;\n          createCmd.setDataDir(core3dataDir);\n          createCmd.setNumShards(numShards);\n          try {\n            server.request(createCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n        \n      });\n    }\n  }\n\n","sourceOld":"  private void createCores(final HttpSolrServer server,\n      ThreadPoolExecutor executor, final String collection, final int numShards, int cnt) {\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      executor.execute(new Runnable() {\n        \n        @Override\n        public void run() {\n          Create createCmd = new Create();\n          createCmd.setCoreName(collection + freezeI);\n          createCmd.setCollection(collection);\n          String core3dataDir = dataDir.getAbsolutePath() + File.separator\n              + System.currentTimeMillis() + collection + \"_3n\" + freezeI;\n          createCmd.setDataDir(core3dataDir);\n          createCmd.setNumShards(numShards);\n          try {\n            server.request(createCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n        \n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c8567c25c02eeeb3e719841606a1269f3538ca","date":1361155063,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrServer,ThreadPoolExecutor,String,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrServer,ThreadPoolExecutor,String,int,int).mjava","sourceNew":"  protected void createCores(final HttpSolrServer server,\n      ThreadPoolExecutor executor, final String collection, final int numShards, int cnt) {\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      executor.execute(new Runnable() {\n        \n        @Override\n        public void run() {\n          Create createCmd = new Create();\n          createCmd.setCoreName(collection + freezeI);\n          createCmd.setCollection(collection);\n          String core3dataDir = dataDir.getAbsolutePath() + File.separator\n              + System.currentTimeMillis() + collection + \"_3n\" + freezeI;\n          createCmd.setDataDir(core3dataDir);\n          createCmd.setNumShards(numShards);\n          try {\n            server.request(createCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n        \n      });\n    }\n  }\n\n","sourceOld":"  private void createCores(final HttpSolrServer server,\n      ThreadPoolExecutor executor, final String collection, final int numShards, int cnt) {\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      executor.execute(new Runnable() {\n        \n        @Override\n        public void run() {\n          Create createCmd = new Create();\n          createCmd.setCoreName(collection + freezeI);\n          createCmd.setCollection(collection);\n          String core3dataDir = dataDir.getAbsolutePath() + File.separator\n              + System.currentTimeMillis() + collection + \"_3n\" + freezeI;\n          createCmd.setDataDir(core3dataDir);\n          createCmd.setNumShards(numShards);\n          try {\n            server.request(createCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n        \n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrServer,ThreadPoolExecutor,String,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrServer,ThreadPoolExecutor,String,int,int).mjava","sourceNew":"  protected void createCores(final HttpSolrServer server,\n      ThreadPoolExecutor executor, final String collection, final int numShards, int cnt) {\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      executor.execute(new Runnable() {\n        \n        @Override\n        public void run() {\n          Create createCmd = new Create();\n          createCmd.setCoreName(collection + freezeI);\n          createCmd.setCollection(collection);\n\n          createCmd.setNumShards(numShards);\n          try {\n            String core3dataDir = dataDir.getAbsolutePath() + File.separator\n                + System.currentTimeMillis() + collection + \"_3n\" + freezeI;\n            createCmd.setDataDir(getDataDir(core3dataDir));\n\n            server.request(createCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n        \n      });\n    }\n  }\n\n","sourceOld":"  protected void createCores(final HttpSolrServer server,\n      ThreadPoolExecutor executor, final String collection, final int numShards, int cnt) {\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      executor.execute(new Runnable() {\n        \n        @Override\n        public void run() {\n          Create createCmd = new Create();\n          createCmd.setCoreName(collection + freezeI);\n          createCmd.setCollection(collection);\n          String core3dataDir = dataDir.getAbsolutePath() + File.separator\n              + System.currentTimeMillis() + collection + \"_3n\" + freezeI;\n          createCmd.setDataDir(core3dataDir);\n          createCmd.setNumShards(numShards);\n          try {\n            server.request(createCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n        \n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrServer,ThreadPoolExecutor,String,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrServer,ThreadPoolExecutor,String,int,int).mjava","sourceNew":"  protected void createCores(final HttpSolrServer server,\n      ThreadPoolExecutor executor, final String collection, final int numShards, int cnt) {\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      executor.execute(new Runnable() {\n        \n        @Override\n        public void run() {\n          Create createCmd = new Create();\n          createCmd.setCoreName(collection + freezeI);\n          createCmd.setCollection(collection);\n\n          createCmd.setNumShards(numShards);\n          try {\n            String core3dataDir = dataDir.getAbsolutePath() + File.separator\n                + System.currentTimeMillis() + collection + \"_3n\" + freezeI;\n            createCmd.setDataDir(getDataDir(core3dataDir));\n\n            server.request(createCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n        \n      });\n    }\n  }\n\n","sourceOld":"  protected void createCores(final HttpSolrServer server,\n      ThreadPoolExecutor executor, final String collection, final int numShards, int cnt) {\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      executor.execute(new Runnable() {\n        \n        @Override\n        public void run() {\n          Create createCmd = new Create();\n          createCmd.setCoreName(collection + freezeI);\n          createCmd.setCollection(collection);\n          String core3dataDir = dataDir.getAbsolutePath() + File.separator\n              + System.currentTimeMillis() + collection + \"_3n\" + freezeI;\n          createCmd.setDataDir(core3dataDir);\n          createCmd.setNumShards(numShards);\n          try {\n            server.request(createCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n        \n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrServer,ThreadPoolExecutor,String,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrServer,ThreadPoolExecutor,String,int,int).mjava","sourceNew":"  protected void createCores(final HttpSolrServer server,\n      ThreadPoolExecutor executor, final String collection, final int numShards, int cnt) {\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      executor.execute(new Runnable() {\n        \n        @Override\n        public void run() {\n          Create createCmd = new Create();\n          createCmd.setCoreName(collection + freezeI);\n          createCmd.setCollection(collection);\n\n          createCmd.setNumShards(numShards);\n          try {\n            String core3dataDir = createTempDir(collection).getAbsolutePath();\n            createCmd.setDataDir(getDataDir(core3dataDir));\n\n            server.request(createCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n        \n      });\n    }\n  }\n\n","sourceOld":"  protected void createCores(final HttpSolrServer server,\n      ThreadPoolExecutor executor, final String collection, final int numShards, int cnt) {\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      executor.execute(new Runnable() {\n        \n        @Override\n        public void run() {\n          Create createCmd = new Create();\n          createCmd.setCoreName(collection + freezeI);\n          createCmd.setCollection(collection);\n\n          createCmd.setNumShards(numShards);\n          try {\n            String core3dataDir = dataDir.getAbsolutePath() + File.separator\n                + System.currentTimeMillis() + collection + \"_3n\" + freezeI;\n            createCmd.setDataDir(getDataDir(core3dataDir));\n\n            server.request(createCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n        \n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrServer,ThreadPoolExecutor,String,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrServer,ThreadPoolExecutor,String,int,int).mjava","sourceNew":"  protected void createCores(final HttpSolrServer server,\n      ThreadPoolExecutor executor, final String collection, final int numShards, int cnt) {\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      executor.execute(new Runnable() {\n        \n        @Override\n        public void run() {\n          Create createCmd = new Create();\n          createCmd.setCoreName(collection + freezeI);\n          createCmd.setCollection(collection);\n\n          createCmd.setNumShards(numShards);\n          try {\n            String core3dataDir = createTempDir(collection).getAbsolutePath();\n            createCmd.setDataDir(getDataDir(core3dataDir));\n\n            server.request(createCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n        \n      });\n    }\n  }\n\n","sourceOld":"  protected void createCores(final HttpSolrServer server,\n      ThreadPoolExecutor executor, final String collection, final int numShards, int cnt) {\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      executor.execute(new Runnable() {\n        \n        @Override\n        public void run() {\n          Create createCmd = new Create();\n          createCmd.setCoreName(collection + freezeI);\n          createCmd.setCollection(collection);\n\n          createCmd.setNumShards(numShards);\n          try {\n            String core3dataDir = dataDir.getAbsolutePath() + File.separator\n                + System.currentTimeMillis() + collection + \"_3n\" + freezeI;\n            createCmd.setDataDir(getDataDir(core3dataDir));\n\n            server.request(createCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n        \n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrServer,ThreadPoolExecutor,String,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrServer,ThreadPoolExecutor,String,int,int).mjava","sourceNew":"  protected void createCores(final HttpSolrServer server,\n      ThreadPoolExecutor executor, final String collection, final int numShards, int cnt) {\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      executor.execute(new Runnable() {\n        \n        @Override\n        public void run() {\n          Create createCmd = new Create();\n          createCmd.setCoreName(collection + freezeI);\n          createCmd.setCollection(collection);\n\n          createCmd.setNumShards(numShards);\n          try {\n            String core3dataDir = createTempDir(collection).toFile().getAbsolutePath();\n            createCmd.setDataDir(getDataDir(core3dataDir));\n\n            server.request(createCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n        \n      });\n    }\n  }\n\n","sourceOld":"  protected void createCores(final HttpSolrServer server,\n      ThreadPoolExecutor executor, final String collection, final int numShards, int cnt) {\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      executor.execute(new Runnable() {\n        \n        @Override\n        public void run() {\n          Create createCmd = new Create();\n          createCmd.setCoreName(collection + freezeI);\n          createCmd.setCollection(collection);\n\n          createCmd.setNumShards(numShards);\n          try {\n            String core3dataDir = createTempDir(collection).getAbsolutePath();\n            createCmd.setDataDir(getDataDir(core3dataDir));\n\n            server.request(createCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n        \n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrClient,ThreadPoolExecutor,String,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCores(HttpSolrServer,ThreadPoolExecutor,String,int,int).mjava","sourceNew":"  protected void createCores(final HttpSolrClient client,\n      ThreadPoolExecutor executor, final String collection, final int numShards, int cnt) {\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      executor.execute(new Runnable() {\n        \n        @Override\n        public void run() {\n          Create createCmd = new Create();\n          createCmd.setCoreName(collection + freezeI);\n          createCmd.setCollection(collection);\n\n          createCmd.setNumShards(numShards);\n          try {\n            String core3dataDir = createTempDir(collection).toFile().getAbsolutePath();\n            createCmd.setDataDir(getDataDir(core3dataDir));\n\n            client.request(createCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n        \n      });\n    }\n  }\n\n","sourceOld":"  protected void createCores(final HttpSolrServer server,\n      ThreadPoolExecutor executor, final String collection, final int numShards, int cnt) {\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      executor.execute(new Runnable() {\n        \n        @Override\n        public void run() {\n          Create createCmd = new Create();\n          createCmd.setCoreName(collection + freezeI);\n          createCmd.setCollection(collection);\n\n          createCmd.setNumShards(numShards);\n          try {\n            String core3dataDir = createTempDir(collection).toFile().getAbsolutePath();\n            createCmd.setDataDir(getDataDir(core3dataDir));\n\n            server.request(createCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n        \n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["81a4a1810b619aea1d002a09c1878b498e20bf33"],"81a4a1810b619aea1d002a09c1878b498e20bf33":["82f063229e39b59c960866c1bc49285b95676491"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["849494cf2f3a96af5c8c84995108ddd8456fcd04","bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["81a4a1810b619aea1d002a09c1878b498e20bf33","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","82f063229e39b59c960866c1bc49285b95676491"],"bafca15d8e408346a67f4282ad1143b88023893b":["f4abec28b874149a7223e32cc7a01704c27790de"],"82f063229e39b59c960866c1bc49285b95676491":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"09c8567c25c02eeeb3e719841606a1269f3538ca":["82f063229e39b59c960866c1bc49285b95676491","81a4a1810b619aea1d002a09c1878b498e20bf33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["bb1f22cfa77230b5f05b7784feae5367f6bbb488","2a0f5bb79c600763ffe7b8141df59a3169d31e48","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"81a4a1810b619aea1d002a09c1878b498e20bf33":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c","09c8567c25c02eeeb3e719841606a1269f3538ca"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["407687e67faf6e1f02a211ca078d8e3eed631027","82f063229e39b59c960866c1bc49285b95676491"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"82f063229e39b59c960866c1bc49285b95676491":["81a4a1810b619aea1d002a09c1878b498e20bf33","407687e67faf6e1f02a211ca078d8e3eed631027","09c8567c25c02eeeb3e719841606a1269f3538ca"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f4abec28b874149a7223e32cc7a01704c27790de":["bafca15d8e408346a67f4282ad1143b88023893b"],"09c8567c25c02eeeb3e719841606a1269f3538ca":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","407687e67faf6e1f02a211ca078d8e3eed631027","09c8567c25c02eeeb3e719841606a1269f3538ca","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}