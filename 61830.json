{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getNodeLostSuggester(SolrCloudManager,Policy.Session,TriggerEvent).mjava","commits":[{"id":"034aa493deab2c07f8061b37af0a53470dd1e6f6","date":1590123987,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getNodeLostSuggester(SolrCloudManager,Policy.Session,TriggerEvent).mjava","pathOld":"/dev/null","sourceNew":"  private Suggester getNodeLostSuggester(SolrCloudManager cloudManager, Policy.Session session, TriggerEvent event) throws IOException {\n    String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n    CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);\n    switch (action) {\n      case MOVEREPLICA:\n        Suggester s = session.getSuggester(action)\n                .hint(Suggester.Hint.SRC_NODE, event.getProperty(NODE_NAMES));\n        if (applyCollectionHints(cloudManager, s) == 0) return NoneSuggester.get(session);\n        return s;\n      case DELETENODE:\n        int start = (Integer)event.getProperty(START, 0);\n        List<String> srcNodes = (List<String>) event.getProperty(NODE_NAMES);\n        if (srcNodes.isEmpty() || start >= srcNodes.size()) {\n          return NoneSuggester.get(session);\n        }\n        String sourceNode = srcNodes.get(start);\n        s = session.getSuggester(action)\n                .hint(Suggester.Hint.SRC_NODE, event.getProperty(NODE_NAMES));\n        if (applyCollectionHints(cloudManager, s) == 0) return NoneSuggester.get(session);\n        s.hint(Suggester.Hint.SRC_NODE, Collections.singletonList(sourceNode));\n        event.getProperties().put(START, ++start);\n        return s;\n      case NONE:\n        return NoneSuggester.get(session);\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unsupported preferredOperation: \" + action.toLower() + \" specified for node lost trigger\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa0f21a44e235a2299ea1fa913898b182dd7cce","date":1590952026,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getNodeLostSuggester(SolrCloudManager,Policy.Session,TriggerEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getNodeLostSuggester(SolrCloudManager,Policy.Session,TriggerEvent).mjava","sourceNew":"  private Suggester getNodeLostSuggester(SolrCloudManager cloudManager, Policy.Session session, TriggerEvent event) throws IOException {\n    String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n    CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);\n    switch (action) {\n      case MOVEREPLICA:\n        Suggester s = session.getSuggester(action)\n                .hint(Suggester.Hint.SRC_NODE, event.getProperty(NODE_NAMES));\n        if (applyCollectionHints(cloudManager, s) == 0) return NoneSuggester.get(session);\n        return s;\n      case DELETENODE:\n        int start = (Integer)event.getProperty(START, 0);\n        @SuppressWarnings({\"unchecked\"})\n        List<String> srcNodes = (List<String>) event.getProperty(NODE_NAMES);\n        if (srcNodes.isEmpty() || start >= srcNodes.size()) {\n          return NoneSuggester.get(session);\n        }\n        String sourceNode = srcNodes.get(start);\n        s = session.getSuggester(action)\n                .hint(Suggester.Hint.SRC_NODE, event.getProperty(NODE_NAMES));\n        if (applyCollectionHints(cloudManager, s) == 0) return NoneSuggester.get(session);\n        s.hint(Suggester.Hint.SRC_NODE, Collections.singletonList(sourceNode));\n        event.getProperties().put(START, ++start);\n        return s;\n      case NONE:\n        return NoneSuggester.get(session);\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unsupported preferredOperation: \" + action.toLower() + \" specified for node lost trigger\");\n    }\n  }\n\n","sourceOld":"  private Suggester getNodeLostSuggester(SolrCloudManager cloudManager, Policy.Session session, TriggerEvent event) throws IOException {\n    String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n    CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);\n    switch (action) {\n      case MOVEREPLICA:\n        Suggester s = session.getSuggester(action)\n                .hint(Suggester.Hint.SRC_NODE, event.getProperty(NODE_NAMES));\n        if (applyCollectionHints(cloudManager, s) == 0) return NoneSuggester.get(session);\n        return s;\n      case DELETENODE:\n        int start = (Integer)event.getProperty(START, 0);\n        List<String> srcNodes = (List<String>) event.getProperty(NODE_NAMES);\n        if (srcNodes.isEmpty() || start >= srcNodes.size()) {\n          return NoneSuggester.get(session);\n        }\n        String sourceNode = srcNodes.get(start);\n        s = session.getSuggester(action)\n                .hint(Suggester.Hint.SRC_NODE, event.getProperty(NODE_NAMES));\n        if (applyCollectionHints(cloudManager, s) == 0) return NoneSuggester.get(session);\n        s.hint(Suggester.Hint.SRC_NODE, Collections.singletonList(sourceNode));\n        event.getProperties().put(START, ++start);\n        return s;\n      case NONE:\n        return NoneSuggester.get(session);\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unsupported preferredOperation: \" + action.toLower() + \" specified for node lost trigger\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getNodeLostSuggester(SolrCloudManager,Policy.Session,TriggerEvent).mjava","sourceNew":null,"sourceOld":"  private Suggester getNodeLostSuggester(SolrCloudManager cloudManager, Policy.Session session, TriggerEvent event) throws IOException {\n    String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n    CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);\n    switch (action) {\n      case MOVEREPLICA:\n        Suggester s = session.getSuggester(action)\n                .hint(Suggester.Hint.SRC_NODE, event.getProperty(NODE_NAMES));\n        if (applyCollectionHints(cloudManager, s) == 0) return NoneSuggester.get(session);\n        return s;\n      case DELETENODE:\n        int start = (Integer)event.getProperty(START, 0);\n        @SuppressWarnings({\"unchecked\"})\n        List<String> srcNodes = (List<String>) event.getProperty(NODE_NAMES);\n        if (srcNodes.isEmpty() || start >= srcNodes.size()) {\n          return NoneSuggester.get(session);\n        }\n        String sourceNode = srcNodes.get(start);\n        s = session.getSuggester(action)\n                .hint(Suggester.Hint.SRC_NODE, event.getProperty(NODE_NAMES));\n        if (applyCollectionHints(cloudManager, s) == 0) return NoneSuggester.get(session);\n        s.hint(Suggester.Hint.SRC_NODE, Collections.singletonList(sourceNode));\n        event.getProperties().put(START, ++start);\n        return s;\n      case NONE:\n        return NoneSuggester.get(session);\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unsupported preferredOperation: \" + action.toLower() + \" specified for node lost trigger\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["034aa493deab2c07f8061b37af0a53470dd1e6f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"034aa493deab2c07f8061b37af0a53470dd1e6f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["3f504512a03d978990cbff30db0522b354e846db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["034aa493deab2c07f8061b37af0a53470dd1e6f6"],"034aa493deab2c07f8061b37af0a53470dd1e6f6":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}