{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries.LineValidator#testBBoxQuery(double,double,double,double,Object).mjava","commits":[{"id":"6345300cb90308ddf9579f7a7396a32d98795311","date":1533248257,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries.LineValidator#testBBoxQuery(double,double,double,double,Object).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public boolean testBBoxQuery(double minLat, double maxLat, double minLon, double maxLon, Object shape) {\n      // to keep it simple we convert the bbox into a polygon and use poly2d\n      Polygon2D p = Polygon2D.create(new Polygon[] {new Polygon(new double[] {minLat, minLat, maxLat, maxLat, minLat},\n          new double[] {minLon, maxLon, maxLon, minLon, minLon})});\n      return testLine(p, (Line)shape);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97f74f84954e9fefbac4cb38b9bf339e1757600d","date":1533750605,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries.LineValidator#testBBoxQuery(double,double,double,double,Object).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries.LineValidator#testBBoxQuery(double,double,double,double,Object).mjava","sourceNew":"    @Override\n    public boolean testBBoxQuery(double minLat, double maxLat, double minLon, double maxLon, Object shape) {\n      Line l = (Line)shape;\n      if (queryRelation == QueryRelation.WITHIN) {\n        // within: bounding box of shape should be within query box\n        return minLat <= quantizeLat(l.minLat) && maxLat >= quantizeLat(l.maxLat)\n            && minLon <= quantizeLon(l.minLon) && maxLon >= quantizeLon(l.maxLon);\n      }\n\n      // to keep it simple we convert the bbox into a polygon and use poly2d\n      Polygon2D p = Polygon2D.create(new Polygon[] {new Polygon(new double[] {minLat, minLat, maxLat, maxLat, minLat},\n          new double[] {minLon, maxLon, maxLon, minLon, minLon})});\n      return testLine(p, l);\n    }\n\n","sourceOld":"    @Override\n    public boolean testBBoxQuery(double minLat, double maxLat, double minLon, double maxLon, Object shape) {\n      // to keep it simple we convert the bbox into a polygon and use poly2d\n      Polygon2D p = Polygon2D.create(new Polygon[] {new Polygon(new double[] {minLat, minLat, maxLat, maxLat, minLat},\n          new double[] {minLon, maxLon, maxLon, minLon, minLon})});\n      return testLine(p, (Line)shape);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4fccad460342b1af30cb328cc8297751a218d78","date":1541177339,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries.LineValidator#testBBoxQuery(double,double,double,double,Object).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries.LineValidator#testBBoxQuery(double,double,double,double,Object).mjava","sourceNew":"    @Override\n    public boolean testBBoxQuery(double minLat, double maxLat, double minLon, double maxLon, Object shape) {\n      Line l = (Line)shape;\n      if (queryRelation == QueryRelation.WITHIN) {\n        // within: bounding box of shape should be within query box\n        return minLat <= quantizeLat(l.minLat) && maxLat >= quantizeLat(l.maxLat)\n            && minLon <= quantizeLon(l.minLon) && maxLon >= quantizeLon(l.maxLon);\n      }\n\n      // to keep it simple we convert the bbox into a polygon and use poly2d\n      Line2D line = Line2D.create(quantizeLine(l));\n      Relation r = line.relate(minLat, maxLat, minLon, maxLon);\n\n      if (queryRelation == QueryRelation.DISJOINT) {\n        return r == Relation.CELL_OUTSIDE_QUERY;\n      }\n      return r != Relation.CELL_OUTSIDE_QUERY;\n    }\n\n","sourceOld":"    @Override\n    public boolean testBBoxQuery(double minLat, double maxLat, double minLon, double maxLon, Object shape) {\n      Line l = (Line)shape;\n      if (queryRelation == QueryRelation.WITHIN) {\n        // within: bounding box of shape should be within query box\n        return minLat <= quantizeLat(l.minLat) && maxLat >= quantizeLat(l.maxLat)\n            && minLon <= quantizeLon(l.minLon) && maxLon >= quantizeLon(l.maxLon);\n      }\n\n      // to keep it simple we convert the bbox into a polygon and use poly2d\n      Polygon2D p = Polygon2D.create(new Polygon[] {new Polygon(new double[] {minLat, minLat, maxLat, maxLat, minLat},\n          new double[] {minLon, maxLon, maxLon, minLon, minLon})});\n      return testLine(p, l);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d85f0b2ceb48a48bf5a30d72b477bd21fdf9686d","date":1541178922,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries.LineValidator#testBBoxQuery(double,double,double,double,Object).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries.LineValidator#testBBoxQuery(double,double,double,double,Object).mjava","sourceNew":"    @Override\n    public boolean testBBoxQuery(double minLat, double maxLat, double minLon, double maxLon, Object shape) {\n      Line l = (Line)shape;\n      if (queryRelation == QueryRelation.WITHIN) {\n        // within: bounding box of shape should be within query box\n        double lMinLat = quantizeLat(l.minLat);\n        double lMinLon = quantizeLon(l.minLon);\n        double lMaxLat = quantizeLat(l.maxLat);\n        double lMaxLon = quantizeLon(l.maxLon);\n\n        if (minLon > maxLon) {\n          // crosses dateline:\n          return minLat <= lMinLat && maxLat >= lMaxLat\n              && ((GeoUtils.MIN_LON_INCL <= lMinLon && maxLon >= lMaxLon)\n              || (minLon <= lMinLon && GeoUtils.MAX_LON_INCL >= lMaxLon));\n        }\n        return minLat <= lMinLat && maxLat >= lMaxLat\n            && minLon <= lMinLon && maxLon >= lMaxLon;\n      }\n\n      Line2D line = Line2D.create(quantizeLine(l));\n      Relation r;\n      if (minLon > maxLon) {\n        // crosses dateline:\n        r = line.relate(minLat, maxLat, MIN_LON_INCL, maxLon);\n        if (r == Relation.CELL_OUTSIDE_QUERY) {\n          r = line.relate(minLat, maxLat, minLon, MAX_LON_INCL);\n        }\n      } else {\n        r = line.relate(minLat, maxLat, minLon, maxLon);\n      }\n\n      if (queryRelation == QueryRelation.DISJOINT) {\n        return r == Relation.CELL_OUTSIDE_QUERY;\n      }\n      return r != Relation.CELL_OUTSIDE_QUERY;\n    }\n\n","sourceOld":"    @Override\n    public boolean testBBoxQuery(double minLat, double maxLat, double minLon, double maxLon, Object shape) {\n      Line l = (Line)shape;\n      if (queryRelation == QueryRelation.WITHIN) {\n        // within: bounding box of shape should be within query box\n        return minLat <= quantizeLat(l.minLat) && maxLat >= quantizeLat(l.maxLat)\n            && minLon <= quantizeLon(l.minLon) && maxLon >= quantizeLon(l.maxLon);\n      }\n\n      // to keep it simple we convert the bbox into a polygon and use poly2d\n      Line2D line = Line2D.create(quantizeLine(l));\n      Relation r = line.relate(minLat, maxLat, minLon, maxLon);\n\n      if (queryRelation == QueryRelation.DISJOINT) {\n        return r == Relation.CELL_OUTSIDE_QUERY;\n      }\n      return r != Relation.CELL_OUTSIDE_QUERY;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2aeefba8262036d422d639e48c49d51316bea138","date":1545148224,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries.LineValidator#testBBoxQuery(double,double,double,double,Object).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries.LineValidator#testBBoxQuery(double,double,double,double,Object).mjava","sourceNew":"    @Override\n    public boolean testBBoxQuery(double minLat, double maxLat, double minLon, double maxLon, Object shape) {\n      Line line = (Line)shape;\n      Rectangle2D rectangle2D = Rectangle2D.create(new Rectangle(minLat, maxLat, minLon, maxLon));\n      for (int i = 0, j = 1; j < line.numPoints(); ++i, ++j) {\n        int[] decoded = encodeDecodeTriangle(line.getLon(i), line.getLat(i), line.getLon(j), line.getLat(j), line.getLon(i), line.getLat(i));\n        if (queryRelation == QueryRelation.WITHIN) {\n          if (rectangle2D.containsTriangle(decoded[1], decoded[0], decoded[3], decoded[2], decoded[5], decoded[4]) == false) {\n            return false;\n          }\n        } else {\n          if (rectangle2D.intersectsTriangle(decoded[1], decoded[0], decoded[3], decoded[2], decoded[5], decoded[4]) == true) {\n            return queryRelation == QueryRelation.INTERSECTS;\n          }\n        }\n      }\n      return queryRelation != QueryRelation.INTERSECTS;\n    }\n\n","sourceOld":"    @Override\n    public boolean testBBoxQuery(double minLat, double maxLat, double minLon, double maxLon, Object shape) {\n      Line l = (Line)shape;\n      if (queryRelation == QueryRelation.WITHIN) {\n        // within: bounding box of shape should be within query box\n        double lMinLat = quantizeLat(l.minLat);\n        double lMinLon = quantizeLon(l.minLon);\n        double lMaxLat = quantizeLat(l.maxLat);\n        double lMaxLon = quantizeLon(l.maxLon);\n\n        if (minLon > maxLon) {\n          // crosses dateline:\n          return minLat <= lMinLat && maxLat >= lMaxLat\n              && ((GeoUtils.MIN_LON_INCL <= lMinLon && maxLon >= lMaxLon)\n              || (minLon <= lMinLon && GeoUtils.MAX_LON_INCL >= lMaxLon));\n        }\n        return minLat <= lMinLat && maxLat >= lMaxLat\n            && minLon <= lMinLon && maxLon >= lMaxLon;\n      }\n\n      Line2D line = Line2D.create(quantizeLine(l));\n      Relation r;\n      if (minLon > maxLon) {\n        // crosses dateline:\n        r = line.relate(minLat, maxLat, MIN_LON_INCL, maxLon);\n        if (r == Relation.CELL_OUTSIDE_QUERY) {\n          r = line.relate(minLat, maxLat, minLon, MAX_LON_INCL);\n        }\n      } else {\n        r = line.relate(minLat, maxLat, minLon, maxLon);\n      }\n\n      if (queryRelation == QueryRelation.DISJOINT) {\n        return r == Relation.CELL_OUTSIDE_QUERY;\n      }\n      return r != Relation.CELL_OUTSIDE_QUERY;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries.LineValidator#testBBoxQuery(double,double,double,double,Object).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries.LineValidator#testBBoxQuery(double,double,double,double,Object).mjava","sourceNew":"    @Override\n    public boolean testBBoxQuery(double minLat, double maxLat, double minLon, double maxLon, Object shape) {\n      Line line = (Line)shape;\n      Rectangle2D rectangle2D = Rectangle2D.create(new Rectangle(minLat, maxLat, minLon, maxLon));\n      for (int i = 0, j = 1; j < line.numPoints(); ++i, ++j) {\n        int[] decoded = encoder.encodeDecodeTriangle(line.getLon(i), line.getLat(i), line.getLon(j), line.getLat(j), line.getLon(i), line.getLat(i));\n        if (queryRelation == QueryRelation.WITHIN) {\n          if (rectangle2D.containsTriangle(decoded[1], decoded[0], decoded[3], decoded[2], decoded[5], decoded[4]) == false) {\n            return false;\n          }\n        } else {\n          if (rectangle2D.intersectsTriangle(decoded[1], decoded[0], decoded[3], decoded[2], decoded[5], decoded[4]) == true) {\n            return queryRelation == QueryRelation.INTERSECTS;\n          }\n        }\n      }\n      return queryRelation != QueryRelation.INTERSECTS;\n    }\n\n","sourceOld":"    @Override\n    public boolean testBBoxQuery(double minLat, double maxLat, double minLon, double maxLon, Object shape) {\n      Line line = (Line)shape;\n      Rectangle2D rectangle2D = Rectangle2D.create(new Rectangle(minLat, maxLat, minLon, maxLon));\n      for (int i = 0, j = 1; j < line.numPoints(); ++i, ++j) {\n        int[] decoded = encodeDecodeTriangle(line.getLon(i), line.getLat(i), line.getLon(j), line.getLat(j), line.getLon(i), line.getLat(i));\n        if (queryRelation == QueryRelation.WITHIN) {\n          if (rectangle2D.containsTriangle(decoded[1], decoded[0], decoded[3], decoded[2], decoded[5], decoded[4]) == false) {\n            return false;\n          }\n        } else {\n          if (rectangle2D.intersectsTriangle(decoded[1], decoded[0], decoded[3], decoded[2], decoded[5], decoded[4]) == true) {\n            return queryRelation == QueryRelation.INTERSECTS;\n          }\n        }\n      }\n      return queryRelation != QueryRelation.INTERSECTS;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ed90f8ba7e7be13d155f954862178b23a324125","date":1568020603,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries.LineValidator#testBBoxQuery(double,double,double,double,Object).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries.LineValidator#testBBoxQuery(double,double,double,double,Object).mjava","sourceNew":"    @Override\n    public boolean testBBoxQuery(double minLat, double maxLat, double minLon, double maxLon, Object shape) {\n      Line line = (Line)shape;\n      Rectangle2D rectangle2D = Rectangle2D.create(new Rectangle(minLat, maxLat, minLon, maxLon));\n      for (int i = 0, j = 1; j < line.numPoints(); ++i, ++j) {\n        ShapeField.DecodedTriangle decoded = encoder.encodeDecodeTriangle(line.getLon(i), line.getLat(i), true, line.getLon(j), line.getLat(j), true, line.getLon(i), line.getLat(i), true);\n        if (queryRelation == QueryRelation.WITHIN) {\n          if (rectangle2D.containsTriangle(decoded.aX, decoded.aY, decoded.bX, decoded.bY, decoded.cX, decoded.cY) == false) {\n            return false;\n          }\n        } else {\n          if (rectangle2D.intersectsTriangle(decoded.aX, decoded.aY, decoded.bX, decoded.bY, decoded.cX, decoded.cY) == true) {\n            return queryRelation == QueryRelation.INTERSECTS;\n          }\n        }\n      }\n      return queryRelation != QueryRelation.INTERSECTS;\n    }\n\n","sourceOld":"    @Override\n    public boolean testBBoxQuery(double minLat, double maxLat, double minLon, double maxLon, Object shape) {\n      Line line = (Line)shape;\n      Rectangle2D rectangle2D = Rectangle2D.create(new Rectangle(minLat, maxLat, minLon, maxLon));\n      for (int i = 0, j = 1; j < line.numPoints(); ++i, ++j) {\n        int[] decoded = encoder.encodeDecodeTriangle(line.getLon(i), line.getLat(i), line.getLon(j), line.getLat(j), line.getLon(i), line.getLat(i));\n        if (queryRelation == QueryRelation.WITHIN) {\n          if (rectangle2D.containsTriangle(decoded[1], decoded[0], decoded[3], decoded[2], decoded[5], decoded[4]) == false) {\n            return false;\n          }\n        } else {\n          if (rectangle2D.intersectsTriangle(decoded[1], decoded[0], decoded[3], decoded[2], decoded[5], decoded[4]) == true) {\n            return queryRelation == QueryRelation.INTERSECTS;\n          }\n        }\n      }\n      return queryRelation != QueryRelation.INTERSECTS;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3","date":1576052211,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries.LineValidator#testBBoxQuery(double,double,double,double,Object).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries.LineValidator#testBBoxQuery(double,double,double,double,Object).mjava","sourceNew":"    @Override\n    public boolean testBBoxQuery(double minLat, double maxLat, double minLon, double maxLon, Object shape) {\n      Line line = (Line)shape;\n      Rectangle2D rectangle2D = Rectangle2D.create(new Rectangle(minLat, maxLat, minLon, maxLon));\n      Component2D.WithinRelation withinRelation = Component2D.WithinRelation.DISJOINT;\n      for (int i = 0, j = 1; j < line.numPoints(); ++i, ++j) {\n        ShapeField.DecodedTriangle decoded = encoder.encodeDecodeTriangle(line.getLon(i), line.getLat(i), true, line.getLon(j), line.getLat(j), true, line.getLon(i), line.getLat(i), true);\n        if (queryRelation == QueryRelation.WITHIN) {\n          if (rectangle2D.containsTriangle(decoded.aX, decoded.aY, decoded.bX, decoded.bY, decoded.cX, decoded.cY) == false) {\n            return false;\n          }\n        } else if (queryRelation == QueryRelation.CONTAINS) {\n          Component2D.WithinRelation relation = rectangle2D.withinTriangle(decoded.aX, decoded.aY, decoded.ab, decoded.bX, decoded.bY, decoded.bc, decoded.cX, decoded.cY, decoded.ca);\n          if (relation == Component2D.WithinRelation.NOTWITHIN) {\n            return false;\n          } else if (relation == Component2D.WithinRelation.CANDIDATE) {\n            withinRelation = Component2D.WithinRelation.CANDIDATE;\n          }\n        } else {\n          if (rectangle2D.intersectsTriangle(decoded.aX, decoded.aY, decoded.bX, decoded.bY, decoded.cX, decoded.cY) == true) {\n            return queryRelation == QueryRelation.INTERSECTS;\n          }\n        }\n      }\n      if (queryRelation == QueryRelation.CONTAINS) {\n        return withinRelation == Component2D.WithinRelation.CANDIDATE;\n      }\n      return queryRelation != QueryRelation.INTERSECTS;\n    }\n\n","sourceOld":"    @Override\n    public boolean testBBoxQuery(double minLat, double maxLat, double minLon, double maxLon, Object shape) {\n      Line line = (Line)shape;\n      Rectangle2D rectangle2D = Rectangle2D.create(new Rectangle(minLat, maxLat, minLon, maxLon));\n      for (int i = 0, j = 1; j < line.numPoints(); ++i, ++j) {\n        ShapeField.DecodedTriangle decoded = encoder.encodeDecodeTriangle(line.getLon(i), line.getLat(i), true, line.getLon(j), line.getLat(j), true, line.getLon(i), line.getLat(i), true);\n        if (queryRelation == QueryRelation.WITHIN) {\n          if (rectangle2D.containsTriangle(decoded.aX, decoded.aY, decoded.bX, decoded.bY, decoded.cX, decoded.cY) == false) {\n            return false;\n          }\n        } else {\n          if (rectangle2D.intersectsTriangle(decoded.aX, decoded.aY, decoded.bX, decoded.bY, decoded.cX, decoded.cY) == true) {\n            return queryRelation == QueryRelation.INTERSECTS;\n          }\n        }\n      }\n      return queryRelation != QueryRelation.INTERSECTS;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","date":1576073026,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries.LineValidator#testBBoxQuery(double,double,double,double,Object).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries.LineValidator#testBBoxQuery(double,double,double,double,Object).mjava","sourceNew":"    @Override\n    public boolean testBBoxQuery(double minLat, double maxLat, double minLon, double maxLon, Object shape) {\n      Line line = (Line)shape;\n      Rectangle2D rectangle2D = Rectangle2D.create(new Rectangle(minLat, maxLat, minLon, maxLon));\n      Component2D.WithinRelation withinRelation = Component2D.WithinRelation.DISJOINT;\n      for (int i = 0, j = 1; j < line.numPoints(); ++i, ++j) {\n        ShapeField.DecodedTriangle decoded = encoder.encodeDecodeTriangle(line.getLon(i), line.getLat(i), true, line.getLon(j), line.getLat(j), true, line.getLon(i), line.getLat(i), true);\n        if (queryRelation == QueryRelation.WITHIN) {\n          if (rectangle2D.containsTriangle(decoded.aX, decoded.aY, decoded.bX, decoded.bY, decoded.cX, decoded.cY) == false) {\n            return false;\n          }\n        } else if (queryRelation == QueryRelation.CONTAINS) {\n          Component2D.WithinRelation relation = rectangle2D.withinTriangle(decoded.aX, decoded.aY, decoded.ab, decoded.bX, decoded.bY, decoded.bc, decoded.cX, decoded.cY, decoded.ca);\n          if (relation == Component2D.WithinRelation.NOTWITHIN) {\n            return false;\n          } else if (relation == Component2D.WithinRelation.CANDIDATE) {\n            withinRelation = Component2D.WithinRelation.CANDIDATE;\n          }\n        } else {\n          if (rectangle2D.intersectsTriangle(decoded.aX, decoded.aY, decoded.bX, decoded.bY, decoded.cX, decoded.cY) == true) {\n            return queryRelation == QueryRelation.INTERSECTS;\n          }\n        }\n      }\n      if (queryRelation == QueryRelation.CONTAINS) {\n        return withinRelation == Component2D.WithinRelation.CANDIDATE;\n      }\n      return queryRelation != QueryRelation.INTERSECTS;\n    }\n\n","sourceOld":"    @Override\n    public boolean testBBoxQuery(double minLat, double maxLat, double minLon, double maxLon, Object shape) {\n      Line line = (Line)shape;\n      Rectangle2D rectangle2D = Rectangle2D.create(new Rectangle(minLat, maxLat, minLon, maxLon));\n      for (int i = 0, j = 1; j < line.numPoints(); ++i, ++j) {\n        ShapeField.DecodedTriangle decoded = encoder.encodeDecodeTriangle(line.getLon(i), line.getLat(i), true, line.getLon(j), line.getLat(j), true, line.getLon(i), line.getLat(i), true);\n        if (queryRelation == QueryRelation.WITHIN) {\n          if (rectangle2D.containsTriangle(decoded.aX, decoded.aY, decoded.bX, decoded.bY, decoded.cX, decoded.cY) == false) {\n            return false;\n          }\n        } else {\n          if (rectangle2D.intersectsTriangle(decoded.aX, decoded.aY, decoded.bX, decoded.bY, decoded.cX, decoded.cY) == true) {\n            return queryRelation == QueryRelation.INTERSECTS;\n          }\n        }\n      }\n      return queryRelation != QueryRelation.INTERSECTS;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries.LineValidator#testBBoxQuery(double,double,double,double,Object).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries.LineValidator#testBBoxQuery(double,double,double,double,Object).mjava","sourceNew":"    @Override\n    public boolean testBBoxQuery(double minLat, double maxLat, double minLon, double maxLon, Object shape) {\n      Line line = (Line)shape;\n      Rectangle2D rectangle2D = Rectangle2D.create(new Rectangle(minLat, maxLat, minLon, maxLon));\n      Component2D.WithinRelation withinRelation = Component2D.WithinRelation.DISJOINT;\n      for (int i = 0, j = 1; j < line.numPoints(); ++i, ++j) {\n        ShapeField.DecodedTriangle decoded = encoder.encodeDecodeTriangle(line.getLon(i), line.getLat(i), true, line.getLon(j), line.getLat(j), true, line.getLon(i), line.getLat(i), true);\n        if (queryRelation == QueryRelation.WITHIN) {\n          if (rectangle2D.containsTriangle(decoded.aX, decoded.aY, decoded.bX, decoded.bY, decoded.cX, decoded.cY) == false) {\n            return false;\n          }\n        } else if (queryRelation == QueryRelation.CONTAINS) {\n          Component2D.WithinRelation relation = rectangle2D.withinTriangle(decoded.aX, decoded.aY, decoded.ab, decoded.bX, decoded.bY, decoded.bc, decoded.cX, decoded.cY, decoded.ca);\n          if (relation == Component2D.WithinRelation.NOTWITHIN) {\n            return false;\n          } else if (relation == Component2D.WithinRelation.CANDIDATE) {\n            withinRelation = Component2D.WithinRelation.CANDIDATE;\n          }\n        } else {\n          if (rectangle2D.intersectsTriangle(decoded.aX, decoded.aY, decoded.bX, decoded.bY, decoded.cX, decoded.cY) == true) {\n            return queryRelation == QueryRelation.INTERSECTS;\n          }\n        }\n      }\n      if (queryRelation == QueryRelation.CONTAINS) {\n        return withinRelation == Component2D.WithinRelation.CANDIDATE;\n      }\n      return queryRelation != QueryRelation.INTERSECTS;\n    }\n\n","sourceOld":"    @Override\n    public boolean testBBoxQuery(double minLat, double maxLat, double minLon, double maxLon, Object shape) {\n      Line line = (Line)shape;\n      Rectangle2D rectangle2D = Rectangle2D.create(new Rectangle(minLat, maxLat, minLon, maxLon));\n      Component2D.WithinRelation withinRelation = Component2D.WithinRelation.DISJOINT;\n      for (int i = 0, j = 1; j < line.numPoints(); ++i, ++j) {\n        ShapeField.DecodedTriangle decoded = encoder.encodeDecodeTriangle(line.getLon(i), line.getLat(i), true, line.getLon(j), line.getLat(j), true, line.getLon(i), line.getLat(i), true);\n        if (queryRelation == QueryRelation.WITHIN) {\n          if (rectangle2D.containsTriangle(decoded.aX, decoded.aY, decoded.bX, decoded.bY, decoded.cX, decoded.cY) == false) {\n            return false;\n          }\n        } else if (queryRelation == QueryRelation.CONTAINS) {\n          Component2D.WithinRelation relation = rectangle2D.withinTriangle(decoded.aX, decoded.aY, decoded.ab, decoded.bX, decoded.bY, decoded.bc, decoded.cX, decoded.cY, decoded.ca);\n          if (relation == Component2D.WithinRelation.NOTWITHIN) {\n            return false;\n          } else if (relation == Component2D.WithinRelation.CANDIDATE) {\n            withinRelation = Component2D.WithinRelation.CANDIDATE;\n          }\n        } else {\n          if (rectangle2D.intersectsTriangle(decoded.aX, decoded.aY, decoded.bX, decoded.bY, decoded.cX, decoded.cY) == true) {\n            return queryRelation == QueryRelation.INTERSECTS;\n          }\n        }\n      }\n      if (queryRelation == QueryRelation.CONTAINS) {\n        return withinRelation == Component2D.WithinRelation.CANDIDATE;\n      }\n      return queryRelation != QueryRelation.INTERSECTS;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2aeefba8262036d422d639e48c49d51316bea138":["d85f0b2ceb48a48bf5a30d72b477bd21fdf9686d"],"6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab":["5ed90f8ba7e7be13d155f954862178b23a324125","3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3"],"d85f0b2ceb48a48bf5a30d72b477bd21fdf9686d":["e4fccad460342b1af30cb328cc8297751a218d78"],"97f74f84954e9fefbac4cb38b9bf339e1757600d":["6345300cb90308ddf9579f7a7396a32d98795311"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["2aeefba8262036d422d639e48c49d51316bea138"],"6345300cb90308ddf9579f7a7396a32d98795311":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5ed90f8ba7e7be13d155f954862178b23a324125":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"e4fccad460342b1af30cb328cc8297751a218d78":["97f74f84954e9fefbac4cb38b9bf339e1757600d"],"3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3":["5ed90f8ba7e7be13d155f954862178b23a324125"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"2aeefba8262036d422d639e48c49d51316bea138":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab":[],"d85f0b2ceb48a48bf5a30d72b477bd21fdf9686d":["2aeefba8262036d422d639e48c49d51316bea138"],"97f74f84954e9fefbac4cb38b9bf339e1757600d":["e4fccad460342b1af30cb328cc8297751a218d78"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6345300cb90308ddf9579f7a7396a32d98795311"],"6345300cb90308ddf9579f7a7396a32d98795311":["97f74f84954e9fefbac4cb38b9bf339e1757600d"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["5ed90f8ba7e7be13d155f954862178b23a324125"],"5ed90f8ba7e7be13d155f954862178b23a324125":["6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3"],"e4fccad460342b1af30cb328cc8297751a218d78":["d85f0b2ceb48a48bf5a30d72b477bd21fdf9686d"],"3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3":["6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}