{"path":"backwards/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"/dev/null","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = FSDirectory.open(indexDir);\n      IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.open(indexDir);\n      writer = new IndexWriter(directory, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestDoc#testIndexAndMerge().mjava","sourceNew":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = FSDirectory.open(indexDir);\n      IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.open(indexDir);\n      writer = new IndexWriter(directory, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","sourceOld":"    /** This test executes a number of merges and compares the contents of\n     *  the segments created when using compound file or not using one.\n     *\n     *  TODO: the original test used to print the segment contents to System.out\n     *        for visual validation. To have the same effect, a new method\n     *        checkSegment(String name, ...) should be created that would\n     *        assert various things about the segment.\n     */\n    public void testIndexAndMerge() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter(sw, true);\n\n      Directory directory = FSDirectory.open(indexDir);\n      IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      SegmentInfo si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      SegmentInfo si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      SegmentInfo siMerge = merge(si1, si2, \"merge\", false);\n      printSegment(out, siMerge);\n\n      SegmentInfo siMerge2 = merge(si1, si2, \"merge2\", false);\n      printSegment(out, siMerge2);\n\n      SegmentInfo siMerge3 = merge(siMerge, siMerge2, \"merge3\", false);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      out = new PrintWriter(sw, true);\n\n      directory = FSDirectory.open(indexDir);\n      writer = new IndexWriter(directory, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      si1 = indexDoc(writer, \"test.txt\");\n      printSegment(out, si1);\n\n      si2 = indexDoc(writer, \"test2.txt\");\n      printSegment(out, si2);\n      writer.close();\n\n      siMerge = merge(si1, si2, \"merge\", true);\n      printSegment(out, siMerge);\n\n      siMerge2 = merge(si1, si2, \"merge2\", true);\n      printSegment(out, siMerge2);\n\n      siMerge3 = merge(siMerge, siMerge2, \"merge3\", true);\n      printSegment(out, siMerge3);\n      \n      directory.close();\n      out.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}