{"path":"lucene/src/java/org/apache/lucene/index/TermsEnum#seekExact(BytesRef,TermState).mjava","commits":[{"id":"fd9cc9d77712aba3662f24632df7539ab75e3667","date":1309095238,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermsEnum#seekExact(BytesRef,TermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermsEnum#seek(BytesRef,TermState).mjava","sourceNew":"  /**\n   * Expert: Seeks a specific position by {@link TermState} previously obtained\n   * from {@link #termState()}. Callers should maintain the {@link TermState} to\n   * use this method. Low-level implementations may position the TermsEnum\n   * without re-seeking the term dictionary.\n   * <p>\n   * Seeking by {@link TermState} should only be used iff the enum the state was\n   * obtained from and the enum the state is used for seeking are obtained from\n   * the same {@link IndexReader}.\n   * <p>\n   * NOTE: Using this method with an incompatible {@link TermState} might leave\n   * this {@link TermsEnum} in undefined state. On a segment level\n   * {@link TermState} instances are compatible only iff the source and the\n   * target {@link TermsEnum} operate on the same field. If operating on segment\n   * level, TermState instances must not be used across segments.\n   * <p>\n   * NOTE: A seek by {@link TermState} might not restore the\n   * {@link AttributeSource}'s state. {@link AttributeSource} states must be\n   * maintained separately if this method is used.\n   * @param term the term the TermState corresponds to\n   * @param state the {@link TermState}\n   * */\n  public void seekExact(BytesRef term, TermState state) throws IOException {\n    if (!seekExact(term, true)) {\n      throw new IllegalArgumentException(\"term=\" + term + \" does not exist\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: Seeks a specific position by {@link TermState} previously obtained\n   * from {@link #termState()}. Callers should maintain the {@link TermState} to\n   * use this method. Low-level implementations may position the TermsEnum\n   * without re-seeking the term dictionary.\n   * <p>\n   * Seeking by {@link TermState} should only be used iff the enum the state was\n   * obtained from and the enum the state is used for seeking are obtained from\n   * the same {@link IndexReader}, otherwise a {@link #seek(BytesRef, TermState)} call can\n   * leave the enum in undefined state.\n   * <p>\n   * NOTE: Using this method with an incompatible {@link TermState} might leave\n   * this {@link TermsEnum} in undefined state. On a segment level\n   * {@link TermState} instances are compatible only iff the source and the\n   * target {@link TermsEnum} operate on the same field. If operating on segment\n   * level, TermState instances must not be used across segments.\n   * <p>\n   * NOTE: A seek by {@link TermState} might not restore the\n   * {@link AttributeSource}'s state. {@link AttributeSource} states must be\n   * maintained separately if this method is used.\n   * @param term the term the TermState corresponds to\n   * @param state the {@link TermState}\n   * */\n  public void seek(BytesRef term, TermState state) throws IOException {\n    seek(term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermsEnum#seekExact(BytesRef,TermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermsEnum#seek(BytesRef,TermState).mjava","sourceNew":"  /**\n   * Expert: Seeks a specific position by {@link TermState} previously obtained\n   * from {@link #termState()}. Callers should maintain the {@link TermState} to\n   * use this method. Low-level implementations may position the TermsEnum\n   * without re-seeking the term dictionary.\n   * <p>\n   * Seeking by {@link TermState} should only be used iff the enum the state was\n   * obtained from and the enum the state is used for seeking are obtained from\n   * the same {@link IndexReader}.\n   * <p>\n   * NOTE: Using this method with an incompatible {@link TermState} might leave\n   * this {@link TermsEnum} in undefined state. On a segment level\n   * {@link TermState} instances are compatible only iff the source and the\n   * target {@link TermsEnum} operate on the same field. If operating on segment\n   * level, TermState instances must not be used across segments.\n   * <p>\n   * NOTE: A seek by {@link TermState} might not restore the\n   * {@link AttributeSource}'s state. {@link AttributeSource} states must be\n   * maintained separately if this method is used.\n   * @param term the term the TermState corresponds to\n   * @param state the {@link TermState}\n   * */\n  public void seekExact(BytesRef term, TermState state) throws IOException {\n    if (!seekExact(term, true)) {\n      throw new IllegalArgumentException(\"term=\" + term + \" does not exist\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: Seeks a specific position by {@link TermState} previously obtained\n   * from {@link #termState()}. Callers should maintain the {@link TermState} to\n   * use this method. Low-level implementations may position the TermsEnum\n   * without re-seeking the term dictionary.\n   * <p>\n   * Seeking by {@link TermState} should only be used iff the enum the state was\n   * obtained from and the enum the state is used for seeking are obtained from\n   * the same {@link IndexReader}, otherwise a {@link #seek(BytesRef, TermState)} call can\n   * leave the enum in undefined state.\n   * <p>\n   * NOTE: Using this method with an incompatible {@link TermState} might leave\n   * this {@link TermsEnum} in undefined state. On a segment level\n   * {@link TermState} instances are compatible only iff the source and the\n   * target {@link TermsEnum} operate on the same field. If operating on segment\n   * level, TermState instances must not be used across segments.\n   * <p>\n   * NOTE: A seek by {@link TermState} might not restore the\n   * {@link AttributeSource}'s state. {@link AttributeSource} states must be\n   * maintained separately if this method is used.\n   * @param term the term the TermState corresponds to\n   * @param state the {@link TermState}\n   * */\n  public void seek(BytesRef term, TermState state) throws IOException {\n    seek(term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermsEnum#seekExact(BytesRef,TermState).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: Seeks a specific position by {@link TermState} previously obtained\n   * from {@link #termState()}. Callers should maintain the {@link TermState} to\n   * use this method. Low-level implementations may position the TermsEnum\n   * without re-seeking the term dictionary.\n   * <p>\n   * Seeking by {@link TermState} should only be used iff the enum the state was\n   * obtained from and the enum the state is used for seeking are obtained from\n   * the same {@link IndexReader}.\n   * <p>\n   * NOTE: Using this method with an incompatible {@link TermState} might leave\n   * this {@link TermsEnum} in undefined state. On a segment level\n   * {@link TermState} instances are compatible only iff the source and the\n   * target {@link TermsEnum} operate on the same field. If operating on segment\n   * level, TermState instances must not be used across segments.\n   * <p>\n   * NOTE: A seek by {@link TermState} might not restore the\n   * {@link AttributeSource}'s state. {@link AttributeSource} states must be\n   * maintained separately if this method is used.\n   * @param term the term the TermState corresponds to\n   * @param state the {@link TermState}\n   * */\n  public void seekExact(BytesRef term, TermState state) throws IOException {\n    if (!seekExact(term, true)) {\n      throw new IllegalArgumentException(\"term=\" + term + \" does not exist\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermsEnum#seekExact(BytesRef,TermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermsEnum#seekExact(BytesRef,TermState).mjava","sourceNew":"  /**\n   * Expert: Seeks a specific position by {@link TermState} previously obtained\n   * from {@link #termState()}. Callers should maintain the {@link TermState} to\n   * use this method. Low-level implementations may position the TermsEnum\n   * without re-seeking the term dictionary.\n   * <p>\n   * Seeking by {@link TermState} should only be used iff the enum the state was\n   * obtained from and the enum the state is used for seeking are obtained from\n   * the same {@link IndexReader}.\n   * <p>\n   * NOTE: Using this method with an incompatible {@link TermState} might leave\n   * this {@link TermsEnum} in undefined state. On a segment level\n   * {@link TermState} instances are compatible only iff the source and the\n   * target {@link TermsEnum} operate on the same field. If operating on segment\n   * level, TermState instances must not be used across segments.\n   * <p>\n   * NOTE: A seek by {@link TermState} might not restore the\n   * {@link AttributeSource}'s state. {@link AttributeSource} states must be\n   * maintained separately if this method is used.\n   * @param term the term the TermState corresponds to\n   * @param state the {@link TermState}\n   * */\n  public void seekExact(BytesRef term, TermState state) throws IOException {\n    if (!seekExact(term, true)) {\n      throw new IllegalArgumentException(\"term=\" + term + \" does not exist\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: Seeks a specific position by {@link TermState} previously obtained\n   * from {@link #termState()}. Callers should maintain the {@link TermState} to\n   * use this method. Low-level implementations may position the TermsEnum\n   * without re-seeking the term dictionary.\n   * <p>\n   * Seeking by {@link TermState} should only be used iff the enum the state was\n   * obtained from and the enum the state is used for seeking are obtained from\n   * the same {@link IndexReader}.\n   * <p>\n   * NOTE: Using this method with an incompatible {@link TermState} might leave\n   * this {@link TermsEnum} in undefined state. On a segment level\n   * {@link TermState} instances are compatible only iff the source and the\n   * target {@link TermsEnum} operate on the same field. If operating on segment\n   * level, TermState instances must not be used across segments.\n   * <p>\n   * NOTE: A seek by {@link TermState} might not restore the\n   * {@link AttributeSource}'s state. {@link AttributeSource} states must be\n   * maintained separately if this method is used.\n   * @param term the term the TermState corresponds to\n   * @param state the {@link TermState}\n   * */\n  public void seekExact(BytesRef term, TermState state) throws IOException {\n    if (!seekExact(term, true)) {\n      throw new IllegalArgumentException(\"term=\" + term + \" does not exist\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fd9cc9d77712aba3662f24632df7539ab75e3667"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2553b00f699380c64959ccb27991289aae87be2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd9cc9d77712aba3662f24632df7539ab75e3667"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd9cc9d77712aba3662f24632df7539ab75e3667"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2553b00f699380c64959ccb27991289aae87be2e","fd9cc9d77712aba3662f24632df7539ab75e3667","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"2553b00f699380c64959ccb27991289aae87be2e":[],"fd9cc9d77712aba3662f24632df7539ab75e3667":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}