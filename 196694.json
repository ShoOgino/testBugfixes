{"path":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#testMapLangcode().mjava","commits":[{"id":"8d3ef1a6efd1b3a7ca06843b1165d8690dee94ee","date":1372775927,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#testMapLangcode().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMapLangcode() throws Exception {\n    parameters = new ModifiableSolrParams();\n    parameters.add(\"langid.fl\", \"name\");\n    parameters.add(\"langid.lcmap\", \"zh_cn:zh zh_tw:zh\");\n    parameters.set(\"langid.enforceSchema\", \"false\");\n    liProcessor = createLangIdProcessor(parameters);\n\n    assertEquals(\"zh\", liProcessor.resolveLanguage(\"zh_cn\", \"NA\"));\n    assertEquals(\"zh\", liProcessor.resolveLanguage(\"zh_tw\", \"NA\"));\n    assertEquals(\"no\", liProcessor.resolveLanguage(\"no\", \"NA\"));\n    List<DetectedLanguage> langs = new ArrayList<DetectedLanguage>();\n    langs.add(new DetectedLanguage(\"zh_cn\", 0.8));\n    assertEquals(\"zh\", liProcessor.resolveLanguage(langs, \"NA\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1a2a2c4468a8bdff4cb7487d8b203d835d963e65"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#testMapLangcode().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMapLangcode() throws Exception {\n    parameters = new ModifiableSolrParams();\n    parameters.add(\"langid.fl\", \"name\");\n    parameters.add(\"langid.lcmap\", \"zh_cn:zh zh_tw:zh\");\n    parameters.set(\"langid.enforceSchema\", \"false\");\n    liProcessor = createLangIdProcessor(parameters);\n\n    assertEquals(\"zh\", liProcessor.resolveLanguage(\"zh_cn\", \"NA\"));\n    assertEquals(\"zh\", liProcessor.resolveLanguage(\"zh_tw\", \"NA\"));\n    assertEquals(\"no\", liProcessor.resolveLanguage(\"no\", \"NA\"));\n    List<DetectedLanguage> langs = new ArrayList<DetectedLanguage>();\n    langs.add(new DetectedLanguage(\"zh_cn\", 0.8));\n    assertEquals(\"zh\", liProcessor.resolveLanguage(langs, \"NA\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#testMapLangcode().mjava","pathOld":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#testMapLangcode().mjava","sourceNew":"  @Test\n  public void testMapLangcode() throws Exception {\n    parameters = new ModifiableSolrParams();\n    parameters.add(\"langid.fl\", \"name\");\n    parameters.add(\"langid.lcmap\", \"zh_cn:zh zh_tw:zh\");\n    parameters.set(\"langid.enforceSchema\", \"false\");\n    liProcessor = createLangIdProcessor(parameters);\n\n    assertEquals(\"zh\", liProcessor.resolveLanguage(\"zh_cn\", \"NA\"));\n    assertEquals(\"zh\", liProcessor.resolveLanguage(\"zh_tw\", \"NA\"));\n    assertEquals(\"no\", liProcessor.resolveLanguage(\"no\", \"NA\"));\n    List<DetectedLanguage> langs = new ArrayList<>();\n    langs.add(new DetectedLanguage(\"zh_cn\", 0.8));\n    assertEquals(\"zh\", liProcessor.resolveLanguage(langs, \"NA\"));\n  }\n\n","sourceOld":"  @Test\n  public void testMapLangcode() throws Exception {\n    parameters = new ModifiableSolrParams();\n    parameters.add(\"langid.fl\", \"name\");\n    parameters.add(\"langid.lcmap\", \"zh_cn:zh zh_tw:zh\");\n    parameters.set(\"langid.enforceSchema\", \"false\");\n    liProcessor = createLangIdProcessor(parameters);\n\n    assertEquals(\"zh\", liProcessor.resolveLanguage(\"zh_cn\", \"NA\"));\n    assertEquals(\"zh\", liProcessor.resolveLanguage(\"zh_tw\", \"NA\"));\n    assertEquals(\"no\", liProcessor.resolveLanguage(\"no\", \"NA\"));\n    List<DetectedLanguage> langs = new ArrayList<DetectedLanguage>();\n    langs.add(new DetectedLanguage(\"zh_cn\", 0.8));\n    assertEquals(\"zh\", liProcessor.resolveLanguage(langs, \"NA\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a2a2c4468a8bdff4cb7487d8b203d835d963e65","date":1408126346,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#testMapLangcode().mjava","pathOld":"solr/contrib/langid/src/test/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessorFactoryTestCase#testMapLangcode().mjava","sourceNew":"  @Test\n  public void testMapLangcode() throws Exception {\n    ModifiableSolrParams parameters = new ModifiableSolrParams();\n    parameters.add(\"langid.fl\", \"name\");\n    parameters.add(\"langid.lcmap\", \"zh_cn:zh zh_tw:zh\");\n    parameters.set(\"langid.enforceSchema\", \"false\");\n    liProcessor = createLangIdProcessor(parameters);\n\n    assertEquals(\"zh\", liProcessor.resolveLanguage(\"zh_cn\", \"NA\"));\n    assertEquals(\"zh\", liProcessor.resolveLanguage(\"zh_tw\", \"NA\"));\n    assertEquals(\"no\", liProcessor.resolveLanguage(\"no\", \"NA\"));\n    List<DetectedLanguage> langs = new ArrayList<>();\n    langs.add(new DetectedLanguage(\"zh_cn\", 0.8));\n    assertEquals(\"zh\", liProcessor.resolveLanguage(langs, \"NA\"));\n  }\n\n","sourceOld":"  @Test\n  public void testMapLangcode() throws Exception {\n    parameters = new ModifiableSolrParams();\n    parameters.add(\"langid.fl\", \"name\");\n    parameters.add(\"langid.lcmap\", \"zh_cn:zh zh_tw:zh\");\n    parameters.set(\"langid.enforceSchema\", \"false\");\n    liProcessor = createLangIdProcessor(parameters);\n\n    assertEquals(\"zh\", liProcessor.resolveLanguage(\"zh_cn\", \"NA\"));\n    assertEquals(\"zh\", liProcessor.resolveLanguage(\"zh_tw\", \"NA\"));\n    assertEquals(\"no\", liProcessor.resolveLanguage(\"no\", \"NA\"));\n    List<DetectedLanguage> langs = new ArrayList<>();\n    langs.add(new DetectedLanguage(\"zh_cn\", 0.8));\n    assertEquals(\"zh\", liProcessor.resolveLanguage(langs, \"NA\"));\n  }\n\n","bugFix":["8d3ef1a6efd1b3a7ca06843b1165d8690dee94ee"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["8d3ef1a6efd1b3a7ca06843b1165d8690dee94ee"],"8d3ef1a6efd1b3a7ca06843b1165d8690dee94ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8d3ef1a6efd1b3a7ca06843b1165d8690dee94ee"],"1a2a2c4468a8bdff4cb7487d8b203d835d963e65":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1a2a2c4468a8bdff4cb7487d8b203d835d963e65"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1a2a2c4468a8bdff4cb7487d8b203d835d963e65"],"8d3ef1a6efd1b3a7ca06843b1165d8690dee94ee":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"1a2a2c4468a8bdff4cb7487d8b203d835d963e65":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8d3ef1a6efd1b3a7ca06843b1165d8690dee94ee","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}