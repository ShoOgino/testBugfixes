{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#normalizeDest(String,String).mjava","commits":[{"id":"9272a617a9cbebf86be127014bbbacd7cf8f8e83","date":1467480344,"type":0,"author":"Erick","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#normalizeDest(String,String).mjava","pathOld":"/dev/null","sourceNew":"  private static String normalizeDest(String srcName, String dstName) {\n    // Pull the last element of the src path and add it to the dst.\n    if (dstName.endsWith(\"/\")) {\n      int pos = srcName.lastIndexOf(\"/\");\n      if (pos < 0) {\n        dstName += srcName;\n      } else {\n        dstName += srcName.substring(pos + 1);\n      }\n    } else if (dstName.equals(\".\")) {\n      dstName = Paths.get(\".\").normalize().toAbsolutePath().toString();\n    }\n    return dstName;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#normalizeDest(String,String).mjava","pathOld":"/dev/null","sourceNew":"  private static String normalizeDest(String srcName, String dstName) {\n    // Pull the last element of the src path and add it to the dst.\n    if (dstName.endsWith(\"/\")) {\n      int pos = srcName.lastIndexOf(\"/\");\n      if (pos < 0) {\n        dstName += srcName;\n      } else {\n        dstName += srcName.substring(pos + 1);\n      }\n    } else if (dstName.equals(\".\")) {\n      dstName = Paths.get(\".\").normalize().toAbsolutePath().toString();\n    }\n    return dstName;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4dbb79e6da9d3d2ef8d3890b5619da3c1fba62e","date":1490642105,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#normalizeDest(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#normalizeDest(String,String).mjava","sourceNew":"  private static String normalizeDest(String srcName, String dstName) {\n    // Special handling for \".\"\n    if (dstName.equals(\".\")) {\n      return Paths.get(\".\").normalize().toAbsolutePath().toString();\n    }\n    // Pull the last element of the src path and add it to the dst if the src does NOT end in a slash \n\n    // If the source ends in a slash, do not append the last segment to the dest\n    \n    if (dstName.endsWith(\"/\")) { // Dest is a directory.\n      int pos = srcName.lastIndexOf(\"/\");\n      if (pos < 0) {\n        dstName += srcName;\n      } else {\n        dstName += srcName.substring(pos + 1);\n      }\n    }\n    \n    log.info(\"copying from '{}' to '{}'\", srcName, dstName);\n    return dstName;\n  }\n\n","sourceOld":"  private static String normalizeDest(String srcName, String dstName) {\n    // Pull the last element of the src path and add it to the dst.\n    if (dstName.endsWith(\"/\")) {\n      int pos = srcName.lastIndexOf(\"/\");\n      if (pos < 0) {\n        dstName += srcName;\n      } else {\n        dstName += srcName.substring(pos + 1);\n      }\n    } else if (dstName.equals(\".\")) {\n      dstName = Paths.get(\".\").normalize().toAbsolutePath().toString();\n    }\n    return dstName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3565ba5fc0dc3dd0214d263b28e5bf7e06fdbfc2","date":1490847220,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#normalizeDest(String,String,boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#normalizeDest(String,String).mjava","sourceNew":"  // If the dest ends with a separator, it's a directory or non-leaf znode, so return the\n  // last element of the src to appended to the dstName.\n  private static String normalizeDest(String srcName, String dstName, boolean srcIsZk, boolean dstIsZk) {\n    // Special handling for \".\"\n    if (dstName.equals(\".\")) {\n      return Paths.get(\".\").normalize().toAbsolutePath().toString();\n    }\n\n    String dstSeparator = (dstIsZk) ? \"/\" : File.separator;\n    String srcSeparator = (srcIsZk) ? \"/\" : File.separator;\n\n    if (dstName.endsWith(dstSeparator)) { // Dest is a directory or non-leaf znode, append last element of the src path.\n      int pos = srcName.lastIndexOf(srcSeparator);\n      if (pos < 0) {\n        dstName += srcName;\n      } else {\n        dstName += srcName.substring(pos + 1);\n      }\n    }\n\n    log.info(\"copying from '{}' to '{}'\", srcName, dstName);\n    return dstName;\n  }\n\n","sourceOld":"  private static String normalizeDest(String srcName, String dstName) {\n    // Special handling for \".\"\n    if (dstName.equals(\".\")) {\n      return Paths.get(\".\").normalize().toAbsolutePath().toString();\n    }\n    // Pull the last element of the src path and add it to the dst if the src does NOT end in a slash \n\n    // If the source ends in a slash, do not append the last segment to the dest\n    \n    if (dstName.endsWith(\"/\")) { // Dest is a directory.\n      int pos = srcName.lastIndexOf(\"/\");\n      if (pos < 0) {\n        dstName += srcName;\n      } else {\n        dstName += srcName.substring(pos + 1);\n      }\n    }\n    \n    log.info(\"copying from '{}' to '{}'\", srcName, dstName);\n    return dstName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7b3180545c5d5e137529b5474e018af04e07615","date":1490873944,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#normalizeDest(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#normalizeDest(String,String).mjava","sourceNew":"  private static String normalizeDest(String srcName, String dstName) {\n    // Special handling for \".\"\n    if (dstName.equals(\".\")) {\n      return Paths.get(\".\").normalize().toAbsolutePath().toString();\n    }\n    // Pull the last element of the src path and add it to the dst if the src does NOT end in a slash \n\n    // If the source ends in a slash, do not append the last segment to the dest\n    \n    if (dstName.endsWith(\"/\")) { // Dest is a directory.\n      int pos = srcName.lastIndexOf(\"/\");\n      if (pos < 0) {\n        dstName += srcName;\n      } else {\n        dstName += srcName.substring(pos + 1);\n      }\n    }\n    \n    log.info(\"copying from '{}' to '{}'\", srcName, dstName);\n    return dstName;\n  }\n\n","sourceOld":"  private static String normalizeDest(String srcName, String dstName) {\n    // Pull the last element of the src path and add it to the dst.\n    if (dstName.endsWith(\"/\")) {\n      int pos = srcName.lastIndexOf(\"/\");\n      if (pos < 0) {\n        dstName += srcName;\n      } else {\n        dstName += srcName.substring(pos + 1);\n      }\n    } else if (dstName.equals(\".\")) {\n      dstName = Paths.get(\".\").normalize().toAbsolutePath().toString();\n    }\n    return dstName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f49693fcc05c1186d9b347493efa73a614f5bba7","date":1490873947,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#normalizeDest(String,String,boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#normalizeDest(String,String).mjava","sourceNew":"  // If the dest ends with a separator, it's a directory or non-leaf znode, so return the\n  // last element of the src to appended to the dstName.\n  private static String normalizeDest(String srcName, String dstName, boolean srcIsZk, boolean dstIsZk) {\n    // Special handling for \".\"\n    if (dstName.equals(\".\")) {\n      return Paths.get(\".\").normalize().toAbsolutePath().toString();\n    }\n\n    String dstSeparator = (dstIsZk) ? \"/\" : File.separator;\n    String srcSeparator = (srcIsZk) ? \"/\" : File.separator;\n\n    if (dstName.endsWith(dstSeparator)) { // Dest is a directory or non-leaf znode, append last element of the src path.\n      int pos = srcName.lastIndexOf(srcSeparator);\n      if (pos < 0) {\n        dstName += srcName;\n      } else {\n        dstName += srcName.substring(pos + 1);\n      }\n    }\n\n    log.info(\"copying from '{}' to '{}'\", srcName, dstName);\n    return dstName;\n  }\n\n","sourceOld":"  private static String normalizeDest(String srcName, String dstName) {\n    // Special handling for \".\"\n    if (dstName.equals(\".\")) {\n      return Paths.get(\".\").normalize().toAbsolutePath().toString();\n    }\n    // Pull the last element of the src path and add it to the dst if the src does NOT end in a slash \n\n    // If the source ends in a slash, do not append the last segment to the dest\n    \n    if (dstName.endsWith(\"/\")) { // Dest is a directory.\n      int pos = srcName.lastIndexOf(\"/\");\n      if (pos < 0) {\n        dstName += srcName;\n      } else {\n        dstName += srcName.substring(pos + 1);\n      }\n    }\n    \n    log.info(\"copying from '{}' to '{}'\", srcName, dstName);\n    return dstName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7b3180545c5d5e137529b5474e018af04e07615":["9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"f49693fcc05c1186d9b347493efa73a614f5bba7":["c7b3180545c5d5e137529b5474e018af04e07615"],"f4dbb79e6da9d3d2ef8d3890b5619da3c1fba62e":["9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3565ba5fc0dc3dd0214d263b28e5bf7e06fdbfc2":["f4dbb79e6da9d3d2ef8d3890b5619da3c1fba62e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3565ba5fc0dc3dd0214d263b28e5bf7e06fdbfc2"]},"commit2Childs":{"c7b3180545c5d5e137529b5474e018af04e07615":["f49693fcc05c1186d9b347493efa73a614f5bba7"],"f49693fcc05c1186d9b347493efa73a614f5bba7":[],"f4dbb79e6da9d3d2ef8d3890b5619da3c1fba62e":["3565ba5fc0dc3dd0214d263b28e5bf7e06fdbfc2"],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["c7b3180545c5d5e137529b5474e018af04e07615","f4dbb79e6da9d3d2ef8d3890b5619da3c1fba62e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9272a617a9cbebf86be127014bbbacd7cf8f8e83","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"3565ba5fc0dc3dd0214d263b28e5bf7e06fdbfc2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f49693fcc05c1186d9b347493efa73a614f5bba7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}