{"path":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,Iterable[Map.Entry[String,Object]],boolean).mjava","commits":[{"id":"195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa","date":1494330459,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,Iterable[Map.Entry[String,Object]],boolean).mjava","pathOld":"/dev/null","sourceNew":"  public static void invokeSetters(Object bean, Iterable<Map.Entry<String,Object>> initArgs, boolean lenient) {\n    if (initArgs == null) return;\n    final Class<?> clazz = bean.getClass();\n    for (Map.Entry<String,Object> entry : initArgs) {\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      try {\n        final Object val = entry.getValue();\n        final Method method = findSetter(clazz, setterName, key, val.getClass(), lenient);\n        if (method != null) {\n          method.invoke(bean, val);\n        }\n      } catch (InvocationTargetException | IllegalAccessException e1) {\n        if (lenient) {\n          continue;\n        }\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,Iterable[Map.Entry[String,Object]],boolean).mjava","pathOld":"/dev/null","sourceNew":"  public static void invokeSetters(Object bean, Iterable<Map.Entry<String,Object>> initArgs, boolean lenient) {\n    if (initArgs == null) return;\n    final Class<?> clazz = bean.getClass();\n    for (Map.Entry<String,Object> entry : initArgs) {\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      try {\n        final Object val = entry.getValue();\n        final Method method = findSetter(clazz, setterName, key, val.getClass(), lenient);\n        if (method != null) {\n          method.invoke(bean, val);\n        }\n      } catch (InvocationTargetException | IllegalAccessException e1) {\n        if (lenient) {\n          continue;\n        }\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79462ff6a70d5a5b8afc7bcde420821bdeb7e4cd","date":1523381647,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,Iterable[Map.Entry[String,Object]],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,Iterable[Map.Entry[String,Object]],boolean).mjava","sourceNew":"  public static void invokeSetters(Object bean, Iterable<Map.Entry<String,Object>> initArgs, boolean lenient) {\n    if (initArgs == null) return;\n    final Class<?> clazz = bean.getClass();\n    for (Map.Entry<String,Object> entry : initArgs) {\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      try {\n        final Object val = entry.getValue();\n        final Method method = findSetter(clazz, setterName, key, val.getClass(), lenient);\n        if (method != null) {\n          method.invoke(bean, val);\n        }\n      } catch (InvocationTargetException | IllegalAccessException e1) {\n        if (lenient) {\n          continue;\n        }\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      }\n      catch (AssertionError ae) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName()+\n            \". This might be a case of SOLR-12207\", ae);\n      }\n    }\n  }\n\n","sourceOld":"  public static void invokeSetters(Object bean, Iterable<Map.Entry<String,Object>> initArgs, boolean lenient) {\n    if (initArgs == null) return;\n    final Class<?> clazz = bean.getClass();\n    for (Map.Entry<String,Object> entry : initArgs) {\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      try {\n        final Object val = entry.getValue();\n        final Method method = findSetter(clazz, setterName, key, val.getClass(), lenient);\n        if (method != null) {\n          method.invoke(bean, val);\n        }\n      } catch (InvocationTargetException | IllegalAccessException e1) {\n        if (lenient) {\n          continue;\n        }\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"79462ff6a70d5a5b8afc7bcde420821bdeb7e4cd":["195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["79462ff6a70d5a5b8afc7bcde420821bdeb7e4cd"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa"],"195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa":["e9017cf144952056066919f1ebc7897ff9bd71b1","79462ff6a70d5a5b8afc7bcde420821bdeb7e4cd"],"79462ff6a70d5a5b8afc7bcde420821bdeb7e4cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}