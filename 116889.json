{"path":"solr/core/src/java/org/apache/solr/handler/admin/LogLevelHandler#init(NamedList).mjava","commits":[{"id":"43aba035b2a37ad571a7b19496d3108f44e0b97d","date":1329961988,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LogLevelHandler#init(NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void init(NamedList args) {\n    String fname = (String)args.get(\"logger.factory\");\n    if(fname == null || \"JUL\".equalsIgnoreCase(fname)) {\n      factory = new LoggerFactoryWrapperJUL();\n    }\n    else if( \"Log4j\".equals(fname) ) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Log4j not yet supported\");\n      // factory = new LoggerFactoryWrapperLog4j();\n    }\n    else {\n      try {\n        factory = (LoggerFactoryWrapper) Class.forName(fname).newInstance();\n      }\n      catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LogLevelHandler#init(NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void init(NamedList args) {\n    String fname = (String)args.get(\"logger.factory\");\n    if(fname == null || \"JUL\".equalsIgnoreCase(fname)) {\n      factory = new LoggerFactoryWrapperJUL();\n    }\n    else if( \"Log4j\".equals(fname) ) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Log4j not yet supported\");\n      // factory = new LoggerFactoryWrapperLog4j();\n    }\n    else {\n      try {\n        factory = (LoggerFactoryWrapper) Class.forName(fname).newInstance();\n      }\n      catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54d9cd7a1fb3deb9fd44d6257a434e3b86289877","date":1334333912,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LogLevelHandler#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LogLevelHandler#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    String fname = (String)args.get(\"logger.factory\");\n    try {\n      slf4jImpl = StaticLoggerBinder.getSingleton().getLoggerFactoryClassStr();\n      if(fname == null ) {\n        if( slf4jImpl.indexOf(\"Log4j\") > 0) {\n          fname = \"Log4j\";\n        }\n        else if( slf4jImpl.indexOf(\"JDK\") > 0) {\n          fname = \"JUL\";\n        }\n        else {\n          return; // unsuppored\n        }\n      }\n    }\n    catch(Exception ex) {}\n    \n    if(\"JUL\".equalsIgnoreCase(fname)) {\n      factory = new LoggerFactoryWrapperJUL();\n    }\n    else if( \"Log4j\".equals(fname) ) {\n      factory = new LoggerFactoryWrapperLog4j();\n    }\n    else {\n      try {\n        factory = (LoggerFactoryWrapper) Class.forName(fname).newInstance();\n      }\n      catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    String fname = (String)args.get(\"logger.factory\");\n    if(fname == null || \"JUL\".equalsIgnoreCase(fname)) {\n      factory = new LoggerFactoryWrapperJUL();\n    }\n    else if( \"Log4j\".equals(fname) ) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Log4j not yet supported\");\n      // factory = new LoggerFactoryWrapperLog4j();\n    }\n    else {\n      try {\n        factory = (LoggerFactoryWrapper) Class.forName(fname).newInstance();\n      }\n      catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"829761a123d59d7a3c39e5f13fbc03de63f55ce5","date":1334686329,"type":4,"author":"Ryan McKinley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LogLevelHandler#init(NamedList).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void init(NamedList args) {\n    String fname = (String)args.get(\"logger.factory\");\n    try {\n      slf4jImpl = StaticLoggerBinder.getSingleton().getLoggerFactoryClassStr();\n      if(fname == null ) {\n        if( slf4jImpl.indexOf(\"Log4j\") > 0) {\n          fname = \"Log4j\";\n        }\n        else if( slf4jImpl.indexOf(\"JDK\") > 0) {\n          fname = \"JUL\";\n        }\n        else {\n          return; // unsuppored\n        }\n      }\n    }\n    catch(Exception ex) {}\n    \n    if(\"JUL\".equalsIgnoreCase(fname)) {\n      factory = new LoggerFactoryWrapperJUL();\n    }\n    else if( \"Log4j\".equals(fname) ) {\n      factory = new LoggerFactoryWrapperLog4j();\n    }\n    else {\n      try {\n        factory = (LoggerFactoryWrapper) Class.forName(fname).newInstance();\n      }\n      catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43aba035b2a37ad571a7b19496d3108f44e0b97d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43aba035b2a37ad571a7b19496d3108f44e0b97d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"829761a123d59d7a3c39e5f13fbc03de63f55ce5":["54d9cd7a1fb3deb9fd44d6257a434e3b86289877"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["829761a123d59d7a3c39e5f13fbc03de63f55ce5"],"54d9cd7a1fb3deb9fd44d6257a434e3b86289877":["43aba035b2a37ad571a7b19496d3108f44e0b97d"]},"commit2Childs":{"43aba035b2a37ad571a7b19496d3108f44e0b97d":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","54d9cd7a1fb3deb9fd44d6257a434e3b86289877"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43aba035b2a37ad571a7b19496d3108f44e0b97d","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"829761a123d59d7a3c39e5f13fbc03de63f55ce5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54d9cd7a1fb3deb9fd44d6257a434e3b86289877":["829761a123d59d7a3c39e5f13fbc03de63f55ce5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}