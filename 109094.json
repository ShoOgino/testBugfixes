{"path":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#PostingsHighlighter(int).mjava","commits":[{"id":"4b3d16cba9355e2e97962eb1c441bbd0b6735c15","date":1357426290,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#PostingsHighlighter(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/postingshighlight/PostingsHighlighter#PostingsHighlighter(int).mjava","sourceNew":"  /**\n   * Creates a new highlighter, specifying maximum content length.\n   * @param maxLength maximum content size to process.\n   * @throws IllegalArgumentException if <code>maxLength</code> is negative or <code>Integer.MAX_VALUE</code>\n   */\n  public PostingsHighlighter(int maxLength) {\n    this(maxLength, BreakIterator.getSentenceInstance(Locale.ROOT), new PassageScorer(), new PassageFormatter());\n  }\n\n","sourceOld":"  /**\n   * Creates a new highlighter, specifying maximum content length.\n   * @param maxLength maximum content size to process.\n   * @throws IllegalArgumentException if <code>maxLength</code> is negative or <code>Integer.MAX_VALUE</code>\n   */\n  public PostingsHighlighter(int maxLength) {\n    this(maxLength, BreakIterator.getSentenceInstance(Locale.ROOT), new PassageScorer(), new PassageFormatter());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#PostingsHighlighter(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new highlighter, specifying maximum content length.\n   * @param maxLength maximum content size to process.\n   * @throws IllegalArgumentException if <code>maxLength</code> is negative or <code>Integer.MAX_VALUE</code>\n   */\n  public PostingsHighlighter(int maxLength) {\n    this(maxLength, BreakIterator.getSentenceInstance(Locale.ROOT), new PassageScorer(), new PassageFormatter());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4831dd345148fcd7c33877b449ade21fc45459d8","date":1363963811,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#PostingsHighlighter(int).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#PostingsHighlighter(int).mjava","sourceNew":"  /**\n   * Creates a new highlighter, specifying maximum content length.\n   * @param maxLength maximum content size to process.\n   * @throws IllegalArgumentException if <code>maxLength</code> is negative or <code>Integer.MAX_VALUE</code>\n   */\n  public PostingsHighlighter(int maxLength) {\n    this(maxLength, BreakIterator.getSentenceInstance(Locale.ROOT));\n  }\n\n","sourceOld":"  /**\n   * Creates a new highlighter, specifying maximum content length.\n   * @param maxLength maximum content size to process.\n   * @throws IllegalArgumentException if <code>maxLength</code> is negative or <code>Integer.MAX_VALUE</code>\n   */\n  public PostingsHighlighter(int maxLength) {\n    this(maxLength, BreakIterator.getSentenceInstance(Locale.ROOT), new PassageScorer(), new PassageFormatter());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"157d49068cfc35be5fed366f40bc20cbcddea695","date":1364791189,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#PostingsHighlighter(int).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#PostingsHighlighter(int).mjava","sourceNew":"  /**\n   * Creates a new highlighter, specifying maximum content length.\n   * @param maxLength maximum content size to process.\n   * @throws IllegalArgumentException if <code>maxLength</code> is negative or <code>Integer.MAX_VALUE</code>\n   */\n  public PostingsHighlighter(int maxLength) {\n    if (maxLength < 0 || maxLength == Integer.MAX_VALUE) {\n      // two reasons: no overflow problems in BreakIterator.preceding(offset+1),\n      // our sentinel in the offsets queue uses this value to terminate.\n      throw new IllegalArgumentException(\"maxLength must be < Integer.MAX_VALUE\");\n    }\n    this.maxLength = maxLength;\n  }\n\n","sourceOld":"  /**\n   * Creates a new highlighter, specifying maximum content length.\n   * @param maxLength maximum content size to process.\n   * @throws IllegalArgumentException if <code>maxLength</code> is negative or <code>Integer.MAX_VALUE</code>\n   */\n  public PostingsHighlighter(int maxLength) {\n    this(maxLength, BreakIterator.getSentenceInstance(Locale.ROOT));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"381618eac2691bb34ab9a3fca76ad55c6274517e","date":1495564791,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#PostingsHighlighter(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a new highlighter, specifying maximum content length.\n   * @param maxLength maximum content size to process.\n   * @throws IllegalArgumentException if <code>maxLength</code> is negative or <code>Integer.MAX_VALUE</code>\n   */\n  public PostingsHighlighter(int maxLength) {\n    if (maxLength < 0 || maxLength == Integer.MAX_VALUE) {\n      // two reasons: no overflow problems in BreakIterator.preceding(offset+1),\n      // our sentinel in the offsets queue uses this value to terminate.\n      throw new IllegalArgumentException(\"maxLength must be < Integer.MAX_VALUE\");\n    }\n    this.maxLength = maxLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#PostingsHighlighter(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a new highlighter, specifying maximum content length.\n   * @param maxLength maximum content size to process.\n   * @throws IllegalArgumentException if <code>maxLength</code> is negative or <code>Integer.MAX_VALUE</code>\n   */\n  public PostingsHighlighter(int maxLength) {\n    if (maxLength < 0 || maxLength == Integer.MAX_VALUE) {\n      // two reasons: no overflow problems in BreakIterator.preceding(offset+1),\n      // our sentinel in the offsets queue uses this value to terminate.\n      throw new IllegalArgumentException(\"maxLength must be < Integer.MAX_VALUE\");\n    }\n    this.maxLength = maxLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"381618eac2691bb34ab9a3fca76ad55c6274517e":["157d49068cfc35be5fed366f40bc20cbcddea695"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4b3d16cba9355e2e97962eb1c441bbd0b6735c15"],"4b3d16cba9355e2e97962eb1c441bbd0b6735c15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["157d49068cfc35be5fed366f40bc20cbcddea695","381618eac2691bb34ab9a3fca76ad55c6274517e"],"4831dd345148fcd7c33877b449ade21fc45459d8":["4b3d16cba9355e2e97962eb1c441bbd0b6735c15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"157d49068cfc35be5fed366f40bc20cbcddea695":["4831dd345148fcd7c33877b449ade21fc45459d8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["381618eac2691bb34ab9a3fca76ad55c6274517e"]},"commit2Childs":{"381618eac2691bb34ab9a3fca76ad55c6274517e":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"4b3d16cba9355e2e97962eb1c441bbd0b6735c15":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","4831dd345148fcd7c33877b449ade21fc45459d8"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"4831dd345148fcd7c33877b449ade21fc45459d8":["157d49068cfc35be5fed366f40bc20cbcddea695"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","4b3d16cba9355e2e97962eb1c441bbd0b6735c15"],"157d49068cfc35be5fed366f40bc20cbcddea695":["381618eac2691bb34ab9a3fca76ad55c6274517e","e9017cf144952056066919f1ebc7897ff9bd71b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}