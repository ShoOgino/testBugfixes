{"path":"lucene/backwards/src/java/org/apache/lucene/document/NumberTools#stringToLong(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/document/NumberTools#stringToLong(String).mjava","pathOld":"backwards/src/java/org/apache/lucene/document/NumberTools#stringToLong(String).mjava","sourceNew":"    /**\n     * Converts a String that was returned by {@link #longToString} back to a\n     * long.\n     * \n     * @throws IllegalArgumentException\n     *             if the input is null\n     * @throws NumberFormatException\n     *             if the input does not parse (it was not a String returned by\n     *             longToString()).\n     */\n    public static long stringToLong(String str) {\n        if (str == null) {\n            throw new NullPointerException(\"string cannot be null\");\n        }\n        if (str.length() != STR_SIZE) {\n            throw new NumberFormatException(\"string is the wrong size\");\n        }\n\n        if (str.equals(MIN_STRING_VALUE)) {\n            return Long.MIN_VALUE;\n        }\n\n        char prefix = str.charAt(0);\n        long l = Long.parseLong(str.substring(1), RADIX);\n\n        if (prefix == POSITIVE_PREFIX) {\n            // nop\n        } else if (prefix == NEGATIVE_PREFIX) {\n            l = l - Long.MAX_VALUE - 1;\n        } else {\n            throw new NumberFormatException(\n                    \"string does not begin with the correct prefix\");\n        }\n\n        return l;\n    }\n\n","sourceOld":"    /**\n     * Converts a String that was returned by {@link #longToString} back to a\n     * long.\n     * \n     * @throws IllegalArgumentException\n     *             if the input is null\n     * @throws NumberFormatException\n     *             if the input does not parse (it was not a String returned by\n     *             longToString()).\n     */\n    public static long stringToLong(String str) {\n        if (str == null) {\n            throw new NullPointerException(\"string cannot be null\");\n        }\n        if (str.length() != STR_SIZE) {\n            throw new NumberFormatException(\"string is the wrong size\");\n        }\n\n        if (str.equals(MIN_STRING_VALUE)) {\n            return Long.MIN_VALUE;\n        }\n\n        char prefix = str.charAt(0);\n        long l = Long.parseLong(str.substring(1), RADIX);\n\n        if (prefix == POSITIVE_PREFIX) {\n            // nop\n        } else if (prefix == NEGATIVE_PREFIX) {\n            l = l - Long.MAX_VALUE - 1;\n        } else {\n            throw new NumberFormatException(\n                    \"string does not begin with the correct prefix\");\n        }\n\n        return l;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/document/NumberTools#stringToLong(String).mjava","sourceNew":null,"sourceOld":"    /**\n     * Converts a String that was returned by {@link #longToString} back to a\n     * long.\n     * \n     * @throws IllegalArgumentException\n     *             if the input is null\n     * @throws NumberFormatException\n     *             if the input does not parse (it was not a String returned by\n     *             longToString()).\n     */\n    public static long stringToLong(String str) {\n        if (str == null) {\n            throw new NullPointerException(\"string cannot be null\");\n        }\n        if (str.length() != STR_SIZE) {\n            throw new NumberFormatException(\"string is the wrong size\");\n        }\n\n        if (str.equals(MIN_STRING_VALUE)) {\n            return Long.MIN_VALUE;\n        }\n\n        char prefix = str.charAt(0);\n        long l = Long.parseLong(str.substring(1), RADIX);\n\n        if (prefix == POSITIVE_PREFIX) {\n            // nop\n        } else if (prefix == NEGATIVE_PREFIX) {\n            l = l - Long.MAX_VALUE - 1;\n        } else {\n            throw new NumberFormatException(\n                    \"string does not begin with the correct prefix\");\n        }\n\n        return l;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}