{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPolygonFactory#buildPolygonShape(List[GeoPoint],int,int,SidedPlane).mjava","commits":[{"id":"851e4197476b684154a7b65f996f535522e67400","date":1428926498,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPolygonFactory#buildPolygonShape(List[GeoPoint],int,int,SidedPlane).mjava","pathOld":"/dev/null","sourceNew":"    public static GeoMembershipShape buildPolygonShape(List<GeoPoint> pointsList, int startPointIndex, int endPointIndex, SidedPlane startingEdge) {\n        // Algorithm as follows:\n        // Start with sided edge.  Go through all points in some order.  For each new point, determine if the point is within all edges considered so far.\n        // If not, put it into a list of points for recursion.  If it is within, add new edge and keep going.\n        // Once we detect a point that is within, if there are points put aside for recursion, then call recursively.\n        \n        // Current composite.  This is what we'll actually be returning.\n        GeoCompositeMembershipShape rval = new GeoCompositeMembershipShape();\n        \n        List<GeoPoint> recursionList = new ArrayList<GeoPoint>();\n        List<GeoPoint> currentList = new ArrayList<GeoPoint>();\n        List<SidedPlane> currentPlanes = new ArrayList<SidedPlane>();\n        \n        // Initialize the current list and current planes\n        currentList.add(pointsList.get(startPointIndex));\n        currentList.add(pointsList.get(endPointIndex));\n        currentPlanes.add(startingEdge);\n        \n        // Now, scan all remaining points, in order.  We'll use an index and just add to it.\n        for (int i = 0; i < pointsList.size() - 2; i++) {\n            GeoPoint newPoint = pointsList.get(getLegalIndex(i + endPointIndex + 1, pointsList.size()));\n            if (isWithin(newPoint, currentPlanes)) {\n                // Construct a sided plane based on the last two points, and the previous point\n                SidedPlane newBoundary = new SidedPlane(currentList.get(currentList.size()-2),newPoint,currentList.get(currentList.size()-1));\n                // Construct a sided plane based on the return trip\n                SidedPlane returnBoundary = new SidedPlane(currentList.get(currentList.size()-1),currentList.get(0),newPoint);\n                // Verify that none of the points beyond the new point in the list are inside the polygon we'd\n                // be creating if we stopped making the current polygon right now.\n                boolean pointInside = false;\n                for (int j = i + 1; j < pointsList.size() - 2; j++) {\n                    GeoPoint checkPoint = pointsList.get(getLegalIndex(j + endPointIndex + 1, pointsList.size()));\n                    boolean isInside = true;\n                    if (isInside && !newBoundary.isWithin(checkPoint))\n                        isInside = false;\n                    if (isInside && !returnBoundary.isWithin(checkPoint))\n                        isInside = false;\n                    if (isInside) {\n                        for (SidedPlane plane : currentPlanes) {\n                            if (!plane.isWithin(checkPoint)) {\n                                isInside = false;\n                                break;\n                            }\n                        }\n                    }\n                    if (isInside) {\n                        pointInside = true;\n                        break;\n                    }\n                }\n                if (!pointInside) {\n                    // Any excluded points?\n                    if (recursionList.size() > 0) {\n                        // Handle exclusion\n                        recursionList.add(newPoint);\n                        recursionList.add(currentList.get(currentList.size()-1));\n                        // We want the other side for the recursion\n                        SidedPlane otherSideNewBoundary = new SidedPlane(newBoundary);\n                        rval.addShape(buildPolygonShape(recursionList,recursionList.size()-2,recursionList.size()-1,otherSideNewBoundary));\n                        recursionList.clear();\n                    }\n                    currentList.add(newPoint);\n                    currentPlanes.add(newBoundary);\n                } else {\n                    recursionList.add(newPoint);\n                }\n            } else {\n                recursionList.add(newPoint);\n            }\n        }\n        \n        if (recursionList.size() > 0) {\n            // The last step back to the start point had a recursion, so take care of that before we complete our work\n            recursionList.add(currentList.get(0));\n            recursionList.add(currentList.get(currentList.size()-1));\n            // Construct a sided plane based on these two points, and the previous point\n            SidedPlane newBoundary = new SidedPlane(currentList.get(currentList.size()-2),currentList.get(0),currentList.get(currentList.size()-1));\n            // We want the other side for the recursion\n            SidedPlane otherSideNewBoundary = new SidedPlane(newBoundary);\n            rval.addShape(buildPolygonShape(recursionList,recursionList.size()-2,recursionList.size()-1,otherSideNewBoundary));\n            recursionList.clear();\n        }\n        \n        // Now, add in the current shape.\n        /*\n        System.out.println(\"Creating polygon:\");\n        for (GeoPoint p : currentList) {\n            System.out.println(\" \"+p);\n        }\n        */\n        rval.addShape(new GeoConvexPolygon(currentList));\n        //System.out.println(\"Done creating polygon\");\n        return rval;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab7d51740456adc459ec788c8fe27746bdc60a55","date":1429185101,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPolygonFactory#buildPolygonShape(List[GeoPoint],int,int,SidedPlane).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPolygonFactory#buildPolygonShape(List[GeoPoint],int,int,SidedPlane).mjava","sourceNew":"    public static GeoMembershipShape buildPolygonShape(List<GeoPoint> pointsList, int startPointIndex, int endPointIndex, SidedPlane startingEdge) {\n        // Algorithm as follows:\n        // Start with sided edge.  Go through all points in some order.  For each new point, determine if the point is within all edges considered so far.\n        // If not, put it into a list of points for recursion.  If it is within, add new edge and keep going.\n        // Once we detect a point that is within, if there are points put aside for recursion, then call recursively.\n        \n        // Current composite.  This is what we'll actually be returning.\n        GeoCompositeMembershipShape rval = new GeoCompositeMembershipShape();\n        \n        List<GeoPoint> recursionList = new ArrayList<GeoPoint>();\n        List<GeoPoint> currentList = new ArrayList<GeoPoint>();\n        List<SidedPlane> currentPlanes = new ArrayList<SidedPlane>();\n        \n        // Initialize the current list and current planes\n        currentList.add(pointsList.get(startPointIndex));\n        currentList.add(pointsList.get(endPointIndex));\n        currentPlanes.add(startingEdge);\n        \n        // Now, scan all remaining points, in order.  We'll use an index and just add to it.\n        for (int i = 0; i < pointsList.size() - 2; i++) {\n            GeoPoint newPoint = pointsList.get(getLegalIndex(i + endPointIndex + 1, pointsList.size()));\n            if (isWithin(newPoint, currentPlanes)) {\n                // Construct a sided plane based on the last two points, and the previous point\n                SidedPlane newBoundary = new SidedPlane(currentList.get(currentList.size()-2),newPoint,currentList.get(currentList.size()-1));\n                // Construct a sided plane based on the return trip\n                SidedPlane returnBoundary = new SidedPlane(currentList.get(currentList.size()-1),currentList.get(0),newPoint);\n                // Verify that none of the points beyond the new point in the list are inside the polygon we'd\n                // be creating if we stopped making the current polygon right now.\n                boolean pointInside = false;\n                for (int j = i + 1; j < pointsList.size() - 2; j++) {\n                    GeoPoint checkPoint = pointsList.get(getLegalIndex(j + endPointIndex + 1, pointsList.size()));\n                    boolean isInside = true;\n                    if (isInside && !newBoundary.isWithin(checkPoint))\n                        isInside = false;\n                    if (isInside && !returnBoundary.isWithin(checkPoint))\n                        isInside = false;\n                    if (isInside) {\n                        for (SidedPlane plane : currentPlanes) {\n                            if (!plane.isWithin(checkPoint)) {\n                                isInside = false;\n                                break;\n                            }\n                        }\n                    }\n                    if (isInside) {\n                        pointInside = true;\n                        break;\n                    }\n                }\n                if (!pointInside) {\n                    // Any excluded points?\n                    if (recursionList.size() > 0) {\n                        // Handle exclusion\n                        recursionList.add(newPoint);\n                        recursionList.add(currentList.get(currentList.size()-1));\n                        if (recursionList.size() == pointsList.size()) {\n                            // We are trying to recurse with a list the same size as the one we started with.\n                            // Clearly, the polygon cannot be constructed\n                            throw new IllegalArgumentException(\"Polygon is illegal; cannot be decomposed into convex parts\");\n                        }\n                        // We want the other side for the recursion\n                        SidedPlane otherSideNewBoundary = new SidedPlane(newBoundary);\n                        rval.addShape(buildPolygonShape(recursionList,recursionList.size()-2,recursionList.size()-1,otherSideNewBoundary));\n                        recursionList.clear();\n                    }\n                    currentList.add(newPoint);\n                    currentPlanes.add(newBoundary);\n                } else {\n                    recursionList.add(newPoint);\n                }\n            } else {\n                recursionList.add(newPoint);\n            }\n        }\n        \n        if (recursionList.size() > 0) {\n            // The last step back to the start point had a recursion, so take care of that before we complete our work\n            recursionList.add(currentList.get(0));\n            recursionList.add(currentList.get(currentList.size()-1));\n            if (recursionList.size() == pointsList.size()) {\n                // We are trying to recurse with a list the same size as the one we started with.\n                // Clearly, the polygon cannot be constructed\n                throw new IllegalArgumentException(\"Polygon is illegal; cannot be decomposed into convex parts\");\n            }\n            // Construct a sided plane based on these two points, and the previous point\n            SidedPlane newBoundary = new SidedPlane(currentList.get(currentList.size()-2),currentList.get(0),currentList.get(currentList.size()-1));\n            // We want the other side for the recursion\n            SidedPlane otherSideNewBoundary = new SidedPlane(newBoundary);\n            rval.addShape(buildPolygonShape(recursionList,recursionList.size()-2,recursionList.size()-1,otherSideNewBoundary));\n            recursionList.clear();\n        }\n        \n        // Now, add in the current shape.\n        /*\n        System.out.println(\"Creating polygon:\");\n        for (GeoPoint p : currentList) {\n            System.out.println(\" \"+p);\n        }\n        */\n        rval.addShape(new GeoConvexPolygon(currentList));\n        //System.out.println(\"Done creating polygon\");\n        return rval;\n    }\n\n","sourceOld":"    public static GeoMembershipShape buildPolygonShape(List<GeoPoint> pointsList, int startPointIndex, int endPointIndex, SidedPlane startingEdge) {\n        // Algorithm as follows:\n        // Start with sided edge.  Go through all points in some order.  For each new point, determine if the point is within all edges considered so far.\n        // If not, put it into a list of points for recursion.  If it is within, add new edge and keep going.\n        // Once we detect a point that is within, if there are points put aside for recursion, then call recursively.\n        \n        // Current composite.  This is what we'll actually be returning.\n        GeoCompositeMembershipShape rval = new GeoCompositeMembershipShape();\n        \n        List<GeoPoint> recursionList = new ArrayList<GeoPoint>();\n        List<GeoPoint> currentList = new ArrayList<GeoPoint>();\n        List<SidedPlane> currentPlanes = new ArrayList<SidedPlane>();\n        \n        // Initialize the current list and current planes\n        currentList.add(pointsList.get(startPointIndex));\n        currentList.add(pointsList.get(endPointIndex));\n        currentPlanes.add(startingEdge);\n        \n        // Now, scan all remaining points, in order.  We'll use an index and just add to it.\n        for (int i = 0; i < pointsList.size() - 2; i++) {\n            GeoPoint newPoint = pointsList.get(getLegalIndex(i + endPointIndex + 1, pointsList.size()));\n            if (isWithin(newPoint, currentPlanes)) {\n                // Construct a sided plane based on the last two points, and the previous point\n                SidedPlane newBoundary = new SidedPlane(currentList.get(currentList.size()-2),newPoint,currentList.get(currentList.size()-1));\n                // Construct a sided plane based on the return trip\n                SidedPlane returnBoundary = new SidedPlane(currentList.get(currentList.size()-1),currentList.get(0),newPoint);\n                // Verify that none of the points beyond the new point in the list are inside the polygon we'd\n                // be creating if we stopped making the current polygon right now.\n                boolean pointInside = false;\n                for (int j = i + 1; j < pointsList.size() - 2; j++) {\n                    GeoPoint checkPoint = pointsList.get(getLegalIndex(j + endPointIndex + 1, pointsList.size()));\n                    boolean isInside = true;\n                    if (isInside && !newBoundary.isWithin(checkPoint))\n                        isInside = false;\n                    if (isInside && !returnBoundary.isWithin(checkPoint))\n                        isInside = false;\n                    if (isInside) {\n                        for (SidedPlane plane : currentPlanes) {\n                            if (!plane.isWithin(checkPoint)) {\n                                isInside = false;\n                                break;\n                            }\n                        }\n                    }\n                    if (isInside) {\n                        pointInside = true;\n                        break;\n                    }\n                }\n                if (!pointInside) {\n                    // Any excluded points?\n                    if (recursionList.size() > 0) {\n                        // Handle exclusion\n                        recursionList.add(newPoint);\n                        recursionList.add(currentList.get(currentList.size()-1));\n                        // We want the other side for the recursion\n                        SidedPlane otherSideNewBoundary = new SidedPlane(newBoundary);\n                        rval.addShape(buildPolygonShape(recursionList,recursionList.size()-2,recursionList.size()-1,otherSideNewBoundary));\n                        recursionList.clear();\n                    }\n                    currentList.add(newPoint);\n                    currentPlanes.add(newBoundary);\n                } else {\n                    recursionList.add(newPoint);\n                }\n            } else {\n                recursionList.add(newPoint);\n            }\n        }\n        \n        if (recursionList.size() > 0) {\n            // The last step back to the start point had a recursion, so take care of that before we complete our work\n            recursionList.add(currentList.get(0));\n            recursionList.add(currentList.get(currentList.size()-1));\n            // Construct a sided plane based on these two points, and the previous point\n            SidedPlane newBoundary = new SidedPlane(currentList.get(currentList.size()-2),currentList.get(0),currentList.get(currentList.size()-1));\n            // We want the other side for the recursion\n            SidedPlane otherSideNewBoundary = new SidedPlane(newBoundary);\n            rval.addShape(buildPolygonShape(recursionList,recursionList.size()-2,recursionList.size()-1,otherSideNewBoundary));\n            recursionList.clear();\n        }\n        \n        // Now, add in the current shape.\n        /*\n        System.out.println(\"Creating polygon:\");\n        for (GeoPoint p : currentList) {\n            System.out.println(\" \"+p);\n        }\n        */\n        rval.addShape(new GeoConvexPolygon(currentList));\n        //System.out.println(\"Done creating polygon\");\n        return rval;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fb9dbed1415914caa27460f8abb7afadaa61451","date":1429504289,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPolygonFactory#buildPolygonShape(List[GeoPoint],int,int,SidedPlane,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPolygonFactory#buildPolygonShape(List[GeoPoint],int,int,SidedPlane).mjava","sourceNew":"    public static GeoMembershipShape buildPolygonShape(List<GeoPoint> pointsList, int startPointIndex, int endPointIndex, SidedPlane startingEdge, boolean isInternalEdge) {\n        // Algorithm as follows:\n        // Start with sided edge.  Go through all points in some order.  For each new point, determine if the point is within all edges considered so far.\n        // If not, put it into a list of points for recursion.  If it is within, add new edge and keep going.\n        // Once we detect a point that is within, if there are points put aside for recursion, then call recursively.\n        \n        // Current composite.  This is what we'll actually be returning.\n        final GeoCompositeMembershipShape rval = new GeoCompositeMembershipShape();\n        \n        final List<GeoPoint> recursionList = new ArrayList<GeoPoint>();\n        final List<GeoPoint> currentList = new ArrayList<GeoPoint>();\n        final BitSet internalEdgeList = new BitSet();\n        final List<SidedPlane> currentPlanes = new ArrayList<SidedPlane>();\n        \n        // Initialize the current list and current planes\n        currentList.add(pointsList.get(startPointIndex));\n        currentList.add(pointsList.get(endPointIndex));\n        internalEdgeList.set(currentPlanes.size(),isInternalEdge);\n        currentPlanes.add(startingEdge);\n        \n        // Now, scan all remaining points, in order.  We'll use an index and just add to it.\n        for (int i = 0; i < pointsList.size() - 2; i++) {\n            GeoPoint newPoint = pointsList.get(getLegalIndex(i + endPointIndex + 1, pointsList.size()));\n            if (isWithin(newPoint, currentPlanes)) {\n                // Construct a sided plane based on the last two points, and the previous point\n                SidedPlane newBoundary = new SidedPlane(currentList.get(currentList.size()-2),newPoint,currentList.get(currentList.size()-1));\n                // Construct a sided plane based on the return trip\n                SidedPlane returnBoundary = new SidedPlane(currentList.get(currentList.size()-1),currentList.get(0),newPoint);\n                // Verify that none of the points beyond the new point in the list are inside the polygon we'd\n                // be creating if we stopped making the current polygon right now.\n                boolean pointInside = false;\n                for (int j = i + 1; j < pointsList.size() - 2; j++) {\n                    GeoPoint checkPoint = pointsList.get(getLegalIndex(j + endPointIndex + 1, pointsList.size()));\n                    boolean isInside = true;\n                    if (isInside && !newBoundary.isWithin(checkPoint))\n                        isInside = false;\n                    if (isInside && !returnBoundary.isWithin(checkPoint))\n                        isInside = false;\n                    if (isInside) {\n                        for (SidedPlane plane : currentPlanes) {\n                            if (!plane.isWithin(checkPoint)) {\n                                isInside = false;\n                                break;\n                            }\n                        }\n                    }\n                    if (isInside) {\n                        pointInside = true;\n                        break;\n                    }\n                }\n                if (!pointInside) {\n                    // Any excluded points?\n                    boolean isInternalBoundary = recursionList.size() > 0;\n                    if (isInternalBoundary) {\n                        // Handle exclusion\n                        recursionList.add(newPoint);\n                        recursionList.add(currentList.get(currentList.size()-1));\n                        if (recursionList.size() == pointsList.size()) {\n                            // We are trying to recurse with a list the same size as the one we started with.\n                            // Clearly, the polygon cannot be constructed\n                            throw new IllegalArgumentException(\"Polygon is illegal; cannot be decomposed into convex parts\");\n                        }\n                        // We want the other side for the recursion\n                        SidedPlane otherSideNewBoundary = new SidedPlane(newBoundary);\n                        rval.addShape(buildPolygonShape(recursionList,recursionList.size()-2,recursionList.size()-1,otherSideNewBoundary,true));\n                        recursionList.clear();\n                    }\n                    currentList.add(newPoint);\n                    internalEdgeList.set(currentPlanes.size(),isInternalBoundary);\n                    currentPlanes.add(newBoundary);\n                } else {\n                    recursionList.add(newPoint);\n                }\n            } else {\n                recursionList.add(newPoint);\n            }\n        }\n        \n        boolean returnEdgeInternalBoundary = recursionList.size() > 0;\n        if (returnEdgeInternalBoundary) {\n            // The last step back to the start point had a recursion, so take care of that before we complete our work\n            recursionList.add(currentList.get(0));\n            recursionList.add(currentList.get(currentList.size()-1));\n            if (recursionList.size() == pointsList.size()) {\n                // We are trying to recurse with a list the same size as the one we started with.\n                // Clearly, the polygon cannot be constructed\n                throw new IllegalArgumentException(\"Polygon is illegal; cannot be decomposed into convex parts\");\n            }\n            // Construct a sided plane based on these two points, and the previous point\n            SidedPlane newBoundary = new SidedPlane(currentList.get(currentList.size()-2),currentList.get(0),currentList.get(currentList.size()-1));\n            // We want the other side for the recursion\n            SidedPlane otherSideNewBoundary = new SidedPlane(newBoundary);\n            rval.addShape(buildPolygonShape(recursionList,recursionList.size()-2,recursionList.size()-1,otherSideNewBoundary,true));\n            recursionList.clear();\n        }\n        // Now, add in the current shape.\n        rval.addShape(new GeoConvexPolygon(currentList,internalEdgeList,returnEdgeInternalBoundary));\n        //System.out.println(\"Done creating polygon\");\n        return rval;\n    }\n\n","sourceOld":"    public static GeoMembershipShape buildPolygonShape(List<GeoPoint> pointsList, int startPointIndex, int endPointIndex, SidedPlane startingEdge) {\n        // Algorithm as follows:\n        // Start with sided edge.  Go through all points in some order.  For each new point, determine if the point is within all edges considered so far.\n        // If not, put it into a list of points for recursion.  If it is within, add new edge and keep going.\n        // Once we detect a point that is within, if there are points put aside for recursion, then call recursively.\n        \n        // Current composite.  This is what we'll actually be returning.\n        GeoCompositeMembershipShape rval = new GeoCompositeMembershipShape();\n        \n        List<GeoPoint> recursionList = new ArrayList<GeoPoint>();\n        List<GeoPoint> currentList = new ArrayList<GeoPoint>();\n        List<SidedPlane> currentPlanes = new ArrayList<SidedPlane>();\n        \n        // Initialize the current list and current planes\n        currentList.add(pointsList.get(startPointIndex));\n        currentList.add(pointsList.get(endPointIndex));\n        currentPlanes.add(startingEdge);\n        \n        // Now, scan all remaining points, in order.  We'll use an index and just add to it.\n        for (int i = 0; i < pointsList.size() - 2; i++) {\n            GeoPoint newPoint = pointsList.get(getLegalIndex(i + endPointIndex + 1, pointsList.size()));\n            if (isWithin(newPoint, currentPlanes)) {\n                // Construct a sided plane based on the last two points, and the previous point\n                SidedPlane newBoundary = new SidedPlane(currentList.get(currentList.size()-2),newPoint,currentList.get(currentList.size()-1));\n                // Construct a sided plane based on the return trip\n                SidedPlane returnBoundary = new SidedPlane(currentList.get(currentList.size()-1),currentList.get(0),newPoint);\n                // Verify that none of the points beyond the new point in the list are inside the polygon we'd\n                // be creating if we stopped making the current polygon right now.\n                boolean pointInside = false;\n                for (int j = i + 1; j < pointsList.size() - 2; j++) {\n                    GeoPoint checkPoint = pointsList.get(getLegalIndex(j + endPointIndex + 1, pointsList.size()));\n                    boolean isInside = true;\n                    if (isInside && !newBoundary.isWithin(checkPoint))\n                        isInside = false;\n                    if (isInside && !returnBoundary.isWithin(checkPoint))\n                        isInside = false;\n                    if (isInside) {\n                        for (SidedPlane plane : currentPlanes) {\n                            if (!plane.isWithin(checkPoint)) {\n                                isInside = false;\n                                break;\n                            }\n                        }\n                    }\n                    if (isInside) {\n                        pointInside = true;\n                        break;\n                    }\n                }\n                if (!pointInside) {\n                    // Any excluded points?\n                    if (recursionList.size() > 0) {\n                        // Handle exclusion\n                        recursionList.add(newPoint);\n                        recursionList.add(currentList.get(currentList.size()-1));\n                        if (recursionList.size() == pointsList.size()) {\n                            // We are trying to recurse with a list the same size as the one we started with.\n                            // Clearly, the polygon cannot be constructed\n                            throw new IllegalArgumentException(\"Polygon is illegal; cannot be decomposed into convex parts\");\n                        }\n                        // We want the other side for the recursion\n                        SidedPlane otherSideNewBoundary = new SidedPlane(newBoundary);\n                        rval.addShape(buildPolygonShape(recursionList,recursionList.size()-2,recursionList.size()-1,otherSideNewBoundary));\n                        recursionList.clear();\n                    }\n                    currentList.add(newPoint);\n                    currentPlanes.add(newBoundary);\n                } else {\n                    recursionList.add(newPoint);\n                }\n            } else {\n                recursionList.add(newPoint);\n            }\n        }\n        \n        if (recursionList.size() > 0) {\n            // The last step back to the start point had a recursion, so take care of that before we complete our work\n            recursionList.add(currentList.get(0));\n            recursionList.add(currentList.get(currentList.size()-1));\n            if (recursionList.size() == pointsList.size()) {\n                // We are trying to recurse with a list the same size as the one we started with.\n                // Clearly, the polygon cannot be constructed\n                throw new IllegalArgumentException(\"Polygon is illegal; cannot be decomposed into convex parts\");\n            }\n            // Construct a sided plane based on these two points, and the previous point\n            SidedPlane newBoundary = new SidedPlane(currentList.get(currentList.size()-2),currentList.get(0),currentList.get(currentList.size()-1));\n            // We want the other side for the recursion\n            SidedPlane otherSideNewBoundary = new SidedPlane(newBoundary);\n            rval.addShape(buildPolygonShape(recursionList,recursionList.size()-2,recursionList.size()-1,otherSideNewBoundary));\n            recursionList.clear();\n        }\n        \n        // Now, add in the current shape.\n        /*\n        System.out.println(\"Creating polygon:\");\n        for (GeoPoint p : currentList) {\n            System.out.println(\" \"+p);\n        }\n        */\n        rval.addShape(new GeoConvexPolygon(currentList));\n        //System.out.println(\"Done creating polygon\");\n        return rval;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0fb9dbed1415914caa27460f8abb7afadaa61451":["ab7d51740456adc459ec788c8fe27746bdc60a55"],"ab7d51740456adc459ec788c8fe27746bdc60a55":["851e4197476b684154a7b65f996f535522e67400"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"851e4197476b684154a7b65f996f535522e67400":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0fb9dbed1415914caa27460f8abb7afadaa61451":[],"ab7d51740456adc459ec788c8fe27746bdc60a55":["0fb9dbed1415914caa27460f8abb7afadaa61451"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["851e4197476b684154a7b65f996f535522e67400","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"851e4197476b684154a7b65f996f535522e67400":["ab7d51740456adc459ec788c8fe27746bdc60a55"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0fb9dbed1415914caa27460f8abb7afadaa61451","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}