{"path":"lucene/core/src/java/org/apache/lucene/search/DoubleValuesSource#function(DoubleValuesSource,String,DoubleUnaryOperator).mjava","commits":[{"id":"501fdb8d708778ae5368dd5c44879e1d46487e43","date":1494401395,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DoubleValuesSource#function(DoubleValuesSource,String,DoubleUnaryOperator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DoubleValuesSource#function(DoubleValuesSource,DoubleUnaryOperator).mjava","sourceNew":"  /**\n   * Creates a DoubleValuesSource that is a function of another DoubleValuesSource\n   */\n  public static DoubleValuesSource function(DoubleValuesSource in, String description, DoubleUnaryOperator function) {\n    return new DoubleValuesSource() {\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        DoubleValues inputs = in.getValues(ctx, scores);\n        return new DoubleValues() {\n          @Override\n          public double doubleValue() throws IOException {\n            return function.applyAsDouble(inputs.doubleValue());\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            return inputs.advanceExact(doc);\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return in.needsScores();\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext ctx, int docId, Explanation scoreExplanation) throws IOException {\n        Explanation inner = in.explain(ctx, docId, scoreExplanation);\n        return Explanation.match((float) function.applyAsDouble(inner.getValue()), description + \", computed from:\", inner, scoreExplanation);\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a DoubleValuesSource that is a function of another DoubleValuesSource\n   */\n  public static DoubleValuesSource function(DoubleValuesSource in, DoubleUnaryOperator function) {\n    return new DoubleValuesSource() {\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        DoubleValues inputs = in.getValues(ctx, scores);\n        return new DoubleValues() {\n          @Override\n          public double doubleValue() throws IOException {\n            return function.applyAsDouble(inputs.doubleValue());\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            return inputs.advanceExact(doc);\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return in.needsScores();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DoubleValuesSource#function(DoubleValuesSource,String,DoubleUnaryOperator).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a DoubleValuesSource that is a function of another DoubleValuesSource\n   */\n  public static DoubleValuesSource function(DoubleValuesSource in, String description, DoubleUnaryOperator function) {\n    return new DoubleValuesSource() {\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        DoubleValues inputs = in.getValues(ctx, scores);\n        return new DoubleValues() {\n          @Override\n          public double doubleValue() throws IOException {\n            return function.applyAsDouble(inputs.doubleValue());\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            return inputs.advanceExact(doc);\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return in.needsScores();\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext ctx, int docId, Explanation scoreExplanation) throws IOException {\n        Explanation inner = in.explain(ctx, docId, scoreExplanation);\n        return Explanation.match((float) function.applyAsDouble(inner.getValue()), description + \", computed from:\", inner, scoreExplanation);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41ea72350b903b90cb4fda2a5adbce31aa00c074","date":1498575219,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#function(DoubleValuesSource,DoubleUnaryOperator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DoubleValuesSource#function(DoubleValuesSource,String,DoubleUnaryOperator).mjava","sourceNew":"  public static DoubleValuesSource function(DoubleValuesSource in, DoubleUnaryOperator function) {\n    return new DoubleValuesSource() {\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        DoubleValues v = in.getValues(ctx, scores);\n        return new DoubleValues() {\n          @Override\n          public double doubleValue() throws IOException {\n            return function.applyAsDouble(v.doubleValue());\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            return v.advanceExact(doc);\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return in.needsScores();\n      }\n\n      @Override\n      public int hashCode() {\n        return 0;\n      }\n\n      @Override\n      public boolean equals(Object obj) {\n        return false;\n      }\n\n      @Override\n      public String toString() {\n        return \"fn\";\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a DoubleValuesSource that is a function of another DoubleValuesSource\n   */\n  public static DoubleValuesSource function(DoubleValuesSource in, String description, DoubleUnaryOperator function) {\n    return new DoubleValuesSource() {\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        DoubleValues inputs = in.getValues(ctx, scores);\n        return new DoubleValues() {\n          @Override\n          public double doubleValue() throws IOException {\n            return function.applyAsDouble(inputs.doubleValue());\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            return inputs.advanceExact(doc);\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return in.needsScores();\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext ctx, int docId, Explanation scoreExplanation) throws IOException {\n        Explanation inner = in.explain(ctx, docId, scoreExplanation);\n        return Explanation.match((float) function.applyAsDouble(inner.getValue()), description + \", computed from:\", inner, scoreExplanation);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41ea72350b903b90cb4fda2a5adbce31aa00c074","date":1498575219,"type":6,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#scoringFunction(DoubleValuesSource,ToDoubleBiFunction[Double,Double]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DoubleValuesSource#function(DoubleValuesSource,String,DoubleUnaryOperator).mjava","sourceNew":"  private static DoubleValuesSource scoringFunction(DoubleValuesSource in, ToDoubleBiFunction<Double, Double> function) {\n    return new DoubleValuesSource() {\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        DoubleValues v = in.getValues(ctx, scores);\n        return new DoubleValues() {\n          @Override\n          public double doubleValue() throws IOException {\n            return function.applyAsDouble(v.doubleValue(), scores.doubleValue());\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            return v.advanceExact(doc);\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n\n      @Override\n      public int hashCode() {\n        return 0;\n      }\n\n      @Override\n      public boolean equals(Object obj) {\n        return false;\n      }\n\n      @Override\n      public String toString() {\n        return \"fn\";\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a DoubleValuesSource that is a function of another DoubleValuesSource\n   */\n  public static DoubleValuesSource function(DoubleValuesSource in, String description, DoubleUnaryOperator function) {\n    return new DoubleValuesSource() {\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        DoubleValues inputs = in.getValues(ctx, scores);\n        return new DoubleValues() {\n          @Override\n          public double doubleValue() throws IOException {\n            return function.applyAsDouble(inputs.doubleValue());\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            return inputs.advanceExact(doc);\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return in.needsScores();\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext ctx, int docId, Explanation scoreExplanation) throws IOException {\n        Explanation inner = in.explain(ctx, docId, scoreExplanation);\n        return Explanation.match((float) function.applyAsDouble(inner.getValue()), description + \", computed from:\", inner, scoreExplanation);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#function(DoubleValuesSource,DoubleUnaryOperator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DoubleValuesSource#function(DoubleValuesSource,String,DoubleUnaryOperator).mjava","sourceNew":"  public static DoubleValuesSource function(DoubleValuesSource in, DoubleUnaryOperator function) {\n    return new DoubleValuesSource() {\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        DoubleValues v = in.getValues(ctx, scores);\n        return new DoubleValues() {\n          @Override\n          public double doubleValue() throws IOException {\n            return function.applyAsDouble(v.doubleValue());\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            return v.advanceExact(doc);\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return in.needsScores();\n      }\n\n      @Override\n      public int hashCode() {\n        return 0;\n      }\n\n      @Override\n      public boolean equals(Object obj) {\n        return false;\n      }\n\n      @Override\n      public String toString() {\n        return \"fn\";\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a DoubleValuesSource that is a function of another DoubleValuesSource\n   */\n  public static DoubleValuesSource function(DoubleValuesSource in, String description, DoubleUnaryOperator function) {\n    return new DoubleValuesSource() {\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        DoubleValues inputs = in.getValues(ctx, scores);\n        return new DoubleValues() {\n          @Override\n          public double doubleValue() throws IOException {\n            return function.applyAsDouble(inputs.doubleValue());\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            return inputs.advanceExact(doc);\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return in.needsScores();\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext ctx, int docId, Explanation scoreExplanation) throws IOException {\n        Explanation inner = in.explain(ctx, docId, scoreExplanation);\n        return Explanation.match((float) function.applyAsDouble(inner.getValue()), description + \", computed from:\", inner, scoreExplanation);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":6,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#scoringFunction(DoubleValuesSource,ToDoubleBiFunction[Double,Double]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DoubleValuesSource#function(DoubleValuesSource,String,DoubleUnaryOperator).mjava","sourceNew":"  private static DoubleValuesSource scoringFunction(DoubleValuesSource in, ToDoubleBiFunction<Double, Double> function) {\n    return new DoubleValuesSource() {\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        DoubleValues v = in.getValues(ctx, scores);\n        return new DoubleValues() {\n          @Override\n          public double doubleValue() throws IOException {\n            return function.applyAsDouble(v.doubleValue(), scores.doubleValue());\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            return v.advanceExact(doc);\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n\n      @Override\n      public int hashCode() {\n        return 0;\n      }\n\n      @Override\n      public boolean equals(Object obj) {\n        return false;\n      }\n\n      @Override\n      public String toString() {\n        return \"fn\";\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Creates a DoubleValuesSource that is a function of another DoubleValuesSource\n   */\n  public static DoubleValuesSource function(DoubleValuesSource in, String description, DoubleUnaryOperator function) {\n    return new DoubleValuesSource() {\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        DoubleValues inputs = in.getValues(ctx, scores);\n        return new DoubleValues() {\n          @Override\n          public double doubleValue() throws IOException {\n            return function.applyAsDouble(inputs.doubleValue());\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            return inputs.advanceExact(doc);\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return in.needsScores();\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext ctx, int docId, Explanation scoreExplanation) throws IOException {\n        Explanation inner = in.explain(ctx, docId, scoreExplanation);\n        return Explanation.match((float) function.applyAsDouble(inner.getValue()), description + \", computed from:\", inner, scoreExplanation);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/DoubleValuesSource#function(DoubleValuesSource,String,DoubleUnaryOperator).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a DoubleValuesSource that is a function of another DoubleValuesSource\n   */\n  public static DoubleValuesSource function(DoubleValuesSource in, String description, DoubleUnaryOperator function) {\n    return new DoubleValuesSource() {\n      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        DoubleValues inputs = in.getValues(ctx, scores);\n        return new DoubleValues() {\n          @Override\n          public double doubleValue() throws IOException {\n            return function.applyAsDouble(inputs.doubleValue());\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            return inputs.advanceExact(doc);\n          }\n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return in.needsScores();\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext ctx, int docId, Explanation scoreExplanation) throws IOException {\n        Explanation inner = in.explain(ctx, docId, scoreExplanation);\n        return Explanation.match((float) function.applyAsDouble(inner.getValue()), description + \", computed from:\", inner, scoreExplanation);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"41ea72350b903b90cb4fda2a5adbce31aa00c074":["501fdb8d708778ae5368dd5c44879e1d46487e43"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","501fdb8d708778ae5368dd5c44879e1d46487e43"],"501fdb8d708778ae5368dd5c44879e1d46487e43":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28288370235ed02234a64753cdbf0c6ec096304a":["501fdb8d708778ae5368dd5c44879e1d46487e43","41ea72350b903b90cb4fda2a5adbce31aa00c074"],"98f11c416d30e556e0004a9a84960702d12d35b1":["e9017cf144952056066919f1ebc7897ff9bd71b1","41ea72350b903b90cb4fda2a5adbce31aa00c074"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"41ea72350b903b90cb4fda2a5adbce31aa00c074":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["98f11c416d30e556e0004a9a84960702d12d35b1"],"501fdb8d708778ae5368dd5c44879e1d46487e43":["41ea72350b903b90cb4fda2a5adbce31aa00c074","e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","501fdb8d708778ae5368dd5c44879e1d46487e43"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}