{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoBBoxTest#testBBoxDegenerate().mjava","commits":[{"id":"ea1a3e0b93787916a1002c2be9f1043b6575ea69","date":1429103360,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoBBoxTest#testBBoxDegenerate().mjava","pathOld":"/dev/null","sourceNew":"    @Test\n    public void testBBoxDegenerate() {\n        GeoBBox box;\n        GeoConvexPolygon cp;\n        int relationship;\n        List<GeoPoint> points = new ArrayList<GeoPoint>();\n        points.add(new GeoPoint(24*DEGREES_TO_RADIANS,-30*DEGREES_TO_RADIANS));\n        points.add(new GeoPoint(-11*DEGREES_TO_RADIANS,101*DEGREES_TO_RADIANS));\n        points.add(new GeoPoint(-49*DEGREES_TO_RADIANS,-176*DEGREES_TO_RADIANS));\n        GeoMembershipShape shape = GeoPolygonFactory.makeGeoPolygon(points,0);\n        box = GeoBBoxFactory.makeGeoBBox(-64*DEGREES_TO_RADIANS,-64*DEGREES_TO_RADIANS,-180*DEGREES_TO_RADIANS,180*DEGREES_TO_RADIANS);\n        relationship = box.getRelationship(shape);\n        assertEquals(GeoArea.CONTAINS,relationship);\n        box = GeoBBoxFactory.makeGeoBBox(-61.85*DEGREES_TO_RADIANS,-67.5*DEGREES_TO_RADIANS,-180*DEGREES_TO_RADIANS,-168.75*DEGREES_TO_RADIANS);\n        System.out.println(\"Shape = \"+shape+\" Rect = \"+box);\n        relationship = box.getRelationship(shape);\n        assertEquals(GeoArea.CONTAINS,relationship);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2997acf74723385bd84aff1ea0b12af4aefde77","date":1430745542,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoBBoxTest#testBBoxDegenerate().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoBBoxTest#testBBoxDegenerate().mjava","sourceNew":"  @Test\n  public void testBBoxDegenerate() {\n    GeoBBox box;\n    GeoConvexPolygon cp;\n    int relationship;\n    List<GeoPoint> points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(24 * DEGREES_TO_RADIANS, -30 * DEGREES_TO_RADIANS));\n    points.add(new GeoPoint(-11 * DEGREES_TO_RADIANS, 101 * DEGREES_TO_RADIANS));\n    points.add(new GeoPoint(-49 * DEGREES_TO_RADIANS, -176 * DEGREES_TO_RADIANS));\n    GeoMembershipShape shape = GeoPolygonFactory.makeGeoPolygon(points, 0);\n    box = GeoBBoxFactory.makeGeoBBox(-64 * DEGREES_TO_RADIANS, -64 * DEGREES_TO_RADIANS, -180 * DEGREES_TO_RADIANS, 180 * DEGREES_TO_RADIANS);\n    relationship = box.getRelationship(shape);\n    assertEquals(GeoArea.CONTAINS, relationship);\n    box = GeoBBoxFactory.makeGeoBBox(-61.85 * DEGREES_TO_RADIANS, -67.5 * DEGREES_TO_RADIANS, -180 * DEGREES_TO_RADIANS, -168.75 * DEGREES_TO_RADIANS);\n    System.out.println(\"Shape = \" + shape + \" Rect = \" + box);\n    relationship = box.getRelationship(shape);\n    assertEquals(GeoArea.CONTAINS, relationship);\n  }\n\n","sourceOld":"    @Test\n    public void testBBoxDegenerate() {\n        GeoBBox box;\n        GeoConvexPolygon cp;\n        int relationship;\n        List<GeoPoint> points = new ArrayList<GeoPoint>();\n        points.add(new GeoPoint(24*DEGREES_TO_RADIANS,-30*DEGREES_TO_RADIANS));\n        points.add(new GeoPoint(-11*DEGREES_TO_RADIANS,101*DEGREES_TO_RADIANS));\n        points.add(new GeoPoint(-49*DEGREES_TO_RADIANS,-176*DEGREES_TO_RADIANS));\n        GeoMembershipShape shape = GeoPolygonFactory.makeGeoPolygon(points,0);\n        box = GeoBBoxFactory.makeGeoBBox(-64*DEGREES_TO_RADIANS,-64*DEGREES_TO_RADIANS,-180*DEGREES_TO_RADIANS,180*DEGREES_TO_RADIANS);\n        relationship = box.getRelationship(shape);\n        assertEquals(GeoArea.CONTAINS,relationship);\n        box = GeoBBoxFactory.makeGeoBBox(-61.85*DEGREES_TO_RADIANS,-67.5*DEGREES_TO_RADIANS,-180*DEGREES_TO_RADIANS,-168.75*DEGREES_TO_RADIANS);\n        System.out.println(\"Shape = \"+shape+\" Rect = \"+box);\n        relationship = box.getRelationship(shape);\n        assertEquals(GeoArea.CONTAINS,relationship);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c921d81476f94b6686d3f216daa1f6b076b4a6c0","date":1430922284,"type":0,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoBBoxTest#testBBoxDegenerate().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBBoxDegenerate() {\n    GeoBBox box;\n    GeoConvexPolygon cp;\n    int relationship;\n    List<GeoPoint> points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(24 * DEGREES_TO_RADIANS, -30 * DEGREES_TO_RADIANS));\n    points.add(new GeoPoint(-11 * DEGREES_TO_RADIANS, 101 * DEGREES_TO_RADIANS));\n    points.add(new GeoPoint(-49 * DEGREES_TO_RADIANS, -176 * DEGREES_TO_RADIANS));\n    GeoMembershipShape shape = GeoPolygonFactory.makeGeoPolygon(points, 0);\n    box = GeoBBoxFactory.makeGeoBBox(-64 * DEGREES_TO_RADIANS, -64 * DEGREES_TO_RADIANS, -180 * DEGREES_TO_RADIANS, 180 * DEGREES_TO_RADIANS);\n    relationship = box.getRelationship(shape);\n    assertEquals(GeoArea.CONTAINS, relationship);\n    box = GeoBBoxFactory.makeGeoBBox(-61.85 * DEGREES_TO_RADIANS, -67.5 * DEGREES_TO_RADIANS, -180 * DEGREES_TO_RADIANS, -168.75 * DEGREES_TO_RADIANS);\n    System.out.println(\"Shape = \" + shape + \" Rect = \" + box);\n    relationship = box.getRelationship(shape);\n    assertEquals(GeoArea.CONTAINS, relationship);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9f97ca977ad649f14b4f60a888adef2edd7a64e","date":1432702490,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoBBoxTest#testBBoxDegenerate().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoBBoxTest#testBBoxDegenerate().mjava","sourceNew":"  @Test\n  public void testBBoxDegenerate() {\n    GeoBBox box;\n    GeoConvexPolygon cp;\n    int relationship;\n    List<GeoPoint> points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 24 * DEGREES_TO_RADIANS, -30 * DEGREES_TO_RADIANS));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -11 * DEGREES_TO_RADIANS, 101 * DEGREES_TO_RADIANS));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -49 * DEGREES_TO_RADIANS, -176 * DEGREES_TO_RADIANS));\n    GeoMembershipShape shape = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points, 0);\n    box = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, -64 * DEGREES_TO_RADIANS, -64 * DEGREES_TO_RADIANS, -180 * DEGREES_TO_RADIANS, 180 * DEGREES_TO_RADIANS);\n    relationship = box.getRelationship(shape);\n    assertEquals(GeoArea.CONTAINS, relationship);\n    box = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, -61.85 * DEGREES_TO_RADIANS, -67.5 * DEGREES_TO_RADIANS, -180 * DEGREES_TO_RADIANS, -168.75 * DEGREES_TO_RADIANS);\n    System.out.println(\"Shape = \" + shape + \" Rect = \" + box);\n    relationship = box.getRelationship(shape);\n    assertEquals(GeoArea.CONTAINS, relationship);\n  }\n\n","sourceOld":"  @Test\n  public void testBBoxDegenerate() {\n    GeoBBox box;\n    GeoConvexPolygon cp;\n    int relationship;\n    List<GeoPoint> points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(24 * DEGREES_TO_RADIANS, -30 * DEGREES_TO_RADIANS));\n    points.add(new GeoPoint(-11 * DEGREES_TO_RADIANS, 101 * DEGREES_TO_RADIANS));\n    points.add(new GeoPoint(-49 * DEGREES_TO_RADIANS, -176 * DEGREES_TO_RADIANS));\n    GeoMembershipShape shape = GeoPolygonFactory.makeGeoPolygon(points, 0);\n    box = GeoBBoxFactory.makeGeoBBox(-64 * DEGREES_TO_RADIANS, -64 * DEGREES_TO_RADIANS, -180 * DEGREES_TO_RADIANS, 180 * DEGREES_TO_RADIANS);\n    relationship = box.getRelationship(shape);\n    assertEquals(GeoArea.CONTAINS, relationship);\n    box = GeoBBoxFactory.makeGeoBBox(-61.85 * DEGREES_TO_RADIANS, -67.5 * DEGREES_TO_RADIANS, -180 * DEGREES_TO_RADIANS, -168.75 * DEGREES_TO_RADIANS);\n    System.out.println(\"Shape = \" + shape + \" Rect = \" + box);\n    relationship = box.getRelationship(shape);\n    assertEquals(GeoArea.CONTAINS, relationship);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fec06d6753751ae302c7d35866763e6cb414112d","date":1433250698,"type":3,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoBBoxTest#testBBoxDegenerate().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoBBoxTest#testBBoxDegenerate().mjava","sourceNew":"  @Test\n  public void testBBoxDegenerate() {\n    GeoBBox box;\n    GeoConvexPolygon cp;\n    int relationship;\n    List<GeoPoint> points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 24 * DEGREES_TO_RADIANS, -30 * DEGREES_TO_RADIANS));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -11 * DEGREES_TO_RADIANS, 101 * DEGREES_TO_RADIANS));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -49 * DEGREES_TO_RADIANS, -176 * DEGREES_TO_RADIANS));\n    GeoMembershipShape shape = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points, 0);\n    box = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, -64 * DEGREES_TO_RADIANS, -64 * DEGREES_TO_RADIANS, -180 * DEGREES_TO_RADIANS, 180 * DEGREES_TO_RADIANS);\n    relationship = box.getRelationship(shape);\n    assertEquals(GeoArea.CONTAINS, relationship);\n    box = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, -61.85 * DEGREES_TO_RADIANS, -67.5 * DEGREES_TO_RADIANS, -180 * DEGREES_TO_RADIANS, -168.75 * DEGREES_TO_RADIANS);\n    System.out.println(\"Shape = \" + shape + \" Rect = \" + box);\n    relationship = box.getRelationship(shape);\n    assertEquals(GeoArea.CONTAINS, relationship);\n  }\n\n","sourceOld":"  @Test\n  public void testBBoxDegenerate() {\n    GeoBBox box;\n    GeoConvexPolygon cp;\n    int relationship;\n    List<GeoPoint> points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(24 * DEGREES_TO_RADIANS, -30 * DEGREES_TO_RADIANS));\n    points.add(new GeoPoint(-11 * DEGREES_TO_RADIANS, 101 * DEGREES_TO_RADIANS));\n    points.add(new GeoPoint(-49 * DEGREES_TO_RADIANS, -176 * DEGREES_TO_RADIANS));\n    GeoMembershipShape shape = GeoPolygonFactory.makeGeoPolygon(points, 0);\n    box = GeoBBoxFactory.makeGeoBBox(-64 * DEGREES_TO_RADIANS, -64 * DEGREES_TO_RADIANS, -180 * DEGREES_TO_RADIANS, 180 * DEGREES_TO_RADIANS);\n    relationship = box.getRelationship(shape);\n    assertEquals(GeoArea.CONTAINS, relationship);\n    box = GeoBBoxFactory.makeGeoBBox(-61.85 * DEGREES_TO_RADIANS, -67.5 * DEGREES_TO_RADIANS, -180 * DEGREES_TO_RADIANS, -168.75 * DEGREES_TO_RADIANS);\n    System.out.println(\"Shape = \" + shape + \" Rect = \" + box);\n    relationship = box.getRelationship(shape);\n    assertEquals(GeoArea.CONTAINS, relationship);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/GeoBBoxTest#testBBoxDegenerate().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoBBoxTest#testBBoxDegenerate().mjava","sourceNew":"  @Test\n  public void testBBoxDegenerate() {\n    GeoBBox box;\n    GeoConvexPolygon cp;\n    int relationship;\n    List<GeoPoint> points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 24 * DEGREES_TO_RADIANS, -30 * DEGREES_TO_RADIANS));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -11 * DEGREES_TO_RADIANS, 101 * DEGREES_TO_RADIANS));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -49 * DEGREES_TO_RADIANS, -176 * DEGREES_TO_RADIANS));\n    GeoMembershipShape shape = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points, 0);\n    box = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, -64 * DEGREES_TO_RADIANS, -64 * DEGREES_TO_RADIANS, -180 * DEGREES_TO_RADIANS, 180 * DEGREES_TO_RADIANS);\n    relationship = box.getRelationship(shape);\n    assertEquals(GeoArea.CONTAINS, relationship);\n    box = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, -61.85 * DEGREES_TO_RADIANS, -67.5 * DEGREES_TO_RADIANS, -180 * DEGREES_TO_RADIANS, -168.75 * DEGREES_TO_RADIANS);\n    System.out.println(\"Shape = \" + shape + \" Rect = \" + box);\n    relationship = box.getRelationship(shape);\n    assertEquals(GeoArea.CONTAINS, relationship);\n  }\n\n","sourceOld":"  @Test\n  public void testBBoxDegenerate() {\n    GeoBBox box;\n    GeoConvexPolygon cp;\n    int relationship;\n    List<GeoPoint> points = new ArrayList<GeoPoint>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, 24 * DEGREES_TO_RADIANS, -30 * DEGREES_TO_RADIANS));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -11 * DEGREES_TO_RADIANS, 101 * DEGREES_TO_RADIANS));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -49 * DEGREES_TO_RADIANS, -176 * DEGREES_TO_RADIANS));\n    GeoMembershipShape shape = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points, 0);\n    box = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, -64 * DEGREES_TO_RADIANS, -64 * DEGREES_TO_RADIANS, -180 * DEGREES_TO_RADIANS, 180 * DEGREES_TO_RADIANS);\n    relationship = box.getRelationship(shape);\n    assertEquals(GeoArea.CONTAINS, relationship);\n    box = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, -61.85 * DEGREES_TO_RADIANS, -67.5 * DEGREES_TO_RADIANS, -180 * DEGREES_TO_RADIANS, -168.75 * DEGREES_TO_RADIANS);\n    System.out.println(\"Shape = \" + shape + \" Rect = \" + box);\n    relationship = box.getRelationship(shape);\n    assertEquals(GeoArea.CONTAINS, relationship);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ea1a3e0b93787916a1002c2be9f1043b6575ea69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fec06d6753751ae302c7d35866763e6cb414112d":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["fec06d6753751ae302c7d35866763e6cb414112d"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["ea1a3e0b93787916a1002c2be9f1043b6575ea69"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e2997acf74723385bd84aff1ea0b12af4aefde77"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3022be5842502b7c2a57a5124199bbc30236f0a0"]},"commit2Childs":{"ea1a3e0b93787916a1002c2be9f1043b6575ea69":["e2997acf74723385bd84aff1ea0b12af4aefde77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ea1a3e0b93787916a1002c2be9f1043b6575ea69","c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"fec06d6753751ae302c7d35866763e6cb414112d":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["fec06d6753751ae302c7d35866763e6cb414112d","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["fec06d6753751ae302c7d35866763e6cb414112d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}