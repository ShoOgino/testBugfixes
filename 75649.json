{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#excludedExtensionsFromByteCounts().mjava","commits":[{"id":"3a88f37cd0154833b5c58daac509eb8be347d0f2","date":1397029487,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#excludedExtensionsFromByteCounts().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return the list of extensions that should be excluded from byte counts when\n   * comparing indices that store the same content.\n   */\n  protected Collection<String> excludedExtensionsFromByteCounts() {\n    // segment infos store various pieces of information that don't solely depend\n    // on the content of the index in the diagnostics (such as a timestamp) so we\n    // exclude this file from the bytes counts\n    return Collections.singleton(\"si\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50805be75df24f05d29a4d2a496c7ec825cde9eb","date":1398078566,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#excludedExtensionsFromByteCounts().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#excludedExtensionsFromByteCounts().mjava","sourceNew":"  /**\n   * Return the list of extensions that should be excluded from byte counts when\n   * comparing indices that store the same content.\n   */\n  protected Collection<String> excludedExtensionsFromByteCounts() {\n    return new HashSet<String>(Arrays.asList(new String[] { \n    // segment infos store various pieces of information that don't solely depend\n    // on the content of the index in the diagnostics (such as a timestamp) so we\n    // exclude this file from the bytes counts\n                        \"si\", \n    // lock files are 0 bytes (one directory in the test could be RAMDir, the other FSDir)\n                        \"lock\" }));\n  }\n\n","sourceOld":"  /**\n   * Return the list of extensions that should be excluded from byte counts when\n   * comparing indices that store the same content.\n   */\n  protected Collection<String> excludedExtensionsFromByteCounts() {\n    // segment infos store various pieces of information that don't solely depend\n    // on the content of the index in the diagnostics (such as a timestamp) so we\n    // exclude this file from the bytes counts\n    return Collections.singleton(\"si\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d943163030bbd7a9caf93cb5fea92257390a2a99","date":1403094254,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#excludedExtensionsFromByteCounts().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#excludedExtensionsFromByteCounts().mjava","sourceNew":"  /**\n   * Return the list of extensions that should be excluded from byte counts when\n   * comparing indices that store the same content.\n   */\n  protected Collection<String> excludedExtensionsFromByteCounts() {\n    return new HashSet<String>(Arrays.asList(new String[] {\n    // segment infos store various pieces of information that don't solely depend\n    // on the content of the index in the diagnostics (such as a timestamp) so we\n    // exclude this file from the bytes counts\n                        \"si\",\n    // lock files are 0 bytes (one directory in the test could be RAMDir, the other FSDir)\n                        \"lock\" }));\n  }\n\n","sourceOld":"  /**\n   * Return the list of extensions that should be excluded from byte counts when\n   * comparing indices that store the same content.\n   */\n  protected Collection<String> excludedExtensionsFromByteCounts() {\n    return new HashSet<String>(Arrays.asList(new String[] { \n    // segment infos store various pieces of information that don't solely depend\n    // on the content of the index in the diagnostics (such as a timestamp) so we\n    // exclude this file from the bytes counts\n                        \"si\", \n    // lock files are 0 bytes (one directory in the test could be RAMDir, the other FSDir)\n                        \"lock\" }));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e57c73924f3b8c19defa62e96bfa34a4922d49c2","date":1403106358,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#excludedExtensionsFromByteCounts().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#excludedExtensionsFromByteCounts().mjava","sourceNew":"  /**\n   * Return the list of extensions that should be excluded from byte counts when\n   * comparing indices that store the same content.\n   */\n  protected Collection<String> excludedExtensionsFromByteCounts() {\n    return new HashSet<String>(Arrays.asList(new String[] {\n    // segment infos store various pieces of information that don't solely depend\n    // on the content of the index in the diagnostics (such as a timestamp) so we\n    // exclude this file from the bytes counts\n                        \"si\",\n    // lock files are 0 bytes (one directory in the test could be RAMDir, the other FSDir)\n                        \"lock\" }));\n  }\n\n","sourceOld":"  /**\n   * Return the list of extensions that should be excluded from byte counts when\n   * comparing indices that store the same content.\n   */\n  protected Collection<String> excludedExtensionsFromByteCounts() {\n    return new HashSet<String>(Arrays.asList(new String[] { \n    // segment infos store various pieces of information that don't solely depend\n    // on the content of the index in the diagnostics (such as a timestamp) so we\n    // exclude this file from the bytes counts\n                        \"si\", \n    // lock files are 0 bytes (one directory in the test could be RAMDir, the other FSDir)\n                        \"lock\" }));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e57c73924f3b8c19defa62e96bfa34a4922d49c2":["50805be75df24f05d29a4d2a496c7ec825cde9eb","d943163030bbd7a9caf93cb5fea92257390a2a99"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d943163030bbd7a9caf93cb5fea92257390a2a99":["50805be75df24f05d29a4d2a496c7ec825cde9eb"],"50805be75df24f05d29a4d2a496c7ec825cde9eb":["3a88f37cd0154833b5c58daac509eb8be347d0f2"],"3a88f37cd0154833b5c58daac509eb8be347d0f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d943163030bbd7a9caf93cb5fea92257390a2a99"]},"commit2Childs":{"e57c73924f3b8c19defa62e96bfa34a4922d49c2":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a88f37cd0154833b5c58daac509eb8be347d0f2"],"d943163030bbd7a9caf93cb5fea92257390a2a99":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"50805be75df24f05d29a4d2a496c7ec825cde9eb":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","d943163030bbd7a9caf93cb5fea92257390a2a99"],"3a88f37cd0154833b5c58daac509eb8be347d0f2":["50805be75df24f05d29a4d2a496c7ec825cde9eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}