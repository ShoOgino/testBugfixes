{"path":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#shouldIBeLeader(ZkNodeProps).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#shouldIBeLeader(ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  private boolean shouldIBeLeader(ZkNodeProps leaderProps) {\n    CloudState cloudState = zkController.getZkStateReader().getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(this.collection);\n    Slice slice = slices.get(shardId);\n    Map<String,ZkNodeProps> shards = slice.getShards();\n    boolean foundSomeoneElseActive = false;\n    for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n      String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n\n      if (new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        if (state.equals(ZkStateReader.ACTIVE)\n          && cloudState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))) {\n          // we are alive\n          return true;\n        }\n      }\n      \n      if ((state.equals(ZkStateReader.ACTIVE))\n          && cloudState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        foundSomeoneElseActive = true;\n      }\n    }\n    \n    return !foundSomeoneElseActive;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#shouldIBeLeader(ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  private boolean shouldIBeLeader(ZkNodeProps leaderProps) {\n    CloudState cloudState = zkController.getZkStateReader().getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(this.collection);\n    Slice slice = slices.get(shardId);\n    Map<String,ZkNodeProps> shards = slice.getShards();\n    boolean foundSomeoneElseActive = false;\n    for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n      String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n\n      if (new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        if (state.equals(ZkStateReader.ACTIVE)\n          && cloudState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))) {\n          // we are alive\n          return true;\n        }\n      }\n      \n      if ((state.equals(ZkStateReader.ACTIVE))\n          && cloudState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        foundSomeoneElseActive = true;\n      }\n    }\n    \n    return !foundSomeoneElseActive;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#shouldIBeLeader(ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  private boolean shouldIBeLeader(ZkNodeProps leaderProps) {\n    CloudState cloudState = zkController.getZkStateReader().getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(this.collection);\n    Slice slice = slices.get(shardId);\n    Map<String,ZkNodeProps> shards = slice.getShards();\n    boolean foundSomeoneElseActive = false;\n    for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n      String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n\n      if (new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        if (state.equals(ZkStateReader.ACTIVE)\n          && cloudState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))) {\n          // we are alive\n          return true;\n        }\n      }\n      \n      if ((state.equals(ZkStateReader.ACTIVE))\n          && cloudState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        foundSomeoneElseActive = true;\n      }\n    }\n    \n    return !foundSomeoneElseActive;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#shouldIBeLeader(ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#shouldIBeLeader(ZkNodeProps).mjava","sourceNew":"  private boolean shouldIBeLeader(ZkNodeProps leaderProps) {\n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(this.collection);\n    Slice slice = slices.get(shardId);\n    Map<String,ZkNodeProps> shards = slice.getShards();\n    boolean foundSomeoneElseActive = false;\n    for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n      String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n\n      if (new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        if (state.equals(ZkStateReader.ACTIVE)\n          && clusterState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))) {\n          // we are alive\n          return true;\n        }\n      }\n      \n      if ((state.equals(ZkStateReader.ACTIVE))\n          && clusterState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        foundSomeoneElseActive = true;\n      }\n    }\n    \n    return !foundSomeoneElseActive;\n  }\n\n","sourceOld":"  private boolean shouldIBeLeader(ZkNodeProps leaderProps) {\n    CloudState cloudState = zkController.getZkStateReader().getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(this.collection);\n    Slice slice = slices.get(shardId);\n    Map<String,ZkNodeProps> shards = slice.getShards();\n    boolean foundSomeoneElseActive = false;\n    for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n      String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n\n      if (new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        if (state.equals(ZkStateReader.ACTIVE)\n          && cloudState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))) {\n          // we are alive\n          return true;\n        }\n      }\n      \n      if ((state.equals(ZkStateReader.ACTIVE))\n          && cloudState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        foundSomeoneElseActive = true;\n      }\n    }\n    \n    return !foundSomeoneElseActive;\n  }\n\n","bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#shouldIBeLeader(ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#shouldIBeLeader(ZkNodeProps).mjava","sourceNew":"  private boolean shouldIBeLeader(ZkNodeProps leaderProps) {\n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(this.collection);\n    Slice slice = slices.get(shardId);\n    Map<String,ZkNodeProps> shards = slice.getShards();\n    boolean foundSomeoneElseActive = false;\n    for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n      String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n\n      if (new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        if (state.equals(ZkStateReader.ACTIVE)\n          && clusterState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))) {\n          // we are alive\n          return true;\n        }\n      }\n      \n      if ((state.equals(ZkStateReader.ACTIVE))\n          && clusterState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        foundSomeoneElseActive = true;\n      }\n    }\n    \n    return !foundSomeoneElseActive;\n  }\n\n","sourceOld":"  private boolean shouldIBeLeader(ZkNodeProps leaderProps) {\n    CloudState cloudState = zkController.getZkStateReader().getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(this.collection);\n    Slice slice = slices.get(shardId);\n    Map<String,ZkNodeProps> shards = slice.getShards();\n    boolean foundSomeoneElseActive = false;\n    for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n      String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n\n      if (new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        if (state.equals(ZkStateReader.ACTIVE)\n          && cloudState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))) {\n          // we are alive\n          return true;\n        }\n      }\n      \n      if ((state.equals(ZkStateReader.ACTIVE))\n          && cloudState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        foundSomeoneElseActive = true;\n      }\n    }\n    \n    return !foundSomeoneElseActive;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#shouldIBeLeader(ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#shouldIBeLeader(ZkNodeProps).mjava","sourceNew":"  private boolean shouldIBeLeader(ZkNodeProps leaderProps) {\n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(this.collection);\n    Slice slice = slices.get(shardId);\n    Map<String,ZkNodeProps> shards = slice.getShards();\n    boolean foundSomeoneElseActive = false;\n    for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n      String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n\n      if (new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        if (state.equals(ZkStateReader.ACTIVE)\n          && clusterState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))) {\n          // we are alive\n          return true;\n        }\n      }\n      \n      if ((state.equals(ZkStateReader.ACTIVE))\n          && clusterState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        foundSomeoneElseActive = true;\n      }\n    }\n    \n    return !foundSomeoneElseActive;\n  }\n\n","sourceOld":"  private boolean shouldIBeLeader(ZkNodeProps leaderProps) {\n    CloudState cloudState = zkController.getZkStateReader().getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(this.collection);\n    Slice slice = slices.get(shardId);\n    Map<String,ZkNodeProps> shards = slice.getShards();\n    boolean foundSomeoneElseActive = false;\n    for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n      String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n\n      if (new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        if (state.equals(ZkStateReader.ACTIVE)\n          && cloudState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))) {\n          // we are alive\n          return true;\n        }\n      }\n      \n      if ((state.equals(ZkStateReader.ACTIVE))\n          && cloudState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        foundSomeoneElseActive = true;\n      }\n    }\n    \n    return !foundSomeoneElseActive;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6013b4c7388f1627659c8f96c44abd10a294d3a6","date":1346343796,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#shouldIBeLeader(ZkNodeProps,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#shouldIBeLeader(ZkNodeProps).mjava","sourceNew":"  private boolean shouldIBeLeader(ZkNodeProps leaderProps, SolrCore core) {\n    log.info(\"Checking if I should try and be the leader.\");\n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(this.collection);\n    Slice slice = slices.get(shardId);\n    Map<String,ZkNodeProps> shards = slice.getShards();\n    boolean foundSomeoneElseActive = false;\n    for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n      String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n\n      if (new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        if (state.equals(ZkStateReader.ACTIVE)\n          && clusterState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))) {\n          // we are alive\n          log.info(\"I am Active and live, it's okay to be the leader.\");\n          return true;\n        }\n      }\n      \n      if ((state.equals(ZkStateReader.ACTIVE))\n          && clusterState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        foundSomeoneElseActive = true;\n      }\n    }\n    if (!foundSomeoneElseActive) {\n      log.info(\"I am not Active but no one else is either, it's okay to be the leader\");\n      try {\n        zkController.publish(core.getCoreDescriptor(), ZkStateReader.ACTIVE);\n      } catch (KeeperException e) {\n        throw new RuntimeException(e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new RuntimeException(e);\n      }\n    } else {\n      log.info(\"I am not Active and someone else appears to be a better leader candidate.\");\n    }\n    return !foundSomeoneElseActive;\n  }\n\n","sourceOld":"  private boolean shouldIBeLeader(ZkNodeProps leaderProps) {\n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(this.collection);\n    Slice slice = slices.get(shardId);\n    Map<String,ZkNodeProps> shards = slice.getShards();\n    boolean foundSomeoneElseActive = false;\n    for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n      String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n\n      if (new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        if (state.equals(ZkStateReader.ACTIVE)\n          && clusterState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))) {\n          // we are alive\n          return true;\n        }\n      }\n      \n      if ((state.equals(ZkStateReader.ACTIVE))\n          && clusterState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        foundSomeoneElseActive = true;\n      }\n    }\n    \n    return !foundSomeoneElseActive;\n  }\n\n","bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#shouldIBeLeader(ZkNodeProps).mjava","sourceNew":null,"sourceOld":"  private boolean shouldIBeLeader(ZkNodeProps leaderProps) {\n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(this.collection);\n    Slice slice = slices.get(shardId);\n    Map<String,ZkNodeProps> shards = slice.getShards();\n    boolean foundSomeoneElseActive = false;\n    for (Map.Entry<String,ZkNodeProps> shard : shards.entrySet()) {\n      String state = shard.getValue().get(ZkStateReader.STATE_PROP);\n\n      if (new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        if (state.equals(ZkStateReader.ACTIVE)\n          && clusterState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))) {\n          // we are alive\n          return true;\n        }\n      }\n      \n      if ((state.equals(ZkStateReader.ACTIVE))\n          && clusterState.liveNodesContain(shard.getValue().get(\n              ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        foundSomeoneElseActive = true;\n      }\n    }\n    \n    return !foundSomeoneElseActive;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","3f767f8c99eaedb984df754fe61f21c5de260f94"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","3f767f8c99eaedb984df754fe61f21c5de260f94"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["d6f074e73200c07d54f242d3880a8da5a35ff97b","6013b4c7388f1627659c8f96c44abd10a294d3a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6013b4c7388f1627659c8f96c44abd10a294d3a6"],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["3f767f8c99eaedb984df754fe61f21c5de260f94"]},"commit2Childs":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","6013b4c7388f1627659c8f96c44abd10a294d3a6"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["05a14b2611ead08655a2b2bdc61632eb31316e57"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["3f767f8c99eaedb984df754fe61f21c5de260f94","0d22ac6a4146774c1bc8400160fc0b6150294e92","d6f074e73200c07d54f242d3880a8da5a35ff97b","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","8fd5be977c105554c6a7b68afcdbc511439723ab"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","8fd5be977c105554c6a7b68afcdbc511439723ab","05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}