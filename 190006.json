{"path":"lucene/core/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","sourceNew":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    INDEX_SIZE = atLeast(2000);\n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index);\n    RandomGen random = new RandomGen(this.random);\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(newField(\"publicationDate_\", random.getLuceneDate(), StringField.TYPE_STORED));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(newField(\"content\", \"test\", TextField.TYPE_STORED));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(newField(\"mandant\", Integer.toString(i % 3), StringField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","sourceOld":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    INDEX_SIZE = atLeast(2000);\n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index);\n    RandomGen random = new RandomGen(this.random);\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(newField(\"publicationDate_\", random.getLuceneDate(), StringField.TYPE_STORED));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(newField(\"content\", \"test\", TextField.TYPE_STORED));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(newField(\"mandant\", Integer.toString(i % 3), StringField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","sourceNew":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    INDEX_SIZE = atLeast(2000);\n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index);\n    RandomGen random = new RandomGen(LuceneTestCase.random);\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(newField(\"publicationDate_\", random.getLuceneDate(), StringField.TYPE_STORED));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(newField(\"content\", \"test\", TextField.TYPE_STORED));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(newField(\"mandant\", Integer.toString(i % 3), StringField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","sourceOld":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    INDEX_SIZE = atLeast(2000);\n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index);\n    RandomGen random = new RandomGen(this.random);\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(newField(\"publicationDate_\", random.getLuceneDate(), StringField.TYPE_STORED));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(newField(\"content\", \"test\", TextField.TYPE_STORED));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(newField(\"mandant\", Integer.toString(i % 3), StringField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","sourceNew":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    INDEX_SIZE = atLeast(2000);\n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index);\n    RandomGen random = new RandomGen(LuceneTestCase.random);\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(newField(\"publicationDate_\", random.getLuceneDate(), StringField.TYPE_STORED));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(newField(\"content\", \"test\", TextField.TYPE_STORED));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(newField(\"mandant\", Integer.toString(i % 3), StringField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","sourceOld":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    INDEX_SIZE = atLeast(2000);\n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index);\n    RandomGen random = new RandomGen(this.random);\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(newField(\"publicationDate_\", random.getLuceneDate(), StringField.TYPE_STORED));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(newField(\"content\", \"test\", TextField.TYPE_STORED));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(newField(\"mandant\", Integer.toString(i % 3), StringField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","sourceNew":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    INDEX_SIZE = atLeast(2000);\n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), index);\n    RandomGen random = new RandomGen(random());\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(newField(\"publicationDate_\", random.getLuceneDate(), StringField.TYPE_STORED));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(newField(\"content\", \"test\", TextField.TYPE_STORED));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(newField(\"mandant\", Integer.toString(i % 3), StringField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","sourceOld":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    INDEX_SIZE = atLeast(2000);\n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index);\n    RandomGen random = new RandomGen(LuceneTestCase.random);\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(newField(\"publicationDate_\", random.getLuceneDate(), StringField.TYPE_STORED));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(newField(\"content\", \"test\", TextField.TYPE_STORED));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(newField(\"mandant\", Integer.toString(i % 3), StringField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","sourceNew":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    INDEX_SIZE = atLeast(2000);\n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), index);\n    RandomGen random = new RandomGen(random());\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(newStringField(\"publicationDate_\", random.getLuceneDate(), Field.Store.YES));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(newTextField(\"content\", \"test\", Field.Store.YES));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(newStringField(\"mandant\", Integer.toString(i % 3), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","sourceOld":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    INDEX_SIZE = atLeast(2000);\n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), index);\n    RandomGen random = new RandomGen(random());\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(newField(\"publicationDate_\", random.getLuceneDate(), StringField.TYPE_STORED));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(newField(\"content\", \"test\", TextField.TYPE_STORED));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(newField(\"mandant\", Integer.toString(i % 3), StringField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":["0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","sourceNew":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    INDEX_SIZE = atLeast(2000);\n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), index);\n    RandomGen random = new RandomGen(random());\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(newStringField(\"publicationDate_\", random.getLuceneDate(), Field.Store.YES));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(newTextField(\"content\", \"test\", Field.Store.YES));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(newStringField(\"mandant\", Integer.toString(i % 3), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.shutdown();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","sourceOld":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    INDEX_SIZE = atLeast(2000);\n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), index);\n    RandomGen random = new RandomGen(random());\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(newStringField(\"publicationDate_\", random.getLuceneDate(), Field.Store.YES));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(newTextField(\"content\", \"test\", Field.Store.YES));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(newStringField(\"mandant\", Integer.toString(i % 3), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","sourceNew":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    INDEX_SIZE = atLeast(2000);\n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), index);\n    RandomGen random = new RandomGen(random());\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(newStringField(\"publicationDate_\", random.getLuceneDate(), Field.Store.YES));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(newTextField(\"content\", \"test\", Field.Store.YES));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(newStringField(\"mandant\", Integer.toString(i % 3), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","sourceOld":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    INDEX_SIZE = atLeast(2000);\n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), index);\n    RandomGen random = new RandomGen(random());\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(newStringField(\"publicationDate_\", random.getLuceneDate(), Field.Store.YES));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(newTextField(\"content\", \"test\", Field.Store.YES));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(newStringField(\"mandant\", Integer.toString(i % 3), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.shutdown();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c","date":1416362965,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCustomSearcherSort#setUp().mjava","sourceNew":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    INDEX_SIZE = atLeast(2000);\n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), index);\n    RandomGen random = new RandomGen(random());\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(new SortedDocValuesField(\"publicationDate_\", new BytesRef(random.getLuceneDate())));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(newTextField(\"content\", \"test\", Field.Store.YES));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(newStringField(\"mandant\", Integer.toString(i % 3), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","sourceOld":"  /**\n   * Create index and query for test cases.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    INDEX_SIZE = atLeast(2000);\n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), index);\n    RandomGen random = new RandomGen(random());\n    for (int i = 0; i < INDEX_SIZE; ++i) { // don't decrease; if to low the\n                                           // problem doesn't show up\n      Document doc = new Document();\n      if ((i % 5) != 0) { // some documents must not have an entry in the first\n                          // sort field\n        doc.add(newStringField(\"publicationDate_\", random.getLuceneDate(), Field.Store.YES));\n      }\n      if ((i % 7) == 0) { // some documents to match the query (see below)\n        doc.add(newTextField(\"content\", \"test\", Field.Store.YES));\n      }\n      // every document has a defined 'mandant' field\n      doc.add(newStringField(\"mandant\", Integer.toString(i % 3), Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    query = new TermQuery(new Term(\"content\", \"test\"));\n  }\n\n","bugFix":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c"]},"commit2Childs":{"0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["0ed6b1234af94a2693d3e6550e7b3ee41fd3f51c"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}