{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","commits":[{"id":"c135b907ec07be761fc0f0c3501a038a2a28f3bc","date":1220975801,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * SortFields: field:type,field:type\n   * \n   * name,byline:int,subject:auto\n   * \n   */\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      int index = field.lastIndexOf(\":\");\n      String fieldName;\n      String typeString;\n      if (index != -1) {\n        fieldName = field.substring(0, index);\n        typeString = field.substring(index, field.length());\n      } else {\n        typeString = \"auto\";\n        fieldName = field;\n      }\n      int type = getType(typeString);\n      sortFields[i] = new SortField(fieldName, type);\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8c2fcd101936ef24f01f8660fc13293c68c964b6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"47a59f52ead90667ce2157b12f88b2292390d726","date":1229179412,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","sourceNew":"  /**\n   * SortFields: field:type,field:type\n   * \n   * name,byline:int,subject:auto\n   * \n   */\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      int index = field.lastIndexOf(\":\");\n      String fieldName;\n      String typeString;\n      if (index != -1) {\n        fieldName = field.substring(0, index);\n        typeString = field.substring(1+index, field.length());\n      } else {\n        typeString = \"auto\";\n        fieldName = field;\n      }\n      int type = getType(typeString);\n      sortFields[i] = new SortField(fieldName, type);\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","sourceOld":"  /**\n   * SortFields: field:type,field:type\n   * \n   * name,byline:int,subject:auto\n   * \n   */\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      int index = field.lastIndexOf(\":\");\n      String fieldName;\n      String typeString;\n      if (index != -1) {\n        fieldName = field.substring(0, index);\n        typeString = field.substring(index, field.length());\n      } else {\n        typeString = \"auto\";\n        fieldName = field;\n      }\n      int type = getType(typeString);\n      sortFields[i] = new SortField(fieldName, type);\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","sourceNew":"  /**\n   * SortFields: field:type,field:type\n   * \n   * name,byline:int,subject:auto\n   * \n   */\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          typeString = \"auto\";\n          fieldName = field;\n        }\n        int type = getType(typeString);\n        sortField0 = new SortField(fieldName, type);\n      }\n      sortFields[i] = sortField0;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","sourceOld":"  /**\n   * SortFields: field:type,field:type\n   * \n   * name,byline:int,subject:auto\n   * \n   */\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      int index = field.lastIndexOf(\":\");\n      String fieldName;\n      String typeString;\n      if (index != -1) {\n        fieldName = field.substring(0, index);\n        typeString = field.substring(1+index, field.length());\n      } else {\n        typeString = \"auto\";\n        fieldName = field;\n      }\n      int type = getType(typeString);\n      sortFields[i] = new SortField(fieldName, type);\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","bugFix":null,"bugIntro":["8c2fcd101936ef24f01f8660fc13293c68c964b6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","sourceNew":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name,byline:int,subject:auto\n   * \n   */\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          typeString = \"auto\";\n          fieldName = field;\n        }\n        int type = getType(typeString);\n        sortField0 = new SortField(fieldName, type);\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","sourceOld":"  /**\n   * SortFields: field:type,field:type\n   * \n   * name,byline:int,subject:auto\n   * \n   */\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          typeString = \"auto\";\n          fieldName = field;\n        }\n        int type = getType(typeString);\n        sortField0 = new SortField(fieldName, type);\n      }\n      sortFields[i] = sortField0;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8c2fcd101936ef24f01f8660fc13293c68c964b6","date":1247611978,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","sourceNew":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        int type = getType(typeString);\n        sortField0 = new SortField(fieldName, type);\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","sourceOld":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name,byline:int,subject:auto\n   * \n   */\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          typeString = \"auto\";\n          fieldName = field;\n        }\n        int type = getType(typeString);\n        sortField0 = new SortField(fieldName, type);\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","bugFix":["c135b907ec07be761fc0f0c3501a038a2a28f3bc","63bc3238545c6012bd44f5d294077997f236bc4e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bc1076e669ef72f6939198a862b40a0ffd1fc70","date":1248689703,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","sourceNew":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        int type = getType(typeString);\n        sortField0 = new SortField(fieldName, type);\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","sourceOld":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        int type = getType(typeString);\n        sortField0 = new SortField(fieldName, type);\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","bugFix":null,"bugIntro":["701af9c5bc5323c862e3fd5320e14e5a56ee584a","701af9c5bc5323c862e3fd5320e14e5a56ee584a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","sourceNew":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        int type = getType(typeString);\n        sortField0 = new SortField(fieldName, type);\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","sourceOld":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        int type = getType(typeString);\n        sortField0 = new SortField(fieldName, type);\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchWithSortTask#setParams(String).mjava","sourceNew":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        int type = getType(typeString);\n        sortField0 = new SortField(fieldName, type);\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","sourceOld":"  /**\n   * SortFields: field:type,field:type[,noscore][,nomaxscore]\n   *\n   * If noscore is present, then we turn off score tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * If nomaxscore is present, then we turn off maxScore tracking\n   * in {@link org.apache.lucene.search.TopFieldCollector}.\n   * \n   * name:string,page:int,subject:string\n   * \n   */\n  @Override\n  public void setParams(String sortField) {\n    super.setParams(sortField);\n    String[] fields = sortField.split(\",\");\n    SortField[] sortFields = new SortField[fields.length];\n    int upto = 0;\n    for (int i = 0; i < fields.length; i++) {\n      String field = fields[i];\n      SortField sortField0;\n      if (field.equals(\"doc\")) {\n        sortField0 = SortField.FIELD_DOC;\n      } if (field.equals(\"score\")) {\n        sortField0 = SortField.FIELD_SCORE;\n      } else if (field.equals(\"noscore\")) {\n        doScore = false;\n        continue;\n      } else if (field.equals(\"nomaxscore\")) {\n        doMaxScore = false;\n        continue;\n      } else {\n        int index = field.lastIndexOf(\":\");\n        String fieldName;\n        String typeString;\n        if (index != -1) {\n          fieldName = field.substring(0, index);\n          typeString = field.substring(1+index, field.length());\n        } else {\n          throw new RuntimeException(\"You must specify the sort type ie page:int,subject:string\");\n        }\n        int type = getType(typeString);\n        sortField0 = new SortField(fieldName, type);\n      }\n      sortFields[upto++] = sortField0;\n    }\n\n    if (upto < sortFields.length) {\n      SortField[] newSortFields = new SortField[upto];\n      System.arraycopy(sortFields, 0, newSortFields, 0, upto);\n      sortFields = newSortFields;\n    }\n    this.sort = new Sort(sortFields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"64714133cf5ec732e3bbceee63351bb9af0117dc":["63bc3238545c6012bd44f5d294077997f236bc4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8c2fcd101936ef24f01f8660fc13293c68c964b6":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["1bc1076e669ef72f6939198a862b40a0ffd1fc70"],"63bc3238545c6012bd44f5d294077997f236bc4e":["47a59f52ead90667ce2157b12f88b2292390d726"],"c135b907ec07be761fc0f0c3501a038a2a28f3bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"1bc1076e669ef72f6939198a862b40a0ffd1fc70":["8c2fcd101936ef24f01f8660fc13293c68c964b6"],"47a59f52ead90667ce2157b12f88b2292390d726":["c135b907ec07be761fc0f0c3501a038a2a28f3bc"]},"commit2Childs":{"64714133cf5ec732e3bbceee63351bb9af0117dc":["8c2fcd101936ef24f01f8660fc13293c68c964b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c135b907ec07be761fc0f0c3501a038a2a28f3bc"],"8c2fcd101936ef24f01f8660fc13293c68c964b6":["1bc1076e669ef72f6939198a862b40a0ffd1fc70"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"63bc3238545c6012bd44f5d294077997f236bc4e":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"c135b907ec07be761fc0f0c3501a038a2a28f3bc":["47a59f52ead90667ce2157b12f88b2292390d726"],"1bc1076e669ef72f6939198a862b40a0ffd1fc70":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"47a59f52ead90667ce2157b12f88b2292390d726":["63bc3238545c6012bd44f5d294077997f236bc4e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}