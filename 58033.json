{"path":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest#test().mjava","commits":[{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    \n    del(\"*:*\");\n\n    // NOTE: we use the literal (4 character) string \"null\" as a company name\n    // to help ensure there isn't any bugs where the literal string is treated as if it \n    // were a true NULL value.\n    index(id, 19, \"place_t\", \"cardiff dublin\", \"company_t\", \"microsoft polecat\", \"price_ti\", \"15\");\n    index(id, 20, \"place_t\", \"dublin\", \"company_t\", \"polecat microsoft null\", \"price_ti\", \"19\",\n          // this is the only doc to have solo_* fields, therefore only 1 shard has them\n          // TODO: add enum field - blocked by SOLR-6682\n          \"solo_i\", 42, \"solo_s\", \"lonely\", \"solo_dt\", \"1976-03-06T01:23:45Z\");\n    index(id, 21, \"place_t\", \"london la dublin\", \"company_t\",\n        \"microsoft fujitsu null polecat\", \"price_ti\", \"29\");\n    index(id, 22, \"place_t\", \"krakow london cardiff\", \"company_t\",\n        \"polecat null bbc\", \"price_ti\", \"39\");\n    index(id, 23, \"place_t\", \"london\", \"company_t\", \"\", \"price_ti\", \"29\");\n    index(id, 24, \"place_t\", \"la\", \"company_t\", \"\");\n    index(id, 25, \"company_t\", \"microsoft polecat null fujitsu null bbc\", \"price_ti\", \"59\");\n    index(id, 26, \"place_t\", \"krakow\", \"company_t\", \"null\");\n    index(id, 27, \"place_t\", \"krakow cardiff dublin london la\", \n          \"company_t\", \"null microsoft polecat bbc fujitsu\");\n    index(id, 28, \"place_t\", \"cork\", \"company_t\", \"fujitsu rte\");\n    commit();\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);    \n    \n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n    setDistributedParams(params);\n    params.add(\"q\", \"*:*\");\n    params.add(\"facet\", \"true\");\n    params.add(\"facet.pivot\", \"place_t,company_t\");\n   \n    \n    QueryResponse rsp = queryServer(params);\n    \n    List<PivotField> expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    List<PivotField> expectedCardiffPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"null\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    List<PivotField> expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 1, null));\n    List<PivotField> expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    List<PivotField> expectedLAPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2,null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2,null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"null\", 2, null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 1, null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 2,null));\n    List<PivotField> expectedKrakowPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",2, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 1, null));\n    List<PivotField> expectedCorkPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"rte\", 1, null));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4, expectedDublinPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"cardiff\", 3,  expectedCardiffPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"london\", 4, expectedLondonPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"la\", 3, expectedLAPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"krakow\", 3, expectedKrakowPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"cork\", 1, expectedCorkPivots));\n    \n    \n    List<PivotField> placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    // Useful to check for errors, orders lists and does toString() equality\n    // check\n    testOrderedPivotsStringEquality(expectedPlacePivots, placePivots);\n    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    // Test sorting by count\n    \n    params.set(FacetParams.FACET_SORT, FacetParams.FACET_SORT_COUNT);\n    \n    rsp = queryServer(params);\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    testCountSorting(placePivots);\n    \n    // Test limit\n    \n    params.set(FacetParams.FACET_LIMIT, 2);\n    \n    rsp = queryServer(params);\n    \n    expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",\n        4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",\n        4, null));\n    expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,\n        null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3,\n        null));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4,\n        expectedDublinPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"london\", 4,\n        expectedLondonPivots));\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    // Test individual facet.limit values\n    params.remove(FacetParams.FACET_LIMIT);\n    \n    params.set(\"f.place_t.\" + FacetParams.FACET_LIMIT, 1);\n    params.set(\"f.company_t.\" + FacetParams.FACET_LIMIT, 4);\n    \n    rsp = queryServer(params);\n    \n    expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    \n    expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",4, null));    \n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"null\",3, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\",2, null));\n    \n    expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    \n    expectedCardiffPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    \n    expectedKrakowPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    \n    expectedLAPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    \n    expectedCorkPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    \n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4, expectedDublinPivots));\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    params.remove(\"f.company_t.\" + FacetParams.FACET_LIMIT);\n    params.remove(\"f.place_t.\" + FacetParams.FACET_LIMIT);\n    params.set(FacetParams.FACET_LIMIT, 2);\n    \n    // Test facet.missing=true with diff sorts\n\n    index(\"id\",777); // NOTE: id=25 has no place as well\n    commit();\n\n    SolrParams missingA = params( \"q\", \"*:*\",\n                                  \"rows\", \"0\",\n                                  \"facet\",\"true\",\n                                  \"facet.pivot\",\"place_t,company_t\",\n                                  // default facet.sort\n                                  FacetParams.FACET_MISSING, \"true\" );\n    SolrParams missingB = SolrParams.wrapDefaults(missingA, \n                                                  params(FacetParams.FACET_LIMIT, \"4\",\n                                                         \"facet.sort\", \"index\"));\n    for (SolrParams p : new SolrParams[] { missingA, missingB }) {\n      // in either case, the last pivot option should be the same\n      rsp = query( p );\n      placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n      assertTrue(\"not enough values for pivot: \" + p + \" => \" + placePivots, \n                 1 < placePivots.size());\n      PivotField missing = placePivots.get(placePivots.size()-1);\n      assertNull(\"not the missing place value: \" + p, missing.getValue());\n      assertEquals(\"wrong missing place count: \" + p, 2, missing.getCount());\n      assertTrue(\"not enough sub-pivots for missing place: \"+ p +\" => \" + missing.getPivot(),\n                 1 < missing.getPivot().size());\n      missing = missing.getPivot().get(missing.getPivot().size()-1);\n      assertNull(\"not the missing company value: \" + p, missing.getValue());\n      assertEquals(\"wrong missing company count: \" + p, 1, missing.getCount());\n      assertNull(\"company shouldn't have sub-pivots: \" + p, missing.getPivot());\n    }\n\n    // sort=index + mincount + limit\n    for (SolrParams variableParams : new SolrParams[] { \n        // we should get the same results regardless of overrequest\n        params(\"facet.overrequest.count\",\"0\",\n               \"facet.overrequest.ratio\",\"0\"),\n        params()                                  }) {\n\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.pivot\",\"company_t\",\n                                                      \"facet.sort\", \"index\",\n                                                      \"facet.pivot.mincount\", \"4\",\n                                                      \"facet.limit\", \"4\"),\n                                              variableParams );\n\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(4, pivots.size());\n        assertEquals(\"fujitsu\", pivots.get(0).getValue());\n        assertEquals(4, pivots.get(0).getCount());\n        assertEquals(\"microsoft\", pivots.get(1).getValue());\n        assertEquals(5, pivots.get(1).getCount());\n        assertEquals(\"null\", pivots.get(2).getValue());\n        assertEquals(6, pivots.get(2).getCount());\n        assertEquals(\"polecat\", pivots.get(3).getValue());\n        assertEquals(6, pivots.get(3).getCount());\n        \n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // sort=index + mincount + limit + offset\n    for (SolrParams variableParams : new SolrParams[] { \n        // we should get the same results regardless of overrequest\n        params(\"facet.overrequest.count\",\"0\",\n               \"facet.overrequest.ratio\",\"0\"),\n        params()                                  }) {\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.pivot\",\"company_t\",\n                                                      \"facet.sort\", \"index\",\n                                                      \"facet.pivot.mincount\", \"4\",\n                                                      \"facet.offset\", \"1\",\n                                                      \"facet.limit\", \"4\"),\n                                              variableParams );\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(3, pivots.size()); // asked for 4, but not enough meet the mincount\n        assertEquals(\"microsoft\", pivots.get(0).getValue());\n        assertEquals(5, pivots.get(0).getCount());\n        assertEquals(\"null\", pivots.get(1).getValue());\n        assertEquals(6, pivots.get(1).getCount());\n        assertEquals(\"polecat\", pivots.get(2).getValue());\n        assertEquals(6, pivots.get(2).getCount());\n\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n\n    }\n      \n    // sort=index + mincount + limit + offset (more permutations)\n    for (SolrParams variableParams : new SolrParams[] { \n        // all of these combinations should result in the same first value\n        params(\"facet.pivot.mincount\", \"4\",\n               \"facet.offset\", \"2\"),\n        params(\"facet.pivot.mincount\", \"5\",\n               \"facet.offset\", \"1\"),\n        params(\"facet.pivot.mincount\", \"6\",\n               \"facet.offset\", \"0\" )                  }) {\n      \n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.limit\",\"1\",\n                                                      \"facet.sort\",\"index\",\n                                                      \"facet.overrequest.ratio\",\"0\",\n                                                      \"facet.pivot\", \"company_t\"),\n                                              variableParams );\n\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(1, pivots.size());\n        assertEquals(pivots.toString(), \"null\", pivots.get(0).getValue());\n        assertEquals(pivots.toString(), 6, pivots.get(0).getCount());\n\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    doTestDeepPivotStats();\n\n    doTestPivotStatsFromOneShard();\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    \n    del(\"*:*\");\n\n    // NOTE: we use the literal (4 character) string \"null\" as a company name\n    // to help ensure there isn't any bugs where the literal string is treated as if it \n    // were a true NULL value.\n    index(id, 19, \"place_t\", \"cardiff dublin\", \"company_t\", \"microsoft polecat\", \"price_ti\", \"15\");\n    index(id, 20, \"place_t\", \"dublin\", \"company_t\", \"polecat microsoft null\", \"price_ti\", \"19\",\n          // this is the only doc to have solo_* fields, therefore only 1 shard has them\n          // TODO: add enum field - blocked by SOLR-6682\n          \"solo_i\", 42, \"solo_s\", \"lonely\", \"solo_dt\", \"1976-03-06T01:23:45Z\");\n    index(id, 21, \"place_t\", \"london la dublin\", \"company_t\",\n        \"microsoft fujitsu null polecat\", \"price_ti\", \"29\");\n    index(id, 22, \"place_t\", \"krakow london cardiff\", \"company_t\",\n        \"polecat null bbc\", \"price_ti\", \"39\");\n    index(id, 23, \"place_t\", \"london\", \"company_t\", \"\", \"price_ti\", \"29\");\n    index(id, 24, \"place_t\", \"la\", \"company_t\", \"\");\n    index(id, 25, \"company_t\", \"microsoft polecat null fujitsu null bbc\", \"price_ti\", \"59\");\n    index(id, 26, \"place_t\", \"krakow\", \"company_t\", \"null\");\n    index(id, 27, \"place_t\", \"krakow cardiff dublin london la\", \n          \"company_t\", \"null microsoft polecat bbc fujitsu\");\n    index(id, 28, \"place_t\", \"cork\", \"company_t\", \"fujitsu rte\");\n    commit();\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);    \n    \n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n    setDistributedParams(params);\n    params.add(\"q\", \"*:*\");\n    params.add(\"facet\", \"true\");\n    params.add(\"facet.pivot\", \"place_t,company_t\");\n   \n    \n    QueryResponse rsp = queryServer(params);\n    \n    List<PivotField> expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    List<PivotField> expectedCardiffPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"null\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    List<PivotField> expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 1, null));\n    List<PivotField> expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    List<PivotField> expectedLAPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2,null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2,null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"null\", 2, null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 1, null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 2,null));\n    List<PivotField> expectedKrakowPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",2, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 1, null));\n    List<PivotField> expectedCorkPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"rte\", 1, null));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4, expectedDublinPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"cardiff\", 3,  expectedCardiffPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"london\", 4, expectedLondonPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"la\", 3, expectedLAPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"krakow\", 3, expectedKrakowPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"cork\", 1, expectedCorkPivots));\n    \n    \n    List<PivotField> placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    // Useful to check for errors, orders lists and does toString() equality\n    // check\n    testOrderedPivotsStringEquality(expectedPlacePivots, placePivots);\n    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    // Test sorting by count\n    \n    params.set(FacetParams.FACET_SORT, FacetParams.FACET_SORT_COUNT);\n    \n    rsp = queryServer(params);\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    testCountSorting(placePivots);\n    \n    // Test limit\n    \n    params.set(FacetParams.FACET_LIMIT, 2);\n    \n    rsp = queryServer(params);\n    \n    expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",\n        4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",\n        4, null));\n    expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,\n        null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3,\n        null));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4,\n        expectedDublinPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"london\", 4,\n        expectedLondonPivots));\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    // Test individual facet.limit values\n    params.remove(FacetParams.FACET_LIMIT);\n    \n    params.set(\"f.place_t.\" + FacetParams.FACET_LIMIT, 1);\n    params.set(\"f.company_t.\" + FacetParams.FACET_LIMIT, 4);\n    \n    rsp = queryServer(params);\n    \n    expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    \n    expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",4, null));    \n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"null\",3, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\",2, null));\n    \n    expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    \n    expectedCardiffPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    \n    expectedKrakowPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    \n    expectedLAPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    \n    expectedCorkPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    \n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4, expectedDublinPivots));\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    params.remove(\"f.company_t.\" + FacetParams.FACET_LIMIT);\n    params.remove(\"f.place_t.\" + FacetParams.FACET_LIMIT);\n    params.set(FacetParams.FACET_LIMIT, 2);\n    \n    // Test facet.missing=true with diff sorts\n\n    index(\"id\",777); // NOTE: id=25 has no place as well\n    commit();\n\n    SolrParams missingA = params( \"q\", \"*:*\",\n                                  \"rows\", \"0\",\n                                  \"facet\",\"true\",\n                                  \"facet.pivot\",\"place_t,company_t\",\n                                  // default facet.sort\n                                  FacetParams.FACET_MISSING, \"true\" );\n    SolrParams missingB = SolrParams.wrapDefaults(missingA, \n                                                  params(FacetParams.FACET_LIMIT, \"4\",\n                                                         \"facet.sort\", \"index\"));\n    for (SolrParams p : new SolrParams[] { missingA, missingB }) {\n      // in either case, the last pivot option should be the same\n      rsp = query( p );\n      placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n      assertTrue(\"not enough values for pivot: \" + p + \" => \" + placePivots, \n                 1 < placePivots.size());\n      PivotField missing = placePivots.get(placePivots.size()-1);\n      assertNull(\"not the missing place value: \" + p, missing.getValue());\n      assertEquals(\"wrong missing place count: \" + p, 2, missing.getCount());\n      assertTrue(\"not enough sub-pivots for missing place: \"+ p +\" => \" + missing.getPivot(),\n                 1 < missing.getPivot().size());\n      missing = missing.getPivot().get(missing.getPivot().size()-1);\n      assertNull(\"not the missing company value: \" + p, missing.getValue());\n      assertEquals(\"wrong missing company count: \" + p, 1, missing.getCount());\n      assertNull(\"company shouldn't have sub-pivots: \" + p, missing.getPivot());\n    }\n\n    // sort=index + mincount + limit\n    for (SolrParams variableParams : new SolrParams[] { \n        // we should get the same results regardless of overrequest\n        params(\"facet.overrequest.count\",\"0\",\n               \"facet.overrequest.ratio\",\"0\"),\n        params()                                  }) {\n\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.pivot\",\"company_t\",\n                                                      \"facet.sort\", \"index\",\n                                                      \"facet.pivot.mincount\", \"4\",\n                                                      \"facet.limit\", \"4\"),\n                                              variableParams );\n\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(4, pivots.size());\n        assertEquals(\"fujitsu\", pivots.get(0).getValue());\n        assertEquals(4, pivots.get(0).getCount());\n        assertEquals(\"microsoft\", pivots.get(1).getValue());\n        assertEquals(5, pivots.get(1).getCount());\n        assertEquals(\"null\", pivots.get(2).getValue());\n        assertEquals(6, pivots.get(2).getCount());\n        assertEquals(\"polecat\", pivots.get(3).getValue());\n        assertEquals(6, pivots.get(3).getCount());\n        \n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // sort=index + mincount + limit + offset\n    for (SolrParams variableParams : new SolrParams[] { \n        // we should get the same results regardless of overrequest\n        params(\"facet.overrequest.count\",\"0\",\n               \"facet.overrequest.ratio\",\"0\"),\n        params()                                  }) {\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.pivot\",\"company_t\",\n                                                      \"facet.sort\", \"index\",\n                                                      \"facet.pivot.mincount\", \"4\",\n                                                      \"facet.offset\", \"1\",\n                                                      \"facet.limit\", \"4\"),\n                                              variableParams );\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(3, pivots.size()); // asked for 4, but not enough meet the mincount\n        assertEquals(\"microsoft\", pivots.get(0).getValue());\n        assertEquals(5, pivots.get(0).getCount());\n        assertEquals(\"null\", pivots.get(1).getValue());\n        assertEquals(6, pivots.get(1).getCount());\n        assertEquals(\"polecat\", pivots.get(2).getValue());\n        assertEquals(6, pivots.get(2).getCount());\n\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n\n    }\n      \n    // sort=index + mincount + limit + offset (more permutations)\n    for (SolrParams variableParams : new SolrParams[] { \n        // all of these combinations should result in the same first value\n        params(\"facet.pivot.mincount\", \"4\",\n               \"facet.offset\", \"2\"),\n        params(\"facet.pivot.mincount\", \"5\",\n               \"facet.offset\", \"1\"),\n        params(\"facet.pivot.mincount\", \"6\",\n               \"facet.offset\", \"0\" )                  }) {\n      \n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.limit\",\"1\",\n                                                      \"facet.sort\",\"index\",\n                                                      \"facet.overrequest.ratio\",\"0\",\n                                                      \"facet.pivot\", \"company_t\"),\n                                              variableParams );\n\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(1, pivots.size());\n        assertEquals(pivots.toString(), \"null\", pivots.get(0).getValue());\n        assertEquals(pivots.toString(), 6, pivots.get(0).getCount());\n\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    doTestDeepPivotStats();\n\n    doTestPivotStatsFromOneShard();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d12bbc45d641864ffe03291bc30f178eb34e434c","date":1426001646,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    \n    del(\"*:*\");\n\n    // NOTE: we use the literal (4 character) string \"null\" as a company name\n    // to help ensure there isn't any bugs where the literal string is treated as if it \n    // were a true NULL value.\n    index(id, 19, \"place_t\", \"cardiff dublin\", \"company_t\", \"microsoft polecat\", \"price_ti\", \"15\");\n    index(id, 20, \"place_t\", \"dublin\", \"company_t\", \"polecat microsoft null\", \"price_ti\", \"19\",\n          // this is the only doc to have solo_* fields, therefore only 1 shard has them\n          // TODO: add enum field - blocked by SOLR-6682\n          \"solo_i\", 42, \"solo_s\", \"lonely\", \"solo_dt\", \"1976-03-06T01:23:45Z\");\n    index(id, 21, \"place_t\", \"london la dublin\", \"company_t\",\n        \"microsoft fujitsu null polecat\", \"price_ti\", \"29\");\n    index(id, 22, \"place_t\", \"krakow london cardiff\", \"company_t\",\n        \"polecat null bbc\", \"price_ti\", \"39\");\n    index(id, 23, \"place_t\", \"london\", \"company_t\", \"\", \"price_ti\", \"29\");\n    index(id, 24, \"place_t\", \"la\", \"company_t\", \"\");\n    index(id, 25, \"company_t\", \"microsoft polecat null fujitsu null bbc\", \"price_ti\", \"59\");\n    index(id, 26, \"place_t\", \"krakow\", \"company_t\", \"null\");\n    index(id, 27, \"place_t\", \"krakow cardiff dublin london la\", \n          \"company_t\", \"null microsoft polecat bbc fujitsu\");\n    index(id, 28, \"place_t\", \"cork\", \"company_t\", \"fujitsu rte\");\n    commit();\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);    \n    \n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n    setDistributedParams(params);\n    params.add(\"q\", \"*:*\");\n    params.add(\"facet\", \"true\");\n    params.add(\"facet.pivot\", \"place_t,company_t\");\n   \n    \n    QueryResponse rsp = queryServer(params);\n    \n    List<PivotField> expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    List<PivotField> expectedCardiffPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"null\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    List<PivotField> expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 1, null));\n    List<PivotField> expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    List<PivotField> expectedLAPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2,null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2,null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"null\", 2, null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 1, null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 2,null));\n    List<PivotField> expectedKrakowPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",2, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 1, null));\n    List<PivotField> expectedCorkPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"rte\", 1, null));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4, expectedDublinPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"cardiff\", 3,  expectedCardiffPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"london\", 4, expectedLondonPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"la\", 3, expectedLAPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"krakow\", 3, expectedKrakowPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"cork\", 1, expectedCorkPivots));\n    \n    \n    List<PivotField> placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    // Useful to check for errors, orders lists and does toString() equality\n    // check\n    testOrderedPivotsStringEquality(expectedPlacePivots, placePivots);\n    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    // Test sorting by count\n    \n    params.set(FacetParams.FACET_SORT, FacetParams.FACET_SORT_COUNT);\n    \n    rsp = queryServer(params);\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    testCountSorting(placePivots);\n    \n    // Test limit\n    \n    params.set(FacetParams.FACET_LIMIT, 2);\n    \n    rsp = queryServer(params);\n    \n    expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",\n        4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",\n        4, null));\n    expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,\n        null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3,\n        null));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4,\n        expectedDublinPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"london\", 4,\n        expectedLondonPivots));\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    // Test individual facet.limit values\n    params.remove(FacetParams.FACET_LIMIT);\n    \n    params.set(\"f.place_t.\" + FacetParams.FACET_LIMIT, 1);\n    params.set(\"f.company_t.\" + FacetParams.FACET_LIMIT, 4);\n    \n    rsp = queryServer(params);\n    \n    expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    \n    expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",4, null));    \n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"null\",3, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\",2, null));\n    \n    expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    \n    expectedCardiffPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    \n    expectedKrakowPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    \n    expectedLAPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    \n    expectedCorkPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    \n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4, expectedDublinPivots));\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    params.remove(\"f.company_t.\" + FacetParams.FACET_LIMIT);\n    params.remove(\"f.place_t.\" + FacetParams.FACET_LIMIT);\n    params.set(FacetParams.FACET_LIMIT, 2);\n    \n    // Test facet.missing=true with diff sorts\n\n    index(\"id\",777); // NOTE: id=25 has no place as well\n    commit();\n\n    SolrParams missingA = params( \"q\", \"*:*\",\n                                  \"rows\", \"0\",\n                                  \"facet\",\"true\",\n                                  \"facet.pivot\",\"place_t,company_t\",\n                                  // default facet.sort\n                                  FacetParams.FACET_MISSING, \"true\" );\n    SolrParams missingB = SolrParams.wrapDefaults(missingA, \n                                                  params(FacetParams.FACET_LIMIT, \"4\",\n                                                         \"facet.sort\", \"index\"));\n    for (SolrParams p : new SolrParams[] { missingA, missingB }) {\n      // in either case, the last pivot option should be the same\n      rsp = query( p );\n      placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n      assertTrue(\"not enough values for pivot: \" + p + \" => \" + placePivots, \n                 1 < placePivots.size());\n      PivotField missing = placePivots.get(placePivots.size()-1);\n      assertNull(\"not the missing place value: \" + p, missing.getValue());\n      assertEquals(\"wrong missing place count: \" + p, 2, missing.getCount());\n      assertTrue(\"not enough sub-pivots for missing place: \"+ p +\" => \" + missing.getPivot(),\n                 1 < missing.getPivot().size());\n      missing = missing.getPivot().get(missing.getPivot().size()-1);\n      assertNull(\"not the missing company value: \" + p, missing.getValue());\n      assertEquals(\"wrong missing company count: \" + p, 1, missing.getCount());\n      assertNull(\"company shouldn't have sub-pivots: \" + p, missing.getPivot());\n    }\n\n    // sort=index + mincount + limit\n    for (SolrParams variableParams : new SolrParams[] { \n        // we should get the same results regardless of overrequest\n        params(\"facet.overrequest.count\",\"0\",\n               \"facet.overrequest.ratio\",\"0\"),\n        params()                                  }) {\n\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.pivot\",\"company_t\",\n                                                      \"facet.sort\", \"index\",\n                                                      \"facet.pivot.mincount\", \"4\",\n                                                      \"facet.limit\", \"4\"),\n                                              variableParams );\n\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(4, pivots.size());\n        assertEquals(\"fujitsu\", pivots.get(0).getValue());\n        assertEquals(4, pivots.get(0).getCount());\n        assertEquals(\"microsoft\", pivots.get(1).getValue());\n        assertEquals(5, pivots.get(1).getCount());\n        assertEquals(\"null\", pivots.get(2).getValue());\n        assertEquals(6, pivots.get(2).getCount());\n        assertEquals(\"polecat\", pivots.get(3).getValue());\n        assertEquals(6, pivots.get(3).getCount());\n        \n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // sort=index + mincount + limit + offset\n    for (SolrParams variableParams : new SolrParams[] { \n        // we should get the same results regardless of overrequest\n        params(\"facet.overrequest.count\",\"0\",\n               \"facet.overrequest.ratio\",\"0\"),\n        params()                                  }) {\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.pivot\",\"company_t\",\n                                                      \"facet.sort\", \"index\",\n                                                      \"facet.pivot.mincount\", \"4\",\n                                                      \"facet.offset\", \"1\",\n                                                      \"facet.limit\", \"4\"),\n                                              variableParams );\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(3, pivots.size()); // asked for 4, but not enough meet the mincount\n        assertEquals(\"microsoft\", pivots.get(0).getValue());\n        assertEquals(5, pivots.get(0).getCount());\n        assertEquals(\"null\", pivots.get(1).getValue());\n        assertEquals(6, pivots.get(1).getCount());\n        assertEquals(\"polecat\", pivots.get(2).getValue());\n        assertEquals(6, pivots.get(2).getCount());\n\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n\n    }\n      \n    // sort=index + mincount + limit + offset (more permutations)\n    for (SolrParams variableParams : new SolrParams[] { \n        // all of these combinations should result in the same first value\n        params(\"facet.pivot.mincount\", \"4\",\n               \"facet.offset\", \"2\"),\n        params(\"facet.pivot.mincount\", \"5\",\n               \"facet.offset\", \"1\"),\n        params(\"facet.pivot.mincount\", \"6\",\n               \"facet.offset\", \"0\" )                  }) {\n      \n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.limit\",\"1\",\n                                                      \"facet.sort\",\"index\",\n                                                      \"facet.overrequest.ratio\",\"0\",\n                                                      \"facet.pivot\", \"company_t\"),\n                                              variableParams );\n\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(1, pivots.size());\n        assertEquals(pivots.toString(), \"null\", pivots.get(0).getValue());\n        assertEquals(pivots.toString(), 6, pivots.get(0).getCount());\n\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    doTestDeepPivotStats(false); // all price stats\n    doTestDeepPivotStats(true); // just the mean price stat\n\n    doTestPivotStatsFromOneShard();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    \n    del(\"*:*\");\n\n    // NOTE: we use the literal (4 character) string \"null\" as a company name\n    // to help ensure there isn't any bugs where the literal string is treated as if it \n    // were a true NULL value.\n    index(id, 19, \"place_t\", \"cardiff dublin\", \"company_t\", \"microsoft polecat\", \"price_ti\", \"15\");\n    index(id, 20, \"place_t\", \"dublin\", \"company_t\", \"polecat microsoft null\", \"price_ti\", \"19\",\n          // this is the only doc to have solo_* fields, therefore only 1 shard has them\n          // TODO: add enum field - blocked by SOLR-6682\n          \"solo_i\", 42, \"solo_s\", \"lonely\", \"solo_dt\", \"1976-03-06T01:23:45Z\");\n    index(id, 21, \"place_t\", \"london la dublin\", \"company_t\",\n        \"microsoft fujitsu null polecat\", \"price_ti\", \"29\");\n    index(id, 22, \"place_t\", \"krakow london cardiff\", \"company_t\",\n        \"polecat null bbc\", \"price_ti\", \"39\");\n    index(id, 23, \"place_t\", \"london\", \"company_t\", \"\", \"price_ti\", \"29\");\n    index(id, 24, \"place_t\", \"la\", \"company_t\", \"\");\n    index(id, 25, \"company_t\", \"microsoft polecat null fujitsu null bbc\", \"price_ti\", \"59\");\n    index(id, 26, \"place_t\", \"krakow\", \"company_t\", \"null\");\n    index(id, 27, \"place_t\", \"krakow cardiff dublin london la\", \n          \"company_t\", \"null microsoft polecat bbc fujitsu\");\n    index(id, 28, \"place_t\", \"cork\", \"company_t\", \"fujitsu rte\");\n    commit();\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);    \n    \n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n    setDistributedParams(params);\n    params.add(\"q\", \"*:*\");\n    params.add(\"facet\", \"true\");\n    params.add(\"facet.pivot\", \"place_t,company_t\");\n   \n    \n    QueryResponse rsp = queryServer(params);\n    \n    List<PivotField> expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    List<PivotField> expectedCardiffPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"null\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    List<PivotField> expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 1, null));\n    List<PivotField> expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    List<PivotField> expectedLAPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2,null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2,null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"null\", 2, null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 1, null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 2,null));\n    List<PivotField> expectedKrakowPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",2, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 1, null));\n    List<PivotField> expectedCorkPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"rte\", 1, null));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4, expectedDublinPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"cardiff\", 3,  expectedCardiffPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"london\", 4, expectedLondonPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"la\", 3, expectedLAPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"krakow\", 3, expectedKrakowPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"cork\", 1, expectedCorkPivots));\n    \n    \n    List<PivotField> placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    // Useful to check for errors, orders lists and does toString() equality\n    // check\n    testOrderedPivotsStringEquality(expectedPlacePivots, placePivots);\n    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    // Test sorting by count\n    \n    params.set(FacetParams.FACET_SORT, FacetParams.FACET_SORT_COUNT);\n    \n    rsp = queryServer(params);\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    testCountSorting(placePivots);\n    \n    // Test limit\n    \n    params.set(FacetParams.FACET_LIMIT, 2);\n    \n    rsp = queryServer(params);\n    \n    expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",\n        4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",\n        4, null));\n    expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,\n        null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3,\n        null));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4,\n        expectedDublinPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"london\", 4,\n        expectedLondonPivots));\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    // Test individual facet.limit values\n    params.remove(FacetParams.FACET_LIMIT);\n    \n    params.set(\"f.place_t.\" + FacetParams.FACET_LIMIT, 1);\n    params.set(\"f.company_t.\" + FacetParams.FACET_LIMIT, 4);\n    \n    rsp = queryServer(params);\n    \n    expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    \n    expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",4, null));    \n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"null\",3, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\",2, null));\n    \n    expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    \n    expectedCardiffPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    \n    expectedKrakowPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    \n    expectedLAPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    \n    expectedCorkPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    \n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4, expectedDublinPivots));\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    params.remove(\"f.company_t.\" + FacetParams.FACET_LIMIT);\n    params.remove(\"f.place_t.\" + FacetParams.FACET_LIMIT);\n    params.set(FacetParams.FACET_LIMIT, 2);\n    \n    // Test facet.missing=true with diff sorts\n\n    index(\"id\",777); // NOTE: id=25 has no place as well\n    commit();\n\n    SolrParams missingA = params( \"q\", \"*:*\",\n                                  \"rows\", \"0\",\n                                  \"facet\",\"true\",\n                                  \"facet.pivot\",\"place_t,company_t\",\n                                  // default facet.sort\n                                  FacetParams.FACET_MISSING, \"true\" );\n    SolrParams missingB = SolrParams.wrapDefaults(missingA, \n                                                  params(FacetParams.FACET_LIMIT, \"4\",\n                                                         \"facet.sort\", \"index\"));\n    for (SolrParams p : new SolrParams[] { missingA, missingB }) {\n      // in either case, the last pivot option should be the same\n      rsp = query( p );\n      placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n      assertTrue(\"not enough values for pivot: \" + p + \" => \" + placePivots, \n                 1 < placePivots.size());\n      PivotField missing = placePivots.get(placePivots.size()-1);\n      assertNull(\"not the missing place value: \" + p, missing.getValue());\n      assertEquals(\"wrong missing place count: \" + p, 2, missing.getCount());\n      assertTrue(\"not enough sub-pivots for missing place: \"+ p +\" => \" + missing.getPivot(),\n                 1 < missing.getPivot().size());\n      missing = missing.getPivot().get(missing.getPivot().size()-1);\n      assertNull(\"not the missing company value: \" + p, missing.getValue());\n      assertEquals(\"wrong missing company count: \" + p, 1, missing.getCount());\n      assertNull(\"company shouldn't have sub-pivots: \" + p, missing.getPivot());\n    }\n\n    // sort=index + mincount + limit\n    for (SolrParams variableParams : new SolrParams[] { \n        // we should get the same results regardless of overrequest\n        params(\"facet.overrequest.count\",\"0\",\n               \"facet.overrequest.ratio\",\"0\"),\n        params()                                  }) {\n\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.pivot\",\"company_t\",\n                                                      \"facet.sort\", \"index\",\n                                                      \"facet.pivot.mincount\", \"4\",\n                                                      \"facet.limit\", \"4\"),\n                                              variableParams );\n\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(4, pivots.size());\n        assertEquals(\"fujitsu\", pivots.get(0).getValue());\n        assertEquals(4, pivots.get(0).getCount());\n        assertEquals(\"microsoft\", pivots.get(1).getValue());\n        assertEquals(5, pivots.get(1).getCount());\n        assertEquals(\"null\", pivots.get(2).getValue());\n        assertEquals(6, pivots.get(2).getCount());\n        assertEquals(\"polecat\", pivots.get(3).getValue());\n        assertEquals(6, pivots.get(3).getCount());\n        \n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // sort=index + mincount + limit + offset\n    for (SolrParams variableParams : new SolrParams[] { \n        // we should get the same results regardless of overrequest\n        params(\"facet.overrequest.count\",\"0\",\n               \"facet.overrequest.ratio\",\"0\"),\n        params()                                  }) {\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.pivot\",\"company_t\",\n                                                      \"facet.sort\", \"index\",\n                                                      \"facet.pivot.mincount\", \"4\",\n                                                      \"facet.offset\", \"1\",\n                                                      \"facet.limit\", \"4\"),\n                                              variableParams );\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(3, pivots.size()); // asked for 4, but not enough meet the mincount\n        assertEquals(\"microsoft\", pivots.get(0).getValue());\n        assertEquals(5, pivots.get(0).getCount());\n        assertEquals(\"null\", pivots.get(1).getValue());\n        assertEquals(6, pivots.get(1).getCount());\n        assertEquals(\"polecat\", pivots.get(2).getValue());\n        assertEquals(6, pivots.get(2).getCount());\n\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n\n    }\n      \n    // sort=index + mincount + limit + offset (more permutations)\n    for (SolrParams variableParams : new SolrParams[] { \n        // all of these combinations should result in the same first value\n        params(\"facet.pivot.mincount\", \"4\",\n               \"facet.offset\", \"2\"),\n        params(\"facet.pivot.mincount\", \"5\",\n               \"facet.offset\", \"1\"),\n        params(\"facet.pivot.mincount\", \"6\",\n               \"facet.offset\", \"0\" )                  }) {\n      \n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.limit\",\"1\",\n                                                      \"facet.sort\",\"index\",\n                                                      \"facet.overrequest.ratio\",\"0\",\n                                                      \"facet.pivot\", \"company_t\"),\n                                              variableParams );\n\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(1, pivots.size());\n        assertEquals(pivots.toString(), \"null\", pivots.get(0).getValue());\n        assertEquals(pivots.toString(), 6, pivots.get(0).getCount());\n\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    doTestDeepPivotStats();\n\n    doTestPivotStatsFromOneShard();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    \n    del(\"*:*\");\n\n    // NOTE: we use the literal (4 character) string \"null\" as a company name\n    // to help ensure there isn't any bugs where the literal string is treated as if it \n    // were a true NULL value.\n    index(id, 19, \"place_t\", \"cardiff dublin\", \"company_t\", \"microsoft polecat\", \"price_ti\", \"15\");\n    index(id, 20, \"place_t\", \"dublin\", \"company_t\", \"polecat microsoft null\", \"price_ti\", \"19\",\n          // this is the only doc to have solo_* fields, therefore only 1 shard has them\n          // TODO: add enum field - blocked by SOLR-6682\n          \"solo_i\", 42, \"solo_s\", \"lonely\", \"solo_dt\", \"1976-03-06T01:23:45Z\");\n    index(id, 21, \"place_t\", \"london la dublin\", \"company_t\",\n        \"microsoft fujitsu null polecat\", \"price_ti\", \"29\");\n    index(id, 22, \"place_t\", \"krakow london cardiff\", \"company_t\",\n        \"polecat null bbc\", \"price_ti\", \"39\");\n    index(id, 23, \"place_t\", \"london\", \"company_t\", \"\", \"price_ti\", \"29\");\n    index(id, 24, \"place_t\", \"la\", \"company_t\", \"\");\n    index(id, 25, \"company_t\", \"microsoft polecat null fujitsu null bbc\", \"price_ti\", \"59\");\n    index(id, 26, \"place_t\", \"krakow\", \"company_t\", \"null\");\n    index(id, 27, \"place_t\", \"krakow cardiff dublin london la\", \n          \"company_t\", \"null microsoft polecat bbc fujitsu\");\n    index(id, 28, \"place_t\", \"cork\", \"company_t\", \"fujitsu rte\");\n    commit();\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);    \n    \n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n    setDistributedParams(params);\n    params.add(\"q\", \"*:*\");\n    params.add(\"facet\", \"true\");\n    params.add(\"facet.pivot\", \"place_t,company_t\");\n   \n    \n    QueryResponse rsp = queryServer(params);\n    \n    List<PivotField> expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    List<PivotField> expectedCardiffPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"null\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    List<PivotField> expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 1, null));\n    List<PivotField> expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    List<PivotField> expectedLAPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2,null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2,null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"null\", 2, null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 1, null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 2,null));\n    List<PivotField> expectedKrakowPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",2, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 1, null));\n    List<PivotField> expectedCorkPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"rte\", 1, null));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4, expectedDublinPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"cardiff\", 3,  expectedCardiffPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"london\", 4, expectedLondonPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"la\", 3, expectedLAPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"krakow\", 3, expectedKrakowPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"cork\", 1, expectedCorkPivots));\n    \n    \n    List<PivotField> placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    // Useful to check for errors, orders lists and does toString() equality\n    // check\n    testOrderedPivotsStringEquality(expectedPlacePivots, placePivots);\n    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    // Test sorting by count\n    \n    params.set(FacetParams.FACET_SORT, FacetParams.FACET_SORT_COUNT);\n    \n    rsp = queryServer(params);\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    testCountSorting(placePivots);\n    \n    // Test limit\n    \n    params.set(FacetParams.FACET_LIMIT, 2);\n    \n    rsp = queryServer(params);\n    \n    expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",\n        4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",\n        4, null));\n    expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,\n        null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3,\n        null));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4,\n        expectedDublinPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"london\", 4,\n        expectedLondonPivots));\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    // Test individual facet.limit values\n    params.remove(FacetParams.FACET_LIMIT);\n    \n    params.set(\"f.place_t.\" + FacetParams.FACET_LIMIT, 1);\n    params.set(\"f.company_t.\" + FacetParams.FACET_LIMIT, 4);\n    \n    rsp = queryServer(params);\n    \n    expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    \n    expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",4, null));    \n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"null\",3, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\",2, null));\n    \n    expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    \n    expectedCardiffPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    \n    expectedKrakowPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    \n    expectedLAPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    \n    expectedCorkPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    \n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4, expectedDublinPivots));\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    params.remove(\"f.company_t.\" + FacetParams.FACET_LIMIT);\n    params.remove(\"f.place_t.\" + FacetParams.FACET_LIMIT);\n    params.set(FacetParams.FACET_LIMIT, 2);\n    \n    // Test facet.missing=true with diff sorts\n\n    index(\"id\",777); // NOTE: id=25 has no place as well\n    commit();\n\n    SolrParams missingA = params( \"q\", \"*:*\",\n                                  \"rows\", \"0\",\n                                  \"facet\",\"true\",\n                                  \"facet.pivot\",\"place_t,company_t\",\n                                  // default facet.sort\n                                  FacetParams.FACET_MISSING, \"true\" );\n    SolrParams missingB = SolrParams.wrapDefaults(missingA, \n                                                  params(FacetParams.FACET_LIMIT, \"4\",\n                                                         \"facet.sort\", \"index\"));\n    for (SolrParams p : new SolrParams[] { missingA, missingB }) {\n      // in either case, the last pivot option should be the same\n      rsp = query( p );\n      placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n      assertTrue(\"not enough values for pivot: \" + p + \" => \" + placePivots, \n                 1 < placePivots.size());\n      PivotField missing = placePivots.get(placePivots.size()-1);\n      assertNull(\"not the missing place value: \" + p, missing.getValue());\n      assertEquals(\"wrong missing place count: \" + p, 2, missing.getCount());\n      assertTrue(\"not enough sub-pivots for missing place: \"+ p +\" => \" + missing.getPivot(),\n                 1 < missing.getPivot().size());\n      missing = missing.getPivot().get(missing.getPivot().size()-1);\n      assertNull(\"not the missing company value: \" + p, missing.getValue());\n      assertEquals(\"wrong missing company count: \" + p, 1, missing.getCount());\n      assertNull(\"company shouldn't have sub-pivots: \" + p, missing.getPivot());\n    }\n\n    // sort=index + mincount + limit\n    for (SolrParams variableParams : new SolrParams[] { \n        // we should get the same results regardless of overrequest\n        params(\"facet.overrequest.count\",\"0\",\n               \"facet.overrequest.ratio\",\"0\"),\n        params()                                  }) {\n\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.pivot\",\"company_t\",\n                                                      \"facet.sort\", \"index\",\n                                                      \"facet.pivot.mincount\", \"4\",\n                                                      \"facet.limit\", \"4\"),\n                                              variableParams );\n\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(4, pivots.size());\n        assertEquals(\"fujitsu\", pivots.get(0).getValue());\n        assertEquals(4, pivots.get(0).getCount());\n        assertEquals(\"microsoft\", pivots.get(1).getValue());\n        assertEquals(5, pivots.get(1).getCount());\n        assertEquals(\"null\", pivots.get(2).getValue());\n        assertEquals(6, pivots.get(2).getCount());\n        assertEquals(\"polecat\", pivots.get(3).getValue());\n        assertEquals(6, pivots.get(3).getCount());\n        \n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // sort=index + mincount + limit + offset\n    for (SolrParams variableParams : new SolrParams[] { \n        // we should get the same results regardless of overrequest\n        params(\"facet.overrequest.count\",\"0\",\n               \"facet.overrequest.ratio\",\"0\"),\n        params()                                  }) {\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.pivot\",\"company_t\",\n                                                      \"facet.sort\", \"index\",\n                                                      \"facet.pivot.mincount\", \"4\",\n                                                      \"facet.offset\", \"1\",\n                                                      \"facet.limit\", \"4\"),\n                                              variableParams );\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(3, pivots.size()); // asked for 4, but not enough meet the mincount\n        assertEquals(\"microsoft\", pivots.get(0).getValue());\n        assertEquals(5, pivots.get(0).getCount());\n        assertEquals(\"null\", pivots.get(1).getValue());\n        assertEquals(6, pivots.get(1).getCount());\n        assertEquals(\"polecat\", pivots.get(2).getValue());\n        assertEquals(6, pivots.get(2).getCount());\n\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n\n    }\n      \n    // sort=index + mincount + limit + offset (more permutations)\n    for (SolrParams variableParams : new SolrParams[] { \n        // all of these combinations should result in the same first value\n        params(\"facet.pivot.mincount\", \"4\",\n               \"facet.offset\", \"2\"),\n        params(\"facet.pivot.mincount\", \"5\",\n               \"facet.offset\", \"1\"),\n        params(\"facet.pivot.mincount\", \"6\",\n               \"facet.offset\", \"0\" )                  }) {\n      \n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.limit\",\"1\",\n                                                      \"facet.sort\",\"index\",\n                                                      \"facet.overrequest.ratio\",\"0\",\n                                                      \"facet.pivot\", \"company_t\"),\n                                              variableParams );\n\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(1, pivots.size());\n        assertEquals(pivots.toString(), \"null\", pivots.get(0).getValue());\n        assertEquals(pivots.toString(), 6, pivots.get(0).getCount());\n\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    doTestDeepPivotStats(false); // all price stats\n    doTestDeepPivotStats(true); // just the mean price stat\n\n    doTestPivotStatsFromOneShard();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    \n    del(\"*:*\");\n\n    // NOTE: we use the literal (4 character) string \"null\" as a company name\n    // to help ensure there isn't any bugs where the literal string is treated as if it \n    // were a true NULL value.\n    index(id, 19, \"place_t\", \"cardiff dublin\", \"company_t\", \"microsoft polecat\", \"price_ti\", \"15\");\n    index(id, 20, \"place_t\", \"dublin\", \"company_t\", \"polecat microsoft null\", \"price_ti\", \"19\",\n          // this is the only doc to have solo_* fields, therefore only 1 shard has them\n          // TODO: add enum field - blocked by SOLR-6682\n          \"solo_i\", 42, \"solo_s\", \"lonely\", \"solo_dt\", \"1976-03-06T01:23:45Z\");\n    index(id, 21, \"place_t\", \"london la dublin\", \"company_t\",\n        \"microsoft fujitsu null polecat\", \"price_ti\", \"29\");\n    index(id, 22, \"place_t\", \"krakow london cardiff\", \"company_t\",\n        \"polecat null bbc\", \"price_ti\", \"39\");\n    index(id, 23, \"place_t\", \"london\", \"company_t\", \"\", \"price_ti\", \"29\");\n    index(id, 24, \"place_t\", \"la\", \"company_t\", \"\");\n    index(id, 25, \"company_t\", \"microsoft polecat null fujitsu null bbc\", \"price_ti\", \"59\");\n    index(id, 26, \"place_t\", \"krakow\", \"company_t\", \"null\");\n    index(id, 27, \"place_t\", \"krakow cardiff dublin london la\", \n          \"company_t\", \"null microsoft polecat bbc fujitsu\");\n    index(id, 28, \"place_t\", \"cork\", \"company_t\", \"fujitsu rte\");\n    commit();\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);    \n    \n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n    setDistributedParams(params);\n    params.add(\"q\", \"*:*\");\n    params.add(\"facet\", \"true\");\n    params.add(\"facet.pivot\", \"place_t,company_t\");\n   \n    \n    QueryResponse rsp = queryServer(params);\n    \n    List<PivotField> expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    List<PivotField> expectedCardiffPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"null\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    List<PivotField> expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 1, null));\n    List<PivotField> expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    List<PivotField> expectedLAPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2,null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2,null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"null\", 2, null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 1, null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 2,null));\n    List<PivotField> expectedKrakowPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",2, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 1, null));\n    List<PivotField> expectedCorkPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"rte\", 1, null));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4, expectedDublinPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"cardiff\", 3,  expectedCardiffPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"london\", 4, expectedLondonPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"la\", 3, expectedLAPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"krakow\", 3, expectedKrakowPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"cork\", 1, expectedCorkPivots));\n    \n    \n    List<PivotField> placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    // Useful to check for errors, orders lists and does toString() equality\n    // check\n    testOrderedPivotsStringEquality(expectedPlacePivots, placePivots);\n    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    // Test sorting by count\n    \n    params.set(FacetParams.FACET_SORT, FacetParams.FACET_SORT_COUNT);\n    \n    rsp = queryServer(params);\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    testCountSorting(placePivots);\n    \n    // Test limit\n    \n    params.set(FacetParams.FACET_LIMIT, 2);\n    \n    rsp = queryServer(params);\n    \n    expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",\n        4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",\n        4, null));\n    expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,\n        null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3,\n        null));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4,\n        expectedDublinPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"london\", 4,\n        expectedLondonPivots));\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    // Test individual facet.limit values\n    params.remove(FacetParams.FACET_LIMIT);\n    \n    params.set(\"f.place_t.\" + FacetParams.FACET_LIMIT, 1);\n    params.set(\"f.company_t.\" + FacetParams.FACET_LIMIT, 4);\n    \n    rsp = queryServer(params);\n    \n    expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    \n    expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",4, null));    \n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"null\",3, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\",2, null));\n    \n    expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    \n    expectedCardiffPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    \n    expectedKrakowPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    \n    expectedLAPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    \n    expectedCorkPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    \n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4, expectedDublinPivots));\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    params.remove(\"f.company_t.\" + FacetParams.FACET_LIMIT);\n    params.remove(\"f.place_t.\" + FacetParams.FACET_LIMIT);\n    params.set(FacetParams.FACET_LIMIT, 2);\n    \n    // Test facet.missing=true with diff sorts\n\n    index(\"id\",777); // NOTE: id=25 has no place as well\n    commit();\n\n    SolrParams missingA = params( \"q\", \"*:*\",\n                                  \"rows\", \"0\",\n                                  \"facet\",\"true\",\n                                  \"facet.pivot\",\"place_t,company_t\",\n                                  // default facet.sort\n                                  FacetParams.FACET_MISSING, \"true\" );\n    SolrParams missingB = SolrParams.wrapDefaults(missingA, \n                                                  params(FacetParams.FACET_LIMIT, \"4\",\n                                                         \"facet.sort\", \"index\"));\n    for (SolrParams p : new SolrParams[] { missingA, missingB }) {\n      // in either case, the last pivot option should be the same\n      rsp = query( p );\n      placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n      assertTrue(\"not enough values for pivot: \" + p + \" => \" + placePivots, \n                 1 < placePivots.size());\n      PivotField missing = placePivots.get(placePivots.size()-1);\n      assertNull(\"not the missing place value: \" + p, missing.getValue());\n      assertEquals(\"wrong missing place count: \" + p, 2, missing.getCount());\n      assertTrue(\"not enough sub-pivots for missing place: \"+ p +\" => \" + missing.getPivot(),\n                 1 < missing.getPivot().size());\n      missing = missing.getPivot().get(missing.getPivot().size()-1);\n      assertNull(\"not the missing company value: \" + p, missing.getValue());\n      assertEquals(\"wrong missing company count: \" + p, 1, missing.getCount());\n      assertNull(\"company shouldn't have sub-pivots: \" + p, missing.getPivot());\n    }\n\n    // sort=index + mincount + limit\n    for (SolrParams variableParams : new SolrParams[] { \n        // we should get the same results regardless of overrequest\n        params(\"facet.overrequest.count\",\"0\",\n               \"facet.overrequest.ratio\",\"0\"),\n        params()                                  }) {\n\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.pivot\",\"company_t\",\n                                                      \"facet.sort\", \"index\",\n                                                      \"facet.pivot.mincount\", \"4\",\n                                                      \"facet.limit\", \"4\"),\n                                              variableParams );\n\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(4, pivots.size());\n        assertEquals(\"fujitsu\", pivots.get(0).getValue());\n        assertEquals(4, pivots.get(0).getCount());\n        assertEquals(\"microsoft\", pivots.get(1).getValue());\n        assertEquals(5, pivots.get(1).getCount());\n        assertEquals(\"null\", pivots.get(2).getValue());\n        assertEquals(6, pivots.get(2).getCount());\n        assertEquals(\"polecat\", pivots.get(3).getValue());\n        assertEquals(6, pivots.get(3).getCount());\n        \n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // sort=index + mincount + limit + offset\n    for (SolrParams variableParams : new SolrParams[] { \n        // we should get the same results regardless of overrequest\n        params(\"facet.overrequest.count\",\"0\",\n               \"facet.overrequest.ratio\",\"0\"),\n        params()                                  }) {\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.pivot\",\"company_t\",\n                                                      \"facet.sort\", \"index\",\n                                                      \"facet.pivot.mincount\", \"4\",\n                                                      \"facet.offset\", \"1\",\n                                                      \"facet.limit\", \"4\"),\n                                              variableParams );\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(3, pivots.size()); // asked for 4, but not enough meet the mincount\n        assertEquals(\"microsoft\", pivots.get(0).getValue());\n        assertEquals(5, pivots.get(0).getCount());\n        assertEquals(\"null\", pivots.get(1).getValue());\n        assertEquals(6, pivots.get(1).getCount());\n        assertEquals(\"polecat\", pivots.get(2).getValue());\n        assertEquals(6, pivots.get(2).getCount());\n\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n\n    }\n      \n    // sort=index + mincount + limit + offset (more permutations)\n    for (SolrParams variableParams : new SolrParams[] { \n        // all of these combinations should result in the same first value\n        params(\"facet.pivot.mincount\", \"4\",\n               \"facet.offset\", \"2\"),\n        params(\"facet.pivot.mincount\", \"5\",\n               \"facet.offset\", \"1\"),\n        params(\"facet.pivot.mincount\", \"6\",\n               \"facet.offset\", \"0\" )                  }) {\n      \n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.limit\",\"1\",\n                                                      \"facet.sort\",\"index\",\n                                                      \"facet.overrequest.ratio\",\"0\",\n                                                      \"facet.pivot\", \"company_t\"),\n                                              variableParams );\n\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(1, pivots.size());\n        assertEquals(pivots.toString(), \"null\", pivots.get(0).getValue());\n        assertEquals(pivots.toString(), 6, pivots.get(0).getCount());\n\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    doTestDeepPivotStats();\n\n    doTestPivotStatsFromOneShard();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22d0a81a05eba47d5e18976f17d88306b218cc22","date":1436341569,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    \n    del(\"*:*\");\n\n    // NOTE: we use the literal (4 character) string \"null\" as a company name\n    // to help ensure there isn't any bugs where the literal string is treated as if it \n    // were a true NULL value.\n    index(id, 19, \"place_t\", \"cardiff dublin\", \"company_t\", \"microsoft polecat\", \"price_ti\", \"15\");\n    index(id, 20, \"place_t\", \"dublin\", \"company_t\", \"polecat microsoft null\", \"price_ti\", \"19\",\n          // this is the only doc to have solo_* fields, therefore only 1 shard has them\n          // TODO: add enum field - blocked by SOLR-6682\n          \"solo_i\", 42, \"solo_s\", \"lonely\", \"solo_dt\", \"1976-03-06T01:23:45Z\");\n    index(id, 21, \"place_t\", \"london la dublin\", \"company_t\",\n        \"microsoft fujitsu null polecat\", \"price_ti\", \"29\");\n    index(id, 22, \"place_t\", \"krakow london cardiff\", \"company_t\",\n        \"polecat null bbc\", \"price_ti\", \"39\");\n    index(id, 23, \"place_t\", \"london\", \"company_t\", \"\", \"price_ti\", \"29\");\n    index(id, 24, \"place_t\", \"la\", \"company_t\", \"\");\n    index(id, 25, \"company_t\", \"microsoft polecat null fujitsu null bbc\", \"price_ti\", \"59\");\n    index(id, 26, \"place_t\", \"krakow\", \"company_t\", \"null\");\n    index(id, 27, \"place_t\", \"krakow cardiff dublin london la\", \n          \"company_t\", \"null microsoft polecat bbc fujitsu\");\n    index(id, 28, \"place_t\", \"cork\", \"company_t\", \"fujitsu rte\");\n    commit();\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    \n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n    setDistributedParams(params);\n    params.add(\"q\", \"*:*\");\n    params.add(\"facet\", \"true\");\n    params.add(\"facet.pivot\", \"place_t,company_t\");\n   \n    \n    QueryResponse rsp = queryServer(params);\n    \n    List<PivotField> expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    List<PivotField> expectedCardiffPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"null\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    List<PivotField> expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 1, null));\n    List<PivotField> expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    List<PivotField> expectedLAPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2,null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2,null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"null\", 2, null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 1, null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 2,null));\n    List<PivotField> expectedKrakowPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",2, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 1, null));\n    List<PivotField> expectedCorkPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"rte\", 1, null));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4, expectedDublinPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"cardiff\", 3,  expectedCardiffPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"london\", 4, expectedLondonPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"la\", 3, expectedLAPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"krakow\", 3, expectedKrakowPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"cork\", 1, expectedCorkPivots));\n    \n    \n    List<PivotField> placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    // Useful to check for errors, orders lists and does toString() equality\n    // check\n    testOrderedPivotsStringEquality(expectedPlacePivots, placePivots);\n    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    // Test sorting by count\n    \n    params.set(FacetParams.FACET_SORT, FacetParams.FACET_SORT_COUNT);\n    \n    rsp = queryServer(params);\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    testCountSorting(placePivots);\n    \n    // Test limit\n    \n    params.set(FacetParams.FACET_LIMIT, 2);\n    \n    rsp = queryServer(params);\n    \n    expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",\n        4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",\n        4, null));\n    expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,\n        null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3,\n        null));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4,\n        expectedDublinPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"london\", 4,\n        expectedLondonPivots));\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    // Test individual facet.limit values\n    params.remove(FacetParams.FACET_LIMIT);\n    \n    params.set(\"f.place_t.\" + FacetParams.FACET_LIMIT, 1);\n    params.set(\"f.company_t.\" + FacetParams.FACET_LIMIT, 4);\n    \n    rsp = queryServer(params);\n    \n    expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    \n    expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",4, null));    \n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"null\",3, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\",2, null));\n    \n    expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    \n    expectedCardiffPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    \n    expectedKrakowPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    \n    expectedLAPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    \n    expectedCorkPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    \n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4, expectedDublinPivots));\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    params.remove(\"f.company_t.\" + FacetParams.FACET_LIMIT);\n    params.remove(\"f.place_t.\" + FacetParams.FACET_LIMIT);\n    params.set(FacetParams.FACET_LIMIT, 2);\n    \n    // Test facet.missing=true with diff sorts\n\n    index(\"id\",777); // NOTE: id=25 has no place as well\n    commit();\n\n    SolrParams missingA = params( \"q\", \"*:*\",\n                                  \"rows\", \"0\",\n                                  \"facet\",\"true\",\n                                  \"facet.pivot\",\"place_t,company_t\",\n                                  // default facet.sort\n                                  FacetParams.FACET_MISSING, \"true\" );\n    SolrParams missingB = SolrParams.wrapDefaults(missingA, \n                                                  params(FacetParams.FACET_LIMIT, \"4\",\n                                                         \"facet.sort\", \"index\"));\n    for (SolrParams p : new SolrParams[] { missingA, missingB }) {\n      // in either case, the last pivot option should be the same\n      rsp = query( p );\n      placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n      assertTrue(\"not enough values for pivot: \" + p + \" => \" + placePivots, \n                 1 < placePivots.size());\n      PivotField missing = placePivots.get(placePivots.size()-1);\n      assertNull(\"not the missing place value: \" + p, missing.getValue());\n      assertEquals(\"wrong missing place count: \" + p, 2, missing.getCount());\n      assertTrue(\"not enough sub-pivots for missing place: \"+ p +\" => \" + missing.getPivot(),\n                 1 < missing.getPivot().size());\n      missing = missing.getPivot().get(missing.getPivot().size()-1);\n      assertNull(\"not the missing company value: \" + p, missing.getValue());\n      assertEquals(\"wrong missing company count: \" + p, 1, missing.getCount());\n      assertNull(\"company shouldn't have sub-pivots: \" + p, missing.getPivot());\n    }\n\n    // sort=index + mincount + limit\n    for (SolrParams variableParams : new SolrParams[] { \n        // we should get the same results regardless of overrequest\n        params(\"facet.overrequest.count\",\"0\",\n               \"facet.overrequest.ratio\",\"0\"),\n        params()                                  }) {\n\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.pivot\",\"company_t\",\n                                                      \"facet.sort\", \"index\",\n                                                      \"facet.pivot.mincount\", \"4\",\n                                                      \"facet.limit\", \"4\"),\n                                              variableParams );\n\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(4, pivots.size());\n        assertEquals(\"fujitsu\", pivots.get(0).getValue());\n        assertEquals(4, pivots.get(0).getCount());\n        assertEquals(\"microsoft\", pivots.get(1).getValue());\n        assertEquals(5, pivots.get(1).getCount());\n        assertEquals(\"null\", pivots.get(2).getValue());\n        assertEquals(6, pivots.get(2).getCount());\n        assertEquals(\"polecat\", pivots.get(3).getValue());\n        assertEquals(6, pivots.get(3).getCount());\n        \n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // sort=index + mincount + limit + offset\n    for (SolrParams variableParams : new SolrParams[] { \n        // we should get the same results regardless of overrequest\n        params(\"facet.overrequest.count\",\"0\",\n               \"facet.overrequest.ratio\",\"0\"),\n        params()                                  }) {\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.pivot\",\"company_t\",\n                                                      \"facet.sort\", \"index\",\n                                                      \"facet.pivot.mincount\", \"4\",\n                                                      \"facet.offset\", \"1\",\n                                                      \"facet.limit\", \"4\"),\n                                              variableParams );\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(3, pivots.size()); // asked for 4, but not enough meet the mincount\n        assertEquals(\"microsoft\", pivots.get(0).getValue());\n        assertEquals(5, pivots.get(0).getCount());\n        assertEquals(\"null\", pivots.get(1).getValue());\n        assertEquals(6, pivots.get(1).getCount());\n        assertEquals(\"polecat\", pivots.get(2).getValue());\n        assertEquals(6, pivots.get(2).getCount());\n\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n\n    }\n      \n    // sort=index + mincount + limit + offset (more permutations)\n    for (SolrParams variableParams : new SolrParams[] { \n        // all of these combinations should result in the same first value\n        params(\"facet.pivot.mincount\", \"4\",\n               \"facet.offset\", \"2\"),\n        params(\"facet.pivot.mincount\", \"5\",\n               \"facet.offset\", \"1\"),\n        params(\"facet.pivot.mincount\", \"6\",\n               \"facet.offset\", \"0\" )                  }) {\n      \n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.limit\",\"1\",\n                                                      \"facet.sort\",\"index\",\n                                                      \"facet.overrequest.ratio\",\"0\",\n                                                      \"facet.pivot\", \"company_t\"),\n                                              variableParams );\n\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(1, pivots.size());\n        assertEquals(pivots.toString(), \"null\", pivots.get(0).getValue());\n        assertEquals(pivots.toString(), 6, pivots.get(0).getCount());\n\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    doTestDeepPivotStats(false); // all price stats\n    doTestDeepPivotStats(true); // just the mean price stat\n\n    doTestPivotStatsFromOneShard();\n\n    testFacetPivotRange();\n\n    testFacetPivotQuery();\n\n    testNegativeFacetQuery();\n\n    testNegativeRangeQuery();\n\n    testPivotFacetRangeAndQuery();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    \n    del(\"*:*\");\n\n    // NOTE: we use the literal (4 character) string \"null\" as a company name\n    // to help ensure there isn't any bugs where the literal string is treated as if it \n    // were a true NULL value.\n    index(id, 19, \"place_t\", \"cardiff dublin\", \"company_t\", \"microsoft polecat\", \"price_ti\", \"15\");\n    index(id, 20, \"place_t\", \"dublin\", \"company_t\", \"polecat microsoft null\", \"price_ti\", \"19\",\n          // this is the only doc to have solo_* fields, therefore only 1 shard has them\n          // TODO: add enum field - blocked by SOLR-6682\n          \"solo_i\", 42, \"solo_s\", \"lonely\", \"solo_dt\", \"1976-03-06T01:23:45Z\");\n    index(id, 21, \"place_t\", \"london la dublin\", \"company_t\",\n        \"microsoft fujitsu null polecat\", \"price_ti\", \"29\");\n    index(id, 22, \"place_t\", \"krakow london cardiff\", \"company_t\",\n        \"polecat null bbc\", \"price_ti\", \"39\");\n    index(id, 23, \"place_t\", \"london\", \"company_t\", \"\", \"price_ti\", \"29\");\n    index(id, 24, \"place_t\", \"la\", \"company_t\", \"\");\n    index(id, 25, \"company_t\", \"microsoft polecat null fujitsu null bbc\", \"price_ti\", \"59\");\n    index(id, 26, \"place_t\", \"krakow\", \"company_t\", \"null\");\n    index(id, 27, \"place_t\", \"krakow cardiff dublin london la\", \n          \"company_t\", \"null microsoft polecat bbc fujitsu\");\n    index(id, 28, \"place_t\", \"cork\", \"company_t\", \"fujitsu rte\");\n    commit();\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);    \n    \n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n    setDistributedParams(params);\n    params.add(\"q\", \"*:*\");\n    params.add(\"facet\", \"true\");\n    params.add(\"facet.pivot\", \"place_t,company_t\");\n   \n    \n    QueryResponse rsp = queryServer(params);\n    \n    List<PivotField> expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    List<PivotField> expectedCardiffPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"null\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    List<PivotField> expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 1, null));\n    List<PivotField> expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    List<PivotField> expectedLAPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2,null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2,null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"null\", 2, null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 1, null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 2,null));\n    List<PivotField> expectedKrakowPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",2, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 1, null));\n    List<PivotField> expectedCorkPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"rte\", 1, null));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4, expectedDublinPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"cardiff\", 3,  expectedCardiffPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"london\", 4, expectedLondonPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"la\", 3, expectedLAPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"krakow\", 3, expectedKrakowPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"cork\", 1, expectedCorkPivots));\n    \n    \n    List<PivotField> placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    // Useful to check for errors, orders lists and does toString() equality\n    // check\n    testOrderedPivotsStringEquality(expectedPlacePivots, placePivots);\n    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    // Test sorting by count\n    \n    params.set(FacetParams.FACET_SORT, FacetParams.FACET_SORT_COUNT);\n    \n    rsp = queryServer(params);\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    testCountSorting(placePivots);\n    \n    // Test limit\n    \n    params.set(FacetParams.FACET_LIMIT, 2);\n    \n    rsp = queryServer(params);\n    \n    expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",\n        4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",\n        4, null));\n    expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,\n        null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3,\n        null));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4,\n        expectedDublinPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"london\", 4,\n        expectedLondonPivots));\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    // Test individual facet.limit values\n    params.remove(FacetParams.FACET_LIMIT);\n    \n    params.set(\"f.place_t.\" + FacetParams.FACET_LIMIT, 1);\n    params.set(\"f.company_t.\" + FacetParams.FACET_LIMIT, 4);\n    \n    rsp = queryServer(params);\n    \n    expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    \n    expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",4, null));    \n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"null\",3, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\",2, null));\n    \n    expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    \n    expectedCardiffPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    \n    expectedKrakowPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    \n    expectedLAPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    \n    expectedCorkPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    \n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4, expectedDublinPivots));\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    params.remove(\"f.company_t.\" + FacetParams.FACET_LIMIT);\n    params.remove(\"f.place_t.\" + FacetParams.FACET_LIMIT);\n    params.set(FacetParams.FACET_LIMIT, 2);\n    \n    // Test facet.missing=true with diff sorts\n\n    index(\"id\",777); // NOTE: id=25 has no place as well\n    commit();\n\n    SolrParams missingA = params( \"q\", \"*:*\",\n                                  \"rows\", \"0\",\n                                  \"facet\",\"true\",\n                                  \"facet.pivot\",\"place_t,company_t\",\n                                  // default facet.sort\n                                  FacetParams.FACET_MISSING, \"true\" );\n    SolrParams missingB = SolrParams.wrapDefaults(missingA, \n                                                  params(FacetParams.FACET_LIMIT, \"4\",\n                                                         \"facet.sort\", \"index\"));\n    for (SolrParams p : new SolrParams[] { missingA, missingB }) {\n      // in either case, the last pivot option should be the same\n      rsp = query( p );\n      placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n      assertTrue(\"not enough values for pivot: \" + p + \" => \" + placePivots, \n                 1 < placePivots.size());\n      PivotField missing = placePivots.get(placePivots.size()-1);\n      assertNull(\"not the missing place value: \" + p, missing.getValue());\n      assertEquals(\"wrong missing place count: \" + p, 2, missing.getCount());\n      assertTrue(\"not enough sub-pivots for missing place: \"+ p +\" => \" + missing.getPivot(),\n                 1 < missing.getPivot().size());\n      missing = missing.getPivot().get(missing.getPivot().size()-1);\n      assertNull(\"not the missing company value: \" + p, missing.getValue());\n      assertEquals(\"wrong missing company count: \" + p, 1, missing.getCount());\n      assertNull(\"company shouldn't have sub-pivots: \" + p, missing.getPivot());\n    }\n\n    // sort=index + mincount + limit\n    for (SolrParams variableParams : new SolrParams[] { \n        // we should get the same results regardless of overrequest\n        params(\"facet.overrequest.count\",\"0\",\n               \"facet.overrequest.ratio\",\"0\"),\n        params()                                  }) {\n\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.pivot\",\"company_t\",\n                                                      \"facet.sort\", \"index\",\n                                                      \"facet.pivot.mincount\", \"4\",\n                                                      \"facet.limit\", \"4\"),\n                                              variableParams );\n\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(4, pivots.size());\n        assertEquals(\"fujitsu\", pivots.get(0).getValue());\n        assertEquals(4, pivots.get(0).getCount());\n        assertEquals(\"microsoft\", pivots.get(1).getValue());\n        assertEquals(5, pivots.get(1).getCount());\n        assertEquals(\"null\", pivots.get(2).getValue());\n        assertEquals(6, pivots.get(2).getCount());\n        assertEquals(\"polecat\", pivots.get(3).getValue());\n        assertEquals(6, pivots.get(3).getCount());\n        \n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // sort=index + mincount + limit + offset\n    for (SolrParams variableParams : new SolrParams[] { \n        // we should get the same results regardless of overrequest\n        params(\"facet.overrequest.count\",\"0\",\n               \"facet.overrequest.ratio\",\"0\"),\n        params()                                  }) {\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.pivot\",\"company_t\",\n                                                      \"facet.sort\", \"index\",\n                                                      \"facet.pivot.mincount\", \"4\",\n                                                      \"facet.offset\", \"1\",\n                                                      \"facet.limit\", \"4\"),\n                                              variableParams );\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(3, pivots.size()); // asked for 4, but not enough meet the mincount\n        assertEquals(\"microsoft\", pivots.get(0).getValue());\n        assertEquals(5, pivots.get(0).getCount());\n        assertEquals(\"null\", pivots.get(1).getValue());\n        assertEquals(6, pivots.get(1).getCount());\n        assertEquals(\"polecat\", pivots.get(2).getValue());\n        assertEquals(6, pivots.get(2).getCount());\n\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n\n    }\n      \n    // sort=index + mincount + limit + offset (more permutations)\n    for (SolrParams variableParams : new SolrParams[] { \n        // all of these combinations should result in the same first value\n        params(\"facet.pivot.mincount\", \"4\",\n               \"facet.offset\", \"2\"),\n        params(\"facet.pivot.mincount\", \"5\",\n               \"facet.offset\", \"1\"),\n        params(\"facet.pivot.mincount\", \"6\",\n               \"facet.offset\", \"0\" )                  }) {\n      \n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.limit\",\"1\",\n                                                      \"facet.sort\",\"index\",\n                                                      \"facet.overrequest.ratio\",\"0\",\n                                                      \"facet.pivot\", \"company_t\"),\n                                              variableParams );\n\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(1, pivots.size());\n        assertEquals(pivots.toString(), \"null\", pivots.get(0).getValue());\n        assertEquals(pivots.toString(), 6, pivots.get(0).getCount());\n\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    doTestDeepPivotStats(false); // all price stats\n    doTestDeepPivotStats(true); // just the mean price stat\n\n    doTestPivotStatsFromOneShard();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6785b4fe22e78ff9bb8afd2d475325cfc1e006c","date":1438054340,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    \n    del(\"*:*\");\n\n    // NOTE: we use the literal (4 character) string \"null\" as a company name\n    // to help ensure there isn't any bugs where the literal string is treated as if it \n    // were a true NULL value.\n    index(id, 19, \"place_t\", \"cardiff dublin\", \"company_t\", \"microsoft polecat\", \"price_ti\", \"15\");\n    index(id, 20, \"place_t\", \"dublin\", \"company_t\", \"polecat microsoft null\", \"price_ti\", \"19\",\n          // this is the only doc to have solo_* fields, therefore only 1 shard has them\n          // TODO: add enum field - blocked by SOLR-6682\n          \"solo_i\", 42, \"solo_s\", \"lonely\", \"solo_dt\", \"1976-03-06T01:23:45Z\");\n    index(id, 21, \"place_t\", \"london la dublin\", \"company_t\",\n        \"microsoft fujitsu null polecat\", \"price_ti\", \"29\");\n    index(id, 22, \"place_t\", \"krakow london cardiff\", \"company_t\",\n        \"polecat null bbc\", \"price_ti\", \"39\");\n    index(id, 23, \"place_t\", \"london\", \"company_t\", \"\", \"price_ti\", \"29\");\n    index(id, 24, \"place_t\", \"la\", \"company_t\", \"\");\n    index(id, 25, \"company_t\", \"microsoft polecat null fujitsu null bbc\", \"price_ti\", \"59\");\n    index(id, 26, \"place_t\", \"krakow\", \"company_t\", \"null\");\n    index(id, 27, \"place_t\", \"krakow cardiff dublin london la\", \n          \"company_t\", \"null microsoft polecat bbc fujitsu\");\n    index(id, 28, \"place_t\", \"cork\", \"company_t\", \"fujitsu rte\");\n    commit();\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    \n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n    setDistributedParams(params);\n    params.add(\"q\", \"*:*\");\n    params.add(\"facet\", \"true\");\n    params.add(\"facet.pivot\", \"place_t,company_t\");\n   \n    \n    QueryResponse rsp = queryServer(params);\n    \n    List<PivotField> expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    List<PivotField> expectedCardiffPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"null\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    List<PivotField> expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 1, null));\n    List<PivotField> expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    List<PivotField> expectedLAPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2,null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2,null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"null\", 2, null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 1, null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 2,null));\n    List<PivotField> expectedKrakowPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",2, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 1, null));\n    List<PivotField> expectedCorkPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"rte\", 1, null));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4, expectedDublinPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"cardiff\", 3,  expectedCardiffPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"london\", 4, expectedLondonPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"la\", 3, expectedLAPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"krakow\", 3, expectedKrakowPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"cork\", 1, expectedCorkPivots));\n    \n    \n    List<PivotField> placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    // Useful to check for errors, orders lists and does toString() equality\n    // check\n    testOrderedPivotsStringEquality(expectedPlacePivots, placePivots);\n    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    // Test sorting by count\n    \n    params.set(FacetParams.FACET_SORT, FacetParams.FACET_SORT_COUNT);\n    \n    rsp = queryServer(params);\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    testCountSorting(placePivots);\n    \n    // Test limit\n    \n    params.set(FacetParams.FACET_LIMIT, 2);\n    \n    rsp = queryServer(params);\n    \n    expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",\n        4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",\n        4, null));\n    expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,\n        null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3,\n        null));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4,\n        expectedDublinPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"london\", 4,\n        expectedLondonPivots));\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    // Test individual facet.limit values\n    params.remove(FacetParams.FACET_LIMIT);\n    \n    params.set(\"f.place_t.\" + FacetParams.FACET_LIMIT, 1);\n    params.set(\"f.company_t.\" + FacetParams.FACET_LIMIT, 4);\n    \n    rsp = queryServer(params);\n    \n    expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    \n    expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",4, null));    \n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"null\",3, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\",2, null));\n    \n    expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    \n    expectedCardiffPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    \n    expectedKrakowPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    \n    expectedLAPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    \n    expectedCorkPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    \n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4, expectedDublinPivots));\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    params.remove(\"f.company_t.\" + FacetParams.FACET_LIMIT);\n    params.remove(\"f.place_t.\" + FacetParams.FACET_LIMIT);\n    params.set(FacetParams.FACET_LIMIT, 2);\n    \n    // Test facet.missing=true with diff sorts\n\n    index(\"id\",777); // NOTE: id=25 has no place as well\n    commit();\n\n    SolrParams missingA = params( \"q\", \"*:*\",\n                                  \"rows\", \"0\",\n                                  \"facet\",\"true\",\n                                  \"facet.pivot\",\"place_t,company_t\",\n                                  \"f.place_t.facet.mincount\", \"2\",\n                                  // default facet.sort\n                                  FacetParams.FACET_MISSING, \"true\" );\n    SolrParams missingB = SolrParams.wrapDefaults(missingA, \n                                                  params(FacetParams.FACET_LIMIT, \"4\",\n                                                         \"facet.sort\", \"index\"));\n    for (SolrParams p : new SolrParams[] { missingA, missingB }) {\n      // in either case, the last pivot option should be the same\n      rsp = query( p );\n      placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n      assertTrue(\"not enough values for pivot: \" + p + \" => \" + placePivots, \n                 1 < placePivots.size());\n      PivotField missing = placePivots.get(placePivots.size()-1);\n      assertNull(\"not the missing place value: \" + p, missing.getValue());\n      assertEquals(\"wrong missing place count: \" + p, 2, missing.getCount());\n      assertTrue(\"not enough sub-pivots for missing place: \"+ p +\" => \" + missing.getPivot(),\n                 1 < missing.getPivot().size());\n      missing = missing.getPivot().get(missing.getPivot().size()-1);\n      assertNull(\"not the missing company value: \" + p, missing.getValue());\n      assertEquals(\"wrong missing company count: \" + p, 1, missing.getCount());\n      assertNull(\"company shouldn't have sub-pivots: \" + p, missing.getPivot());\n    }\n\n    // sort=index + mincount + limit\n    for (SolrParams variableParams : new SolrParams[] { \n        // we should get the same results regardless of overrequest\n        params(\"facet.overrequest.count\",\"0\",\n               \"facet.overrequest.ratio\",\"0\"),\n        params()                                  }) {\n\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.pivot\",\"company_t\",\n                                                      \"facet.sort\", \"index\",\n                                                      \"facet.pivot.mincount\", \"4\",\n                                                      \"facet.limit\", \"4\"),\n                                              variableParams );\n\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(4, pivots.size());\n        assertEquals(\"fujitsu\", pivots.get(0).getValue());\n        assertEquals(4, pivots.get(0).getCount());\n        assertEquals(\"microsoft\", pivots.get(1).getValue());\n        assertEquals(5, pivots.get(1).getCount());\n        assertEquals(\"null\", pivots.get(2).getValue());\n        assertEquals(6, pivots.get(2).getCount());\n        assertEquals(\"polecat\", pivots.get(3).getValue());\n        assertEquals(6, pivots.get(3).getCount());\n        \n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // sort=index + mincount + limit + offset\n    for (SolrParams variableParams : new SolrParams[] { \n        // we should get the same results regardless of overrequest\n        params(\"facet.overrequest.count\",\"0\",\n               \"facet.overrequest.ratio\",\"0\"),\n        params()                                  }) {\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.pivot\",\"company_t\",\n                                                      \"facet.sort\", \"index\",\n                                                      \"facet.pivot.mincount\", \"4\",\n                                                      \"facet.offset\", \"1\",\n                                                      \"facet.limit\", \"4\"),\n                                              variableParams );\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(3, pivots.size()); // asked for 4, but not enough meet the mincount\n        assertEquals(\"microsoft\", pivots.get(0).getValue());\n        assertEquals(5, pivots.get(0).getCount());\n        assertEquals(\"null\", pivots.get(1).getValue());\n        assertEquals(6, pivots.get(1).getCount());\n        assertEquals(\"polecat\", pivots.get(2).getValue());\n        assertEquals(6, pivots.get(2).getCount());\n\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n\n    }\n      \n    // sort=index + mincount + limit + offset (more permutations)\n    for (SolrParams variableParams : new SolrParams[] { \n        // all of these combinations should result in the same first value\n        params(\"facet.pivot.mincount\", \"4\",\n               \"facet.offset\", \"2\"),\n        params(\"facet.pivot.mincount\", \"5\",\n               \"facet.offset\", \"1\"),\n        params(\"facet.pivot.mincount\", \"6\",\n               \"facet.offset\", \"0\" )                  }) {\n      \n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.limit\",\"1\",\n                                                      \"facet.sort\",\"index\",\n                                                      \"facet.overrequest.ratio\",\"0\",\n                                                      \"facet.pivot\", \"company_t\"),\n                                              variableParams );\n\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(1, pivots.size());\n        assertEquals(pivots.toString(), \"null\", pivots.get(0).getValue());\n        assertEquals(pivots.toString(), 6, pivots.get(0).getCount());\n\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    doTestDeepPivotStats(false); // all price stats\n    doTestDeepPivotStats(true); // just the mean price stat\n\n    doTestPivotStatsFromOneShard();\n\n    testFacetPivotRange();\n\n    testFacetPivotQuery();\n\n    testNegativeFacetQuery();\n\n    testNegativeRangeQuery();\n\n    testPivotFacetRangeAndQuery();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n    \n    del(\"*:*\");\n\n    // NOTE: we use the literal (4 character) string \"null\" as a company name\n    // to help ensure there isn't any bugs where the literal string is treated as if it \n    // were a true NULL value.\n    index(id, 19, \"place_t\", \"cardiff dublin\", \"company_t\", \"microsoft polecat\", \"price_ti\", \"15\");\n    index(id, 20, \"place_t\", \"dublin\", \"company_t\", \"polecat microsoft null\", \"price_ti\", \"19\",\n          // this is the only doc to have solo_* fields, therefore only 1 shard has them\n          // TODO: add enum field - blocked by SOLR-6682\n          \"solo_i\", 42, \"solo_s\", \"lonely\", \"solo_dt\", \"1976-03-06T01:23:45Z\");\n    index(id, 21, \"place_t\", \"london la dublin\", \"company_t\",\n        \"microsoft fujitsu null polecat\", \"price_ti\", \"29\");\n    index(id, 22, \"place_t\", \"krakow london cardiff\", \"company_t\",\n        \"polecat null bbc\", \"price_ti\", \"39\");\n    index(id, 23, \"place_t\", \"london\", \"company_t\", \"\", \"price_ti\", \"29\");\n    index(id, 24, \"place_t\", \"la\", \"company_t\", \"\");\n    index(id, 25, \"company_t\", \"microsoft polecat null fujitsu null bbc\", \"price_ti\", \"59\");\n    index(id, 26, \"place_t\", \"krakow\", \"company_t\", \"null\");\n    index(id, 27, \"place_t\", \"krakow cardiff dublin london la\", \n          \"company_t\", \"null microsoft polecat bbc fujitsu\");\n    index(id, 28, \"place_t\", \"cork\", \"company_t\", \"fujitsu rte\");\n    commit();\n    \n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    \n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n    setDistributedParams(params);\n    params.add(\"q\", \"*:*\");\n    params.add(\"facet\", \"true\");\n    params.add(\"facet.pivot\", \"place_t,company_t\");\n   \n    \n    QueryResponse rsp = queryServer(params);\n    \n    List<PivotField> expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    List<PivotField> expectedCardiffPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"null\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    List<PivotField> expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 1, null));\n    List<PivotField> expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    List<PivotField> expectedLAPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 2,null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2,null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"null\", 2, null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 1, null));\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 2,null));\n    List<PivotField> expectedKrakowPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",2, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\", 1, null));\n    List<PivotField> expectedCorkPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"rte\", 1, null));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4, expectedDublinPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"cardiff\", 3,  expectedCardiffPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"london\", 4, expectedLondonPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"la\", 3, expectedLAPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"krakow\", 3, expectedKrakowPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"cork\", 1, expectedCorkPivots));\n    \n    \n    List<PivotField> placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    // Useful to check for errors, orders lists and does toString() equality\n    // check\n    testOrderedPivotsStringEquality(expectedPlacePivots, placePivots);\n    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    // Test sorting by count\n    \n    params.set(FacetParams.FACET_SORT, FacetParams.FACET_SORT_COUNT);\n    \n    rsp = queryServer(params);\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    testCountSorting(placePivots);\n    \n    // Test limit\n    \n    params.set(FacetParams.FACET_LIMIT, 2);\n    \n    rsp = queryServer(params);\n    \n    expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",\n        4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",\n        4, null));\n    expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3,\n        null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3,\n        null));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4,\n        expectedDublinPivots));\n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"london\", 4,\n        expectedLondonPivots));\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    // Test individual facet.limit values\n    params.remove(FacetParams.FACET_LIMIT);\n    \n    params.set(\"f.place_t.\" + FacetParams.FACET_LIMIT, 1);\n    params.set(\"f.company_t.\" + FacetParams.FACET_LIMIT, 4);\n    \n    rsp = queryServer(params);\n    \n    expectedPlacePivots = new UnorderedEqualityArrayList<PivotField>();\n    \n    expectedDublinPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"microsoft\",4, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"polecat\",4, null));    \n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"null\",3, null));\n    expectedDublinPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\",2, null));\n    \n    expectedLondonPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"bbc\", 2, null));\n    expectedLondonPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    \n    expectedCardiffPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCardiffPivots.add(new ComparablePivotField(\"company_t\", \"polecat\", 3, null));\n    \n    expectedKrakowPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedKrakowPivots.add(new ComparablePivotField(\"company_t\", \"null\", 3, null));\n    \n    expectedLAPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedLAPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 2, null));\n    \n    expectedCorkPivots = new UnorderedEqualityArrayList<PivotField>();\n    expectedCorkPivots.add(new ComparablePivotField(\"company_t\", \"fujitsu\", 1, null));\n    \n    expectedPlacePivots.add(new ComparablePivotField(\"place_t\", \"dublin\", 4, expectedDublinPivots));\n    \n    placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");    \n    assertEquals(expectedPlacePivots, placePivots);\n    \n    params.remove(\"f.company_t.\" + FacetParams.FACET_LIMIT);\n    params.remove(\"f.place_t.\" + FacetParams.FACET_LIMIT);\n    params.set(FacetParams.FACET_LIMIT, 2);\n    \n    // Test facet.missing=true with diff sorts\n\n    index(\"id\",777); // NOTE: id=25 has no place as well\n    commit();\n\n    SolrParams missingA = params( \"q\", \"*:*\",\n                                  \"rows\", \"0\",\n                                  \"facet\",\"true\",\n                                  \"facet.pivot\",\"place_t,company_t\",\n                                  // default facet.sort\n                                  FacetParams.FACET_MISSING, \"true\" );\n    SolrParams missingB = SolrParams.wrapDefaults(missingA, \n                                                  params(FacetParams.FACET_LIMIT, \"4\",\n                                                         \"facet.sort\", \"index\"));\n    for (SolrParams p : new SolrParams[] { missingA, missingB }) {\n      // in either case, the last pivot option should be the same\n      rsp = query( p );\n      placePivots = rsp.getFacetPivot().get(\"place_t,company_t\");\n      assertTrue(\"not enough values for pivot: \" + p + \" => \" + placePivots, \n                 1 < placePivots.size());\n      PivotField missing = placePivots.get(placePivots.size()-1);\n      assertNull(\"not the missing place value: \" + p, missing.getValue());\n      assertEquals(\"wrong missing place count: \" + p, 2, missing.getCount());\n      assertTrue(\"not enough sub-pivots for missing place: \"+ p +\" => \" + missing.getPivot(),\n                 1 < missing.getPivot().size());\n      missing = missing.getPivot().get(missing.getPivot().size()-1);\n      assertNull(\"not the missing company value: \" + p, missing.getValue());\n      assertEquals(\"wrong missing company count: \" + p, 1, missing.getCount());\n      assertNull(\"company shouldn't have sub-pivots: \" + p, missing.getPivot());\n    }\n\n    // sort=index + mincount + limit\n    for (SolrParams variableParams : new SolrParams[] { \n        // we should get the same results regardless of overrequest\n        params(\"facet.overrequest.count\",\"0\",\n               \"facet.overrequest.ratio\",\"0\"),\n        params()                                  }) {\n\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.pivot\",\"company_t\",\n                                                      \"facet.sort\", \"index\",\n                                                      \"facet.pivot.mincount\", \"4\",\n                                                      \"facet.limit\", \"4\"),\n                                              variableParams );\n\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(4, pivots.size());\n        assertEquals(\"fujitsu\", pivots.get(0).getValue());\n        assertEquals(4, pivots.get(0).getCount());\n        assertEquals(\"microsoft\", pivots.get(1).getValue());\n        assertEquals(5, pivots.get(1).getCount());\n        assertEquals(\"null\", pivots.get(2).getValue());\n        assertEquals(6, pivots.get(2).getCount());\n        assertEquals(\"polecat\", pivots.get(3).getValue());\n        assertEquals(6, pivots.get(3).getCount());\n        \n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    // sort=index + mincount + limit + offset\n    for (SolrParams variableParams : new SolrParams[] { \n        // we should get the same results regardless of overrequest\n        params(\"facet.overrequest.count\",\"0\",\n               \"facet.overrequest.ratio\",\"0\"),\n        params()                                  }) {\n\n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.pivot\",\"company_t\",\n                                                      \"facet.sort\", \"index\",\n                                                      \"facet.pivot.mincount\", \"4\",\n                                                      \"facet.offset\", \"1\",\n                                                      \"facet.limit\", \"4\"),\n                                              variableParams );\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(3, pivots.size()); // asked for 4, but not enough meet the mincount\n        assertEquals(\"microsoft\", pivots.get(0).getValue());\n        assertEquals(5, pivots.get(0).getCount());\n        assertEquals(\"null\", pivots.get(1).getValue());\n        assertEquals(6, pivots.get(1).getCount());\n        assertEquals(\"polecat\", pivots.get(2).getValue());\n        assertEquals(6, pivots.get(2).getCount());\n\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n\n    }\n      \n    // sort=index + mincount + limit + offset (more permutations)\n    for (SolrParams variableParams : new SolrParams[] { \n        // all of these combinations should result in the same first value\n        params(\"facet.pivot.mincount\", \"4\",\n               \"facet.offset\", \"2\"),\n        params(\"facet.pivot.mincount\", \"5\",\n               \"facet.offset\", \"1\"),\n        params(\"facet.pivot.mincount\", \"6\",\n               \"facet.offset\", \"0\" )                  }) {\n      \n      SolrParams p = SolrParams.wrapDefaults( params( \"q\", \"*:*\",\n                                                      \"rows\", \"0\",\n                                                      \"facet\",\"true\",\n                                                      \"facet.limit\",\"1\",\n                                                      \"facet.sort\",\"index\",\n                                                      \"facet.overrequest.ratio\",\"0\",\n                                                      \"facet.pivot\", \"company_t\"),\n                                              variableParams );\n\n      try {\n        List<PivotField> pivots = query( p ).getFacetPivot().get(\"company_t\");\n        assertEquals(1, pivots.size());\n        assertEquals(pivots.toString(), \"null\", pivots.get(0).getValue());\n        assertEquals(pivots.toString(), 6, pivots.get(0).getCount());\n\n      } catch (AssertionFailedError ae) {\n        throw new AssertionError(ae.getMessage() + \" <== \" + p.toString(), ae);\n      }\n    }\n\n    doTestDeepPivotStats(false); // all price stats\n    doTestDeepPivotStats(true); // just the mean price stat\n\n    doTestPivotStatsFromOneShard();\n\n    testFacetPivotRange();\n\n    testFacetPivotQuery();\n\n    testNegativeFacetQuery();\n\n    testNegativeRangeQuery();\n\n    testPivotFacetRangeAndQuery();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["abb23fcc2461782ab204e61213240feb77d355aa","d12bbc45d641864ffe03291bc30f178eb34e434c"],"abb23fcc2461782ab204e61213240feb77d355aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22d0a81a05eba47d5e18976f17d88306b218cc22":["d12bbc45d641864ffe03291bc30f178eb34e434c"],"d12bbc45d641864ffe03291bc30f178eb34e434c":["abb23fcc2461782ab204e61213240feb77d355aa"],"b6785b4fe22e78ff9bb8afd2d475325cfc1e006c":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b6785b4fe22e78ff9bb8afd2d475325cfc1e006c"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"abb23fcc2461782ab204e61213240feb77d355aa":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d12bbc45d641864ffe03291bc30f178eb34e434c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["abb23fcc2461782ab204e61213240feb77d355aa"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["b6785b4fe22e78ff9bb8afd2d475325cfc1e006c"],"d12bbc45d641864ffe03291bc30f178eb34e434c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","22d0a81a05eba47d5e18976f17d88306b218cc22"],"b6785b4fe22e78ff9bb8afd2d475325cfc1e006c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}