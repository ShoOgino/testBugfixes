{"path":"lucene/core/src/test/org/apache/lucene/search/TestSort2#testShortMissingLast().mjava","commits":[{"id":"3990ef6ed195a54c0e22c12fcf0103c2a729596e","date":1360961934,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort2#testShortMissingLast().mjava","pathOld":"/dev/null","sourceNew":"  /** Tests sorting on type short, specifying the missing value should be treated as Short.MAX_VALUE */\n  public void testShortMissingLast() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"-1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"4\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(ir);\n    SortField sortField = new SortField(\"value\", SortField.Type.SHORT);\n    sortField.setMissingValue(Short.MAX_VALUE);\n    Sort sort = new Sort(sortField);\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(3, td.totalHits);\n    // null is treated as Short.MAX_VALUE\n    assertEquals(\"-1\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"4\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertNull(searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f183729ece15402db94402d482f29ebac4f7f54","date":1360963151,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testShortMissingLast().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort2#testShortMissingLast().mjava","sourceNew":"  /** Tests sorting on type short, specifying the missing value should be treated as Short.MAX_VALUE */\n  public void testShortMissingLast() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"-1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"4\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(ir);\n    SortField sortField = new SortField(\"value\", SortField.Type.SHORT);\n    sortField.setMissingValue(Short.MAX_VALUE);\n    Sort sort = new Sort(sortField);\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(3, td.totalHits);\n    // null is treated as Short.MAX_VALUE\n    assertEquals(\"-1\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"4\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertNull(searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting on type short, specifying the missing value should be treated as Short.MAX_VALUE */\n  public void testShortMissingLast() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"-1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"value\", \"4\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(ir);\n    SortField sortField = new SortField(\"value\", SortField.Type.SHORT);\n    sortField.setMissingValue(Short.MAX_VALUE);\n    Sort sort = new Sort(sortField);\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(3, td.totalHits);\n    // null is treated as Short.MAX_VALUE\n    assertEquals(\"-1\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"4\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertNull(searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5f183729ece15402db94402d482f29ebac4f7f54":["3990ef6ed195a54c0e22c12fcf0103c2a729596e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3990ef6ed195a54c0e22c12fcf0103c2a729596e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f183729ece15402db94402d482f29ebac4f7f54"]},"commit2Childs":{"5f183729ece15402db94402d482f29ebac4f7f54":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3990ef6ed195a54c0e22c12fcf0103c2a729596e"],"3990ef6ed195a54c0e22c12fcf0103c2a729596e":["5f183729ece15402db94402d482f29ebac4f7f54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}