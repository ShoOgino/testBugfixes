{"path":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testMultiTerm().mjava","commits":[{"id":"9fa011839030cb3186a8d21617499865cfdcdfe3","date":1582542528,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testMultiTerm().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultiTerm() throws IOException {\n    RegExp re = new RegExp(\"p.*e\");\n    IntervalsSource source = Intervals.multiterm(new CompiledAutomaton(re.toAutomaton()), re.toString());\n\n    checkIntervals(source, \"field1\", 5, new int[][]{\n        {},\n        { 0, 0, 1, 1, 3, 3, 4, 4, 6, 6, 7, 7 },\n        { 0, 0, 1, 1, 3, 3, 4, 4, 6, 6, 7, 7 },\n        { 7, 7 },\n        { 0, 0, 1, 1, 3, 3, 4, 4, 6, 6, 7, 7 },\n        { 0, 0 }\n    });\n\n    IllegalStateException e = expectThrows(IllegalStateException.class, () -> {\n      IntervalsSource s = Intervals.multiterm(new CompiledAutomaton(re.toAutomaton()), 1, re.toString());\n      for (LeafReaderContext ctx : searcher.getIndexReader().leaves()) {\n        s.intervals(\"field1\", ctx);\n      }\n    });\n    assertEquals(\"Automaton [\\\\p(.)*\\\\e] expanded to too many terms (limit 1)\", e.getMessage());\n\n    checkVisits(source, 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fa011839030cb3186a8d21617499865cfdcdfe3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9fa011839030cb3186a8d21617499865cfdcdfe3"]},"commit2Childs":{"9fa011839030cb3186a8d21617499865cfdcdfe3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fa011839030cb3186a8d21617499865cfdcdfe3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}