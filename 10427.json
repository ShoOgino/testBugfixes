{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestWriterImpl#testDataConfigWithDataSource().mjava","commits":[{"id":"68a568183b091ca52e6a2c0f9b615be5f3a0974a","date":1399311632,"type":0,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestWriterImpl#testDataConfigWithDataSource().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDataConfigWithDataSource() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"two\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"break\"));\n    rows.add(createMap(\"id\", \"4\", \"desc\", \"four\"));\n    \n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n    \n    Map extraParams = createMap(\"writerImpl\", TestSolrWriter.class.getName(),\n        \"commit\", \"true\");\n    runFullImport(loadDataConfig(\"data-config-with-datasource.xml\"),\n        extraParams);\n    \n    assertQ(req(\"id:1\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:4\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestWriterImpl#testDataConfigWithDataSource().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestWriterImpl#testDataConfigWithDataSource().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testDataConfigWithDataSource() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"two\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"break\"));\n    rows.add(createMap(\"id\", \"4\", \"desc\", \"four\"));\n    \n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n    \n    Map extraParams = createMap(\"writerImpl\", TestSolrWriter.class.getName(),\n        \"commit\", \"true\");\n    runFullImport(loadDataConfig(\"data-config-with-datasource.xml\"),\n        extraParams);\n    \n    assertQ(req(\"id:1\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:4\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDataConfigWithDataSource() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"two\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"break\"));\n    rows.add(createMap(\"id\", \"4\", \"desc\", \"four\"));\n    \n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n    \n    Map extraParams = createMap(\"writerImpl\", TestSolrWriter.class.getName(),\n        \"commit\", \"true\");\n    runFullImport(loadDataConfig(\"data-config-with-datasource.xml\"),\n        extraParams);\n    \n    assertQ(req(\"id:1\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:4\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestWriterImpl#testDataConfigWithDataSource().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestWriterImpl#testDataConfigWithDataSource().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDataConfigWithDataSource() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"two\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"break\"));\n    rows.add(createMap(\"id\", \"4\", \"desc\", \"four\"));\n    \n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n    \n    Map extraParams = createMap(\"writerImpl\", TestSolrWriter.class.getName(),\n        \"commit\", \"true\");\n    runFullImport(loadDataConfig(\"data-config-with-datasource.xml\"),\n        extraParams);\n    \n    assertQ(req(\"id:1\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:4\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testDataConfigWithDataSource() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"two\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"break\"));\n    rows.add(createMap(\"id\", \"4\", \"desc\", \"four\"));\n    \n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n    \n    Map extraParams = createMap(\"writerImpl\", TestSolrWriter.class.getName(),\n        \"commit\", \"true\");\n    runFullImport(loadDataConfig(\"data-config-with-datasource.xml\"),\n        extraParams);\n    \n    assertQ(req(\"id:1\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:4\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"024e13388acbf5562fcbb77a129620982a5e2d79","date":1591531835,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestWriterImpl#testDataConfigWithDataSource().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestWriterImpl#testDataConfigWithDataSource().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDataConfigWithDataSource() throws Exception {\n    @SuppressWarnings({\"rawtypes\"})\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"two\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"break\"));\n    rows.add(createMap(\"id\", \"4\", \"desc\", \"four\"));\n    \n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n    \n    @SuppressWarnings({\"rawtypes\"})\n    Map extraParams = createMap(\"writerImpl\", TestSolrWriter.class.getName(),\n        \"commit\", \"true\");\n    runFullImport(loadDataConfig(\"data-config-with-datasource.xml\"),\n        extraParams);\n    \n    assertQ(req(\"id:1\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:4\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDataConfigWithDataSource() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"two\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"break\"));\n    rows.add(createMap(\"id\", \"4\", \"desc\", \"four\"));\n    \n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n    \n    Map extraParams = createMap(\"writerImpl\", TestSolrWriter.class.getName(),\n        \"commit\", \"true\");\n    runFullImport(loadDataConfig(\"data-config-with-datasource.xml\"),\n        extraParams);\n    \n    assertQ(req(\"id:1\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:4\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestWriterImpl#testDataConfigWithDataSource().mjava","sourceNew":null,"sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDataConfigWithDataSource() throws Exception {\n    @SuppressWarnings({\"rawtypes\"})\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"two\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"break\"));\n    rows.add(createMap(\"id\", \"4\", \"desc\", \"four\"));\n    \n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n    \n    @SuppressWarnings({\"rawtypes\"})\n    Map extraParams = createMap(\"writerImpl\", TestSolrWriter.class.getName(),\n        \"commit\", \"true\");\n    runFullImport(loadDataConfig(\"data-config-with-datasource.xml\"),\n        extraParams);\n    \n    assertQ(req(\"id:1\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:4\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"68a568183b091ca52e6a2c0f9b615be5f3a0974a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["024e13388acbf5562fcbb77a129620982a5e2d79"],"024e13388acbf5562fcbb77a129620982a5e2d79":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["68a568183b091ca52e6a2c0f9b615be5f3a0974a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"68a568183b091ca52e6a2c0f9b615be5f3a0974a":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"024e13388acbf5562fcbb77a129620982a5e2d79":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["68a568183b091ca52e6a2c0f9b615be5f3a0974a"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["024e13388acbf5562fcbb77a129620982a5e2d79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}