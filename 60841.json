{"path":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getLiveDocs().mjava","commits":[{"id":"16b25963ad38ed289ebf0f7af31269fa1ce80a11","date":1442083896,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getLiveDocs().mjava","pathOld":"/dev/null","sourceNew":"  public BitDocSet getLiveDocs() throws IOException {\n    // going through the filter cache will provide thread safety here\n    if (liveDocs == null) {\n       liveDocs = getDocSetBits(matchAllDocsQuery);\n    }\n    return liveDocs;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac9de183adbc9483681f275ac1e2d92ed19f52e1","date":1452414626,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getLiveDocs().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getLiveDocs().mjava","sourceNew":"  public BitDocSet getLiveDocs() throws IOException {\n    // going through the filter cache will provide thread safety here\n    if (liveDocs == null) {\n      liveDocs = getDocSetBits(matchAllDocsQuery);\n    }\n    return liveDocs;\n  }\n\n","sourceOld":"  public BitDocSet getLiveDocs() throws IOException {\n    // going through the filter cache will provide thread safety here\n    if (liveDocs == null) {\n       liveDocs = getDocSetBits(matchAllDocsQuery);\n    }\n    return liveDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3","date":1485881524,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getLiveDocs().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getLiveDocs().mjava","sourceNew":"  /** @lucene.internal the type of DocSet returned may change in the future */\n  public BitDocSet getLiveDocs() throws IOException {\n    // Going through the filter cache will provide thread safety here if we only had getLiveDocs,\n    // but the addition of setLiveDocs means we needed to add volatile to \"liveDocs\".\n    if (liveDocs == null) {\n      liveDocs = getDocSetBits(matchAllDocsQuery);\n    }\n    assert liveDocs.size() == numDocs();\n    return liveDocs;\n  }\n\n","sourceOld":"  public BitDocSet getLiveDocs() throws IOException {\n    // going through the filter cache will provide thread safety here\n    if (liveDocs == null) {\n      liveDocs = getDocSetBits(matchAllDocsQuery);\n    }\n    return liveDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getLiveDocs().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getLiveDocs().mjava","sourceNew":"  /** @lucene.internal the type of DocSet returned may change in the future */\n  public BitDocSet getLiveDocs() throws IOException {\n    // Going through the filter cache will provide thread safety here if we only had getLiveDocs,\n    // but the addition of setLiveDocs means we needed to add volatile to \"liveDocs\".\n    if (liveDocs == null) {\n      liveDocs = getDocSetBits(matchAllDocsQuery);\n    }\n    assert liveDocs.size() == numDocs();\n    return liveDocs;\n  }\n\n","sourceOld":"  public BitDocSet getLiveDocs() throws IOException {\n    // going through the filter cache will provide thread safety here\n    if (liveDocs == null) {\n      liveDocs = getDocSetBits(matchAllDocsQuery);\n    }\n    return liveDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fee78c931716a439e5b77d9e8ed38cba4db94eec","date":1486090149,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getLiveDocs().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getLiveDocs().mjava","sourceNew":"  /** @lucene.internal the type of DocSet returned may change in the future */\n  public BitDocSet getLiveDocs() throws IOException {\n    // Going through the filter cache will provide thread safety here if we only had getLiveDocs,\n    // but the addition of setLiveDocs means we needed to add volatile to \"liveDocs\".\n    BitDocSet docs = liveDocs;\n    if (docs == null) {\n      liveDocs = docs = getDocSetBits(matchAllDocsQuery);\n    }\n    assert docs.size() == numDocs();\n    return docs;\n  }\n\n","sourceOld":"  /** @lucene.internal the type of DocSet returned may change in the future */\n  public BitDocSet getLiveDocs() throws IOException {\n    // Going through the filter cache will provide thread safety here if we only had getLiveDocs,\n    // but the addition of setLiveDocs means we needed to add volatile to \"liveDocs\".\n    if (liveDocs == null) {\n      liveDocs = getDocSetBits(matchAllDocsQuery);\n    }\n    assert liveDocs.size() == numDocs();\n    return liveDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf29cc8a76949bbcbc15b386a9e46a533f5b3332","date":1527778512,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getLiveDocs().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getLiveDocs().mjava","sourceNew":"  @Deprecated // TODO remove for 8.0\n  public BitDocSet getLiveDocs() throws IOException {\n    return getLiveDocSet();\n  }\n\n","sourceOld":"  /** @lucene.internal the type of DocSet returned may change in the future */\n  public BitDocSet getLiveDocs() throws IOException {\n    // Going through the filter cache will provide thread safety here if we only had getLiveDocs,\n    // but the addition of setLiveDocs means we needed to add volatile to \"liveDocs\".\n    BitDocSet docs = liveDocs;\n    if (docs == null) {\n      liveDocs = docs = getDocSetBits(matchAllDocsQuery);\n    }\n    assert docs.size() == numDocs();\n    return docs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"16b25963ad38ed289ebf0f7af31269fa1ce80a11":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bf29cc8a76949bbcbc15b386a9e46a533f5b3332":["fee78c931716a439e5b77d9e8ed38cba4db94eec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["ac9de183adbc9483681f275ac1e2d92ed19f52e1","0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3"],"fee78c931716a439e5b77d9e8ed38cba4db94eec":["0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3"],"0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["16b25963ad38ed289ebf0f7af31269fa1ce80a11"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bf29cc8a76949bbcbc15b386a9e46a533f5b3332"]},"commit2Childs":{"16b25963ad38ed289ebf0f7af31269fa1ce80a11":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"bf29cc8a76949bbcbc15b386a9e46a533f5b3332":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["16b25963ad38ed289ebf0f7af31269fa1ce80a11"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"fee78c931716a439e5b77d9e8ed38cba4db94eec":["bf29cc8a76949bbcbc15b386a9e46a533f5b3332"],"0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","fee78c931716a439e5b77d9e8ed38cba4db94eec"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}