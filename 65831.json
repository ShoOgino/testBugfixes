{"path":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#JoinQueryWeight(SolrIndexSearcher,float).mjava","commits":[{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#JoinQueryWeight(SolrIndexSearcher,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#JoinQueryWeight(SolrIndexSearcher).mjava","sourceNew":"    public JoinQueryWeight(SolrIndexSearcher searcher, float boost) {\n      super(JoinQuery.this, boost);\n      this.fromSearcher = searcher;\n      SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n      if (info != null) {\n        rb = info.getResponseBuilder();\n      }\n\n      if (fromIndex == null) {\n        this.fromSearcher = searcher;\n      } else {\n        if (info == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join must have SolrRequestInfo\");\n        }\n\n        CoreContainer container = searcher.getCore().getCoreDescriptor().getCoreContainer();\n        final SolrCore fromCore = container.getCore(fromIndex);\n\n        if (fromCore == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n        }\n\n        if (info.getReq().getCore() == fromCore) {\n          // if this is the same core, use the searcher passed in... otherwise we could be warming and\n          // get an older searcher from the core.\n          fromSearcher = searcher;\n        } else {\n          // This could block if there is a static warming query with a join in it, and if useColdSearcher is true.\n          // Deadlock could result if two cores both had useColdSearcher and had joins that used eachother.\n          // This would be very predictable though (should happen every time if misconfigured)\n          fromRef = fromCore.getSearcher(false, true, null);\n\n          // be careful not to do anything with this searcher that requires the thread local\n          // SolrRequestInfo in a manner that requires the core in the request to match\n          fromSearcher = fromRef.get();\n        }\n\n        if (fromRef != null) {\n          final RefCounted<SolrIndexSearcher> ref = fromRef;\n          info.addCloseHook(new Closeable() {\n            @Override\n            public void close() {\n              ref.decref();\n            }\n          });\n        }\n\n        info.addCloseHook(new Closeable() {\n          @Override\n          public void close() {\n            fromCore.close();\n          }\n        });\n\n      }\n      this.toSearcher = searcher;\n    }\n\n","sourceOld":"    public JoinQueryWeight(SolrIndexSearcher searcher) {\n      super(JoinQuery.this);\n      this.fromSearcher = searcher;\n      SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n      if (info != null) {\n        rb = info.getResponseBuilder();\n      }\n\n      if (fromIndex == null) {\n        this.fromSearcher = searcher;\n      } else {\n        if (info == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join must have SolrRequestInfo\");\n        }\n\n        CoreContainer container = searcher.getCore().getCoreDescriptor().getCoreContainer();\n        final SolrCore fromCore = container.getCore(fromIndex);\n\n        if (fromCore == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n        }\n\n        if (info.getReq().getCore() == fromCore) {\n          // if this is the same core, use the searcher passed in... otherwise we could be warming and\n          // get an older searcher from the core.\n          fromSearcher = searcher;\n        } else {\n          // This could block if there is a static warming query with a join in it, and if useColdSearcher is true.\n          // Deadlock could result if two cores both had useColdSearcher and had joins that used eachother.\n          // This would be very predictable though (should happen every time if misconfigured)\n          fromRef = fromCore.getSearcher(false, true, null);\n\n          // be careful not to do anything with this searcher that requires the thread local\n          // SolrRequestInfo in a manner that requires the core in the request to match\n          fromSearcher = fromRef.get();\n        }\n\n        if (fromRef != null) {\n          final RefCounted<SolrIndexSearcher> ref = fromRef;\n          info.addCloseHook(new Closeable() {\n            @Override\n            public void close() {\n              ref.decref();\n            }\n          });\n        }\n\n        info.addCloseHook(new Closeable() {\n          @Override\n          public void close() {\n            fromCore.close();\n          }\n        });\n\n      }\n      this.toSearcher = searcher;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#JoinQueryWeight(SolrIndexSearcher,float).mjava","pathOld":"/dev/null","sourceNew":"    public JoinQueryWeight(SolrIndexSearcher searcher, float boost) {\n      super(JoinQuery.this, boost);\n      this.fromSearcher = searcher;\n      SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n      if (info != null) {\n        rb = info.getResponseBuilder();\n      }\n\n      if (fromIndex == null) {\n        this.fromSearcher = searcher;\n      } else {\n        if (info == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join must have SolrRequestInfo\");\n        }\n\n        CoreContainer container = searcher.getCore().getCoreDescriptor().getCoreContainer();\n        final SolrCore fromCore = container.getCore(fromIndex);\n\n        if (fromCore == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n        }\n\n        if (info.getReq().getCore() == fromCore) {\n          // if this is the same core, use the searcher passed in... otherwise we could be warming and\n          // get an older searcher from the core.\n          fromSearcher = searcher;\n        } else {\n          // This could block if there is a static warming query with a join in it, and if useColdSearcher is true.\n          // Deadlock could result if two cores both had useColdSearcher and had joins that used eachother.\n          // This would be very predictable though (should happen every time if misconfigured)\n          fromRef = fromCore.getSearcher(false, true, null);\n\n          // be careful not to do anything with this searcher that requires the thread local\n          // SolrRequestInfo in a manner that requires the core in the request to match\n          fromSearcher = fromRef.get();\n        }\n\n        if (fromRef != null) {\n          final RefCounted<SolrIndexSearcher> ref = fromRef;\n          info.addCloseHook(new Closeable() {\n            @Override\n            public void close() {\n              ref.decref();\n            }\n          });\n        }\n\n        info.addCloseHook(new Closeable() {\n          @Override\n          public void close() {\n            fromCore.close();\n          }\n        });\n\n      }\n      this.toSearcher = searcher;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#JoinQueryWeight(SolrIndexSearcher,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#JoinQueryWeight(SolrIndexSearcher,float).mjava","sourceNew":"    public JoinQueryWeight(SolrIndexSearcher searcher, float boost) {\n      super(JoinQuery.this, boost);\n      this.fromSearcher = searcher;\n      SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n      if (info != null) {\n        rb = info.getResponseBuilder();\n      }\n\n      if (fromIndex == null) {\n        this.fromSearcher = searcher;\n      } else {\n        if (info == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join must have SolrRequestInfo\");\n        }\n\n        CoreContainer container = searcher.getCore().getCoreContainer();\n        final SolrCore fromCore = container.getCore(fromIndex);\n\n        if (fromCore == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n        }\n\n        if (info.getReq().getCore() == fromCore) {\n          // if this is the same core, use the searcher passed in... otherwise we could be warming and\n          // get an older searcher from the core.\n          fromSearcher = searcher;\n        } else {\n          // This could block if there is a static warming query with a join in it, and if useColdSearcher is true.\n          // Deadlock could result if two cores both had useColdSearcher and had joins that used eachother.\n          // This would be very predictable though (should happen every time if misconfigured)\n          fromRef = fromCore.getSearcher(false, true, null);\n\n          // be careful not to do anything with this searcher that requires the thread local\n          // SolrRequestInfo in a manner that requires the core in the request to match\n          fromSearcher = fromRef.get();\n        }\n\n        if (fromRef != null) {\n          final RefCounted<SolrIndexSearcher> ref = fromRef;\n          info.addCloseHook(new Closeable() {\n            @Override\n            public void close() {\n              ref.decref();\n            }\n          });\n        }\n\n        info.addCloseHook(new Closeable() {\n          @Override\n          public void close() {\n            fromCore.close();\n          }\n        });\n\n      }\n      this.toSearcher = searcher;\n    }\n\n","sourceOld":"    public JoinQueryWeight(SolrIndexSearcher searcher, float boost) {\n      super(JoinQuery.this, boost);\n      this.fromSearcher = searcher;\n      SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n      if (info != null) {\n        rb = info.getResponseBuilder();\n      }\n\n      if (fromIndex == null) {\n        this.fromSearcher = searcher;\n      } else {\n        if (info == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join must have SolrRequestInfo\");\n        }\n\n        CoreContainer container = searcher.getCore().getCoreDescriptor().getCoreContainer();\n        final SolrCore fromCore = container.getCore(fromIndex);\n\n        if (fromCore == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n        }\n\n        if (info.getReq().getCore() == fromCore) {\n          // if this is the same core, use the searcher passed in... otherwise we could be warming and\n          // get an older searcher from the core.\n          fromSearcher = searcher;\n        } else {\n          // This could block if there is a static warming query with a join in it, and if useColdSearcher is true.\n          // Deadlock could result if two cores both had useColdSearcher and had joins that used eachother.\n          // This would be very predictable though (should happen every time if misconfigured)\n          fromRef = fromCore.getSearcher(false, true, null);\n\n          // be careful not to do anything with this searcher that requires the thread local\n          // SolrRequestInfo in a manner that requires the core in the request to match\n          fromSearcher = fromRef.get();\n        }\n\n        if (fromRef != null) {\n          final RefCounted<SolrIndexSearcher> ref = fromRef;\n          info.addCloseHook(new Closeable() {\n            @Override\n            public void close() {\n              ref.decref();\n            }\n          });\n        }\n\n        info.addCloseHook(new Closeable() {\n          @Override\n          public void close() {\n            fromCore.close();\n          }\n        });\n\n      }\n      this.toSearcher = searcher;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#JoinQueryWeight(SolrIndexSearcher,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#JoinQueryWeight(SolrIndexSearcher,float).mjava","sourceNew":"    public JoinQueryWeight(SolrIndexSearcher searcher, float boost) {\n      super(JoinQuery.this, boost);\n      this.fromSearcher = searcher;\n      SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n      if (info != null) {\n        rb = info.getResponseBuilder();\n      }\n\n      if (fromIndex == null) {\n        this.fromSearcher = searcher;\n      } else {\n        if (info == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join must have SolrRequestInfo\");\n        }\n\n        CoreContainer container = searcher.getCore().getCoreContainer();\n        final SolrCore fromCore = container.getCore(fromIndex);\n\n        if (fromCore == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n        }\n\n        if (info.getReq().getCore() == fromCore) {\n          // if this is the same core, use the searcher passed in... otherwise we could be warming and\n          // get an older searcher from the core.\n          fromSearcher = searcher;\n        } else {\n          // This could block if there is a static warming query with a join in it, and if useColdSearcher is true.\n          // Deadlock could result if two cores both had useColdSearcher and had joins that used eachother.\n          // This would be very predictable though (should happen every time if misconfigured)\n          fromRef = fromCore.getSearcher(false, true, null);\n\n          // be careful not to do anything with this searcher that requires the thread local\n          // SolrRequestInfo in a manner that requires the core in the request to match\n          fromSearcher = fromRef.get();\n        }\n\n        if (fromRef != null) {\n          final RefCounted<SolrIndexSearcher> ref = fromRef;\n          info.addCloseHook(new Closeable() {\n            @Override\n            public void close() {\n              ref.decref();\n            }\n          });\n        }\n\n        info.addCloseHook(new Closeable() {\n          @Override\n          public void close() {\n            fromCore.close();\n          }\n        });\n\n      }\n      this.toSearcher = searcher;\n    }\n\n","sourceOld":"    public JoinQueryWeight(SolrIndexSearcher searcher, float boost) {\n      super(JoinQuery.this, boost);\n      this.fromSearcher = searcher;\n      SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n      if (info != null) {\n        rb = info.getResponseBuilder();\n      }\n\n      if (fromIndex == null) {\n        this.fromSearcher = searcher;\n      } else {\n        if (info == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join must have SolrRequestInfo\");\n        }\n\n        CoreContainer container = searcher.getCore().getCoreDescriptor().getCoreContainer();\n        final SolrCore fromCore = container.getCore(fromIndex);\n\n        if (fromCore == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n        }\n\n        if (info.getReq().getCore() == fromCore) {\n          // if this is the same core, use the searcher passed in... otherwise we could be warming and\n          // get an older searcher from the core.\n          fromSearcher = searcher;\n        } else {\n          // This could block if there is a static warming query with a join in it, and if useColdSearcher is true.\n          // Deadlock could result if two cores both had useColdSearcher and had joins that used eachother.\n          // This would be very predictable though (should happen every time if misconfigured)\n          fromRef = fromCore.getSearcher(false, true, null);\n\n          // be careful not to do anything with this searcher that requires the thread local\n          // SolrRequestInfo in a manner that requires the core in the request to match\n          fromSearcher = fromRef.get();\n        }\n\n        if (fromRef != null) {\n          final RefCounted<SolrIndexSearcher> ref = fromRef;\n          info.addCloseHook(new Closeable() {\n            @Override\n            public void close() {\n              ref.decref();\n            }\n          });\n        }\n\n        info.addCloseHook(new Closeable() {\n          @Override\n          public void close() {\n            fromCore.close();\n          }\n        });\n\n      }\n      this.toSearcher = searcher;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c226b0eeb8b028f572020f459851a663a2c064e","date":1542377651,"type":5,"author":"Christophe Bismuth","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#JoinQueryWeight(SolrIndexSearcher,ScoreMode,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#JoinQueryWeight(SolrIndexSearcher,float).mjava","sourceNew":"    public JoinQueryWeight(SolrIndexSearcher searcher, ScoreMode scoreMode, float boost) {\n      super(JoinQuery.this, boost);\n      this.scoreMode = scoreMode;\n      this.fromSearcher = searcher;\n      SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n      if (info != null) {\n        rb = info.getResponseBuilder();\n      }\n\n      if (fromIndex == null) {\n        this.fromSearcher = searcher;\n      } else {\n        if (info == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join must have SolrRequestInfo\");\n        }\n\n        CoreContainer container = searcher.getCore().getCoreContainer();\n        final SolrCore fromCore = container.getCore(fromIndex);\n\n        if (fromCore == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n        }\n\n        if (info.getReq().getCore() == fromCore) {\n          // if this is the same core, use the searcher passed in... otherwise we could be warming and\n          // get an older searcher from the core.\n          fromSearcher = searcher;\n        } else {\n          // This could block if there is a static warming query with a join in it, and if useColdSearcher is true.\n          // Deadlock could result if two cores both had useColdSearcher and had joins that used eachother.\n          // This would be very predictable though (should happen every time if misconfigured)\n          fromRef = fromCore.getSearcher(false, true, null);\n\n          // be careful not to do anything with this searcher that requires the thread local\n          // SolrRequestInfo in a manner that requires the core in the request to match\n          fromSearcher = fromRef.get();\n        }\n\n        if (fromRef != null) {\n          final RefCounted<SolrIndexSearcher> ref = fromRef;\n          info.addCloseHook(new Closeable() {\n            @Override\n            public void close() {\n              ref.decref();\n            }\n          });\n        }\n\n        info.addCloseHook(new Closeable() {\n          @Override\n          public void close() {\n            fromCore.close();\n          }\n        });\n\n      }\n      this.toSearcher = searcher;\n    }\n\n","sourceOld":"    public JoinQueryWeight(SolrIndexSearcher searcher, float boost) {\n      super(JoinQuery.this, boost);\n      this.fromSearcher = searcher;\n      SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n      if (info != null) {\n        rb = info.getResponseBuilder();\n      }\n\n      if (fromIndex == null) {\n        this.fromSearcher = searcher;\n      } else {\n        if (info == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join must have SolrRequestInfo\");\n        }\n\n        CoreContainer container = searcher.getCore().getCoreContainer();\n        final SolrCore fromCore = container.getCore(fromIndex);\n\n        if (fromCore == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n        }\n\n        if (info.getReq().getCore() == fromCore) {\n          // if this is the same core, use the searcher passed in... otherwise we could be warming and\n          // get an older searcher from the core.\n          fromSearcher = searcher;\n        } else {\n          // This could block if there is a static warming query with a join in it, and if useColdSearcher is true.\n          // Deadlock could result if two cores both had useColdSearcher and had joins that used eachother.\n          // This would be very predictable though (should happen every time if misconfigured)\n          fromRef = fromCore.getSearcher(false, true, null);\n\n          // be careful not to do anything with this searcher that requires the thread local\n          // SolrRequestInfo in a manner that requires the core in the request to match\n          fromSearcher = fromRef.get();\n        }\n\n        if (fromRef != null) {\n          final RefCounted<SolrIndexSearcher> ref = fromRef;\n          info.addCloseHook(new Closeable() {\n            @Override\n            public void close() {\n              ref.decref();\n            }\n          });\n        }\n\n        info.addCloseHook(new Closeable() {\n          @Override\n          public void close() {\n            fromCore.close();\n          }\n        });\n\n      }\n      this.toSearcher = searcher;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9c226b0eeb8b028f572020f459851a663a2c064e":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9c226b0eeb8b028f572020f459851a663a2c064e"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9c226b0eeb8b028f572020f459851a663a2c064e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["9c226b0eeb8b028f572020f459851a663a2c064e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}