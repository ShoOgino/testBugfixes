{"path":"modules/suggest/src/java/org/apache/lucene/search/suggest/BytesRefList#sort(Comparator[BytesRef]).mjava","commits":[{"id":"d334a3e8e6b94298d8cf2802a403a096c06f0b92","date":1329766559,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/BytesRefList#sort(Comparator[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  public int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderdEntries = new int[size()];\n    for (int i = 0; i < orderdEntries.length; i++) {\n      orderdEntries[i] = i;\n    }\n    new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderdEntries[i];\n        orderdEntries[i] = orderdEntries[j];\n        orderdEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int ord1 = orderdEntries[i], ord2 = orderdEntries[j];\n        return comp.compare(get(scratch1, ord1), get(scratch2, ord2));\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        final int ord = orderdEntries[i];\n        get(pivot, ord);\n      }\n  \n      @Override\n      protected int comparePivot(int j) {\n        final int ord = orderdEntries[j];\n        return comp.compare(pivot, get(scratch2, ord));\n      }\n      \n      private final BytesRef pivot = new BytesRef(),\n        scratch1 = new BytesRef(), scratch2 = new BytesRef();\n    }.quickSort(0, size() - 1);\n    return orderdEntries;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a4e3a7c47e11ff0c156c646c37d20af7249370d2","a4e3a7c47e11ff0c156c646c37d20af7249370d2","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dc3c850c5222a1ce7d619563f67bf047a11b32b6","date":1330703995,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/BytesRefList#sort(Comparator[BytesRef]).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/BytesRefList#sort(Comparator[BytesRef]).mjava","sourceNew":"  private int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderdEntries = new int[size()];\n    for (int i = 0; i < orderdEntries.length; i++) {\n      orderdEntries[i] = i;\n    }\n    new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderdEntries[i];\n        orderdEntries[i] = orderdEntries[j];\n        orderdEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int ord1 = orderdEntries[i], ord2 = orderdEntries[j];\n        return comp.compare(get(scratch1, ord1), get(scratch2, ord2));\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        final int ord = orderdEntries[i];\n        get(pivot, ord);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int ord = orderdEntries[j];\n        return comp.compare(pivot, get(scratch2, ord));\n      }\n      \n      private final BytesRef pivot = new BytesRef(), scratch1 = new BytesRef(),\n          scratch2 = new BytesRef();\n    }.quickSort(0, size() - 1);\n    return orderdEntries;\n  }\n\n","sourceOld":"  public int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderdEntries = new int[size()];\n    for (int i = 0; i < orderdEntries.length; i++) {\n      orderdEntries[i] = i;\n    }\n    new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderdEntries[i];\n        orderdEntries[i] = orderdEntries[j];\n        orderdEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int ord1 = orderdEntries[i], ord2 = orderdEntries[j];\n        return comp.compare(get(scratch1, ord1), get(scratch2, ord2));\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        final int ord = orderdEntries[i];\n        get(pivot, ord);\n      }\n  \n      @Override\n      protected int comparePivot(int j) {\n        final int ord = orderdEntries[j];\n        return comp.compare(pivot, get(scratch2, ord));\n      }\n      \n      private final BytesRef pivot = new BytesRef(),\n        scratch1 = new BytesRef(), scratch2 = new BytesRef();\n    }.quickSort(0, size() - 1);\n    return orderdEntries;\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/BytesRefList#sort(Comparator[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  private int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderdEntries = new int[size()];\n    for (int i = 0; i < orderdEntries.length; i++) {\n      orderdEntries[i] = i;\n    }\n    new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderdEntries[i];\n        orderdEntries[i] = orderdEntries[j];\n        orderdEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int ord1 = orderdEntries[i], ord2 = orderdEntries[j];\n        return comp.compare(get(scratch1, ord1), get(scratch2, ord2));\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        final int ord = orderdEntries[i];\n        get(pivot, ord);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int ord = orderdEntries[j];\n        return comp.compare(pivot, get(scratch2, ord));\n      }\n      \n      private final BytesRef pivot = new BytesRef(), scratch1 = new BytesRef(),\n          scratch2 = new BytesRef();\n    }.quickSort(0, size() - 1);\n    return orderdEntries;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefList#sort(Comparator[BytesRef]).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/BytesRefList#sort(Comparator[BytesRef]).mjava","sourceNew":"  private int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderdEntries = new int[size()];\n    for (int i = 0; i < orderdEntries.length; i++) {\n      orderdEntries[i] = i;\n    }\n    new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderdEntries[i];\n        orderdEntries[i] = orderdEntries[j];\n        orderdEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int ord1 = orderdEntries[i], ord2 = orderdEntries[j];\n        return comp.compare(get(scratch1, ord1), get(scratch2, ord2));\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        final int ord = orderdEntries[i];\n        get(pivot, ord);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int ord = orderdEntries[j];\n        return comp.compare(pivot, get(scratch2, ord));\n      }\n      \n      private final BytesRef pivot = new BytesRef(), scratch1 = new BytesRef(),\n          scratch2 = new BytesRef();\n    }.quickSort(0, size() - 1);\n    return orderdEntries;\n  }\n\n","sourceOld":"  private int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderdEntries = new int[size()];\n    for (int i = 0; i < orderdEntries.length; i++) {\n      orderdEntries[i] = i;\n    }\n    new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderdEntries[i];\n        orderdEntries[i] = orderdEntries[j];\n        orderdEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int ord1 = orderdEntries[i], ord2 = orderdEntries[j];\n        return comp.compare(get(scratch1, ord1), get(scratch2, ord2));\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        final int ord = orderdEntries[i];\n        get(pivot, ord);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int ord = orderdEntries[j];\n        return comp.compare(pivot, get(scratch2, ord));\n      }\n      \n      private final BytesRef pivot = new BytesRef(), scratch1 = new BytesRef(),\n          scratch2 = new BytesRef();\n    }.quickSort(0, size() - 1);\n    return orderdEntries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"d334a3e8e6b94298d8cf2802a403a096c06f0b92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["d334a3e8e6b94298d8cf2802a403a096c06f0b92"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d334a3e8e6b94298d8cf2802a403a096c06f0b92"],"d334a3e8e6b94298d8cf2802a403a096c06f0b92":["dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}