{"path":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#tFilteredQuery(boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#tFilteredQuery(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#tFilteredQuery(boolean).mjava","sourceNew":"  private void tFilteredQuery(final boolean useRandomAccess) throws Exception {\n    Query filteredquery = new FilteredQueryRA(query, filter, useRandomAccess);\n    ScoreDoc[] hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, null, 1000, new Sort(new SortField(\"sorter\", SortField.Type.STRING))).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQueryRA(new TermQuery (new Term (\"field\", \"one\")), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQueryRA(new MatchAllDocsQuery(), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQueryRA(new TermQuery (new Term (\"field\", \"x\")), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQueryRA(new TermQuery (new Term (\"field\", \"y\")), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQueryRA(tq, f, useRandomAccess);\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","sourceOld":"  private void tFilteredQuery(final boolean useRandomAccess) throws Exception {\n    Query filteredquery = new FilteredQueryRA(query, filter, useRandomAccess);\n    ScoreDoc[] hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, null, 1000, new Sort(new SortField(\"sorter\", SortField.Type.STRING))).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQueryRA(new TermQuery (new Term (\"field\", \"one\")), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQueryRA(new MatchAllDocsQuery(), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQueryRA(new TermQuery (new Term (\"field\", \"x\")), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQueryRA(new TermQuery (new Term (\"field\", \"y\")), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQueryRA(tq, f, useRandomAccess);\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#tFilteredQuery(boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#tFilteredQuery(boolean).mjava","sourceNew":"  private void tFilteredQuery(final boolean useRandomAccess) throws Exception {\n    Query filteredquery = new FilteredQueryRA(query, filter, useRandomAccess);\n    ScoreDoc[] hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(random(), filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, null, 1000, new Sort(new SortField(\"sorter\", SortField.Type.STRING))).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQueryRA(new TermQuery (new Term (\"field\", \"one\")), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random(), filteredquery,searcher);\n\n    filteredquery = new FilteredQueryRA(new MatchAllDocsQuery(), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random(), filteredquery,searcher);\n\n    filteredquery = new FilteredQueryRA(new TermQuery (new Term (\"field\", \"x\")), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(random(), filteredquery,searcher);\n\n    filteredquery = new FilteredQueryRA(new TermQuery (new Term (\"field\", \"y\")), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(random(), filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQueryRA(tq, f, useRandomAccess);\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","sourceOld":"  private void tFilteredQuery(final boolean useRandomAccess) throws Exception {\n    Query filteredquery = new FilteredQueryRA(query, filter, useRandomAccess);\n    ScoreDoc[] hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, null, 1000, new Sort(new SortField(\"sorter\", SortField.Type.STRING))).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQueryRA(new TermQuery (new Term (\"field\", \"one\")), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQueryRA(new MatchAllDocsQuery(), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQueryRA(new TermQuery (new Term (\"field\", \"x\")), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(random, filteredquery,searcher);\n\n    filteredquery = new FilteredQueryRA(new TermQuery (new Term (\"field\", \"y\")), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(random, filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQueryRA(tq, f, useRandomAccess);\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc7674a6feb46b954ebfb8ace9eb0383adb93de9","date":1348214796,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#tFilteredQuery(boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#tFilteredQuery(boolean).mjava","sourceNew":"  private void tFilteredQuery(final boolean useRandomAccess) throws Exception {\n    Query filteredquery = new FilteredQuery(query, filter, randomFilterStrategy(random(), useRandomAccess));\n    ScoreDoc[] hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(random(), filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, null, 1000, new Sort(new SortField(\"sorter\", SortField.Type.STRING))).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQuery(new TermQuery (new Term (\"field\", \"one\")), filter, randomFilterStrategy(random(), useRandomAccess));\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random(), filteredquery,searcher);\n\n    filteredquery = new FilteredQuery(new MatchAllDocsQuery(), filter, randomFilterStrategy(random(), useRandomAccess));\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random(), filteredquery,searcher);\n\n    filteredquery = new FilteredQuery(new TermQuery (new Term (\"field\", \"x\")), filter, randomFilterStrategy(random(), useRandomAccess));\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(random(), filteredquery,searcher);\n\n    filteredquery = new FilteredQuery(new TermQuery (new Term (\"field\", \"y\")), filter, randomFilterStrategy(random(), useRandomAccess));\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(random(), filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQuery(tq, f, randomFilterStrategy(random(), useRandomAccess));\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","sourceOld":"  private void tFilteredQuery(final boolean useRandomAccess) throws Exception {\n    Query filteredquery = new FilteredQueryRA(query, filter, useRandomAccess);\n    ScoreDoc[] hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(random(), filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, null, 1000, new Sort(new SortField(\"sorter\", SortField.Type.STRING))).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQueryRA(new TermQuery (new Term (\"field\", \"one\")), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random(), filteredquery,searcher);\n\n    filteredquery = new FilteredQueryRA(new MatchAllDocsQuery(), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random(), filteredquery,searcher);\n\n    filteredquery = new FilteredQueryRA(new TermQuery (new Term (\"field\", \"x\")), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(random(), filteredquery,searcher);\n\n    filteredquery = new FilteredQueryRA(new TermQuery (new Term (\"field\", \"y\")), filter, useRandomAccess);\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(random(), filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQueryRA(tq, f, useRandomAccess);\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#tFilteredQuery(boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#tFilteredQuery(boolean).mjava","sourceNew":"  private void tFilteredQuery(final boolean useRandomAccess) throws Exception {\n    Query filteredquery = new FilteredQuery(query, filter, randomFilterStrategy(random(), useRandomAccess));\n    ScoreDoc[] hits = searcher.search (filteredquery, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(random(), filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, 1000, new Sort(new SortField(\"sorter\", SortField.Type.STRING))).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQuery(new TermQuery (new Term (\"field\", \"one\")), filter, randomFilterStrategy(random(), useRandomAccess));\n    hits = searcher.search (filteredquery, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random(), filteredquery,searcher);\n\n    filteredquery = new FilteredQuery(new MatchAllDocsQuery(), filter, randomFilterStrategy(random(), useRandomAccess));\n    hits = searcher.search (filteredquery, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random(), filteredquery,searcher);\n\n    filteredquery = new FilteredQuery(new TermQuery (new Term (\"field\", \"x\")), filter, randomFilterStrategy(random(), useRandomAccess));\n    hits = searcher.search (filteredquery, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(random(), filteredquery,searcher);\n\n    filteredquery = new FilteredQuery(new TermQuery (new Term (\"field\", \"y\")), filter, randomFilterStrategy(random(), useRandomAccess));\n    hits = searcher.search (filteredquery, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(random(), filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQuery(tq, f, randomFilterStrategy(random(), useRandomAccess));\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","sourceOld":"  private void tFilteredQuery(final boolean useRandomAccess) throws Exception {\n    Query filteredquery = new FilteredQuery(query, filter, randomFilterStrategy(random(), useRandomAccess));\n    ScoreDoc[] hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(random(), filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, null, 1000, new Sort(new SortField(\"sorter\", SortField.Type.STRING))).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQuery(new TermQuery (new Term (\"field\", \"one\")), filter, randomFilterStrategy(random(), useRandomAccess));\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random(), filteredquery,searcher);\n\n    filteredquery = new FilteredQuery(new MatchAllDocsQuery(), filter, randomFilterStrategy(random(), useRandomAccess));\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random(), filteredquery,searcher);\n\n    filteredquery = new FilteredQuery(new TermQuery (new Term (\"field\", \"x\")), filter, randomFilterStrategy(random(), useRandomAccess));\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(random(), filteredquery,searcher);\n\n    filteredquery = new FilteredQuery(new TermQuery (new Term (\"field\", \"y\")), filter, randomFilterStrategy(random(), useRandomAccess));\n    hits = searcher.search (filteredquery, null, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(random(), filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQuery(tq, f, randomFilterStrategy(random(), useRandomAccess));\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#tFilteredQuery(boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#tFilteredQuery(boolean).mjava","sourceNew":"  private void tFilteredQuery(final boolean useRandomAccess) throws Exception {\n    Query filteredquery = new FilteredQuery(query, filter, randomFilterStrategy(random(), useRandomAccess));\n    ScoreDoc[] hits = searcher.search (filteredquery, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(random(), filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, 1000, new Sort(new SortField(\"sorter\", SortField.Type.STRING))).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQuery(new TermQuery (new Term (\"field\", \"one\")), filter, randomFilterStrategy(random(), useRandomAccess));\n    hits = searcher.search (filteredquery, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random(), filteredquery,searcher);\n\n    filteredquery = new FilteredQuery(new MatchAllDocsQuery(), filter, randomFilterStrategy(random(), useRandomAccess));\n    hits = searcher.search (filteredquery, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random(), filteredquery,searcher);\n\n    filteredquery = new FilteredQuery(new TermQuery (new Term (\"field\", \"x\")), filter, randomFilterStrategy(random(), useRandomAccess));\n    hits = searcher.search (filteredquery, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(random(), filteredquery,searcher);\n\n    filteredquery = new FilteredQuery(new TermQuery (new Term (\"field\", \"y\")), filter, randomFilterStrategy(random(), useRandomAccess));\n    hits = searcher.search (filteredquery, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(random(), filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery.Builder bq1 = new BooleanQuery.Builder();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery.Builder bq2 = new BooleanQuery.Builder();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQuery(tq, f, randomFilterStrategy(random(), useRandomAccess));\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1.build(), bq2.build());\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","sourceOld":"  private void tFilteredQuery(final boolean useRandomAccess) throws Exception {\n    Query filteredquery = new FilteredQuery(query, filter, randomFilterStrategy(random(), useRandomAccess));\n    ScoreDoc[] hits = searcher.search (filteredquery, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(random(), filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, 1000, new Sort(new SortField(\"sorter\", SortField.Type.STRING))).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQuery(new TermQuery (new Term (\"field\", \"one\")), filter, randomFilterStrategy(random(), useRandomAccess));\n    hits = searcher.search (filteredquery, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random(), filteredquery,searcher);\n\n    filteredquery = new FilteredQuery(new MatchAllDocsQuery(), filter, randomFilterStrategy(random(), useRandomAccess));\n    hits = searcher.search (filteredquery, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random(), filteredquery,searcher);\n\n    filteredquery = new FilteredQuery(new TermQuery (new Term (\"field\", \"x\")), filter, randomFilterStrategy(random(), useRandomAccess));\n    hits = searcher.search (filteredquery, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(random(), filteredquery,searcher);\n\n    filteredquery = new FilteredQuery(new TermQuery (new Term (\"field\", \"y\")), filter, randomFilterStrategy(random(), useRandomAccess));\n    hits = searcher.search (filteredquery, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(random(), filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery bq1 = new BooleanQuery();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery bq2 = new BooleanQuery();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQuery(tq, f, randomFilterStrategy(random(), useRandomAccess));\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1, bq2);\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#tFilteredQuery(boolean).mjava","sourceNew":null,"sourceOld":"  private void tFilteredQuery(final boolean useRandomAccess) throws Exception {\n    Query filteredquery = new FilteredQuery(query, filter, randomFilterStrategy(random(), useRandomAccess));\n    ScoreDoc[] hits = searcher.search (filteredquery, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n    QueryUtils.check(random(), filteredquery,searcher);\n\n    hits = searcher.search (filteredquery, 1000, new Sort(new SortField(\"sorter\", SortField.Type.STRING))).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (1, hits[0].doc);\n\n    filteredquery = new FilteredQuery(new TermQuery (new Term (\"field\", \"one\")), filter, randomFilterStrategy(random(), useRandomAccess));\n    hits = searcher.search (filteredquery, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random(), filteredquery,searcher);\n\n    filteredquery = new FilteredQuery(new MatchAllDocsQuery(), filter, randomFilterStrategy(random(), useRandomAccess));\n    hits = searcher.search (filteredquery, 1000).scoreDocs;\n    assertEquals (2, hits.length);\n    QueryUtils.check(random(), filteredquery,searcher);\n\n    filteredquery = new FilteredQuery(new TermQuery (new Term (\"field\", \"x\")), filter, randomFilterStrategy(random(), useRandomAccess));\n    hits = searcher.search (filteredquery, 1000).scoreDocs;\n    assertEquals (1, hits.length);\n    assertEquals (3, hits[0].doc);\n    QueryUtils.check(random(), filteredquery,searcher);\n\n    filteredquery = new FilteredQuery(new TermQuery (new Term (\"field\", \"y\")), filter, randomFilterStrategy(random(), useRandomAccess));\n    hits = searcher.search (filteredquery, 1000).scoreDocs;\n    assertEquals (0, hits.length);\n    QueryUtils.check(random(), filteredquery,searcher);\n    \n    // test boost\n    Filter f = newStaticFilterA();\n    \n    float boost = 2.5f;\n    BooleanQuery.Builder bq1 = new BooleanQuery.Builder();\n    TermQuery tq = new TermQuery (new Term (\"field\", \"one\"));\n    tq.setBoost(boost);\n    bq1.add(tq, Occur.MUST);\n    bq1.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    \n    BooleanQuery.Builder bq2 = new BooleanQuery.Builder();\n    tq = new TermQuery (new Term (\"field\", \"one\"));\n    filteredquery = new FilteredQuery(tq, f, randomFilterStrategy(random(), useRandomAccess));\n    filteredquery.setBoost(boost);\n    bq2.add(filteredquery, Occur.MUST);\n    bq2.add(new TermQuery (new Term (\"field\", \"five\")), Occur.MUST);\n    assertScoreEquals(bq1.build(), bq2.build());\n    \n    assertEquals(boost, filteredquery.getBoost(), 0);\n    assertEquals(1.0f, tq.getBoost(), 0); // the boost value of the underlying query shouldn't have changed \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"1db68e96dd908fcd79ef809095822736aa601d08":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["cc7674a6feb46b954ebfb8ace9eb0383adb93de9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cc7674a6feb46b954ebfb8ace9eb0383adb93de9":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1db68e96dd908fcd79ef809095822736aa601d08"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["1db68e96dd908fcd79ef809095822736aa601d08"],"1db68e96dd908fcd79ef809095822736aa601d08":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["cc7674a6feb46b954ebfb8ace9eb0383adb93de9"],"cc7674a6feb46b954ebfb8ace9eb0383adb93de9":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}