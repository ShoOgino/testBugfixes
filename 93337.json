{"path":"modules/join/src/test/org/apache/lucene/search/TestBlockJoin#testMultiChildTypes().mjava","commits":[{"id":"fe663f89b453e38563a3fd52686e7edf7b4c82a7","date":1318617285,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/test/org/apache/lucene/search/TestBlockJoin#testMultiChildTypes().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    BlockJoinQuery childJobJoinQuery = new BlockJoinQuery(childJobQuery, parentsFilter, BlockJoinQuery.ScoreMode.Avg);\n    BlockJoinQuery childQualificationJoinQuery = new BlockJoinQuery(childQualificationQuery, parentsFilter, BlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    //????? How do I control volume of jobs vs qualifications per parent?\n    BlockJoinCollector c = new BlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    //Examine \"Job\" children\n    boolean showNullPointerIssue=true;\n    if (showNullPointerIssue) {\n      TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n      //assertEquals(1, results.totalHitCount);\n      assertEquals(1, jobResults.totalGroupedHitCount);\n      assertEquals(1, jobResults.groups.length);\n\n      final GroupDocs<Integer> group = jobResults.groups[0];\n      assertEquals(1, group.totalHits);\n\n      Document childJobDoc = s.doc(group.scoreDocs[0].doc);\n      //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n      assertEquals(\"java\", childJobDoc.get(\"skill\"));\n      assertNotNull(group.groupValue);\n      Document parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n    }\n\n    //Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    //!!!!! This next line can null pointer - but only if prior \"jobs\" section called first\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    Document childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    Document parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6442a1e611a2a329dd4725e0419ea23d118b89b3","date":1322422217,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/test/org/apache/lucene/search/TestBlockJoin#testMultiChildTypes().mjava","pathOld":"modules/join/src/test/org/apache/lucene/search/TestBlockJoin#testMultiChildTypes().mjava","sourceNew":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    BlockJoinQuery childJobJoinQuery = new BlockJoinQuery(childJobQuery, parentsFilter, BlockJoinQuery.ScoreMode.Avg);\n    BlockJoinQuery childQualificationJoinQuery = new BlockJoinQuery(childQualificationQuery, parentsFilter, BlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    //????? How do I control volume of jobs vs qualifications per parent?\n    BlockJoinCollector c = new BlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    //Examine \"Job\" children\n    boolean showNullPointerIssue=true;\n    if (showNullPointerIssue) {\n      TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n      //assertEquals(1, results.totalHitCount);\n      assertEquals(1, jobResults.totalGroupedHitCount);\n      assertEquals(1, jobResults.groups.length);\n\n      final GroupDocs<Integer> group = jobResults.groups[0];\n      assertEquals(1, group.totalHits);\n\n      Document childJobDoc = s.doc(group.scoreDocs[0].doc);\n      //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n      assertEquals(\"java\", childJobDoc.get(\"skill\"));\n      assertNotNull(group.groupValue);\n      Document parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n    }\n\n    //Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    //!!!!! This next line can null pointer - but only if prior \"jobs\" section called first\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    Document childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    Document parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    BlockJoinQuery childJobJoinQuery = new BlockJoinQuery(childJobQuery, parentsFilter, BlockJoinQuery.ScoreMode.Avg);\n    BlockJoinQuery childQualificationJoinQuery = new BlockJoinQuery(childQualificationQuery, parentsFilter, BlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    //????? How do I control volume of jobs vs qualifications per parent?\n    BlockJoinCollector c = new BlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    //Examine \"Job\" children\n    boolean showNullPointerIssue=true;\n    if (showNullPointerIssue) {\n      TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n      //assertEquals(1, results.totalHitCount);\n      assertEquals(1, jobResults.totalGroupedHitCount);\n      assertEquals(1, jobResults.groups.length);\n\n      final GroupDocs<Integer> group = jobResults.groups[0];\n      assertEquals(1, group.totalHits);\n\n      Document childJobDoc = s.doc(group.scoreDocs[0].doc);\n      //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n      assertEquals(\"java\", childJobDoc.get(\"skill\"));\n      assertNotNull(group.groupValue);\n      Document parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n    }\n\n    //Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    //!!!!! This next line can null pointer - but only if prior \"jobs\" section called first\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    Document childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    Document parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75f259c6440904f8e40d4e1690aba0b3d616bef4","date":1322423560,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/test/org/apache/lucene/search/TestBlockJoin#testMultiChildTypes().mjava","pathOld":"modules/join/src/test/org/apache/lucene/search/TestBlockJoin#testMultiChildTypes().mjava","sourceNew":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    BlockJoinQuery childJobJoinQuery = new BlockJoinQuery(childJobQuery, parentsFilter, BlockJoinQuery.ScoreMode.Avg);\n    BlockJoinQuery childQualificationJoinQuery = new BlockJoinQuery(childQualificationQuery, parentsFilter, BlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    //????? How do I control volume of jobs vs qualifications per parent?\n    BlockJoinCollector c = new BlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    //Examine \"Job\" children\n    boolean showNullPointerIssue=true;\n    if (showNullPointerIssue) {\n      TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n      //assertEquals(1, results.totalHitCount);\n      assertEquals(1, jobResults.totalGroupedHitCount);\n      assertEquals(1, jobResults.groups.length);\n\n      final GroupDocs<Integer> group = jobResults.groups[0];\n      assertEquals(1, group.totalHits);\n\n      Document childJobDoc = s.doc(group.scoreDocs[0].doc);\n      //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n      assertEquals(\"java\", childJobDoc.get(\"skill\"));\n      assertNotNull(group.groupValue);\n      Document parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n    }\n\n    //Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    //!!!!! This next line can null pointer - but only if prior \"jobs\" section called first\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    Document childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    Document parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    s.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    BlockJoinQuery childJobJoinQuery = new BlockJoinQuery(childJobQuery, parentsFilter, BlockJoinQuery.ScoreMode.Avg);\n    BlockJoinQuery childQualificationJoinQuery = new BlockJoinQuery(childQualificationQuery, parentsFilter, BlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    //????? How do I control volume of jobs vs qualifications per parent?\n    BlockJoinCollector c = new BlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    //Examine \"Job\" children\n    boolean showNullPointerIssue=true;\n    if (showNullPointerIssue) {\n      TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n      //assertEquals(1, results.totalHitCount);\n      assertEquals(1, jobResults.totalGroupedHitCount);\n      assertEquals(1, jobResults.groups.length);\n\n      final GroupDocs<Integer> group = jobResults.groups[0];\n      assertEquals(1, group.totalHits);\n\n      Document childJobDoc = s.doc(group.scoreDocs[0].doc);\n      //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n      assertEquals(\"java\", childJobDoc.get(\"skill\"));\n      assertNotNull(group.groupValue);\n      Document parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n    }\n\n    //Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    //!!!!! This next line can null pointer - but only if prior \"jobs\" section called first\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    Document childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    Document parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f76ccdfca879f9e8881676ce0fb611f44c0f07a2","date":1322905997,"type":5,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testMultiChildTypes().mjava","pathOld":"modules/join/src/test/org/apache/lucene/search/TestBlockJoin#testMultiChildTypes().mjava","sourceNew":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    BlockJoinQuery childJobJoinQuery = new BlockJoinQuery(childJobQuery, parentsFilter, BlockJoinQuery.ScoreMode.Avg);\n    BlockJoinQuery childQualificationJoinQuery = new BlockJoinQuery(childQualificationQuery, parentsFilter, BlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    //????? How do I control volume of jobs vs qualifications per parent?\n    BlockJoinCollector c = new BlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    //Examine \"Job\" children\n    boolean showNullPointerIssue=true;\n    if (showNullPointerIssue) {\n      TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n      //assertEquals(1, results.totalHitCount);\n      assertEquals(1, jobResults.totalGroupedHitCount);\n      assertEquals(1, jobResults.groups.length);\n\n      final GroupDocs<Integer> group = jobResults.groups[0];\n      assertEquals(1, group.totalHits);\n\n      Document childJobDoc = s.doc(group.scoreDocs[0].doc);\n      //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n      assertEquals(\"java\", childJobDoc.get(\"skill\"));\n      assertNotNull(group.groupValue);\n      Document parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n    }\n\n    //Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    //!!!!! This next line can null pointer - but only if prior \"jobs\" section called first\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    Document childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    Document parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    s.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiChildTypes() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeQualification(\"maths\", 1999));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childJobQuery = new BooleanQuery();\n    childJobQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childJobQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    BooleanQuery childQualificationQuery = new BooleanQuery();\n    childQualificationQuery.add(new BooleanClause(new TermQuery(new Term(\"qualification\", \"maths\")), Occur.MUST));\n    childQualificationQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 1980, 2000, true, true), Occur.MUST));\n\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    BlockJoinQuery childJobJoinQuery = new BlockJoinQuery(childJobQuery, parentsFilter, BlockJoinQuery.ScoreMode.Avg);\n    BlockJoinQuery childQualificationJoinQuery = new BlockJoinQuery(childQualificationQuery, parentsFilter, BlockJoinQuery.ScoreMode.Avg);\n\n    // Combine the parent and nested child queries into a single query for a candidate\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(parentQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childJobJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(childQualificationJoinQuery, Occur.MUST));\n\n    //????? How do I control volume of jobs vs qualifications per parent?\n    BlockJoinCollector c = new BlockJoinCollector(Sort.RELEVANCE, 10, true, false);\n\n    s.search(fullQuery, c);\n\n    //Examine \"Job\" children\n    boolean showNullPointerIssue=true;\n    if (showNullPointerIssue) {\n      TopGroups<Integer> jobResults = c.getTopGroups(childJobJoinQuery, null, 0, 10, 0, true);\n\n      //assertEquals(1, results.totalHitCount);\n      assertEquals(1, jobResults.totalGroupedHitCount);\n      assertEquals(1, jobResults.groups.length);\n\n      final GroupDocs<Integer> group = jobResults.groups[0];\n      assertEquals(1, group.totalHits);\n\n      Document childJobDoc = s.doc(group.scoreDocs[0].doc);\n      //System.out.println(\"  doc=\" + group.scoreDocs[0].doc);\n      assertEquals(\"java\", childJobDoc.get(\"skill\"));\n      assertNotNull(group.groupValue);\n      Document parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n    }\n\n    //Now Examine qualification children\n    TopGroups<Integer> qualificationResults = c.getTopGroups(childQualificationJoinQuery, null, 0, 10, 0, true);\n\n    //!!!!! This next line can null pointer - but only if prior \"jobs\" section called first\n    assertEquals(1, qualificationResults.totalGroupedHitCount);\n    assertEquals(1, qualificationResults.groups.length);\n\n    final GroupDocs<Integer> qGroup = qualificationResults.groups[0];\n    assertEquals(1, qGroup.totalHits);\n\n    Document childQualificationDoc = s.doc(qGroup.scoreDocs[0].doc);\n    assertEquals(\"maths\", childQualificationDoc.get(\"qualification\"));\n    assertNotNull(qGroup.groupValue);\n    Document parentDoc = s.doc(qGroup.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n\n    s.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6442a1e611a2a329dd4725e0419ea23d118b89b3":["fe663f89b453e38563a3fd52686e7edf7b4c82a7"],"fe663f89b453e38563a3fd52686e7edf7b4c82a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"75f259c6440904f8e40d4e1690aba0b3d616bef4":["6442a1e611a2a329dd4725e0419ea23d118b89b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f76ccdfca879f9e8881676ce0fb611f44c0f07a2":["75f259c6440904f8e40d4e1690aba0b3d616bef4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f76ccdfca879f9e8881676ce0fb611f44c0f07a2"]},"commit2Childs":{"6442a1e611a2a329dd4725e0419ea23d118b89b3":["75f259c6440904f8e40d4e1690aba0b3d616bef4"],"fe663f89b453e38563a3fd52686e7edf7b4c82a7":["6442a1e611a2a329dd4725e0419ea23d118b89b3"],"75f259c6440904f8e40d4e1690aba0b3d616bef4":["f76ccdfca879f9e8881676ce0fb611f44c0f07a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe663f89b453e38563a3fd52686e7edf7b4c82a7"],"f76ccdfca879f9e8881676ce0fb611f44c0f07a2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}