{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource#testWithScore().mjava","commits":[{"id":"4edc984f0f4ac77c37e48ace2932f780f888453c","date":1388475218,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource#testWithScore().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestTaxonomyFacetSumValueSource#testWithScore().mjava","sourceNew":"  public void testWithScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetsConfig config = new FacetsConfig();\n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"price\", (i+1)));\n      doc.add(new FacetField(\"a\", Integer.toString(i % 2)));\n      iw.addDocument(config.build(taxoWriter, doc));\n    }\n    \n    DirectoryReader r = DirectoryReader.open(iw, true);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    ValueSource valueSource = new ValueSource() {\n      @Override\n      public FunctionValues getValues(@SuppressWarnings(\"rawtypes\") Map context, AtomicReaderContext readerContext) throws IOException {\n        final Scorer scorer = (Scorer) context.get(\"scorer\");\n        assert scorer != null;\n        return new DoubleDocValues(this) {\n          @Override\n          public double doubleVal(int document) {\n            try {\n              return scorer.score();\n            } catch (IOException exception) {\n              throw new RuntimeException(exception);\n            }\n          }\n        };\n      }\n\n      @Override public boolean equals(Object o) { return o == this; }\n      @Override public int hashCode() { return System.identityHashCode(this); }\n      @Override public String description() { return \"score()\"; }\n    };\n    \n    FacetsCollector fc = new FacetsCollector(true);\n    // score documents by their 'price' field - makes asserting the correct counts for the categories easier\n    Query q = new FunctionQuery(new LongFieldSource(\"price\"));\n    FacetsCollector.search(newSearcher(r), q, 10, fc);\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, fc, valueSource);\n    \n    assertEquals(\"dim=a path=[] value=10.0 childCount=2\\n  1 (6.0)\\n  0 (4.0)\\n\", facets.getTopChildren(10, \"a\").toString());\n    \n    IOUtils.close(taxoWriter, iw, taxoReader, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  public void testWithScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetsConfig config = new FacetsConfig();\n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"price\", (i+1)));\n      doc.add(new FacetField(\"a\", Integer.toString(i % 2)));\n      iw.addDocument(config.build(taxoWriter, doc));\n    }\n    \n    DirectoryReader r = DirectoryReader.open(iw, true);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    ValueSource valueSource = new ValueSource() {\n      @Override\n      public FunctionValues getValues(@SuppressWarnings(\"rawtypes\") Map context, AtomicReaderContext readerContext) throws IOException {\n        final Scorer scorer = (Scorer) context.get(\"scorer\");\n        assert scorer != null;\n        return new DoubleDocValues(this) {\n          @Override\n          public double doubleVal(int document) {\n            try {\n              return scorer.score();\n            } catch (IOException exception) {\n              throw new RuntimeException(exception);\n            }\n          }\n        };\n      }\n\n      @Override public boolean equals(Object o) { return o == this; }\n      @Override public int hashCode() { return System.identityHashCode(this); }\n      @Override public String description() { return \"score()\"; }\n    };\n    \n    FacetsCollector fc = new FacetsCollector(true);\n    TopScoreDocCollector tsdc = TopScoreDocCollector.create(10, true);\n    // score documents by their 'price' field - makes asserting the correct counts for the categories easier\n    Query q = new FunctionQuery(new LongFieldSource(\"price\"));\n    FacetsCollector.search(newSearcher(r), q, 10, fc);\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, fc, valueSource);\n    \n    assertEquals(\"dim=a path=[] value=10.0 childCount=2\\n  1 (6.0)\\n  0 (4.0)\\n\", facets.getTopChildren(10, \"a\").toString());\n    \n    IOUtils.close(taxoWriter, iw, taxoReader, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource#testWithScore().mjava","pathOld":"/dev/null","sourceNew":"  public void testWithScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetsConfig config = new FacetsConfig();\n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"price\", (i+1)));\n      doc.add(new FacetField(\"a\", Integer.toString(i % 2)));\n      iw.addDocument(config.build(taxoWriter, doc));\n    }\n    \n    DirectoryReader r = DirectoryReader.open(iw, true);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    ValueSource valueSource = new ValueSource() {\n      @Override\n      public FunctionValues getValues(@SuppressWarnings(\"rawtypes\") Map context, AtomicReaderContext readerContext) throws IOException {\n        final Scorer scorer = (Scorer) context.get(\"scorer\");\n        assert scorer != null;\n        return new DoubleDocValues(this) {\n          @Override\n          public double doubleVal(int document) {\n            try {\n              return scorer.score();\n            } catch (IOException exception) {\n              throw new RuntimeException(exception);\n            }\n          }\n        };\n      }\n\n      @Override public boolean equals(Object o) { return o == this; }\n      @Override public int hashCode() { return System.identityHashCode(this); }\n      @Override public String description() { return \"score()\"; }\n    };\n    \n    FacetsCollector fc = new FacetsCollector(true);\n    // score documents by their 'price' field - makes asserting the correct counts for the categories easier\n    Query q = new FunctionQuery(new LongFieldSource(\"price\"));\n    FacetsCollector.search(newSearcher(r), q, 10, fc);\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, fc, valueSource);\n    \n    assertEquals(\"dim=a path=[] value=10.0 childCount=2\\n  1 (6.0)\\n  0 (4.0)\\n\", facets.getTopChildren(10, \"a\").toString());\n    \n    IOUtils.close(taxoWriter, iw, taxoReader, taxoDir, r, indexDir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource#testWithScore().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource#testWithScore().mjava","sourceNew":"  public void testWithScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetsConfig config = new FacetsConfig();\n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"price\", (i+1)));\n      doc.add(new FacetField(\"a\", Integer.toString(i % 2)));\n      iw.addDocument(config.build(taxoWriter, doc));\n    }\n    \n    DirectoryReader r = DirectoryReader.open(iw, true);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    ValueSource valueSource = new ValueSource() {\n      @Override\n      public FunctionValues getValues(@SuppressWarnings(\"rawtypes\") Map context, AtomicReaderContext readerContext) throws IOException {\n        final Scorer scorer = (Scorer) context.get(\"scorer\");\n        assert scorer != null;\n        return new DoubleDocValues(this) {\n          @Override\n          public double doubleVal(int document) {\n            try {\n              return scorer.score();\n            } catch (IOException exception) {\n              throw new RuntimeException(exception);\n            }\n          }\n        };\n      }\n\n      @Override public boolean equals(Object o) { return o == this; }\n      @Override public int hashCode() { return System.identityHashCode(this); }\n      @Override public String description() { return \"score()\"; }\n    };\n    \n    FacetsCollector fc = new FacetsCollector(true);\n    // score documents by their 'price' field - makes asserting the correct counts for the categories easier\n    Query q = new FunctionQuery(new LongFieldSource(\"price\"));\n    FacetsCollector.search(newSearcher(r), q, 10, fc);\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, fc, valueSource);\n    \n    assertEquals(\"dim=a path=[] value=10.0 childCount=2\\n  1 (6.0)\\n  0 (4.0)\\n\", facets.getTopChildren(10, \"a\").toString());\n\n    iw.shutdown();\n    IOUtils.close(taxoWriter, taxoReader, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  public void testWithScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetsConfig config = new FacetsConfig();\n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"price\", (i+1)));\n      doc.add(new FacetField(\"a\", Integer.toString(i % 2)));\n      iw.addDocument(config.build(taxoWriter, doc));\n    }\n    \n    DirectoryReader r = DirectoryReader.open(iw, true);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    ValueSource valueSource = new ValueSource() {\n      @Override\n      public FunctionValues getValues(@SuppressWarnings(\"rawtypes\") Map context, AtomicReaderContext readerContext) throws IOException {\n        final Scorer scorer = (Scorer) context.get(\"scorer\");\n        assert scorer != null;\n        return new DoubleDocValues(this) {\n          @Override\n          public double doubleVal(int document) {\n            try {\n              return scorer.score();\n            } catch (IOException exception) {\n              throw new RuntimeException(exception);\n            }\n          }\n        };\n      }\n\n      @Override public boolean equals(Object o) { return o == this; }\n      @Override public int hashCode() { return System.identityHashCode(this); }\n      @Override public String description() { return \"score()\"; }\n    };\n    \n    FacetsCollector fc = new FacetsCollector(true);\n    // score documents by their 'price' field - makes asserting the correct counts for the categories easier\n    Query q = new FunctionQuery(new LongFieldSource(\"price\"));\n    FacetsCollector.search(newSearcher(r), q, 10, fc);\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, fc, valueSource);\n    \n    assertEquals(\"dim=a path=[] value=10.0 childCount=2\\n  1 (6.0)\\n  0 (4.0)\\n\", facets.getTopChildren(10, \"a\").toString());\n    \n    IOUtils.close(taxoWriter, iw, taxoReader, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource#testWithScore().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource#testWithScore().mjava","sourceNew":"  public void testWithScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    FacetsConfig config = new FacetsConfig();\n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"price\", (i+1)));\n      doc.add(new FacetField(\"a\", Integer.toString(i % 2)));\n      iw.addDocument(config.build(taxoWriter, doc));\n    }\n    \n    DirectoryReader r = DirectoryReader.open(iw, true);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    ValueSource valueSource = new ValueSource() {\n      @Override\n      public FunctionValues getValues(@SuppressWarnings(\"rawtypes\") Map context, AtomicReaderContext readerContext) throws IOException {\n        final Scorer scorer = (Scorer) context.get(\"scorer\");\n        assert scorer != null;\n        return new DoubleDocValues(this) {\n          @Override\n          public double doubleVal(int document) {\n            try {\n              return scorer.score();\n            } catch (IOException exception) {\n              throw new RuntimeException(exception);\n            }\n          }\n        };\n      }\n\n      @Override public boolean equals(Object o) { return o == this; }\n      @Override public int hashCode() { return System.identityHashCode(this); }\n      @Override public String description() { return \"score()\"; }\n    };\n    \n    FacetsCollector fc = new FacetsCollector(true);\n    // score documents by their 'price' field - makes asserting the correct counts for the categories easier\n    Query q = new FunctionQuery(new LongFieldSource(\"price\"));\n    FacetsCollector.search(newSearcher(r), q, 10, fc);\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, fc, valueSource);\n    \n    assertEquals(\"dim=a path=[] value=10.0 childCount=2\\n  1 (6.0)\\n  0 (4.0)\\n\", facets.getTopChildren(10, \"a\").toString());\n\n    iw.shutdown();\n    IOUtils.close(taxoWriter, taxoReader, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  public void testWithScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetsConfig config = new FacetsConfig();\n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"price\", (i+1)));\n      doc.add(new FacetField(\"a\", Integer.toString(i % 2)));\n      iw.addDocument(config.build(taxoWriter, doc));\n    }\n    \n    DirectoryReader r = DirectoryReader.open(iw, true);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    ValueSource valueSource = new ValueSource() {\n      @Override\n      public FunctionValues getValues(@SuppressWarnings(\"rawtypes\") Map context, AtomicReaderContext readerContext) throws IOException {\n        final Scorer scorer = (Scorer) context.get(\"scorer\");\n        assert scorer != null;\n        return new DoubleDocValues(this) {\n          @Override\n          public double doubleVal(int document) {\n            try {\n              return scorer.score();\n            } catch (IOException exception) {\n              throw new RuntimeException(exception);\n            }\n          }\n        };\n      }\n\n      @Override public boolean equals(Object o) { return o == this; }\n      @Override public int hashCode() { return System.identityHashCode(this); }\n      @Override public String description() { return \"score()\"; }\n    };\n    \n    FacetsCollector fc = new FacetsCollector(true);\n    // score documents by their 'price' field - makes asserting the correct counts for the categories easier\n    Query q = new FunctionQuery(new LongFieldSource(\"price\"));\n    FacetsCollector.search(newSearcher(r), q, 10, fc);\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, fc, valueSource);\n    \n    assertEquals(\"dim=a path=[] value=10.0 childCount=2\\n  1 (6.0)\\n  0 (4.0)\\n\", facets.getTopChildren(10, \"a\").toString());\n\n    iw.shutdown();\n    IOUtils.close(taxoWriter, taxoReader, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource#testWithScore().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource#testWithScore().mjava","sourceNew":"  public void testWithScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    FacetsConfig config = new FacetsConfig();\n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"price\", (i+1)));\n      doc.add(new FacetField(\"a\", Integer.toString(i % 2)));\n      iw.addDocument(config.build(taxoWriter, doc));\n    }\n    \n    DirectoryReader r = DirectoryReader.open(iw, true);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    ValueSource valueSource = new ValueSource() {\n      @Override\n      public FunctionValues getValues(@SuppressWarnings(\"rawtypes\") Map context, AtomicReaderContext readerContext) throws IOException {\n        final Scorer scorer = (Scorer) context.get(\"scorer\");\n        assert scorer != null;\n        return new DoubleDocValues(this) {\n          @Override\n          public double doubleVal(int document) {\n            try {\n              return scorer.score();\n            } catch (IOException exception) {\n              throw new RuntimeException(exception);\n            }\n          }\n        };\n      }\n\n      @Override public boolean equals(Object o) { return o == this; }\n      @Override public int hashCode() { return System.identityHashCode(this); }\n      @Override public String description() { return \"score()\"; }\n    };\n    \n    FacetsCollector fc = new FacetsCollector(true);\n    // score documents by their 'price' field - makes asserting the correct counts for the categories easier\n    Query q = new FunctionQuery(new LongFieldSource(\"price\"));\n    FacetsCollector.search(newSearcher(r), q, 10, fc);\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, fc, valueSource);\n    \n    assertEquals(\"dim=a path=[] value=10.0 childCount=2\\n  1 (6.0)\\n  0 (4.0)\\n\", facets.getTopChildren(10, \"a\").toString());\n\n    iw.close();\n    IOUtils.close(taxoWriter, taxoReader, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  public void testWithScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    FacetsConfig config = new FacetsConfig();\n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"price\", (i+1)));\n      doc.add(new FacetField(\"a\", Integer.toString(i % 2)));\n      iw.addDocument(config.build(taxoWriter, doc));\n    }\n    \n    DirectoryReader r = DirectoryReader.open(iw, true);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    ValueSource valueSource = new ValueSource() {\n      @Override\n      public FunctionValues getValues(@SuppressWarnings(\"rawtypes\") Map context, AtomicReaderContext readerContext) throws IOException {\n        final Scorer scorer = (Scorer) context.get(\"scorer\");\n        assert scorer != null;\n        return new DoubleDocValues(this) {\n          @Override\n          public double doubleVal(int document) {\n            try {\n              return scorer.score();\n            } catch (IOException exception) {\n              throw new RuntimeException(exception);\n            }\n          }\n        };\n      }\n\n      @Override public boolean equals(Object o) { return o == this; }\n      @Override public int hashCode() { return System.identityHashCode(this); }\n      @Override public String description() { return \"score()\"; }\n    };\n    \n    FacetsCollector fc = new FacetsCollector(true);\n    // score documents by their 'price' field - makes asserting the correct counts for the categories easier\n    Query q = new FunctionQuery(new LongFieldSource(\"price\"));\n    FacetsCollector.search(newSearcher(r), q, 10, fc);\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, fc, valueSource);\n    \n    assertEquals(\"dim=a path=[] value=10.0 childCount=2\\n  1 (6.0)\\n  0 (4.0)\\n\", facets.getTopChildren(10, \"a\").toString());\n\n    iw.shutdown();\n    IOUtils.close(taxoWriter, taxoReader, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource#testWithScore().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource#testWithScore().mjava","sourceNew":"  public void testWithScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    FacetsConfig config = new FacetsConfig();\n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"price\", (i+1)));\n      doc.add(new FacetField(\"a\", Integer.toString(i % 2)));\n      iw.addDocument(config.build(taxoWriter, doc));\n    }\n    \n    DirectoryReader r = DirectoryReader.open(iw, true);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    ValueSource valueSource = new ValueSource() {\n      @Override\n      public FunctionValues getValues(@SuppressWarnings(\"rawtypes\") Map context, LeafReaderContext readerContext) throws IOException {\n        final Scorer scorer = (Scorer) context.get(\"scorer\");\n        assert scorer != null;\n        return new DoubleDocValues(this) {\n          @Override\n          public double doubleVal(int document) {\n            try {\n              return scorer.score();\n            } catch (IOException exception) {\n              throw new RuntimeException(exception);\n            }\n          }\n        };\n      }\n\n      @Override public boolean equals(Object o) { return o == this; }\n      @Override public int hashCode() { return System.identityHashCode(this); }\n      @Override public String description() { return \"score()\"; }\n    };\n    \n    FacetsCollector fc = new FacetsCollector(true);\n    // score documents by their 'price' field - makes asserting the correct counts for the categories easier\n    Query q = new FunctionQuery(new LongFieldSource(\"price\"));\n    FacetsCollector.search(newSearcher(r), q, 10, fc);\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, fc, valueSource);\n    \n    assertEquals(\"dim=a path=[] value=10.0 childCount=2\\n  1 (6.0)\\n  0 (4.0)\\n\", facets.getTopChildren(10, \"a\").toString());\n\n    iw.close();\n    IOUtils.close(taxoWriter, taxoReader, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  public void testWithScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    FacetsConfig config = new FacetsConfig();\n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"price\", (i+1)));\n      doc.add(new FacetField(\"a\", Integer.toString(i % 2)));\n      iw.addDocument(config.build(taxoWriter, doc));\n    }\n    \n    DirectoryReader r = DirectoryReader.open(iw, true);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    ValueSource valueSource = new ValueSource() {\n      @Override\n      public FunctionValues getValues(@SuppressWarnings(\"rawtypes\") Map context, AtomicReaderContext readerContext) throws IOException {\n        final Scorer scorer = (Scorer) context.get(\"scorer\");\n        assert scorer != null;\n        return new DoubleDocValues(this) {\n          @Override\n          public double doubleVal(int document) {\n            try {\n              return scorer.score();\n            } catch (IOException exception) {\n              throw new RuntimeException(exception);\n            }\n          }\n        };\n      }\n\n      @Override public boolean equals(Object o) { return o == this; }\n      @Override public int hashCode() { return System.identityHashCode(this); }\n      @Override public String description() { return \"score()\"; }\n    };\n    \n    FacetsCollector fc = new FacetsCollector(true);\n    // score documents by their 'price' field - makes asserting the correct counts for the categories easier\n    Query q = new FunctionQuery(new LongFieldSource(\"price\"));\n    FacetsCollector.search(newSearcher(r), q, 10, fc);\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, fc, valueSource);\n    \n    assertEquals(\"dim=a path=[] value=10.0 childCount=2\\n  1 (6.0)\\n  0 (4.0)\\n\", facets.getTopChildren(10, \"a\").toString());\n\n    iw.close();\n    IOUtils.close(taxoWriter, taxoReader, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource#testWithScore().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource#testWithScore().mjava","sourceNew":"  public void testWithScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    FacetsConfig config = new FacetsConfig();\n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"price\", (i+1)));\n      doc.add(new FacetField(\"a\", Integer.toString(i % 2)));\n      iw.addDocument(config.build(taxoWriter, doc));\n    }\n    \n    DirectoryReader r = DirectoryReader.open(iw);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    ValueSource valueSource = new ValueSource() {\n      @Override\n      public FunctionValues getValues(@SuppressWarnings(\"rawtypes\") Map context, LeafReaderContext readerContext) throws IOException {\n        final Scorer scorer = (Scorer) context.get(\"scorer\");\n        assert scorer != null;\n        return new DoubleDocValues(this) {\n          @Override\n          public double doubleVal(int document) {\n            try {\n              return scorer.score();\n            } catch (IOException exception) {\n              throw new RuntimeException(exception);\n            }\n          }\n        };\n      }\n\n      @Override public boolean equals(Object o) { return o == this; }\n      @Override public int hashCode() { return System.identityHashCode(this); }\n      @Override public String description() { return \"score()\"; }\n    };\n    \n    FacetsCollector fc = new FacetsCollector(true);\n    // score documents by their 'price' field - makes asserting the correct counts for the categories easier\n    Query q = new FunctionQuery(new LongFieldSource(\"price\"));\n    FacetsCollector.search(newSearcher(r), q, 10, fc);\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, fc, valueSource);\n    \n    assertEquals(\"dim=a path=[] value=10.0 childCount=2\\n  1 (6.0)\\n  0 (4.0)\\n\", facets.getTopChildren(10, \"a\").toString());\n\n    iw.close();\n    IOUtils.close(taxoWriter, taxoReader, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  public void testWithScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    FacetsConfig config = new FacetsConfig();\n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"price\", (i+1)));\n      doc.add(new FacetField(\"a\", Integer.toString(i % 2)));\n      iw.addDocument(config.build(taxoWriter, doc));\n    }\n    \n    DirectoryReader r = DirectoryReader.open(iw, true);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    ValueSource valueSource = new ValueSource() {\n      @Override\n      public FunctionValues getValues(@SuppressWarnings(\"rawtypes\") Map context, LeafReaderContext readerContext) throws IOException {\n        final Scorer scorer = (Scorer) context.get(\"scorer\");\n        assert scorer != null;\n        return new DoubleDocValues(this) {\n          @Override\n          public double doubleVal(int document) {\n            try {\n              return scorer.score();\n            } catch (IOException exception) {\n              throw new RuntimeException(exception);\n            }\n          }\n        };\n      }\n\n      @Override public boolean equals(Object o) { return o == this; }\n      @Override public int hashCode() { return System.identityHashCode(this); }\n      @Override public String description() { return \"score()\"; }\n    };\n    \n    FacetsCollector fc = new FacetsCollector(true);\n    // score documents by their 'price' field - makes asserting the correct counts for the categories easier\n    Query q = new FunctionQuery(new LongFieldSource(\"price\"));\n    FacetsCollector.search(newSearcher(r), q, 10, fc);\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, fc, valueSource);\n    \n    assertEquals(\"dim=a path=[] value=10.0 childCount=2\\n  1 (6.0)\\n  0 (4.0)\\n\", facets.getTopChildren(10, \"a\").toString());\n\n    iw.close();\n    IOUtils.close(taxoWriter, taxoReader, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9190e1c8e3ef93e60501a940d72d4cab5c78ff33","date":1483794433,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource#testWithScore().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource#testWithScore().mjava","sourceNew":"  public void testWithScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    FacetsConfig config = new FacetsConfig();\n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"price\", (i+1)));\n      doc.add(new FacetField(\"a\", Integer.toString(i % 2)));\n      iw.addDocument(config.build(taxoWriter, doc));\n    }\n    \n    DirectoryReader r = DirectoryReader.open(iw);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n    \n    FacetsCollector fc = new FacetsCollector(true);\n    // score documents by their 'price' field - makes asserting the correct counts for the categories easier\n    Query q = new FunctionQuery(new LongFieldSource(\"price\"));\n    FacetsCollector.search(newSearcher(r), q, 10, fc);\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, fc, DoubleValuesSource.SCORES);\n    \n    assertEquals(\"dim=a path=[] value=10.0 childCount=2\\n  1 (6.0)\\n  0 (4.0)\\n\", facets.getTopChildren(10, \"a\").toString());\n\n    iw.close();\n    IOUtils.close(taxoWriter, taxoReader, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  public void testWithScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    FacetsConfig config = new FacetsConfig();\n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"price\", (i+1)));\n      doc.add(new FacetField(\"a\", Integer.toString(i % 2)));\n      iw.addDocument(config.build(taxoWriter, doc));\n    }\n    \n    DirectoryReader r = DirectoryReader.open(iw);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    ValueSource valueSource = new ValueSource() {\n      @Override\n      public FunctionValues getValues(@SuppressWarnings(\"rawtypes\") Map context, LeafReaderContext readerContext) throws IOException {\n        final Scorer scorer = (Scorer) context.get(\"scorer\");\n        assert scorer != null;\n        return new DoubleDocValues(this) {\n          @Override\n          public double doubleVal(int document) {\n            try {\n              return scorer.score();\n            } catch (IOException exception) {\n              throw new RuntimeException(exception);\n            }\n          }\n        };\n      }\n\n      @Override public boolean equals(Object o) { return o == this; }\n      @Override public int hashCode() { return System.identityHashCode(this); }\n      @Override public String description() { return \"score()\"; }\n    };\n    \n    FacetsCollector fc = new FacetsCollector(true);\n    // score documents by their 'price' field - makes asserting the correct counts for the categories easier\n    Query q = new FunctionQuery(new LongFieldSource(\"price\"));\n    FacetsCollector.search(newSearcher(r), q, 10, fc);\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, fc, valueSource);\n    \n    assertEquals(\"dim=a path=[] value=10.0 childCount=2\\n  1 (6.0)\\n  0 (4.0)\\n\", facets.getTopChildren(10, \"a\").toString());\n\n    iw.close();\n    IOUtils.close(taxoWriter, taxoReader, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource#testWithScore().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource#testWithScore().mjava","sourceNew":"  public void testWithScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    FacetsConfig config = new FacetsConfig();\n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"price\", (i+1)));\n      doc.add(new FacetField(\"a\", Integer.toString(i % 2)));\n      iw.addDocument(config.build(taxoWriter, doc));\n    }\n    \n    DirectoryReader r = DirectoryReader.open(iw);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n    \n    FacetsCollector fc = new FacetsCollector(true);\n    // score documents by their 'price' field - makes asserting the correct counts for the categories easier\n    Query q = new FunctionQuery(new LongFieldSource(\"price\"));\n    FacetsCollector.search(newSearcher(r), q, 10, fc);\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, fc, DoubleValuesSource.SCORES);\n    \n    assertEquals(\"dim=a path=[] value=10.0 childCount=2\\n  1 (6.0)\\n  0 (4.0)\\n\", facets.getTopChildren(10, \"a\").toString());\n\n    iw.close();\n    IOUtils.close(taxoWriter, taxoReader, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  public void testWithScore() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    FacetsConfig config = new FacetsConfig();\n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"price\", (i+1)));\n      doc.add(new FacetField(\"a\", Integer.toString(i % 2)));\n      iw.addDocument(config.build(taxoWriter, doc));\n    }\n    \n    DirectoryReader r = DirectoryReader.open(iw);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n\n    ValueSource valueSource = new ValueSource() {\n      @Override\n      public FunctionValues getValues(@SuppressWarnings(\"rawtypes\") Map context, LeafReaderContext readerContext) throws IOException {\n        final Scorer scorer = (Scorer) context.get(\"scorer\");\n        assert scorer != null;\n        return new DoubleDocValues(this) {\n          @Override\n          public double doubleVal(int document) {\n            try {\n              return scorer.score();\n            } catch (IOException exception) {\n              throw new RuntimeException(exception);\n            }\n          }\n        };\n      }\n\n      @Override public boolean equals(Object o) { return o == this; }\n      @Override public int hashCode() { return System.identityHashCode(this); }\n      @Override public String description() { return \"score()\"; }\n    };\n    \n    FacetsCollector fc = new FacetsCollector(true);\n    // score documents by their 'price' field - makes asserting the correct counts for the categories easier\n    Query q = new FunctionQuery(new LongFieldSource(\"price\"));\n    FacetsCollector.search(newSearcher(r), q, 10, fc);\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, fc, valueSource);\n    \n    assertEquals(\"dim=a path=[] value=10.0 childCount=2\\n  1 (6.0)\\n  0 (4.0)\\n\", facets.getTopChildren(10, \"a\").toString());\n\n    iw.close();\n    IOUtils.close(taxoWriter, taxoReader, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2a1862266772deb28cdcb7d996b64d2177022687":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"4edc984f0f4ac77c37e48ace2932f780f888453c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4edc984f0f4ac77c37e48ace2932f780f888453c"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["2a1862266772deb28cdcb7d996b64d2177022687","9190e1c8e3ef93e60501a940d72d4cab5c78ff33"],"9190e1c8e3ef93e60501a940d72d4cab5c78ff33":["2a1862266772deb28cdcb7d996b64d2177022687"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9190e1c8e3ef93e60501a940d72d4cab5c78ff33"]},"commit2Childs":{"2a1862266772deb28cdcb7d996b64d2177022687":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","9190e1c8e3ef93e60501a940d72d4cab5c78ff33"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4edc984f0f4ac77c37e48ace2932f780f888453c","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"4edc984f0f4ac77c37e48ace2932f780f888453c":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"9190e1c8e3ef93e60501a940d72d4cab5c78ff33":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["2a1862266772deb28cdcb7d996b64d2177022687"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}