{"path":"src/java/org/apache/lucene/index/FieldsReader#doc(int,FieldSelector).mjava","commits":[{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#doc(int,FieldSelector).mjava","pathOld":"/dev/null","sourceNew":"  final Document doc(int n, FieldSelector fieldSelector) throws IOException {\n    indexStream.seek(n * 8L);\n    long position = indexStream.readLong();\n    fieldsStream.seek(position);\n\n    Document doc = new Document();\n    int numFields = fieldsStream.readVInt();\n    for (int i = 0; i < numFields; i++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fi = fieldInfos.fieldInfo(fieldNumber);\n      FieldSelectorResult acceptField = fieldSelector == null ? FieldSelectorResult.LOAD : fieldSelector.accept(fi.name);\n      boolean lazy = acceptField.equals(FieldSelectorResult.LAZY_LOAD) == true;\n      \n      byte bits = fieldsStream.readByte();\n      boolean compressed = (bits & FieldsWriter.FIELD_IS_COMPRESSED) != 0;\n      boolean tokenize = (bits & FieldsWriter.FIELD_IS_TOKENIZED) != 0;\n      boolean binary = (bits & FieldsWriter.FIELD_IS_BINARY) != 0;\n      if (acceptField.equals(FieldSelectorResult.LOAD) == true) {\n        addField(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.LOAD_AND_BREAK) == true){\n        addField(doc, fi, binary, compressed, tokenize);\n        break;//Get out of this loop\n      }\n      else if (lazy == true){\n        addFieldLazy(doc, fi, binary, compressed, tokenize);\n      }       \n      else {\n        skipField(binary, compressed);\n      }\n    }\n\n    return doc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0c0427a35a68b16ec73d3bf5f27e57719915f166","date":1155449527,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#doc(int,FieldSelector).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#doc(int,FieldSelector).mjava","sourceNew":"  final Document doc(int n, FieldSelector fieldSelector) throws IOException {\n    indexStream.seek(n * 8L);\n    long position = indexStream.readLong();\n    fieldsStream.seek(position);\n\n    Document doc = new Document();\n    int numFields = fieldsStream.readVInt();\n    for (int i = 0; i < numFields; i++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fi = fieldInfos.fieldInfo(fieldNumber);\n      FieldSelectorResult acceptField = fieldSelector == null ? FieldSelectorResult.LOAD : fieldSelector.accept(fi.name);\n      boolean lazy = acceptField.equals(FieldSelectorResult.LAZY_LOAD) == true;\n      \n      byte bits = fieldsStream.readByte();\n      boolean compressed = (bits & FieldsWriter.FIELD_IS_COMPRESSED) != 0;\n      boolean tokenize = (bits & FieldsWriter.FIELD_IS_TOKENIZED) != 0;\n      boolean binary = (bits & FieldsWriter.FIELD_IS_BINARY) != 0;\n      if (acceptField.equals(FieldSelectorResult.LOAD) == true) {\n        addField(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.LOAD_FOR_MERGE) == true) {\n        addFieldForMerge(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.LOAD_AND_BREAK) == true){\n        addField(doc, fi, binary, compressed, tokenize);\n        break;//Get out of this loop\n      }\n      else if (lazy == true){\n        addFieldLazy(doc, fi, binary, compressed, tokenize);\n      }       \n      else {\n        skipField(binary, compressed);\n      }\n    }\n\n    return doc;\n  }\n\n","sourceOld":"  final Document doc(int n, FieldSelector fieldSelector) throws IOException {\n    indexStream.seek(n * 8L);\n    long position = indexStream.readLong();\n    fieldsStream.seek(position);\n\n    Document doc = new Document();\n    int numFields = fieldsStream.readVInt();\n    for (int i = 0; i < numFields; i++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fi = fieldInfos.fieldInfo(fieldNumber);\n      FieldSelectorResult acceptField = fieldSelector == null ? FieldSelectorResult.LOAD : fieldSelector.accept(fi.name);\n      boolean lazy = acceptField.equals(FieldSelectorResult.LAZY_LOAD) == true;\n      \n      byte bits = fieldsStream.readByte();\n      boolean compressed = (bits & FieldsWriter.FIELD_IS_COMPRESSED) != 0;\n      boolean tokenize = (bits & FieldsWriter.FIELD_IS_TOKENIZED) != 0;\n      boolean binary = (bits & FieldsWriter.FIELD_IS_BINARY) != 0;\n      if (acceptField.equals(FieldSelectorResult.LOAD) == true) {\n        addField(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.LOAD_AND_BREAK) == true){\n        addField(doc, fi, binary, compressed, tokenize);\n        break;//Get out of this loop\n      }\n      else if (lazy == true){\n        addFieldLazy(doc, fi, binary, compressed, tokenize);\n      }       \n      else {\n        skipField(binary, compressed);\n      }\n    }\n\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f9ca773178dc09e3e8fb1c66dde5f8dbd6f4644","date":1170990980,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#doc(int,FieldSelector).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#doc(int,FieldSelector).mjava","sourceNew":"  final Document doc(int n, FieldSelector fieldSelector) throws IOException {\n    indexStream.seek(n * 8L);\n    long position = indexStream.readLong();\n    fieldsStream.seek(position);\n\n    Document doc = new Document();\n    int numFields = fieldsStream.readVInt();\n    for (int i = 0; i < numFields; i++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fi = fieldInfos.fieldInfo(fieldNumber);\n      FieldSelectorResult acceptField = fieldSelector == null ? FieldSelectorResult.LOAD : fieldSelector.accept(fi.name);\n      \n      byte bits = fieldsStream.readByte();\n      boolean compressed = (bits & FieldsWriter.FIELD_IS_COMPRESSED) != 0;\n      boolean tokenize = (bits & FieldsWriter.FIELD_IS_TOKENIZED) != 0;\n      boolean binary = (bits & FieldsWriter.FIELD_IS_BINARY) != 0;\n      //TODO: Find an alternative approach here if this list continues to grow beyond the\n      //list of 5 or 6 currently here.  See Lucene 762 for discussion\n      if (acceptField.equals(FieldSelectorResult.LOAD)) {\n        addField(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.LOAD_FOR_MERGE)) {\n        addFieldForMerge(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.LOAD_AND_BREAK)){\n        addField(doc, fi, binary, compressed, tokenize);\n        break;//Get out of this loop\n      }\n      else if (acceptField.equals(FieldSelectorResult.LAZY_LOAD)) {\n        addFieldLazy(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.SIZE)){\n        skipField(binary, compressed, addFieldSize(doc, fi, binary, compressed));\n      }\n      else if (acceptField.equals(FieldSelectorResult.SIZE_AND_BREAK)){\n        addFieldSize(doc, fi, binary, compressed);\n        break;\n      }\n      else {\n        skipField(binary, compressed);\n      }\n    }\n\n    return doc;\n  }\n\n","sourceOld":"  final Document doc(int n, FieldSelector fieldSelector) throws IOException {\n    indexStream.seek(n * 8L);\n    long position = indexStream.readLong();\n    fieldsStream.seek(position);\n\n    Document doc = new Document();\n    int numFields = fieldsStream.readVInt();\n    for (int i = 0; i < numFields; i++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fi = fieldInfos.fieldInfo(fieldNumber);\n      FieldSelectorResult acceptField = fieldSelector == null ? FieldSelectorResult.LOAD : fieldSelector.accept(fi.name);\n      boolean lazy = acceptField.equals(FieldSelectorResult.LAZY_LOAD) == true;\n      \n      byte bits = fieldsStream.readByte();\n      boolean compressed = (bits & FieldsWriter.FIELD_IS_COMPRESSED) != 0;\n      boolean tokenize = (bits & FieldsWriter.FIELD_IS_TOKENIZED) != 0;\n      boolean binary = (bits & FieldsWriter.FIELD_IS_BINARY) != 0;\n      if (acceptField.equals(FieldSelectorResult.LOAD) == true) {\n        addField(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.LOAD_FOR_MERGE) == true) {\n        addFieldForMerge(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.LOAD_AND_BREAK) == true){\n        addField(doc, fi, binary, compressed, tokenize);\n        break;//Get out of this loop\n      }\n      else if (lazy == true){\n        addFieldLazy(doc, fi, binary, compressed, tokenize);\n      }       \n      else {\n        skipField(binary, compressed);\n      }\n    }\n\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#doc(int,FieldSelector).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#doc(int,FieldSelector).mjava","sourceNew":"  final Document doc(int n, FieldSelector fieldSelector) throws CorruptIndexException, IOException {\n    indexStream.seek(n * 8L);\n    long position = indexStream.readLong();\n    fieldsStream.seek(position);\n\n    Document doc = new Document();\n    int numFields = fieldsStream.readVInt();\n    for (int i = 0; i < numFields; i++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fi = fieldInfos.fieldInfo(fieldNumber);\n      FieldSelectorResult acceptField = fieldSelector == null ? FieldSelectorResult.LOAD : fieldSelector.accept(fi.name);\n      \n      byte bits = fieldsStream.readByte();\n      boolean compressed = (bits & FieldsWriter.FIELD_IS_COMPRESSED) != 0;\n      boolean tokenize = (bits & FieldsWriter.FIELD_IS_TOKENIZED) != 0;\n      boolean binary = (bits & FieldsWriter.FIELD_IS_BINARY) != 0;\n      //TODO: Find an alternative approach here if this list continues to grow beyond the\n      //list of 5 or 6 currently here.  See Lucene 762 for discussion\n      if (acceptField.equals(FieldSelectorResult.LOAD)) {\n        addField(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.LOAD_FOR_MERGE)) {\n        addFieldForMerge(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.LOAD_AND_BREAK)){\n        addField(doc, fi, binary, compressed, tokenize);\n        break;//Get out of this loop\n      }\n      else if (acceptField.equals(FieldSelectorResult.LAZY_LOAD)) {\n        addFieldLazy(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.SIZE)){\n        skipField(binary, compressed, addFieldSize(doc, fi, binary, compressed));\n      }\n      else if (acceptField.equals(FieldSelectorResult.SIZE_AND_BREAK)){\n        addFieldSize(doc, fi, binary, compressed);\n        break;\n      }\n      else {\n        skipField(binary, compressed);\n      }\n    }\n\n    return doc;\n  }\n\n","sourceOld":"  final Document doc(int n, FieldSelector fieldSelector) throws IOException {\n    indexStream.seek(n * 8L);\n    long position = indexStream.readLong();\n    fieldsStream.seek(position);\n\n    Document doc = new Document();\n    int numFields = fieldsStream.readVInt();\n    for (int i = 0; i < numFields; i++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fi = fieldInfos.fieldInfo(fieldNumber);\n      FieldSelectorResult acceptField = fieldSelector == null ? FieldSelectorResult.LOAD : fieldSelector.accept(fi.name);\n      \n      byte bits = fieldsStream.readByte();\n      boolean compressed = (bits & FieldsWriter.FIELD_IS_COMPRESSED) != 0;\n      boolean tokenize = (bits & FieldsWriter.FIELD_IS_TOKENIZED) != 0;\n      boolean binary = (bits & FieldsWriter.FIELD_IS_BINARY) != 0;\n      //TODO: Find an alternative approach here if this list continues to grow beyond the\n      //list of 5 or 6 currently here.  See Lucene 762 for discussion\n      if (acceptField.equals(FieldSelectorResult.LOAD)) {\n        addField(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.LOAD_FOR_MERGE)) {\n        addFieldForMerge(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.LOAD_AND_BREAK)){\n        addField(doc, fi, binary, compressed, tokenize);\n        break;//Get out of this loop\n      }\n      else if (acceptField.equals(FieldSelectorResult.LAZY_LOAD)) {\n        addFieldLazy(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.SIZE)){\n        skipField(binary, compressed, addFieldSize(doc, fi, binary, compressed));\n      }\n      else if (acceptField.equals(FieldSelectorResult.SIZE_AND_BREAK)){\n        addFieldSize(doc, fi, binary, compressed);\n        break;\n      }\n      else {\n        skipField(binary, compressed);\n      }\n    }\n\n    return doc;\n  }\n\n","bugFix":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#doc(int,FieldSelector).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#doc(int,FieldSelector).mjava","sourceNew":"  final Document doc(int n, FieldSelector fieldSelector) throws CorruptIndexException, IOException {\n    indexStream.seek((n + docStoreOffset) * 8L);\n    long position = indexStream.readLong();\n    fieldsStream.seek(position);\n\n    Document doc = new Document();\n    int numFields = fieldsStream.readVInt();\n    for (int i = 0; i < numFields; i++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fi = fieldInfos.fieldInfo(fieldNumber);\n      FieldSelectorResult acceptField = fieldSelector == null ? FieldSelectorResult.LOAD : fieldSelector.accept(fi.name);\n      \n      byte bits = fieldsStream.readByte();\n      boolean compressed = (bits & FieldsWriter.FIELD_IS_COMPRESSED) != 0;\n      boolean tokenize = (bits & FieldsWriter.FIELD_IS_TOKENIZED) != 0;\n      boolean binary = (bits & FieldsWriter.FIELD_IS_BINARY) != 0;\n      //TODO: Find an alternative approach here if this list continues to grow beyond the\n      //list of 5 or 6 currently here.  See Lucene 762 for discussion\n      if (acceptField.equals(FieldSelectorResult.LOAD)) {\n        addField(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.LOAD_FOR_MERGE)) {\n        addFieldForMerge(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.LOAD_AND_BREAK)){\n        addField(doc, fi, binary, compressed, tokenize);\n        break;//Get out of this loop\n      }\n      else if (acceptField.equals(FieldSelectorResult.LAZY_LOAD)) {\n        addFieldLazy(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.SIZE)){\n        skipField(binary, compressed, addFieldSize(doc, fi, binary, compressed));\n      }\n      else if (acceptField.equals(FieldSelectorResult.SIZE_AND_BREAK)){\n        addFieldSize(doc, fi, binary, compressed);\n        break;\n      }\n      else {\n        skipField(binary, compressed);\n      }\n    }\n\n    return doc;\n  }\n\n","sourceOld":"  final Document doc(int n, FieldSelector fieldSelector) throws CorruptIndexException, IOException {\n    indexStream.seek(n * 8L);\n    long position = indexStream.readLong();\n    fieldsStream.seek(position);\n\n    Document doc = new Document();\n    int numFields = fieldsStream.readVInt();\n    for (int i = 0; i < numFields; i++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fi = fieldInfos.fieldInfo(fieldNumber);\n      FieldSelectorResult acceptField = fieldSelector == null ? FieldSelectorResult.LOAD : fieldSelector.accept(fi.name);\n      \n      byte bits = fieldsStream.readByte();\n      boolean compressed = (bits & FieldsWriter.FIELD_IS_COMPRESSED) != 0;\n      boolean tokenize = (bits & FieldsWriter.FIELD_IS_TOKENIZED) != 0;\n      boolean binary = (bits & FieldsWriter.FIELD_IS_BINARY) != 0;\n      //TODO: Find an alternative approach here if this list continues to grow beyond the\n      //list of 5 or 6 currently here.  See Lucene 762 for discussion\n      if (acceptField.equals(FieldSelectorResult.LOAD)) {\n        addField(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.LOAD_FOR_MERGE)) {\n        addFieldForMerge(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.LOAD_AND_BREAK)){\n        addField(doc, fi, binary, compressed, tokenize);\n        break;//Get out of this loop\n      }\n      else if (acceptField.equals(FieldSelectorResult.LAZY_LOAD)) {\n        addFieldLazy(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.SIZE)){\n        skipField(binary, compressed, addFieldSize(doc, fi, binary, compressed));\n      }\n      else if (acceptField.equals(FieldSelectorResult.SIZE_AND_BREAK)){\n        addFieldSize(doc, fi, binary, compressed);\n        break;\n      }\n      else {\n        skipField(binary, compressed);\n      }\n    }\n\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9a0deca56efc5191d6b3c41047fd538f3fae1d8","date":1198156049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#doc(int,FieldSelector).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#doc(int,FieldSelector).mjava","sourceNew":"  final Document doc(int n, FieldSelector fieldSelector) throws CorruptIndexException, IOException {\n    indexStream.seek((n + docStoreOffset) * 8L);\n    long position = indexStream.readLong();\n    fieldsStream.seek(position);\n\n    Document doc = new Document();\n    int numFields = fieldsStream.readVInt();\n    for (int i = 0; i < numFields; i++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fi = fieldInfos.fieldInfo(fieldNumber);\n      FieldSelectorResult acceptField = fieldSelector == null ? FieldSelectorResult.LOAD : fieldSelector.accept(fi.name);\n      \n      byte bits = fieldsStream.readByte();\n      assert bits <= FieldsWriter.FIELD_IS_COMPRESSED + FieldsWriter.FIELD_IS_TOKENIZED + FieldsWriter.FIELD_IS_BINARY;\n\n      boolean compressed = (bits & FieldsWriter.FIELD_IS_COMPRESSED) != 0;\n      boolean tokenize = (bits & FieldsWriter.FIELD_IS_TOKENIZED) != 0;\n      boolean binary = (bits & FieldsWriter.FIELD_IS_BINARY) != 0;\n      //TODO: Find an alternative approach here if this list continues to grow beyond the\n      //list of 5 or 6 currently here.  See Lucene 762 for discussion\n      if (acceptField.equals(FieldSelectorResult.LOAD)) {\n        addField(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.LOAD_FOR_MERGE)) {\n        addFieldForMerge(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.LOAD_AND_BREAK)){\n        addField(doc, fi, binary, compressed, tokenize);\n        break;//Get out of this loop\n      }\n      else if (acceptField.equals(FieldSelectorResult.LAZY_LOAD)) {\n        addFieldLazy(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.SIZE)){\n        skipField(binary, compressed, addFieldSize(doc, fi, binary, compressed));\n      }\n      else if (acceptField.equals(FieldSelectorResult.SIZE_AND_BREAK)){\n        addFieldSize(doc, fi, binary, compressed);\n        break;\n      }\n      else {\n        skipField(binary, compressed);\n      }\n    }\n\n    return doc;\n  }\n\n","sourceOld":"  final Document doc(int n, FieldSelector fieldSelector) throws CorruptIndexException, IOException {\n    indexStream.seek((n + docStoreOffset) * 8L);\n    long position = indexStream.readLong();\n    fieldsStream.seek(position);\n\n    Document doc = new Document();\n    int numFields = fieldsStream.readVInt();\n    for (int i = 0; i < numFields; i++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fi = fieldInfos.fieldInfo(fieldNumber);\n      FieldSelectorResult acceptField = fieldSelector == null ? FieldSelectorResult.LOAD : fieldSelector.accept(fi.name);\n      \n      byte bits = fieldsStream.readByte();\n      boolean compressed = (bits & FieldsWriter.FIELD_IS_COMPRESSED) != 0;\n      boolean tokenize = (bits & FieldsWriter.FIELD_IS_TOKENIZED) != 0;\n      boolean binary = (bits & FieldsWriter.FIELD_IS_BINARY) != 0;\n      //TODO: Find an alternative approach here if this list continues to grow beyond the\n      //list of 5 or 6 currently here.  See Lucene 762 for discussion\n      if (acceptField.equals(FieldSelectorResult.LOAD)) {\n        addField(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.LOAD_FOR_MERGE)) {\n        addFieldForMerge(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.LOAD_AND_BREAK)){\n        addField(doc, fi, binary, compressed, tokenize);\n        break;//Get out of this loop\n      }\n      else if (acceptField.equals(FieldSelectorResult.LAZY_LOAD)) {\n        addFieldLazy(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.SIZE)){\n        skipField(binary, compressed, addFieldSize(doc, fi, binary, compressed));\n      }\n      else if (acceptField.equals(FieldSelectorResult.SIZE_AND_BREAK)){\n        addFieldSize(doc, fi, binary, compressed);\n        break;\n      }\n      else {\n        skipField(binary, compressed);\n      }\n    }\n\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4","date":1206538765,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#doc(int,FieldSelector).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#doc(int,FieldSelector).mjava","sourceNew":"  final Document doc(int n, FieldSelector fieldSelector) throws CorruptIndexException, IOException {\n    seekIndex(n);\n    long position = indexStream.readLong();\n    fieldsStream.seek(position);\n\n    Document doc = new Document();\n    int numFields = fieldsStream.readVInt();\n    for (int i = 0; i < numFields; i++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fi = fieldInfos.fieldInfo(fieldNumber);\n      FieldSelectorResult acceptField = fieldSelector == null ? FieldSelectorResult.LOAD : fieldSelector.accept(fi.name);\n      \n      byte bits = fieldsStream.readByte();\n      assert bits <= FieldsWriter.FIELD_IS_COMPRESSED + FieldsWriter.FIELD_IS_TOKENIZED + FieldsWriter.FIELD_IS_BINARY;\n\n      boolean compressed = (bits & FieldsWriter.FIELD_IS_COMPRESSED) != 0;\n      boolean tokenize = (bits & FieldsWriter.FIELD_IS_TOKENIZED) != 0;\n      boolean binary = (bits & FieldsWriter.FIELD_IS_BINARY) != 0;\n      //TODO: Find an alternative approach here if this list continues to grow beyond the\n      //list of 5 or 6 currently here.  See Lucene 762 for discussion\n      if (acceptField.equals(FieldSelectorResult.LOAD)) {\n        addField(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.LOAD_FOR_MERGE)) {\n        addFieldForMerge(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.LOAD_AND_BREAK)){\n        addField(doc, fi, binary, compressed, tokenize);\n        break;//Get out of this loop\n      }\n      else if (acceptField.equals(FieldSelectorResult.LAZY_LOAD)) {\n        addFieldLazy(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.SIZE)){\n        skipField(binary, compressed, addFieldSize(doc, fi, binary, compressed));\n      }\n      else if (acceptField.equals(FieldSelectorResult.SIZE_AND_BREAK)){\n        addFieldSize(doc, fi, binary, compressed);\n        break;\n      }\n      else {\n        skipField(binary, compressed);\n      }\n    }\n\n    return doc;\n  }\n\n","sourceOld":"  final Document doc(int n, FieldSelector fieldSelector) throws CorruptIndexException, IOException {\n    indexStream.seek((n + docStoreOffset) * 8L);\n    long position = indexStream.readLong();\n    fieldsStream.seek(position);\n\n    Document doc = new Document();\n    int numFields = fieldsStream.readVInt();\n    for (int i = 0; i < numFields; i++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fi = fieldInfos.fieldInfo(fieldNumber);\n      FieldSelectorResult acceptField = fieldSelector == null ? FieldSelectorResult.LOAD : fieldSelector.accept(fi.name);\n      \n      byte bits = fieldsStream.readByte();\n      assert bits <= FieldsWriter.FIELD_IS_COMPRESSED + FieldsWriter.FIELD_IS_TOKENIZED + FieldsWriter.FIELD_IS_BINARY;\n\n      boolean compressed = (bits & FieldsWriter.FIELD_IS_COMPRESSED) != 0;\n      boolean tokenize = (bits & FieldsWriter.FIELD_IS_TOKENIZED) != 0;\n      boolean binary = (bits & FieldsWriter.FIELD_IS_BINARY) != 0;\n      //TODO: Find an alternative approach here if this list continues to grow beyond the\n      //list of 5 or 6 currently here.  See Lucene 762 for discussion\n      if (acceptField.equals(FieldSelectorResult.LOAD)) {\n        addField(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.LOAD_FOR_MERGE)) {\n        addFieldForMerge(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.LOAD_AND_BREAK)){\n        addField(doc, fi, binary, compressed, tokenize);\n        break;//Get out of this loop\n      }\n      else if (acceptField.equals(FieldSelectorResult.LAZY_LOAD)) {\n        addFieldLazy(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.SIZE)){\n        skipField(binary, compressed, addFieldSize(doc, fi, binary, compressed));\n      }\n      else if (acceptField.equals(FieldSelectorResult.SIZE_AND_BREAK)){\n        addFieldSize(doc, fi, binary, compressed);\n        break;\n      }\n      else {\n        skipField(binary, compressed);\n      }\n    }\n\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0c804f7aa477229414a7e12882af490c241f64d","date":1254963299,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#doc(int,FieldSelector).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#doc(int,FieldSelector).mjava","sourceNew":"  final Document doc(int n, FieldSelector fieldSelector) throws CorruptIndexException, IOException {\n    seekIndex(n);\n    long position = indexStream.readLong();\n    fieldsStream.seek(position);\n\n    Document doc = new Document();\n    int numFields = fieldsStream.readVInt();\n    for (int i = 0; i < numFields; i++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fi = fieldInfos.fieldInfo(fieldNumber);\n      FieldSelectorResult acceptField = fieldSelector == null ? FieldSelectorResult.LOAD : fieldSelector.accept(fi.name);\n      \n      byte bits = fieldsStream.readByte();\n      assert bits <= FieldsWriter.FIELD_IS_TOKENIZED + FieldsWriter.FIELD_IS_BINARY;\n\n      boolean tokenize = (bits & FieldsWriter.FIELD_IS_TOKENIZED) != 0;\n      boolean binary = (bits & FieldsWriter.FIELD_IS_BINARY) != 0;\n      //TODO: Find an alternative approach here if this list continues to grow beyond the\n      //list of 5 or 6 currently here.  See Lucene 762 for discussion\n      if (acceptField.equals(FieldSelectorResult.LOAD)) {\n        addField(doc, fi, binary, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.LOAD_AND_BREAK)){\n        addField(doc, fi, binary, tokenize);\n        break;//Get out of this loop\n      }\n      else if (acceptField.equals(FieldSelectorResult.LAZY_LOAD)) {\n        addFieldLazy(doc, fi, binary, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.SIZE)){\n        skipField(binary, addFieldSize(doc, fi, binary));\n      }\n      else if (acceptField.equals(FieldSelectorResult.SIZE_AND_BREAK)){\n        addFieldSize(doc, fi, binary);\n        break;\n      }\n      else {\n        skipField(binary);\n      }\n    }\n\n    return doc;\n  }\n\n","sourceOld":"  final Document doc(int n, FieldSelector fieldSelector) throws CorruptIndexException, IOException {\n    seekIndex(n);\n    long position = indexStream.readLong();\n    fieldsStream.seek(position);\n\n    Document doc = new Document();\n    int numFields = fieldsStream.readVInt();\n    for (int i = 0; i < numFields; i++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fi = fieldInfos.fieldInfo(fieldNumber);\n      FieldSelectorResult acceptField = fieldSelector == null ? FieldSelectorResult.LOAD : fieldSelector.accept(fi.name);\n      \n      byte bits = fieldsStream.readByte();\n      assert bits <= FieldsWriter.FIELD_IS_COMPRESSED + FieldsWriter.FIELD_IS_TOKENIZED + FieldsWriter.FIELD_IS_BINARY;\n\n      boolean compressed = (bits & FieldsWriter.FIELD_IS_COMPRESSED) != 0;\n      boolean tokenize = (bits & FieldsWriter.FIELD_IS_TOKENIZED) != 0;\n      boolean binary = (bits & FieldsWriter.FIELD_IS_BINARY) != 0;\n      //TODO: Find an alternative approach here if this list continues to grow beyond the\n      //list of 5 or 6 currently here.  See Lucene 762 for discussion\n      if (acceptField.equals(FieldSelectorResult.LOAD)) {\n        addField(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.LOAD_FOR_MERGE)) {\n        addFieldForMerge(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.LOAD_AND_BREAK)){\n        addField(doc, fi, binary, compressed, tokenize);\n        break;//Get out of this loop\n      }\n      else if (acceptField.equals(FieldSelectorResult.LAZY_LOAD)) {\n        addFieldLazy(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.SIZE)){\n        skipField(binary, compressed, addFieldSize(doc, fi, binary, compressed));\n      }\n      else if (acceptField.equals(FieldSelectorResult.SIZE_AND_BREAK)){\n        addFieldSize(doc, fi, binary, compressed);\n        break;\n      }\n      else {\n        skipField(binary, compressed);\n      }\n    }\n\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab50480bb5a7c7abad9762badcf87f8b69efeabe","date":1256591817,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FieldsReader#doc(int,FieldSelector).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#doc(int,FieldSelector).mjava","sourceNew":"  final Document doc(int n, FieldSelector fieldSelector) throws CorruptIndexException, IOException {\n    seekIndex(n);\n    long position = indexStream.readLong();\n    fieldsStream.seek(position);\n\n    Document doc = new Document();\n    int numFields = fieldsStream.readVInt();\n    for (int i = 0; i < numFields; i++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fi = fieldInfos.fieldInfo(fieldNumber);\n      FieldSelectorResult acceptField = fieldSelector == null ? FieldSelectorResult.LOAD : fieldSelector.accept(fi.name);\n      \n      byte bits = fieldsStream.readByte();\n      assert bits <= FieldsWriter.FIELD_IS_COMPRESSED + FieldsWriter.FIELD_IS_TOKENIZED + FieldsWriter.FIELD_IS_BINARY;\n\n      boolean compressed = (bits & FieldsWriter.FIELD_IS_COMPRESSED) != 0;\n      assert (compressed ? (format < FieldsWriter.FORMAT_LUCENE_3_0_NO_COMPRESSED_FIELDS) : true)\n        : \"compressed fields are only allowed in indexes of version <= 2.9\";\n      boolean tokenize = (bits & FieldsWriter.FIELD_IS_TOKENIZED) != 0;\n      boolean binary = (bits & FieldsWriter.FIELD_IS_BINARY) != 0;\n      //TODO: Find an alternative approach here if this list continues to grow beyond the\n      //list of 5 or 6 currently here.  See Lucene 762 for discussion\n      if (acceptField.equals(FieldSelectorResult.LOAD)) {\n        addField(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.LOAD_AND_BREAK)){\n        addField(doc, fi, binary, compressed, tokenize);\n        break;//Get out of this loop\n      }\n      else if (acceptField.equals(FieldSelectorResult.LAZY_LOAD)) {\n        addFieldLazy(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.SIZE)){\n        skipField(binary, compressed, addFieldSize(doc, fi, binary, compressed));\n      }\n      else if (acceptField.equals(FieldSelectorResult.SIZE_AND_BREAK)){\n        addFieldSize(doc, fi, binary, compressed);\n        break;\n      }\n      else {\n        skipField(binary, compressed);\n      }\n    }\n\n    return doc;\n  }\n\n","sourceOld":"  final Document doc(int n, FieldSelector fieldSelector) throws CorruptIndexException, IOException {\n    seekIndex(n);\n    long position = indexStream.readLong();\n    fieldsStream.seek(position);\n\n    Document doc = new Document();\n    int numFields = fieldsStream.readVInt();\n    for (int i = 0; i < numFields; i++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fi = fieldInfos.fieldInfo(fieldNumber);\n      FieldSelectorResult acceptField = fieldSelector == null ? FieldSelectorResult.LOAD : fieldSelector.accept(fi.name);\n      \n      byte bits = fieldsStream.readByte();\n      assert bits <= FieldsWriter.FIELD_IS_TOKENIZED + FieldsWriter.FIELD_IS_BINARY;\n\n      boolean tokenize = (bits & FieldsWriter.FIELD_IS_TOKENIZED) != 0;\n      boolean binary = (bits & FieldsWriter.FIELD_IS_BINARY) != 0;\n      //TODO: Find an alternative approach here if this list continues to grow beyond the\n      //list of 5 or 6 currently here.  See Lucene 762 for discussion\n      if (acceptField.equals(FieldSelectorResult.LOAD)) {\n        addField(doc, fi, binary, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.LOAD_AND_BREAK)){\n        addField(doc, fi, binary, tokenize);\n        break;//Get out of this loop\n      }\n      else if (acceptField.equals(FieldSelectorResult.LAZY_LOAD)) {\n        addFieldLazy(doc, fi, binary, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.SIZE)){\n        skipField(binary, addFieldSize(doc, fi, binary));\n      }\n      else if (acceptField.equals(FieldSelectorResult.SIZE_AND_BREAK)){\n        addFieldSize(doc, fi, binary);\n        break;\n      }\n      else {\n        skipField(binary);\n      }\n    }\n\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#doc(int,FieldSelector).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader#doc(int,FieldSelector).mjava","sourceNew":"  final Document doc(int n, FieldSelector fieldSelector) throws CorruptIndexException, IOException {\n    seekIndex(n);\n    long position = indexStream.readLong();\n    fieldsStream.seek(position);\n\n    Document doc = new Document();\n    int numFields = fieldsStream.readVInt();\n    for (int i = 0; i < numFields; i++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fi = fieldInfos.fieldInfo(fieldNumber);\n      FieldSelectorResult acceptField = fieldSelector == null ? FieldSelectorResult.LOAD : fieldSelector.accept(fi.name);\n      \n      byte bits = fieldsStream.readByte();\n      assert bits <= FieldsWriter.FIELD_IS_COMPRESSED + FieldsWriter.FIELD_IS_TOKENIZED + FieldsWriter.FIELD_IS_BINARY;\n\n      boolean compressed = (bits & FieldsWriter.FIELD_IS_COMPRESSED) != 0;\n      assert (compressed ? (format < FieldsWriter.FORMAT_LUCENE_3_0_NO_COMPRESSED_FIELDS) : true)\n        : \"compressed fields are only allowed in indexes of version <= 2.9\";\n      boolean tokenize = (bits & FieldsWriter.FIELD_IS_TOKENIZED) != 0;\n      boolean binary = (bits & FieldsWriter.FIELD_IS_BINARY) != 0;\n      //TODO: Find an alternative approach here if this list continues to grow beyond the\n      //list of 5 or 6 currently here.  See Lucene 762 for discussion\n      if (acceptField.equals(FieldSelectorResult.LOAD)) {\n        addField(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.LOAD_AND_BREAK)){\n        addField(doc, fi, binary, compressed, tokenize);\n        break;//Get out of this loop\n      }\n      else if (acceptField.equals(FieldSelectorResult.LAZY_LOAD)) {\n        addFieldLazy(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.SIZE)){\n        skipField(binary, compressed, addFieldSize(doc, fi, binary, compressed));\n      }\n      else if (acceptField.equals(FieldSelectorResult.SIZE_AND_BREAK)){\n        addFieldSize(doc, fi, binary, compressed);\n        break;\n      }\n      else {\n        skipField(binary, compressed);\n      }\n    }\n\n    return doc;\n  }\n\n","sourceOld":"  final Document doc(int n, FieldSelector fieldSelector) throws CorruptIndexException, IOException {\n    seekIndex(n);\n    long position = indexStream.readLong();\n    fieldsStream.seek(position);\n\n    Document doc = new Document();\n    int numFields = fieldsStream.readVInt();\n    for (int i = 0; i < numFields; i++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fi = fieldInfos.fieldInfo(fieldNumber);\n      FieldSelectorResult acceptField = fieldSelector == null ? FieldSelectorResult.LOAD : fieldSelector.accept(fi.name);\n      \n      byte bits = fieldsStream.readByte();\n      assert bits <= FieldsWriter.FIELD_IS_COMPRESSED + FieldsWriter.FIELD_IS_TOKENIZED + FieldsWriter.FIELD_IS_BINARY;\n\n      boolean compressed = (bits & FieldsWriter.FIELD_IS_COMPRESSED) != 0;\n      assert (compressed ? (format < FieldsWriter.FORMAT_LUCENE_3_0_NO_COMPRESSED_FIELDS) : true)\n        : \"compressed fields are only allowed in indexes of version <= 2.9\";\n      boolean tokenize = (bits & FieldsWriter.FIELD_IS_TOKENIZED) != 0;\n      boolean binary = (bits & FieldsWriter.FIELD_IS_BINARY) != 0;\n      //TODO: Find an alternative approach here if this list continues to grow beyond the\n      //list of 5 or 6 currently here.  See Lucene 762 for discussion\n      if (acceptField.equals(FieldSelectorResult.LOAD)) {\n        addField(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.LOAD_AND_BREAK)){\n        addField(doc, fi, binary, compressed, tokenize);\n        break;//Get out of this loop\n      }\n      else if (acceptField.equals(FieldSelectorResult.LAZY_LOAD)) {\n        addFieldLazy(doc, fi, binary, compressed, tokenize);\n      }\n      else if (acceptField.equals(FieldSelectorResult.SIZE)){\n        skipField(binary, compressed, addFieldSize(doc, fi, binary, compressed));\n      }\n      else if (acceptField.equals(FieldSelectorResult.SIZE_AND_BREAK)){\n        addFieldSize(doc, fi, binary, compressed);\n        break;\n      }\n      else {\n        skipField(binary, compressed);\n      }\n    }\n\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab50480bb5a7c7abad9762badcf87f8b69efeabe":["e0c804f7aa477229414a7e12882af490c241f64d"],"c9a0deca56efc5191d6b3c41047fd538f3fae1d8":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"0c0427a35a68b16ec73d3bf5f27e57719915f166":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"1b54a9bc667895a2095a886184bf69a3179e63df":["1f9ca773178dc09e3e8fb1c66dde5f8dbd6f4644"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4":["c9a0deca56efc5191d6b3c41047fd538f3fae1d8"],"1f9ca773178dc09e3e8fb1c66dde5f8dbd6f4644":["0c0427a35a68b16ec73d3bf5f27e57719915f166"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e0c804f7aa477229414a7e12882af490c241f64d":["dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["1b54a9bc667895a2095a886184bf69a3179e63df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ab50480bb5a7c7abad9762badcf87f8b69efeabe"]},"commit2Childs":{"ab50480bb5a7c7abad9762badcf87f8b69efeabe":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c9a0deca56efc5191d6b3c41047fd538f3fae1d8":["dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4"],"0c0427a35a68b16ec73d3bf5f27e57719915f166":["1f9ca773178dc09e3e8fb1c66dde5f8dbd6f4644"],"1b54a9bc667895a2095a886184bf69a3179e63df":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4":["e0c804f7aa477229414a7e12882af490c241f64d"],"1f9ca773178dc09e3e8fb1c66dde5f8dbd6f4644":["1b54a9bc667895a2095a886184bf69a3179e63df"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["0c0427a35a68b16ec73d3bf5f27e57719915f166"],"e0c804f7aa477229414a7e12882af490c241f64d":["ab50480bb5a7c7abad9762badcf87f8b69efeabe"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["c9a0deca56efc5191d6b3c41047fd538f3fae1d8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}