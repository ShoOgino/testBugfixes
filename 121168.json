{"path":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/ParametricRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/ParametricRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/ParametricRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof ParametricRangeQueryNode) {\n      ParametricRangeQueryNode parametricRangeNode = (ParametricRangeQueryNode) node;\n      ParametricQueryNode upper = parametricRangeNode.getUpperBound();\n      ParametricQueryNode lower = parametricRangeNode.getLowerBound();\n      Locale locale = Locale.getDefault();\n      Collator collator = null;\n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n\n      if (getQueryConfigHandler().hasAttribute(RangeCollatorAttribute.class)) {\n\n        collator = getQueryConfigHandler().getAttribute(\n            RangeCollatorAttribute.class).getRangeCollator();\n\n      }\n\n      if (getQueryConfigHandler().hasAttribute(LocaleAttribute.class)) {\n\n        locale = getQueryConfigHandler().getAttribute(LocaleAttribute.class)\n            .getLocale();\n\n      }\n\n      FieldConfig fieldConfig = getQueryConfigHandler().getFieldConfig(\n          parametricRangeNode.getField());\n\n      if (fieldConfig != null) {\n\n        if (fieldConfig.hasAttribute(DateResolutionAttribute.class)) {\n\n          dateRes = fieldConfig.getAttribute(DateResolutionAttribute.class)\n              .getDateResolution();\n\n        }\n\n      }\n\n      if (upper.getOperator() == CompareOperator.LE) {\n        inclusive = true;\n\n      } else if (lower.getOperator() == CompareOperator.GE) {\n        inclusive = true;\n      }\n\n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n\n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        Date d1 = df.parse(part1);\n        Date d2 = df.parse(part2);\n        if (inclusive) {\n          // The user can only specify the date, not the time, so make sure\n          // the time is set to the latest possible time of that date to really\n          // include all documents:\n          Calendar cal = Calendar.getInstance(locale);\n          cal.setTime(d2);\n          cal.set(Calendar.HOUR_OF_DAY, 23);\n          cal.set(Calendar.MINUTE, 59);\n          cal.set(Calendar.SECOND, 59);\n          cal.set(Calendar.MILLISECOND, 999);\n          d2 = cal.getTime();\n        }\n\n        if (dateRes == null) {\n          // no default or field specific date resolution has been set,\n          // use deprecated DateField to maintain compatibilty with\n          // pre-1.9 Lucene versions.\n          part1 = DateField.dateToString(d1);\n          part2 = DateField.dateToString(d2);\n\n        } else {\n          part1 = DateTools.dateToString(d1, dateRes);\n          part2 = DateTools.dateToString(d2, dateRes);\n        }\n      } catch (Exception e) {\n        // do nothing\n      }\n\n      lower.setText(part1);\n      upper.setText(part2);\n\n      return new RangeQueryNode(lower, upper, collator);\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof ParametricRangeQueryNode) {\n      ParametricRangeQueryNode parametricRangeNode = (ParametricRangeQueryNode) node;\n      ParametricQueryNode upper = parametricRangeNode.getUpperBound();\n      ParametricQueryNode lower = parametricRangeNode.getLowerBound();\n      Locale locale = Locale.getDefault();\n      Collator collator = null;\n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n\n      if (getQueryConfigHandler().hasAttribute(RangeCollatorAttribute.class)) {\n\n        collator = getQueryConfigHandler().getAttribute(\n            RangeCollatorAttribute.class).getRangeCollator();\n\n      }\n\n      if (getQueryConfigHandler().hasAttribute(LocaleAttribute.class)) {\n\n        locale = getQueryConfigHandler().getAttribute(LocaleAttribute.class)\n            .getLocale();\n\n      }\n\n      FieldConfig fieldConfig = getQueryConfigHandler().getFieldConfig(\n          parametricRangeNode.getField());\n\n      if (fieldConfig != null) {\n\n        if (fieldConfig.hasAttribute(DateResolutionAttribute.class)) {\n\n          dateRes = fieldConfig.getAttribute(DateResolutionAttribute.class)\n              .getDateResolution();\n\n        }\n\n      }\n\n      if (upper.getOperator() == CompareOperator.LE) {\n        inclusive = true;\n\n      } else if (lower.getOperator() == CompareOperator.GE) {\n        inclusive = true;\n      }\n\n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n\n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        Date d1 = df.parse(part1);\n        Date d2 = df.parse(part2);\n        if (inclusive) {\n          // The user can only specify the date, not the time, so make sure\n          // the time is set to the latest possible time of that date to really\n          // include all documents:\n          Calendar cal = Calendar.getInstance(locale);\n          cal.setTime(d2);\n          cal.set(Calendar.HOUR_OF_DAY, 23);\n          cal.set(Calendar.MINUTE, 59);\n          cal.set(Calendar.SECOND, 59);\n          cal.set(Calendar.MILLISECOND, 999);\n          d2 = cal.getTime();\n        }\n\n        if (dateRes == null) {\n          // no default or field specific date resolution has been set,\n          // use deprecated DateField to maintain compatibilty with\n          // pre-1.9 Lucene versions.\n          part1 = DateField.dateToString(d1);\n          part2 = DateField.dateToString(d2);\n\n        } else {\n          part1 = DateTools.dateToString(d1, dateRes);\n          part2 = DateTools.dateToString(d2, dateRes);\n        }\n      } catch (Exception e) {\n        // do nothing\n      }\n\n      lower.setText(part1);\n      upper.setText(part2);\n\n      return new RangeQueryNode(lower, upper, collator);\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/ParametricRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/ParametricRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof ParametricRangeQueryNode) {\n      ParametricRangeQueryNode parametricRangeNode = (ParametricRangeQueryNode) node;\n      ParametricQueryNode upper = parametricRangeNode.getUpperBound();\n      ParametricQueryNode lower = parametricRangeNode.getLowerBound();\n      Locale locale = Locale.getDefault();\n      Collator collator = null;\n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n\n      if (getQueryConfigHandler().hasAttribute(RangeCollatorAttribute.class)) {\n\n        collator = getQueryConfigHandler().getAttribute(\n            RangeCollatorAttribute.class).getRangeCollator();\n\n      }\n\n      if (getQueryConfigHandler().hasAttribute(LocaleAttribute.class)) {\n\n        locale = getQueryConfigHandler().getAttribute(LocaleAttribute.class)\n            .getLocale();\n\n      }\n\n      FieldConfig fieldConfig = getQueryConfigHandler().getFieldConfig(\n          parametricRangeNode.getField());\n\n      if (fieldConfig != null) {\n\n        if (fieldConfig.hasAttribute(DateResolutionAttribute.class)) {\n\n          dateRes = fieldConfig.getAttribute(DateResolutionAttribute.class)\n              .getDateResolution();\n\n        }\n\n      }\n\n      if (upper.getOperator() == CompareOperator.LE) {\n        inclusive = true;\n\n      } else if (lower.getOperator() == CompareOperator.GE) {\n        inclusive = true;\n      }\n\n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n\n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        Date d1 = df.parse(part1);\n        Date d2 = df.parse(part2);\n        if (inclusive) {\n          // The user can only specify the date, not the time, so make sure\n          // the time is set to the latest possible time of that date to really\n          // include all documents:\n          Calendar cal = Calendar.getInstance(locale);\n          cal.setTime(d2);\n          cal.set(Calendar.HOUR_OF_DAY, 23);\n          cal.set(Calendar.MINUTE, 59);\n          cal.set(Calendar.SECOND, 59);\n          cal.set(Calendar.MILLISECOND, 999);\n          d2 = cal.getTime();\n        }\n\n        part1 = DateTools.dateToString(d1, dateRes);\n        part2 = DateTools.dateToString(d2, dateRes);\n      } catch (Exception e) {\n        // do nothing\n      }\n\n      lower.setText(part1);\n      upper.setText(part2);\n\n      return new RangeQueryNode(lower, upper, collator);\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof ParametricRangeQueryNode) {\n      ParametricRangeQueryNode parametricRangeNode = (ParametricRangeQueryNode) node;\n      ParametricQueryNode upper = parametricRangeNode.getUpperBound();\n      ParametricQueryNode lower = parametricRangeNode.getLowerBound();\n      Locale locale = Locale.getDefault();\n      Collator collator = null;\n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n\n      if (getQueryConfigHandler().hasAttribute(RangeCollatorAttribute.class)) {\n\n        collator = getQueryConfigHandler().getAttribute(\n            RangeCollatorAttribute.class).getRangeCollator();\n\n      }\n\n      if (getQueryConfigHandler().hasAttribute(LocaleAttribute.class)) {\n\n        locale = getQueryConfigHandler().getAttribute(LocaleAttribute.class)\n            .getLocale();\n\n      }\n\n      FieldConfig fieldConfig = getQueryConfigHandler().getFieldConfig(\n          parametricRangeNode.getField());\n\n      if (fieldConfig != null) {\n\n        if (fieldConfig.hasAttribute(DateResolutionAttribute.class)) {\n\n          dateRes = fieldConfig.getAttribute(DateResolutionAttribute.class)\n              .getDateResolution();\n\n        }\n\n      }\n\n      if (upper.getOperator() == CompareOperator.LE) {\n        inclusive = true;\n\n      } else if (lower.getOperator() == CompareOperator.GE) {\n        inclusive = true;\n      }\n\n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n\n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        Date d1 = df.parse(part1);\n        Date d2 = df.parse(part2);\n        if (inclusive) {\n          // The user can only specify the date, not the time, so make sure\n          // the time is set to the latest possible time of that date to really\n          // include all documents:\n          Calendar cal = Calendar.getInstance(locale);\n          cal.setTime(d2);\n          cal.set(Calendar.HOUR_OF_DAY, 23);\n          cal.set(Calendar.MINUTE, 59);\n          cal.set(Calendar.SECOND, 59);\n          cal.set(Calendar.MILLISECOND, 999);\n          d2 = cal.getTime();\n        }\n\n        if (dateRes == null) {\n          // no default or field specific date resolution has been set,\n          // use deprecated DateField to maintain compatibilty with\n          // pre-1.9 Lucene versions.\n          part1 = DateField.dateToString(d1);\n          part2 = DateField.dateToString(d2);\n\n        } else {\n          part1 = DateTools.dateToString(d1, dateRes);\n          part2 = DateTools.dateToString(d2, dateRes);\n        }\n      } catch (Exception e) {\n        // do nothing\n      }\n\n      lower.setText(part1);\n      upper.setText(part2);\n\n      return new RangeQueryNode(lower, upper, collator);\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":["e91b7614171e0a6a82351457c2870d2a0124ba9a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/ParametricRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/ParametricRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof ParametricRangeQueryNode) {\n      ParametricRangeQueryNode parametricRangeNode = (ParametricRangeQueryNode) node;\n      ParametricQueryNode upper = parametricRangeNode.getUpperBound();\n      ParametricQueryNode lower = parametricRangeNode.getLowerBound();\n      Locale locale = Locale.getDefault();\n      Collator collator = null;\n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n\n      if (getQueryConfigHandler().hasAttribute(RangeCollatorAttribute.class)) {\n\n        collator = getQueryConfigHandler().getAttribute(\n            RangeCollatorAttribute.class).getRangeCollator();\n\n      }\n\n      if (getQueryConfigHandler().hasAttribute(LocaleAttribute.class)) {\n\n        locale = getQueryConfigHandler().getAttribute(LocaleAttribute.class)\n            .getLocale();\n\n      }\n\n      FieldConfig fieldConfig = getQueryConfigHandler().getFieldConfig(\n          parametricRangeNode.getField());\n\n      if (fieldConfig != null) {\n\n        if (fieldConfig.hasAttribute(DateResolutionAttribute.class)) {\n\n          dateRes = fieldConfig.getAttribute(DateResolutionAttribute.class)\n              .getDateResolution();\n\n        }\n\n      }\n\n      if (upper.getOperator() == CompareOperator.LE) {\n        inclusive = true;\n\n      } else if (lower.getOperator() == CompareOperator.GE) {\n        inclusive = true;\n      }\n\n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n\n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        Date d1 = df.parse(part1);\n        Date d2 = df.parse(part2);\n        if (inclusive) {\n          // The user can only specify the date, not the time, so make sure\n          // the time is set to the latest possible time of that date to really\n          // include all documents:\n          Calendar cal = Calendar.getInstance(locale);\n          cal.setTime(d2);\n          cal.set(Calendar.HOUR_OF_DAY, 23);\n          cal.set(Calendar.MINUTE, 59);\n          cal.set(Calendar.SECOND, 59);\n          cal.set(Calendar.MILLISECOND, 999);\n          d2 = cal.getTime();\n        }\n\n        part1 = DateTools.dateToString(d1, dateRes);\n        part2 = DateTools.dateToString(d2, dateRes);\n      } catch (Exception e) {\n        // do nothing\n      }\n\n      lower.setText(part1);\n      upper.setText(part2);\n\n      return new RangeQueryNode(lower, upper, collator);\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof ParametricRangeQueryNode) {\n      ParametricRangeQueryNode parametricRangeNode = (ParametricRangeQueryNode) node;\n      ParametricQueryNode upper = parametricRangeNode.getUpperBound();\n      ParametricQueryNode lower = parametricRangeNode.getLowerBound();\n      Locale locale = Locale.getDefault();\n      Collator collator = null;\n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n\n      if (getQueryConfigHandler().hasAttribute(RangeCollatorAttribute.class)) {\n\n        collator = getQueryConfigHandler().getAttribute(\n            RangeCollatorAttribute.class).getRangeCollator();\n\n      }\n\n      if (getQueryConfigHandler().hasAttribute(LocaleAttribute.class)) {\n\n        locale = getQueryConfigHandler().getAttribute(LocaleAttribute.class)\n            .getLocale();\n\n      }\n\n      FieldConfig fieldConfig = getQueryConfigHandler().getFieldConfig(\n          parametricRangeNode.getField());\n\n      if (fieldConfig != null) {\n\n        if (fieldConfig.hasAttribute(DateResolutionAttribute.class)) {\n\n          dateRes = fieldConfig.getAttribute(DateResolutionAttribute.class)\n              .getDateResolution();\n\n        }\n\n      }\n\n      if (upper.getOperator() == CompareOperator.LE) {\n        inclusive = true;\n\n      } else if (lower.getOperator() == CompareOperator.GE) {\n        inclusive = true;\n      }\n\n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n\n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        Date d1 = df.parse(part1);\n        Date d2 = df.parse(part2);\n        if (inclusive) {\n          // The user can only specify the date, not the time, so make sure\n          // the time is set to the latest possible time of that date to really\n          // include all documents:\n          Calendar cal = Calendar.getInstance(locale);\n          cal.setTime(d2);\n          cal.set(Calendar.HOUR_OF_DAY, 23);\n          cal.set(Calendar.MINUTE, 59);\n          cal.set(Calendar.SECOND, 59);\n          cal.set(Calendar.MILLISECOND, 999);\n          d2 = cal.getTime();\n        }\n\n        if (dateRes == null) {\n          // no default or field specific date resolution has been set,\n          // use deprecated DateField to maintain compatibilty with\n          // pre-1.9 Lucene versions.\n          part1 = DateField.dateToString(d1);\n          part2 = DateField.dateToString(d2);\n\n        } else {\n          part1 = DateTools.dateToString(d1, dateRes);\n          part2 = DateTools.dateToString(d2, dateRes);\n        }\n      } catch (Exception e) {\n        // do nothing\n      }\n\n      lower.setText(part1);\n      upper.setText(part2);\n\n      return new RangeQueryNode(lower, upper, collator);\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/ParametricRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/ParametricRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof ParametricRangeQueryNode) {\n      ParametricRangeQueryNode parametricRangeNode = (ParametricRangeQueryNode) node;\n      ParametricQueryNode upper = parametricRangeNode.getUpperBound();\n      ParametricQueryNode lower = parametricRangeNode.getLowerBound();\n      Locale locale = Locale.getDefault();\n      Collator collator = null;\n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n\n      if (getQueryConfigHandler().hasAttribute(RangeCollatorAttribute.class)) {\n\n        collator = getQueryConfigHandler().getAttribute(\n            RangeCollatorAttribute.class).getRangeCollator();\n\n      }\n\n      if (getQueryConfigHandler().hasAttribute(LocaleAttribute.class)) {\n\n        locale = getQueryConfigHandler().getAttribute(LocaleAttribute.class)\n            .getLocale();\n\n      }\n\n      FieldConfig fieldConfig = getQueryConfigHandler().getFieldConfig(\n          parametricRangeNode.getField());\n\n      if (fieldConfig != null) {\n\n        if (fieldConfig.hasAttribute(DateResolutionAttribute.class)) {\n\n          dateRes = fieldConfig.getAttribute(DateResolutionAttribute.class)\n              .getDateResolution();\n\n        }\n\n      }\n\n      if (upper.getOperator() == CompareOperator.LE) {\n        inclusive = true;\n\n      } else if (lower.getOperator() == CompareOperator.GE) {\n        inclusive = true;\n      }\n\n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n\n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        Date d1 = df.parse(part1);\n        Date d2 = df.parse(part2);\n        if (inclusive) {\n          // The user can only specify the date, not the time, so make sure\n          // the time is set to the latest possible time of that date to really\n          // include all documents:\n          Calendar cal = Calendar.getInstance(locale);\n          cal.setTime(d2);\n          cal.set(Calendar.HOUR_OF_DAY, 23);\n          cal.set(Calendar.MINUTE, 59);\n          cal.set(Calendar.SECOND, 59);\n          cal.set(Calendar.MILLISECOND, 999);\n          d2 = cal.getTime();\n        }\n\n        part1 = DateTools.dateToString(d1, dateRes);\n        part2 = DateTools.dateToString(d2, dateRes);\n      } catch (Exception e) {\n        // do nothing\n      }\n\n      lower.setText(part1);\n      upper.setText(part2);\n\n      return new RangeQueryNode(lower, upper, collator);\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof ParametricRangeQueryNode) {\n      ParametricRangeQueryNode parametricRangeNode = (ParametricRangeQueryNode) node;\n      ParametricQueryNode upper = parametricRangeNode.getUpperBound();\n      ParametricQueryNode lower = parametricRangeNode.getLowerBound();\n      Locale locale = Locale.getDefault();\n      Collator collator = null;\n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n\n      if (getQueryConfigHandler().hasAttribute(RangeCollatorAttribute.class)) {\n\n        collator = getQueryConfigHandler().getAttribute(\n            RangeCollatorAttribute.class).getRangeCollator();\n\n      }\n\n      if (getQueryConfigHandler().hasAttribute(LocaleAttribute.class)) {\n\n        locale = getQueryConfigHandler().getAttribute(LocaleAttribute.class)\n            .getLocale();\n\n      }\n\n      FieldConfig fieldConfig = getQueryConfigHandler().getFieldConfig(\n          parametricRangeNode.getField());\n\n      if (fieldConfig != null) {\n\n        if (fieldConfig.hasAttribute(DateResolutionAttribute.class)) {\n\n          dateRes = fieldConfig.getAttribute(DateResolutionAttribute.class)\n              .getDateResolution();\n\n        }\n\n      }\n\n      if (upper.getOperator() == CompareOperator.LE) {\n        inclusive = true;\n\n      } else if (lower.getOperator() == CompareOperator.GE) {\n        inclusive = true;\n      }\n\n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n\n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        Date d1 = df.parse(part1);\n        Date d2 = df.parse(part2);\n        if (inclusive) {\n          // The user can only specify the date, not the time, so make sure\n          // the time is set to the latest possible time of that date to really\n          // include all documents:\n          Calendar cal = Calendar.getInstance(locale);\n          cal.setTime(d2);\n          cal.set(Calendar.HOUR_OF_DAY, 23);\n          cal.set(Calendar.MINUTE, 59);\n          cal.set(Calendar.SECOND, 59);\n          cal.set(Calendar.MILLISECOND, 999);\n          d2 = cal.getTime();\n        }\n\n        if (dateRes == null) {\n          // no default or field specific date resolution has been set,\n          // use deprecated DateField to maintain compatibilty with\n          // pre-1.9 Lucene versions.\n          part1 = DateField.dateToString(d1);\n          part2 = DateField.dateToString(d2);\n\n        } else {\n          part1 = DateTools.dateToString(d1, dateRes);\n          part2 = DateTools.dateToString(d2, dateRes);\n        }\n      } catch (Exception e) {\n        // do nothing\n      }\n\n      lower.setText(part1);\n      upper.setText(part2);\n\n      return new RangeQueryNode(lower, upper, collator);\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8ba2a9cb0538219391cdc1af0f41446cf39684d7","date":1295918555,"type":3,"author":"Adriano Crestani Campos","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/ParametricRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/ParametricRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof ParametricRangeQueryNode) {\n      ParametricRangeQueryNode parametricRangeNode = (ParametricRangeQueryNode) node;\n      ParametricQueryNode upper = parametricRangeNode.getUpperBound();\n      ParametricQueryNode lower = parametricRangeNode.getLowerBound();\n      Locale locale = Locale.getDefault();\n      Collator collator = null;\n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n\n      if (getQueryConfigHandler().hasAttribute(RangeCollatorAttribute.class)) {\n\n        collator = getQueryConfigHandler().getAttribute(\n            RangeCollatorAttribute.class).getRangeCollator();\n\n      }\n\n      if (getQueryConfigHandler().hasAttribute(LocaleAttribute.class)) {\n\n        locale = getQueryConfigHandler().getAttribute(LocaleAttribute.class)\n            .getLocale();\n\n      }\n\n      CharSequence field = parametricRangeNode.getField();\n      String fieldStr = null;\n\n      if (field != null) {\n        fieldStr = field.toString();\n      }\n\n      FieldConfig fieldConfig = getQueryConfigHandler()\n          .getFieldConfig(fieldStr);\n\n      if (fieldConfig != null) {\n\n        if (fieldConfig.hasAttribute(DateResolutionAttribute.class)) {\n\n          dateRes = fieldConfig.getAttribute(DateResolutionAttribute.class)\n              .getDateResolution();\n\n        }\n\n      }\n\n      if (upper.getOperator() == CompareOperator.LE) {\n        inclusive = true;\n\n      } else if (lower.getOperator() == CompareOperator.GE) {\n        inclusive = true;\n      }\n\n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n\n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        Date d1 = df.parse(part1);\n        Date d2 = df.parse(part2);\n        if (inclusive) {\n          // The user can only specify the date, not the time, so make sure\n          // the time is set to the latest possible time of that date to really\n          // include all documents:\n          Calendar cal = Calendar.getInstance(locale);\n          cal.setTime(d2);\n          cal.set(Calendar.HOUR_OF_DAY, 23);\n          cal.set(Calendar.MINUTE, 59);\n          cal.set(Calendar.SECOND, 59);\n          cal.set(Calendar.MILLISECOND, 999);\n          d2 = cal.getTime();\n        }\n\n        part1 = DateTools.dateToString(d1, dateRes);\n        part2 = DateTools.dateToString(d2, dateRes);\n      } catch (Exception e) {\n        // do nothing\n      }\n\n      lower.setText(part1);\n      upper.setText(part2);\n\n      return new RangeQueryNode(lower, upper, collator);\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof ParametricRangeQueryNode) {\n      ParametricRangeQueryNode parametricRangeNode = (ParametricRangeQueryNode) node;\n      ParametricQueryNode upper = parametricRangeNode.getUpperBound();\n      ParametricQueryNode lower = parametricRangeNode.getLowerBound();\n      Locale locale = Locale.getDefault();\n      Collator collator = null;\n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n\n      if (getQueryConfigHandler().hasAttribute(RangeCollatorAttribute.class)) {\n\n        collator = getQueryConfigHandler().getAttribute(\n            RangeCollatorAttribute.class).getRangeCollator();\n\n      }\n\n      if (getQueryConfigHandler().hasAttribute(LocaleAttribute.class)) {\n\n        locale = getQueryConfigHandler().getAttribute(LocaleAttribute.class)\n            .getLocale();\n\n      }\n\n      FieldConfig fieldConfig = getQueryConfigHandler().getFieldConfig(\n          parametricRangeNode.getField());\n\n      if (fieldConfig != null) {\n\n        if (fieldConfig.hasAttribute(DateResolutionAttribute.class)) {\n\n          dateRes = fieldConfig.getAttribute(DateResolutionAttribute.class)\n              .getDateResolution();\n\n        }\n\n      }\n\n      if (upper.getOperator() == CompareOperator.LE) {\n        inclusive = true;\n\n      } else if (lower.getOperator() == CompareOperator.GE) {\n        inclusive = true;\n      }\n\n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n\n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        Date d1 = df.parse(part1);\n        Date d2 = df.parse(part2);\n        if (inclusive) {\n          // The user can only specify the date, not the time, so make sure\n          // the time is set to the latest possible time of that date to really\n          // include all documents:\n          Calendar cal = Calendar.getInstance(locale);\n          cal.setTime(d2);\n          cal.set(Calendar.HOUR_OF_DAY, 23);\n          cal.set(Calendar.MINUTE, 59);\n          cal.set(Calendar.SECOND, 59);\n          cal.set(Calendar.MILLISECOND, 999);\n          d2 = cal.getTime();\n        }\n\n        part1 = DateTools.dateToString(d1, dateRes);\n        part2 = DateTools.dateToString(d2, dateRes);\n      } catch (Exception e) {\n        // do nothing\n      }\n\n      lower.setText(part1);\n      upper.setText(part2);\n\n      return new RangeQueryNode(lower, upper, collator);\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/ParametricRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/ParametricRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof ParametricRangeQueryNode) {\n      ParametricRangeQueryNode parametricRangeNode = (ParametricRangeQueryNode) node;\n      ParametricQueryNode upper = parametricRangeNode.getUpperBound();\n      ParametricQueryNode lower = parametricRangeNode.getLowerBound();\n      Locale locale = Locale.getDefault();\n      Collator collator = null;\n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n\n      if (getQueryConfigHandler().hasAttribute(RangeCollatorAttribute.class)) {\n\n        collator = getQueryConfigHandler().getAttribute(\n            RangeCollatorAttribute.class).getRangeCollator();\n\n      }\n\n      if (getQueryConfigHandler().hasAttribute(LocaleAttribute.class)) {\n\n        locale = getQueryConfigHandler().getAttribute(LocaleAttribute.class)\n            .getLocale();\n\n      }\n\n      CharSequence field = parametricRangeNode.getField();\n      String fieldStr = null;\n\n      if (field != null) {\n        fieldStr = field.toString();\n      }\n\n      FieldConfig fieldConfig = getQueryConfigHandler()\n          .getFieldConfig(fieldStr);\n\n      if (fieldConfig != null) {\n\n        if (fieldConfig.hasAttribute(DateResolutionAttribute.class)) {\n\n          dateRes = fieldConfig.getAttribute(DateResolutionAttribute.class)\n              .getDateResolution();\n\n        }\n\n      }\n\n      if (upper.getOperator() == CompareOperator.LE) {\n        inclusive = true;\n\n      } else if (lower.getOperator() == CompareOperator.GE) {\n        inclusive = true;\n      }\n\n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n\n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        Date d1 = df.parse(part1);\n        Date d2 = df.parse(part2);\n        if (inclusive) {\n          // The user can only specify the date, not the time, so make sure\n          // the time is set to the latest possible time of that date to really\n          // include all documents:\n          Calendar cal = Calendar.getInstance(locale);\n          cal.setTime(d2);\n          cal.set(Calendar.HOUR_OF_DAY, 23);\n          cal.set(Calendar.MINUTE, 59);\n          cal.set(Calendar.SECOND, 59);\n          cal.set(Calendar.MILLISECOND, 999);\n          d2 = cal.getTime();\n        }\n\n        part1 = DateTools.dateToString(d1, dateRes);\n        part2 = DateTools.dateToString(d2, dateRes);\n      } catch (Exception e) {\n        // do nothing\n      }\n\n      lower.setText(part1);\n      upper.setText(part2);\n\n      return new RangeQueryNode(lower, upper, collator);\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof ParametricRangeQueryNode) {\n      ParametricRangeQueryNode parametricRangeNode = (ParametricRangeQueryNode) node;\n      ParametricQueryNode upper = parametricRangeNode.getUpperBound();\n      ParametricQueryNode lower = parametricRangeNode.getLowerBound();\n      Locale locale = Locale.getDefault();\n      Collator collator = null;\n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n\n      if (getQueryConfigHandler().hasAttribute(RangeCollatorAttribute.class)) {\n\n        collator = getQueryConfigHandler().getAttribute(\n            RangeCollatorAttribute.class).getRangeCollator();\n\n      }\n\n      if (getQueryConfigHandler().hasAttribute(LocaleAttribute.class)) {\n\n        locale = getQueryConfigHandler().getAttribute(LocaleAttribute.class)\n            .getLocale();\n\n      }\n\n      FieldConfig fieldConfig = getQueryConfigHandler().getFieldConfig(\n          parametricRangeNode.getField());\n\n      if (fieldConfig != null) {\n\n        if (fieldConfig.hasAttribute(DateResolutionAttribute.class)) {\n\n          dateRes = fieldConfig.getAttribute(DateResolutionAttribute.class)\n              .getDateResolution();\n\n        }\n\n      }\n\n      if (upper.getOperator() == CompareOperator.LE) {\n        inclusive = true;\n\n      } else if (lower.getOperator() == CompareOperator.GE) {\n        inclusive = true;\n      }\n\n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n\n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        Date d1 = df.parse(part1);\n        Date d2 = df.parse(part2);\n        if (inclusive) {\n          // The user can only specify the date, not the time, so make sure\n          // the time is set to the latest possible time of that date to really\n          // include all documents:\n          Calendar cal = Calendar.getInstance(locale);\n          cal.setTime(d2);\n          cal.set(Calendar.HOUR_OF_DAY, 23);\n          cal.set(Calendar.MINUTE, 59);\n          cal.set(Calendar.SECOND, 59);\n          cal.set(Calendar.MILLISECOND, 999);\n          d2 = cal.getTime();\n        }\n\n        part1 = DateTools.dateToString(d1, dateRes);\n        part2 = DateTools.dateToString(d2, dateRes);\n      } catch (Exception e) {\n        // do nothing\n      }\n\n      lower.setText(part1);\n      upper.setText(part2);\n\n      return new RangeQueryNode(lower, upper, collator);\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/ParametricRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/ParametricRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof ParametricRangeQueryNode) {\n      ParametricRangeQueryNode parametricRangeNode = (ParametricRangeQueryNode) node;\n      ParametricQueryNode upper = parametricRangeNode.getUpperBound();\n      ParametricQueryNode lower = parametricRangeNode.getLowerBound();\n      Locale locale = Locale.getDefault();\n      Collator collator = null;\n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n\n      if (getQueryConfigHandler().hasAttribute(RangeCollatorAttribute.class)) {\n\n        collator = getQueryConfigHandler().getAttribute(\n            RangeCollatorAttribute.class).getRangeCollator();\n\n      }\n\n      if (getQueryConfigHandler().hasAttribute(LocaleAttribute.class)) {\n\n        locale = getQueryConfigHandler().getAttribute(LocaleAttribute.class)\n            .getLocale();\n\n      }\n\n      CharSequence field = parametricRangeNode.getField();\n      String fieldStr = null;\n\n      if (field != null) {\n        fieldStr = field.toString();\n      }\n\n      FieldConfig fieldConfig = getQueryConfigHandler()\n          .getFieldConfig(fieldStr);\n\n      if (fieldConfig != null) {\n\n        if (fieldConfig.hasAttribute(DateResolutionAttribute.class)) {\n\n          dateRes = fieldConfig.getAttribute(DateResolutionAttribute.class)\n              .getDateResolution();\n\n        }\n\n      }\n\n      if (upper.getOperator() == CompareOperator.LE) {\n        inclusive = true;\n\n      } else if (lower.getOperator() == CompareOperator.GE) {\n        inclusive = true;\n      }\n\n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n\n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        Date d1 = df.parse(part1);\n        Date d2 = df.parse(part2);\n        if (inclusive) {\n          // The user can only specify the date, not the time, so make sure\n          // the time is set to the latest possible time of that date to really\n          // include all documents:\n          Calendar cal = Calendar.getInstance(locale);\n          cal.setTime(d2);\n          cal.set(Calendar.HOUR_OF_DAY, 23);\n          cal.set(Calendar.MINUTE, 59);\n          cal.set(Calendar.SECOND, 59);\n          cal.set(Calendar.MILLISECOND, 999);\n          d2 = cal.getTime();\n        }\n\n        part1 = DateTools.dateToString(d1, dateRes);\n        part2 = DateTools.dateToString(d2, dateRes);\n      } catch (Exception e) {\n        // do nothing\n      }\n\n      lower.setText(part1);\n      upper.setText(part2);\n\n      return new RangeQueryNode(lower, upper, collator);\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof ParametricRangeQueryNode) {\n      ParametricRangeQueryNode parametricRangeNode = (ParametricRangeQueryNode) node;\n      ParametricQueryNode upper = parametricRangeNode.getUpperBound();\n      ParametricQueryNode lower = parametricRangeNode.getLowerBound();\n      Locale locale = Locale.getDefault();\n      Collator collator = null;\n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n\n      if (getQueryConfigHandler().hasAttribute(RangeCollatorAttribute.class)) {\n\n        collator = getQueryConfigHandler().getAttribute(\n            RangeCollatorAttribute.class).getRangeCollator();\n\n      }\n\n      if (getQueryConfigHandler().hasAttribute(LocaleAttribute.class)) {\n\n        locale = getQueryConfigHandler().getAttribute(LocaleAttribute.class)\n            .getLocale();\n\n      }\n\n      FieldConfig fieldConfig = getQueryConfigHandler().getFieldConfig(\n          parametricRangeNode.getField());\n\n      if (fieldConfig != null) {\n\n        if (fieldConfig.hasAttribute(DateResolutionAttribute.class)) {\n\n          dateRes = fieldConfig.getAttribute(DateResolutionAttribute.class)\n              .getDateResolution();\n\n        }\n\n      }\n\n      if (upper.getOperator() == CompareOperator.LE) {\n        inclusive = true;\n\n      } else if (lower.getOperator() == CompareOperator.GE) {\n        inclusive = true;\n      }\n\n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n\n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        Date d1 = df.parse(part1);\n        Date d2 = df.parse(part2);\n        if (inclusive) {\n          // The user can only specify the date, not the time, so make sure\n          // the time is set to the latest possible time of that date to really\n          // include all documents:\n          Calendar cal = Calendar.getInstance(locale);\n          cal.setTime(d2);\n          cal.set(Calendar.HOUR_OF_DAY, 23);\n          cal.set(Calendar.MINUTE, 59);\n          cal.set(Calendar.SECOND, 59);\n          cal.set(Calendar.MILLISECOND, 999);\n          d2 = cal.getTime();\n        }\n\n        part1 = DateTools.dateToString(d1, dateRes);\n        part2 = DateTools.dateToString(d2, dateRes);\n      } catch (Exception e) {\n        // do nothing\n      }\n\n      lower.setText(part1);\n      upper.setText(part2);\n\n      return new RangeQueryNode(lower, upper, collator);\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/ParametricRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/ParametricRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof ParametricRangeQueryNode) {\n      ParametricRangeQueryNode parametricRangeNode = (ParametricRangeQueryNode) node;\n      ParametricQueryNode upper = parametricRangeNode.getUpperBound();\n      ParametricQueryNode lower = parametricRangeNode.getLowerBound();\n      Locale locale = Locale.getDefault();\n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n\n      if (getQueryConfigHandler().hasAttribute(LocaleAttribute.class)) {\n\n        locale = getQueryConfigHandler().getAttribute(LocaleAttribute.class)\n            .getLocale();\n\n      }\n\n      CharSequence field = parametricRangeNode.getField();\n      String fieldStr = null;\n\n      if (field != null) {\n        fieldStr = field.toString();\n      }\n\n      FieldConfig fieldConfig = getQueryConfigHandler()\n          .getFieldConfig(fieldStr);\n\n      if (fieldConfig != null) {\n\n        if (fieldConfig.hasAttribute(DateResolutionAttribute.class)) {\n\n          dateRes = fieldConfig.getAttribute(DateResolutionAttribute.class)\n              .getDateResolution();\n\n        }\n\n      }\n\n      if (upper.getOperator() == CompareOperator.LE) {\n        inclusive = true;\n\n      } else if (lower.getOperator() == CompareOperator.GE) {\n        inclusive = true;\n      }\n\n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n\n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        Date d1 = df.parse(part1);\n        Date d2 = df.parse(part2);\n        if (inclusive) {\n          // The user can only specify the date, not the time, so make sure\n          // the time is set to the latest possible time of that date to really\n          // include all documents:\n          Calendar cal = Calendar.getInstance(locale);\n          cal.setTime(d2);\n          cal.set(Calendar.HOUR_OF_DAY, 23);\n          cal.set(Calendar.MINUTE, 59);\n          cal.set(Calendar.SECOND, 59);\n          cal.set(Calendar.MILLISECOND, 999);\n          d2 = cal.getTime();\n        }\n\n        part1 = DateTools.dateToString(d1, dateRes);\n        part2 = DateTools.dateToString(d2, dateRes);\n      } catch (Exception e) {\n        // do nothing\n      }\n\n      lower.setText(part1);\n      upper.setText(part2);\n\n      return new RangeQueryNode(lower, upper);\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof ParametricRangeQueryNode) {\n      ParametricRangeQueryNode parametricRangeNode = (ParametricRangeQueryNode) node;\n      ParametricQueryNode upper = parametricRangeNode.getUpperBound();\n      ParametricQueryNode lower = parametricRangeNode.getLowerBound();\n      Locale locale = Locale.getDefault();\n      Collator collator = null;\n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n\n      if (getQueryConfigHandler().hasAttribute(RangeCollatorAttribute.class)) {\n\n        collator = getQueryConfigHandler().getAttribute(\n            RangeCollatorAttribute.class).getRangeCollator();\n\n      }\n\n      if (getQueryConfigHandler().hasAttribute(LocaleAttribute.class)) {\n\n        locale = getQueryConfigHandler().getAttribute(LocaleAttribute.class)\n            .getLocale();\n\n      }\n\n      CharSequence field = parametricRangeNode.getField();\n      String fieldStr = null;\n\n      if (field != null) {\n        fieldStr = field.toString();\n      }\n\n      FieldConfig fieldConfig = getQueryConfigHandler()\n          .getFieldConfig(fieldStr);\n\n      if (fieldConfig != null) {\n\n        if (fieldConfig.hasAttribute(DateResolutionAttribute.class)) {\n\n          dateRes = fieldConfig.getAttribute(DateResolutionAttribute.class)\n              .getDateResolution();\n\n        }\n\n      }\n\n      if (upper.getOperator() == CompareOperator.LE) {\n        inclusive = true;\n\n      } else if (lower.getOperator() == CompareOperator.GE) {\n        inclusive = true;\n      }\n\n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n\n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        Date d1 = df.parse(part1);\n        Date d2 = df.parse(part2);\n        if (inclusive) {\n          // The user can only specify the date, not the time, so make sure\n          // the time is set to the latest possible time of that date to really\n          // include all documents:\n          Calendar cal = Calendar.getInstance(locale);\n          cal.setTime(d2);\n          cal.set(Calendar.HOUR_OF_DAY, 23);\n          cal.set(Calendar.MINUTE, 59);\n          cal.set(Calendar.SECOND, 59);\n          cal.set(Calendar.MILLISECOND, 999);\n          d2 = cal.getTime();\n        }\n\n        part1 = DateTools.dateToString(d1, dateRes);\n        part2 = DateTools.dateToString(d2, dateRes);\n      } catch (Exception e) {\n        // do nothing\n      }\n\n      lower.setText(part1);\n      upper.setText(part2);\n\n      return new RangeQueryNode(lower, upper, collator);\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/ParametricRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/ParametricRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof ParametricRangeQueryNode) {\n      ParametricRangeQueryNode parametricRangeNode = (ParametricRangeQueryNode) node;\n      ParametricQueryNode upper = parametricRangeNode.getUpperBound();\n      ParametricQueryNode lower = parametricRangeNode.getLowerBound();\n      Locale locale = Locale.getDefault();\n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n\n      if (getQueryConfigHandler().hasAttribute(LocaleAttribute.class)) {\n\n        locale = getQueryConfigHandler().getAttribute(LocaleAttribute.class)\n            .getLocale();\n\n      }\n\n      CharSequence field = parametricRangeNode.getField();\n      String fieldStr = null;\n\n      if (field != null) {\n        fieldStr = field.toString();\n      }\n\n      FieldConfig fieldConfig = getQueryConfigHandler()\n          .getFieldConfig(fieldStr);\n\n      if (fieldConfig != null) {\n\n        if (fieldConfig.hasAttribute(DateResolutionAttribute.class)) {\n\n          dateRes = fieldConfig.getAttribute(DateResolutionAttribute.class)\n              .getDateResolution();\n\n        }\n\n      }\n\n      if (upper.getOperator() == CompareOperator.LE) {\n        inclusive = true;\n\n      } else if (lower.getOperator() == CompareOperator.GE) {\n        inclusive = true;\n      }\n\n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n\n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        Date d1 = df.parse(part1);\n        Date d2 = df.parse(part2);\n        if (inclusive) {\n          // The user can only specify the date, not the time, so make sure\n          // the time is set to the latest possible time of that date to really\n          // include all documents:\n          Calendar cal = Calendar.getInstance(locale);\n          cal.setTime(d2);\n          cal.set(Calendar.HOUR_OF_DAY, 23);\n          cal.set(Calendar.MINUTE, 59);\n          cal.set(Calendar.SECOND, 59);\n          cal.set(Calendar.MILLISECOND, 999);\n          d2 = cal.getTime();\n        }\n\n        part1 = DateTools.dateToString(d1, dateRes);\n        part2 = DateTools.dateToString(d2, dateRes);\n      } catch (Exception e) {\n        // do nothing\n      }\n\n      lower.setText(part1);\n      upper.setText(part2);\n\n      return new RangeQueryNode(lower, upper);\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof ParametricRangeQueryNode) {\n      ParametricRangeQueryNode parametricRangeNode = (ParametricRangeQueryNode) node;\n      ParametricQueryNode upper = parametricRangeNode.getUpperBound();\n      ParametricQueryNode lower = parametricRangeNode.getLowerBound();\n      Locale locale = Locale.getDefault();\n      Collator collator = null;\n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n\n      if (getQueryConfigHandler().hasAttribute(RangeCollatorAttribute.class)) {\n\n        collator = getQueryConfigHandler().getAttribute(\n            RangeCollatorAttribute.class).getRangeCollator();\n\n      }\n\n      if (getQueryConfigHandler().hasAttribute(LocaleAttribute.class)) {\n\n        locale = getQueryConfigHandler().getAttribute(LocaleAttribute.class)\n            .getLocale();\n\n      }\n\n      CharSequence field = parametricRangeNode.getField();\n      String fieldStr = null;\n\n      if (field != null) {\n        fieldStr = field.toString();\n      }\n\n      FieldConfig fieldConfig = getQueryConfigHandler()\n          .getFieldConfig(fieldStr);\n\n      if (fieldConfig != null) {\n\n        if (fieldConfig.hasAttribute(DateResolutionAttribute.class)) {\n\n          dateRes = fieldConfig.getAttribute(DateResolutionAttribute.class)\n              .getDateResolution();\n\n        }\n\n      }\n\n      if (upper.getOperator() == CompareOperator.LE) {\n        inclusive = true;\n\n      } else if (lower.getOperator() == CompareOperator.GE) {\n        inclusive = true;\n      }\n\n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n\n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        Date d1 = df.parse(part1);\n        Date d2 = df.parse(part2);\n        if (inclusive) {\n          // The user can only specify the date, not the time, so make sure\n          // the time is set to the latest possible time of that date to really\n          // include all documents:\n          Calendar cal = Calendar.getInstance(locale);\n          cal.setTime(d2);\n          cal.set(Calendar.HOUR_OF_DAY, 23);\n          cal.set(Calendar.MINUTE, 59);\n          cal.set(Calendar.SECOND, 59);\n          cal.set(Calendar.MILLISECOND, 999);\n          d2 = cal.getTime();\n        }\n\n        part1 = DateTools.dateToString(d1, dateRes);\n        part2 = DateTools.dateToString(d2, dateRes);\n      } catch (Exception e) {\n        // do nothing\n      }\n\n      lower.setText(part1);\n      upper.setText(part2);\n\n      return new RangeQueryNode(lower, upper, collator);\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/ParametricRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/ParametricRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof ParametricRangeQueryNode) {\n      ParametricRangeQueryNode parametricRangeNode = (ParametricRangeQueryNode) node;\n      ParametricQueryNode upper = parametricRangeNode.getUpperBound();\n      ParametricQueryNode lower = parametricRangeNode.getLowerBound();\n      Locale locale = Locale.getDefault();\n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n\n      if (getQueryConfigHandler().hasAttribute(LocaleAttribute.class)) {\n\n        locale = getQueryConfigHandler().getAttribute(LocaleAttribute.class)\n            .getLocale();\n\n      }\n\n      CharSequence field = parametricRangeNode.getField();\n      String fieldStr = null;\n\n      if (field != null) {\n        fieldStr = field.toString();\n      }\n\n      FieldConfig fieldConfig = getQueryConfigHandler()\n          .getFieldConfig(fieldStr);\n\n      if (fieldConfig != null) {\n\n        if (fieldConfig.hasAttribute(DateResolutionAttribute.class)) {\n\n          dateRes = fieldConfig.getAttribute(DateResolutionAttribute.class)\n              .getDateResolution();\n\n        }\n\n      }\n\n      if (upper.getOperator() == CompareOperator.LE) {\n        inclusive = true;\n\n      } else if (lower.getOperator() == CompareOperator.GE) {\n        inclusive = true;\n      }\n\n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n\n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        Date d1 = df.parse(part1);\n        Date d2 = df.parse(part2);\n        if (inclusive) {\n          // The user can only specify the date, not the time, so make sure\n          // the time is set to the latest possible time of that date to really\n          // include all documents:\n          Calendar cal = Calendar.getInstance(locale);\n          cal.setTime(d2);\n          cal.set(Calendar.HOUR_OF_DAY, 23);\n          cal.set(Calendar.MINUTE, 59);\n          cal.set(Calendar.SECOND, 59);\n          cal.set(Calendar.MILLISECOND, 999);\n          d2 = cal.getTime();\n        }\n\n        part1 = DateTools.dateToString(d1, dateRes);\n        part2 = DateTools.dateToString(d2, dateRes);\n      } catch (Exception e) {\n        // do nothing\n      }\n\n      lower.setText(part1);\n      upper.setText(part2);\n\n      return new RangeQueryNode(lower, upper);\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof ParametricRangeQueryNode) {\n      ParametricRangeQueryNode parametricRangeNode = (ParametricRangeQueryNode) node;\n      ParametricQueryNode upper = parametricRangeNode.getUpperBound();\n      ParametricQueryNode lower = parametricRangeNode.getLowerBound();\n      Locale locale = Locale.getDefault();\n      Collator collator = null;\n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n\n      if (getQueryConfigHandler().hasAttribute(RangeCollatorAttribute.class)) {\n\n        collator = getQueryConfigHandler().getAttribute(\n            RangeCollatorAttribute.class).getRangeCollator();\n\n      }\n\n      if (getQueryConfigHandler().hasAttribute(LocaleAttribute.class)) {\n\n        locale = getQueryConfigHandler().getAttribute(LocaleAttribute.class)\n            .getLocale();\n\n      }\n\n      CharSequence field = parametricRangeNode.getField();\n      String fieldStr = null;\n\n      if (field != null) {\n        fieldStr = field.toString();\n      }\n\n      FieldConfig fieldConfig = getQueryConfigHandler()\n          .getFieldConfig(fieldStr);\n\n      if (fieldConfig != null) {\n\n        if (fieldConfig.hasAttribute(DateResolutionAttribute.class)) {\n\n          dateRes = fieldConfig.getAttribute(DateResolutionAttribute.class)\n              .getDateResolution();\n\n        }\n\n      }\n\n      if (upper.getOperator() == CompareOperator.LE) {\n        inclusive = true;\n\n      } else if (lower.getOperator() == CompareOperator.GE) {\n        inclusive = true;\n      }\n\n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n\n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        Date d1 = df.parse(part1);\n        Date d2 = df.parse(part2);\n        if (inclusive) {\n          // The user can only specify the date, not the time, so make sure\n          // the time is set to the latest possible time of that date to really\n          // include all documents:\n          Calendar cal = Calendar.getInstance(locale);\n          cal.setTime(d2);\n          cal.set(Calendar.HOUR_OF_DAY, 23);\n          cal.set(Calendar.MINUTE, 59);\n          cal.set(Calendar.SECOND, 59);\n          cal.set(Calendar.MILLISECOND, 999);\n          d2 = cal.getTime();\n        }\n\n        part1 = DateTools.dateToString(d1, dateRes);\n        part2 = DateTools.dateToString(d2, dateRes);\n      } catch (Exception e) {\n        // do nothing\n      }\n\n      lower.setText(part1);\n      upper.setText(part2);\n\n      return new RangeQueryNode(lower, upper, collator);\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c1fe1aedb70da4139fd9f2f7e92e572017fd083","date":1309827452,"type":3,"author":"Adriano Crestani Campos","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/ParametricRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/ParametricRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof ParametricRangeQueryNode) {\n      ParametricRangeQueryNode parametricRangeNode = (ParametricRangeQueryNode) node;\n      ParametricQueryNode upper = parametricRangeNode.getUpperBound();\n      ParametricQueryNode lower = parametricRangeNode.getLowerBound();\n      \n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n      Locale locale = getQueryConfigHandler().get(ConfigurationKeys.LOCALE);\n\n      if (locale == null) {\n        locale = Locale.getDefault();\n      }\n\n      CharSequence field = parametricRangeNode.getField();\n      String fieldStr = null;\n\n      if (field != null) {\n        fieldStr = field.toString();\n      }\n\n      FieldConfig fieldConfig = getQueryConfigHandler()\n          .getFieldConfig(fieldStr);\n\n      if (fieldConfig != null) {\n        dateRes = fieldConfig.get(ConfigurationKeys.DATE_RESOLUTION);\n      }\n\n      if (upper.getOperator() == CompareOperator.LE) {\n        inclusive = true;\n\n      } else if (lower.getOperator() == CompareOperator.GE) {\n        inclusive = true;\n      }\n\n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n\n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        Date d1 = df.parse(part1);\n        Date d2 = df.parse(part2);\n        if (inclusive) {\n          // The user can only specify the date, not the time, so make sure\n          // the time is set to the latest possible time of that date to really\n          // include all documents:\n          Calendar cal = Calendar.getInstance(locale);\n          cal.setTime(d2);\n          cal.set(Calendar.HOUR_OF_DAY, 23);\n          cal.set(Calendar.MINUTE, 59);\n          cal.set(Calendar.SECOND, 59);\n          cal.set(Calendar.MILLISECOND, 999);\n          d2 = cal.getTime();\n        }\n\n        part1 = DateTools.dateToString(d1, dateRes);\n        part2 = DateTools.dateToString(d2, dateRes);\n      } catch (Exception e) {\n        // do nothing\n      }\n\n      lower.setText(part1);\n      upper.setText(part2);\n\n      return new RangeQueryNode(lower, upper);\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof ParametricRangeQueryNode) {\n      ParametricRangeQueryNode parametricRangeNode = (ParametricRangeQueryNode) node;\n      ParametricQueryNode upper = parametricRangeNode.getUpperBound();\n      ParametricQueryNode lower = parametricRangeNode.getLowerBound();\n      Locale locale = Locale.getDefault();\n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n\n      if (getQueryConfigHandler().hasAttribute(LocaleAttribute.class)) {\n\n        locale = getQueryConfigHandler().getAttribute(LocaleAttribute.class)\n            .getLocale();\n\n      }\n\n      CharSequence field = parametricRangeNode.getField();\n      String fieldStr = null;\n\n      if (field != null) {\n        fieldStr = field.toString();\n      }\n\n      FieldConfig fieldConfig = getQueryConfigHandler()\n          .getFieldConfig(fieldStr);\n\n      if (fieldConfig != null) {\n\n        if (fieldConfig.hasAttribute(DateResolutionAttribute.class)) {\n\n          dateRes = fieldConfig.getAttribute(DateResolutionAttribute.class)\n              .getDateResolution();\n\n        }\n\n      }\n\n      if (upper.getOperator() == CompareOperator.LE) {\n        inclusive = true;\n\n      } else if (lower.getOperator() == CompareOperator.GE) {\n        inclusive = true;\n      }\n\n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n\n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        Date d1 = df.parse(part1);\n        Date d2 = df.parse(part2);\n        if (inclusive) {\n          // The user can only specify the date, not the time, so make sure\n          // the time is set to the latest possible time of that date to really\n          // include all documents:\n          Calendar cal = Calendar.getInstance(locale);\n          cal.setTime(d2);\n          cal.set(Calendar.HOUR_OF_DAY, 23);\n          cal.set(Calendar.MINUTE, 59);\n          cal.set(Calendar.SECOND, 59);\n          cal.set(Calendar.MILLISECOND, 999);\n          d2 = cal.getTime();\n        }\n\n        part1 = DateTools.dateToString(d1, dateRes);\n        part2 = DateTools.dateToString(d2, dateRes);\n      } catch (Exception e) {\n        // do nothing\n      }\n\n      lower.setText(part1);\n      upper.setText(part2);\n\n      return new RangeQueryNode(lower, upper);\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/ParametricRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/ParametricRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof ParametricRangeQueryNode) {\n      ParametricRangeQueryNode parametricRangeNode = (ParametricRangeQueryNode) node;\n      ParametricQueryNode upper = parametricRangeNode.getUpperBound();\n      ParametricQueryNode lower = parametricRangeNode.getLowerBound();\n      \n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n      Locale locale = getQueryConfigHandler().get(ConfigurationKeys.LOCALE);\n\n      if (locale == null) {\n        locale = Locale.getDefault();\n      }\n\n      CharSequence field = parametricRangeNode.getField();\n      String fieldStr = null;\n\n      if (field != null) {\n        fieldStr = field.toString();\n      }\n\n      FieldConfig fieldConfig = getQueryConfigHandler()\n          .getFieldConfig(fieldStr);\n\n      if (fieldConfig != null) {\n        dateRes = fieldConfig.get(ConfigurationKeys.DATE_RESOLUTION);\n      }\n\n      if (upper.getOperator() == CompareOperator.LE) {\n        inclusive = true;\n\n      } else if (lower.getOperator() == CompareOperator.GE) {\n        inclusive = true;\n      }\n\n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n\n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        Date d1 = df.parse(part1);\n        Date d2 = df.parse(part2);\n        if (inclusive) {\n          // The user can only specify the date, not the time, so make sure\n          // the time is set to the latest possible time of that date to really\n          // include all documents:\n          Calendar cal = Calendar.getInstance(locale);\n          cal.setTime(d2);\n          cal.set(Calendar.HOUR_OF_DAY, 23);\n          cal.set(Calendar.MINUTE, 59);\n          cal.set(Calendar.SECOND, 59);\n          cal.set(Calendar.MILLISECOND, 999);\n          d2 = cal.getTime();\n        }\n\n        part1 = DateTools.dateToString(d1, dateRes);\n        part2 = DateTools.dateToString(d2, dateRes);\n      } catch (Exception e) {\n        // do nothing\n      }\n\n      lower.setText(part1);\n      upper.setText(part2);\n\n      return new RangeQueryNode(lower, upper);\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof ParametricRangeQueryNode) {\n      ParametricRangeQueryNode parametricRangeNode = (ParametricRangeQueryNode) node;\n      ParametricQueryNode upper = parametricRangeNode.getUpperBound();\n      ParametricQueryNode lower = parametricRangeNode.getLowerBound();\n      Locale locale = Locale.getDefault();\n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n\n      if (getQueryConfigHandler().hasAttribute(LocaleAttribute.class)) {\n\n        locale = getQueryConfigHandler().getAttribute(LocaleAttribute.class)\n            .getLocale();\n\n      }\n\n      CharSequence field = parametricRangeNode.getField();\n      String fieldStr = null;\n\n      if (field != null) {\n        fieldStr = field.toString();\n      }\n\n      FieldConfig fieldConfig = getQueryConfigHandler()\n          .getFieldConfig(fieldStr);\n\n      if (fieldConfig != null) {\n\n        if (fieldConfig.hasAttribute(DateResolutionAttribute.class)) {\n\n          dateRes = fieldConfig.getAttribute(DateResolutionAttribute.class)\n              .getDateResolution();\n\n        }\n\n      }\n\n      if (upper.getOperator() == CompareOperator.LE) {\n        inclusive = true;\n\n      } else if (lower.getOperator() == CompareOperator.GE) {\n        inclusive = true;\n      }\n\n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n\n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        Date d1 = df.parse(part1);\n        Date d2 = df.parse(part2);\n        if (inclusive) {\n          // The user can only specify the date, not the time, so make sure\n          // the time is set to the latest possible time of that date to really\n          // include all documents:\n          Calendar cal = Calendar.getInstance(locale);\n          cal.setTime(d2);\n          cal.set(Calendar.HOUR_OF_DAY, 23);\n          cal.set(Calendar.MINUTE, 59);\n          cal.set(Calendar.SECOND, 59);\n          cal.set(Calendar.MILLISECOND, 999);\n          d2 = cal.getTime();\n        }\n\n        part1 = DateTools.dateToString(d1, dateRes);\n        part2 = DateTools.dateToString(d2, dateRes);\n      } catch (Exception e) {\n        // do nothing\n      }\n\n      lower.setText(part1);\n      upper.setText(part2);\n\n      return new RangeQueryNode(lower, upper);\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/ParametricRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/ParametricRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof ParametricRangeQueryNode) {\n      ParametricRangeQueryNode parametricRangeNode = (ParametricRangeQueryNode) node;\n      ParametricQueryNode upper = parametricRangeNode.getUpperBound();\n      ParametricQueryNode lower = parametricRangeNode.getLowerBound();\n      \n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n      Locale locale = getQueryConfigHandler().get(ConfigurationKeys.LOCALE);\n\n      if (locale == null) {\n        locale = Locale.getDefault();\n      }\n\n      CharSequence field = parametricRangeNode.getField();\n      String fieldStr = null;\n\n      if (field != null) {\n        fieldStr = field.toString();\n      }\n\n      FieldConfig fieldConfig = getQueryConfigHandler()\n          .getFieldConfig(fieldStr);\n\n      if (fieldConfig != null) {\n        dateRes = fieldConfig.get(ConfigurationKeys.DATE_RESOLUTION);\n      }\n\n      if (upper.getOperator() == CompareOperator.LE) {\n        inclusive = true;\n\n      } else if (lower.getOperator() == CompareOperator.GE) {\n        inclusive = true;\n      }\n\n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n\n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        Date d1 = df.parse(part1);\n        Date d2 = df.parse(part2);\n        if (inclusive) {\n          // The user can only specify the date, not the time, so make sure\n          // the time is set to the latest possible time of that date to really\n          // include all documents:\n          Calendar cal = Calendar.getInstance(locale);\n          cal.setTime(d2);\n          cal.set(Calendar.HOUR_OF_DAY, 23);\n          cal.set(Calendar.MINUTE, 59);\n          cal.set(Calendar.SECOND, 59);\n          cal.set(Calendar.MILLISECOND, 999);\n          d2 = cal.getTime();\n        }\n\n        part1 = DateTools.dateToString(d1, dateRes);\n        part2 = DateTools.dateToString(d2, dateRes);\n      } catch (Exception e) {\n        // do nothing\n      }\n\n      lower.setText(part1);\n      upper.setText(part2);\n\n      return new RangeQueryNode(lower, upper);\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof ParametricRangeQueryNode) {\n      ParametricRangeQueryNode parametricRangeNode = (ParametricRangeQueryNode) node;\n      ParametricQueryNode upper = parametricRangeNode.getUpperBound();\n      ParametricQueryNode lower = parametricRangeNode.getLowerBound();\n      Locale locale = Locale.getDefault();\n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n\n      if (getQueryConfigHandler().hasAttribute(LocaleAttribute.class)) {\n\n        locale = getQueryConfigHandler().getAttribute(LocaleAttribute.class)\n            .getLocale();\n\n      }\n\n      CharSequence field = parametricRangeNode.getField();\n      String fieldStr = null;\n\n      if (field != null) {\n        fieldStr = field.toString();\n      }\n\n      FieldConfig fieldConfig = getQueryConfigHandler()\n          .getFieldConfig(fieldStr);\n\n      if (fieldConfig != null) {\n\n        if (fieldConfig.hasAttribute(DateResolutionAttribute.class)) {\n\n          dateRes = fieldConfig.getAttribute(DateResolutionAttribute.class)\n              .getDateResolution();\n\n        }\n\n      }\n\n      if (upper.getOperator() == CompareOperator.LE) {\n        inclusive = true;\n\n      } else if (lower.getOperator() == CompareOperator.GE) {\n        inclusive = true;\n      }\n\n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n\n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        Date d1 = df.parse(part1);\n        Date d2 = df.parse(part2);\n        if (inclusive) {\n          // The user can only specify the date, not the time, so make sure\n          // the time is set to the latest possible time of that date to really\n          // include all documents:\n          Calendar cal = Calendar.getInstance(locale);\n          cal.setTime(d2);\n          cal.set(Calendar.HOUR_OF_DAY, 23);\n          cal.set(Calendar.MINUTE, 59);\n          cal.set(Calendar.SECOND, 59);\n          cal.set(Calendar.MILLISECOND, 999);\n          d2 = cal.getTime();\n        }\n\n        part1 = DateTools.dateToString(d1, dateRes);\n        part2 = DateTools.dateToString(d2, dateRes);\n      } catch (Exception e) {\n        // do nothing\n      }\n\n      lower.setText(part1);\n      upper.setText(part2);\n\n      return new RangeQueryNode(lower, upper);\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7e86426ca0513cfc495c3a2c0bb0c7abe03988d","date":1310245513,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/ParametricRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/ParametricRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof ParametricRangeQueryNode) {\n      ParametricRangeQueryNode parametricRangeNode = (ParametricRangeQueryNode) node;\n      ParametricQueryNode upper = parametricRangeNode.getUpperBound();\n      ParametricQueryNode lower = parametricRangeNode.getLowerBound();\n      \n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n      Locale locale = getQueryConfigHandler().get(ConfigurationKeys.LOCALE);\n\n      if (locale == null) {\n        locale = Locale.getDefault();\n      }\n      \n      CharSequence field = parametricRangeNode.getField();\n      String fieldStr = null;\n      \n      if (field != null) {\n        fieldStr = field.toString();\n      }\n      \n      FieldConfig fieldConfig = getQueryConfigHandler()\n          .getFieldConfig(fieldStr);\n      \n      if (fieldConfig != null) {\n        dateRes = fieldConfig.get(ConfigurationKeys.DATE_RESOLUTION);\n      }\n      \n      if (upper.getOperator() == CompareOperator.LE) {\n        inclusive = true;\n        \n      } else if (lower.getOperator() == CompareOperator.GE) {\n        inclusive = true;\n      }\n      \n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n      \n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        Date d1 = df.parse(part1);\n        Date d2 = df.parse(part2);\n        if (inclusive) {\n          // The user can only specify the date, not the time, so make sure\n          // the time is set to the latest possible time of that date to really\n          // include all documents:\n          Calendar cal = Calendar.getInstance(locale);\n          cal.setTime(d2);\n          cal.set(Calendar.HOUR_OF_DAY, 23);\n          cal.set(Calendar.MINUTE, 59);\n          cal.set(Calendar.SECOND, 59);\n          cal.set(Calendar.MILLISECOND, 999);\n          d2 = cal.getTime();\n        }\n        \n        part1 = DateTools.dateToString(d1, dateRes);\n        part2 = DateTools.dateToString(d2, dateRes);\n      } catch (Exception e) {\n        // do nothing\n      }\n      \n      lower.setText(part1);\n      upper.setText(part2);\n      \n      return new TermRangeQueryNode(lower, upper,\n          lower.getOperator() == CompareOperator.GE,\n          upper.getOperator() == CompareOperator.LE);\n      \n    }\n    \n    return node;\n    \n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof ParametricRangeQueryNode) {\n      ParametricRangeQueryNode parametricRangeNode = (ParametricRangeQueryNode) node;\n      ParametricQueryNode upper = parametricRangeNode.getUpperBound();\n      ParametricQueryNode lower = parametricRangeNode.getLowerBound();\n      \n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n      Locale locale = getQueryConfigHandler().get(ConfigurationKeys.LOCALE);\n\n      if (locale == null) {\n        locale = Locale.getDefault();\n      }\n\n      CharSequence field = parametricRangeNode.getField();\n      String fieldStr = null;\n\n      if (field != null) {\n        fieldStr = field.toString();\n      }\n\n      FieldConfig fieldConfig = getQueryConfigHandler()\n          .getFieldConfig(fieldStr);\n\n      if (fieldConfig != null) {\n        dateRes = fieldConfig.get(ConfigurationKeys.DATE_RESOLUTION);\n      }\n\n      if (upper.getOperator() == CompareOperator.LE) {\n        inclusive = true;\n\n      } else if (lower.getOperator() == CompareOperator.GE) {\n        inclusive = true;\n      }\n\n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n\n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        Date d1 = df.parse(part1);\n        Date d2 = df.parse(part2);\n        if (inclusive) {\n          // The user can only specify the date, not the time, so make sure\n          // the time is set to the latest possible time of that date to really\n          // include all documents:\n          Calendar cal = Calendar.getInstance(locale);\n          cal.setTime(d2);\n          cal.set(Calendar.HOUR_OF_DAY, 23);\n          cal.set(Calendar.MINUTE, 59);\n          cal.set(Calendar.SECOND, 59);\n          cal.set(Calendar.MILLISECOND, 999);\n          d2 = cal.getTime();\n        }\n\n        part1 = DateTools.dateToString(d1, dateRes);\n        part2 = DateTools.dateToString(d2, dateRes);\n      } catch (Exception e) {\n        // do nothing\n      }\n\n      lower.setText(part1);\n      upper.setText(part2);\n\n      return new RangeQueryNode(lower, upper);\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":["e91b7614171e0a6a82351457c2870d2a0124ba9a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/ParametricRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/ParametricRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof ParametricRangeQueryNode) {\n      ParametricRangeQueryNode parametricRangeNode = (ParametricRangeQueryNode) node;\n      ParametricQueryNode upper = parametricRangeNode.getUpperBound();\n      ParametricQueryNode lower = parametricRangeNode.getLowerBound();\n      \n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n      Locale locale = getQueryConfigHandler().get(ConfigurationKeys.LOCALE);\n\n      if (locale == null) {\n        locale = Locale.getDefault();\n      }\n      \n      CharSequence field = parametricRangeNode.getField();\n      String fieldStr = null;\n      \n      if (field != null) {\n        fieldStr = field.toString();\n      }\n      \n      FieldConfig fieldConfig = getQueryConfigHandler()\n          .getFieldConfig(fieldStr);\n      \n      if (fieldConfig != null) {\n        dateRes = fieldConfig.get(ConfigurationKeys.DATE_RESOLUTION);\n      }\n      \n      if (upper.getOperator() == CompareOperator.LE) {\n        inclusive = true;\n        \n      } else if (lower.getOperator() == CompareOperator.GE) {\n        inclusive = true;\n      }\n      \n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n      \n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        Date d1 = df.parse(part1);\n        Date d2 = df.parse(part2);\n        if (inclusive) {\n          // The user can only specify the date, not the time, so make sure\n          // the time is set to the latest possible time of that date to really\n          // include all documents:\n          Calendar cal = Calendar.getInstance(locale);\n          cal.setTime(d2);\n          cal.set(Calendar.HOUR_OF_DAY, 23);\n          cal.set(Calendar.MINUTE, 59);\n          cal.set(Calendar.SECOND, 59);\n          cal.set(Calendar.MILLISECOND, 999);\n          d2 = cal.getTime();\n        }\n        \n        part1 = DateTools.dateToString(d1, dateRes);\n        part2 = DateTools.dateToString(d2, dateRes);\n      } catch (Exception e) {\n        // do nothing\n      }\n      \n      lower.setText(part1);\n      upper.setText(part2);\n      \n      return new TermRangeQueryNode(lower, upper,\n          lower.getOperator() == CompareOperator.GE,\n          upper.getOperator() == CompareOperator.LE);\n      \n    }\n    \n    return node;\n    \n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof ParametricRangeQueryNode) {\n      ParametricRangeQueryNode parametricRangeNode = (ParametricRangeQueryNode) node;\n      ParametricQueryNode upper = parametricRangeNode.getUpperBound();\n      ParametricQueryNode lower = parametricRangeNode.getLowerBound();\n      \n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n      Locale locale = getQueryConfigHandler().get(ConfigurationKeys.LOCALE);\n\n      if (locale == null) {\n        locale = Locale.getDefault();\n      }\n      \n      CharSequence field = parametricRangeNode.getField();\n      String fieldStr = null;\n      \n      if (field != null) {\n        fieldStr = field.toString();\n      }\n      \n      FieldConfig fieldConfig = getQueryConfigHandler()\n          .getFieldConfig(fieldStr);\n      \n      if (fieldConfig != null) {\n        dateRes = fieldConfig.get(ConfigurationKeys.DATE_RESOLUTION);\n      }\n      \n      if (upper.getOperator() == CompareOperator.LE) {\n        inclusive = true;\n        \n      } else if (lower.getOperator() == CompareOperator.GE) {\n        inclusive = true;\n      }\n      \n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n      \n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        df.setLenient(true);\n        Date d1 = df.parse(part1);\n        Date d2 = df.parse(part2);\n        if (inclusive) {\n          // The user can only specify the date, not the time, so make sure\n          // the time is set to the latest possible time of that date to really\n          // include all documents:\n          Calendar cal = Calendar.getInstance(locale);\n          cal.setTime(d2);\n          cal.set(Calendar.HOUR_OF_DAY, 23);\n          cal.set(Calendar.MINUTE, 59);\n          cal.set(Calendar.SECOND, 59);\n          cal.set(Calendar.MILLISECOND, 999);\n          d2 = cal.getTime();\n        }\n        \n        part1 = DateTools.dateToString(d1, dateRes);\n        part2 = DateTools.dateToString(d2, dateRes);\n      } catch (Exception e) {\n        // do nothing\n      }\n      \n      lower.setText(part1);\n      upper.setText(part2);\n      \n      return new TermRangeQueryNode(lower, upper,\n          lower.getOperator() == CompareOperator.GE,\n          upper.getOperator() == CompareOperator.LE);\n      \n    }\n    \n    return node;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["a7e86426ca0513cfc495c3a2c0bb0c7abe03988d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"8ba2a9cb0538219391cdc1af0f41446cf39684d7":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["3e492fb0f2bb0b4b47208286f9331ff55963c656","2c1fe1aedb70da4139fd9f2f7e92e572017fd083"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["3e492fb0f2bb0b4b47208286f9331ff55963c656","2c1fe1aedb70da4139fd9f2f7e92e572017fd083"],"a7e86426ca0513cfc495c3a2c0bb0c7abe03988d":["2c1fe1aedb70da4139fd9f2f7e92e572017fd083"],"2c1fe1aedb70da4139fd9f2f7e92e572017fd083":["3e492fb0f2bb0b4b47208286f9331ff55963c656"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","8ba2a9cb0538219391cdc1af0f41446cf39684d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["8ba2a9cb0538219391cdc1af0f41446cf39684d7"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8ba2a9cb0538219391cdc1af0f41446cf39684d7"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"8ba2a9cb0538219391cdc1af0f41446cf39684d7":["29ef99d61cda9641b6250bf9567329a6e65f901d","3e492fb0f2bb0b4b47208286f9331ff55963c656","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"a7e86426ca0513cfc495c3a2c0bb0c7abe03988d":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"2c1fe1aedb70da4139fd9f2f7e92e572017fd083":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","a7e86426ca0513cfc495c3a2c0bb0c7abe03988d"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","2c1fe1aedb70da4139fd9f2f7e92e572017fd083","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8ba2a9cb0538219391cdc1af0f41446cf39684d7","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}