{"path":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#checkDeleteStats().mjava","commits":[{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#checkDeleteStats().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#checkDeleteStats().mjava","sourceNew":"  // only for assert\n  private boolean checkDeleteStats() {\n    int numTerms2 = 0;\n    long bytesUsed2 = 0;\n    for(BufferedDeletes packet : deletes) {\n      numTerms2 += packet.numTermDeletes.get();\n      bytesUsed2 += packet.bytesUsed.get();\n    }\n    assert numTerms2 == numTerms.get(): \"numTerms2=\" + numTerms2 + \" vs \" + numTerms.get();\n    assert bytesUsed2 == bytesUsed.get(): \"bytesUsed2=\" + bytesUsed2 + \" vs \" + bytesUsed;\n    return true;\n  }\n\n","sourceOld":"  // only for assert\n  private boolean checkDeleteStats() {\n    int numTerms2 = 0;\n    long bytesUsed2 = 0;\n    for(SegmentDeletes deletes : deletesMap.values()) {\n      numTerms2 += deletes.numTermDeletes.get();\n      bytesUsed2 += deletes.bytesUsed.get();\n    }\n    assert numTerms2 == numTerms.get(): \"numTerms2=\" + numTerms2 + \" vs \" + numTerms.get();\n    assert bytesUsed2 == bytesUsed.get(): \"bytesUsed2=\" + bytesUsed2 + \" vs \" + bytesUsed;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69a6d2d525aeab53c867ed26934185e5bb627d0e","date":1296516902,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#checkDeleteStats().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#checkDeleteStats().mjava","sourceNew":"  // only for assert\n  private boolean checkDeleteStats() {\n    int numTerms2 = 0;\n    long bytesUsed2 = 0;\n    for(FrozenBufferedDeletes packet : deletes) {\n      numTerms2 += packet.numTermDeletes;\n      bytesUsed2 += packet.bytesUsed;\n    }\n    assert numTerms2 == numTerms.get(): \"numTerms2=\" + numTerms2 + \" vs \" + numTerms.get();\n    assert bytesUsed2 == bytesUsed.get(): \"bytesUsed2=\" + bytesUsed2 + \" vs \" + bytesUsed;\n    return true;\n  }\n\n","sourceOld":"  // only for assert\n  private boolean checkDeleteStats() {\n    int numTerms2 = 0;\n    long bytesUsed2 = 0;\n    for(BufferedDeletes packet : deletes) {\n      numTerms2 += packet.numTermDeletes.get();\n      bytesUsed2 += packet.bytesUsed.get();\n    }\n    assert numTerms2 == numTerms.get(): \"numTerms2=\" + numTerms2 + \" vs \" + numTerms.get();\n    assert bytesUsed2 == bytesUsed.get(): \"bytesUsed2=\" + bytesUsed2 + \" vs \" + bytesUsed;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#checkDeleteStats().mjava","pathOld":"/dev/null","sourceNew":"  // only for assert\n  private boolean checkDeleteStats() {\n    int numTerms2 = 0;\n    long bytesUsed2 = 0;\n    for(FrozenBufferedDeletes packet : deletes) {\n      numTerms2 += packet.numTermDeletes;\n      bytesUsed2 += packet.bytesUsed;\n    }\n    assert numTerms2 == numTerms.get(): \"numTerms2=\" + numTerms2 + \" vs \" + numTerms.get();\n    assert bytesUsed2 == bytesUsed.get(): \"bytesUsed2=\" + bytesUsed2 + \" vs \" + bytesUsed;\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#checkDeleteStats().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#checkDeleteStats().mjava","sourceNew":"  // only for assert\n  private boolean checkDeleteStats() {\n    int numTerms2 = 0;\n    long bytesUsed2 = 0;\n    for(FrozenBufferedDeletes packet : deletes) {\n      numTerms2 += packet.numTermDeletes;\n      bytesUsed2 += packet.bytesUsed;\n    }\n    assert numTerms2 == numTerms.get(): \"numTerms2=\" + numTerms2 + \" vs \" + numTerms.get();\n    assert bytesUsed2 == bytesUsed.get(): \"bytesUsed2=\" + bytesUsed2 + \" vs \" + bytesUsed;\n    return true;\n  }\n\n","sourceOld":"  // only for assert\n  private boolean checkDeleteStats() {\n    int numTerms2 = 0;\n    long bytesUsed2 = 0;\n    for(SegmentDeletes deletes : deletesMap.values()) {\n      numTerms2 += deletes.numTermDeletes.get();\n      bytesUsed2 += deletes.bytesUsed.get();\n    }\n    assert numTerms2 == numTerms.get(): \"numTerms2=\" + numTerms2 + \" vs \" + numTerms.get();\n    assert bytesUsed2 == bytesUsed.get(): \"bytesUsed2=\" + bytesUsed2 + \" vs \" + bytesUsed;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletesStream#checkDeleteStats().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#checkDeleteStats().mjava","sourceNew":"  // only for assert\n  private boolean checkDeleteStats() {\n    int numTerms2 = 0;\n    long bytesUsed2 = 0;\n    for(FrozenBufferedDeletes packet : deletes) {\n      numTerms2 += packet.numTermDeletes;\n      bytesUsed2 += packet.bytesUsed;\n    }\n    assert numTerms2 == numTerms.get(): \"numTerms2=\" + numTerms2 + \" vs \" + numTerms.get();\n    assert bytesUsed2 == bytesUsed.get(): \"bytesUsed2=\" + bytesUsed2 + \" vs \" + bytesUsed;\n    return true;\n  }\n\n","sourceOld":"  // only for assert\n  private boolean checkDeleteStats() {\n    int numTerms2 = 0;\n    long bytesUsed2 = 0;\n    for(FrozenBufferedDeletes packet : deletes) {\n      numTerms2 += packet.numTermDeletes;\n      bytesUsed2 += packet.bytesUsed;\n    }\n    assert numTerms2 == numTerms.get(): \"numTerms2=\" + numTerms2 + \" vs \" + numTerms.get();\n    assert bytesUsed2 == bytesUsed.get(): \"bytesUsed2=\" + bytesUsed2 + \" vs \" + bytesUsed;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["69a6d2d525aeab53c867ed26934185e5bb627d0e"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","69a6d2d525aeab53c867ed26934185e5bb627d0e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"69a6d2d525aeab53c867ed26934185e5bb627d0e":["c19f985e36a65cc969e8e564fe337a0d41512075"],"c19f985e36a65cc969e8e564fe337a0d41512075":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","69a6d2d525aeab53c867ed26934185e5bb627d0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","c19f985e36a65cc969e8e564fe337a0d41512075","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"69a6d2d525aeab53c867ed26934185e5bb627d0e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c19f985e36a65cc969e8e564fe337a0d41512075":["69a6d2d525aeab53c867ed26934185e5bb627d0e"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}