{"path":"solr/contrib/ltr/src/java/org/apache/solr/ltr/CSVFeatureLogger#makeFeatureVector(LTRScoringQuery.FeatureInfo[]).mjava","commits":[{"id":"8fa1f8f009c5147b03311c7e6e6469fa7b677186","date":1482164570,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/CSVFeatureLogger#makeFeatureVector(LTRScoringQuery.FeatureInfo[]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public String makeFeatureVector(LTRScoringQuery.FeatureInfo[] featuresInfo) {\n    // Allocate the buffer to a size based on the number of features instead of the \n    // default 16.  You need space for the name, value, and two separators per feature, \n    // but not all the features are expected to fire, so this is just a naive estimate. \n    StringBuilder sb = new StringBuilder(featuresInfo.length * 3);\n    boolean isDense = featureFormat.equals(FeatureFormat.DENSE);\n    for (LTRScoringQuery.FeatureInfo featInfo:featuresInfo) {\n      if (featInfo.isUsed() || isDense){\n        sb.append(featInfo.getName())\n        .append(keyValueSep)\n        .append(featInfo.getValue())\n        .append(featureSep);\n      }\n    }\n\n    final String features = (sb.length() > 0 ? \n        sb.substring(0, sb.length() - 1) : \"\");\n\n    return features;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/CSVFeatureLogger#makeFeatureVector(LTRScoringQuery.FeatureInfo[]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public String makeFeatureVector(LTRScoringQuery.FeatureInfo[] featuresInfo) {\n    // Allocate the buffer to a size based on the number of features instead of the \n    // default 16.  You need space for the name, value, and two separators per feature, \n    // but not all the features are expected to fire, so this is just a naive estimate. \n    StringBuilder sb = new StringBuilder(featuresInfo.length * 3);\n    boolean isDense = featureFormat.equals(FeatureFormat.DENSE);\n    for (LTRScoringQuery.FeatureInfo featInfo:featuresInfo) {\n      if (featInfo.isUsed() || isDense){\n        sb.append(featInfo.getName())\n        .append(keyValueSep)\n        .append(featInfo.getValue())\n        .append(featureSep);\n      }\n    }\n\n    final String features = (sb.length() > 0 ? \n        sb.substring(0, sb.length() - 1) : \"\");\n\n    return features;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8fa1f8f009c5147b03311c7e6e6469fa7b677186":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8fa1f8f009c5147b03311c7e6e6469fa7b677186"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8fa1f8f009c5147b03311c7e6e6469fa7b677186"]},"commit2Childs":{"8fa1f8f009c5147b03311c7e6e6469fa7b677186":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8fa1f8f009c5147b03311c7e6e6469fa7b677186","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}