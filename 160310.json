{"path":"src/java/org/apache/lucene/index/DocumentsWriter#recyclePostings(Posting[],int).mjava","commits":[{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#recyclePostings(Posting[],int).mjava","pathOld":"/dev/null","sourceNew":"  private synchronized void recyclePostings(Posting[] postings, int numPostings) {\n    // Move all Postings from this ThreadState back to our\n    // free list\n    if (postingsFreeCount + numPostings > postingsFreeList.length) {\n      final int newSize = (int) (1.25 * (postingsFreeCount + numPostings));\n      Posting[] newArray = new Posting[newSize];\n      System.arraycopy(postingsFreeList, 0, newArray, 0, postingsFreeCount);\n      postingsFreeList = newArray;\n    }\n    System.arraycopy(postings, 0, postingsFreeList, postingsFreeCount, numPostings);\n    postingsFreeCount += numPostings;\n    numBytesUsed -= numPostings * POSTING_NUM_BYTE;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["176324efd1eab6bd44a6d81c27c9b3a1a175ba3d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"176324efd1eab6bd44a6d81c27c9b3a1a175ba3d","date":1202734547,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#recyclePostings(Posting[],int).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#recyclePostings(Posting[],int).mjava","sourceNew":"  synchronized void recyclePostings(Posting[] postings, int numPostings) {\n    // Move all Postings from this ThreadState back to our\n    // free list.  We pre-allocated this array while we were\n    // creating Postings to make sure it's large enough\n    assert postingsFreeCount + numPostings <= postingsFreeList.length;\n    System.arraycopy(postings, 0, postingsFreeList, postingsFreeCount, numPostings);\n    postingsFreeCount += numPostings;\n  }\n\n","sourceOld":"  private synchronized void recyclePostings(Posting[] postings, int numPostings) {\n    // Move all Postings from this ThreadState back to our\n    // free list\n    if (postingsFreeCount + numPostings > postingsFreeList.length) {\n      final int newSize = (int) (1.25 * (postingsFreeCount + numPostings));\n      Posting[] newArray = new Posting[newSize];\n      System.arraycopy(postingsFreeList, 0, newArray, 0, postingsFreeCount);\n      postingsFreeList = newArray;\n    }\n    System.arraycopy(postings, 0, postingsFreeList, postingsFreeCount, numPostings);\n    postingsFreeCount += numPostings;\n    numBytesUsed -= numPostings * POSTING_NUM_BYTE;\n  }\n\n","bugFix":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermsHash#recyclePostings(RawPostingList[],int).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#recyclePostings(Posting[],int).mjava","sourceNew":"  synchronized public void recyclePostings(final RawPostingList[] postings, final int numPostings) {\n\n    assert postings.length >= numPostings;\n\n    // Move all Postings from this ThreadState back to our\n    // free list.  We pre-allocated this array while we were\n    // creating Postings to make sure it's large enough\n    assert postingsFreeCount + numPostings <= postingsFreeList.length;\n    System.arraycopy(postings, 0, postingsFreeList, postingsFreeCount, numPostings);\n    postingsFreeCount += numPostings;\n  }\n\n","sourceOld":"  synchronized void recyclePostings(Posting[] postings, int numPostings) {\n    // Move all Postings from this ThreadState back to our\n    // free list.  We pre-allocated this array while we were\n    // creating Postings to make sure it's large enough\n    assert postingsFreeCount + numPostings <= postingsFreeList.length;\n    System.arraycopy(postings, 0, postingsFreeList, postingsFreeCount, numPostings);\n    postingsFreeCount += numPostings;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"176324efd1eab6bd44a6d81c27c9b3a1a175ba3d":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5350389bf83287111f7760b9e3db3af8e3648474":["176324efd1eab6bd44a6d81c27c9b3a1a175ba3d"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5350389bf83287111f7760b9e3db3af8e3648474"]},"commit2Childs":{"176324efd1eab6bd44a6d81c27c9b3a1a175ba3d":["5350389bf83287111f7760b9e3db3af8e3648474"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["176324efd1eab6bd44a6d81c27c9b3a1a175ba3d"],"5350389bf83287111f7760b9e3db3af8e3648474":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}