{"path":"lucene/src/java/org/apache/lucene/index/SegmentReader#loadLiveDocs().mjava","commits":[{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#loadLiveDocs().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#loadDeletedDocs().mjava","sourceNew":"  private void loadLiveDocs() throws IOException {\n    // NOTE: the bitvector is stored using the regular directory, not cfs\n    if (hasDeletions(si)) {\n      liveDocs = new BitVector(directory(), si.getDelFileName());\n      if (liveDocs.getVersion() < BitVector.VERSION_DGAPS_CLEARED) {\n        liveDocs.invertAll();\n      }\n      liveDocsRef = new AtomicInteger(1);\n      assert checkLiveCounts();\n      if (liveDocs.size() != si.docCount) {\n        throw new CorruptIndexException(\"document count mismatch: deleted docs count \" + liveDocs.size() + \" vs segment doc count \" + si.docCount + \" segment=\" + si.name);\n      }\n    } else\n      assert si.getDelCount() == 0;\n  }\n\n","sourceOld":"  private void loadDeletedDocs() throws IOException {\n    // NOTE: the bitvector is stored using the regular directory, not cfs\n    if (hasDeletions(si)) {\n      deletedDocs = new BitVector(directory(), si.getDelFileName());\n      deletedDocsRef = new AtomicInteger(1);\n      assert checkDeletedCounts();\n      if (deletedDocs.size() != si.docCount) {\n        throw new CorruptIndexException(\"document count mismatch: deleted docs count \" + deletedDocs.size() + \" vs segment doc count \" + si.docCount + \" segment=\" + si.name);\n      }\n    } else\n      assert si.getDelCount() == 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#loadLiveDocs().mjava","pathOld":"/dev/null","sourceNew":"  private void loadLiveDocs() throws IOException {\n    // NOTE: the bitvector is stored using the regular directory, not cfs\n    if (hasDeletions(si)) {\n      liveDocs = new BitVector(directory(), si.getDelFileName());\n      if (liveDocs.getVersion() < BitVector.VERSION_DGAPS_CLEARED) {\n        liveDocs.invertAll();\n      }\n      liveDocsRef = new AtomicInteger(1);\n      assert checkLiveCounts();\n      if (liveDocs.size() != si.docCount) {\n        throw new CorruptIndexException(\"document count mismatch: deleted docs count \" + liveDocs.size() + \" vs segment doc count \" + si.docCount + \" segment=\" + si.name);\n      }\n    } else\n      assert si.getDelCount() == 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#loadLiveDocs().mjava","pathOld":"/dev/null","sourceNew":"  private void loadLiveDocs() throws IOException {\n    // NOTE: the bitvector is stored using the regular directory, not cfs\n    if (hasDeletions(si)) {\n      liveDocs = new BitVector(directory(), si.getDelFileName(), IOContext.DEFAULT);\n      if (liveDocs.getVersion() < BitVector.VERSION_DGAPS_CLEARED) {\n        liveDocs.invertAll();\n      }\n      liveDocsRef = new AtomicInteger(1);\n      assert checkLiveCounts();\n      if (liveDocs.size() != si.docCount) {\n        throw new CorruptIndexException(\"document count mismatch: deleted docs count \" + liveDocs.size() + \" vs segment doc count \" + si.docCount + \" segment=\" + si.name);\n      }\n    } else\n      assert si.getDelCount() == 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#loadLiveDocs().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#loadLiveDocs().mjava","sourceNew":"  private void loadLiveDocs() throws IOException {\n    // NOTE: the bitvector is stored using the regular directory, not cfs\n    if (hasDeletions(si)) {\n      liveDocs = new BitVector(directory(), si.getDelFileName(), IOContext.DEFAULT);\n      if (liveDocs.getVersion() < BitVector.VERSION_DGAPS_CLEARED) {\n        liveDocs.invertAll();\n      }\n      liveDocsRef = new AtomicInteger(1);\n      assert checkLiveCounts();\n      if (liveDocs.size() != si.docCount) {\n        throw new CorruptIndexException(\"document count mismatch: deleted docs count \" + liveDocs.size() + \" vs segment doc count \" + si.docCount + \" segment=\" + si.name);\n      }\n    } else\n      assert si.getDelCount() == 0;\n  }\n\n","sourceOld":"  private void loadLiveDocs() throws IOException {\n    // NOTE: the bitvector is stored using the regular directory, not cfs\n    if (hasDeletions(si)) {\n      liveDocs = new BitVector(directory(), si.getDelFileName());\n      if (liveDocs.getVersion() < BitVector.VERSION_DGAPS_CLEARED) {\n        liveDocs.invertAll();\n      }\n      liveDocsRef = new AtomicInteger(1);\n      assert checkLiveCounts();\n      if (liveDocs.size() != si.docCount) {\n        throw new CorruptIndexException(\"document count mismatch: deleted docs count \" + liveDocs.size() + \" vs segment doc count \" + si.docCount + \" segment=\" + si.name);\n      }\n    } else\n      assert si.getDelCount() == 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#loadLiveDocs().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#loadLiveDocs().mjava","sourceNew":"  private void loadLiveDocs() throws IOException {\n    // NOTE: the bitvector is stored using the regular directory, not cfs\n    if (hasDeletions(si)) {\n      liveDocs = new BitVector(directory(), si.getDelFileName(), IOContext.DEFAULT);\n      if (liveDocs.getVersion() < BitVector.VERSION_DGAPS_CLEARED) {\n        liveDocs.invertAll();\n      }\n      liveDocsRef = new AtomicInteger(1);\n      assert checkLiveCounts();\n      if (liveDocs.size() != si.docCount) {\n        throw new CorruptIndexException(\"document count mismatch: deleted docs count \" + liveDocs.size() + \" vs segment doc count \" + si.docCount + \" segment=\" + si.name);\n      }\n    } else\n      assert si.getDelCount() == 0;\n  }\n\n","sourceOld":"  private void loadLiveDocs() throws IOException {\n    // NOTE: the bitvector is stored using the regular directory, not cfs\n    if (hasDeletions(si)) {\n      liveDocs = new BitVector(directory(), si.getDelFileName());\n      if (liveDocs.getVersion() < BitVector.VERSION_DGAPS_CLEARED) {\n        liveDocs.invertAll();\n      }\n      liveDocsRef = new AtomicInteger(1);\n      assert checkLiveCounts();\n      if (liveDocs.size() != si.docCount) {\n        throw new CorruptIndexException(\"document count mismatch: deleted docs count \" + liveDocs.size() + \" vs segment doc count \" + si.docCount + \" segment=\" + si.name);\n      }\n    } else\n      assert si.getDelCount() == 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae25747f561c2392e8a9046cfa4e5a836d14949c","date":1310502947,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#loadLiveDocs(IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#loadLiveDocs().mjava","sourceNew":"  private void loadLiveDocs(IOContext context) throws IOException {\n    // NOTE: the bitvector is stored using the regular directory, not cfs\n    if (hasDeletions(si)) {\n      liveDocs = new BitVector(directory(), si.getDelFileName(), new IOContext(context, true));\n      if (liveDocs.getVersion() < BitVector.VERSION_DGAPS_CLEARED) {\n        liveDocs.invertAll();\n      }\n      liveDocsRef = new AtomicInteger(1);\n      assert checkLiveCounts();\n      if (liveDocs.size() != si.docCount) {\n        throw new CorruptIndexException(\"document count mismatch: deleted docs count \" + liveDocs.size() + \" vs segment doc count \" + si.docCount + \" segment=\" + si.name);\n      }\n    } else\n      assert si.getDelCount() == 0;\n  }\n\n","sourceOld":"  private void loadLiveDocs() throws IOException {\n    // NOTE: the bitvector is stored using the regular directory, not cfs\n    if (hasDeletions(si)) {\n      liveDocs = new BitVector(directory(), si.getDelFileName(), IOContext.DEFAULT);\n      if (liveDocs.getVersion() < BitVector.VERSION_DGAPS_CLEARED) {\n        liveDocs.invertAll();\n      }\n      liveDocsRef = new AtomicInteger(1);\n      assert checkLiveCounts();\n      if (liveDocs.size() != si.docCount) {\n        throw new CorruptIndexException(\"document count mismatch: deleted docs count \" + liveDocs.size() + \" vs segment doc count \" + si.docCount + \" segment=\" + si.name);\n      }\n    } else\n      assert si.getDelCount() == 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ae25747f561c2392e8a9046cfa4e5a836d14949c":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["817d8435e9135b756f08ce6710ab0baac51bdf88","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ae25747f561c2392e8a9046cfa4e5a836d14949c"]},"commit2Childs":{"ae25747f561c2392e8a9046cfa4e5a836d14949c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["ddc4c914be86e34b54f70023f45a60fa7f04e929","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["ae25747f561c2392e8a9046cfa4e5a836d14949c","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}