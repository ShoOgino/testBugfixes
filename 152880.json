{"path":"backwards/src/java/org/apache/lucene/index/DocFieldConsumers#flush(Map[DocFieldConsumerPerThread,Collection[DocFieldConsumerPerField]],SegmentWriteState).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/DocFieldConsumers#flush(Map[DocFieldConsumerPerThread,Collection[DocFieldConsumerPerField]],SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void flush(Map<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>> threadsAndFields, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>> oneThreadsAndFields = new HashMap<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>>();\n    Map<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>> twoThreadsAndFields = new HashMap<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>>();\n\n    for (Map.Entry<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      final DocFieldConsumersPerThread perThread = (DocFieldConsumersPerThread) entry.getKey();\n\n      final Collection<DocFieldConsumerPerField> fields = entry.getValue();\n\n      Iterator<DocFieldConsumerPerField> fieldsIt = fields.iterator();\n      Collection<DocFieldConsumerPerField> oneFields = new HashSet<DocFieldConsumerPerField>();\n      Collection<DocFieldConsumerPerField> twoFields = new HashSet<DocFieldConsumerPerField>();\n      while(fieldsIt.hasNext()) {\n        DocFieldConsumersPerField perField = (DocFieldConsumersPerField) fieldsIt.next();\n        oneFields.add(perField.one);\n        twoFields.add(perField.two);\n      }\n\n      oneThreadsAndFields.put(perThread.one, oneFields);\n      twoThreadsAndFields.put(perThread.two, twoFields);\n    }\n    \n\n    one.flush(oneThreadsAndFields, state);\n    two.flush(twoThreadsAndFields, state);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/DocFieldConsumers#flush(Map[DocFieldConsumerPerThread,Collection[DocFieldConsumerPerField]],SegmentWriteState).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/DocFieldConsumers#flush(Map[DocFieldConsumerPerThread,Collection[DocFieldConsumerPerField]],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Map<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>> threadsAndFields, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>> oneThreadsAndFields = new HashMap<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>>();\n    Map<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>> twoThreadsAndFields = new HashMap<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>>();\n\n    for (Map.Entry<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      final DocFieldConsumersPerThread perThread = (DocFieldConsumersPerThread) entry.getKey();\n\n      final Collection<DocFieldConsumerPerField> fields = entry.getValue();\n\n      Iterator<DocFieldConsumerPerField> fieldsIt = fields.iterator();\n      Collection<DocFieldConsumerPerField> oneFields = new HashSet<DocFieldConsumerPerField>();\n      Collection<DocFieldConsumerPerField> twoFields = new HashSet<DocFieldConsumerPerField>();\n      while(fieldsIt.hasNext()) {\n        DocFieldConsumersPerField perField = (DocFieldConsumersPerField) fieldsIt.next();\n        oneFields.add(perField.one);\n        twoFields.add(perField.two);\n      }\n\n      oneThreadsAndFields.put(perThread.one, oneFields);\n      twoThreadsAndFields.put(perThread.two, twoFields);\n    }\n    \n\n    one.flush(oneThreadsAndFields, state);\n    two.flush(twoThreadsAndFields, state);\n  }\n\n","sourceOld":"  @Override\n  public void flush(Map<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>> threadsAndFields, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>> oneThreadsAndFields = new HashMap<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>>();\n    Map<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>> twoThreadsAndFields = new HashMap<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>>();\n\n    for (Map.Entry<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      final DocFieldConsumersPerThread perThread = (DocFieldConsumersPerThread) entry.getKey();\n\n      final Collection<DocFieldConsumerPerField> fields = entry.getValue();\n\n      Iterator<DocFieldConsumerPerField> fieldsIt = fields.iterator();\n      Collection<DocFieldConsumerPerField> oneFields = new HashSet<DocFieldConsumerPerField>();\n      Collection<DocFieldConsumerPerField> twoFields = new HashSet<DocFieldConsumerPerField>();\n      while(fieldsIt.hasNext()) {\n        DocFieldConsumersPerField perField = (DocFieldConsumersPerField) fieldsIt.next();\n        oneFields.add(perField.one);\n        twoFields.add(perField.two);\n      }\n\n      oneThreadsAndFields.put(perThread.one, oneFields);\n      twoThreadsAndFields.put(perThread.two, twoFields);\n    }\n    \n\n    one.flush(oneThreadsAndFields, state);\n    two.flush(twoThreadsAndFields, state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}