{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testMultiCountingLists().mjava","commits":[{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testMultiCountingLists().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMultiCountingLists() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    FacetIndexingParams fip = new PerDimensionIndexingParams(Collections.singletonMap(new CategoryPath(\"b\"), new CategoryListParams(\"$b\")));\n    \n    FacetFields facetFields = new FacetFields(taxonomyWriter, fip);\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      List<CategoryPath> cats = new ArrayList<CategoryPath>();\n      cats.add(new CategoryPath(\"a\"));\n      cats.add(new CategoryPath(\"b\"));\n      facetFields.addFields(doc, cats);\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams sParams = new FacetSearchParams(fip,\n        new CountFacetRequest(new CategoryPath(\"a\"), 10), \n        new CountFacetRequest(new CategoryPath(\"b\"), 10));\n    FacetsCollector fc = FacetsCollector.create(sParams, r, taxo);\n    new IndexSearcher(r).search(new MatchAllDocsQuery(), fc);\n    \n    for (FacetResult res : fc.getFacetResults()) {\n      assertEquals(\"unexpected count for \" + res, r.maxDoc(), (int) res.getFacetResultNode().value);\n    }\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc","date":1366056945,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testMultiCountingLists().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testMultiCountingLists().mjava","sourceNew":"  @Test\n  public void testMultiCountingLists() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    FacetIndexingParams fip = new PerDimensionIndexingParams(Collections.singletonMap(new CategoryPath(\"b\"), new CategoryListParams(\"$b\")));\n    \n    FacetFields facetFields = new FacetFields(taxonomyWriter, fip);\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      List<CategoryPath> cats = new ArrayList<CategoryPath>();\n      cats.add(new CategoryPath(\"a\"));\n      cats.add(new CategoryPath(\"b\"));\n      facetFields.addFields(doc, cats);\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams sParams = new FacetSearchParams(fip,\n        new CountFacetRequest(new CategoryPath(\"a\"), 10), \n        new CountFacetRequest(new CategoryPath(\"b\"), 10));\n    FacetsCollector fc = FacetsCollector.create(sParams, r, taxo);\n    newSearcher(r).search(new MatchAllDocsQuery(), fc);\n    \n    for (FacetResult res : fc.getFacetResults()) {\n      assertEquals(\"unexpected count for \" + res, r.maxDoc(), (int) res.getFacetResultNode().value);\n    }\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  @Test\n  public void testMultiCountingLists() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    FacetIndexingParams fip = new PerDimensionIndexingParams(Collections.singletonMap(new CategoryPath(\"b\"), new CategoryListParams(\"$b\")));\n    \n    FacetFields facetFields = new FacetFields(taxonomyWriter, fip);\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      List<CategoryPath> cats = new ArrayList<CategoryPath>();\n      cats.add(new CategoryPath(\"a\"));\n      cats.add(new CategoryPath(\"b\"));\n      facetFields.addFields(doc, cats);\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams sParams = new FacetSearchParams(fip,\n        new CountFacetRequest(new CategoryPath(\"a\"), 10), \n        new CountFacetRequest(new CategoryPath(\"b\"), 10));\n    FacetsCollector fc = FacetsCollector.create(sParams, r, taxo);\n    new IndexSearcher(r).search(new MatchAllDocsQuery(), fc);\n    \n    for (FacetResult res : fc.getFacetResults()) {\n      assertEquals(\"unexpected count for \" + res, r.maxDoc(), (int) res.getFacetResultNode().value);\n    }\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testMultiCountingLists().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testMultiCountingLists().mjava","sourceNew":"  @Test\n  public void testMultiCountingLists() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    FacetIndexingParams fip = new PerDimensionIndexingParams(Collections.singletonMap(new FacetLabel(\"b\"), new CategoryListParams(\"$b\")));\n    \n    FacetFields facetFields = new FacetFields(taxonomyWriter, fip);\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      List<FacetLabel> cats = new ArrayList<FacetLabel>();\n      cats.add(new FacetLabel(\"a\"));\n      cats.add(new FacetLabel(\"b\"));\n      facetFields.addFields(doc, cats);\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams sParams = new FacetSearchParams(fip,\n        new CountFacetRequest(new FacetLabel(\"a\"), 10), \n        new CountFacetRequest(new FacetLabel(\"b\"), 10));\n    FacetsCollector fc = FacetsCollector.create(sParams, r, taxo);\n    newSearcher(r).search(new MatchAllDocsQuery(), fc);\n    \n    for (FacetResult res : fc.getFacetResults()) {\n      assertEquals(\"unexpected count for \" + res, r.maxDoc(), (int) res.getFacetResultNode().value);\n    }\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  @Test\n  public void testMultiCountingLists() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    FacetIndexingParams fip = new PerDimensionIndexingParams(Collections.singletonMap(new CategoryPath(\"b\"), new CategoryListParams(\"$b\")));\n    \n    FacetFields facetFields = new FacetFields(taxonomyWriter, fip);\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      List<CategoryPath> cats = new ArrayList<CategoryPath>();\n      cats.add(new CategoryPath(\"a\"));\n      cats.add(new CategoryPath(\"b\"));\n      facetFields.addFields(doc, cats);\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams sParams = new FacetSearchParams(fip,\n        new CountFacetRequest(new CategoryPath(\"a\"), 10), \n        new CountFacetRequest(new CategoryPath(\"b\"), 10));\n    FacetsCollector fc = FacetsCollector.create(sParams, r, taxo);\n    newSearcher(r).search(new MatchAllDocsQuery(), fc);\n    \n    for (FacetResult res : fc.getFacetResults()) {\n      assertEquals(\"unexpected count for \" + res, r.maxDoc(), (int) res.getFacetResultNode().value);\n    }\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae75def1e2525383b6e1397ed97c44387da9941c","date":1385249238,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testMultiCountingLists().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testMultiCountingLists() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    FacetIndexingParams fip = new PerDimensionIndexingParams(Collections.singletonMap(new FacetLabel(\"b\"), new CategoryListParams(\"$b\")));\n    \n    FacetFields facetFields = new FacetFields(taxonomyWriter, fip);\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      List<FacetLabel> cats = new ArrayList<FacetLabel>();\n      cats.add(new FacetLabel(\"a\"));\n      cats.add(new FacetLabel(\"b\"));\n      facetFields.addFields(doc, cats);\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams sParams = new FacetSearchParams(fip,\n        new CountFacetRequest(new FacetLabel(\"a\"), 10), \n        new CountFacetRequest(new FacetLabel(\"b\"), 10));\n    FacetsCollector fc = FacetsCollector.create(sParams, r, taxo);\n    newSearcher(r).search(new MatchAllDocsQuery(), fc);\n    \n    for (FacetResult res : fc.getFacetResults()) {\n      assertEquals(\"unexpected count for \" + res, r.maxDoc(), (int) res.getFacetResultNode().value);\n    }\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsCollector#testMultiCountingLists().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testMultiCountingLists() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    FacetIndexingParams fip = new PerDimensionIndexingParams(Collections.singletonMap(new CategoryPath(\"b\"), new CategoryListParams(\"$b\")));\n    \n    FacetFields facetFields = new FacetFields(taxonomyWriter, fip);\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      doc.add(new StringField(\"f\", \"v\", Store.NO));\n      List<CategoryPath> cats = new ArrayList<CategoryPath>();\n      cats.add(new CategoryPath(\"a\"));\n      cats.add(new CategoryPath(\"b\"));\n      facetFields.addFields(doc, cats);\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    \n    FacetSearchParams sParams = new FacetSearchParams(fip,\n        new CountFacetRequest(new CategoryPath(\"a\"), 10), \n        new CountFacetRequest(new CategoryPath(\"b\"), 10));\n    FacetsCollector fc = FacetsCollector.create(sParams, r, taxo);\n    newSearcher(r).search(new MatchAllDocsQuery(), fc);\n    \n    for (FacetResult res : fc.getFacetResults()) {\n      assertEquals(\"unexpected count for \" + res, r.maxDoc(), (int) res.getFacetResultNode().value);\n    }\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc","ae75def1e2525383b6e1397ed97c44387da9941c"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"ae75def1e2525383b6e1397ed97c44387da9941c":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"ae75def1e2525383b6e1397ed97c44387da9941c":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["ae75def1e2525383b6e1397ed97c44387da9941c"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}