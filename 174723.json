{"path":"solr/core/src/test/org/apache/solr/cloud/CreateCollectionCleanupTest#testCreateCollectionCleanup().mjava","commits":[{"id":"efefd19367eebaa6d911ba8f441a30b7b7564e26","date":1461003590,"type":0,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CreateCollectionCleanupTest#testCreateCollectionCleanup().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCreateCollectionCleanup() throws Exception {\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    // Create a collection that would fail\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"foo\",\"conf1\",1,1);\n\n    Properties properties = new Properties();\n    properties.put(CoreAdminParams.DATA_DIR, \"/some_invalid_dir/foo\");\n    create.setProperties(properties);\n    CollectionAdminResponse rsp = create.process(cloudClient);\n    assertFalse(rsp.isSuccess());\n\n    // Confirm using LIST that the collection does not exist\n    CollectionAdminRequest.List list = CollectionAdminRequest.listCollections();\n    rsp = list.process(cloudClient);\n    assertFalse(((ArrayList) rsp.getResponse().get(\"collections\")).contains(\"foo\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ab6131420a270c49b653c969cc1dbbaf7d1b36e7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e15955b4980562a0c1c81d08654904f3fadb83b","date":1461068916,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CreateCollectionCleanupTest#testCreateCollectionCleanup().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCreateCollectionCleanup() throws Exception {\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    // Create a collection that would fail\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"foo\",\"conf1\",1,1);\n\n    Properties properties = new Properties();\n    properties.put(CoreAdminParams.DATA_DIR, \"/some_invalid_dir/foo\");\n    create.setProperties(properties);\n    CollectionAdminResponse rsp = create.process(cloudClient);\n    assertFalse(rsp.isSuccess());\n\n    // Confirm using LIST that the collection does not exist\n    CollectionAdminRequest.List list = CollectionAdminRequest.listCollections();\n    rsp = list.process(cloudClient);\n    assertFalse(((ArrayList) rsp.getResponse().get(\"collections\")).contains(\"foo\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a4efd3fffdd7acd625bb88e455c8097e17f75735","date":1477647201,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CreateCollectionCleanupTest#testCreateCollectionCleanup().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CreateCollectionCleanupTest#testCreateCollectionCleanup().mjava","sourceNew":"  @Test\n  public void testCreateCollectionCleanup() throws Exception {\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    // Create a collection that would fail\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"foo\",\"conf1\",1,1);\n\n    Properties properties = new Properties();\n    properties.put(CoreAdminParams.DATA_DIR, \"/some_invalid_dir/foo\");\n    create.setProperties(properties);\n    CollectionAdminResponse rsp = create.process(cloudClient);\n    assertFalse(rsp.isSuccess());\n\n    // Confirm using LIST that the collection does not exist\n    assertFalse(CollectionAdminRequest.listCollections(cloudClient).contains(\"foo\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void testCreateCollectionCleanup() throws Exception {\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    // Create a collection that would fail\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"foo\",\"conf1\",1,1);\n\n    Properties properties = new Properties();\n    properties.put(CoreAdminParams.DATA_DIR, \"/some_invalid_dir/foo\");\n    create.setProperties(properties);\n    CollectionAdminResponse rsp = create.process(cloudClient);\n    assertFalse(rsp.isSuccess());\n\n    // Confirm using LIST that the collection does not exist\n    CollectionAdminRequest.List list = CollectionAdminRequest.listCollections();\n    rsp = list.process(cloudClient);\n    assertFalse(((ArrayList) rsp.getResponse().get(\"collections\")).contains(\"foo\"));\n  }\n\n","bugFix":null,"bugIntro":["ab6131420a270c49b653c969cc1dbbaf7d1b36e7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"59dce44d6a0b58c171de1d47ad8c0a75831f94fd","date":1477668573,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CreateCollectionCleanupTest#testCreateCollectionCleanup().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CreateCollectionCleanupTest#testCreateCollectionCleanup().mjava","sourceNew":"  @Test\n  public void testCreateCollectionCleanup() throws Exception {\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    // Create a collection that would fail\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"foo\",\"conf1\",1,1);\n\n    Properties properties = new Properties();\n    properties.put(CoreAdminParams.DATA_DIR, \"/some_invalid_dir/foo\");\n    create.setProperties(properties);\n    CollectionAdminResponse rsp = create.process(cloudClient);\n    assertFalse(rsp.isSuccess());\n\n    // Confirm using LIST that the collection does not exist\n    assertFalse(CollectionAdminRequest.listCollections(cloudClient).contains(\"foo\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void testCreateCollectionCleanup() throws Exception {\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    // Create a collection that would fail\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"foo\",\"conf1\",1,1);\n\n    Properties properties = new Properties();\n    properties.put(CoreAdminParams.DATA_DIR, \"/some_invalid_dir/foo\");\n    create.setProperties(properties);\n    CollectionAdminResponse rsp = create.process(cloudClient);\n    assertFalse(rsp.isSuccess());\n\n    // Confirm using LIST that the collection does not exist\n    CollectionAdminRequest.List list = CollectionAdminRequest.listCollections();\n    rsp = list.process(cloudClient);\n    assertFalse(((ArrayList) rsp.getResponse().get(\"collections\")).contains(\"foo\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab6131420a270c49b653c969cc1dbbaf7d1b36e7","date":1550697886,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CreateCollectionCleanupTest#testCreateCollectionCleanup().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CreateCollectionCleanupTest#testCreateCollectionCleanup().mjava","sourceNew":"  @Test\n  public void testCreateCollectionCleanup() throws Exception {\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    String collectionName = \"foo\";\n    assertThat(CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n    // Create a collection that would fail\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\"conf1\",1,1);\n\n    Properties properties = new Properties();\n    properties.put(CoreAdminParams.DATA_DIR, \"/some_invalid_dir/foo\");\n    create.setProperties(properties);\n    CollectionAdminResponse rsp = create.process(cloudClient);\n    assertFalse(rsp.isSuccess());\n\n    // Confirm using LIST that the collection does not exist\n    assertThat(\"Failed collection is still in the clusterstate: \" + cluster.getSolrClient().getClusterStateProvider().getClusterState().getCollectionOrNull(collectionName), \n        CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n\n  }\n\n","sourceOld":"  @Test\n  public void testCreateCollectionCleanup() throws Exception {\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    // Create a collection that would fail\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"foo\",\"conf1\",1,1);\n\n    Properties properties = new Properties();\n    properties.put(CoreAdminParams.DATA_DIR, \"/some_invalid_dir/foo\");\n    create.setProperties(properties);\n    CollectionAdminResponse rsp = create.process(cloudClient);\n    assertFalse(rsp.isSuccess());\n\n    // Confirm using LIST that the collection does not exist\n    assertFalse(CollectionAdminRequest.listCollections(cloudClient).contains(\"foo\"));\n\n  }\n\n","bugFix":["a4efd3fffdd7acd625bb88e455c8097e17f75735","efefd19367eebaa6d911ba8f441a30b7b7564e26"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95cd5a38a855e021b63ce0a52cd6e43d358c8c61","date":1556473589,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CreateCollectionCleanupTest#testCreateCollectionCleanup().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CreateCollectionCleanupTest#testCreateCollectionCleanup().mjava","sourceNew":"  @Test\n  public void testCreateCollectionCleanup() throws Exception {\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    String collectionName = \"foo\";\n    assertThat(CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n    // Create a collection that would fail\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\"conf1\",1,1);\n\n    Properties properties = new Properties();\n    properties.put(CoreAdminParams.DATA_DIR, \"/some_invalid_dir/foo\");\n    create.setProperties(properties);\n    expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n      CollectionAdminResponse rsp = create.process(cloudClient);\n    });\n\n    // Confirm using LIST that the collection does not exist\n    assertThat(\"Failed collection is still in the clusterstate: \" + cluster.getSolrClient().getClusterStateProvider().getClusterState().getCollectionOrNull(collectionName), \n        CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n\n  }\n\n","sourceOld":"  @Test\n  public void testCreateCollectionCleanup() throws Exception {\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    String collectionName = \"foo\";\n    assertThat(CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n    // Create a collection that would fail\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\"conf1\",1,1);\n\n    Properties properties = new Properties();\n    properties.put(CoreAdminParams.DATA_DIR, \"/some_invalid_dir/foo\");\n    create.setProperties(properties);\n    CollectionAdminResponse rsp = create.process(cloudClient);\n    assertFalse(rsp.isSuccess());\n\n    // Confirm using LIST that the collection does not exist\n    assertThat(\"Failed collection is still in the clusterstate: \" + cluster.getSolrClient().getClusterStateProvider().getClusterState().getCollectionOrNull(collectionName), \n        CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0de300d75881f685bcd80755aacb04f1b216a1bd","date":1575651593,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CreateCollectionCleanupTest#testCreateCollectionCleanup().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CreateCollectionCleanupTest#testCreateCollectionCleanup().mjava","sourceNew":"  @Test\n  public void testCreateCollectionCleanup() throws Exception {\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    String collectionName = \"foo\";\n    assertThat(CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n    // Create a collection that would fail\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\"conf1\",1,1);\n\n    Properties properties = new Properties();\n    Path tmpDir = createTempDir();\n    tmpDir.toFile().setWritable(false);\n    properties.put(CoreAdminParams.DATA_DIR, tmpDir.toString());\n    create.setProperties(properties);\n    expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n      create.process(cloudClient);\n    });\n\n    // Confirm using LIST that the collection does not exist\n    assertThat(\"Failed collection is still in the clusterstate: \" + cluster.getSolrClient().getClusterStateProvider().getClusterState().getCollectionOrNull(collectionName), \n        CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n\n  }\n\n","sourceOld":"  @Test\n  public void testCreateCollectionCleanup() throws Exception {\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    String collectionName = \"foo\";\n    assertThat(CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n    // Create a collection that would fail\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\"conf1\",1,1);\n\n    Properties properties = new Properties();\n    properties.put(CoreAdminParams.DATA_DIR, \"/some_invalid_dir/foo\");\n    create.setProperties(properties);\n    expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n      CollectionAdminResponse rsp = create.process(cloudClient);\n    });\n\n    // Confirm using LIST that the collection does not exist\n    assertThat(\"Failed collection is still in the clusterstate: \" + cluster.getSolrClient().getClusterStateProvider().getClusterState().getCollectionOrNull(collectionName), \n        CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca7f8987e211341154aa73c7f5a88e8f025be64f","date":1575655346,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CreateCollectionCleanupTest#testCreateCollectionCleanup().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CreateCollectionCleanupTest#testCreateCollectionCleanup().mjava","sourceNew":"  @Test\n  public void testCreateCollectionCleanup() throws Exception {\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    String collectionName = \"foo\";\n    assertThat(CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n    // Create a collection that would fail\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\"conf1\",1,1);\n\n    Properties properties = new Properties();\n    Path tmpDir = createTempDir();\n    tmpDir.toFile().setWritable(false);\n    properties.put(CoreAdminParams.DATA_DIR, tmpDir.toString());\n    create.setProperties(properties);\n    expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n      create.process(cloudClient);\n    });\n\n    // Confirm using LIST that the collection does not exist\n    assertThat(\"Failed collection is still in the clusterstate: \" + cluster.getSolrClient().getClusterStateProvider().getClusterState().getCollectionOrNull(collectionName), \n        CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n\n  }\n\n","sourceOld":"  @Test\n  public void testCreateCollectionCleanup() throws Exception {\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    String collectionName = \"foo\";\n    assertThat(CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n    // Create a collection that would fail\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\"conf1\",1,1);\n\n    Properties properties = new Properties();\n    properties.put(CoreAdminParams.DATA_DIR, \"/some_invalid_dir/foo\");\n    create.setProperties(properties);\n    expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n      CollectionAdminResponse rsp = create.process(cloudClient);\n    });\n\n    // Confirm using LIST that the collection does not exist\n    assertThat(\"Failed collection is still in the clusterstate: \" + cluster.getSolrClient().getClusterStateProvider().getClusterState().getCollectionOrNull(collectionName), \n        CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49890b53173e01177d3e8b563c23071ee6806d5d","date":1575677427,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CreateCollectionCleanupTest#testCreateCollectionCleanup().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CreateCollectionCleanupTest#testCreateCollectionCleanup().mjava","sourceNew":"  @Test\n  public void testCreateCollectionCleanup() throws Exception {\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    String collectionName = \"foo\";\n    assertThat(CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n    // Create a collection that would fail\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\"conf1\",1,1);\n\n    Properties properties = new Properties();\n    Path tmpDir = createTempDir();\n    tmpDir = tmpDir.resolve(\"foo\");\n    Files.createFile(tmpDir);\n    properties.put(CoreAdminParams.DATA_DIR, tmpDir.toString());\n    create.setProperties(properties);\n    expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n      create.process(cloudClient);\n    });\n\n    // Confirm using LIST that the collection does not exist\n    assertThat(\"Failed collection is still in the clusterstate: \" + cluster.getSolrClient().getClusterStateProvider().getClusterState().getCollectionOrNull(collectionName), \n        CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n\n  }\n\n","sourceOld":"  @Test\n  public void testCreateCollectionCleanup() throws Exception {\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    String collectionName = \"foo\";\n    assertThat(CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n    // Create a collection that would fail\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\"conf1\",1,1);\n\n    Properties properties = new Properties();\n    Path tmpDir = createTempDir();\n    tmpDir.toFile().setWritable(false);\n    properties.put(CoreAdminParams.DATA_DIR, tmpDir.toString());\n    create.setProperties(properties);\n    expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n      create.process(cloudClient);\n    });\n\n    // Confirm using LIST that the collection does not exist\n    assertThat(\"Failed collection is still in the clusterstate: \" + cluster.getSolrClient().getClusterStateProvider().getClusterState().getCollectionOrNull(collectionName), \n        CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0567b33b869e4ae37f2f50ba7827c01d001555e","date":1575712414,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CreateCollectionCleanupTest#testCreateCollectionCleanup().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CreateCollectionCleanupTest#testCreateCollectionCleanup().mjava","sourceNew":"  @Test\n  public void testCreateCollectionCleanup() throws Exception {\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    String collectionName = \"foo\";\n    assertThat(CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n    // Create a collection that would fail\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\"conf1\",1,1);\n\n    Properties properties = new Properties();\n    Path tmpDir = createTempDir();\n    tmpDir = tmpDir.resolve(\"foo\");\n    Files.createFile(tmpDir);\n    properties.put(CoreAdminParams.DATA_DIR, tmpDir.toString());\n    create.setProperties(properties);\n    expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n      create.process(cloudClient);\n    });\n\n    // Confirm using LIST that the collection does not exist\n    assertThat(\"Failed collection is still in the clusterstate: \" + cluster.getSolrClient().getClusterStateProvider().getClusterState().getCollectionOrNull(collectionName), \n        CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n\n  }\n\n","sourceOld":"  @Test\n  public void testCreateCollectionCleanup() throws Exception {\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    String collectionName = \"foo\";\n    assertThat(CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n    // Create a collection that would fail\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\"conf1\",1,1);\n\n    Properties properties = new Properties();\n    Path tmpDir = createTempDir();\n    tmpDir.toFile().setWritable(false);\n    properties.put(CoreAdminParams.DATA_DIR, tmpDir.toString());\n    create.setProperties(properties);\n    expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n      create.process(cloudClient);\n    });\n\n    // Confirm using LIST that the collection does not exist\n    assertThat(\"Failed collection is still in the clusterstate: \" + cluster.getSolrClient().getClusterStateProvider().getClusterState().getCollectionOrNull(collectionName), \n        CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["0e15955b4980562a0c1c81d08654904f3fadb83b"],"ab6131420a270c49b653c969cc1dbbaf7d1b36e7":["a4efd3fffdd7acd625bb88e455c8097e17f75735"],"efefd19367eebaa6d911ba8f441a30b7b7564e26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":["0e15955b4980562a0c1c81d08654904f3fadb83b","a4efd3fffdd7acd625bb88e455c8097e17f75735"],"0de300d75881f685bcd80755aacb04f1b216a1bd":["95cd5a38a855e021b63ce0a52cd6e43d358c8c61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e15955b4980562a0c1c81d08654904f3fadb83b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","efefd19367eebaa6d911ba8f441a30b7b7564e26"],"d0567b33b869e4ae37f2f50ba7827c01d001555e":["ca7f8987e211341154aa73c7f5a88e8f025be64f","49890b53173e01177d3e8b563c23071ee6806d5d"],"49890b53173e01177d3e8b563c23071ee6806d5d":["0de300d75881f685bcd80755aacb04f1b216a1bd"],"95cd5a38a855e021b63ce0a52cd6e43d358c8c61":["ab6131420a270c49b653c969cc1dbbaf7d1b36e7"],"ca7f8987e211341154aa73c7f5a88e8f025be64f":["95cd5a38a855e021b63ce0a52cd6e43d358c8c61","0de300d75881f685bcd80755aacb04f1b216a1bd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["49890b53173e01177d3e8b563c23071ee6806d5d"]},"commit2Childs":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["ab6131420a270c49b653c969cc1dbbaf7d1b36e7","59dce44d6a0b58c171de1d47ad8c0a75831f94fd"],"ab6131420a270c49b653c969cc1dbbaf7d1b36e7":["95cd5a38a855e021b63ce0a52cd6e43d358c8c61"],"efefd19367eebaa6d911ba8f441a30b7b7564e26":["0e15955b4980562a0c1c81d08654904f3fadb83b"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":[],"0de300d75881f685bcd80755aacb04f1b216a1bd":["49890b53173e01177d3e8b563c23071ee6806d5d","ca7f8987e211341154aa73c7f5a88e8f025be64f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["efefd19367eebaa6d911ba8f441a30b7b7564e26","0e15955b4980562a0c1c81d08654904f3fadb83b"],"0e15955b4980562a0c1c81d08654904f3fadb83b":["a4efd3fffdd7acd625bb88e455c8097e17f75735","59dce44d6a0b58c171de1d47ad8c0a75831f94fd"],"d0567b33b869e4ae37f2f50ba7827c01d001555e":[],"49890b53173e01177d3e8b563c23071ee6806d5d":["d0567b33b869e4ae37f2f50ba7827c01d001555e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"95cd5a38a855e021b63ce0a52cd6e43d358c8c61":["0de300d75881f685bcd80755aacb04f1b216a1bd","ca7f8987e211341154aa73c7f5a88e8f025be64f"],"ca7f8987e211341154aa73c7f5a88e8f025be64f":["d0567b33b869e4ae37f2f50ba7827c01d001555e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["59dce44d6a0b58c171de1d47ad8c0a75831f94fd","d0567b33b869e4ae37f2f50ba7827c01d001555e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}