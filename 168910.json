{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addNumericField(FieldInfo,long,long,int).mjava","commits":[{"id":"ce73f585d17f53055185a19beb46db23d76e0ad9","date":1353077110,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addNumericField(FieldInfo,long,long,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addNumericField(FieldInfo,long,long).mjava","sourceNew":"    @Override\n    public NumericDocValuesConsumer addNumericField(FieldInfo field, final long minValue, long maxValue, final int numDocs) throws IOException {\n      writeFieldEntry(field);\n      \n      // write our minimum value to the .dat, all entries are deltas from that\n      SimpleTextUtil.write(data, MINVALUE);\n      SimpleTextUtil.write(data, Long.toString(minValue), scratch);\n      SimpleTextUtil.writeNewline(data);\n\n      // build up our fixed-width \"simple text packed ints\" format\n      int maxBytesPerValue = BigInteger.valueOf(maxValue).subtract(BigInteger.valueOf(minValue)).toString().length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesPerValue; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern to the .dat\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      return new NumericDocValuesConsumer() {\n        int numDocsWritten = 0;\n\n        @Override\n        public void add(long value) throws IOException {\n          Number delta = BigInteger.valueOf(value).subtract(BigInteger.valueOf(minValue));\n          SimpleTextUtil.write(data, encoder.format(delta), scratch);\n          SimpleTextUtil.writeNewline(data);\n          numDocsWritten++;\n        }\n\n        @Override\n        public void finish() throws IOException {\n          assert numDocs == numDocsWritten;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public NumericDocValuesConsumer addNumericField(FieldInfo field, final long minValue, long maxValue) throws IOException {\n      writeFieldEntry(field);\n      \n      // write our minimum value to the .dat, all entries are deltas from that\n      SimpleTextUtil.write(data, MINVALUE);\n      SimpleTextUtil.write(data, Long.toString(minValue), scratch);\n      SimpleTextUtil.writeNewline(data);\n\n      // build up our fixed-width \"simple text packed ints\" format\n      int maxBytesPerValue = BigInteger.valueOf(maxValue).subtract(BigInteger.valueOf(minValue)).toString().length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesPerValue; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern to the .dat\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      return new NumericDocValuesConsumer() {\n        int numDocsWritten = 0;\n\n        @Override\n        public void add(long value) throws IOException {\n          Number delta = BigInteger.valueOf(value).subtract(BigInteger.valueOf(minValue));\n          SimpleTextUtil.write(data, encoder.format(delta), scratch);\n          SimpleTextUtil.writeNewline(data);\n          numDocsWritten++;\n        }\n\n        @Override\n        public void finish(FieldInfos fieldInfos, int numDocs) throws IOException {\n          assert numDocs == numDocsWritten;\n          // nocommit: hopefully indexwriter is responsible for \"filling\" like it does stored fields!\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f176b7bac2a187d69335c079b1f923449fb2881f","date":1353257308,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addNumericField(FieldInfo,long,long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addNumericField(FieldInfo,long,long,int).mjava","sourceNew":"    @Override\n    public NumericDocValuesConsumer addNumericField(FieldInfo field, final long minValue, long maxValue) throws IOException {\n      writeFieldEntry(field);\n      \n      // write our minimum value to the .dat, all entries are deltas from that\n      SimpleTextUtil.write(data, MINVALUE);\n      SimpleTextUtil.write(data, Long.toString(minValue), scratch);\n      SimpleTextUtil.writeNewline(data);\n\n      // build up our fixed-width \"simple text packed ints\" format\n      int maxBytesPerValue = BigInteger.valueOf(maxValue).subtract(BigInteger.valueOf(minValue)).toString().length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesPerValue; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern to the .dat\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      return new NumericDocValuesConsumer() {\n        int numDocsWritten = 0;\n\n        @Override\n        public void add(long value) throws IOException {\n          Number delta = BigInteger.valueOf(value).subtract(BigInteger.valueOf(minValue));\n          SimpleTextUtil.write(data, encoder.format(delta), scratch);\n          SimpleTextUtil.writeNewline(data);\n          numDocsWritten++;\n        }\n\n        @Override\n        public void finish() throws IOException {\n          assert numDocs == numDocsWritten;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public NumericDocValuesConsumer addNumericField(FieldInfo field, final long minValue, long maxValue, final int numDocs) throws IOException {\n      writeFieldEntry(field);\n      \n      // write our minimum value to the .dat, all entries are deltas from that\n      SimpleTextUtil.write(data, MINVALUE);\n      SimpleTextUtil.write(data, Long.toString(minValue), scratch);\n      SimpleTextUtil.writeNewline(data);\n\n      // build up our fixed-width \"simple text packed ints\" format\n      int maxBytesPerValue = BigInteger.valueOf(maxValue).subtract(BigInteger.valueOf(minValue)).toString().length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesPerValue; i++) {\n        sb.append('0');\n      }\n      \n      // write our pattern to the .dat\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      return new NumericDocValuesConsumer() {\n        int numDocsWritten = 0;\n\n        @Override\n        public void add(long value) throws IOException {\n          Number delta = BigInteger.valueOf(value).subtract(BigInteger.valueOf(minValue));\n          SimpleTextUtil.write(data, encoder.format(delta), scratch);\n          SimpleTextUtil.writeNewline(data);\n          numDocsWritten++;\n        }\n\n        @Override\n        public void finish() throws IOException {\n          assert numDocs == numDocsWritten;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ce73f585d17f53055185a19beb46db23d76e0ad9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f176b7bac2a187d69335c079b1f923449fb2881f":["ce73f585d17f53055185a19beb46db23d76e0ad9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ce73f585d17f53055185a19beb46db23d76e0ad9":["f176b7bac2a187d69335c079b1f923449fb2881f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ce73f585d17f53055185a19beb46db23d76e0ad9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f176b7bac2a187d69335c079b1f923449fb2881f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f176b7bac2a187d69335c079b1f923449fb2881f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}