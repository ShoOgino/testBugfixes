{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#removeReplica(String,String,Replica.Type,int).mjava","commits":[{"id":"27639bb5e041490ce599065875dd2f6d8beef62a","date":1532829373,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#removeReplica(String,String,Replica.Type,int).mjava","pathOld":"/dev/null","sourceNew":"  // this simulates removing a replica from a node\n  public Row removeReplica(String coll, String shard, Replica.Type type, int recursionCount) {\n    if (recursionCount > 3) {\n      log.error(\"more than 3 levels of recursion \", new RuntimeException());\n      return this;\n    }\n    List<OperationInfo> furtherOps = new LinkedList<>();\n    Consumer<OperationInfo> opCollector = it -> furtherOps.add(it);\n    Row row = session.copy().getNode(this.node);\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.get(coll);\n    if (c == null) return null;\n    List<ReplicaInfo> r = c.get(shard);\n    if (r == null) return null;\n    int idx = -1;\n    for (int i = 0; i < r.size(); i++) {\n      ReplicaInfo info = r.get(i);\n      if (type == null || info.getType() == type) {\n        idx = i;\n        break;\n      }\n    }\n    if (idx == -1) return null;\n    ReplicaInfo removed = r.remove(idx);\n    for (Cell cell : row.cells) {\n      cell.type.projectRemoveReplica(cell, removed, opCollector);\n    }\n    return row;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58e890cd5653ae8550bc6088d739f4eaaf950aff","date":1547036285,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#removeReplica(String,String,Replica.Type,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#removeReplica(String,String,Replica.Type,int).mjava","sourceNew":"  // this simulates removing a replica from a node\n  public Row removeReplica(String coll, String shard, Replica.Type type, int recursionCount) {\n    if (recursionCount > 3) {\n      log.error(\"more than 3 levels of recursion \", new RuntimeException());\n      return this;\n    }\n    List<OperationInfo> furtherOps = new LinkedList<>();\n    Consumer<OperationInfo> opCollector = it -> furtherOps.add(it);\n    Row row = session.copy().getNode(this.node);\n    row.lazyCopyReplicas(coll, shard);\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.get(coll);\n    if (c == null) return null;\n    List<ReplicaInfo> r = c.get(shard);\n    if (r == null) return null;\n    int idx = -1;\n    for (int i = 0; i < r.size(); i++) {\n      ReplicaInfo info = r.get(i);\n      if (type == null || info.getType() == type) {\n        idx = i;\n        break;\n      }\n    }\n    if (idx == -1) return null;\n    ReplicaInfo removed = r.remove(idx);\n    for (Cell cell : row.cells) {\n      cell.type.projectRemoveReplica(cell, removed, opCollector);\n    }\n    return row;\n\n  }\n\n","sourceOld":"  // this simulates removing a replica from a node\n  public Row removeReplica(String coll, String shard, Replica.Type type, int recursionCount) {\n    if (recursionCount > 3) {\n      log.error(\"more than 3 levels of recursion \", new RuntimeException());\n      return this;\n    }\n    List<OperationInfo> furtherOps = new LinkedList<>();\n    Consumer<OperationInfo> opCollector = it -> furtherOps.add(it);\n    Row row = session.copy().getNode(this.node);\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.get(coll);\n    if (c == null) return null;\n    List<ReplicaInfo> r = c.get(shard);\n    if (r == null) return null;\n    int idx = -1;\n    for (int i = 0; i < r.size(); i++) {\n      ReplicaInfo info = r.get(i);\n      if (type == null || info.getType() == type) {\n        idx = i;\n        break;\n      }\n    }\n    if (idx == -1) return null;\n    ReplicaInfo removed = r.remove(idx);\n    for (Cell cell : row.cells) {\n      cell.type.projectRemoveReplica(cell, removed, opCollector);\n    }\n    return row;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#removeReplica(String,String,Replica.Type,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#removeReplica(String,String,Replica.Type,int).mjava","sourceNew":"  // this simulates removing a replica from a node\n  public Row removeReplica(String coll, String shard, Replica.Type type, int recursionCount) {\n    if (recursionCount > 3) {\n      log.error(\"more than 3 levels of recursion \", new RuntimeException());\n      return this;\n    }\n    List<OperationInfo> furtherOps = new LinkedList<>();\n    Consumer<OperationInfo> opCollector = it -> furtherOps.add(it);\n    Row row = session.copy().getNode(this.node);\n    row.lazyCopyReplicas(coll, shard);\n    Map<String, List<Replica>> c = row.collectionVsShardVsReplicas.get(coll);\n    if (c == null) return null;\n    List<Replica> r = c.get(shard);\n    if (r == null) return null;\n    int idx = -1;\n    for (int i = 0; i < r.size(); i++) {\n      Replica info = r.get(i);\n      if (type == null || info.getType() == type) {\n        idx = i;\n        break;\n      }\n    }\n    if (idx == -1) return null;\n    Replica removed = r.remove(idx);\n    for (Cell cell : row.cells) {\n      cell.type.projectRemoveReplica(cell, removed, opCollector);\n    }\n    return row;\n\n  }\n\n","sourceOld":"  // this simulates removing a replica from a node\n  public Row removeReplica(String coll, String shard, Replica.Type type, int recursionCount) {\n    if (recursionCount > 3) {\n      log.error(\"more than 3 levels of recursion \", new RuntimeException());\n      return this;\n    }\n    List<OperationInfo> furtherOps = new LinkedList<>();\n    Consumer<OperationInfo> opCollector = it -> furtherOps.add(it);\n    Row row = session.copy().getNode(this.node);\n    row.lazyCopyReplicas(coll, shard);\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.get(coll);\n    if (c == null) return null;\n    List<ReplicaInfo> r = c.get(shard);\n    if (r == null) return null;\n    int idx = -1;\n    for (int i = 0; i < r.size(); i++) {\n      ReplicaInfo info = r.get(i);\n      if (type == null || info.getType() == type) {\n        idx = i;\n        break;\n      }\n    }\n    if (idx == -1) return null;\n    ReplicaInfo removed = r.remove(idx);\n    for (Cell cell : row.cells) {\n      cell.type.projectRemoveReplica(cell, removed, opCollector);\n    }\n    return row;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#removeReplica(String,String,Replica.Type,int).mjava","sourceNew":null,"sourceOld":"  // this simulates removing a replica from a node\n  public Row removeReplica(String coll, String shard, Replica.Type type, int recursionCount) {\n    if (recursionCount > 3) {\n      log.error(\"more than 3 levels of recursion \", new RuntimeException());\n      return this;\n    }\n    List<OperationInfo> furtherOps = new LinkedList<>();\n    Consumer<OperationInfo> opCollector = it -> furtherOps.add(it);\n    Row row = session.copy().getNode(this.node);\n    row.lazyCopyReplicas(coll, shard);\n    Map<String, List<Replica>> c = row.collectionVsShardVsReplicas.get(coll);\n    if (c == null) return null;\n    List<Replica> r = c.get(shard);\n    if (r == null) return null;\n    int idx = -1;\n    for (int i = 0; i < r.size(); i++) {\n      Replica info = r.get(i);\n      if (type == null || info.getType() == type) {\n        idx = i;\n        break;\n      }\n    }\n    if (idx == -1) return null;\n    Replica removed = r.remove(idx);\n    for (Cell cell : row.cells) {\n      cell.type.projectRemoveReplica(cell, removed, opCollector);\n    }\n    return row;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58e890cd5653ae8550bc6088d739f4eaaf950aff":["27639bb5e041490ce599065875dd2f6d8beef62a"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"27639bb5e041490ce599065875dd2f6d8beef62a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"58e890cd5653ae8550bc6088d739f4eaaf950aff":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["27639bb5e041490ce599065875dd2f6d8beef62a"],"27639bb5e041490ce599065875dd2f6d8beef62a":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}