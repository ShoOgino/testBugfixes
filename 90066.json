{"path":"contrib/queryparser/src/test/org/apache/lucene/queryParser/original/TestMultiFieldQPHelper#testStaticMethod1().mjava","commits":[{"id":"b955a87bc7c5daeda1ed56821ec0bec2e8789e44","date":1249270724,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/original/TestMultiFieldQPHelper#testStaticMethod1().mjava","pathOld":"/dev/null","sourceNew":"  public void testStaticMethod1() throws QueryNodeException {\n    String[] fields = { \"b\", \"t\" };\n    String[] queries = { \"one\", \"two\" };\n    Query q = QueryParserUtil.parse(queries, fields, new StandardAnalyzer());\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = { \"+one\", \"+two\" };\n    q = QueryParserUtil.parse(queries2, fields, new StandardAnalyzer());\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = { \"one\", \"+two\" };\n    q = QueryParserUtil.parse(queries3, fields, new StandardAnalyzer());\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = { \"one +more\", \"+two\" };\n    q = QueryParserUtil.parse(queries4, fields, new StandardAnalyzer());\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = { \"blah\" };\n    try {\n      q = QueryParserUtil.parse(queries5, fields, new StandardAnalyzer());\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n\n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQPHelper.QPTestAnalyzer stopA = new TestQPHelper.QPTestAnalyzer();\n\n    String[] queries6 = { \"((+stop))\", \"+((stop))\" };\n    q = QueryParserUtil.parse(queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n\n    String[] queries7 = { \"one ((+stop)) +more\", \"+((stop)) +two\" };\n    q = QueryParserUtil.parse(queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a","05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8a848e758754282137f42bf85793c278e250390","date":1249640668,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testStaticMethod1().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/original/TestMultiFieldQPHelper#testStaticMethod1().mjava","sourceNew":"  public void testStaticMethod1() throws QueryNodeException {\n    String[] fields = { \"b\", \"t\" };\n    String[] queries = { \"one\", \"two\" };\n    Query q = QueryParserUtil.parse(queries, fields, new StandardAnalyzer());\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = { \"+one\", \"+two\" };\n    q = QueryParserUtil.parse(queries2, fields, new StandardAnalyzer());\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = { \"one\", \"+two\" };\n    q = QueryParserUtil.parse(queries3, fields, new StandardAnalyzer());\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = { \"one +more\", \"+two\" };\n    q = QueryParserUtil.parse(queries4, fields, new StandardAnalyzer());\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = { \"blah\" };\n    try {\n      q = QueryParserUtil.parse(queries5, fields, new StandardAnalyzer());\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n\n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQPHelper.QPTestAnalyzer stopA = new TestQPHelper.QPTestAnalyzer();\n\n    String[] queries6 = { \"((+stop))\", \"+((stop))\" };\n    q = QueryParserUtil.parse(queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n\n    String[] queries7 = { \"one ((+stop)) +more\", \"+((stop)) +two\" };\n    q = QueryParserUtil.parse(queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","sourceOld":"  public void testStaticMethod1() throws QueryNodeException {\n    String[] fields = { \"b\", \"t\" };\n    String[] queries = { \"one\", \"two\" };\n    Query q = QueryParserUtil.parse(queries, fields, new StandardAnalyzer());\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = { \"+one\", \"+two\" };\n    q = QueryParserUtil.parse(queries2, fields, new StandardAnalyzer());\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = { \"one\", \"+two\" };\n    q = QueryParserUtil.parse(queries3, fields, new StandardAnalyzer());\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = { \"one +more\", \"+two\" };\n    q = QueryParserUtil.parse(queries4, fields, new StandardAnalyzer());\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = { \"blah\" };\n    try {\n      q = QueryParserUtil.parse(queries5, fields, new StandardAnalyzer());\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n\n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQPHelper.QPTestAnalyzer stopA = new TestQPHelper.QPTestAnalyzer();\n\n    String[] queries6 = { \"((+stop))\", \"+((stop))\" };\n    q = QueryParserUtil.parse(queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n\n    String[] queries7 = { \"one ((+stop)) +more\", \"+((stop)) +two\" };\n    q = QueryParserUtil.parse(queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e8a848e758754282137f42bf85793c278e250390":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b955a87bc7c5daeda1ed56821ec0bec2e8789e44":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e8a848e758754282137f42bf85793c278e250390"]},"commit2Childs":{"e8a848e758754282137f42bf85793c278e250390":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"b955a87bc7c5daeda1ed56821ec0bec2e8789e44":["e8a848e758754282137f42bf85793c278e250390"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}