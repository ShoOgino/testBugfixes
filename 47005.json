{"path":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","sourceNew":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    final int count = merge.segments.size();\n    boolean isExternal = false;\n    for(int i=0;i<count;i++) {\n      final SegmentInfo info = merge.segments.info(i);\n      if (mergingSegments.contains(info))\n        return false;\n      if (segmentInfos.indexOf(info) == -1)\n        return false;\n      if (info.dir != directory)\n        isExternal = true;\n    }\n\n    ensureContiguousMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    for(int i=0;i<count;i++)\n      mergingSegments.add(merge.segments.info(i));\n\n    // Merge is now registered\n    merge.registerDone = true;\n    return true;\n  }\n\n","sourceOld":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    final int count = merge.segments.size();\n    boolean isExternal = false;\n    for(int i=0;i<count;i++) {\n      final SegmentInfo info = merge.segments.info(i);\n      if (mergingSegments.contains(info))\n        return false;\n      if (segmentInfos.indexOf(info) == -1)\n        return false;\n      if (info.dir != directory)\n        isExternal = true;\n    }\n\n    ensureContiguousMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    for(int i=0;i<count;i++)\n      mergingSegments.add(merge.segments.info(i));\n\n    // Merge is now registered\n    merge.registerDone = true;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#registerMerge(MergePolicy.OneMerge).mjava","sourceNew":null,"sourceOld":"  /** Checks whether this merge involves any segments\n   *  already participating in a merge.  If not, this merge\n   *  is \"registered\", meaning we record that its segments\n   *  are now participating in a merge, and true is\n   *  returned.  Else (the merge conflicts) false is\n   *  returned. */\n  final synchronized boolean registerMerge(MergePolicy.OneMerge merge) throws MergePolicy.MergeAbortedException {\n\n    if (merge.registerDone)\n      return true;\n\n    if (stopMerges) {\n      merge.abort();\n      throw new MergePolicy.MergeAbortedException(\"merge is aborted: \" + merge.segString(directory));\n    }\n\n    final int count = merge.segments.size();\n    boolean isExternal = false;\n    for(int i=0;i<count;i++) {\n      final SegmentInfo info = merge.segments.info(i);\n      if (mergingSegments.contains(info))\n        return false;\n      if (segmentInfos.indexOf(info) == -1)\n        return false;\n      if (info.dir != directory)\n        isExternal = true;\n    }\n\n    ensureContiguousMerge(merge);\n\n    pendingMerges.add(merge);\n\n    if (infoStream != null)\n      message(\"add merge to pendingMerges: \" + merge.segString(directory) + \" [total \" + pendingMerges.size() + \" pending]\");\n\n    merge.mergeGen = mergeGen;\n    merge.isExternal = isExternal;\n\n    // OK it does not conflict; now record that this merge\n    // is running (while synchronized) to avoid race\n    // condition where two conflicting merges from different\n    // threads, start\n    for(int i=0;i<count;i++)\n      mergingSegments.add(merge.segments.info(i));\n\n    // Merge is now registered\n    merge.registerDone = true;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}