{"path":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#highlightWithoutSearcher(String,Query,String,int).mjava","commits":[{"id":"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","date":1475611903,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#highlightWithoutSearcher(String,Query,String,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Highlights text passed as a parameter.  This requires the {@link IndexSearcher} provided to this highlighter is\n   * null.  This use-case is more rare.  Naturally, the mode of operation will be {@link OffsetSource#ANALYSIS}.\n   * The result of this method is whatever the {@link PassageFormatter} returns.  For the {@link\n   * DefaultPassageFormatter} and assuming {@code content} has non-zero length, the result will be a non-null\n   * string -- so it's safe to call {@link Object#toString()} on it in that case.\n   *\n   * @param field       field name to highlight (as found in the query).\n   * @param query       query to highlight.\n   * @param content     text to highlight.\n   * @param maxPassages The maximum number of top-N ranked passages used to\n   *                    form the highlighted snippets.\n   * @return result of the {@link PassageFormatter} -- probably a String.  Might be null.\n   * @throws IOException if an I/O error occurred during processing\n   */\n  //TODO make content a List? and return a List? and ensure getEmptyHighlight is never invoked multiple times?\n  public Object highlightWithoutSearcher(String field, Query query, String content, int maxPassages)\n      throws IOException {\n    if (this.searcher != null) {\n      throw new IllegalStateException(\"highlightWithoutSearcher should only be called on a \" +\n          getClass().getSimpleName() + \" without an IndexSearcher.\");\n    }\n    Objects.requireNonNull(content, \"content is required\");\n    SortedSet<Term> queryTerms = extractTerms(query);\n    return getFieldHighlighter(field, query, queryTerms, maxPassages)\n        .highlightFieldForDoc(null, -1, content);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#highlightWithoutSearcher(String,Query,String,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Highlights text passed as a parameter.  This requires the {@link IndexSearcher} provided to this highlighter is\n   * null.  This use-case is more rare.  Naturally, the mode of operation will be {@link OffsetSource#ANALYSIS}.\n   * The result of this method is whatever the {@link PassageFormatter} returns.  For the {@link\n   * DefaultPassageFormatter} and assuming {@code content} has non-zero length, the result will be a non-null\n   * string -- so it's safe to call {@link Object#toString()} on it in that case.\n   *\n   * @param field       field name to highlight (as found in the query).\n   * @param query       query to highlight.\n   * @param content     text to highlight.\n   * @param maxPassages The maximum number of top-N ranked passages used to\n   *                    form the highlighted snippets.\n   * @return result of the {@link PassageFormatter} -- probably a String.  Might be null.\n   * @throws IOException if an I/O error occurred during processing\n   */\n  //TODO make content a List? and return a List? and ensure getEmptyHighlight is never invoked multiple times?\n  public Object highlightWithoutSearcher(String field, Query query, String content, int maxPassages)\n      throws IOException {\n    if (this.searcher != null) {\n      throw new IllegalStateException(\"highlightWithoutSearcher should only be called on a \" +\n          getClass().getSimpleName() + \" without an IndexSearcher.\");\n    }\n    Objects.requireNonNull(content, \"content is required\");\n    SortedSet<Term> queryTerms = extractTerms(query);\n    return getFieldHighlighter(field, query, queryTerms, maxPassages)\n        .highlightFieldForDoc(null, -1, content);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5675b3bced0b155f0ff8001ce2e1e502be7c92f6","date":1480972317,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#highlightWithoutSearcher(String,Query,String,int).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#highlightWithoutSearcher(String,Query,String,int).mjava","sourceNew":"  /**\n   * Highlights text passed as a parameter.  This requires the {@link IndexSearcher} provided to this highlighter is\n   * null.  This use-case is more rare.  Naturally, the mode of operation will be {@link OffsetSource#ANALYSIS}.\n   * The result of this method is whatever the {@link PassageFormatter} returns.  For the {@link\n   * DefaultPassageFormatter} and assuming {@code content} has non-zero length, the result will be a non-null\n   * string -- so it's safe to call {@link Object#toString()} on it in that case.\n   *\n   * @param field       field name to highlight (as found in the query).\n   * @param query       query to highlight.\n   * @param content     text to highlight.\n   * @param maxPassages The maximum number of top-N ranked passages used to\n   *                    form the highlighted snippets.\n   * @return result of the {@link PassageFormatter} -- probably a String.  Might be null.\n   * @throws IOException if an I/O error occurred during processing\n   */\n  //TODO make content a List? and return a List? and ensure getEmptyHighlight is never invoked multiple times?\n  public Object highlightWithoutSearcher(String field, Query query, String content, int maxPassages)\n      throws IOException {\n    if (this.searcher != null) {\n      throw new IllegalStateException(\"highlightWithoutSearcher should only be called on a \" +\n          getClass().getSimpleName() + \" without an IndexSearcher.\");\n    }\n    Objects.requireNonNull(content, \"content is required\");\n    Set<Term> queryTerms = extractTerms(query);\n    return getFieldHighlighter(field, query, queryTerms, maxPassages)\n        .highlightFieldForDoc(null, -1, content);\n  }\n\n","sourceOld":"  /**\n   * Highlights text passed as a parameter.  This requires the {@link IndexSearcher} provided to this highlighter is\n   * null.  This use-case is more rare.  Naturally, the mode of operation will be {@link OffsetSource#ANALYSIS}.\n   * The result of this method is whatever the {@link PassageFormatter} returns.  For the {@link\n   * DefaultPassageFormatter} and assuming {@code content} has non-zero length, the result will be a non-null\n   * string -- so it's safe to call {@link Object#toString()} on it in that case.\n   *\n   * @param field       field name to highlight (as found in the query).\n   * @param query       query to highlight.\n   * @param content     text to highlight.\n   * @param maxPassages The maximum number of top-N ranked passages used to\n   *                    form the highlighted snippets.\n   * @return result of the {@link PassageFormatter} -- probably a String.  Might be null.\n   * @throws IOException if an I/O error occurred during processing\n   */\n  //TODO make content a List? and return a List? and ensure getEmptyHighlight is never invoked multiple times?\n  public Object highlightWithoutSearcher(String field, Query query, String content, int maxPassages)\n      throws IOException {\n    if (this.searcher != null) {\n      throw new IllegalStateException(\"highlightWithoutSearcher should only be called on a \" +\n          getClass().getSimpleName() + \" without an IndexSearcher.\");\n    }\n    Objects.requireNonNull(content, \"content is required\");\n    SortedSet<Term> queryTerms = extractTerms(query);\n    return getFieldHighlighter(field, query, queryTerms, maxPassages)\n        .highlightFieldForDoc(null, -1, content);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d","date":1481116359,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#highlightWithoutSearcher(String,Query,String,int).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#highlightWithoutSearcher(String,Query,String,int).mjava","sourceNew":"  /**\n   * Highlights text passed as a parameter.  This requires the {@link IndexSearcher} provided to this highlighter is\n   * null.  This use-case is more rare.  Naturally, the mode of operation will be {@link OffsetSource#ANALYSIS}.\n   * The result of this method is whatever the {@link PassageFormatter} returns.  For the {@link\n   * DefaultPassageFormatter} and assuming {@code content} has non-zero length, the result will be a non-null\n   * string -- so it's safe to call {@link Object#toString()} on it in that case.\n   *\n   * @param field       field name to highlight (as found in the query).\n   * @param query       query to highlight.\n   * @param content     text to highlight.\n   * @param maxPassages The maximum number of top-N ranked passages used to\n   *                    form the highlighted snippets.\n   * @return result of the {@link PassageFormatter} -- probably a String.  Might be null.\n   * @throws IOException if an I/O error occurred during processing\n   */\n  //TODO make content a List? and return a List? and ensure getEmptyHighlight is never invoked multiple times?\n  public Object highlightWithoutSearcher(String field, Query query, String content, int maxPassages)\n      throws IOException {\n    if (this.searcher != null) {\n      throw new IllegalStateException(\"highlightWithoutSearcher should only be called on a \" +\n          getClass().getSimpleName() + \" without an IndexSearcher.\");\n    }\n    Objects.requireNonNull(content, \"content is required\");\n    Set<Term> queryTerms = extractTerms(query);\n    return getFieldHighlighter(field, query, queryTerms, maxPassages)\n        .highlightFieldForDoc(null, -1, content);\n  }\n\n","sourceOld":"  /**\n   * Highlights text passed as a parameter.  This requires the {@link IndexSearcher} provided to this highlighter is\n   * null.  This use-case is more rare.  Naturally, the mode of operation will be {@link OffsetSource#ANALYSIS}.\n   * The result of this method is whatever the {@link PassageFormatter} returns.  For the {@link\n   * DefaultPassageFormatter} and assuming {@code content} has non-zero length, the result will be a non-null\n   * string -- so it's safe to call {@link Object#toString()} on it in that case.\n   *\n   * @param field       field name to highlight (as found in the query).\n   * @param query       query to highlight.\n   * @param content     text to highlight.\n   * @param maxPassages The maximum number of top-N ranked passages used to\n   *                    form the highlighted snippets.\n   * @return result of the {@link PassageFormatter} -- probably a String.  Might be null.\n   * @throws IOException if an I/O error occurred during processing\n   */\n  //TODO make content a List? and return a List? and ensure getEmptyHighlight is never invoked multiple times?\n  public Object highlightWithoutSearcher(String field, Query query, String content, int maxPassages)\n      throws IOException {\n    if (this.searcher != null) {\n      throw new IllegalStateException(\"highlightWithoutSearcher should only be called on a \" +\n          getClass().getSimpleName() + \" without an IndexSearcher.\");\n    }\n    Objects.requireNonNull(content, \"content is required\");\n    SortedSet<Term> queryTerms = extractTerms(query);\n    return getFieldHighlighter(field, query, queryTerms, maxPassages)\n        .highlightFieldForDoc(null, -1, content);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#highlightWithoutSearcher(String,Query,String,int).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#highlightWithoutSearcher(String,Query,String,int).mjava","sourceNew":"  /**\n   * Highlights text passed as a parameter.  This requires the {@link IndexSearcher} provided to this highlighter is\n   * null.  This use-case is more rare.  Naturally, the mode of operation will be {@link OffsetSource#ANALYSIS}.\n   * The result of this method is whatever the {@link PassageFormatter} returns.  For the {@link\n   * DefaultPassageFormatter} and assuming {@code content} has non-zero length, the result will be a non-null\n   * string -- so it's safe to call {@link Object#toString()} on it in that case.\n   *\n   * @param field       field name to highlight (as found in the query).\n   * @param query       query to highlight.\n   * @param content     text to highlight.\n   * @param maxPassages The maximum number of top-N ranked passages used to\n   *                    form the highlighted snippets.\n   * @return result of the {@link PassageFormatter} -- probably a String.  Might be null.\n   * @throws IOException if an I/O error occurred during processing\n   */\n  //TODO make content a List? and return a List? and ensure getEmptyHighlight is never invoked multiple times?\n  public Object highlightWithoutSearcher(String field, Query query, String content, int maxPassages)\n      throws IOException {\n    if (this.searcher != null) {\n      throw new IllegalStateException(\"highlightWithoutSearcher should only be called on a \" +\n          getClass().getSimpleName() + \" without an IndexSearcher.\");\n    }\n    Objects.requireNonNull(content, \"content is required\");\n    Set<Term> queryTerms = extractTerms(query);\n    return getFieldHighlighter(field, query, queryTerms, maxPassages)\n        .highlightFieldForDoc(null, -1, content);\n  }\n\n","sourceOld":"  /**\n   * Highlights text passed as a parameter.  This requires the {@link IndexSearcher} provided to this highlighter is\n   * null.  This use-case is more rare.  Naturally, the mode of operation will be {@link OffsetSource#ANALYSIS}.\n   * The result of this method is whatever the {@link PassageFormatter} returns.  For the {@link\n   * DefaultPassageFormatter} and assuming {@code content} has non-zero length, the result will be a non-null\n   * string -- so it's safe to call {@link Object#toString()} on it in that case.\n   *\n   * @param field       field name to highlight (as found in the query).\n   * @param query       query to highlight.\n   * @param content     text to highlight.\n   * @param maxPassages The maximum number of top-N ranked passages used to\n   *                    form the highlighted snippets.\n   * @return result of the {@link PassageFormatter} -- probably a String.  Might be null.\n   * @throws IOException if an I/O error occurred during processing\n   */\n  //TODO make content a List? and return a List? and ensure getEmptyHighlight is never invoked multiple times?\n  public Object highlightWithoutSearcher(String field, Query query, String content, int maxPassages)\n      throws IOException {\n    if (this.searcher != null) {\n      throw new IllegalStateException(\"highlightWithoutSearcher should only be called on a \" +\n          getClass().getSimpleName() + \" without an IndexSearcher.\");\n    }\n    Objects.requireNonNull(content, \"content is required\");\n    SortedSet<Term> queryTerms = extractTerms(query);\n    return getFieldHighlighter(field, query, queryTerms, maxPassages)\n        .highlightFieldForDoc(null, -1, content);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5675b3bced0b155f0ff8001ce2e1e502be7c92f6":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","5675b3bced0b155f0ff8001ce2e1e502be7c92f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9856095f7afb5a607bf5e65077615ed91273508c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d"]},"commit2Childs":{"5675b3bced0b155f0ff8001ce2e1e502be7c92f6":["ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d"],"ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["5675b3bced0b155f0ff8001ce2e1e502be7c92f6","ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9856095f7afb5a607bf5e65077615ed91273508c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}